-- MySQL dump 10.14  Distrib 5.5.46-MariaDB, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: wallabag
-- ------------------------------------------------------
-- Server version	5.5.46-MariaDB-1ubuntu0.14.04.2

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `config`
--

DROP TABLE IF EXISTS `config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `config` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `value` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `config`
--

LOCK TABLES `config` WRITE;
/*!40000 ALTER TABLE `config` DISABLE KEYS */;
/*!40000 ALTER TABLE `config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `entries`
--

DROP TABLE IF EXISTS `entries`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `entries` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `url` varchar(255) NOT NULL,
  `is_read` tinyint(1) NOT NULL DEFAULT '0',
  `is_fav` tinyint(1) NOT NULL DEFAULT '0',
  `content` blob NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=283 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `entries`
--

LOCK TABLES `entries` WRITE;
/*!40000 ALTER TABLE `entries` DISABLE KEYS */;
INSERT INTO `entries` VALUES (4,'kripken/sql.js','https://github.com/kripken/sql.js',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"http://travis-ci.org/kripken/sql.js\"><img src=\"https://camo.githubusercontent.com/3302ff02441b6c4fca8bd71307e67a2033b03d64/68747470733a2f2f7472617669732d63692e6f72672f6b7269706b656e2f73716c2e6a732e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a></p>\n\n<p>For the impatients, try the demo here: <a href=\"http://kripken.github.io/sql.js/GUI/\">http://kripken.github.io/sql.js/GUI/</a></p>\n\n<p>sql.js is a port of SQLite to JavaScript, by compiling the SQLite C code with Emscripten.\nno C bindings or node-gyp compilation here.</p>\n\n<p>SQLite is public domain, sql.js is MIT licensed.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<div class=\"highlight highlight-javascript\"><pre><span class=\"pl-k\">var</span> sql <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>sql.js<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-c\">// or sql = window.SQL if you are in a browser</span>\n\n<span class=\"pl-c\">// Create a database</span>\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">sql.Database</span>();\n<span class=\"pl-c\">// NOTE: You can also use new sql.Database(data) where</span>\n<span class=\"pl-c\">// data is an Uint8Array representing an SQLite database file</span>\n\n<span class=\"pl-c\">// Execute some sql</span>\nsqlstr <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CREATE TABLE hello (a int, b char);<span class=\"pl-pds\">\"</span></span>;\nsqlstr <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>INSERT INTO hello VALUES (0, \'hello\');<span class=\"pl-pds\">\"</span></span>\nsqlstr <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>INSERT INTO hello VALUES (1, \'world\');<span class=\"pl-pds\">\"</span></span>\ndb.run(sqlstr); <span class=\"pl-c\">// Run the query without returning anything</span>\n\n<span class=\"pl-k\">var</span> res <span class=\"pl-k\">=</span> db.<span class=\"pl-c1\">exec</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SELECT * FROM hello<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-c\">/*</span>\n<span class=\"pl-c\">[</span>\n<span class=\"pl-c\">    {columns:[\'a\',\'b\'], values:[[0,\'hello\'],[1,\'world\']]}</span>\n<span class=\"pl-c\">]</span>\n<span class=\"pl-c\">*/</span>\n\n<span class=\"pl-c\">// Prepare an sql statement</span>\n<span class=\"pl-k\">var</span> stmt <span class=\"pl-k\">=</span> db.prepare(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SELECT * FROM hello WHERE a=:aval AND b=:bval<span class=\"pl-pds\">\"</span></span>);\n\n<span class=\"pl-c\">// Bind values to the parameters and fetch the results of the query</span>\n<span class=\"pl-k\">var</span> result <span class=\"pl-k\">=</span> stmt.getAsObject({<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>:aval<span class=\"pl-pds\">\'</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>:bval<span class=\"pl-pds\">\'</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>world<span class=\"pl-pds\">\'</span></span>});\n<span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(result); <span class=\"pl-c\">// Will print {a:1, b:\'world\'}</span>\n\n<span class=\"pl-c\">// Bind other values</span>\nstmt.bind([<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>hello<span class=\"pl-pds\">\'</span></span>]);\n<span class=\"pl-k\">while</span> (stmt.step()) <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(stmt.get()); <span class=\"pl-c\">// Will print [0, \'hello\']</span>\n\n<span class=\"pl-c\">// free the memory used by the statement</span>\nstmt.free();\n<span class=\"pl-c\">// You can not use your statement anymore once it has been freed.</span>\n<span class=\"pl-c\">// But not freeing your statements causes memory leaks. You don\'t want that.</span>\n\n<span class=\"pl-c\">// Export the database to an Uint8Array containing the SQLite database file</span>\n<span class=\"pl-k\">var</span> binaryArray <span class=\"pl-k\">=</span> db.export();</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#demo\"><span class=\"octicon octicon-link\"></span></a>Demo</h2>\n\n<p>There is an online demo available here : <a href=\"http://kripken.github.io/sql.js/GUI\">http://kripken.github.io/sql.js/GUI</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#examples\"><span class=\"octicon octicon-link\"></span></a>Examples</h2>\n\n<p>The test files provide up to date example of the use of the api.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#inside-the-browser\"><span class=\"octicon octicon-link\"></span></a>Inside the browser</h3>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#example-html-file\"><span class=\"octicon octicon-link\"></span></a>Example <strong>HTML</strong> file:</h4>\n\n<div class=\"highlight highlight-html\"><pre>&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>js/sql.js<span class=\"pl-pds\">\'</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;\n<span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;</span>\n<span class=\"pl-s1\">    <span class=\"pl-c\">//Create the database</span></span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SQL.Database</span>();</span>\n<span class=\"pl-s1\">    <span class=\"pl-c\">// Run a query without reading the results</span></span>\n<span class=\"pl-s1\">    db.run(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CREATE TABLE test (col1, col2);<span class=\"pl-pds\">\"</span></span>);</span>\n<span class=\"pl-s1\">    <span class=\"pl-c\">// Insert two rows: (1,111) and (2,222)</span></span>\n<span class=\"pl-s1\">    db.run(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>INSERT INTO test VALUES (?,?), (?,?)<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">111</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">222</span>]);</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">    <span class=\"pl-c\">// Prepare a statement</span></span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">var</span> stmt <span class=\"pl-k\">=</span> db.prepare(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SELECT * FROM test WHERE col1 BETWEEN $start AND $end<span class=\"pl-pds\">\"</span></span>);</span>\n<span class=\"pl-s1\">    stmt.getAsObject({$start<span class=\"pl-k\">:</span><span class=\"pl-c1\">1</span>, $end<span class=\"pl-k\">:</span><span class=\"pl-c1\">1</span>}); <span class=\"pl-c\">// {col1:1, col2:111}</span></span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">    <span class=\"pl-c\">// Bind new values</span></span>\n<span class=\"pl-s1\">    stmt.bind({$start<span class=\"pl-k\">:</span><span class=\"pl-c1\">1</span>, $end<span class=\"pl-k\">:</span><span class=\"pl-c1\">2</span>});</span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">while</span>(stmt.step()) { <span class=\"pl-c\">//</span></span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">var</span> row <span class=\"pl-k\">=</span> stmt.getAsObject();</span>\n<span class=\"pl-s1\">        <span class=\"pl-c\">// [...] do something with the row of result</span></span>\n<span class=\"pl-s1\">    }</span>\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#creating-a-database-from-a-file-choosen-by-the-user\"><span class=\"octicon octicon-link\"></span></a>Creating a database from a file choosen by the user</h4>\n\n<p><code>SQL.Database</code> constructor takes an array of integer representing a database file as an optional parameter.\nThe following code uses an HTML input as the source for loading a database:</p>\n\n<div class=\"highlight highlight-javascript\"><pre><span class=\"pl-c1\">dbFileElm</span>.<span class=\"pl-en\">onchange</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">var</span> f <span class=\"pl-k\">=</span> dbFileElm.files[<span class=\"pl-c1\">0</span>];\n    <span class=\"pl-k\">var</span> r <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">FileReader</span>();\n    <span class=\"pl-c1\">r</span>.<span class=\"pl-en\">onload</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n        <span class=\"pl-k\">var</span> Uints <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Uint8Array</span>(r.result);\n        db <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SQL.Database</span>(Uints);\n    }\n    r.readAsArrayBuffer(f);\n}</pre></div>\n\n<p>See : <a href=\"http://kripken.github.io/sql.js/GUI/gui.js\">http://kripken.github.io/sql.js/GUI/gui.js</a></p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#loading-a-database-from-a-server\"><span class=\"octicon octicon-link\"></span></a>Loading a database from a server</h4>\n\n<div class=\"highlight highlight-javascript\"><pre><span class=\"pl-k\">var</span> xhr <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">XMLHttpRequest</span>();\nxhr.<span class=\"pl-c1\">open</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>GET<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>/path/to/database.sqlite<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-c1\">true</span>);\nxhr.responseType <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>arraybuffer<span class=\"pl-pds\">\'</span></span>;\n\n<span class=\"pl-c1\">xhr</span>.<span class=\"pl-en\">onload</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">e</span>) {\n  <span class=\"pl-k\">var</span> uInt8Array <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Uint8Array</span>(<span class=\"pl-v\">this</span>.response);\n  <span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SQL.Database</span>(uInt8Array);\n  <span class=\"pl-k\">var</span> contents <span class=\"pl-k\">=</span> db.<span class=\"pl-c1\">exec</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SELECT * FROM my_table<span class=\"pl-pds\">\"</span></span>);\n  <span class=\"pl-c\">// contents is now [{columns:[\'col1\',\'col2\',...], values:[[first row], [second row], ...]}]</span>\n};\nxhr.<span class=\"pl-c1\">send</span>();</pre></div>\n\n<p>See: <a href=\"https://github.com/kripken/sql.js/wiki/Load-a-database-from-the-server\">https://github.com/kripken/sql.js/wiki/Load-a-database-from-the-server</a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#use-from-nodejs\"><span class=\"octicon octicon-link\"></span></a>Use from node.js</h3>\n\n<p><code>sql.js</code> is <a href=\"https://www.npmjs.org/package/sql.js\">hosted on npm</a>. To install it, you can simply run <code>npm install sql.js</code>.\nAlternatively, you can simply download the file <code>sql.js</code>, from the download link below.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#read-a-database-from-the-disk\"><span class=\"octicon octicon-link\"></span></a>read a database from the disk:</h4>\n\n<div class=\"highlight highlight-javascript\"><pre><span class=\"pl-k\">var</span> fs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>fs<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> <span class=\"pl-c1\">SQL</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>sql.js<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> filebuffer <span class=\"pl-k\">=</span> fs.readFileSync(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test.sqlite<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-c\">// Load the db</span>\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SQL.Database</span>(filebuffer);</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#write-a-database-to-the-disk\"><span class=\"octicon octicon-link\"></span></a>write a database to the disk</h4>\n\n<p>You need to convert the result of <code>db.export</code> to a buffer</p>\n\n<div class=\"highlight highlight-javascript\"><pre><span class=\"pl-k\">var</span> fs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fs<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-c\">// [...] (create the database)</span>\n<span class=\"pl-k\">var</span> data <span class=\"pl-k\">=</span> db.export();\n<span class=\"pl-k\">var</span> buffer <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Buffer</span>(data);\nfs.writeFileSync(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>filename.sqlite<span class=\"pl-pds\">\"</span></span>, buffer);</pre></div>\n\n<p>See : <a href=\"https://github.com/kripken/sql.js/blob/master/test/test_node_file.js\">https://github.com/kripken/sql.js/blob/master/test/test_node_file.js</a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#use-as-web-worker\"><span class=\"octicon octicon-link\"></span></a>Use as web worker</h3>\n\n<p>If you don\'t want to run CPU-intensive SQL queries in your main application thread,\nyou can use the <em>more limited</em> WebWorker API.</p>\n\n<p>You will need to download <code>worker.sql.js</code></p>\n\n<p>Example:</p>\n\n<div class=\"highlight highlight-html\"><pre><span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;</span>\n<span class=\"pl-s1\"><span class=\"pl-k\">var</span> worker <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Worker</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>js/worker.sql.js<span class=\"pl-pds\">\"</span></span>); <span class=\"pl-c\">// You can find worker.sql.js in this repo</span></span>\n<span class=\"pl-s1\"><span class=\"pl-c1\">worker</span>.<span class=\"pl-en\">onmessage</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {</span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Database opened<span class=\"pl-pds\">\"</span></span>);</span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\">worker</span>.<span class=\"pl-en\">onmessage</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">event</span>){</span>\n<span class=\"pl-s1\">        <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(<span class=\"pl-c1\">event</span>.<span class=\"pl-c1\">data</span>); <span class=\"pl-c\">// The result of the query</span></span>\n<span class=\"pl-s1\">    };</span>\n<span class=\"pl-s1\">    worker.postMessage({</span>\n<span class=\"pl-s1\">        id<span class=\"pl-k\">:</span> <span class=\"pl-c1\">2</span>,</span>\n<span class=\"pl-s1\">        action<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>exec<span class=\"pl-pds\">\'</span></span>,</span>\n<span class=\"pl-s1\">        sql<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>SELECT * FROM test<span class=\"pl-pds\">\'</span></span></span>\n<span class=\"pl-s1\">    });</span>\n<span class=\"pl-s1\">};</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\"><span class=\"pl-c1\">worker</span>.<span class=\"pl-en\">onerror</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">e</span>) {<span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Worker error: <span class=\"pl-pds\">\"</span></span>, e)};</span>\n<span class=\"pl-s1\">worker.postMessage({</span>\n<span class=\"pl-s1\">    id<span class=\"pl-k\">:</span><span class=\"pl-c1\">1</span>,</span>\n<span class=\"pl-s1\">    action<span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>open<span class=\"pl-pds\">\'</span></span>,</span>\n<span class=\"pl-s1\">    buffer<span class=\"pl-k\">:</span>buf, <span class=\"pl-c\">/*Optional. An ArrayBuffer representing an SQLite Database file*/</span></span>\n<span class=\"pl-s1\">});</span>\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n\n<p>See : <a href=\"https://github.com/kripken/sql.js/blob/master/test/test_worker.js\">https://github.com/kripken/sql.js/blob/master/test/test_worker.js</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#documentation\"><span class=\"octicon octicon-link\"></span></a>Documentation</h2>\n\n<p>The API is fully documented here : <a href=\"http://kripken.github.io/sql.js/documentation/\">http://kripken.github.io/sql.js/documentation/</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#downloads\"><span class=\"octicon octicon-link\"></span></a>Downloads</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#differences-from-the-original-sqljs\"><span class=\"octicon octicon-link\"></span></a>Differences from the original sql.js</h2>\n\n<ul><li>Support for BLOBs</li>\n<li>Support for prepared statements</li>\n<li>Cleaner API</li>\n<li>More recent version of SQLite (3.8.4)</li>\n<li>Compiled to asm.js (should be faster, at least on firefox)</li>\n<li>Changed API. Results now have the form <code>[{\'columns\':[], values:[]}]</code></li>\n<li>Improved GUI of the demo. It now has :\n\n<ul><li>syntax highlighting</li>\n<li>nice HTML tables to display results</li>\n<li>ability to load and save sqlite database files</li>\n</ul></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/kripken/sql.js#related\"><span class=\"octicon octicon-link\"></span></a>Related</h2>\n\n',1),(5,'timothycrosley/hug','https://github.com/timothycrosley/hug?branch=develop',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"http://badge.fury.io/py/hug\"><img src=\"https://camo.githubusercontent.com/33beec3b46a0d42e452c663d5fe59277a5660f18/68747470733a2f2f62616467652e667572792e696f2f70792f6875672e706e67\" alt=\"PyPI version\" /></a>\n<a href=\"https://travis-ci.org/timothycrosley/hug\"><img src=\"https://camo.githubusercontent.com/c4a0c88447376034d43f0f35e1cc13fa02fbc895/68747470733a2f2f7472617669732d63692e6f72672f74696d6f74687963726f736c65792f6875672e706e673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a>\n<a href=\"https://coveralls.io/github/timothycrosley/hug?branch=master\"><img src=\"https://camo.githubusercontent.com/70150ad68b036ba35139fa19cf8719a17b79af28/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f74696d6f74687963726f736c65792f6875672f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\" alt=\"Coverage Status\" /></a>\n<a href=\"https://pypi.python.org/pypi/hug/\"><img src=\"https://camo.githubusercontent.com/b0224997019dec4e51d692c722ea9bee2818c837/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667\" alt=\"License\" /></a>\n<a href=\"https://gitter.im/timothycrosley/hug?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Join the chat at https://gitter.im/timothycrosley/hug\" /></a></p>\n\n<p>Hug aims to make developing Python driven APIs as simple as possible, but no simpler. As a result, it drastically simplifies Python API development.</p>\n\n<p>Hug\'s Design Objectives:</p>\n\n<ul><li>Make developing a Python driven API as succinct as a written definition.</li>\n<li>The framework should encourage code that self-documents.</li>\n<li>It should be fast. Never should a developer feel the need to look somewhere else for performance reasons.</li>\n<li>Writing tests for APIs written on-top of Hug should be easy and intuitive.</li>\n<li>Magic done once, in an API framework, is better then pushing the problem set to the user of the API framework.</li>\n<li>Be the basis for next generation Python APIs, embracing the latest technology.</li>\n</ul><p>As a result of these goals Hug is Python3+ only and uses Falcon under the cover to quickly handle requests.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/e56234bd7f5ccb5768978d3f23eb94c1d15430ed/68747470733a2f2f7261772e6769746875622e636f6d2f74696d6f74687963726f736c65792f6875672f646576656c6f702f6578616d706c652e676966\"><img src=\"https://camo.githubusercontent.com/e56234bd7f5ccb5768978d3f23eb94c1d15430ed/68747470733a2f2f7261772e6769746875622e636f6d2f74696d6f74687963726f736c65792f6875672f646576656c6f702f6578616d706c652e676966\" alt=\"HUG Hello World Example\" /></a></p>\n\n\n\n<p>Installing Hug is as simple as:</p>\n\n<pre><code>pip3 install hug --upgrade\n</code></pre>\n\n<p>Ideally, within a virtual environment.</p>\n\n\n\n<p>happy_birthday.py</p>\n\n<pre><code>\"\"\"A basic (single function) API written using Hug\"\"\"\nimport hug\n\n\n@hug.get(\'/happy_birthday\')\ndef happy_birthday(name, age:hug.types.number=1):\n    \"\"\"Says happy birthday to a user\"\"\"\n    return \"Happy {age} Birthday {name}!\".format(**locals())\n</code></pre>\n\n<p>To run the example:</p>\n\n<pre><code>hug -f happy_birthday.py\n</code></pre>\n\n<p>Then you can access the example from localhost:8000/happy_birthday?name=Hug&amp;age=1\nOr access the documentation for your API from localhost:8000/documentation</p>\n\n\n\n<p>versioning_example.py</p>\n\n<pre><code>\"\"\"A simple example of a hug API call with versioning\"\"\"\n\n\n@hug.get(\'/echo\', versions=1)\ndef echo(text):\n    return text\n\n\n@hug.get(\'/echo\', versions=range(2, 5))\ndef echo(text):\n    return \"Echo: {text}\".format(**locals())\n</code></pre>\n\n<p>To run the example:</p>\n\n<pre><code>hug -f versioning_example.py\n</code></pre>\n\n<p>Then you can access the example from localhost:8000/v1/echo?text=Hi / localhost:8000/v2/echo?text=Hi\nOr access the documentation for your API from localhost:8000</p>\n\n<p>Note: versioning in Hug automatically supports both the version header as well as direct URL based specification.</p>\n\n\n\n<p>Hugs http method decorators don\'t modify your original functions. This makes testing Hug APIs as simple as testing\nany other Python functions. Additionally, this means interacting with your API functions in other Python code is as\nstraight forward as calling Python only API functions. Additionally, Hug makes it easy to test the full Python\nstack of your API by using the hug.test module:</p>\n\n<pre><code>import hug\nimport happy_birthday\n\nhug.test.get(happy_birthday, \'happy_birthday\', {\'name\': \'Timothy\', \'age\': 25}) # Returns a Response object\n</code></pre>\n\n\n\n<p>Hug exposes a <code>__hug_wsgi__</code> magic method on every API module automatically. Running your Hug based API on any\nstandard wsgi server should be as simple as pointing it to module_name:<code>__hug_wsgi__</code>.</p>\n\n<p>For Example:</p>\n\n<pre><code>uwsgi --http 0.0.0.0:8000 --wsgi-file examples/hello_world.py --callable __hug_wsgi__\n</code></pre>\n\n<p>To run the hello world Hug example API.</p>\n\n\n\n<p>When Building an API using the Hug framework you\'ll use the following concepts:</p>\n\n<p><strong>METHOD Decorators</strong> get, post, update, etc HTTP method decorators that expose your Python function as an API while keeping your Python method unchanged</p>\n\n<pre><code>@hug.get() # &lt;- Is the Hug METHOD decorator\ndef hello_world():\n    return \"Hello\"\n</code></pre>\n\n<p>Hug uses the structure of the function you decorate to automatically generate documentation for users of your API. Hug always passes a request, response, and api_version\nvariable to your function if they are defined params in your function definition.</p>\n\n<p><strong>Type Annotations</strong> functions that optionally are attached to your methods arguments to specify how the argument is validated and converted into a Python type</p>\n\n<pre><code>@hug.get()\ndef math(number_1:int, number_2:int): #The :int after both arguments is the Type Annotation\n    return number_1 + number_2\n</code></pre>\n\n<p>Type annotations also feed into Hug\'s automatic documentation generation to let users of your API know what data to supply.</p>\n\n<p><strong>Directives</strong> functions that get executed with the request / response data based on being requested as an argument in your api_function</p>\n\n<pre><code>@hug.get()\ndef test_time(hug_timer):\n    return {\'time_taken\': float(hug_timer)}\n</code></pre>\n\n<p>Directives are always prefixed with \'hug_\'. Adding your own directives is straight forward:</p>\n\n<pre><code>@hug.directive()\ndef multiply(default=1, **all_info):\n    \'\'\'Returns passed in parameter multiplied by itself\'\'\'\n    return default * default\n\n@hug.get()\ndef tester(hug_multiply=10):\n    return hug_multiply\n\ntester() == 100\n</code></pre>\n\n<p><strong>Output Formatters</strong> a function that takes the output of your API function and formats it for transport to the user of the API.</p>\n\n<pre><code>@hug.default_output_format()\ndef my_output_formatter(data):\n    return \"STRING:{0}\".format(data)\n\n@hug.get(output=hug.output_format.json)\ndef hello():\n    return {\'hello\': \'world\'}\n</code></pre>\n\n<p>as shown, you can easily change the output format for both an entire API as well as an individual API call</p>\n\n<p><strong>Input Formatters</strong> a function that takes the body of data given from a user of your API and formats it for handling.</p>\n\n<pre><code>@hug.default_input_formatter(\"application/json\")\ndef my_input_formatter(data):\n    return (\'Results\', hug.input_format.json(data))\n</code></pre>\n\n<p>Input formatters are mapped based on the content_type of the request data, and only perform basic parsing. More detailed\nparsing should be done by the Type Annotations present on your api_function</p>\n\n<p><strong>Middleware</strong> functions that get called for every request a Hug API processes</p>\n\n<pre><code>@hug.request_middleware()\ndef proccess_data(request, response):\n    request.env[\'SERVER_NAME\'] = \'changed\'\n\n@hug.response_middleware()\ndef proccess_data(request, response, resource):\n    response.set_header(\'MyHeader\', \'Value\')\n</code></pre>\n\n<p>You can also easily add any Falcon style middleware using:</p>\n\n<pre><code>__hug__.add_middleware(MiddlewareObject())\n</code></pre>\n\n\n\n<p>Hug enables you to organize large projects in any manner you see fit. You can import any module that contains Hug\ndecorated functions (request handling, directives, type handlers, etc) and extend your base API with that module.</p>\n\n<p>For example:</p>\n\n<p><code>something.py</code></p>\n\n<pre><code>import hug\n\n@hug.get(\'/\')\ndef say_hi():\n    return \'hello from something\'\n</code></pre>\n\n<p>Can be imported into the main API file:</p>\n\n<p><code>__init__.py</code></p>\n\n<pre><code>import hug\nfrom . import something\n\n@hug.get(\'/\')\ndef say_hi():\n    return \"Hi from root\"\n\n@hug.extend_api(\'/something\')\ndef something_api():\n    return [something]\n</code></pre>\n\n<p>Or alternatively - for cases like this - where only one module is being included per a URL route:</p>\n\n<pre><code>#alternatively\n__hug__.extend(something, \'/something\')\n</code></pre>\n\n\n\n<p>By default, Hug returns an auto generated API spec when a user tries to access an endpoint that isn\'t defined.\nIf you would not like to return this spec you can turn off 404 documentation:</p>\n\n<p>From the command line application:</p>\n\n<p>hug -nd -f {file} #nd flag tells Hug not to generate documentation on 404</p>\n\n<p>Additionally, you can easily create a custom 404 handler using the <code>hug.not_found</code> decorator:</p>\n\n<pre><code>@hug.not_found()\ndef not_found_handler():\n    return \"Not Found\"\n</code></pre>\n\n<p>This decorator works in the same manner as the Hug HTTP method decorators, and is even version aware:</p>\n\n<pre><code>@hug.not_found(versions=1)\ndef not_found_handler():\n    return \"\"\n\n@hug.not_found(versions=2)\ndef not_found_handler():\n    return \"Not Found\"\n</code></pre>\n\n\n\n<p>HUG simply stands for Hopefully Useful Guide. This represents the projects goal to help guide developers into creating\nwell written and intuitive APIs.</p>\n\n<hr /><p>Thanks and I hope you find <em>this</em> hug helpful as you develop your next Python API!</p>\n\n<p>~Timothy Crosley</p>\n',1),(6,'60 YouTube channels that will make you smarter','https://medium.com/@bibblio_org/60-youtube-channels-that-will-make-you-smarter-44d8315c2548',0,0,'<p class=\"graf--p graf--hasDropCapModel graf--hasDropCap\"><span class=\"graf-dropCap\">T</span>ime is finite. Social media and Netflix can all too easily swallow our precious hours. So why not put them to better use on YouTube? Beyond the music, virals and gaming videos, YouTube has many great channels that can teach anyone practically anything.</p><p class=\"graf--p\">Here are the sharpest brains. Press play and become smarter!</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*7NA7_gmVAd43VE1z9HOc6w.png\" alt=\"1*7NA7_gmVAd43VE1z9HOc6w.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Spark your curiosity</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/Vsauce\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Vsauce</strong></a><strong class=\"markup--strong markup--p-strong\"> — </strong>Amazing answers to questions about our world</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/Kurzgesagt\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">In a Nutshell</strong></a><strong class=\"markup--strong markup--p-strong\"> — </strong>Animations that make learning beautiful</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/CGPGrey\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">C. G. P. Grey</strong></a> — Entertaining explanations of politics, geography and culture</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/crashcourse\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Crash Course</strong></a> — Bite-sized science and learning across many subjects</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/scishow\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Scishow</strong> </a>— Indispensable science news, history and concepts</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/HowStuffWorks\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">HowStuffWorks</strong></a> — Your daily curiosity dose that explains the world</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/HeadsqueezeTV\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Brit Lab</strong></a> — Smart-ass ammunition that’s guaranteed to astound</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/thnkrtv\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">THNKR</strong></a> — People, stories and ideas that change perspectives</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*kARQnmcpSfBKhCmlkcm_Dw.png\" alt=\"1*kARQnmcpSfBKhCmlkcm_Dw.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Experiment with the sciences</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/minutephysics\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">MinutePhysics</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— Simple explanations of physics and other sciences</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/minuteearth\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">MinuteEarth</strong></a> — Science and stories about our awesome planet</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/1veritasium\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Veritasium</strong></a> — Science and engineering videos by Derek Muller</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/numberphile\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Numberphile</strong></a> — Maths Mecca that sums up all things numerical</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/destinws2\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">SmarterEveryDay</strong></a> — Exploring the world of science with Destin Sandlin</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/periodicvideos\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Periodic Videos</strong></a> — Videos of each element and other chemistry stuff</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/sixtysymbols\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Sixty Symbols</strong></a> — A physics and astronomy cornucopia of cool</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/AsapSCIENCE\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">AsapSCIENCE</strong></a> — Weekly doses of fun and intriguing science clips</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/itsokaytobesmart\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">It’s Okay To Be Smart</strong></a> — We agree!</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/patrickJMT\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">PatrickJMT</strong></a> — Straight-to-the-point maths know-how</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/bozemanbiology\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Bozeman Science</strong></a> — A popular high school teacher explains science</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*JwzhZy70PAYmj9gvg4u_Fg.png\" alt=\"1*JwzhZy70PAYmj9gvg4u_Fg.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Connect with technology</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/Computerphile\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Computerphile</strong></a> — An array of computing and tech videos</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/MatthewPatrick13\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">The Game Theorists</strong></a> — Over-analysing video games</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/ExtraCreditz\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Extra Credits</strong></a> — Video game design to start your developer career</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/thenewboston\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">The New Boston</strong></a> — Tons of great web development tutorials</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*-jaaflXsI-QpuD9SB-0S0A.png\" alt=\"1*-jaaflXsI-QpuD9SB-0S0A.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Expand your mind</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/schooloflifechannel\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">The School of Life</strong></a> — Ideas for life through many lenses</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/braincraftvideo\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">BrainCraft</strong></a> — Weekly videos on psychology and neuroscience</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/thugnotes\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Wisecrack</strong></a> — Learn your ass off with witty sketches</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/pbsideachannel\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">PBS Idea Channel</strong></a> — A cultural critique of pop, technology and art</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/thephilosophytube\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Philosophy Tube</strong></a> — Oliver Lennard “gives away a philosophy degree”</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*XG8MdevojPZlchGTh07lOA.png\" alt=\"1*XG8MdevojPZlchGTh07lOA.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Inspire your creativity</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/markcrilley\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Mark Crilley</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— How-to-draw videos on almost every topic you can imagine</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/DrawWithJazza\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Draw With Jazza</strong> </a>— Tutorials on all forms of visual expression</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/JustinSandercoe\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">JustinGuitar</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— Guitar courses for various styles, techniques and abilities</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/HDPiano\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">HDpiano</strong></a> — Learn to play the piano with easy to follow tutorials</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/everyframeapainting\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Every Frame a Painting</strong></a> — Top-notch and truly fascinating analysis of film</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/photoexposed\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Photo Exposed</strong></a> — Photography tips, techniques and tutorials</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/theartassignment\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">The Art Assignment</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— Artist talks and challenging assignments for yourself</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/filmriot\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Film Riot</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— A how-to trip through all aspects of film making</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*3O5ydDOomYG2MSD1vLuTsg.png\" alt=\"1*3O5ydDOomYG2MSD1vLuTsg.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Avoid burning your house down</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/01032010814\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Grant Thompson</strong></a> — Caution advised with these experiments and life hacks</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/CrazyRussianHacker\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Crazy Russian Hacker</strong></a> — The daddy of all science experiment channels</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*zYmWugXxAQoMGT1ZN9rEcg.png\" alt=\"1*zYmWugXxAQoMGT1ZN9rEcg.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Get closer to nature</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/EarthUnpluggedTV\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Earth Unplugged</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— BBC-produced channel about the natural world</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/BBCEarth\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">BBC Earth</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— Jump in and meet your planet</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/thebrainscoop\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">The Brain Scoop</strong></a> — A private tour of The Field Museum in Chicago</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*2Ji4pDv1p4xmL-gJqY-WPA.png\" alt=\"1*2Ji4pDv1p4xmL-gJqY-WPA.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Roll with the big boys</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/OUlearn\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">ouLearn</strong></a> — The Open University’s rich and engaging learning channel</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/theRSAorg\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">The RSA</strong></a> — The Royal Society of Arts sets new standards in its field</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/TEDtalksDirector\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">TED Talks</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— No list would be complete without TED’s main collection</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/TEDEducation\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">TED-Ed</strong></a> — Carefully curated and crafted educational videos and animations</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/smithsonianchannel\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Smithsonian</strong></a> — The mighty institution explores the grand questions</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/bigthink\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Big Think</strong></a> — Exploring big ideas that define knowledge in the 21st century</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/TheRoyalInstitution\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">The Royal Institution</strong></a> — Films and lectures about the natural world</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/GreshamCollege\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Gresham College</strong></a> — Liberally delivering knowledge through top lectures</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*H1tUJHE2QOAwwpowzF392g.png\" alt=\"1*H1tUJHE2QOAwwpowzF392g.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Access the archives</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/britishpathe\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">British Pathé </strong></a>— Famous newsreels shown within carefully chosen topics</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/itnsource\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">ITN Source</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— One of the largest historic collections of news footage</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/channel/UCHTK-2W11Vh1V4uwofOfR4w\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">AP Archive</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— The Associated Press, the world’s largest and oldest agency</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*DfuswbmaN3awHZpPi5Rt2w.png\" alt=\"1*DfuswbmaN3awHZpPi5Rt2w.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Nurture the youngsters</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/crashcoursekids\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Crash Course Kids</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>—For 5th grade scientists, engineers and astronomers</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/scishowkids\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">SciShow Kids</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— Experiments, experts and answers for kids aged 8 to 88</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/hooplakidzhowto\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">HooplaKidz</strong></a><strong class=\"markup--strong markup--p-strong\"> </strong>— Arts and crafts for little ’uns</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*wB5yW-RqWZ26oGd6KvGStg.png\" alt=\"1*wB5yW-RqWZ26oGd6KvGStg.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Dose up on medicine</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/sexplanations\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Sexplanations</strong></a> — Honest answers about sexuality by Lindsey Doe</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/thehealthcaretriage\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Healthcare Triage</strong></a> — Answering questions about medicine and healthcare</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/kenHubCOM\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Kenhub</strong></a> — An engaging and different way to learn human anatomy</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*Qjx5esqUonebJh-nbmvaww.png\" alt=\"1*Qjx5esqUonebJh-nbmvaww.png\" /></div><h3 class=\"graf--h3\"><strong class=\"markup--strong markup--h3-strong\">Enjoy the unusual</strong></h3><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/Vihart\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Vi Hart</strong></a> — A “recreational mathemusician” like no other</p><p class=\"graf--p\"><a href=\"https://www.youtube.com/user/msadaghd\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">ElectroBOOM</strong></a> — Successfully discovering the craziness in engineering</p><h3 class=\"graf--h3\">Closing words</h3><p class=\"graf--p\">These channels have been chosen based on a range of factors, such as production value, impact, quality, variety and quantity. In many categories, great channels and incredible niches have been left out, but such is the burden of any editor. <a href=\"https://medium.com/p/e4cc9e359811/\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">See the entire list of 134 nominees here</strong></a>.</p><p class=\"graf--p\">This list was compiled by <a href=\"http://bibblio.org\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Bibblio</strong></a>, the default librarian for millions of quality digital learning materials. If this list is helpful to you, please recommend it so that others can benefit too!</p><p class=\"graf--p\"><em class=\"markup--em markup--p-em\">More juicy posts by Bibblio:</em><br /><a href=\"https://medium.com/synapse/education-vs-learning-9f0d0d5696b5\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Education vs Learning</strong></a><strong class=\"markup--strong markup--p-strong\"><br /></strong><a href=\"https://medium.com/synapse/search-vs-discovery-1b80e045aea\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Search vs Discovery</strong></a></p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*p3hSwhlvM0VkjMZQESXkpg.png\" alt=\"1*p3hSwhlvM0VkjMZQESXkpg.png\" /></div>',1),(7,'Create a REST API with Node.js','http://bigspaceship.github.io/blog/2014/05/14/how-to-create-a-rest-api-with-node-dot-js/',1,0,'\n      <p>For a pitch, we prototyped one of our concepts with a <a href=\"https://github.com/NaturalNode/natural\">Natural Language</a> search feature. I quickly implemented a REST style GET call on search submit with Node.js via major <a href=\"http://coenraets.org/blog/2012/10/creating-a-rest-api-using-node-js-express-and-mongodb/\">article</a> skimming. I still didn\'t have a clear mental map of how Node.js worked with a REST API, so I broke it down into a <a href=\"http://brittneykernan.github.io/noderest-presentation/\">presentation</a> for the BSS Tech team. You can follow along, or skim.</p>\n\n\n\n<h2>PHP vs Node.js REST Components</h2>\n\n<p>If you\'ve come from PHP, your brain may already hold a diagram of what a REST API looks like in that language. Let\'s make one for Node.js:</p>\n\n<h5>PHP</h5>\n\n<ul><li>Apache - HTTP server</li>\n<li>.php controllers - Controls what your app does with data</li>\n<li>Content-Type JSON Headers - Sends your data back readable</li>\n<li>.htaccess - Map URLs to controller action methods for pretty URLs</li>\n<li>MySQLi - Interfaces with Data</li>\n<li>MySQL - Stores data</li>\n</ul><h5>Node.js</h5>\n\n<ul><li>Node.js - HTTP Server</li>\n<li>JavaScript modules - Controllers for what your app does with data</li>\n<li>Express - Framework to easily build for web with Node.js</li>\n<li>Routes - Map URLs to actions for pretty URLs</li>\n<li>Mongoose.js - Interfaces with data</li>\n<li>Mongo - Stores data</li>\n</ul><h2>Start a Node Server</h2>\n\n<p><a href=\"http://nodejs.org/\">Install Node</a> first. Make a directory to play in, ex: <em>noderest</em>, and put <em>server.js</em> in the root.</p>\n\n<h5>server.js</h5>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'http\'</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">\'Content-Type\'</span><span class=\"o\">:</span> <span class=\"s1\">\'text/plain\'</span><span class=\"p\">});</span>\n</span><span class=\"line\">  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"s1\">\'Hello New York\\n\'</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3001</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">\'Server running at http://localhost:3001/\'</span><span class=\"p\">);</span>\n</span></code></pre></td></tr></table></div><h5>What\'s going on here</h5>\n\n<p>HTTP is the module we\'ll use to read the incoming Requests\' HTTP action - GET, POST, PUT or DELETE - and Headers. It will also create a server for us, listening for Requests at the available port of your choice (here 3001). Pass <code>createServer()</code> a callback function that takes two arguments <code>req</code> and <code>res</code>. <code>req</code> for Request and <code>res</code> for Response. Add a <code>console.dir()</code> or two to print to Terminal what these two variables hold. Response is an object you can use to reply back to the Request. Forget to return something with Response and your Request will simply time out. Here any URL path we type at\n<a href=\"http://localhost:3001/\">http://localhost:3001/</a> will print back <em>Hello New York</em> with a <em>OK</em> header as plain text content.</p>\n\n<h5>Try it</h5>\n\n<p>In Terminal:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n</pre></td><td class=\"code\"><pre><code class=\"sh\"><span class=\"line\"><span class=\"nv\">$ </span><span class=\"nb\">cd </span>noderest/\n</span><span class=\"line\"><span class=\"nv\">$ </span>node server.js\n</span></code></pre></td></tr></table></div><p>Terminal should print <code>Server running at http://127.0.0.1:3001/</code> back at you. So easy (as long as you didn\'t have anything else running in that port). Open that URL. You should see <code>Hello New York</code>.</p>\n\n<p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-node.gif\" alt=\"picture alt\" title=\"Node Server\" /></p>\n\n<h5>Add Express</h5>\n\n<p>Why add Express? Same reason you use jQuery, makes things faster and easier. What the hell is it? I read the <a href=\"http://expressjs.com/\">home page</a> maybe 5 times and used it in 3 prototypes before my brain mapped it.</p>\n\n<p>To add Express as a dependency to your project, we\'ll need to first <a href=\"http://blog.npmjs.org/post/85484771375/how-to-install-npm\">install NPM</a> (it should have installed with Node actually, <a href=\"http://blog.npmjs.org/post/85484771375/how-to-install-npm\">if not</a>). NPM will read our <em><a href=\"https://www.npmjs.org/doc/json.html\">package.json</a></em> file saved to the root of our project directory, and then download and install Express for us.</p>\n\n<h5>package.json</h5>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"p\">{</span>\n</span><span class=\"line\">  <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"noderest\"</span><span class=\"p\">,</span>\n</span><span class=\"line\">  <span class=\"s2\">\"description\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Demo REST API with Node\"</span><span class=\"p\">,</span>\n</span><span class=\"line\">  <span class=\"s2\">\"version\"</span><span class=\"o\">:</span> <span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span>\n</span><span class=\"line\">  <span class=\"s2\">\"private\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n</span><span class=\"line\">  <span class=\"s2\">\"dependencies\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"s2\">\"express\"</span><span class=\"o\">:</span> <span class=\"s2\">\"3.x\"</span>\n</span><span class=\"line\">  <span class=\"p\">}</span>\n</span><span class=\"line\"><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div><h5>Install Express in Terminal</h5>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n</pre></td><td class=\"code\"><pre><code class=\"sh\"><span class=\"line\"><span class=\"nv\">$ </span>npm install\n</span></code></pre></td></tr></table></div><p>Watch NPM in Terminal fetch the files. Your directory now holds a new folder called <em>node_modules</em>, with the <em>express</em> folder inside. Let\'s use Express.</p>\n\n<h5>Use Express</h5>\n\n<p>Like the HTTP module you required in your first version of <em>server.js</em>, you\'ll require Express. Open <em>server.js</em>, clear it out. Add:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'express\'</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n</span><span class=\"line\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">\'/\'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">\'Hello Seattle\\n\'</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3001</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">\'Listening on port 3001...\'</span><span class=\"p\">);</span>\n</span></code></pre></td></tr></table></div><h5>What\'s changed</h5>\n\n<p>Nothing! Not really. Our server is actually doing the same thing, though. Listening to HTTP requests sent to locally to port 3001 and returning updated text <em>Hello Seattle</em>. Only difference is we now have Express\' framework to work with - a slightly cleaner and faster way to handle requests and set up our server. The <code>app</code> variable holds an instance of the Express application object, which has many useful methods.</p>\n\n<h5>Run Express</h5>\n\n<p>Changes to Node.js server files require a full server restart in order to be run the updated version.</p>\n\n<p>In Terminal, use <code>CTRL-C</code> to stop your running Node server. Restart with <code>node server.js</code>.</p>\n\n<p>You\'ll see Terminal respond with <em>Listening on port 3001</em>. And <em>Hello Seattle</em> at your localhost in the browser. You may notice the font family is different than before. Express is sending a text/html Content-Type Header instead of text/plain (Express is for web after all).</p>\n\n<p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-express.gif\" alt=\"picture alt\" title=\"Express Server\" /></p>\n\n<h2>REST</h2>\n\n<p>We\'re ready to build our REST API. We\'ll need:</p>\n\n<ul><li>A URL route schema to map requests to app actions</li>\n<li>A Controller to handle each action</li>\n<li>Data to respond with</li>\n<li>Place to store the data</li>\n<li>Interface to access and change data</li>\n</ul><h2>Routes</h2>\n\n<p>Routes are the predefined URL paths your API responds to. Think of each Route as listening to three parts:</p>\n\n<ul><li>A specific HTTP Action</li>\n<li>A specific URL path</li>\n<li>A handler method</li>\n</ul><span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">\'/\'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">\'Return JSON or HTML View\'</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"p\">});</span>\n</span></code></pre></td></tr></table></div><p>This example of routing handles all GET Requests. The URL path is the root of the site, the homepage. The handling method is an anonymous function, and responds with plain text in this case.</p>\n\n<h2>Request</h2>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">\'/musician/:name\'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">\n</span><span class=\"line\">   <span class=\"c1\">// Get /musician/Matt</span>\n</span><span class=\"line\">   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">)</span>\n</span><span class=\"line\">   <span class=\"c1\">// =&gt; Matt</span>\n</span><span class=\"line\">\n</span><span class=\"line\">   <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">\'{\"id\": 1,\"name\":\"Matt\",</span>\n</span><span class=\"line\"><span class=\"s1\">     \"band\":\"BBQ Brawlers\"}\'</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"p\">});</span>\n</span></code></pre></td></tr></table></div><p>Paths are string patterns broken up by <code>/</code> and <code>:</code>, and translated into RegEx by Express. In this example, <code>:name</code> is anything that comes after <code>/musician/</code> in the url. This parameter will be available in our Request object <code>req</code> under the params property. It will be keyed the same name as our param in the route path.</p>\n\n<p>FYI <code>req.body</code> can also be used to refer to the HTTP Request Body. You\'ll need to tell Express to look out for Requests Body\'s in your <em>server.js</em> file via <code>configure()</code>. We\'ll do this later.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">configure</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n</span><span class=\"line\">    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">bodyParser</span><span class=\"p\">());</span>\n</span><span class=\"line\"><span class=\"p\">});</span>\n</span></code></pre></td></tr></table></div><h2>Response</h2>\n\n<p><code>res.send()</code> is awesome. You can pass this method JSON, Strings and HTML, and it will interoperate and send back the appropriate Content-Type and other Headers for you. If you want control, that\'s cool too. To send a custom HTTP Status pass that number in before the response content. Add other headers, use <code>res.set()</code> to add in your headers before calling <code>res.send()</code>.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">({</span> <span class=\"s2\">\"some\"</span><span class=\"o\">:</span> <span class=\"s2\">\"json\"</span> <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s2\">\"html for Maximum Pain\'s web page\"</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"s1\">\'No musicians here\'</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">error</span><span class=\"o\">:</span> <span class=\"s1\">\'you blew it\'</span> <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n</span></code></pre></td></tr></table></div><p>There\'s much more to Express than detailed here. For more read the well designed and written <a href=\"http://expressjs.com/4x/api.html\">docs</a>.</p>\n\n<h2>Routes.js</h2>\n\n<p>Add a new file at the root called <em>routes.js</em>. Drop in this routing module:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">){</span>\n</span><span class=\"line\">    <span class=\"kd\">var</span> <span class=\"nx\">musicians</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'./controllers/musicians\'</span><span class=\"p\">);</span>\n</span><span class=\"line\">    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">\'/musicians\'</span><span class=\"p\">,</span> <span class=\"nx\">musicians</span><span class=\"p\">.</span><span class=\"nx\">findAll</span><span class=\"p\">);</span>\n</span><span class=\"line\">    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">\'/musicians/:id\'</span><span class=\"p\">,</span> <span class=\"nx\">musicians</span><span class=\"p\">.</span><span class=\"nx\">findById</span><span class=\"p\">);</span>\n</span><span class=\"line\">    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">\'/musicians\'</span><span class=\"p\">,</span> <span class=\"nx\">musicians</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">);</span>\n</span><span class=\"line\">    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">put</span><span class=\"p\">(</span><span class=\"s1\">\'/musicians/:id\'</span><span class=\"p\">,</span> <span class=\"nx\">musicians</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">);</span>\n</span><span class=\"line\">    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"s1\">\'/musicians/:id\'</span><span class=\"p\">,</span> <span class=\"nx\">musicians</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div><p>Here we are working with a Musician data model. We\'ve created a Musicians Controller and placed all our Request event handling methods inside the controller. The main REST HTTP actions are handled. We\'ve modeled our URL routes off of REST API conventions, and named our handling methods clearly.</p>\n\n<h2>Controllers</h2>\n\n<p>To keep code organized, create a folder called <em>controllers</em> inside your project directory. Create a new file inside of that called <em>musicians.js</em>. We\'ll add each request handling method for Musicians data to this file one by one. For now add these placeholders to <em>musicians.js</em> so we can restart the server without errors:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">findAll</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">findById</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">update</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"k\">delete</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n</span></code></pre></td></tr></table></div><p>Our Controller exports all of these methosd so the router can refer to them.</p>\n\n<h5>Find All</h5>\n\n<p>Update <code>findAll</code>\'s definition\' to the function below:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">findAll</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class=\"line\">  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">([{</span>\n</span><span class=\"line\">    <span class=\"s2\">\"id\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n</span><span class=\"line\">    <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Max\"</span><span class=\"p\">,</span>\n</span><span class=\"line\">    <span class=\"s2\">\"band\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Maximum Pain\"</span><span class=\"p\">,</span>\n</span><span class=\"line\">    <span class=\"s2\">\"instrument\"</span><span class=\"o\">:</span> <span class=\"s2\">\"guitar\"</span>\n</span><span class=\"line\">  <span class=\"p\">}]);</span>\n</span><span class=\"line\"><span class=\"p\">};</span>\n</span></code></pre></td></tr></table></div><p>Like the anonymous functions we declared in our <em>server.js</em>, request handler methods accept <code>req</code> and <code>res</code> arguments and return JSON with <code>res.send()</code>. Our JSON is hard coded, which will do for now. Let\'s test this route in our app.</p>\n\n<h5>Import Routes and JS Modules</h5>\n\n<p>Update <em>server.js</em> to require our routes file. The <code>.js</code> file extension can be omitted.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'express\'</span><span class=\"p\">);</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'./routes\'</span><span class=\"p\">)(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3001</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Jammin\\\' on port 3001...\"</span><span class=\"p\">);</span>\n</span></code></pre></td></tr></table></div><p><code>CTRL+C</code> to stop the Node server and <code>node server.js</code> to restart. You should now see JSON at <a href=\"http://localhost:3001/musicians\">localhost:3001/musicians</a>.</p>\n\n<p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-musicians.gif\" alt=\"picture alt\" title=\"Musicians JSON\" /></p>\n\n<h2>Mongo</h2>\n\n<p>Data would be more fun to play with. I made fake bands for all the techers on the team for my musicians data. Put thought into it.</p>\n\n<h5>Start Mongo</h5>\n\n<p>Mongo Database felt right for my light data and it is super fast to set up (if you already have Mongo installed, <a href=\"http://docs.mongodb.org/manual/installation/\">install</a> it if not, yuck). Run <code>mongod</code> in another Terminal tab if it\'s not running already.</p>\n\n<h2>Mongoose.js</h2>\n\n<p>Mongo is easy enough to communicate with, but if you like a little bit more structure to your data and data interface, try a Mongo Driver. I used Mongoose.js because I liked the Schema style of defining document structure.</p>\n\n<p>Ask NPM to install this dependency for you, and update your package.json file with this dependency for you with the <code>--save-dev</code> option.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n</pre></td><td class=\"code\"><pre><code class=\"sh\"><span class=\"line\">npm install mongoose --save-dev\n</span></code></pre></td></tr></table></div><h5>Use Mongoose.js</h5>\n\n<p>Update <em>server.js</em>:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n<span class=\"line-number\">10</span>\n<span class=\"line-number\">11</span>\n<span class=\"line-number\">12</span>\n<span class=\"line-number\">13</span>\n<span class=\"line-number\">14</span>\n<span class=\"line-number\">15</span>\n<span class=\"line-number\">16</span>\n<span class=\"line-number\">17</span>\n<span class=\"line-number\">18</span>\n<span class=\"line-number\">19</span>\n<span class=\"line-number\">20</span>\n<span class=\"line-number\">21</span>\n<span class=\"line-number\">22</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'express\'</span><span class=\"p\">),</span>\n</span><span class=\"line\"><span class=\"nx\">mongoose</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'mongoose\'</span><span class=\"p\">),</span>\n</span><span class=\"line\"><span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'fs\'</span><span class=\"p\">);</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">mongoUri</span> <span class=\"o\">=</span> <span class=\"s1\">\'mongodb://localhost/noderest\'</span><span class=\"p\">;</span>\n</span><span class=\"line\"><span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">mongoUri</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">;</span>\n</span><span class=\"line\"><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">\'error\'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n</span><span class=\"line\">  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">\'unable to connect to database at \'</span> <span class=\"o\">+</span> <span class=\"nx\">mongoUri</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"p\">});</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">configure</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n</span><span class=\"line\">  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">bodyParser</span><span class=\"p\">());</span>\n</span><span class=\"line\"><span class=\"p\">});</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'./models/musician\'</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'./routes\'</span><span class=\"p\">)(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3001</span><span class=\"p\">);</span>\n</span><span class=\"line\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">\'Listening on port 3001...\'</span><span class=\"p\">);</span>\n</span></code></pre></td></tr></table></div><p>We\'re requiring the Mongoose module which will communicate with Mongo for us. The <code>mongoUri</code> is a location to the Mongo DB that Mongoose will create if there is not one there already. We added an error handler there to help debug issues connecting to Mongo collections. We also configured Express to parse requests\' bodies (we\'ll use that for POST requests). Lastly, we require the Musician model which we\'ll make next.</p>\n\n<h2>Define Data Models</h2>\n\n<p>Create a new folder called <em>models</em> and add a new file <em>musician.js</em> for our Musician Model.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n<span class=\"line-number\">10</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">mongoose</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'mongoose\'</span><span class=\"p\">),</span>\n</span><span class=\"line\"><span class=\"nx\">Schema</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">;</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">MusicianSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Schema</span><span class=\"p\">({</span>\n</span><span class=\"line\">  <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n</span><span class=\"line\">  <span class=\"nx\">band</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n</span><span class=\"line\">  <span class=\"nx\">instrument</span><span class=\"o\">:</span> <span class=\"nb\">String</span>\n</span><span class=\"line\"><span class=\"p\">});</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">\'Musician\'</span><span class=\"p\">,</span> <span class=\"nx\">MusicianSchema</span><span class=\"p\">);</span>\n</span></code></pre></td></tr></table></div><p>Require Mongoose into this file, and create a new Schema object. This schema helps Mongoose make sure it\'s getting and setting the right and well-formed data from and to the Mongo collection. Our schema has three String properties which define a Musician object. The last line creates the Musician model object, with built in Mongo interfacing methods. We\'ll refer to this Musician object in other files.</p>\n\n<h5>Find All</h5>\n\n<p>Update <em>controllers/musicians.js</em> to require Mongoose, so we can create an instance of our Musician model to work with. Update <code>findAll()</code> to query Mongo with the <code>find()</code> data model method.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n<span class=\"line-number\">10</span>\n<span class=\"line-number\">11</span>\n<span class=\"line-number\">12</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">mongoose</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'mongoose\'</span><span class=\"p\">),</span>\n</span><span class=\"line\"><span class=\"nx\">Musician</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">\'Musician\'</span><span class=\"p\">);</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">findAll</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({},</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">results</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">findById</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">update</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"k\">delete</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n</span></code></pre></td></tr></table></div><p>Passing <code>find()</code> <code>{}</code> means we are not filtering data by any of its properties, so please return all of it. Once Mongoose looks up the data it returns an error message and a result set. Use <code>res.send()</code> to return the raw results.</p>\n\n<h4>Start Mongoose</h4>\n\n<p>Restart the server with <code>CTRL+C</code> and <code>node server.js</code>. Visit the API endpoint for all musicians <a href=\"http://localhost:3001/musicians\">localhost:3001/musicians</a>. You\'ll get JSON data back, in the form of an empty array.</p>\n\n<p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-no-musicians.gif\" alt=\"picture alt\" title=\"Empty Musicians JSON\" /></p>\n\n<h2>Data</h2>\n\n<p>Since I didn\'t feel like messing with Mongo command-line, I decided to import musician data with our REST API. Add a new route endpoint to <em>routes.js</em>.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n</pre></td><td class=\"code\"><pre><code class=\"sh\"><span class=\"line\">app.get<span class=\"o\">(</span><span class=\"s1\">\'/import\'</span>, musicians.import<span class=\"o\">)</span>;\n</span></code></pre></td></tr></table></div><p>Now to define the import method in our Musicians Controller <em>controllers/musicians.js</em>:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n<span class=\"line-number\">10</span>\n<span class=\"line-number\">11</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"kr\">import</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span>\n</span><span class=\"line\">    <span class=\"p\">{</span> <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Ben\"</span><span class=\"p\">,</span> <span class=\"s2\">\"band\"</span><span class=\"o\">:</span> <span class=\"s2\">\"DJ Code Red\"</span><span class=\"p\">,</span> <span class=\"s2\">\"instrument\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Reason\"</span> <span class=\"p\">},</span>\n</span><span class=\"line\">    <span class=\"p\">{</span> <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Mike D.\"</span><span class=\"p\">,</span><span class=\"s2\">\"band\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Kingston Kats\"</span><span class=\"p\">,</span> <span class=\"s2\">\"instrument\"</span><span class=\"o\">:</span> <span class=\"s2\">\"drums\"</span> <span class=\"p\">},</span>\n</span><span class=\"line\">    <span class=\"p\">{</span> <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Eric\"</span><span class=\"p\">,</span> <span class=\"s2\">\"band\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Eric\"</span><span class=\"p\">,</span> <span class=\"s2\">\"instrument\"</span><span class=\"o\">:</span> <span class=\"s2\">\"piano\"</span> <span class=\"p\">},</span>\n</span><span class=\"line\">    <span class=\"p\">{</span> <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Paul\"</span><span class=\"p\">,</span> <span class=\"s2\">\"band\"</span><span class=\"o\">:</span> <span class=\"s2\">\"The Eyeliner\"</span><span class=\"p\">,</span> <span class=\"s2\">\"instrument\"</span><span class=\"o\">:</span> <span class=\"s2\">\"guitar\"</span> <span class=\"p\">}</span>\n</span><span class=\"line\">  <span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n</span><span class=\"line\">    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">};</span>\n</span></code></pre></td></tr></table></div><p>This import method adds four documents out of the hard-coded JSON to a <em>musicians</em> collection. The Musician model is referenced here to call its create method. <code>create()</code> takes one or more documents in JSON form, and a callback to run on completion. If an error occurs, Terminal will spit the error out, and the request will timeout in the browser. On success, 202 Accepted HTTP status code is returned to the browser. Restart your node server and visit this new endpoint to import data.</p>\n\n<p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-import.gif\" alt=\"picture alt\" title=\"Empty Musicians JSON\" /></p>\n\n<h2>Returning Data</h2>\n\n<p>Now visit your <code>musicians/</code> endpoint to view all new musicians data. You\'ll see an array of JSON objects, each in the defined schema, with an additional generated unique private <code>_id</code> and internal <code>__v</code> version key. Don\'t edit those.</p>\n\n<p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-data.gif\" alt=\"picture alt\" title=\"Musicians JSON\" /></p>\n\n<h5>Find By Id</h5>\n\n<p>Recall our route for getting a musician by its id <code>app.get(\'/musicians/:id\', musicians.findById)</code>. Here is the handler method:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">findById</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class=\"line\">  <span class=\"kd\">var</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">findOne</span><span class=\"p\">({</span><span class=\"s1\">\'_id\'</span><span class=\"o\">:</span><span class=\"nx\">id</span><span class=\"p\">},</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">};</span>\n</span></code></pre></td></tr></table></div><p>This route\'s path uses a parameter pattern for <em>id</em> <code>/musicians/:id</code> which we can refer to in <code>req</code>. Pass this id to Mongoose to look up and return just one document. Restart the server. At your find all endpoint, copy one of the super long ids and paste it in at the end of the current url in the browser. Refresh your browser. You\'ll get a single JSON object for that one musician\'s document. Nice.</p>\n\n<p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-by-id.gif\" alt=\"picture alt\" title=\"Musician Found\" /></p>\n\n<h5>Update</h5>\n\n<p>PUT HTTP actions in a REST API correlate to an Update method. The route for Update also uses an <code>:id</code> parameter.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n<span class=\"line-number\">10</span>\n<span class=\"line-number\">11</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">update</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">  <span class=\"kd\">var</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n</span><span class=\"line\">  <span class=\"kd\">var</span> <span class=\"nx\">updates</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">;</span>\n</span><span class=\"line\">\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span><span class=\"s2\">\"_id\"</span><span class=\"o\">:</span><span class=\"nx\">id</span><span class=\"p\">},</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">,</span>\n</span><span class=\"line\">    <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">numberAffected</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n</span><span class=\"line\">      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">\'Updated %d musicians\'</span><span class=\"p\">,</span> <span class=\"nx\">numberAffected</span><span class=\"p\">);</span>\n</span><span class=\"line\">      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div><p>Notice the <code>updates</code> variable storing the <code>req.body</code>. <code>req.body</code> is useful when you want to pass in larger chunks of data such as a single JSON object. Here we will pass in a JSON object following the schema of only the model\'s properties you want to change.</p>\n\n<p>The model\'s <code>update()</code>  takes three parameters:</p>\n\n<ul><li>JSON object of matching properties to look up the doc with to update</li>\n<li>JSON object of just the properties to update</li>\n<li>callback function that returns the number of documents updated</li>\n</ul><h5>Test with cURL</h5>\n\n<p>PUT actions are not easy to test in the browser, so I used cURL in Terminal after restarting the server.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n</pre></td><td class=\"code\"><pre><code class=\"sh\"><span class=\"line\"><span class=\"nv\">$ </span>curl -i -X PUT -H <span class=\"s1\">\'Content-Type: application/json\'</span> -d <span class=\"s1\">\'{\"band\": \"BBQ Brawlers\"}\'</span> http://localhost:3001/musicians/535fe13ac688500000c2b28b\n</span></code></pre></td></tr></table></div><p>This sends a JSON Content-Type PUT request to our update endpoint. That JSON object is the request body, and the long hash at the end of the URL is the id of the musician we want to update. Terminal will output a JSON object of the response to the cURL request and <em>Updated 1 musicians</em> from our callback function.</p>\n\n<p>Visit this same URL from the cURL request in the browser to see the changes.</p>\n\n<p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-put.gif\" alt=\"picture alt\" title=\"Musician Updated\" /></p>\n\n<h5>Add</h5>\n\n<p>We used <code>create()</code> earlier to add multiple documents to our Musicians Mongo collection. Our POST handler uses the same method to add one new Musician to the collection. Once added, the response is the full new Musician\'s JSON object.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">musician</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n</span><span class=\"line\">    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">musician</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div><p>Restart the server. Use cURL to POST to the add endpoint with the full Musician JSON as the request body.</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n</pre></td><td class=\"code\"><pre><code class=\"sh\"><span class=\"line\"><span class=\"nv\">$ </span>curl -i -X POST -H <span class=\"s1\">\'Content-Type: application/json\'</span> -d <span class=\"s1\">\'{\"name\": \"Joe\", \"band\": \"Abita Boys\", \"instrument\":\"voice\"}\'</span> http://localhost:3001/musicians\n</span></code></pre></td></tr></table></div><p>Visit <a href=\"http://localhost:3001/musicians\">localhost:3001/musicians</a> to see the new Musician at the end of the array.</p>\n\n<p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-post.gif\" alt=\"picture alt\" title=\"Musician Updated\" /></p>\n\n<h5>Delete</h5>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"k\">delete</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class=\"line\">  <span class=\"kd\">var</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({</span><span class=\"s1\">\'_id\'</span><span class=\"o\">:</span><span class=\"nx\">id</span><span class=\"p\">},</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">};</span>\n</span></code></pre></td></tr></table></div><p>Our final REST endpoint, delete reuses what we\'ve learned above. Add this to <em>controllers/musicians.js</em>, restart, and check it out with:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n</pre></td><td class=\"code\"><pre><code class=\"sh\"><span class=\"line\"><span class=\"nv\">$ </span>curl -i -X DELETE http://localhost:3001/musicians/535feac1cc539500000a209f\n</span></code></pre></td></tr></table></div><p><img src=\"http://brittneykernan.github.io/noderest-presentation/img/browser-delete.gif\" alt=\"picture alt\" title=\"Musician Gone\" /></p>\n\n<h2>Summary</h2>\n\n<p>Your final <em>controllers/musicians.js</em> should look like this:</p>\n\n<span></span><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n<span class=\"line-number\">10</span>\n<span class=\"line-number\">11</span>\n<span class=\"line-number\">12</span>\n<span class=\"line-number\">13</span>\n<span class=\"line-number\">14</span>\n<span class=\"line-number\">15</span>\n<span class=\"line-number\">16</span>\n<span class=\"line-number\">17</span>\n<span class=\"line-number\">18</span>\n<span class=\"line-number\">19</span>\n<span class=\"line-number\">20</span>\n<span class=\"line-number\">21</span>\n<span class=\"line-number\">22</span>\n<span class=\"line-number\">23</span>\n<span class=\"line-number\">24</span>\n<span class=\"line-number\">25</span>\n<span class=\"line-number\">26</span>\n<span class=\"line-number\">27</span>\n<span class=\"line-number\">28</span>\n<span class=\"line-number\">29</span>\n<span class=\"line-number\">30</span>\n<span class=\"line-number\">31</span>\n<span class=\"line-number\">32</span>\n<span class=\"line-number\">33</span>\n<span class=\"line-number\">34</span>\n<span class=\"line-number\">35</span>\n<span class=\"line-number\">36</span>\n<span class=\"line-number\">37</span>\n<span class=\"line-number\">38</span>\n<span class=\"line-number\">39</span>\n<span class=\"line-number\">40</span>\n<span class=\"line-number\">41</span>\n<span class=\"line-number\">42</span>\n<span class=\"line-number\">43</span>\n<span class=\"line-number\">44</span>\n<span class=\"line-number\">45</span>\n<span class=\"line-number\">46</span>\n<span class=\"line-number\">47</span>\n<span class=\"line-number\">48</span>\n<span class=\"line-number\">49</span>\n</pre></td><td class=\"code\"><pre><code class=\"javascript\"><span class=\"line\"><span class=\"kd\">var</span> <span class=\"nx\">mongoose</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'mongoose\'</span><span class=\"p\">),</span>\n</span><span class=\"line\"><span class=\"nx\">Musician</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">\'Musician\'</span><span class=\"p\">);</span>\n</span><span class=\"line\">\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">findAll</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({},</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">results</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">results</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">findById</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class=\"line\">  <span class=\"kd\">var</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">findOne</span><span class=\"p\">({</span><span class=\"s1\">\'_id\'</span><span class=\"o\">:</span><span class=\"nx\">id</span><span class=\"p\">},</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">};</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">musician</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n</span><span class=\"line\">    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">musician</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">}</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">update</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">  <span class=\"kd\">var</span> <span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n</span><span class=\"line\">  <span class=\"kd\">var</span> <span class=\"nx\">updates</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">;</span>\n</span><span class=\"line\">\n</span><span class=\"line\">  <span class=\"nx\">Musician</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span><span class=\"s2\">\"_id\"</span><span class=\"o\">:</span><span class=\"nx\">id</span><span class=\"p\">},</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">,</span>\n</span><span class=\"line\">    <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">numberAffected</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class=\"line\">      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n</span><span class=\"line\">      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">\'Updated %d musicians\'</span><span class=\"p\">,</span> <span class=\"nx\">numberAffected</span><span class=\"p\">);</span>\n</span><span class=\"line\">      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">);</span>\n</span><span class=\"line\">  <span class=\"p\">});</span>\n</span><span class=\"line\"><span class=\"p\">}</span>\n</span><span class=\"line\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"k\">delete</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res<',1),(8,'Even Easier: RESTful API with Node.js and Express Framework','http://ericbrandel.com/2013/01/27/even-easier-restful-api-with-node-js-and-express-framework/',1,0,'\n						<p>I just finished up an <em>absolutely </em><a href=\"http://ericbrandel.com/2012/10/18/quickly-build-restful-apis-in-php-with-slim/\" title=\"Quickly Build RESTful APIs in PHP with Slim\">thrilling four part series</a> on using the Slim PHP Framework to knock out a RESTful API fairly quickly. This post (and likely a follow-up one) will show how it’s even easier to accomplish the same thing with <a href=\"http://nodejs.org/\" title=\"Node.js\">Node.js</a> and the <a href=\"http://expressjs.com/\" title=\"Express Web Application Framework\">Express Web Application Framework</a>.</p>\n<p>For an IDE, instead of the old faithful Netbeans, I switched over to <a href=\"http://www.jetbrains.com/webstorm/\" title=\"JetBrain WebStorm\">JetBrain’s WebStorm</a>. JetBrain is best known for the very powerful <a href=\"http://www.jetbrains.com/idea/\" title=\"IntelliJ IDEA\">IntelliJ IDEA</a> and WebStorm is their attempt at crafting the ultimate IDE for Javascript development. So far I’ve been pretty impressed, and it seems to be the most evolved Javascript focused development environment out there.</p>\n<a href=\"http://i0.wp.com/ericbrandel.com/wp-content/uploads/2013/01/webstorm.gif\"><img src=\"http://i0.wp.com/ericbrandel.com/wp-content/uploads/2013/01/webstorm.gif?resize=716%2C332\" alt=\"JetBrain WebStorm - It\'s probably true\" class=\"size-full wp-image-570\" /></a>JetBrain WebStorm – It’s probably true<p>Anyways, there won’t be a ton of Node.js info here, other than to point out it’s becoming a very popular choice for server-side coding. Everyone from LinkedIn to Walmart to Microsoft is investing significant time and energy into Node.js based development. One key benefit of running Javascript on the server is that you are able to tap into existing competencies of web developers, very few of which will not have at least a decent Javascript skillset.</p>\n<p>Frequently on top of Node.js is the <a href=\"http://expressjs.com/\" title=\"Express Web Application Framework\">Express Web Application Framework</a>. Express is similar to Slim in that it does a lot, but stays out of your way, and makes routing RESTful APIs a breeze. For example, setting up a new web app is pretty simple:</p>\n<pre>\r\nvar express = require(\'express\')\r\n  , get = require(\'./routes/get\')\r\n  , http = require(\'http\')\r\n  , path = require(\'path\');\r\n\r\nvar app = express();\r\n\r\napp.configure(function(){\r\n    app.set(\'port\', process.env.PORT || 3000);\r\n    app.use(express.logger(\'dev\'));\r\n    app.use(express.bodyParser());\r\n    app.use(express.methodOverride());\r\n    app.use(app.router);\r\n    app.use(express.static(path.join(__dirname, \'public\')));\r\n});\r\n\r\napp.configure(\'development\', function(){\r\n    app.use(express.errorHandler());\r\n});\r\n\r\napp.get(\'/\', get.all);\r\napp.get(\'/:id\', get.one);\r\n\r\nhttp.createServer(app).listen(app.get(\'port\'), function(){\r\n    console.log(\"Express server listening on port \" + app.get(\'port\'));\r\n});\r\n</pre>\n<p>Not much there really. The two key lines are really the two app.get entries:</p>\n<pre>\r\napp.get(\'/\', get.all);\r\napp.get(\'/:id\', get.one);\r\n</pre>\n<p>They setup the routes for <em>/</em> and <em>/:id</em> and hooks them to <em>get.all</em> and <em>get.one</em>. The second app.get contains a parameter, <em>:id</em>, which is available to the routed functions via a fairly simple params array. <em>get</em> was defined on the second line, which points to <em>/routes/get.js</em>:</p>\n<pre>\r\nvar mysql = require(\'mysql\');\r\nvar connection = mysql.createConnection({ host: \'localhost\', user: \'api\',  \r\n                                          password: \'12345\', database: \'api\'});\r\n\r\nexports.all = function(req, res){\r\n    if (connection) {\r\n        connection.query(\'select * from commodores order by name\', function(err, rows, fields) {\r\n            if (err) throw err;\r\n            res.contentType(\'application/json\');\r\n            res.write(JSON.stringify(rows));\r\n            res.end();\r\n        });\r\n    }\r\n};\r\n\r\nexports.one = function(req, res){\r\n    var id = req.params.id;\r\n    if (connection) {\r\n        var queryString = \'select * from commodores where id = ?\';\r\n        connection.query(queryString, [id], function(err, rows, fields) {\r\n            if (err) throw err;\r\n            res.contentType(\'application/json\');\r\n            res.write(JSON.stringify(rows));\r\n            res.end();\r\n        });\r\n    }\r\n};\r\n</pre>\n<p>Again, very little effort needed to get what we want, which is the data back to us in JSON. No ORM in use here, so there’s just some straight SQL calls to the MySQL database. The results from hitting the two URLs:<br /><em><strong>URL:</strong> http://localhost:3000/</em></p>\n<pre>\r\n[\r\n{\"id\":\"12\",\"name\":\"Commodore 128\",\"url\":\"http:\\/\\/en.wikipedia.org\\/wiki\\/Commodore_128\"}\r\n{\"id\":\"9\",\"name\":\"Commodore 16\",\"url\":\"http:\\/\\/en.wikipedia.org\\/wiki\\/Commodore_16\"}\r\n...\r\n{\"id\":\"8\",\"name\":\"Commodore SX-64\",\"url\":\"http:\\/\\/en.wikipedia.org\\/wiki\\/Commodore_SX-64\"}\r\n{\"id\":\"3\",\"name\":\"Commodore VIC-20\",\"url\":\"http:\\/\\/en.wikipedia.org\\/wiki\\/Commodore_VIC-20\"}\r\n]\r\n</pre>\n<p>To request a specific item:<br /><em><strong>URL:</strong> http://localhost:3000/2</em></p>\n<pre>[{\"id\":2,\"name\":\"Commodore PET/CBM\",\"url\":\"http://en.wikipedia.org/wiki/Commodore_PET\"}]</pre>\n<p>And that’s all that is needed for the two most common Get calls in a RESTful API. Part 2 will show how to setup the remaining Post, Put, and Delete calls, and will be linked here when it is complete.</p>\n<a href=\"https://plus.google.com/109768187739364803836?rel=author\">Google+</a><div class=\"sharedaddy sd-sharing-enabled\"><div class=\"robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing\"><h3 class=\"sd-title\">Share this:</h3></div></div>											',1),(9,'Realtime binary streaming for the web using websockets','http://binaryjs.com/',0,0,'<h3>Binary data for the web is here</h3>\n      <p><strong>BinaryJS is bidrectional realtime binary data with binary websockets</strong></p>\n      <p>A year ago if someone asked you \"how do I stream binary data / audio / video / files to Javascript?\" the answer would have been \"Flash\" or \"no\" (or \"Java applets\")</p>\n      <p>But as of Chrome 15+, Firefox 11+, Internet Explorer 10, and Safari nightly builds, that is no longer true.</p><p>BinaryJS is a lightweight framework that utilizes websockets to send, stream, and pipe binary data bidirectionally between browser javascript and Node.js.</p>\n      <ul><li>BinaryPack serialization format is fast, binary, and JSON-type compatible. Data stays binary end to end</li>\n        <li>Automatically chunks large binary data buffers for streaming performance</li>\n        <li>Send multiple streams of data concurrently over multiplexed websocket connection</li>\n        <li>API implements Node.js read/write Streams. You can pipe any stream into BinaryJS streams (and vice-versa)</li>\n        <li>\"pause,\" \"resume,\" and \"end\" as in the Streams API</li>\n      </ul><h3>Show me the API</h3>\n      <p>BinaryJS allows multiple streams (of pure binary data!) over a single realtime websocket connection. Either the client or server can create a stream that both client and server can write to.</p>\nNode.js server<pre><code>var server = BinaryServer({port: 9000});\nserver.on(\'connection\', function(client){\n  client.on(\'stream\', function(stream, meta){\n    var file = fs.createWriteStream(meta.file);\n    stream.pipe(file);\n  }); \n});\n</code></pre>     \n\nBrowser:<pre><code>var client = BinaryClient(\'ws://localhost:9000\');\nclient.on(\'open\', function(stream){\n  var stream = client.createStream({file: \'hello.txt\'});\n  stream.write(\'Hello\');\n  stream.write(\'World!\');\n  stream.end();\n});\n</code></pre>\n      <p>\n        <a href=\"https://github.com/binaryjs/binaryjs/blob/master/doc/start.md\">View the \"Getting Started\" guide</a>\n      </p>\n      <p>\n        <a href=\"https://github.com/binaryjs/binaryjs/blob/master/doc/api.md\">View the API reference</a>\n      </p>\n      <p>\n        <a href=\"https://github.com/binaryjs/binaryjs/tree/master/examples/helloworld\">View the \"Hello world\" example</a>\n      </p>\n      <p>\n        <a href=\"https://github.com/binaryjs/binaryjs/tree/master/examples\">See more examples</a>\n      </p>\n      \n      <h3>What can you do with this?</h3>\n      <p>You have just as much flexibility as a full TCP socket between client and server</p>\n      <p>Here are some ideas that are now possible (beta-testers are already working on some!):</p>\n      <ul><li>Realtime multiplayer video games without expensive stringifying</li>\n        <li>Streaming FLAC into HTML5 WebAudio api</li>\n        <li>Progressive image loading (for retina displays and high-res photorgraphy)</li>\n        <li>Streaming file uploads <a href=\"https://github.com/binaryjs/binaryjs/tree/master/examples/fileupload\">Example</a></li>\n        <li>Live HTML &lt;video&gt; streaming</li>\n        <li>PJAX with no HTTP requests. Not even for image assets</li>\n        <li>Video / audio chat over websockets</li>\n      </ul><h3>Additional details</h3>\n      <p>BinaryJS employs `BinaryPack` a modified version of the MessagePack protocol. The Node.js server uses a modified version of the `ws` library enhanced to pass through the status of the socket buffer so adherence to Node.js Stream API is possible.</p>\n      <p>Both the server and the client can write or accept any arbitrary JSON type or structure – Objects, arrays, null, booleans, strings – and also binary data. Because BinaryPack is a binary protocol, the wire format has negligible serialization/deserialization overhead for large chunks of binary data. This also means binary data types such as Buffer in Node.js and Blob or ArrayBuffer in the client can be serialized and deserialized (without the inefficiencies of JSON or Base64!).</p>\n      <p>On the client, feature detection is employed to choose between using BlobBuilder, the Blob constructor, and ArrayBufferViews or ArrayBuffers themselves for assembling Blobs for transport.</p>\n      <p>When using `stream.write` data chunking is up to the caller. When a stream is piped, it is up to the source stream to chunk data. When sending a larger binary type using `client.send` a new stream is created and the buffer will piped into the stream in chunks automatically.</p>\n      <p>For piped streams, BinaryJS correctly provides boolean return values from `stream.write` calls so that if the socket buffer is full, the incoming stream is paused. This powerful cascade of stream throttling allows large streams to be transferred without excessive memory use.</p>\n      <h3>Future plans</h3>\n      <p>The items below are in no particular order. If you would like to contribute go ahead and issue a pull request or email me at <a href=\"mailto:really.ez+1010@gmail.com\">really.ez+1010@gmail.com</a></p>\n      <ul><li>Improved <a href=\"https://github.com/binaryjs/js-binarypack\">BinaryPack</a> serialization performance, including a native C++ module for <a href=\"https://github.com/binaryjs/node-binarypack\">node-binarypack</a></li>\n        <li>Fallbacks (either with Flash or XHR2) for non-binary-websocket browsers</li>\n        <li>iOS and Android clients</li>\n        <li>Ruby, Python, Java servers</li>\n      </ul><h3>Limitations and issues</h3>\n      <ul><li>Currently supports Chrome 15+ and Firefox 11+, IE10. Fallbacks that will support Safari, mobile iOS and Android, and older FF/Chrome versions are in the works</li>\n        <li>Performance is largely untested. Though BinaryPack serialization results in smaller data, I have not compared to native JSON serialization performance. C++ BinaryPack Node.js module is in the works</li>\n        \n      </ul><h3>Support and questions</h3>\n      <p>If you want you can email me at <a href=\"mailto:really.ez+1010@gmail.com\">really.ez+1010@gmail.com</a></p>\n      <p>Please file a <a href=\"https://github.com/binaryjs/binaryjs/issues\">GitHub issue</a> for the bugs you find.</p>\n      ',1),(10,'How to bring Illustrator vector shapes into OpenFrameworks C++ with Drawscript','http://tomkrcha.com/?p=3661',1,0,'\n            	\n<p>Download Drawscript panel for Illustrator here: <a href=\"http://drawscri.pt/\">http://drawscri.pt/</a></p>\n<p><a href=\"http://www.openframeworks.cc/\">OpenFrameworks</a> is a creative coding tooling written in C++. Read the <a href=\"http://www.openframeworks.cc/documentation/\">OF API Documentation</a>.</p>\n<p>Drawscript currently support two different outputs for OpenFrameworks: Simple and Shape.</p>\n<p><strong>Simple output uses: <em>ofLine, ofBezier, ofCircle, ofEllipse, ofRect</em></strong><br /><a href=\"http://tomkrcha.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-19-at-12.38.55-PM.png\"><img src=\"http://tomkrcha.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-19-at-12.38.55-PM.png\" alt=\"OpenFrameworks Drawscript Simple\" width=\"589\" class=\"alignnone size-full wp-image-3662\" /></a></p>\n<p><strong>Shape output uses: <em>ofBeginShape, ofVertex, ofBezierVertex, ofEndShape</em><br /></strong><br /><a href=\"http://tomkrcha.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-19-at-12.39.07-PM.png\"><img src=\"http://tomkrcha.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-19-at-12.39.07-PM.png\" alt=\"OpenFrameworks Drawscript Shape\" width=\"590\" class=\"alignnone size-full wp-image-3665\" /></a></p>\n<p>In order to include within your OpenFrameworks project:<br />- <a href=\"http://www.openframeworks.cc/download/\">Download OpenFrameworks</a><br />- I am using OSX version with <a href=\"https://developer.apple.com/xcode/\">Xcode</a><br />- Open <em>examples/empty/emptyExample/emptyExample.xcodeproj</em> in Xcode<br />- Copy and paste the generated code from Drawscript to testApp.cpp draw function</p>\n\n<div class=\"wp_syntax\"><table><tr><td class=\"code\"><pre class=\"c\"><span>// testApp.cpp</span>\n<span>void</span> testApp<span>::</span><span>draw</span><span>(</span><span>)</span><span>{</span>\n    ofNoFill<span>(</span><span>)</span><span>;</span>\n    ofSetLineWidth<span>(</span><span>2</span><span>)</span><span>;</span>\n    ofSetColor<span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>)</span><span>;</span>\n    ofLine<span>(</span><span>143</span><span>,</span><span>159</span><span>,</span><span>110</span><span>,</span><span>137</span><span>)</span><span>;</span>\n    ofLine<span>(</span><span>110</span><span>,</span><span>137</span><span>,</span><span>143</span><span>,</span><span>114</span><span>)</span><span>;</span>\n    ofLine<span>(</span><span>143</span><span>,</span><span>114</span><span>,</span><span>169</span><span>,</span><span>114</span><span>)</span><span>;</span>\n    ofBezier<span>(</span><span>169</span><span>,</span><span>114</span><span>,</span><span>169</span><span>,</span><span>114</span><span>,</span><span>207</span><span>,</span><span>177</span><span>,</span><span>207</span><span>,</span><span>137</span><span>)</span><span>;</span>\n    ofBezier<span>(</span><span>207</span><span>,</span><span>137</span><span>,</span><span>207</span><span>,</span><span>97</span><span>,</span><span>169</span><span>,</span><span>159</span><span>,</span><span>169</span><span>,</span><span>159</span><span>)</span><span>;</span>\n    ofLine<span>(</span><span>169</span><span>,</span><span>159</span><span>,</span><span>143</span><span>,</span><span>159</span><span>)</span><span>;</span>\n<span>}</span></pre></td></tr></table></div>\n\n<p>- Run, you should see this:<br /><a href=\"http://tomkrcha.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-19-at-12.55.23-PM.png\"><img src=\"http://tomkrcha.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-19-at-12.55.23-PM.png\" alt=\"OpenFrameworks Xcode Drawscript\" width=\"612\" class=\"alignnone size-full wp-image-3670\" /></a></p>\n<p>- In order to turn on anti-aliasing, call <a href=\"http://www.openframeworks.cc/documentation/graphics/ofGraphics.html#ofEnableSmoothing\">ofEnableSmoothing</a> before</p>\n<p>- The complete code for the Shape result would look like this:</p>\n\n<div class=\"wp_syntax\"><table><tr><td class=\"code\"><pre class=\"c\"><span>// testApp.cpp</span>\n<span>void</span> testApp<span>::</span><span>draw</span><span>(</span><span>)</span><span>{</span>\n    ofEnableSmoothing<span>(</span><span>)</span><span>;</span>\n    ofNoFill<span>(</span><span>)</span><span>;</span>\n    ofSetLineWidth<span>(</span><span>2</span><span>)</span><span>;</span>\n    ofSetColor<span>(</span><span>0</span><span>,</span><span>0</span><span>,</span><span>0</span><span>)</span><span>;</span>\n    ofBeginShape<span>(</span><span>)</span><span>;</span>\n        ofVertex<span>(</span><span>143</span><span>,</span><span>159</span><span>)</span><span>;</span>\n        ofVertex<span>(</span><span>110</span><span>,</span><span>137</span><span>)</span><span>;</span>\n        ofVertex<span>(</span><span>143</span><span>,</span><span>114</span><span>)</span><span>;</span>\n        ofVertex<span>(</span><span>169</span><span>,</span><span>114</span><span>)</span><span>;</span>\n        ofBezierVertex<span>(</span><span>169</span><span>,</span><span>114</span><span>,</span><span>207</span><span>,</span><span>177</span><span>,</span><span>207</span><span>,</span><span>137</span><span>)</span><span>;</span>\n        ofBezierVertex<span>(</span><span>207</span><span>,</span><span>97</span><span>,</span><span>169</span><span>,</span><span>159</span><span>,</span><span>169</span><span>,</span><span>159</span><span>)</span><span>;</span>\n        ofVertex<span>(</span><span>143</span><span>,</span><span>159</span><span>)</span><span>;</span>\n    ofEndShape<span>(</span><span>)</span><span>;</span>\n<span>}</span></pre></td></tr></table></div>\n\n<br />',1),(11,'Fix Time Machine Sparsebundle NAS Based Backup Errors','http://www.garth.org/archives/2011,08,27,169,fix-time-machine-sparsebundle-nas-based-backup-errors.html',1,0,'\n		<p><a href=\"http://cdn.garth.org/wp-content/uploads/2011/08/time-machine-icon.png\"><img class=\"alignright size-thumbnail wp-image-150\" title=\"Time Machine\" alt=\"Time Machine\" src=\"http://cdn.garth.org/wp-content/uploads/2011/08/time-machine-icon-150x150.png\" width=\"150\" height=\"150\" /></a></p>\n<p>This is a modification of an <a href=\"http://www.garth.org/archives/2010,07,16,124,fixing-time-machine-sparsebundle-network-backup-errors.html\">original post</a> for use when you have a corrupt sparsebundle backup on a NAS (as opposed to an <a title=\"Fix Time Machine Sparsebundle Network Backup Errors\" href=\"http://www.garth.org/archives/2010,07,16,124,fixing-time-machine-sparsebundle-network-backup-errors.html\">external drive attached to a router</a>) and it needs to be repaired. The NAS is likely a hardware product from the likes of Netgear, Synology, Buffalo or QNap – or for those of us with a home-grown backup server running FreeNAS.</p>\n<p>The error you may see is “Time Machine completed a verification of your backups. To improve reliability, Time Machine must create a new backup for you.” This can be fixed by following the below.</p>\n<p>From your Mac, connect to the network share that houses the sparsebundle.</p>\n<p>At the top level of the drive are the various sparsebundles that make up your individual computer backups.</p>\n<p>Do not double click on these sparsebundles or try to repair with Disk Utility.</p>\n<p>Open Terminal and then switch to root by typing</p>\n<p><code>sudo su -</code></p>\n<p>and then enter your password.</p>\n<p>The verication that has already run has marked your sparsebundle as bad, so first we need to make it look normal.</p>\n<p>From the command line</p>\n<p><code>chflags -R nouchg /Volumes/{name of your network share}/{name of}.sparsebundle</code></p>\n<p>This may take a little while.</p>\n<p>Now type</p>\n<p><code>hdiutil attach -nomount -noverify -noautofsck /Volumes/{name of your network share/{name of}.sparsebundle</code></p>\n<p>You will then see something like</p>\n<p><code>/dev/diskx Apple_partition_scheme<br />/dev/diskxs1 Apple_partition_map<br />/dev/diskxs2 Apple_HFSX</code></p>\n<p>Where x is the disk id for the external disk. You are interested in the one labeled Apple_HFSX or Apple_HFS. It might be 2, 3, 4 or higher.</p>\n<p>At this point, I have found that the filesystem check is already happening. You can check for activity by tail’ing the fsck_hfs.log</p>\n<p><code>tail -f /var/log/fsck_hfs.log</code></p>\n<p>If fsck is going then in my experience it will be able to repair the sparsebundle. Go away for a few hours and let it chug away.</p>\n<p>When it is done, you will either see</p>\n<p>‘The Volume was repaired successfully’</p>\n<p>or</p>\n<p>‘The Volume could not be repaired’</p>\n<p>If the latter you can run disk repair again:</p>\n<p><code>fsck_hfs -drfy /dev/diskxs2</code></p>\n<p>(Optionally if you have the available RAM, you can set a RAM cache in the command above to help speed up this command like so:</p>\n<p><code>fsck_hfs -drfy -c 750 /dev/diskxs2</code></p>\n<p>This will use 750MB of RAM – feel free to change this amount to best fit your system (amount of RAM vs size of your Time Machine Sparsebundle). If you are unsure about this, use the first command.</p>\n<p>Make sure to replace x with whatever number your disk is from the output above.</p>\n<p>The letters “drfy” tell the filecheck utility different things. d for ‘Show Debug’ – r for ‘Rebuild Catalog Tree’ – f for ‘Force’ and y for assume ‘yes’ to any prompts.</p>\n<p>Now go do something for an hour or two. Come back and</p>\n<p><code>tail -f /var/log/fsck_hfs.log</code></p>\n<p>If all went well, the last output you will see is</p>\n<p>‘The Volume was repaired successfully’</p>\n<p>Now you need to type<br /><code>hdiutil detach /dev/diskxs2</code></p>\n<p>You can redo the above for any other Time Machine sparse bundles you have permission to modify while you have the network share attached to your computer.</p>\n<p>Final step.</p>\n<p>When complete, you need to edit an plist file within the sparsebundle that records the state of the backup. On the top level of the sparsebundle find a file called com.apple.TimeMachine.MachineID.plist. Edit it and remove these two nodes</p>\n<p><code>&lt;key&gt;RecoveryBackupDeclinedDate&lt;/key&gt;<br />&lt;date&gt;{whatever-the-date}&lt;/date&gt;</code></p>\n<p>Finally you want to change</p>\n<p><code>&lt;key&gt;VerificationState&lt;/key&gt;<br />&lt;integer&gt;2&lt;/integer&gt;</code></p>\n<p>to<br /><code>&lt;key&gt;VerificationState&lt;/key&gt;<br />&lt;integer&gt;0&lt;/integer&gt;</code></p>\n<p>Now you can eject the network share and have Time Machine give it another go. After the (long) verification step, backups should proceed once again.</p>\n<p>Notes:</p>\n<p>Ideally this should be done over a gigabit wired network connection. Do not attempt using Wi-Fi. You also want to make sure your machine does not go to sleep during the above operation.</p>\n<p>[Update: 1.1.2013]</p>\n<p>I appreciate all the warm feedback from people all over the world who have been helped by this post. This site helps to fund my hobbies, so if this post has helped you please consider a USD $1.99 donation to my hobby fund.</p>\n\n\n\n\n\n<p>[Update: 12.23.2012]</p>\n<p>If after running the initial</p>\n<p><code>fsck_hfs -drfy /dev/diskxs2</code></p>\n<p>command you get a message in the fsck_hfs.log along the lines of</p>\n<p><code>RebuildBTree – record x in node y is not recoverable.</code></p>\n<p>then try</p>\n<p><code> fsck_hfs -p /dev/diskxs2</code></p>\n<p>followed by</p>\n<p><code> fsck_hfs -drfy /dev/diskxs2</code></p>\n<p>And see if that works.  It did for me today.\n</p>\n	',1),(12,'Configuring rsnapshot and launchd on Mac OS X','http://justatheory.com/computers/os/macosx/rsnapshot_and_launchd.html',1,0,'\n        \n\n<p>Just a few quick notes on how I set up <code>launchd</code> to run <code>rsnapshot</code> to backup my new iMac. The configurations I made are based on Kenn Christ\'s <a href=\"http://www.inmostlight.org/2006/03/easy-backups-with-rsnapshot\" title=\"Easy backups with rsnapshot\">blog entry</a>.</p>\n\n<ol><li>\n    <p>Installed the rsnapshot port:</p>\n    <pre>sudo port install rsnapshot</pre>\n  </li>\n\n  <li>\n    <p>Changed <em>/opt/local/etc/rsnapshot.conf</em> as follows:</p>\n    <pre>\nsnapshot_root	/Volumes/Demiterra/Backup/\n#interval	hourly	6\nrsync_long_args	--delete --numeric-ids --relative --delete-excluded -extended-attributes\nexclude	*.cpan*\nlink_dest	1\n#backup	/home/		localhost/\n#backup	/etc/		localhost/\n#backup	/usr/local/	localhost/\nbackup	/Users/		\n</pre>\n    <p>Note that I\'ve commented out hourly backups and the default backup directories. I\'m using the <em>Backups</em> subdirectory on a <a href=\"http://www.wdc.com/en/products/Products.asp?DriveID=224\" title=\"Western Digital My Book™ Premium Edition™\">My Book</a> half terrabyte drive that I picked up at Costco for $220. Your configuration may of course differ.</p>\n  </li>\n\n  <li>\n    <p>Tested it by manually running:</p>\n    <pre>sudo /opt/local/bin/rsnapshot daily</pre>\n  </li>\n\n  <li>\n    <p>Created hourly, daily, weekly, and monthly <code>launchd</code> plist files for <code>rsnapshot</code>. The hourly one runs every six hours and I threw it in just for completeness. You can download them all from <a href=\"http://justatheory.com/downloads/rsnapshot_launchd_plists.tar.gz\" title=\"Download my rsnapshot launchd plist files\">here</a>. Just put them into <em>/Library/LaunchDaemons</em> and run:</p>\n    <pre>sudo launchctl load -w /Library/LaunchDaemons/org.rsnapshot.periodic-*.plist</pre>\n  </li>\n</ol><p>And that\'s it. Enjoy!</p>\n\n        ',1),(13,'Time Machine for every Unix out there','https://blog.interlinked.org/tutorials/rsync_time_machine.html',1,0,'\n\n  \n    <p><a href=\"http://rsync.samba.org\">rsync</a> is one of the tools that have gradually infiltrated my day to day tool-box (aside Vim and Zsh).</p>\n<p>Using rsync it’s very easy to mimic Mac OS X new feature called Time Machine. In this article I’ll show how to do it, but there is still a nice <span class=\"caps\">GUI</span> missing – for those who like it shiny.</p>\n<h2>What Time Machine does</h2>\n<p>Time Machine makes a snapshot of your files every hour. The files are usually stored on a external hard drive connected to your Mac via <span class=\"caps\">USB</span> or Firewire. Earlier Leopard versions (<span class=\"caps\">ADC</span> preview versions) had the ability to make the backups to a remote drive (I’ve heard).</p>\n<p>So if you lose a file, or did a devastating change to one of your files, simply go back in time until you find your file or a version that’s not corrupted.</p>\n<p>Incrementally backing up all files every hour so that you can access them in reversed chronological order isn’t that hard with standard Unix utilities like rsync. The only missing thing is a nice <span class=\"caps\">GUI</span> for which Apple is known to be quite good at.</p>\n<h2>Making full backups in no time every hour</h2>\n<p>You can use this method to make a backup every hour or every ten minutes if you like. There are many many features you can tune or configure to your own taste – excluding files that are larger than 1GB for example.</p>\n<p>So, here the command to make the backup:</p>\n<div class=\"highlight\"><pre><code class=\"language-bash\">rsync -aP --link-dest<span class=\"o\">=</span>PATHTO/<span class=\"nv\">$PREVIOUSBACKUP</span> <span class=\"nv\">$SOURCE</span> <span class=\"nv\">$CURRENTBACKUP</span></code></pre></div><p>Lets go through the parameters step by step.</p>\n<ul><li><code>-a</code> means Archive and includes a bunch of parameters to recurse directories, copy symlinks as symlinks, preserve permissions, preserve modification times, preserve group, preserve owner, and preserve device files. You usually want that option for all your backups.</li>\n	<li><code>-P</code> allows rsync to continue interrupted transfers and show a progress status for each file. This isn’t really necessary but I like it.</li>\n	<li><code>--link-dest</code> this is a neat way to make full backups of your computers without losing much space. rsync links unchanged files to the previous backup (using hard-links, see below if you don’t know hard-links) and only claims space for changed files. This only works if you have a backup at hand, otherwise you have to make at least one backup beforehand.</li>\n	<li><code>PATHTO/$PREVIOUSBACKUP</code> is the path to the previous backup for linking. Note: if you delete this directory, <strong>no other backup is harmed</strong> because rsync uses <strong>hard-links</strong> and the operating system (or filesystem) takes care of releasing space if no link points to that region anymore.</li>\n	<li><code>$SOURCE</code> is the directory you’d like to backup.</li>\n	<li><code>$CURRENTBACKUP</code> is the directory to which you’d like to make the backup. This should be a <strong>non-existing directory</strong>.</li>\n</ul><p>As said earlier, rsync has many many features. To exclude files over a certain size for example, use the option <code>--max-size</code> (unfortunately this is not available on the rsync version shipped with Mac OS X Leopard). The man page or the <a href=\"http://rsync.samba.org/documentation.html\">documentation</a> can give you plenty of ideas in this direction.</p>\n<p>So much for the theory of the most important command for our purpose. Here a simple script that makes an incremental backup every time you call it:</p>\n<div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c\">#!/bin/sh</span>\n\n<span class=\"nv\">date</span><span class=\"o\">=</span><span class=\"sb\">`</span>date <span class=\"s2\">\"+%Y-%m-%dT%H:%M:%S\"</span><span class=\"sb\">`</span>\nrsync -aP --link-dest<span class=\"o\">=</span><span class=\"nv\">$HOME</span>/Backups/current /path/to/important_files <span class=\"nv\">$HOME</span>/Backups/back-<span class=\"nv\">$date</span>\nrm -f <span class=\"nv\">$HOME</span>/Backups/current\nln -s back-<span class=\"nv\">$date</span> <span class=\"nv\">$HOME</span>/Backups/current</code></pre></div><p>The script creates a file called “back” appended by the current date and time, for example <code>back-2007-11-13T22:03:32</code> which contains the <strong>full backup</strong>. Then there is a symbolic link called “current” which points to the most recent directory. This directory-link is used for the <code>--link-dest</code> parameter.</p>\n<p>You should look at the <code>--exclude</code> parameter (or better, <code>--exclude-from=</code> parameter) and learn how to exclude certain files or directories from the backup (you shouldn’t backup your backup for example).</p>\n<p>The script above only works on the local machine because making links on a remote machine needs some extra work. But not much:</p>\n<div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c\">#!/bin/sh</span>\n\n<span class=\"nv\">date</span><span class=\"o\">=</span><span class=\"sb\">`</span>date <span class=\"s2\">\"+%Y-%m-%dT%H:%M:%S\"</span><span class=\"sb\">`</span>\nrsync -azP --link-dest<span class=\"o\">=</span>PATHTOBACKUP/current <span class=\"nv\">$SOURCE</span> <span class=\"nv\">$HOST</span>:PATHTOBACKUP/back-<span class=\"nv\">$date</span>\nssh <span class=\"nv\">$HOST</span> <span class=\"s2\">\"rm -f PATHTOBACKUP/current &amp;&amp; ln -s back-$date PATHTOBACKUP/current\"</span></code></pre></div><p>The <code>-f</code> parameter for the <code>rm</code> command is used to supress error messages if the <code>current</code> directory is not present, which would in turn prevent the link to be created.</p>\n<p>To get that working you either use a public/private key authentication scheme or something else to avoid typing in your password. Another possibility is, of course, to mount the remote file-system on the local computer using the above script.</p>\n<p>On my setup the script takes about 6 seconds to synchronize 46968 files and 29GB – this takes 20MB for the file structure (with no actual files to transfer of course). But afterwards, I have a complete backup of my system in a new directory.</p>\n<p>On a much bigger setup (1.2 million files and 50GB of data) the backup takes about 30 minutes and takes about 3GB of space (just for links!), so it isn’t exactly <strong>free</strong>, but very convenient.</p>\n<p>The space needed for the backup is determined by the shape of your directory structure. On the larger setup I have lots of Maildirs and a very deep directory structure so it takes much more space than my home-directory backup above. 3GB is quite a lot, but 20MB doesn’t hurt.</p>\n<h2>Advanced <code>rsync</code> parameters</h2>\n<p>Additional to the parameters described above, I usually employ a combination of these parameters in my backup:</p>\n<ul><li><code>--delete</code> and <code>--delete-excluded</code> this tells rsync to remove files from my backups either if they are gone on my local machine, or if I decided to exclude them from my backup.</li>\n	<li><code>--exclude-from=FILE</code> the file specified here is a simple list of directories of files (one per line) which should <strong>not</strong> be backed up. My <code>Trash</code> folder oder some <code>.cache</code> folders are candidates for this file.</li>\n	<li><code>-P</code> is used to give more information on how far the backup is, and how many files are to be backed up. Additional it could resume an interrupted transfer (which doesn’t apply here because we create a blank backup each time we call the script).</li>\n	<li><code>-x</code> this one is <strong>important</strong> because it prohibits rsync to go beyond the local filesystem. For example if you backup you Linux-root partition, you should not include the /proc directory because rsync will get stuck in it. <code>-x</code> excludes all mounted filesystems from the backup which is probably what you want in most cases.</li>\n</ul><h2>Hard-Links</h2>\n<p>Each file in a directory is a link to the actual data on your hard-disk. The file-system keeps track of how many links to a area point, and only if the last link is deleted, the whole area gets deleted (in contrast to soft-links, these are pointers to the file-name, not the contents).</p>\n<p>Here an illustration of two backups with three files each. <code>File1</code> and <code>File2</code> are the <em>same</em> in both backups, only <code>File3</code> changed between <code>Backup1</code> and <code>Backup2</code>. So in <code>Backup2</code>, <code>File3 (changed)</code> has to point to a different area than <code>File3</code> in <code>Backup1</code>.</p>\n<p><img src=\"http://blog.interlinked.org/static/images/hardlinks.png\" alt=\"\" /></p>\n<p><span class=\"caps\">BTW</span>, there is a <a href=\"http://code.google.com/p/flyback/\">nice project for Linux</a> out there which provides the same functionality as Time Machine including a nice <span class=\"caps\">GUI</span> which is also based on <strong><code>rsync</code></strong> and the procedure presented here.</p>\n<h2>The End</h2>\n<p>Credit: The initial idea for this approach came from <a href=\"http://www.mikerubel.org/computers/rsync_snapshots/\">Mike Rubel – rsync snapshots</a>.</p>\n<p>Also interesting if you have to cope with Windows: <a href=\"http://www.softlab.ntua.gr/~ttsiod/backup.html\">Optimal remote backups with rsync over Samba</a>.</p>\n<p>There are quite a few approaches out there which more or less do the same, but rsync is available on virtually every Unix out there (even the <a href=\"http://damnsmalllinux.org/\"><span class=\"caps\">DSL</span></a> with its 50MB footprint includes rsync). So using other tools might be more convenient, but I’ll stick with the omnipresent rsync.</p>\n<p>rsync offers the possibility to store only the differences to the previous backup (using <code>--compare-dest</code> which should point to a full-backup instead of <code>--link-dest</code>). It then doesn’t make links to the unchanged files, it just leaves them out. This way you get an incremental backup without the “directory-overhead” of the <code>--link-dest</code> approach. <strong>But</strong> you have to be <strong>extremely</strong> cautious which one of older backups you delete because the newer backups just don’t contain some of these files (think of full-backups as checkpoints)! Using the <code>--link-dest</code> you can delete all backups but the last and you still got all the files, so I’m happy to pay 20MB per backup for this safety.</p>\n<h2>Full script</h2>\n<p>Here my full script with additional features:</p>\n<div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c\">#!/bin/sh</span>\n\n<span class=\"nv\">date</span><span class=\"o\">=</span><span class=\"sb\">`</span>date <span class=\"s2\">\"+%Y-%m-%dT%H_%M_%S\"</span><span class=\"sb\">`</span>\n<span class=\"nv\">HOME</span><span class=\"o\">=</span>/home/user/\n\nrsync -azP <span class=\"se\">\\</span>\n  --delete <span class=\"se\">\\</span>\n  --delete-excluded <span class=\"se\">\\</span>\n  --exclude-from<span class=\"o\">=</span><span class=\"nv\">$HOME</span>/.rsync/exclude <span class=\"se\">\\</span>\n  --link-dest<span class=\"o\">=</span>../current <span class=\"se\">\\</span>\n  <span class=\"nv\">$HOME</span> user@backupserver:Backups/incomplete_back-<span class=\"nv\">$date</span> <span class=\"se\">\\</span>\n  <span class=\"o\">&amp;&amp;</span> ssh user@backupserver <span class=\"se\">\\</span>\n  <span class=\"s2\">\"mv Backups/incomplete_back-$date Backups/back-$date \\</span>\n<span class=\"s2\">  &amp;&amp; rm -f Backups/current \\</span>\n<span class=\"s2\">  &amp;&amp; ln -s back-$date Backups/current\"</span></code></pre></div>\n  \n  \n    <div class=\"quote clear\">\n      <p>The universe tends toward maximum irony. Don’t push it. <br />— <a href=\"http://jwz.livejournal.com/801607.html\"><span class=\"caps\">JWZ</span></a></p>\n    </div>\n  \n\n',1),(14,'Reclaiming a TimeMachine Volume\'s Disk Space','http://blog.hawkimedia.com/2012/08/reclaiming-a-timemachine-volumes-disk-space/',1,0,'<p>A slight departure from the thing we all love doing (writing code) to a thing some of us may have to spend time on (system administration). We added a fourth Mac to our home network recently, and I wanted to get it backed up automatically. The solution was obvious: TimeMachine! I run a Linux server with gobs of storage. It runs Netatalk 3.0 and serves up (among other volumes) a 500GB TimeMachine volume. It works really well, except when the volume is full with TimeMachine backups from other machines. There’s a way to reclaim this space, but it’s not obvious or automatic.</p><p>If you’re a TimeMachine user, you know that when your TimeMachine volume fills, TimeMachine will automatically remove the oldest backup(s) to make room for new backups. What may not be obvious is that when space is needed and old backups are removed, the total disk usage of the sparse bundle in which TimeMachine actually stores your backups does not change! If you have a single Mac backing up to a dedicated TimeMachine volume, this really isn’t an issue. But in my case, I have one large volume which I share with multiple Macs. Two Macs have been merrily backed up for well over a year each, or more. The volume is nearly full, divided between 2 sparse bundle files.</p><p>It would be nice if TimeMachine had some advanced controls to limit how much actual disk space any one machine could use, but it doesn’t. Luckily, though, there are some command line tools available to help us.</p><p>Basically, it’s a two step process:</p><ol><li>Remove old backups manually</li><li>Compact the sparse bundle</li></ol><p>Apple provides a command line utility named <strong>tmutil</strong>. You can use it from a Terminal window. While it can do a lot of things, what we’re interested in are two commands. The first simply lists all your backup sets:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n% tmutil listbackups\n</pre><p>You’ll get output similar to this:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n/Volumes/Time Machine Backups/Backups.backupdb/Mark Granoff’s iMac/2011-02-28-004805\n/Volumes/Time Machine Backups/Backups.backupdb/Mark Granoff’s iMac/2011-03-07-004637\n/Volumes/Time Machine Backups/Backups.backupdb/Mark Granoff’s iMac/2011-03-21-003726\n...\n/Volumes/Time Machine Backups/Backups.backupdb/Mark Granoff’s iMac/2012-08-30-071401\n/Volumes/Time Machine Backups/Backups.backupdb/Mark Granoff’s iMac/2012-08-30-081501\n</pre><p>These are the paths to all your backup sets in the sparse bundle TimeMachine uses for your Mac’s backups. They are listed from oldest to newest. As you can see here, my oldest backup is from February 28, 2011, and the next oldest is the following week, March 7, 2011. These are pretty old and really not worth keeping around, especially if you want to reclaim some disk space on the volume. Notice that these old backups are essentially “weekly” backups. TimeMachine will keep an unlimited number of these weekly backups. More recent backups are hourly and daily, and these are the more valuable backups to keep around.</p><p>The first thing you need to do is to remove the oldest backups, starting with the very oldest, and working your way forward in time. Be as aggressive as you feel you need to be to both reclaim disk space and feel confident that your backup sets are as complete as you need them to be. DO NOT DELETE ALL YOUR BACKUP SETS!</p><p>Deleting a backup set is simple, but requires root privilege:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n% sudo tmutil delete \'/Volumes/Time Machine Backups/Backups.backupdb/Mark Granoff’s iMac/2011-02-28-004805\'\n</pre><p>You’ll be asked for the administrator’s password, and then tmutil will chug away. If the operation succeeds, the tool simply exits without any output. If there is a problem, you’ll see an error message.</p><p>Notice that I’ve wrapped the path to the backup in single quotes. This is because there are spaces in the path.</p><p>The tmutil delete command only removes the backup from the sparse bundle. It doesn’t actually free the disk space. To do that, you have to go a little deeper.</p><p>On your Mac is a mount point called /Volumes. You can examine the contents of this mount point with ls:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n% cd /Volumes\n% ls -1\nMacintosh HD\nNO NAME\nRecovery HD\nTime Machine Backups\nTimeMachine\n</pre><p>These are the names of all the mounted disks (or things that look like disks) on your Mac. Notice two likely candidates for your actual TimeMachine volume. Yours may be named slightly differently, but the one you want is the one that actually shows files of type .sparsebundle . In my case, it is the volume TimeMachine:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n% sudo ls -l TimeMachine/\n...\ndrwxr-x---@ 1 root wheel 264 Aug 30 08:21 Mark Granoff’s iMac.sparsebundle\n...\n</pre><p>Notice that you don’t actually own the file. (Had I not used the sudo command with ls I could not have listed the contents of /Volumes/TimeMachine)</p><p>That .sparsebundle file for your Mac is where all your backup sets live. TimeMachine manages the contents of this file, but doesn’t do anything automatically to reduce its size. Luckily there is another tool for that, but you’ll have to be root to run it:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n% sudo su - root\n% hdiutil compact /Volumes/TimeMachine/YourBackup.sparsebundle\nStarting to compact…\nReclaiming free space…\n...................................................\nFinishing compaction…\nReclaimed 3.1 GB out of 304.1 GB possible.\n</pre><p>That’s it! In this example I reclaimed 3.1GB of actual disk space on my TimeMachine volume. While working at removing old backups on my wife’s machine, a half dozen or so old backups accounted for over 63GB of reclaimed disk space! So, the results can be dramatic.</p><p>So lately I’ve been deleting a few backup sets  and then compacting the .sparsebundle, and then repeating. I have a long way to go, between my Mac and my wife’s, before there is enough space available to backup the new Mac for the first time. It’s a time consuming process, but well worth the time in order to tame TimeMachine’s appetite for disk space.</p><div class=\"sharedaddy sd-sharing-enabled\"><div class=\"robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing\"><h3 class=\"sd-title\">Share this:</h3></div></div>',1),(15,' How to create a network backup with Apple\'s TimeMachine','https://foliovision.com/2010/05/network-backup-apple-timemachine',1,0,'\n						\n						\n<p>If you have tried to set up network backup on OS X and you ran into the message “the backup disk image could not be created”, probably this article will help you.</p>\n<p>OS X’s TimeMachine software had native support for network backup until the OS X  Leopard 10.5.2 was released. Apple had its own <a href=\"http://www.kuro5hin.org/story/2008/5/11/131026/867\" class=\"liexternal\">reasons</a> for the decision to remove network backup, but many advanced users including us at Foliovision would still like to be able to back up over the network.</p>\n<p>We have a bunch of Mac Minis in a mixed network of Linux and Windows computers. We’d like to use all our Minis for work and not for backup and use one of our older Linux towers to store the backup.</p>\n<p>How do you do it?</p>\n\n<p>Fortunately Apple left us an option to turn-on network support for TimeMachine by running the following command in terminal:</p>\n<p><code>defaults write com.apple.systempreferences TMShowUnsupportedNetworkVolumes 1</code></p>\n<p>We can finally see network hardrives in selection for backup places. The problem might seems to be solved. No dice: it is only the beginning.</p>\n<p>If you select a network drive for backup, you will see a very familiar message:</p>\n<blockquote>\n<p>the backup disk image could not be created</p>\n</blockquote>\n<p>Google automatically completes the phrase as soon as you type “the backup d”.</p>\n<p>The real problem is in the file system which must be used for TimeMachine backup. TimeMachine only supports Mac OS Extended (Journaled) file system.</p>\n<p>The solution is to create a place on the network, which will trick TimeMachine, into thinking that it holds data in Mac OS Extended (Journaled) file system. This trick is accomplished via copying a sparsebundle image (with special name) to a network share. You have to do following steps for to make TimeMachine successfully run a backup.</p>\n<h3>OVERVIEW</h3>\n<ol><li><strong>Enable network hardrive support in TimeMachine<br /></strong></li>\n<li><strong>Mount network shared place for backup data<br /></strong></li>\n<li><strong>Create a sparsebundle virtual image</strong></li>\n<li><strong>Copy the sparsebundle virtual image to the network shared place<br /></strong></li>\n<li><strong>Set up TimeMachine for network backup</strong></li>\n<li><strong>Optimisation and other information</strong></li>\n</ol><h3>1. Enable network hardrive support for the TimeMachine software</h3>\n<p>Network hardrive support for TimeMachine is turn off by default. For changing this fact we have to type following command to the terminal:<br /><code>defaults write com.apple.systempreferences TMShowUnsupportedNetworkVolumes 1 </code></p>\n<p>After that, you should see mounted network harddrive in TimeMachine’s locations for backup. If it is not this case, probably a restart is needed.</p>\n<h3>2. Mount Network shared place for backup data</h3>\n<p>If you have a shared location for backup data on Linux server, you can map the directory as a drive to Mac in Finder application. You have to do following steps:</p>\n<ol><li>Click GO and then “<em>connect to server</em>” in finder menu.<br /><h5><a href=\"https://foliovision.com/images/2010/04/Finder-Menu.png\" class=\"colorbox\" title=\"Finder Menu\"><img width=\"400\" height=\"285\" alt=\"Finder Menu\" src=\"https://foliovision.com/images/2010/04/400/Finder-Menu.png\" /></a></h5>\n<h5> </h5>\n</li>\n<li>Write following path if your sharing is based on protocol samba (SMB):<br /><code>SMB://&lt;IP_ADDRESS_or_COMPUTER_NAME&gt;/&lt;NAME_of_SHARED_PLACE&gt;</code> (e.g. <code>SMB://192.168.1.25/Backup</code>)\n<h5 class=\"noborder\"><a href=\"https://foliovision.com/images/2010/04/Connect-Server.png\" class=\"colorbox\" title=\"Connect Server\"><img width=\"400\" height=\"232\" alt=\"Connect Server\" src=\"https://foliovision.com/images/2010/04/400/Connect-Server.png\" /></a></h5>\n</li>\n</ol><h3>3. Create a sparsebundle virtual image</h3>\n<p>This step is very important, because the TimeMachine doesn’t allow to backup data to a network drive, which has any file system except “Mac OS Extended (Journaled)”. So we have to create a disk image in “Mac OS Extended (Journaled)” format.<br />We have two ways to do it:</p>\n<ol><li>Open disk utility (Disk Utility) and create new virtual disk with following atributes:\n<ul><li><code><strong>Save As:</strong> &lt;computer hostname&gt;_&lt;hex mac address of en0 interface&gt;.sparsebundle</code> (e.g. <code>MacAlec_00ef9a048c4f.sparsebundle</code>, if you forget to add <code>.sparsebundle</code>, it will be added automatically)</li>\n<li><code> <strong>Volume Name:</strong> Backup of &lt;computer hostname&gt;</code> (e.g. <code>Backup of MacAlec</code>)</li>\n<li><code> <strong>Volume Size:</strong></code> the max amount of space you’re going to set aside for backups. (The volume size is depends on amounts of backup data. I have chosen <code>150 GB</code>)</li>\n<li><code><strong>Volume Format:</strong> Mac OS Extended (Journaled)</code></li>\n<li><code><strong>Encryption:</strong> None</code></li>\n<li><code> <strong>Partitions:</strong> No partition map </code></li>\n<li><code> <strong>Image Format:</strong> Sparse bundle disk image</code>\n<p><a href=\"https://foliovision.com/images/2010/04/Disk-Utility.png\" class=\"colorbox\" title=\"Disk Utility\"><img width=\"399\" height=\"346\" alt=\"Disk Utility\" src=\"https://foliovision.com/images/2010/04/400/Disk-Utility.png\" /></a></p>\n</li>\n<li>Note: Disk utility automatically mounts the image to system volumes. We won’t need the image mounted, so we can safely unmount it.</li>\n</ul></li>\n<li>The previous step can be done by one command in terminal:<br /><code>hdiutil create -size 150g -fs HFS+J -volname \"Backup of MacAlec\" MacAlec_00ef9a048c4f.sparsebundle</code></li>\n</ol><h3>3. Copy the sparsebundle virtual image to the network shared place</h3>\n<p>You can copy the sparsebundle image to the network shared place using one of the following steps:</p>\n<ul><li>Copy the file to shared place by drag and drop operation in Finder application.</li>\n<li>If you prefer to work with the terminal, you can type this instead:<br /><code>cp -r &lt;sparsebundle_image_disc_location&gt;/&lt;computer hostname&gt;_&lt;hex mac address of en0 interface&gt;.sparsebundle /Volumes/&lt;NAME_of_SHARED_PLACE&gt;/</code>(e.g. <code>cp -r /Users/Alec/Documents/MacAlec_00ef9a048c4f.sparsebundle /Volumes/Backup/</code>)</li>\n</ul><p>Now we can safely delete the sparsebundle image copy on local computer once we are sure that it has been copied to the shared location.</p>\n<h3><strong>Set up the TimeMachine for network backup</strong></h3>\n<ol><li>Open TimeMachine preferences (in SystemPreferences).</li>\n<li>Click on <strong>Change Disk</strong> button for select the network drive for backup. (We have to select the “Backup”in our case.)</li>\n<li>\n<p><a href=\"https://foliovision.com/images/2010/04/TimeMachine.png\" class=\"colorbox\" title=\"TimeMachine\"><img width=\"399\" height=\"266\" alt=\"TimeMachine\" src=\"https://foliovision.com/images/2010/04/400/TimeMachine.png\" /></a></p>\n</li>\n<li>The first backup will start in two minutes. TimeMachine supports incremental backup, thus the first backup can take very long time (it is depends on network bandwidth and amount of backup data).</li>\n</ol><p>If you want to eject the mapped shared volume (<code>/Volumes/Backup</code> in our case), you have to do it within the two minutes countdown before backup starts or after backup is finished. TimeMachine has its own mechanism for mapping network hardrives, so a backup process isn’t interrupted by your hard drive mounting or unmounting. TimeMachine will automatically mount the virtual sparsebundle image, when the backup starts. You will see <code>Backup of &lt;computer_name&gt;</code> as connected device on your desktop, so you won’t need to manually mount the network hard drive later.</p>\n<h3>4. Optimisation and other information</h3>\n<p> in order to avoid long delays in backup process caused by Spotlight indexing, You should set the Spotlight application to not index the mapped network drive. Here’s how to remove spotlight indexing for a hard drive:</p>\n<ul><li>Open up the Spotlight software preferences in system preferences window</li>\n<li>Move to privacy options and add the network drive by plus symbol\n<p class=\"noborder\"><a href=\"https://foliovision.com/images/2010/04/Spotlight.png\" class=\"colorbox\" title=\"Spotlight\"><img width=\"400\" height=\"379\" alt=\"Spotlight\" src=\"https://foliovision.com/images/2010/04/400/Spotlight.png\" /></a></p>\n</li>\n</ul><p>If you’d like to back up a  little less often, you can modify the file <code>com.apple.backupd-auto.plist</code> which is located in <code>/System/Library/LaunhDaemons/</code> to change backup time interval. Open up the file in text editor and find the section:</p>\n<p><code>&lt;key&gt;StartInterval&lt;/key&gt;<br />&lt;integer&gt;3600&lt;/integer&gt;</code></p>\n<p>You should change the number 3600 to the number of seconds of your backup interval.</p>\n<h3>Result</h3>\n<p>I deliberately deleted some files to test backup reliability. This worked just fine. I was able to restore data from backup using TimeMachine’s restore feature. TimeMachine restore is easy to use and lets you choose data from any date and hour.  If you have followed the exact steps above, you should have a working network backup now on a non-Apple computer.</p>\n<p>I would like to thank <a href=\"http://www.foobar.org/blog/time-machine-on-samba-shares\" class=\"liexternal\">Nick Hilliard</a> and <a href=\"http://www.readynas.com/?p=253\" class=\"liexternal\">MacCorner</a> for useful information.</p>\n\n											',1),(16,'How to create an OS X Mavericks install drive [Updated]','http://www.tips-and-tricks-in-mavericks.com/how-to-create-an-os-x-mavericks-install-drive/',1,0,'<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/How-to-create-an-OS-X-Mavericks-install-drive.jpg\"><img class=\"aligncenter size-full wp-image-1648\" alt=\"How to create an OS X Mavericks install drive\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/How-to-create-an-OS-X-Mavericks-install-drive.jpg\" width=\"1200\" height=\"1200\" /></a><p>Apple <a title=\"OS X 10.9 Mavericks: Everything you need to know\" href=\"http://www.tips-and-tricks-in-mavericks.com/os-x-10-9-mavericks-everything-you-need-to-know/\">just launched OS X Mavericks as a free update</a> for most Mac users who are running at least OS X 10.6.8 Snow Leopard. Ever since OS X 10.8 Mountain Lion, those major new OS X versions were only made available as a download via the Mac App Store. You simply can’t buy them on physical media anymore.</p>\n<p>In some cases, you may want to create a bootable USB OS X install drive. This has been a rather easy task in the past. Well, it has gotten a bit harder this time around.<br /><span></span><br />Here’s what you will need:</p>\n<ul><li>a Mac with access to the Internet and to the Mac App Store</li>\n<li>a USB flash drive with 8GB or more (note that everything on that drive will be erased during this process!)</li>\n</ul><p><strong> Step 1: Download the OS X Mavericks installation app</strong></p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-App-Store-download.png\"><img class=\"aligncenter size-full wp-image-1636\" alt=\"OS X Mavericks App Store download\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-App-Store-download.png\" width=\"1198\" height=\"789\" /></a><p>Open the Mac App Store on your Mac and <a title=\"OS X Mavericks in the App Store\" href=\"https://itunes.apple.com/de/app/os-x-mavericks/id675248567?l=en&amp;mt=12\">find the OS X Mavericks page to download the installation app</a>. Downloading the app may take a while since it’s roughly around 5.2GB in size.</p>\n<p>You may proceed with step 2 while the app is still downloading:</p>\n<p><strong>Step 2: Make hidden files viewable on your Mac</strong></p>\n<p>Open Finder, go to Applications, open the Utilities folder and double click on the Terminal app.</p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/Terminal-window.png\"><img class=\"aligncenter size-full wp-image-1637\" alt=\"Terminal window\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/Terminal-window.png\" width=\"894\" height=\"368\" /></a><p>Copy and paste the following into the Terminal window, then hit enter to make all hidden files viewable:</p>\n<p><em>defaults write com.apple.finder AppleShowAllFiles TRUE &amp;&amp; killall Finder</em></p>\n<p><em></em>Further down this post, I will show you how to hide those files again.</p>\n<p><strong>Step 3: Open the OS X Mavericks installation app</strong></p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-Show-Pakage-Contents.png\"><img class=\"aligncenter size-full wp-image-1638\" alt=\"OS X Mavericks Show Pakage Contents\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-Show-Pakage-Contents.png\" width=\"915\" height=\"541\" /></a><p>Once the download is finished, open Finder, go to Applications, right click on the “Install OS X Mavericks” app and then click on “Show Package Contents”.</p>\n<p><strong>Step 4: Find the InstallESD.dmg file</strong></p>\n<p>In this step, you need to activate the InstallESD.dmg image file by double clicking on it.</p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-InstallESD-DMG.png\"><img class=\"aligncenter size-full wp-image-1639\" alt=\"OS X Mavericks InstallESD DMG\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-InstallESD-DMG.png\" width=\"921\" height=\"565\" /></a><p>The File can be found under Contents -&gt; SharedSupport in the just opened package contents of the OS X Mavericks installation app.</p>\n<p><strong>Step 5: Find the BaseSystem.dmg file</strong></p>\n<p>By double clicking on the aforementioned InstallESD.dmg file, a new window should open.</p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-Install-ESD.png\"><img class=\"aligncenter size-full wp-image-1640\" alt=\"OS X Mavericks Install ESD\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-Install-ESD.png\" width=\"884\" height=\"542\" /></a><p>In that window, find the BaseSystem.dmg file. Note that the file will look grayed out since it’s a hidden file.</p>\n<p><strong>Step 6: Open Disk Utility</strong></p>\n<p><strong></strong>In the Utilities folder that you have opened in step 2, find the Disk Utility app and open it by double clicking on it.</p>\n<p>Insert your USB thumb drive into your Mac.</p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-Disk-Utility-1.png\"><img class=\"aligncenter size-full wp-image-1642\" alt=\"OS X Mavericks Disk Utility 1\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-Disk-Utility-1.png\" width=\"1200\" height=\"669\" /></a><p>Now, drag the BaseSystem.dmg file from step 5 into the left list of drives in Disk Utility.</p>\n<p><strong>Step 7: Start copying onto the USB drive</strong></p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-Disk-Utility-2.png\"><img class=\"aligncenter size-full wp-image-1643\" alt=\"OS X Mavericks Disk Utility 2\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/OS-X-Mavericks-Disk-Utility-2.png\" width=\"904\" height=\"755\" /></a><p>In Disk Utility, click on your USB drive’s partition, then click on “Unmount” in tool bar (the blue and white button right next to the famous black and yellow Burn button).</p>\n<p>Now, click on BaseSystem.dmg in the drive list and drag you USB drive (8.03GB SanDisk Cruzer M, in my case) into the Destination field in the Restore panel.</p>\n<p>If you’re ready to start copying, click on Restore in the lower right hand side.</p>\n<p><strong>Step 8: Delete Packages alias</strong></p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/Delete-Packages-Alias.png\"><img class=\"aligncenter size-full wp-image-1644\" alt=\"Delete Packages Alias\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/Delete-Packages-Alias.png\" width=\"807\" height=\"507\" /></a><p>Go to Finder, look for the USB drive you’ve just created, find System -&gt; Installation and delete the Packages file (alias).</p>\n<p><strong>Step 9: Copy the actual Packages folder</strong></p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/Copy-actual-Packages-folder-1.png\"><img class=\"aligncenter size-full wp-image-1646\" alt=\"Copy actual Packages folder 1\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/Copy-actual-Packages-folder-1.png\" width=\"1200\" height=\"634\" /></a><p>Open another Finder window by selecting a Finder window and then clicking cmd + N. Find the OS X Install ESD image that you’ve opened previously. From there, copy the Packages folder to the Installation folder on your USB drive (right where you just deleted the alias file in step 8).</p>\n<p>Note that this step will take a while.</p>\n<p><strong>Step 10: Hide hidden files again</strong></p>\n<a href=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/Hide-hidden-Files-in-OS-X.png\"><img class=\"aligncenter size-full wp-image-1647\" alt=\"Hide hidden Files in OS X\" src=\"http://cdn.tips-and-tricks-in-mavericks.com/images/2013/10/Hide-hidden-Files-in-OS-X.png\" width=\"684\" height=\"480\" /></a><p>Open Terminal (see step 2) and copy and paste the following, then hit enter:</p>\n<p><em>defaults write com.apple.finder AppleShowAllFiles FALSE &amp;&amp; killall Finder</em></p>\n<p><strong>Step 11: Install OS X Mavericks from your USB drive</strong></p>\n<p>That’s it: your USB drive is now ready to be used to install OS X Mavericks from it.</p>\n<p>Make sure you insert your USB drive, restart your Mac and press the alt key once your hear the sound when your Mac is booting up.</p>\n<p><strong>+++ Update +++</strong></p>\n<p><a title=\"Comment by Alex Pupin\" href=\"http://www.tips-and-tricks-in-mavericks.com/how-to-create-an-os-x-mavericks-install-drive/#comment-1472\">In a comment below</a>, our reader Alex has pointed out <strong>another way to create bootable OS X USB media in way that requires less steps</strong>. Note that it involves some interaction with the root shell, so it’s <strong>not recommended for the less tech-savvy folks</strong> out there.</p>\n',1),(17,'How Can I Repair My Hard Drive If My Mac Won\'t Start?','http://macs.about.com/od/faq1/f/emergencystart.htm',1,0,'<div class=\"content-img-wrapper\">\n				<div class=\"content-img-wrapper\">\n<img src=\"http://f.tqn.com/y/macs/1/W/5/b/-/-/DiskStethoscope.jpg\" alt=\"DiskStethoscope.jpg - Ivan Bajic/Getty Images\" width=\"385\" height=\"256\" /><a href=\"http://pinterest.com/pin/create/button/?url=http://macs.about.com/od/faq1/f/emergencystart.htm?utm_source=pinterest&amp;utm_medium=social&amp;utm_campaign=shareurlbuttons_nip&amp;media=http://f.tqn.com/y/macs/1/S/5/b/-/-/DiskStethoscope.jpg&amp;description=\" title=\"Pin to Pinterest\" class=\"pinit-btn\"></a>					</div>\n		\n					<p>\n									<span class=\"credit pull-right\">Ivan Bajic/Getty Images</span>\n							</p>\n					</div>\n\r\n\r\n\r\n	\r\n\r\n\r\n\r\n		<p><strong>Question: </strong>How Can I Repair My Hard Drive If My Mac Won’t Start?</p><p>My Mac fails to start up and just ends up displaying the <a href=\"http://macs.about.com/od/MacTroubleshootingTips/qt/Troubleshooting-Mac-Startup-Problems-Stuck-At-The-Blue-Screen.htm\">blue screen</a>. Or it may log in but then fail to show the desktop. I’ve heard I should run <a href=\"http://macs.about.com/od/glossaryad/g/diskfirstaid.htm\">Repair Disk</a>, but I can’t do that when my Mac won’t start. What can I do?</p><p><strong>Answer: </strong></p><p>When a Mac fails to start up normally, one of the common troubleshooting practices is to verify and repair the startup drive. A startup drive that is experiencing problems is likely to prevent your Mac from starting, so you may find yourself in a catch 22. You need to run Disk Utility’s <a href=\"http://macs.about.com/od/glossaryad/g/diskfirstaid.htm\">First Aid</a> tools, but you can’t get to Disk Utility because your Mac won’t start.</p><p>There are three methods of getting around this problem.</p>\r\n\r\n		<ul><li><strong>Booting from a different device.</strong> This can be another hard drive that has a bootable system on it, or your OS X Install DVD, which also contains the <a href=\"http://macs.about.com/od/backupsarchives/ss/diskbackup.htm\">Disk Utility</a> tools, or the <a href=\"http://macs.about.com/od/Troubleshooting/fl/Starting-Up-From-the-OS-X-Recovery-HD-Volume.htm\">Recovery HD</a>.</li><li><strong>Safe Mode.</strong> This is a special booting method that forces your Mac to perform an automatic disk check and repair as it tries to start up.</li><li><strong>Single User Mode (fsck).</strong> This is another special startup method that allows you to run command line utilities, such as fsck, which can verify and repair hard drives.</li></ul><h3>Boot From Alternate Device</h3><p>The easiest solution by far is to boot from a different device. The three most popular options are another <a href=\"http://macs.about.com/od/macoperatingsystems/ss/Create-A-Bootable-Flash-Drive-With-Os-X-Lion-Installer.htm\">bootable hard drive</a>, an emergency startup device, such <a href=\"http://macs.about.com/od/diyguidesprojects/ss/usbflash.htm\">as a bootable USB flash device</a>, or a current OS X Install DVD.</p><p>To boot from another hard drive or a <a href=\"http://macs.about.com/od/diyguidesprojects/ss/usbflash_2.htm\">USB flash device</a>, hold down the option key and start up your Mac. The OS X startup manager will appear, allowing you to select the device to boot from.</p><p>To boot from your OS X Install DVD, insert the DVD into your Mac, and then restart your Mac while holding down the letter ‘c’ key.</p>\r\n	\n\r\n		<p>To boot from the <a href=\"http://macs.about.com/od/usingyourmac/ss/Create-Your-Own-Os-X-Lion-Recovery-Hd-On-Any-Drive.htm\">Recovery HD</a>, restart your Mac while holding down the command (cloverleaf) and R keys (command + R).</p><p>Once your Mac finishes booting, use <a href=\"http://macs.about.com/od/applications/ss/firstaid.htm\"> Disk Utility’s First Aid </a> feature to verify and repair your <a href=\"http://macs.about.com/od/applications/ss/firstaid_2.htm\">hard drive</a>. Or if you have more serious drive issues, check out our guide to <a href=\"http://macs.about.com/od/MacTroubleshootingTips/ss/Reviving-A-Hard-Drive-For-Use-With-Your-Mac.htm\">Reviving a Hard Drive for Use With Your Mac</a>.</p><h3>Boot Using Safe Mode</h3><p>To start up in Safe Mode, hold down the <a href=\"http://email.about.com/od/keyboardtips/fl/How-to-Find-the-OS-X-Shift-Key-on-Your-Keyboard.htm\">shift key</a> and then start your Mac. Safe Mode takes a while, so don’t be alarmed when you don’t see the desktop right away. While you’re waiting, the operating system is verifying the directory structure of your startup volume, and repairing it, if necessary. It will also delete some of the startup caches that may also be preventing your Mac from starting successfully.</p><p>Once the desktop appears, you can access and run <a href=\"http://macs.about.com/od/applications/ss/firstaid.htm\">Disk Utility’s First Aid </a> tool just as you normally would. When First Aid is finished, restart your Mac normally.</p><p>Please note that not all applications and OS X features will work when you <a href=\"http://antivirus.about.com/od/securitytips/ht/safemode.htm\">boot into Safe Mode</a>. You should use this startup mode only for troubleshooting and not for running day-to-day applications.</p><h3>Boot Into Single User Mode</h3><p>Start up your Mac and immediately hold down the <a href=\"http://email.about.com/od/keyboardtips/fl/How-to-Find-the-OS-X-Command-Key-on-Your-Keyboard.htm\">command key</a> plus the letter ‘s’ key (command + s). Your Mac will start up in a special environment that looks like an old-fashioned command line interface (because that’s exactly what it is).</p><p>At the command line prompt, type the following:</p><blockquote>/sbin/fsck –fy</blockquote><p>Press return or enter after you type the above line. Fsck will start and display status messages about your startup disk. When it finally finishes (this can take a while), you will see one of two messages. The first indicates that no problems were found.</p><blockquote>** The volume xxxx appears to be OK.</blockquote><p>The second message indicates that problems were encountered and fsck attempted to correct the errors on your hard drive.</p><blockquote>***** FILE SYSTEM WAS MODIFIED *****</blockquote><p>If you see the second message, you should repeat the fsck command again. Continue to repeat the command until you see the “volume xxx appears to be OK” message.</p><p>If you don’t see the volume OK message after five or more attempts, your hard drive has serious problems that it may not be able to recover from.</p><h3>Reference</h3><p><a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/fsck.8.html\">fsck man page</a></p><p><em>Published: 7/22/2009</em></p><p><em>Updated 7/19/2015</em></p>\r\n\r\n\r\n\r\n\r\n\r\n',1),(18,'Configuring Mac OS X on Yosemite &amp;Â Mavericks','http://hackercodex.com/guide/mac-osx-mavericks-10.9-configuration/',1,0,'\n        <p>Want to get started with some command-line tools on Mac <span class=\"caps\">OS</span> X? This tutorial covers installing Xcode/<span class=\"caps\">CLT</span>, Homebrew, and other useful initial configuration.</p>\n<h2>Turning off automatic updates</h2>\n<p>If you prefer to be in control of when updates are downloaded and installed, open System Preferences, go to the App Store preference pane, and uncheck all the boxes.</p>\n<h2>Unhide the Library folder</h2>\n<p>Just like the last few releases, Mac <span class=\"caps\">OS</span> X now hides the <code>~/Library</code> folder by default, but on Yosemite and Mavericks it is now easier to make it visible again.</p>\n<p>With the Finder as the foremost application, press shift-command-H and then command-J, which will bring up a window that configures Finder view options. Check the “Show Library Folder” and close the window. Thanks to the Apple engineers that made this process more user-friendly.</p>\n<h2>Bash profile setup</h2>\n<p>Since Mac <span class=\"caps\">OS</span> X is a full 64-bit system, we’ll save some headaches by letting our compiler know that all compilation should assume 64 bits. Also, since Mac <span class=\"caps\">OS</span> X’s default <code>PATH</code> is <code>/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin</code>, we’ll want to change it so that certain Homebrew installations (e.g., <a href=\"http://hackercodex.com/guide/python-development-environment-on-mac-osx/\">Python</a>) will take precedence over stock <span class=\"caps\">OS</span> X binaries. To make these changes, open <code>~/.bash_profile</code> …</p>\n<div class=\"highlight\"><pre>vim ~/.bash_profile\n</pre></div>\n\n\n<p>… and add:</p>\n<div class=\"highlight\"><pre><span class=\"c\"># Set architecture flags</span>\n<span class=\"nb\">export </span><span class=\"nv\">ARCHFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-arch x86_64\"</span>\n<span class=\"c\"># Ensure user-installed binaries take precedence</span>\n<span class=\"nb\">export </span><span class=\"nv\">PATH</span><span class=\"o\">=</span>/usr/local/bin:<span class=\"nv\">$PATH</span>\n<span class=\"c\"># Load .bashrc if it exists</span>\n<span class=\"nb\">test</span> -f ~/.bashrc <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">source</span> ~/.bashrc\n</pre></div>\n\n\n<p>Since the above directives will take effect on the next login, let’s go ahead and source the file to ensure it takes effect for the current session:</p>\n<div class=\"highlight\"><pre><span class=\"nb\">source</span> ~/.bash_profile\n</pre></div>\n\n\n<p>With those first steps out of the way, now it’s time to get the necessary compilation tools in place.</p>\n\n\n<h2>Compiler</h2>\n<p>Installing development-related software in the past has required the compiler tool-chain that comes with Xcode. Thankfully, if you don’t need or want Xcode, those compiler tools are now available separately, saving download time and about four gigabytes of disk space.</p>\n<p>Alternatively, there are some reasons you might want the full version of Xcode:</p>\n<ul><li>To compile the few tools that won’t compile without the full version of Xcode</li>\n<li>To download and manually compile open-source Mac applications</li>\n<li>To develop your own Mac/iOS applications</li>\n</ul><p>Once you’ve decided whether you need Xcode or not, run the following command in the Terminal:</p>\n<div class=\"highlight\"><pre>xcode-select --install\n</pre></div>\n\n\n<p>You will then be asked whether you want to install Xcode or the command line developer tools, with the latter being the default. Once you’ve installed one or the other, you can proceed to installing Homebrew.</p>\n<h2>Homebrew</h2>\n<p>Sometimes you may need cross-platform software — usually without a <span class=\"caps\">GUI</span> and accessible only via the command line — that isn’t readily available via the Mac App Store. <a href=\"https://github.com/mxcl/homebrew/\">Homebrew</a> provides an easy way to install these packages, so let’s fire up Terminal.app and install it:</p>\n<div class=\"highlight\"><pre>ruby -e <span class=\"s2\">\"</span><span class=\"k\">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class=\"k\">)</span><span class=\"s2\">\"</span>\n</pre></div>\n\n\n<p>Follow the prompts to download and install Homebrew, entering your administrative password when prompted. Then run the following command to ensure that there aren’t any potential problems with your environment. Some warnings (if any) are informational and not necessary actionable; it’s just a good idea to at least read through and see if anything looks out of the ordinary.</p>\n<div class=\"highlight\"><pre>brew doctor\n</pre></div>\n\n\n<p>The following command will update to the latest version of Homebrew and its formulae:</p>\n<div class=\"highlight\"><pre>brew update\n</pre></div>\n\n\n<p>Let’s use Homebrew to install some packages that I often find useful:</p>\n<div class=\"highlight\"><pre>brew install bash-completion ssh-copy-id wget\n</pre></div>\n\n\n<p>You can run <code>brew info ssh-copy-id</code>, for example, if you want to know what those packages do.</p>\n<p>Some Homebrew formulae recommend post-installation steps. For example, to activate bash completion, add the following to your <code>~/.bash_profile</code>:</p>\n<div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"o\">[</span> -f <span class=\"k\">$(</span>brew --prefix<span class=\"k\">)</span>/etc/bash_completion <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n    <span class=\"nb\">source</span> <span class=\"k\">$(</span>brew --prefix<span class=\"k\">)</span>/etc/bash_completion\n<span class=\"k\">fi</span>\n</pre></div>\n\n\n<p>There are many other useful Homebrew commands, all of which can be seen by running <code>man brew</code> in the terminal.</p>\n<h2>Just the basics</h2>\n<p>These are obviously just the basics. If you have any interest in Python, have a look at my guide to setting up a <a href=\"http://hackercodex.com/guide/python-development-environment-on-mac-osx/\">Python Development Environment on Mac <span class=\"caps\">OS</span> X</a>.</p>\n<p>What kinds of customizations have you made to your Mavericks setup? Leave a comment below!</p>\n\n        <hr /><p><i><a href=\"http://twitter.com/JMayer/\">Follow me on Twitter</a> to be notified when new articles are posted.\n           You can also <a href=\"https://github.com/justinmayer\">follow me on GitHub</a>.</i></p>\n    ',1),(19,'Cooking with Docker and CoreOS on OS X','http://www.siliconfidential.com/articles/docker-coreos-osx/',1,0,'\n      <p><em>This posts assumes some familiarity with Docker—it’s a practical guide to a workflow on OS X.</em></p>\n\n<h2>The Problem</h2>\n<p>Docker is hot. It represents a significant addition to the second derivative of the state of our art. And while there are plenty of tutorials on using Docker floating around, none of them left me with all of the functionality I needed, or a clear picture of how to do real work. I have been frustrated, tickled, and tantalized. Docker, you were a real tease—until today.</p>\n\n<h2>The Solution</h2>\n\n<p>When you’re finished, you should have a native docker client, container ports that are easily accessible via localhost, and the ability to edit files on live containers from the comfort of your own <code>$EDITOR</code>.</p>\n\n<h2>The Recipe</h2>\n\n<p>Preheat the oven: install <a href=\"http://vagrantup.com/\">Vagrant</a> and <a href=\"https://www.virtualbox.org/\">VirtualBox</a>. Then download docker:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\">curl -o docker http://get.docker.io/builds/Darwin/x86_64/docker-latest\nchmod +x docker\n<span class=\"c\"># look for the docker daemon on tcp instead of unix</span>\n<span class=\"c\"># (good idea to put this in .bashrc or similar)</span>\n<span class=\"nb\">export </span><span class=\"nv\">DOCKER_HOST</span><span class=\"o\">=</span>tcp://\nsudo cp docker /usr/local/bin/\n</code></pre></div>\n\n<h3>The Docker Daemon: in CoreOS via Vagrant</h3>\n\n<div class=\"highlight\"><pre><code class=\"bash\">git clone https://github.com/coreos/coreos-vagrant/\n<span class=\"nb\">cd </span>coreos-vagrant\n<span class=\"nv\">$EDITOR</span> Vagrantfile\n</code></pre></div>\n\n<p>We’ll edit the <code>Vagrantfile</code> to setup an NFS share (for editing container files) and port forwarding (for visiting our beautiful applications via localhost):</p>\n\n<div class=\"highlight\"><pre><code class=\"ruby\">  <span class=\"c1\"># make sure these lines are present and not commented</span>\n  <span class=\"c1\"># and replace /Users/cam/src with your own</span>\n  <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">network</span> <span class=\"s2\">\"private_network\"</span><span class=\"p\">,</span> <span class=\"ss\">ip</span><span class=\"p\">:</span> <span class=\"s2\">\"172.12.8.150\"</span>\n  <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">synced_folder</span> <span class=\"s2\">\"/Users/cam/src\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/home/core/share\"</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"s2\">\"core\"</span><span class=\"p\">,</span> <span class=\"ss\">:nfs</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span><span class=\"p\">,</span>  <span class=\"ss\">:mount_options</span> <span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"s1\">\'nolock,vers=3,udp\'</span><span class=\"o\">]</span>\n\n  <span class=\"c1\"># you\'ll need to add these lines</span>\n  <span class=\"p\">(</span><span class=\"mi\">49000</span><span class=\"o\">.</span><span class=\"n\">.</span><span class=\"mi\">49900</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">port</span><span class=\"o\">|</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">vm</span><span class=\"o\">.</span><span class=\"n\">network</span> <span class=\"ss\">:forwarded_port</span><span class=\"p\">,</span> <span class=\"ss\">:host</span> <span class=\"o\">=&gt;</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"ss\">:guest</span> <span class=\"o\">=&gt;</span> <span class=\"n\">port</span>\n  <span class=\"k\">end</span>\n</code></pre></div>\n\n<h3>Install the latest docker in the VM</h3>\n<p>At time of writing, this is necessary because the docker client is native to OS X only as of 0.8, and CoreOS is still running 0.7.5, which is not on speaking terms with its younger sibling.</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\">vagrant up\nvagrant ssh\n<span class=\"c\"># you should land in /home/core, and</span>\n<span class=\"c\"># see /home/core/share pointing to your host share</span>\n\n<span class=\"c\"># install docker</span>\nwget --no-check-certificate https://get.docker.io/builds/Linux/x86_64/docker-latest -O docker\nchmod +x docker\n</code></pre></div>\n\n<p>Add a service for the downloaded docker:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\">vi /media/state/units/docker-local.service\n<span class=\"c\"># copy the block below into the file above</span>\n<span class=\"o\">[</span>Unit<span class=\"o\">]</span>\n<span class=\"nv\">Description</span><span class=\"o\">=</span>docker <span class=\"nb\">local</span>\n\n<span class=\"o\">[</span>Service<span class=\"o\">]</span>\n<span class=\"nv\">PermissionsStartOnly</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n<span class=\"nv\">ExecStartPre</span><span class=\"o\">=</span>/usr/bin/systemctl <span class=\"nb\">kill </span>docker.service\n<span class=\"nv\">ExecStart</span><span class=\"o\">=</span>/home/core/docker -H 0.0.0.0:4243 -H unix:///var/run/docker.sock -d\n\n<span class=\"o\">[</span>Install<span class=\"o\">]</span>\n<span class=\"nv\">WantedBy</span><span class=\"o\">=</span>local.target\n</code></pre></div>\n\n<p>Kill the 0.7.5 docker daemon and start 0.8:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\">sudo systemctl restart <span class=\"nb\">local</span>-enable.service\n</code></pre></div>\n\n<p>If you make subsequent modifications to the new service file, you’ll need to restart it with a different incantation:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\">sudo systemctl restart docker-local.service\n</code></pre></div>\n\n<h3>Something smells delicious…</h3>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"c\"># from your os x terminal</span>\n&gt; docker version\nClient version: 0.8.0\nGo version <span class=\"o\">(</span>client<span class=\"o\">)</span>: go1.2\nGit commit <span class=\"o\">(</span>client<span class=\"o\">)</span>: cc3a8c8\nServer version: 0.8.0\nGit commit <span class=\"o\">(</span>server<span class=\"o\">)</span>: cc3a8c8\nGo version <span class=\"o\">(</span>server<span class=\"o\">)</span>: go1.2\n</code></pre></div>\n\n<h3>Docker is served</h3>\n\n<p>Garnish your <code>docker run</code> commands with a spring of <code>-v</code>, and your containers will share files with your local file system via the vm.</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"c\"># on the osx host, in /Users/cam/src/hey-ma</span>\ndocker build -t camron/hey-ma .\n\n<span class=\"c\"># run the container with a volume that links it to the vm\'s shared</span>\n<span class=\"c\"># folder, which is synced with a folder on the host machine</span>\ndocker run -v /home/core/share/hey-ma:/hey-ma camron/hey-ma /bin/bash\n<span class=\"nb\">cd </span>hey-ma<span class=\"p\">;</span> python server.py\n<span class=\"c\"># hack hack hack in /Users/cam/src/hey-ma</span>\n<span class=\"c\"># Ctrl-C</span>\npython server.py\n<span class=\"c\"># new code!</span>\n</code></pre></div>\n\n<p>Woot!</p>\n\n<p>There is one hiccough, which is that I get an error running a container with a volume if the volume directory already exists in the container, which it is wont to do if you’re maintaining a Dockerfile (which you should) and using the <code>ADD . /dir</code> build strategy (which is good). This is, however, the approach explicitly proscribed and used by @jpetazzo, so I bet I’m doing something wrong, or there is a bug that will get fixed soon. (In the meantime, however, I haven’t found it problematic to mount the volume elsewhere.)</p>\n\n\n<center>\n\n\n\n</center>\n\n      <hr /><div class=\"article-author-bottom\">\n          <img src=\"http://www.siliconfidential.com/images/bio-photo.jpg\" class=\"bio-photo\" alt=\"Cameron Boehmer bio photo\" /><h3>Cameron Boehmer</h3>\n<p>In every moment, a choice; in every choice, a step. I like to take walks.</p>\n<a href=\"http://twitter.com/camron\" class=\"author-social\"><i class=\"icon-twitter\"></i></a>\n<a href=\"http://facebook.com/cameronboehmer\" class=\"author-social\"><i class=\"icon-facebook\"></i></a>\n\n\n\n<a href=\"http://github.com/cameron\" class=\"author-social\"><i class=\"icon-github\"></i></a>\n\n<a href=\"http://omology.tumblr.com\" class=\"author-social\"><i class=\"icon-tumblr\"></i></a>\n<a class=\"author-social\" href=\"http://www.siliconfidential.com/feed.xml\" title=\"Atom/RSS feed\"><i class=\"icon-feed\"></i></a>\n\n        </div>\n        <p class=\"byline\">February 13, 2014</p>\n      Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a>\n      <a href=\"http://disqus.com\" class=\"dsq-brlink\">blog comments powered by </a>\n\n    ',1),(20,'Introduction â€” Scapy v2.1.1-dev documentation','http://www.secdev.org/projects/scapy/doc/introduction.html#about-scapy',1,0,'<div>\n<h2>About Scapy</h2>\n<p>Scapy is a Python program that enables the user to send, sniff and dissect and forge network packets. This capability allows construction of tools that can probe, scan or attack networks.</p>\n<p>In other words, Scapy is a powerful interactive packet manipulation program.\nIt is able to forge or decode packets of a wide number of protocols,\nsend them on the wire, capture them, match requests and replies, and\nmuch more. Scapy can easily handle most classical tasks like scanning,\ntracerouting, probing, unit tests, attacks or network discovery. It can replace hping, arpspoof, arp-sk, arping, p0f and even some parts of Nmap, tcpdump, and tshark).</p>\n<a class=\"reference external image-reference\" href=\"http://www.secdev.org/projects/scapy/doc/_images/testing-taxonomy.png\"><img alt=\"_images/testing-taxonomy.png\" src=\"http://www.secdev.org/projects/scapy/doc/_images/testing-taxonomy.png\" /></a>\n<p>Scapy also performs very well on a lot of other\nspecific tasks that most other tools can’t handle, like sending invalid frames,\ninjecting your own 802.11 frames, combining techniques\n(VLAN hopping+ARP cache poisoning, VOIP decoding on WEP encrypted channel, ...), etc.</p>\n<p>The idea is simple. Scapy mainly does two things: sending packets and receiving answers. You define a set of packets, it sends them, receives answers, matches requests with answers and returns a list of packet couples (request, answer) and a list of unmatched packets. This has the big advantage over tools like Nmap or hping that an answer is not reduced to (open/closed/filtered), but is the whole packet.</p>\n<p>On top of this can be build more high level functions, for example one that does traceroutes and give as a result only the start TTL of the request and the source IP of the answer. One that pings a whole network and gives the list of machines answering. One that does a portscan and returns a LaTeX report.</p>\n</div><div>\n<h2>What makes Scapy so special</h2>\n<p>First, with most other networking tools, you won’t build someting the author did not imagine. These tools have been built for a specific goal and can’t deviate much from it. For example, an ARP cache poisoning program won’t let you use double 802.1q encapsulation. Or try to find a program that can send, say, an ICMP packet with padding (I said <em>padding</em>, not <em>payload</em>, see?). In fact, each time you have a new need, you have to build a new tool.</p>\n<p>Second, they usually confuse decoding and interpreting. Machines are good at decoding and can help human beings with that. Interpretation is reserved to human beings. Some programs try to mimic this behaviour. For instance they say “<em>this port is open</em>” instead of “<em>I received a SYN-ACK</em>“. Sometimes they are right. Sometimes not. It’s easier for beginners, but when you know what you’re doing, you keep on trying to deduce what really happened from the program’s interpretation to make your own, which is hard because you lost a big amount of information. And you often end up using <tt class=\"docutils literal\"><span class=\"pre\">tcpdump</span> <span class=\"pre\">-xX</span></tt> to decode and interpret what the tool missed.</p>\n<p>Third, even programs which only decode do not give you all the information they received. The network’s vision they give you is the one their author thought was sufficient. But it is not complete, and you have a bias. For instance, do you know a tool that reports the Ethernet padding?</p>\n<p>Scapy tries to overcome those problems. It enables you to build exactly the packets you want. Even if I think stacking a 802.1q layer on top of TCP has no sense, it may have some for somebody else working on some product I don’t know. Scapy has a flexible model that tries to avoid such arbitrary limits. You’re free to put any value you want in any field you want, and stack them like you want. You’re an adult after all.</p>\n<p>In fact, it’s like building a new tool each time, but instead of dealing with a hundred line C program, you only write 2 lines of Scapy.</p>\n<p>After a probe (scan, traceroute, etc.) Scapy always gives you the full decoded packets from the probe, before any interpretation. That means that you can probe once and interpret many times, ask for a traceroute and look at the padding for instance.</p>\n<div class=\"section\">\n<h3>Fast packet design</h3>\n<p>Other tools stick to the <strong>program-that-you-run-from-a-shell</strong> paradigm.\nThe result is an awful syntax to describe a packet. For these tools, the\nsolution adopted uses a higher but less powerful description, in the form of\nscenarios imagined by the tool’s author. As an example, only the IP address must\nbe given to a port scanner to trigger the <strong>port scanning</strong> scenario. Even\nif the scenario is tweaked a bit, you still are stuck to a port scan.</p>\n<p>Scapy’s paradigm is to propose a Domain Specific Language (DSL) that\nenables a powerful and fast description of any kind of packet. Using the Python\nsyntax and a Python interpreter as the DSL syntax and interpreter has many\nadvantages: there is no need to write a separate interpreter, users don’t need\nto learn yet another language and they benefit from a complete, concise\nand very powerful language.</p>\n<p>Scapy enables the user to describe a packet or set of packets as layers that are\nstacked one upon another. Fields of each layer have useful default values that\ncan be overloaded. Scapy does not oblige the user to use predetermined methods\nor templates. This alleviates the requirement of writing a new tool each time a\ndifferent scenario is required. In C, it may take an average of 60 lines to\ndescribe a packet. With Scapy, the packets to be sent may be described in only a\nsingle line with another line to print the result. 90% of the network probing\ntools can be rewritten in 2 lines of Scapy.</p>\n</div>\n<div class=\"section\">\n<h3>Probe once, interpret many</h3>\n<p>Network discovery is blackbox testing. When probing a network, many stimuli are\nsent while only a few of them are answered. If the right stimuli are\nchosen, the desired information may be obtained by the responses or the lack of\nresponses. Unlike many tools, Scapy gives all the information, i.e. all the\nstimuli sent and all the responses received. Examination of this data will give\nthe user the desired information. When the dataset is small, the user can just\ndig for it. In other cases, the interpretation of the data will depend on the\npoint of view taken. Most tools choose the viewpoint and discard all the data\nnot related to that point of view. Because Scapy gives the complete raw data,\nthat data may be used many times allowing the viewpoint to evolve during\nanalysis. For example, a TCP port scan may be probed and the data visualized as\nthe result of the port scan. The data could then also be visualized with respect\nto the TTL of response packet. A new probe need not be initiated to adjust the\nviewpoint of the data.</p>\n<a class=\"reference external image-reference\" href=\"http://www.secdev.org/projects/scapy/doc/_images/scapy-concept.png\"><img alt=\"_images/scapy-concept.png\" src=\"http://www.secdev.org/projects/scapy/doc/_images/scapy-concept.png\" /></a>\n</div>\n<div class=\"section\">\n<h3>Scapy decodes, it does not interpret</h3>\n<p>A common problem with network probing tools is they try to interpret the answers\nreceived instead of only decoding and giving facts. Reporting something like\n<strong>Received a TCP Reset on port 80</strong> is not subject to interpretation errors.\nReporting <strong>Port 80 is closed</strong> is an interpretation that may be right most\nof the time but wrong in some specific contexts the tool’s author did not\nimagine. For instance, some scanners tend to report a filtered TCP port when\nthey receive an ICMP destination unreachable packet. This may be right, but in\nsome cases it means the packet was not filtered by the firewall but rather there\nwas no host to forward the packet to.</p>\n<p>Interpreting results can help users that don’t know what a port scan is but\nit can also make more harm than good, as it injects bias into the results. What\ncan tend to happen is that so that they can do the interpretation themselves,\nknowledgeable users will try to reverse engineer the tool’s interpretation to\nderive the facts that triggered that interpretation. Unfortunately much\ninformation is lost in this operation.</p>\n</div>\n</div><div>\n<h2>Quick demo</h2>\n<p>First, we play a bit and create four IP packets at once. Let’s see how it works. We first instantiate the IP class. Then, we instantiate it again and we provide a destination that is worth four IP addresses (/30 gives the netmask). Using a Python idiom, we develop this implicit packet in a set of explicit packets. Then, we quit the interpreter. As we provided a session file, the variables we were working on are saved, then reloaded:</p>\n<div class=\"highlight-python\"><pre># ./scapy.py -s mysession\nNew session [mysession]\nWelcome to Scapy (0.9.17.108beta)\n&gt;&gt;&gt; IP()\n&lt;IP |&gt;\n&gt;&gt;&gt; target=\"www.target.com\"\n&gt;&gt;&gt; target=\"www.target.com/30\"\n&gt;&gt;&gt; ip=IP(dst=target)\n&gt;&gt;&gt; ip\n&lt;IP dst=&lt;Net www.target.com/30&gt; |&gt;\n&gt;&gt;&gt; [p for p in ip]\n[&lt;IP dst=207.171.175.28 |&gt;, &lt;IP dst=207.171.175.29 |&gt;,\n &lt;IP dst=207.171.175.30 |&gt;, &lt;IP dst=207.171.175.31 |&gt;]\n&gt;&gt;&gt; ^D</pre>\n</div>\n<div class=\"highlight-python\"><pre># scapy -s mysession\nUsing session [mysession]\nWelcome to Scapy (0.9.17.108beta)\n&gt;&gt;&gt; ip\n&lt;IP dst=&lt;Net www.target.com/30&gt; |&gt;</pre>\n</div>\n<p>Now, let’s manipulate some packets:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">IP</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;IP |&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">IP</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"o\">=</span><span class=\"s\">\"172.16.1.40\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">&lt;IP dst=172.16.1.40 |&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dst</span>\n<span class=\"go\">\'172.16.1.40\'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">ttl</span>\n<span class=\"go\">64</span>\n</pre></div>\n</div>\n<p>Let’s say I want a broadcast MAC address, and IP payload to ketchup.com\nand to mayo.com, TTL value from 1 to 9, and an UDP payload:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ether</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"o\">=</span><span class=\"s\">\"ff:ff:ff:ff:ff:ff\"</span><span class=\"p\">)</span>\n<span class=\"go\">      /IP(dst=[\"ketchup.com\",\"mayo.com\"],ttl=(1,9))</span>\n<span class=\"go\">      /UDP()</span>\n</pre></div>\n</div>\n<p>We have 18 packets defined in 1 line (1 implicit packet)</p>\n<div class=\"section\">\n<h3>Sensible default values</h3>\n<p>Scapy tries to use sensible default values for all packet fields.\nIf not overriden,</p>\n<ul class=\"simple\"><li>IP source is chosen according to destination and routing table</li>\n<li>Checksum is computed</li>\n<li>Source MAC is chosen according to the output interface</li>\n<li>Ethernet type and IP protocol are determined by the upper layer</li>\n</ul><a class=\"reference external image-reference\" href=\"http://www.secdev.org/projects/scapy/doc/_images/default-values-ip.png\"><img alt=\"_images/default-values-ip.png\" src=\"http://www.secdev.org/projects/scapy/doc/_images/default-values-ip.png\" /></a>\n<p>Other fields’ default values are chosen to be the most useful ones:</p>\n<ul class=\"simple\"><li>TCP source port is 20, destination port is 80.</li>\n<li>UDP source and destination ports are 53.</li>\n<li>ICMP type is echo request.</li>\n</ul></div>\n</div><div>\n<h2>Learning Python</h2>\n<p>Scapy uses the Python interpreter as a command board. That means that you can directly use the Python language (assign variables, use loops, define functions, etc.)</p>\n<p>If you are new to Python and you really don’t understand a word because of that, or if you want to learn this language, take an hour to read the very good <a class=\"reference external\" href=\"http://docs.python.org/tutorial/\">Python tutorial</a>  by Guido Van Rossum. After that, you’ll know Python :) (really!). For a more in-depth tutorial <a class=\"reference external\" href=\"http://diveintopython.org/\">Dive Into Python</a> is a very good start too.</p>\n<p>For a quick start, here’s an overview of Python’s data types:</p>\n<ul class=\"simple\"><li><tt class=\"docutils literal\"><span class=\"pre\">int</span></tt> (signed, 32bits) : <tt class=\"docutils literal\"><span class=\"pre\">42</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">long</span></tt> (signed, infinite): <tt class=\"docutils literal\"><span class=\"pre\">42L</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">str</span></tt> : <tt class=\"docutils literal\"><span class=\"pre\">\"bell\\x07\\n\"</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">’bell\\x07\\n’</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">tuple</span></tt> (immutable): <tt class=\"docutils literal\"><span class=\"pre\">(1,4,\"42\")</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">list</span></tt> (mutable): <tt class=\"docutils literal\"><span class=\"pre\">[4,2,\"1\"]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">dict`</span> <span class=\"pre\">(mutable):</span> <span class=\"pre\">``{</span> <span class=\"pre\">\"one\":1</span> <span class=\"pre\">,</span> <span class=\"pre\">\"two\":2</span> <span class=\"pre\">}</span></tt></li>\n</ul><p>There are no block delimiters in Python. Instead, indendation does matter:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"k\">if</span> <span class=\"n\">cond</span><span class=\"p\">:</span>\n    <span class=\"n\">instr</span>\n    <span class=\"n\">instr</span>\n<span class=\"k\">elif</span> <span class=\"n\">cond2</span><span class=\"p\">:</span>\n    <span class=\"n\">instr</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">instr</span>\n</pre></div>\n</div>\n</div>',1),(21,'mysql - File input to gnuplot through python - Stack Overflow','http://stackoverflow.com/questions/5968721/file-input-to-gnuplot-through-python',1,0,'<div class=\"post-text\">\r\n\r\n<p>I am trying to draw a graph of some data I pull out of a MySQL database through python with gnuplot and gnuplot.py.\nI read the latest 10 lines of data from the MySQL database and store them in a temp file which is supposed to be read by gnuplot. I can do this the manual way by setting through the terminal, but I simply can\'t see how I should load the file into gnuplot through python.\nIf you can show me an easier way to do this, or simply a way to do it at all, I would be very grateful.</p>\n\n<pre><code>import MySQLdb\nimport Gnuplot\n\ndatafile = open(\'data\', \'w+r\')\n\ngp = Gnuplot.Gnuplot(persist=1)\ngp(\'set style data lines\')\ngp(\'set term png\')\ngp(\'set output \"escan_graph.png\"\')\ngp(\'set datafile separator \"|\"\')\n\ndb = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"password\", db=\"zig\")\ncursor = db.cursor()\n\ncursor.execute(\"select * from escan_data\")\n\nnumrows = int(cursor.rowcount) #get the count of total\n# get and display one row at a time\n\nif numrows &gt; 10:\n        start = numrows-10\nelse:\n        start = 0\n\nfor x in range(start,numrows):\n        row = cursor.fetchone()\n        print row[0], row[1]\n        datafile.write(str(row[0]) + \"|\" + str(row[1]) + \"\\n\")\n\n\n\ndatabuff = Gnuplot.Data(datafile.read(), title=\"test\")\n\n\ngp.plot(databuff)\n</code></pre>\n\n<p>row[0] is the x-axis and row[1] is y-axis.</p>\n    </div><h2>\r\n								1 Answer\r\n                                \r\n						</h2><div class=\"post-text\">\r\n<p>This doesn\'t work because after you <code>write</code> the file object\'s cursor is at the end of the file. If you want to really do this (you are better off not writing the data to a file at all), you need to move the cursor back to the beginning of the file:</p>\n\n<pre><code>datafile.seek(0)\n</code></pre>\n\n<p>Now you can <code>read()</code> from the beginning of the file.</p>\n    </div>',1),(22,'The What, How and Why Of Single Var Pattern in JavaScript?','http://www.smashingbuzz.com/2015/09/single-var-pattern-javascript/',0,0,'\n														<p>Are you tired of dealing with language rules and conventions? Well, then you can switch to using JavaScript, as it gives flexibility over applying rules and code conventions. For instance, JavaScript allows users to create any type of variable within the script in your web page. While this may seem an advantage to you in the first place, however, it can also result in unfavorable consequences if you won’t work carefully with the JavaScript variables.</p>\n<p><img class=\"alignnone size-full wp-image-35968\" src=\"http://www.smashingbuzz.com/wp-content/uploads/2015/09/The-What-How-and-Why-Of-Single-Var-Pattern-in-JavaScript.jpg\" alt=\"The What, How and Why Of Single Var Pattern in JavaScript?\" width=\"600\" height=\"600\" /></p>\n<p>Fortunately, there is an excellent solution that can help you work with JavaScript variables in the most effective way possible, called as single var pattern. In fact, many JavaScript legends have been encouraging to utilize the single var pattern, as it helps in preventing plenty of mistakes often made by both novice and experienced JavaScript developers.</p>\n<p>Douglas Crockford, who built JSLint the popular code quality tool likes the single var pattern and strongly advocates using it. Below is his opinion as to why JavaScript users must support this pattern:</p>\n<blockquote><p><strong>“When using languages with block scope, it is usually recommended that variables must be declared as close as possible to the first place where they’re used. But, since JavaScript does not have block scope, it is wiser to declare all of a function’s variables at the top of the function. It is recommended that a single var statement be used per function. This can be declined with the vars option.”</strong></p></blockquote>\n<p>Through this post, I would like to make you understand about the JavaScript “single var pattern” and why you should consider using it in your development projects.</p>\n<h3>An Overview of The Single Var Pattern</h3>\n<p>The single var pattern, basically, declares all of the (local) variables at the top of a scope block (i.e. a function block) using only a single “var” statement. Furthermore, all the variables are separated by a comma (,), while the last variable contains a semicolon (;) at the end.<br />Let’s look at an example of the single var pattern:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">function myfuncname() {\r\nvar  a = 10,\r\nb = 20,\r\nc = { name: \"XYZ\", age: 25 },\r\nd;\r\n\r\n}</pre>\n<p>As you can see the above example amounts to having many different var statements for each variable, as follows:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">function myfuncname() {\r\n\r\nvar a = 10;\r\n\r\nvar b = 20;\r\n\r\nvar c = { name: \"XYZ\", age: 25};\r\n\r\nvar d;\r\n\r\n}</pre>\n<p>The multiple var statement pattern as shown in the code snippet above is a viable alternative to the single var pattern. That’s because, it consists of all the variables that are declared at the beginning of the function block, which  helps in preventing logical errors. Plus, it makes the code more readable and so on.</p>\n<p>Since JavaScript ignores commas and semicolons included in tabs, newlines, and other spacing characters, the above example could have been written in just a single line:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">function myfuncname() {\r\n\r\nvar a = 10, b = \"20, c = { name: \"XYZ\", age: 25}, d;\r\n\r\n}</pre>\n<p>However, it’s a good practice to declare each variable individually on one line for improved readability. This also makes it easy to comment your variables separately (if needed).</p>\n<h3>Alternative Way To Using Single Var Pattern</h3>\n<p>Apart from the above discussed single var pattern, there is another way (or formatting style) that can be used for the single var pattern. This alternative patter requires to put the comma-separators at the very beginning of each line, rather than adding it at the end:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">function myfuncname() {\r\n\r\nvar   a = 10\r\n\r\n, b = \"Hello!\"\r\n\r\n, c = { name: \"ABC\", age: 44 }\r\n\r\n, d = new Date()\r\n\r\n, e;\r\n\r\n}</pre>\n<p>Whether you should place the commas at the start or the end of each line depends upon your preference. However, it would be better if you’ll prefer to put the commas at the end of the line, as it enables you to read the var statements easily.</p>\n\n<div>\n<div>\n<p>Advertisements</p>\n<ins class=\"adsbygoogle\"></ins>\n</div>\n</div>\n\n<p>So, Why You Should Use the Single Var Pattern?</p>\n<p>Below are a few benefits that you get by using the single var pattern:</p>\n<h3>1. Avoids Confusion</h3>\n<p>The biggest benefit of using the single var pattern is that it helps avoid confusion, by making it easier to find where a certain variable is; since this JavaScript pattern provides one single place to search for all the local variables essential to be used by the function. You just need to look at the top of the function to see or modify your it’s variables.</p>\n<h3>2. Prevents Logical Errors From Occurring</h3>\n<p>Since all of the variables are declared at the beginning of the function block, it avoids logical errors that are related to hoisting, declaring global variables and naming collisions. Let us discuss about these errors one by one:</p>\n<h3>Variable Hoisting</h3>\n<p>JavaScript allows to place “multiple var statements” anywhere within a function, and will make you believe that the variables were declared at the start of the function block. JavaScript’s behavior of processing the statements prior to executing else is known as hoisting. Now, in case you’re using a variable and declare it within the function later causes logical errors. Because the single var pattern intentionally puts all the variables at the top of the function, it helps prevent related hoisting from taking place.</p>\n<h3>Naming Collisions</h3>\n<p>: While working on large-size and complicated scripts, it’s easy to accidentally reuse a variable name, which could lead to logical errors. However, since the single var pattern help in keeping all the variables in one spot, it becomes easy to keep track of the variable names that have already been used.</p>\n<h3>Minimize Accidental Global Variables</h3>\n<p>: Having too many global variables can cause naming collisions with other JavaScript libraries – you probably would be using – that relies upon global variables. And thus, it is recommended that you should get rid of unnecessary global variables to avoid naming collisions. Besides, it is a good practice to use local variables over global ones, since the former ones are faster to access compared to the latter. The single var pattern will help you remember to create local variables and thereby reduces accidental global variables.</p>\n<h3>3. Make You Write Less Code</h3>\n<p>Lastly, using single var statement reduces the amount of code that you need to write. Let us consider an example to understand how it helps in writing less code:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\r\n// A function that returns a random integer number\r\n// between two specified integer arguments.\r\n\r\nvar myrandomizer = function (a, b) {\r\n\r\nvar minvalue = a,\r\n\r\nmaxvalue = b,\r\n\r\nrandom = Math.random(),\r\n\r\nresult;\r\n\r\n// Calculate random number\r\n\r\nresult = Math.floor(random * (maxvalue - minvalue) + minvalue);\r\n\r\nreturn result;\r\n\r\n}</pre>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\r\n// Display random number in an alert box\r\n\r\nalert(myrandomizer(1, 100));</pre>\n<p>You can reduce the above amount of code, by including the calculation of the variable ‘result’ within the single var statement, as follows:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\r\n// A function that returns a random integer number\r\n\r\n// between two specified integer arguments.\r\n\r\nvar myrandomizer = function (a, b) {\r\n\r\nvar minvalue = a,\r\n\r\nmaxvalue = b,\r\n\r\nrandom = Math.random(),\r\n\r\n// Calculate random number\r\n\r\nresult = Math.floor(random * (maxvalue - minvalue) + minvalue);\r\n\r\nreturn result;\r\n\r\n}</pre>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\r\n// Display random number in an alert box\r\n\r\nalert(myrandomizer(1, 100));</pre>\n<p>Conclusion</p>\n<p>Hopefully, this post will help you in becoming familiar with the JavaScript “Single Var Pattern” and its benefits. But, many professionals have also <a href=\"http://danhough.com/blog/single-var-pattern-rant/\">criticized using the single var pattern in JavaScript</a>. And so, make sure to carefully analyze its set of pros and cons to make an informed decision.</p>\n<p>Author Biography: Jack Calder is currently a Senior web developer in Markupcloud Ltd. He always use to share extinct &amp; concrete information on web design and development. Jack is curently involved in <a href=\"http://www.markupcloud.com/services/psd-to-html\">psd to html service</a> with extraneous efforts on web design templates.</p>\n\n													',1),(23,'Using the Office UI Fabric with Angular JS to Create an Office Add-In','http://www.itunity.com/article/office-ui-fabric-angular-js-create-office-addin-2570',1,0,'<p><a href=\"https://angularjs.org/\">Angular</a> is such a popular JavaScript framework because it provides an elegant structure for creating enterprise applications using a programming language that was never designed for such a thing. When developers build applications with Angular, they often couple it with the <a href=\"http://getbootstrap.com/\">Bootstrap</a> framework to easily take advantage of pre-canned styles and components. The Angular team has also created several directives that combine Angular and Bootstrap into <a href=\"http://angular-ui.github.io/bootstrap/\">UI Bootstrap</a> components. Together, these frameworks give you the ability to create beautiful and functional applications using HTML5, CSS3, and JavaScript. As proof, figure 1 shows an application <a href=\"http://wrapbootstrap.com/preview/WB055J451\">theme</a> that I used recently. Pause and enjoy the beauty.</p>\n<p><span class=\"contentimage\">\r\n<a href=\"http://www.itunity.com/content/content/2570/angular-bootstrap-1.png\" title=\"Angular-bootstrap-1\" class=\"imagecaption\">\r\n<img src=\"http://www.itunity.com/content/content/2570/angular-bootstrap-1.png?w=550\" alt=\"Angular and Bootstrap let you create beautiful and functional applications using HTML5, CSS3, and JavaScript\" /></a>\r\n</span></p>\n<p><em>Figure 1, Angular and Bootstrap make beautiful and functional applications</em></p>\n<p>When developing add-ins for Office and SharePoint, I typically use the Bootstrap styles and components. While this approach gives me all the benefits stated previously, it does present some challenges matching the standard look and feel of the Office suite. The problem for developers is that the UI components that are part of the Bootstrap world were not created with Office and SharePoint in mind. Consequently, your add-in may look good, but it may also give the user that vague feeling that it doesn’t quite fit. What we really need are styles and components that offer the beauty and ease of Bootstrap, work well with Angular, and fit nicely into Office and SharePoint. Fortunately, Microsoft has answered our needs with the <a href=\"https://github.com/OfficeDev/Office-UI-Fabric\">Office UI Fabric</a>.</p>\n<h2>Introducing the Office UI Fabric</h2>\n<p>Last month the Office team <a href=\"https://blogs.office.com/2015/08/31/introducing-office-ui-fabric-your-key-to-designing-add-ins-for-office/\">announced</a> the release of the Office UI Fabric for general availability. The Office UI Fabric is a responsive, mobile-first, front-end framework for developers creating solutions for Office and SharePoint. The framework consists of styles and components that give your applications the same look and feel as Office and SharePoint. In short, it’s Bootstrap for Office and SharePoint.</p>\n<p>The Office UI Fabric defines 10 base <a href=\"https://github.com/OfficeDev/Office-UI-Fabric/blob/master/ghdocs/FEATURES.md#typography\">font classes</a> that represent the typography used throughout Office and SharePoint. Each base class uses the Segoe UI font and varies by size. There are also several helper font classes that alter the text weight.</p>\n<p>9 different <a href=\"https://github.com/OfficeDev/Office-UI-Fabric/blob/master/ghdocs/FEATURES.md#color\">themes</a> are defined, making it easy to create a consistent feel in your application. Along with custom icons and animations, look and feel is easy. The Office UI Fabric also provides localization support with right-to-left (RTL) styles and language-optimized fonts.</p>\n<p>Just like Bootstrap, the Office UI Fabric also defines a 12-column, <a href=\"https://github.com/OfficeDev/Office-UI-Fabric/blob/master/ghdocs/FEATURES.md#responsive-grid\">responsive grid</a> structure. The grid defines row and column styles just like Bootstrap. The grid is also responsive so you can use classes to define how it should change as the device size changes. Again, this is exactly like the Bootstrap grid, but made for Office and SharePoint.</p>\n<p>The Office UI Fabric includes 26 <a href=\"https://github.com/OfficeDev/Office-UI-Fabric/tree/master/dist/components\">components</a> like menus, breadcrumbs, buttons, tables, and cards. Each component consists of some template HTML and a style sheet. Generally, you can use the components by simply copying the HTML into your project. You can review the complete <a href=\"https://msdn.microsoft.com/EN-US/library/mt484317.aspx\">Office Add-In Design Guidelines</a> online to ensure consistency. Figure 2 shows a sample dialog box with a clean, consistent look. My only disappointment is that I wish the components came packaged as Angular directives. Looks like that is a good opportunity for a community project.</p>\n<p><span class=\"contentimage\">\r\n<a href=\"http://www.itunity.com/content/content/2570/office-ui-fabric-dialog-box-2.png\" title=\"office-ui-fabric-dialog-box-2\" class=\"imagecaption\">\r\n<img src=\"http://www.itunity.com/content/content/2570/office-ui-fabric-dialog-box-2.png?w=300\" alt=\"Office UI Fabric dialog box\" /></a>\r\n</span></p>\n<p><em>Figure 2, A sample Office UI Fabric dialog box</em></p>\n<h2>Using the Office UI Fabric</h2>\n<p>Using the Office UI Fabric in your Office and SharePoint development is straightforward. As an example, I created an Outlook add-in that allows a user to pick from a list of “quick responses” when answering an e-mail. The add-in is built using the Angular framework with the set of quick responses maintained in a SharePoint online list. Figure 3 shows the responses surfaced when the user responds to an e-mail. Notice how the look and feel fits right in with Outlook.</p>\n<p><span class=\"contentimage\">\r\n<a href=\"http://www.itunity.com/content/content/2570/outlook-add-in-using-office-ui-fabric-3.png\" title=\"outlook-add-in-using-office-ui-fabric-3\" class=\"imagecaption\">\r\n<img src=\"http://www.itunity.com/content/content/2570/outlook-add-in-using-office-ui-fabric-3.png?w=550\" alt=\"Outlook add-in created using the Office UI Fabric\" /></a>\r\n</span></p>\n<p><em>Figure 3, An Outlook add-in utilizing the Office UI Fabric</em></p>\n<p>After creating the initial Outlook add-in project in Visual Studio 2015, I reworked the structure a bit to introduce the Angular framework along with the <a href=\"http://www.cloudidentity.com/blog/2015/02/19/introducing-adal-js-v1/\">Active Directory Authentication Library for JavaScript</a> (adal.js). This allowed me to assign my Outlook add-in permissions in Azure Active Directory for accessing the SharePoint online list where the quick responses are maintained. This article is not intended to be a primer on adal.js, but you can get up to speed by reading my <a href=\"http://www.itunity.com/article/started-adaljs-office-365-apis-2144\">previous article</a> on the subject. Additionally, the complete source code for this article is available in the IT Unity <a href=\"https://github.com/ITUnity/dev/tree/master/QuickResponses\">repository</a>.</p>\n<p>Once the basic add-in structure was complete, I added the references to the Office UI Fabric. The styles are available from a content delivery network (CDN) link. The components, however, must be copied from the raw HTML in the OfficeDev <a href=\"https://github.com/OfficeDev/Office-UI-Fabric/tree/master/dist/components\">repository</a>.</p>\n\n<pre class=\"prettyprint\">&lt;link rel=\"stylesheet\" href=\"https://appsforoffice.microsoft.com/fabric/1.0/fabric.min.css\"&gt;\r\n&lt;link rel=\"stylesheet\" href=\"https://appsforoffice.microsoft.com/fabric/1.0/fabric.components.min.css\"&gt;</pre>\n\n<p>I used the styles, responsive grid, and button component in my Outlook add-in. The experience was similar to using Bootstrap, except the documentation on GitHub for the Office UI Fabric is not nearly as complete as for Bootstrap. Nonetheless, I was able to create the simple interface shown in Figure 3 without too much difficulty. The code in listing 1 shows the HTML for the user interface.</p>\n<p>Listing 1, A simple Office UI Fabric interface</p>\n\n<pre class=\"prettyprint\">&lt;div class=\"ms-fontColor-themeDarker\" style=\"margin:5px;\"&gt;\r\n    &lt;div class=\"ms-font-s-plus\"&gt;{{message}}&lt;/div&gt;\r\n    &lt;div class=\"ms-font-s-plus\" style=\"padding-bottom:5px;\"&gt;\r\n        Select a quick response from the choices below:\r\n    &lt;/div&gt;\r\n    &lt;div data-ng-hide=\"!workingOnIt\"&gt;Retrieving quick responses...&lt;/div&gt;\r\n    &lt;div class=\"ms-Grid\"&gt;\r\n        &lt;div class=\"ms-Grid-row\" data-ng-repeat=\"response in responses\" style=\"padding-bottom:5px;\"&gt;\r\n            &lt;div class=\"ms-Grid-col ms-u-sm6 ms-u-md8 ms-u-lg10\"&gt;\r\n                &lt;div class=\"ms-font-m ms-fontWeight-semibold\"&gt;\r\n                    {{response.Title}}\r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"ms-Grid-col ms-u-sm6 ms-u-md4 ms-u-lg2\"&gt;\r\n                &lt;button class=\"ms-Button ms-Button--primary\"\r\n                        data-ng-click=\"insertResponse(response.Title)\"&gt;\r\n                    &lt;span class=\"ms-Button-label\"&gt;Respond!&lt;/span&gt;\r\n                &lt;/button&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;</pre>\n\n<h2>Conclusions</h2>\n<p>My first experience with the Office UI Fabric was a good one. I found the styles and components easy to use and would recommend them to Office and SharePoint developers. The framework would benefit from some additional documentation and samples as well as the development of Angular directives. For a first release, however, the framework seems solid. Developers should begin to use it immediately for Office and SharePoint development.</p>',1),(24,'Chocolat - jQuery responsive lightbox','http://chocolat.insipi.de/#demo',1,0,'\n                                        <p>02.</p>\n                                        <h4><span class=\"animated white\">crossbrowser</span></h4>\n                                        <div class=\"desc\">\n                                            <p>\n                                                Chocolat works well with all major browser. It has been tested on : IE7+, firefox, chrome, opera, safari.\n                                            </p>\n                                        </div>\n                                    ',1),(25,'The Incomplete Collection of\nNode.js Performance Tips â€” Node and Beyond','https://medium.com/node-and-beyond/the-incomplete-collection-of-node-js-performance-tips-94cc712661bd',1,0,'<h3 class=\"graf--h3 graf--first\">The Incomplete Collection of<br />Node.js Performance Tips</h3><h4 class=\"graf--h4\"><strong class=\"markup--strong markup--h4-strong\">Bookmark and ♥ for later reading :)</strong></h4><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*1dI8vwqQTqVVhDy75ugc9A.png\" alt=\"1*1dI8vwqQTqVVhDy75ugc9A.png\" /></div><p class=\"graf--p\">This is a (non-comprehensive) collection of practical advice on how to get more performance out of your Node.js application. While the points I am making below are just some of the more obvious<strong class=\"markup--strong markup--p-strong\"> </strong>performance boosting tips, I will try to keep a more detailed list maintained on GitHub (if people like it). But let’s jump right into it:</p><h3 class=\"graf--h3\">Take Advantage of Multi-Core CPUs with Node Clusters</h3><p class=\"graf--p\">Node.js is single threaded (duh). So an instance of Node runs in a single thread, not taking any advantage of modern multi-core CPUs. Luckily, Node’s cluster module allows you to easily launch a whole cluster of Node child processes to better handle the load. (And child processes share the same server ports.)</p><p class=\"graf--p\">Node’s documentation gives an excellent and easy to read starting point on how to get started with clusters: <a href=\"https://nodejs.org/api/cluster.html\" class=\"markup--anchor markup--p-anchor\">https://nodejs.org/api/cluster.html</a></p><p class=\"graf--p\"><em class=\"markup--em markup--p-em\">Beyond better performance, clusters will have the added benefit of improving the resilience of your application. The ‘master’ process knows when a child processes crashes, and routes traffic to other child processes until the crashed process gets restarted.</em></p><h3 class=\"graf--h3\">Express Optimizations</h3><h4 class=\"graf--h4\">Use compression</h4><p class=\"graf--p\">An often overlooked or forgotten middleware you can use with express is compression. It uses <strong class=\"markup--strong markup--p-strong\">gzip</strong> to compress your http payload sent to the client.</p><pre class=\"graf--pre\">var app = require(\'express\')();<br />var compression = require(\'compression\');<br />app.use(compression());</pre><p class=\"graf--p\"><em class=\"markup--em markup--p-em\">Make sure that you load compression </em><strong class=\"markup--strong markup--p-strong\"><em class=\"markup--em markup--p-em\">before</em></strong><em class=\"markup--em markup--p-em\"> any other middleware.</em></p><h4 class=\"graf--h4\">Use cache</h4><p class=\"graf--p\">Unlike most server-based applications, Node.js apps will often be designed to run permanently. If that is the case for you, consider setting your most used variables &amp; objects just once at initialization and keep reusing them for any incoming requests down the line. Think of something like “the top 5 articles of the week” your users will see on your frontpage.<br />Do you really need to update that content <em class=\"markup--em markup--p-em\">every</em> time a user visits your page? If not, you can cache it:</p><pre class=\"graf--pre\">app.set(\'view cache\', true);</pre><h4 class=\"graf--h4\">Remove unused middleware</h4><p class=\"graf--p\">Do you make use of http PUT/DELETE requests? If not, disable <em class=\"markup--em markup--p-em\">methodOverride</em>. If you don’t even use POST requests (maybe your app does everything via sockets) you can even get rid of the <em class=\"markup--em markup--p-em\">bodyParser </em>too.</p><p class=\"graf--p\">Take a close look which middleware you actually need, and which you can work without of.</p><p class=\"graf--p\">And some middleware might only be needed in a specific environment mode. For those cases you can do something like this:</p><pre class=\"graf--pre\">if (app.get(\'env\') !== \'production\') {<br />app.use(morgan);<br />}</pre><h4 class=\"graf--h4\">Let’s talk sessions</h4><p class=\"graf--p\">Express sessions are saved in memory. Your memory footprint grows with every additional user connected. This can add quite a bit of overhead to your application.</p><p class=\"graf--p\">Try to limit your use of session variables. Better to use hashed tokens and fetch user data from an alternative session store such as MongoDB or Redis.</p><p class=\"graf--p\"><em class=\"markup--em markup--p-em\">But if you are brave enough you might even want to consider to not store any state server-side at all, but dive into client side sessions. For that, take a look at this: </em><a href=\"https://github.com/mozilla/node-client-sessions\" class=\"markup--anchor markup--p-anchor\"><em class=\"markup--em markup--p-em\">https://github.com/mozilla/node-client-sessions</em></a></p><h3 class=\"graf--h3\">Go Asynchronous</h3><h4 class=\"graf--h4\">Async code execution</h4><p class=\"graf--p\">Probably the single biggest advantage of Node.js (besides server side javascript execution itself of course) is it’s asynchronous nature.</p><p class=\"graf--p\">Being single-threaded, your Node.js application can easily get blocked by synchronous code execution taking too long to return. If incoming requests can’t get processed anymore, your application is rendered de-facto useless.</p><p class=\"graf--p\">Think about some especially time, memory, or CPU intensive tasks. For instance accessing, reading or writing large files. If there is no absolutely, critical, unavoidable reason, you should <strong class=\"markup--strong markup--p-strong\"><em class=\"markup--em markup--p-em\">always</em></strong> use async over sync.</p><p class=\"graf--p\">But keep asynchronous support also in mind when choosing external libraries and components. Make sure they are not potentially blocking your application.</p><h4 class=\"graf--h4\">Parallel code execution</h4><p class=\"graf--p\">Revisit your codebase and find chained async callbacks and think if you can run those functions parallel. For instance: You need to read 2 files before executing a callback. This can be done way better than chaining callbacks.</p><p class=\"graf--p\"><strong class=\"markup--strong markup--p-strong\">The <em class=\"markup--em markup--p-em\">async</em> module</strong> allows you to run functions parallel without the need of chaining them in callbacks. Here the code example for async.parallel:</p><pre class=\"graf--pre\">async.parallel([<br />function(){ ... },<br />function(){ ... }<br />], callback);</pre><p class=\"graf--p\">Awesome, right? You get one callback executed after all parallel running functions finished. Take a look at the documentation for more details: <a href=\"https://github.com/caolan/async\" class=\"markup--anchor markup--p-anchor\">https://github.com/caolan/async</a></p><p class=\"graf--p\"><strong class=\"markup--strong markup--p-strong\">Bluebird and Q</strong> are known first and foremost for giving us promises. But they also let us execute code parallel returning a promise (um.. callback-ish) after all promises (um .. promisified functions) returned.<br />Let’s look at an example for bluebird:</p><pre class=\"graf--pre\">Bluebird.all([promiseFunction1,promiseFunction2]) <br />.then(function(data) {<br />// will execute after all promisified functions returned<br />});</pre><p class=\"graf--p\"><strong class=\"markup--strong markup--p-strong\">ES 6</strong> has a native support for promises and likewise provide a <em class=\"markup--em markup--p-em\">.all()</em> method. Depending on your Node version, you might have already support for it.</p><pre class=\"graf--pre\">Promise.all([promiseFunction1, promiseFunction1])<br />.then(function(data) {<br />// will execute after all promisified functions returned<br />});</pre><p class=\"graf--p\"><em class=\"markup--em markup--p-em\">If for whatever reason you do not want to use any of the options above, you could also use following approach. But this does not scale well for obvious reasons. Really, you shouldn\'t do that.</em></p><h3 class=\"graf--h3\">Use V8 native functions instead of adding external libraries</h3><p class=\"graf--p\">If you come from a traditional web development side to Node.js, you are probably used to working with libraries such as <a href=\"http://underscorejs.org/\" class=\"markup--anchor markup--p-anchor\">underscore</a> or <a href=\"https://lodash.com/\" class=\"markup--anchor markup--p-anchor\">lodash</a> to take advantage of higher order functions (think of <em class=\"markup--em markup--p-em\">_.each</em>,<em class=\"markup--em markup--p-em\"> _.map</em>, etc..)</p><p class=\"graf--p\">Those libraries are written with the <strong class=\"markup--strong markup--p-strong\">front-end</strong> in mind, and that means they include a sizable chunk of code that makes sure everything works as it should in a variety of browser environment: From Chrome to Safari, from Firefox to IE, plus .. polyfills (Yeah, we are looking at you IE).</p><p class=\"graf--p\">Which is <strong class=\"markup--strong markup--p-strong\">great</strong>, but also means those libraries contain a lot of additional code that you do not need — not server-side anyways. So before adding yet another module and adding to your resource footprint, try taking advantage of V8 native functions instead, such as <em class=\"markup--em markup--p-em\">forEach</em>, <em class=\"markup--em markup--p-em\">map</em>, etc.</p><h3 class=\"graf--h3\">Database Optimizations: Limit query scope and index your collections</h3><p class=\"graf--p\">If you are working with MongoDB as your database of choice, I have two easy recommendations that could improve your performance quite a bit. (And you should be able to fairly easy retrofit your already existing apps)</p><ol class=\"postList\"><li class=\"graf--li\">limit queries in ‘scope’ whenever possible, and</li><li class=\"graf--li\">add indices to collections which are queried often</li></ol><p class=\"graf--p\">Imagine you want to display the last 10 posts of a user whenever the user visits your site. First, it is obvious that will want to index your collections accordingly, but you should also make sure to limit your MongoDB queries in ‘scope’. This can mean 2 things: First, to limit the fields you want returned, and secondly (maybe more importantly) to limit the number of documents returned. Take a look at these example snippets from the MongoDB documentation:</p><pre class=\"graf--pre\">db.user.find({ type: \'customer\' }, { item: 10, qty: 1 } );</pre><pre class=\"graf--pre\">db.user.find({ type: \'customer\' }).limit(10);</pre><p class=\"graf--p\">Makes sense? Also dig into the MongoDB’s documentation on creating and working with indices in Node: <a href=\"http://docs.mongodb.org/getting-started/node/indexes/\" class=\"markup--anchor markup--p-anchor\">http://docs.mongodb.org/getting-started/node/indexes/</a></p><p class=\"graf--p\"><em class=\"markup--em markup--p-em\">Btw: I highly recommend Mongo University’s course: “</em><a href=\"https://university.mongodb.com/courses/M101JS/about\" class=\"markup--anchor markup--p-anchor\"><em class=\"markup--em markup--p-em\">MongoDB for Node.js Developers</em></a><em class=\"markup--em markup--p-em\">” Believe me, it’s </em><strong class=\"markup--strong markup--p-strong\"><em class=\"markup--em markup--p-em\">super</em></strong><em class=\"markup--em markup--p-em\"> </em><strong class=\"markup--strong markup--p-strong\"><em class=\"markup--em markup--p-em\">awesome</em></strong><em class=\"markup--em markup--p-em\">!</em></p><h3 class=\"graf--h3\">Client side rendering!</h3><p class=\"graf--p\">Instead of using server side rendering such Express’ Jade templating, move to client side rendering using <a href=\"http://facebook.github.io/react/\" class=\"markup--anchor markup--p-anchor\">React</a>, <a href=\"https://angularjs.org/\" class=\"markup--anchor markup--p-anchor\">AngularJS</a> or <a href=\"http://backbonejs.org/\" class=\"markup--anchor markup--p-anchor\">Backbone.js</a> and have the server provide only the dynamic content really needed. ‘Outsourcing’ rendering to the client can <strong class=\"markup--strong markup--p-strong\">seriously</strong> improve your application’s performance.</p><h3 class=\"graf--h3\">Don’t use Node.js for static assets</h3><p class=\"graf--p\">Wherever possible you should avoid using Node.js for serving your static assets. Those include anything from Images, Videos or CSS files.</p><p class=\"graf--p\">To improve both, performance of your application and client latency, I recommend a combination of a separate standard web server, such as Nginx, plus taking advantage of Content Delivery Networks (CDNs) to cache and provide those static assets as close to the user as possible.</p><p class=\"graf--p\"><em class=\"markup--em markup--p-em\">Personally I have had excellent experiences with Rackspace for both.<br />Check them out: </em><a href=\"http://www.rackspace.com\" class=\"markup--anchor markup--p-anchor\"><em class=\"markup--em markup--p-em\">www.rackspace.com</em></a></p><h3 class=\"graf--h3\">Make it ugly!</h3><p class=\"graf--p\">There is a lot to be said for the beauty of clean code following <a href=\"https://github.com/airbnb/javascript\" class=\"markup--anchor markup--p-anchor\">fancy style guides</a>. But there is more to be said for reducing load and latency — at least in production.</p><p class=\"graf--p\">Make it a habit to use <a href=\"http://gulpjs.com\" class=\"markup--anchor markup--p-anchor\">Gulp</a> or <a href=\"http://gruntjs.com\" class=\"markup--anchor markup--p-anchor\">Grunt</a> to run tasks to <a href=\"https://github.com/mishoo/UglifyJS2/\" class=\"markup--anchor markup--p-anchor\">uglify your javascript</a> and <a href=\"https://github.com/purifycss\" class=\"markup--anchor markup--p-anchor\">purify your CSS</a> for your client side code. I personally am becoming a bit of a fan of webpack to bundle everything together as well: <a href=\"http://webpack.github.io/\" class=\"markup--anchor markup--p-anchor\">http://webpack.github.io/</a></p><h3 class=\"graf--h3\">Use performance monitoring tools to identify bottle necks</h3><p class=\"graf--p\">This is quite new territory for me, but it is probably fair to say that it’s a good idea to keep close look at your application’s performance during development. I haven\'t tested them all, (though I made good experiences with New Relic) but here the recommendations I got from others:</p><p class=\"graf--p graf--last\"><em class=\"markup--em markup--p-em\">Sidenote: Node.js applications in production mode run with higher performance than in development. You can run your app in production mode to get a sense of the performance once your application is deployed.</em></p>',1),(26,'Develop command line application using NodeJS | Code for geek','https://codeforgeek.com/2015/09/command-line-application-nodejs/',0,0,'<div class=\"td-post-featured-image\"><a href=\"https://codeforgeek.com/wp-content/uploads//2015/09/banner.jpg?07add7\"><img width=\"640\" height=\"216\" class=\"entry-thumb td-modal-image\" src=\"https://codeforgeek.com/wp-content/uploads//2015/09/banner-640x216.jpg?07add7\" alt=\"Develop speedtest command line app using Node\" title=\"Develop speedtest command line app using Node\" /></a></div> <p>Node.js provides utilities to develop command line application. There are some cool application like <strong>express-geenrator</strong> and <strong><a href=\"http://codeforgeek.com/2014/09/update-code-without-restarting-node-server/\">nodemon</a></strong> which runs on command line.</p><p>In this tutorial we will learn how to use command line utilities in Node and develop sample internet speed test program using <strong>speedtest.net</strong> API.</p> <img src=\"https://codeforgeek.com/wp-content/uploads//2015/09/speedtest.gif?07add7\" alt=\"speedtest command line app\" width=\"1200\" height=\"758\" class=\"size-full wp-image-1700\" />npm install speedtestcli -g<p>==&gt; Download it using <strong>npm install speedtestcli -g</strong> and test internet speed on your terminal.</p><center><a class=\"button-rounded button-flat\" href=\"https://github.com/codeforgeek/speed-test-cli\"><i class=\"fa fa-github\"></i>DOWNLOAD</a></center><h2>Basic Hello %Your Name% Command line App.</h2><p>This example will take your name as input and gives you output right in console with greeting. Let’s first write a code to print <strong>“Hello World”</strong> in code.</p><p><strong>cli.js</strong></p><div class=\"codecolorer-container javascript twitlight\"><p>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello World\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></p></div><p>If you save the code and run it via Node using.</p><div class=\"codecolorer-container text twitlight\"><p>node cli.js</p></div><p>You will be able to see the output in console. But this is not what we want. We want our input go like this.</p><div class=\"codecolorer-container text twitlight\"><p>node cli.js Shahid</p></div><p>And it should print</p><div class=\"codecolorer-container text twitlight\"><p>Hello Shahid</p></div><p>Let’s develop this. First create <strong>package.json</strong> using <strong>npm init</strong> command OR you can copy this.</p><div class=\"codecolorer-container javascript twitlight\"><p><span class=\"br0\">{</span><br />  <span class=\"st0\">\"name\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"HelloWorld\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"version\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"1.0.0\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"description\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"author\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"license\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"ISC\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"bin\"</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><br />    <span class=\"st0\">\"sayHello\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"cli.js\"</span><br />  <span class=\"br0\">}</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"dependencies\"</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br /><span class=\"br0\">}</span></p></div><p>Did you notice this line.</p><div class=\"codecolorer-container text twitlight\"><p>  \"bin\": {<br />    \"sayHello\": \"cli.js\"<br />  }</p></div><p>This line tells Node to execute particular file on this command. So its syntax is.</p><div class=\"codecolorer-container text twitlight\"><p>\"bin\" : {<br />   \"your-command\" : \"file-to-execute\"<br />}</p></div><p>We need to modify cli.js to following.</p><p><strong>cli.js</strong></p><div class=\"codecolorer-container javascript twitlight\"><p>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span><span class=\"sy0\">,</span>process.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></p></div><p>Save the code and run it using following command.</p><div class=\"codecolorer-container text twitlight\"><p>node cli.js Shahid</p></div><p>It will print</p><div class=\"codecolorer-container text twitlight\"><p>Hello Shahid</p></div><p>On screen.</p><p>To make it command line you need to add following in start of the main script.</p><div class=\"codecolorer-container text twitlight\"><p>#!/usr/bin/env node</p></div><p>Above line tell the System that the script should be executed with the first executable named <strong>node</strong> that’s found in your current PATH. <strong>/bin/env</strong> is standard Unix utility that looks at your current environment.<br />So final code should be like this.</p><p><strong>cli.js</strong></p><div class=\"codecolorer-container javascript twitlight\"><p>#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env node<br />console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span><span class=\"sy0\">,</span>process.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></p></div><p>Now run following command to install it in your system as a command line application.</p><div class=\"codecolorer-container text twitlight\"><p>npm install -g</p></div><p>This is it. Once it is installed you can access it using following command on terminal.</p><div class=\"codecolorer-container text twitlight\"><p>sayHello Shahid</p></div><h3>Developing Speedtest command line app.</h3><p>We all know and use <strong>speedtest.net</strong> frequently to check Download and upload speed. They do provide web services too for external integration of speedtest features.</p><p>There is node module which wraps the API provided by speedtest.net ( Thanks to @ddsol for this ) called <strong>speedtest-net</strong>. We will be using that to develop our command line application.</p><p>Let’s begin with Package.json file. Use <strong>npm init</strong> to Generate package.json for your application ( It’s a good practice ). You may specify dependencies in the wizard or hit enter to get package.json with basic information.</p><p>You can install dependencies using.</p><div class=\"codecolorer-container text twitlight\"><p>npm install chalk progress speedtest-net --save</p></div><p>Here is my package.json.</p><p><strong>package.json</strong></p><div class=\"codecolorer-container javascript twitlight\"><p><span class=\"br0\">{</span><br />  <span class=\"st0\">\"name\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"speedTestCLI\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"version\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"1.0.0\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"description\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"author\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"license\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"ISC\"</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"bin\"</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><br />    <span class=\"st0\">\"speedtest\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"index.js\"</span><br />  <span class=\"br0\">}</span><span class=\"sy0\">,</span><br />  <span class=\"st0\">\"dependencies\"</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><br />    <span class=\"st0\">\"chalk\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"^1.1.1\"</span><span class=\"sy0\">,</span><br />    <span class=\"st0\">\"progress\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"^1.1.8\"</span><span class=\"sy0\">,</span><br />    <span class=\"st0\">\"speedtest-net\"</span><span class=\"sy0\">:</span> <span class=\"st0\">\"^1.0.3\"</span><br />  <span class=\"br0\">}</span><br /><span class=\"br0\">}</span></p></div><p>Install dependencies by using following command if you have not done already.</p><div class=\"codecolorer-container text twitlight\"><p>npm install</p></div><p>For ease, i select <strong>speedtest</strong> as command. You can change it as per your preference. Let’s write some code for main file.</p><p><strong>index.js</strong></p><div class=\"codecolorer-container javascript twitlight\"><div class=\"javascript codecolorer\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env node<br /><span class=\"kw2\">var</span> speedTest    <span class=\"sy0\">=</span>  require<span class=\"br0\">(</span><span class=\"st0\">\'speedtest-net\'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br /><span class=\"kw2\">var</span> ProgressBar  <span class=\"sy0\">=</span>  require<span class=\"br0\">(</span><span class=\"st0\">\'progress\'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br /><span class=\"kw2\">var</span> chalk        <span class=\"sy0\">=</span>  require<span class=\"br0\">(</span><span class=\"st0\">\"chalk\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><p><span class=\"kw2\">var</span> test <span class=\"sy0\">=</span> speedTest<span class=\"br0\">(</span><span class=\"br0\">{</span>maxTime<span class=\"sy0\">:</span><span class=\"nu0\">5000</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></p><p><span class=\"kw2\">var</span> bar<span class=\"sy0\">,</span>pingTime<span class=\"sy0\">;</span></p><p><span class=\"co1\">// Event triggered when best Server is found.</span></p><p>test.<span class=\"me1\">on</span><span class=\"br0\">(</span><span class=\"st0\">\'testserver\'</span><span class=\"sy0\">,</span><span class=\"kw2\">function</span><span class=\"br0\">(</span>server<span class=\"br0\">)</span> <span class=\"br0\">{</span><br />    pingTime <span class=\"sy0\">=</span> server.<span class=\"me1\">bestPing</span><span class=\"sy0\">;</span><br /><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></p><p><span class=\"co1\">// Invoke every time when download speed check begin</span><br /><span class=\"co1\">// Return completion value in percentage</span></p><p>test.<span class=\"me1\">on</span><span class=\"br0\">(</span><span class=\"st0\">\'downloadprogress\'</span><span class=\"sy0\">,</span><span class=\"kw2\">function</span><span class=\"br0\">(</span>pct<span class=\"br0\">)</span><span class=\"br0\">{</span><br />    prog<span class=\"br0\">(</span><span class=\"st0\">\'Checking Download Speed \'</span><span class=\"sy0\">,</span>pct<span class=\"br0\">)</span><span class=\"sy0\">;</span><br /><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></p><p><span class=\"co1\">// Invoke every time when upload speed check begin</span><br /><span class=\"co1\">// Return completion value in percentage</span></p><p>test.<span class=\"me1\">on</span><span class=\"br0\">(</span><span class=\"st0\">\'uploadprogress\'</span><span class=\"sy0\">,</span><span class=\"kw2\">function</span><span class=\"br0\">(</span>pct<span class=\"br0\">)</span><span class=\"br0\">{</span><br />    prog<span class=\"br0\">(</span><span class=\"st0\">\'Checking Upload Speed \'</span><span class=\"sy0\">,</span>pct<span class=\"br0\">)</span><span class=\"sy0\">;</span><br /><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></p><p><span class=\"co1\">// Invoke When final data recieved</span></p><p>test.<span class=\"me1\">on</span><span class=\"br0\">(</span><span class=\"st0\">\'data\'</span><span class=\"sy0\">,</span><span class=\"kw2\">function</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">{</span><br />    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>chalk.<span class=\"me1\">cyan</span><span class=\"br0\">(</span><span class=\"st0\">\"Ping : \"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>pingTime<span class=\"br0\">)</span><span class=\"sy0\">,</span>chalk.<span class=\"me1\">dim</span><span class=\"br0\">(</span><span class=\"st0\">\'ms\'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br />    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>chalk.<span class=\"me1\">cyan</span><span class=\"br0\">(</span><span class=\"st0\">\"Download Speed : \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> data.<span class=\"me1\">speeds</span>.<span class=\"me1\">download</span> <span class=\"sy0\">+</span> chalk.<span class=\"me1\">dim</span><span class=\"br0\">(</span><span class=\"st0\">\" MBps\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br />    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>chalk.<span class=\"me1\">cyan</span><span class=\"br0\">(</span><span class=\"st0\">\"Upload Speed : \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> data.<span class=\"me1\">speeds</span>.<span class=\"me1\">upload</span> <span class=\"sy0\">+</span> chalk.<span class=\"me1\">dim</span><span class=\"br0\">(</span><span class=\"st0\">\" MBps\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br /><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></p><p><span class=\"co1\">// in case of error, exit.</span></p><p>test.<span class=\"me1\">on</span><span class=\"br0\">(</span><span class=\"st0\">\'error\'</span><span class=\"sy0\">,</span><span class=\"kw2\">function</span><span class=\"br0\">(</span>error<span class=\"br0\">)</span><span class=\"br0\">{</span><br />    process.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br /><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></p><p><span class=\"coMULTI\">/*<br />    function : prog<br />    params : type and percentage.<br />    task : update the progress bar.<br />*/</span></p><p><span class=\"kw2\">function</span> prog<span class=\"br0\">(</span>what<span class=\"sy0\">,</span>pct<span class=\"br0\">)</span><span class=\"br0\">{</span><br />    <span class=\"co1\">// if its completed, terminate current progress.</span><br />    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pct<span class=\"sy0\">&gt;=</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br />        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bar<span class=\"br0\">)</span> bar.<span class=\"me1\">terminate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br />        bar<span class=\"sy0\">=</span><span class=\"kw2\">null</span><span class=\"sy0\">;</span><br />        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br />    <span class=\"br0\">}</span><br />    <span class=\"co1\">// if bar object is not created</span><br />    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>bar<span class=\"br0\">)</span> <span class=\"br0\">{</span><br />        <span class=\"kw2\">var</span> green <span class=\"sy0\">=</span> <span class=\"st0\">\'<span class=\"es0\">\\u</span>001b[42m <span class=\"es0\">\\u</span>001b[0m\'</span><span class=\"sy0\">,</span><br />              red <span class=\"sy0\">=</span> <span class=\"st0\">\'<span class=\"es0\">\\u</span>001b[41m <span class=\"es0\">\\u</span>001b[0m\'</span><span class=\"sy0\">;</span><br />        bar <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> ProgressBar<span class=\"br0\">(</span><span class=\"st0\">\' \'</span><span class=\"sy0\">+</span>what<span class=\"sy0\">+</span><span class=\"st0\">\' [:bar] :percent\'</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br />            complete<span class=\"sy0\">:</span> green<span class=\"sy0\">,</span><br />            incomplete<span class=\"sy0\">:</span> red<span class=\"sy0\">,</span><br />            clear<span class=\"sy0\">:</span> <span class=\"kw2\">true</span><span class=\"sy0\">,</span><br />            width<span class=\"sy0\">:</span><span class=\"nu0\">40</span><span class=\"sy0\">,</span><br />            total<span class=\"sy0\">:</span> <span class=\"nu0\">100</span><br />        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br />    <span class=\"br0\">}</span><br />    <span class=\"co1\">// else update the bar with coming value.</span><br />    bar.<span class=\"me1\">update</span><span class=\"br0\">(</span>pct<span class=\"sy0\">/</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br /><span class=\"br0\">}</span></p></div></div><p>Run the program using</p><div class=\"codecolorer-container text twitlight\"><p>node index.js</p></div><p>Install it in your system using.</p><div class=\"codecolorer-container text twitlight\"><p>npm install -g</p></div><p>And run your specified command in above case <strong>speedtest</strong> on terminal to see output.<br /><img src=\"https://codeforgeek.com/wp-content/uploads//2015/09/speedtest.gif?07add7\" alt=\"speedtest command line app\" width=\"1200\" height=\"758\" class=\"size-full wp-image-1700\" />npm install speedtestcli -g</p><h3>Conclusion:</h3><p>We learned how to develop a real-time command line application using Node.js. If you are developing framework OR working with any boilerplate generator application then command line utilities are very useful to you.</p><h3>Further reading:</h3><p><strong><a href=\"https://www.npmjs.com/package/commander\">Commander</a></strong> – NPM module designed for simple command line application solution.</p><div class=\"td-a-rec td-a-rec-id-content_bottom\"><div><p>* We hate spam a lot and there is no question that will do that ever.</p></div></div>',1),(27,'Using FeathersJS as an open source alternative to Firebase â€” All about FeathersJS','https://medium.com/all-about-feathersjs/using-feathersjs-as-an-open-source-alternative-to-firebase-b5d93c200cee',0,0,'<h3 class=\"graf--h3 graf--first\">Using FeathersJS as an open source alternative to Firebase</h3><p class=\"graf--p\"><a href=\"https://www.firebase.com/\" class=\"markup--anchor markup--p-anchor\">Firebase</a> is a popular backend-as-a-service platform to build mobile or web applications that connect to a RESTful or real-time API. It makes it easy to get an application up and running quickly but if you are looking for more hosting options (Firebase plans can get pricy and you are locked into the platform) or are curious about full stack development in NodeJS, <a href=\"http://feathersjs.com/\" class=\"markup--anchor markup--p-anchor\">Feathers</a> is an open source alternative that provides very similar functionality, but giving you much more control.</p><p class=\"graf--p\">In this post I’d like to show how you can very simply create your own self-hosted clone of the real-time <a href=\"http://hackeryou.github.io/SlackerYou/\" class=\"markup--anchor markup--p-anchor\">SlackerYou</a> (jQuery + Firebase) chat demo that <a href=\"http://wesbos.com/\" class=\"markup--anchor markup--p-anchor\">Wes</a> created for <a href=\"http://hackeryou.com/\" class=\"markup--anchor markup--p-anchor\">HackerYou</a> but with <a href=\"http://feathersjs.com/\" class=\"markup--anchor markup--p-anchor\">Feathers</a> instead of Firebase.</p>The SlackerYou jQuery + Firebase chat<p class=\"graf--p\">To get started, let’s clone the <a href=\"https://github.com/HackerYou/SlackerYou\" class=\"markup--anchor markup--p-anchor\">SlackerYou repository</a> (or your own fork ) which we will then modify to use our own server.</p><blockquote class=\"graf--blockquote\">git clone <a href=\"mailto:git@github.com\" class=\"markup--anchor markup--blockquote-anchor\">git@github.com</a>:HackerYou/SlackerYou.git<br />cd SlackerYou</blockquote><p class=\"graf--p\">If you want to try out everything right away, clone the <a href=\"https://github.com/feathersjs/SlackerYou\" class=\"markup--anchor markup--p-anchor\">Feathers SlackerYou</a> by running:</p><blockquote class=\"graf--blockquote\">git clone <a href=\"mailto:git@github.com\" class=\"markup--anchor markup--blockquote-anchor\">git@github.com</a>:feathersjs/SlackerYou.git<br />cd SlackerYou<br />npm install<br />npm start</blockquote><p class=\"graf--p\">The server will be available at <a href=\"http://localhost:3030\" class=\"markup--anchor markup--p-anchor\">http://localhost:3030</a></p><h4 class=\"graf--h4\">Creating the Feathers server</h4><p class=\"graf--p\">Creating a real-time server using Feathers is actually really quick. With <a href=\"https://nodejs.org/en/\" class=\"markup--anchor markup--p-anchor\">NodeJS</a> installed, in the repository folder we can run</p><blockquote class=\"graf--blockquote\">npm install feathers body-parser feathers-nedb</blockquote><p class=\"graf--p\">which will install the <a href=\"https://github.com/feathersjs/feathers\" class=\"markup--anchor markup--p-anchor\">feathers</a>, <a href=\"https://www.npmjs.com/package/body-parser\" class=\"markup--anchor markup--p-anchor\">body-parser</a> (to make it possible to send JSON to the REST API) and <a href=\"https://github.com/feathersjs/feathers-nedb\" class=\"markup--anchor markup--p-anchor\">feathers-nedb</a> packages. <a href=\"https://github.com/louischatriot/nedb\" class=\"markup--anchor markup--p-anchor\">NEDB</a> is a standalone file-system database so we won’t have to set up our own database server. Putting it all together looks like this:</p><p class=\"graf--p\">We create a new Feathers application, enable connecting via REST and websockets (Socket.io in this case) and add the JSON body parser. Then we register a messages service that uses an NEDB database called <em class=\"markup--em markup--p-em\">messages</em>. Last we add a static webserver for the current folder (so that we can host the HTML and JavaScript files) and run everything on port 3030. We can start the server with</p><blockquote class=\"graf--blockquote\">node app.js</blockquote><p class=\"graf--p\">Our messages endpoint is now running at <a href=\"http://localhost:3030/messages\" class=\"markup--anchor markup--p-anchor\">http://localhost:3030/messages</a> (but currently just showing an empty array).</p><h4 class=\"graf--h4\">Changing the jQuery client</h4><p class=\"graf--p\">The SlackerYou client is still talking to Firebase so now it is time to update the HTML and jQuery parts to use our own newly created Feathers server instead. The <strong class=\"markup--strong markup--p-strong\">only</strong> thing to change in <em class=\"markup--em markup--p-em\">index.html</em> is to load Socket.io and feathers-client instead of the Firebase JavaScript:</p><p class=\"graf--p\">Next we can update <em class=\"markup--em markup--p-em\">scripts.js</em>. We can re-use almost all of the existing code including the <em class=\"markup--em markup--p-em\">createMessage</em> method that adds a new message with jQuery. What will change is everything that is specific to Firebase. Instead, we first create a Socket.io connection to our server, then create a Feathers client and connect to the <em class=\"markup--em markup--p-em\">messages</em> service:</p><pre class=\"graf--pre\"><em class=\"markup--em markup--pre-em\">// Create a Socket.io connection</em><br /><strong class=\"markup--strong markup--pre-strong\">var</strong> socket = io();<br /><em class=\"markup--em markup--pre-em\">// Create a Feathers client that uses that connection</em><br /><strong class=\"markup--strong markup--pre-strong\">var</strong> app = feathers().configure(feathers.socketio(socket));<br /><em class=\"markup--em markup--pre-em\">// Get the messages service</em><br /><strong class=\"markup--strong markup--pre-strong\">var</strong> messages = app.service(\'messages\');</pre><p class=\"graf--p\">In the form submit handler we just need to replace</p><pre class=\"graf--pre\">messagesRef.push(message);</pre><p class=\"graf--p\">With</p><pre class=\"graf--pre\">messages.create(message);</pre><p class=\"graf--p\">Then we can replace the bottom of the script with the Feathers way of listening to new messages and getting all messages when a user loads the page:</p><pre class=\"graf--pre\"><em class=\"markup--em markup--pre-em\">// Add new messages</em><br />messages.on(\'created\', addMessage);</pre><pre class=\"graf--pre\"><em class=\"markup--em markup--pre-em\">// Find all existing messages and add them to the page</em><br />messages.find(<strong class=\"markup--strong markup--pre-strong\">function</strong>(error, messages) {<br /><strong class=\"markup--strong markup--pre-strong\">if</strong>(messages) {<br />messages.forEach(addMessage);<br />}<br />});</pre><p class=\"graf--p\">Everything put together looks like this:</p><p class=\"graf--p\">That’s it! If you now go to <a href=\"http://localhost:3030/\" class=\"markup--anchor markup--p-anchor\">http://localhost:3030/</a> you have a working real-time chat that stores its messages in a file database (you can see all messages at <a href=\"http://localhost:3030/messages\" class=\"markup--anchor markup--p-anchor\">http://localhost:3030/messages</a>).</p><h4 class=\"graf--h4\">Adding timestamps</h4><p class=\"graf--p\">Now it is time for some polishing. Right now, when a new user comes to the page our chat will always load all messages in no particular order (although it might be by the time of creation it is not guaranteed). The best way to get all messages in the correct order is to add a <em class=\"markup--em markup--p-em\">created_at</em> timestamp to each message on the server and have <em class=\"markup--em markup--p-em\">find</em> always sort the messages by that timestamp (oldest first). Then we also want to only return the last (newest) 10 messages. This is where <a href=\"https://github.com/feathersjs/feathers-hooks\" class=\"markup--anchor markup--p-anchor\">feathers-hooks</a> come in. Hooks allow us to hook into a service before or after a service method runs (but before it gets sent to the client). To get hooks we run</p><blockquote class=\"graf--blockquote\">npm install feathers-hooks</blockquote><p class=\"graf--p\">And then we can register hooks, like adding a <em class=\"markup--em markup--p-em\">created_at</em> timestamp to a message <em class=\"markup--em markup--p-em\">before</em> it gets sent to the database like this:</p><pre class=\"graf--pre\">app.service(\'messages\'). before({<strong class=\"markup--strong markup--pre-strong\"><br /></strong>create: <strong class=\"markup--strong markup--pre-strong\">function</strong>(hook, next) {<br />// Add the created_at date<br />hook.data.created_at = new Date();<br />// Go to the next step (save to database)<br />next();<br />}<br />});</pre><p class=\"graf--p\">The complete server now looks like this:</p><p class=\"graf--p\">To see the effect of the hooks, let’s delete the old database and restart the server:</p><blockquote class=\"graf--blockquote\">rm -rf db-data<br />node app.js</blockquote><p class=\"graf--p\">Now we have our own self-hosted real-time chat that only loads the newest 10 messages.</p><h4 class=\"graf--h4\">Conclusion</h4><p class=\"graf--p graf--last\">Firebase is great to get up and running quickly without a backend but if you are looking for an open source option with more freedom or are curious about full stack development with NodeJS, Feathers is a great way to get very similar functionality with only a few lines of code. If you want to learn more, for example how to use other databases like MongoDB, write your own services or how to use other JavaScript frameworks to build real-time applications, head over to the <a href=\"http://feathersjs.com/\" class=\"markup--anchor markup--p-anchor\">Feathers website</a> and <a href=\"http://feathersjs.com/learn/#\" class=\"markup--anchor markup--p-anchor\">guides</a>.</p>',1),(28,'Top 15 Facebook Open Source Projects You Must Know and use for your Makerâ€™s projects','http://www.open-electronics.org/top-15-facebook-open-source-projects-you-must-know-and-use-for-your-makers-projects/',0,0,'\n\n			\n			<p><img class=\"alignnone\" src=\"http://www.open-electronics.org/wp-content/uploads/2015/09/facebook-open-source-1024x5211.jpg\" alt=\"\" width=\"749\" height=\"381\" /></p>\n<p>Facebook contribution to open source can be largely categorized into Mobile, Web, Back-end and Infrastructure. Top open source projects made in these categories are:</p>\n<h2>Mobile:</h2>\n<h3>Buck</h3>\n<p><a href=\"https://github.com/facebook/buck\">Buck</a> is a high performance build system for Android that encourages creation of small, reusable modules consisting of code and resources. Because Android applications are predominantly written in Java, Buck also functions as a Java build system.</p>\n<h3 class=\"title\">Rebound</h3>\n<div class=\"subtitle\"><a href=\"http://github.com/facebook/rebound\">Rebound</a> is a Java library that models spring dynamics. Rebound spring models can be used to create animations that feel natural by introducing real world physics to your application. Rebound uses the same spring constants as <a href=\"http://facebook.github.io/origami\">Origami</a> making it easy to convert Origami interaction mockups directly into your Android application.</div>\n<h3 class=\"subtitle\">Origami</h3>\n<p><a href=\"http://facebook.github.io/origami\">Origami</a> is a tool for designing modern user interfaces. Quickly put together a prototype, run it on your iPhone or iPad, iterate on it, and export code snippets your engineers can use.</p>\n<h3>Stetho</h3>\n<p><a href=\"http://facebook.github.io/stetho/\">Stetho</a> is an all new debugging platform for Android. It enables the powerful Chrome Developer Tools which is implemented using a client/server protocol which the Stetho software provides for your application. Once your application is integrated, simply navigate to <code>chrome://inspect</code> and click “Inspect” to get started!</p>\n<h3>Infer</h3>\n<p>Facebook <a href=\"https://github.com/facebook/infer\">Infer</a> is a static analysis tool to detect bugs in Android and iOS apps before they ship. If you give Infer some Objective-C, Java, or C code, it produces a list of potential bugs. Anyone can use Infer to intercept critical bugs before they have shipped to people’s phones, and help prevent crashes or poor performance. Infer targets critical bugs such as null pointer exceptions, resource leaks and memory leaks.</p>\n<h2>Web:</h2>\n<h3>React Js</h3>\n<p><a href=\"https://facebook.github.io/react/\">React Js</a> is a declarative, efficient, and flexible JavaScript library for building user interfaces. Lots of people use React as the V in MVC. Since React makes no assumptions about the rest of your technology stack, it’s easy to try it out on a small feature in an existing project.</p>\n<h3>HHVM</h3>\n<p><a href=\"https://github.com/facebook/hhvm\">HHVM</a> (Hip Hop VM) is an open-source virtual machine designed for executing programs written in Hack and PHP. HHVM uses a just-in-time (JIT) compilation approach to achieve superior performance while maintaining the development flexibility that PHP provides. It has realized more than a 5x increase in throughput for Facebook compared with Zend PHP 5.2. HipHop is most commonly run as a standalone server, replacing both Apache and modphp, but it can also run standalone scripts from the command line.</p>\n<h3>Flux</h3>\n<p><a href=\"https://github.com/facebook/flux\">Flux</a> is the application architecture that Facebook uses for building client-side web applications. It complements React’s composable view components by utilizing a unidirectional data flow. It’s more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code.</p>\n<h3>Flow</h3>\n<p><a href=\"https://github.com/facebook/flow\">Flow</a> adds static typing to JavaScript to improve developer productivity and code quality. The goal of Flow is to find errors in JavaScript code with little programmer effort. Flow relies heavily on <strong>type inference</strong> to find type errors even when the program has not been annotated – it precisely tracks the types of variables as they flow through the program.</p>\n<h3>fb-flo</h3>\n<p><a href=\"https://github.com/facebook/fb-flo\">fb-flo</a> is a Chrome extension that lets you modify running apps without reloading. It’s easy to integrate with your build system, dev environment, and can be used with your favorite editor.</p>\n<h3 class=\"entry-title public\">Jest</h3>\n<p><a href=\"https://github.com/facebook/jest\">Jest</a> is unit testing framework for JavaScript. It  is built on top of the Jasmine test framework, using familiar expect(value).toBe(other) assertions. It automatically mocks CommonJS modules returned by require(), making most existing code testable.</p>\n<h3>Nuclide</h3>\n<p><a href=\"https://github.com/facebook/nuclide\">Nuclide</a> is a suite of packages for <a href=\"https://atom.io/\">Atom</a> to provide IDE-like functionality for a variety of programming languages and technologies. It is designed to provide a unified developer experience for engineers throughout the company — whether they work on native iOS apps, on React and React Native code, or on Hack to run on our HHVM web servers.</p>\n<h2>Back-end:</h2>\n<h3>Presto</h3>\n<p><a href=\"https://github.com/facebook/presto\">Presto</a> is an open source distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes. Facebook uses Presto for interactive queries against several internal data stores, including their 300PB data warehouse. Over 1,000 Facebook employees use Presto daily to run more than 30,000 queries that in total scan over a petabyte each per day.</p>\n<h3>Osquery</h3>\n<p><a href=\"https://github.com/facebook/osquery\">Osquery</a> gives you a SQL interface to try out new queries and explore your operating system. With the power of a complete SQL language and dozens of useful tables built-in, osquery is an invaluable tool when performing incident response, diagnosing system operations problem, or troubleshooting a performance issue. Deploy a security tool that also enables developers and administrators.</p>\n<h3>RocksDB</h3>\n<p><a href=\"https://github.com/facebook/rocksdb\">RocksDB</a> builds on LevelDB to be scalable to run on servers with many CPU cores, to efficiently use fast storage, to support IO-bound, in-memory and write-once workloads, and to be flexible to allow for innovation.</p>\n<p>Not only softwares, but Facebook has also built various custom hardware competent to meet its ever increasing scale under <a href=\"http://opencompute.org/\">Open Compute Project</a>.  Unlike Google and Microsoft, Facebook not only contributes its research work but also the end implementation to open source community. Let us know in comments your views towards Facebook’s open source contribution.</p>\n<p>Source: <em><a href=\"http://fossbytes.com/top-15-facebook-open-source-projects-you-must-know/\">Top 15 Facebook Open Source Projects You Must Know</a></em></p>\n\n			\n		',1),(29,'aerofs/gockerize','https://github.com/aerofs/gockerize',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Build static golang binaries and package them into minimal docker containers</p>\n\n<p><a href=\"https://github.com/aerofs/gockerize/blob/master/gockerize.png\"><img src=\"https://github.com/aerofs/gockerize/raw/master/gockerize.png\" alt=\"gockerize\" width=\"500\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/aerofs/gockerize#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>BSD 3-Clause, see accompanying LICENSE file.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/aerofs/gockerize#requirements\"><span class=\"octicon octicon-link\"></span></a>Requirements</h2>\n\n<ul><li>bash</li>\n<li>docker 1.5+</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/aerofs/gockerize#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<pre><code>gockerize &lt;image&gt; &lt;package&gt; [&lt;source&gt; [&lt;mapping&gt; [&lt;Dockerfile&gt;]]]\n</code></pre>\n\n<p>The default use case is to call the script from the root directory of\nthe package being built, with any dependencies vendored in and the\nDockerfile at the root of the package.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/aerofs/gockerize#arguments\"><span class=\"octicon octicon-link\"></span></a>Arguments</h4>\n\n<p>The <code>image</code> argument determines the name of the resulting Docker image.</p>\n\n<p>The <code>package</code> argument is the fully qualified name of the package being\nbuilt.</p>\n\n<p>The <code>source</code> argument can be used to easily include non-vendored dependencies\ninto the build context. For instance, given the following hierarchy:</p>\n\n<pre><code>src/\n    acme.com/\n        common/\n        foo/\n</code></pre>\n\n<p>Where <code>foo</code> is the service to be built and <code>common</code> is a package it depends on.</p>\n\n<p>The following command can be used, from <code>src/acme.com/foo</code> :</p>\n\n<pre><code>gockerize foo acme.com/foo ..\n</code></pre>\n\n<p>This will result in all of <code>src/acme.com</code> being used as build context, under\n<code>$GOPATH/src/acme.com</code>.</p>\n\n<p>Similarly, <code>mapping</code> can be changed from its default value to accommodate\nsource layouts that deviate from golang\'s conventions and <code>Dockerfile</code> can\npoint to a Dockerfile at a non-default location, including outside of the\nDocker build context.</p>\n\n<p>The contents of the <code>GOARGS</code> environment variable are passed to the go build\ncommand inside the container. Among other things, this makes it easy to use\ncustom build tags.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/aerofs/gockerize#dockerfile\"><span class=\"octicon octicon-link\"></span></a>Dockerfile</h4>\n\n<p>A typical Dockerfile may look like:</p>\n\n<pre><code>FROM scratch\nADD bin/foo /foo\nEXPOSE 12345\nENTRYPOINT [ \"/foo\" ]\n</code></pre>\n\n<p>The Docker image is built within a temporary container and its build\ncontext is limited to the content of <code>GOPATH</code> on that container, hence\nthe reference to <code>bin/foo</code> which is the location of the binary produced\nby compiling package <code>acme.com/foo</code>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/aerofs/gockerize#dependency-resolution\"><span class=\"octicon octicon-link\"></span></a>Dependency resolution</h2>\n\n<p>For ease of use, golang-builder uses <code>go get</code> to automatically fetch remote\ndependencies from github and other public repositories supported by default.</p>\n\n<p>Relying on this feature should be avoided in favor of vendored dependencies.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/aerofs/gockerize#patching-standard-lib\"><span class=\"octicon octicon-link\"></span></a>Patching standard lib</h2>\n\n<p>Fully static builds allow easy patching of the standard library. golang-builder\nleverages that by automatically applying patches found in the <code>patches</code> subdir\nof the package being built.</p>\n\n<p>Care should be taken that the patches cleanly apply against the version of go\nused in the container (1.4.2 at this time).</p>\n',1),(30,'Docker Hub','https://hub.docker.com/_/nats/',1,0,'\n<p>For more information about this image and its history, please see <a href=\"https://github.com/docker-library/official-images/blob/master/library/nats\">the relevant manifest file (<code>library/nats</code>)</a>. This image is updated via pull requests to <a href=\"https://github.com/docker-library/official-images\">the <code>docker-library/official-images</code> GitHub repo</a>.</p>\n<p>For detailed information about the virtual/transfer sizes and individual layers of each of the above supported tags, please see <a href=\"https://github.com/docker-library/docs/blob/master/nats/tag-details.md\">the <code>nats/tag-details.md</code> file</a> in <a href=\"https://github.com/docker-library/docs\">the <code>docker-library/docs</code> GitHub repo</a>.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/docker-library/docs/master/nats/logo.png\" alt=\"logo\" /></p>\n<p><code>nats</code> is a high performance server for the NATS Messaging System.</p>\n\n<pre><code class=\"lang-bash\"><span class=\"hljs-preprocessor\"># Run a NATS server</span>\n<span class=\"hljs-preprocessor\"># Each server exposes multiple ports</span>\n<span class=\"hljs-preprocessor\"># <span class=\"hljs-number\">4222</span> is for clients.</span>\n<span class=\"hljs-preprocessor\"># <span class=\"hljs-number\">8222</span> is an HTTP management port for information reporting.</span>\n<span class=\"hljs-preprocessor\"># <span class=\"hljs-number\">6222</span> is a routing port for clustering.</span>\n<span class=\"hljs-preprocessor\"># use -p or -P as needed.</span>\n\n$ docker run -d --name nats-main nats\n[INF] Starting gnatsd version <span class=\"hljs-number\">0.6</span><span class=\"hljs-number\">.6</span>\n[INF] Starting http monitor on port <span class=\"hljs-number\">8222</span>\n[INF] Listening <span class=\"hljs-keyword\">for</span> route connections on <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">6222</span>\n[INF] Listening <span class=\"hljs-keyword\">for</span> client connections on <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">4222</span>\n[INF] gnatsd is ready\n\n...\n\n<span class=\"hljs-preprocessor\"># To run a second server and cluster them together..</span>\n$ docker run -d --name=nats-<span class=\"hljs-number\">2</span> --link nats-main nats --routes=nats-route:\n\n<span class=\"hljs-preprocessor\"># If you want to verify the routes are connected, try</span>\n$ docker run -d --name=nats-<span class=\"hljs-number\">2</span> --link nats-main nats --routes=nats-route:\n[INF] Starting gnatsd version <span class=\"hljs-number\">0.6</span><span class=\"hljs-number\">.6</span>\n[INF] Starting http monitor on port <span class=\"hljs-number\">8222</span>\n[INF] Listening <span class=\"hljs-keyword\">for</span> route connections on :<span class=\"hljs-number\">6222</span>\n[INF] Listening <span class=\"hljs-keyword\">for</span> client connections on <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">4222</span>\n[INF] gnatsd is ready\n[DBG] Trying to connect to route on nats-main:<span class=\"hljs-number\">6222</span>\n[DBG] <span class=\"hljs-number\">172.17</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.52</span>:<span class=\"hljs-number\">6222</span> - rid:<span class=\"hljs-number\">1</span> - Route connection created\n[DBG] <span class=\"hljs-number\">172.17</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.52</span>:<span class=\"hljs-number\">6222</span> - rid:<span class=\"hljs-number\">1</span> - Route connect msg sent\n[DBG] <span class=\"hljs-number\">172.17</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.52</span>:<span class=\"hljs-number\">6222</span> - rid:<span class=\"hljs-number\">1</span> - Registering remote route <span class=\"hljs-string\">\"ee35d227433a738c729f9422a59667bb\"</span>\n[DBG] <span class=\"hljs-number\">172.17</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.52</span>:<span class=\"hljs-number\">6222</span> - rid:<span class=\"hljs-number\">1</span> - Route sent local subscriptions\n</code></pre>\n<p>The server will load the configuration file below. Any command line flags can override these values.</p>\n<h2>Default Configuration File</h2>\n<pre><code class=\"lang-bash\"># Client port of 4222 on all interfaces\nport: 4222\n\n# HTTP monitoring port\nmonitor_port: 8222\n\n# This is for clustering multiple servers together.\ncluster {\n\n  # Route connections to be received on any interface on port 6222\n  port: 6222\n\n  # Routes are protected, so need to <span class=\"hljs-operator\"><span class=\"hljs-keyword\">use</span> them <span class=\"hljs-keyword\">with</span> \n  # <span class=\"hljs-keyword\">e</span>.<span class=\"hljs-keyword\">g</span>. \n  authorization {\n    <span class=\"hljs-keyword\">user</span>: ruser\n    <span class=\"hljs-keyword\">password</span>: T0pS3cr3t\n    <span class=\"hljs-keyword\">timeout</span>: <span class=\"hljs-number\">0.75</span>\n  }\n\n  # Routes <span class=\"hljs-keyword\">are</span> actively solicited <span class=\"hljs-keyword\">and</span> connected <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">from</span> this <span class=\"hljs-keyword\">server</span>.\n  # This Docker image has <span class=\"hljs-keyword\">none</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">default</span>, but you can pass a\n  # flag <span class=\"hljs-keyword\">to</span> the gnatsd docker image <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">create</span> one <span class=\"hljs-keyword\">to</span> an existing <span class=\"hljs-keyword\">server</span>.\n  routes = []\n}</span>\n</code></pre>\n<h2>Commandline Options</h2>\n<pre><code class=\"lang-bash\">Server Options:\n    -<span class=\"ruby\">a, --addr <span class=\"hljs-constant\">HOST</span>                  <span class=\"hljs-constant\">Bind</span> to <span class=\"hljs-constant\">HOST</span> address (<span class=\"hljs-symbol\">default:</span> <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>)\n</span>    -<span class=\"ruby\">p, --port <span class=\"hljs-constant\">PORT</span>                  <span class=\"hljs-constant\">Use</span> <span class=\"hljs-constant\">PORT</span> <span class=\"hljs-keyword\">for</span> clients (<span class=\"hljs-symbol\">default:</span> <span class=\"hljs-number\">4222</span>)\n</span>    -<span class=\"ruby\"><span class=\"hljs-constant\">P</span>, --pid <span class=\"hljs-constant\">FILE</span>                   <span class=\"hljs-constant\">File</span> to store <span class=\"hljs-constant\">PID</span>\n</span>    -<span class=\"ruby\">m, --http_port <span class=\"hljs-constant\">PORT</span>             <span class=\"hljs-constant\">Use</span> <span class=\"hljs-constant\">HTTP</span> <span class=\"hljs-constant\">PORT</span> <span class=\"hljs-keyword\">for</span> monitoring\n</span>    -<span class=\"ruby\">c, --config <span class=\"hljs-constant\">FILE</span>                <span class=\"hljs-constant\">Configuration</span> <span class=\"hljs-constant\">File</span>\n</span>\nLogging Options:\n    -<span class=\"ruby\">l, --log <span class=\"hljs-constant\">FILE</span>                   <span class=\"hljs-constant\">File</span> to redirect log output\n</span>    -<span class=\"ruby\"><span class=\"hljs-constant\">T</span>, --logtime                    <span class=\"hljs-constant\">Timestamp</span> log entries (<span class=\"hljs-symbol\">default:</span> <span class=\"hljs-keyword\">true</span>)\n</span>    -<span class=\"ruby\">s, --syslog                     <span class=\"hljs-constant\">Enable</span> syslog as log method.\n</span>    -<span class=\"ruby\">r, --remote_syslog              <span class=\"hljs-constant\">Syslog</span> server addr (<span class=\"hljs-symbol\">udp:</span>/<span class=\"hljs-regexp\">/localhost:514).\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\">D, --debug                      Enable debugging output\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\">V, --trace                      Trace the raw protocol\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\">DV                              Debug and Trace\n</span></span>\nAuthorization Options:\n        -<span class=\"ruby\"><span class=\"hljs-regexp\">-user user                  User required for connections\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\">-pass password              Password required for connections\n</span></span>\nCluster Options:\n        -<span class=\"ruby\"><span class=\"hljs-regexp\">-routes [rurl-1, rurl-2]    Routes to solicit and connect\n</span></span>\nCommon Options:\n    -<span class=\"ruby\"><span class=\"hljs-regexp\">h, --help                       Show this message\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\">v, --version                    Show version</span></span>\n</code></pre>\n\n<p>View <a href=\"https://github.com/nats-io/gnatsd/blob/master/LICENSE\">license information</a> for the software contained in this image.</p>\n\n<p>This image is officially supported on Docker version 1.8.2.</p>\n<p>Support for older versions (down to 1.0) is provided on a best-effort basis.</p>\n\n<h2>Documentation</h2>\n<p>Documentation for this image is stored in the <a href=\"https://github.com/docker-library/docs/tree/master/nats\"><code>nats/</code> directory</a> of the <a href=\"https://github.com/docker-library/docs\"><code>docker-library/docs</code> GitHub repo</a>. Be sure to familiarize yourself with the <a href=\"https://github.com/docker-library/docs/blob/master/README.md\">repository\'s <code>README.md</code> file</a> before attempting a pull request.</p>\n<h2>Issues</h2>\n<p>If you have any problems with or questions about this image, please contact us through a <a href=\"https://github.com/docker-library/nats/issues\">GitHub issue</a>.</p>\n<p>You can also reach many of the official image maintainers via the <code>#docker-library</code> IRC channel on <a href=\"https://freenode.net\">Freenode</a>.</p>\n<h2>Contributing</h2>\n<p>You are invited to contribute new features, fixes, or updates, large or small; we are always thrilled to receive pull requests, and do our best to process them as fast as we can.</p>\n<p>Before you start to code, we recommend discussing your plans through a <a href=\"https://github.com/docker-library/nats/issues\">GitHub issue</a>, especially for more ambitious contributions. This gives other contributors a chance to point you in the right direction, give you feedback on your design, and help you find out if someone else is working on the same thing.</p>\n',1),(31,'Setting up nginx with Docker','http://www.integralist.co.uk/posts/docker-nginx.html',1,0,'\n\n\n\n<h2>Introduction</h2>\n\n<p>I wanted to learn about how to use the popular proxy server <a href=\"http://nginx.org\">nginx</a> for handling \"reverse proxy\" duties on a Ruby project I was working on. So I decided the easiest thing to do in order to play around with nginx (as I work on a MacBook Pro laptop), would be to install and run it (and my back-end application) within <a href=\"http://docker.com/\">Docker</a> containers.</p>\n\n<blockquote>\n<p>Note: I did some preliminary Googling and sadly didn\'t find anything straightforward that demonstrated this relatively simple requirement (i.e. run nginx and have it proxy requests to a back-end service). So I decided it would be best to write about it myself</p>\n</blockquote>\n\n<p>Now if you\'re unsure of what a reverse proxy does, it simply takes <em>in</em> traffic (i.e. users requesting a website domain) and proxies those requests onto another service (the service could be external to the host server or it could be running on the same box - which is the scenario I have - and typically the service being proxied to isn\'t publically available to the internet).</p>\n\n<p>The nginx server has many features, such as load balancing, caching and serving static files (to name but a few). When used as a reverse proxy it can also be useful for handling SSL termination (i.e. SSL is an expensive operation and so the proxy server will authenticate the provided credentials - allowing access - but terminate the SSL requirement at that point before directing traffic onto the other protected service).</p>\n\n<p>In this post we\'ll be primarily focusing on using nginx as a reverse proxy, although I also demonstrate how to serve static files. But the focus will be reverse proxying and not demonstrating other features within nginx. I\'ll also not be explaining Docker and how it works (I\'m assuming you\'ve used Docker in some form or another previously).</p>\n\n<p>Lastly, I\'m going to take you on the same journey I took while setting this all up; so rather than work through a perfect scenario you\'ll get to see some of the errors I stumbled across along the way. If you\'d prefer to just read the (small amount of) code then the next section is for you.</p>\n\n\n\n<h2>Just give me the code</h2>\n\n<p><a href=\"https://github.com/Integralist/Docker-Examples/tree/master/Nginx\">github.com/integralist/docker-examples/nginx</a></p>\n\n\n\n<h2>Setting up nginx</h2>\n\n<p>So to begin with, I went to <a href=\"https://hub.docker.com/\">Docker Hub</a> and found the <a href=\"https://registry.hub.docker.com/_/nginx/\">official nginx Docker image</a>. It suggested the easiest thing to do to get started was to download and run the image; so knowing not a lot about nginx, that\'s exactly what I did:</p>\n\n<pre><code class=\"language-bash\">docker run --name nginx-container -P -d nginx\n</code></pre>\n\n<blockquote>\n<p>Note: you can use the <code>-p &lt;host_port&gt;:&lt;container_port&gt;</code> option instead of <code>-P</code> if you\'re not going to be running multiple nginx instances (again, for the moment I was just following the recommendation from Docker Hub)</p>\n</blockquote>\n\n<p>Once the container was running I attempted to <code>curl</code> the endpoint (something like <code>http://localhost:&lt;port_number_container_mapped_to&gt;</code>) but I found this didn\'t work; and by that I mean it didn\'t return a recognisable nginx home page as was suggested it would. This was the first trip-up I made.</p>\n\n<p>The reason this didn\'t work is because (for me) using <a href=\"http://boot2docker.io/\">Boot2Docker</a> on a Mac - rather than being on a pure Linux machine capable of running Docker natively - means that localhost is the Mac and not the Docker host (which is the Boot2Docker VM). So to resolve that issue I needed to curl the ip of the Boot2Docker host. To get the ip simply run <code>boot2docker ip</code>.</p>\n\n<p>So your curl command (depending on what OS you\'re running on) should look something like:</p>\n\n<pre><code class=\"language-bash\">curl http://$(&lt;docker_host_ip&gt;:&lt;port_number_container_mapped_to&gt;\n</code></pre>\n\n<p>For me this was:</p>\n\n<pre><code class=\"language-bash\">curl http://$(boot2docker ip):32781\n</code></pre>\n\n<p>Executing this resulted in the following output:</p>\n\n<pre><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h3>Mounting our own static files</h3>\n\n<p>Now at this point having a standard nginx welcome page isn\'t very useful. We want to add our own nginx configuration and to have it serve up our own static files. To achieve that with Docker we\'ll need to use <a href=\"https://docs.docker.com/userguide/dockervolumes/\">Volumes</a>.</p>\n\n<p>But before I show the command for that, I need to show you the project directory I have right now:</p>\n\n<pre><code class=\"language-ini\">.\n├── Dockerfile\n├── Gemfile\n├── Gemfile.lock\n├── app.rb\n├── nginx.conf\n└── html\n    └── test.html\n</code></pre>\n\n<p>This isn\'t the final directory structure mind you, but it\'s what I initially started out with. You\'ll see as we move on I had to add a little more structure to the project. But for now, this is what we\'ve got.</p>\n\n<p>I\'ll show the contents of these files now, most of them are really small anyway:</p>\n\n<h4>Dockerfile</h4>\n\n<pre><code class=\"language-bash\">FROM ruby:2.1-onbuild\nCMD [\"ruby\", \"app.rb\"]\n</code></pre>\n\n<h4>Gemfile</h4>\n\n<pre><code class=\"language-ruby\">source \"http://rubygems.org/\"\n\ngem \"sinatra\"\n</code></pre>\n\n<h4>app.rb</h4>\n\n<pre><code class=\"language-ruby\">require \"sinatra\"\n\nset :bind, \"0.0.0.0\"\n\nget \"/\" do\n  \"Hello World\"\nend\n\nget \"/foo\" do\n  \"Foo!\"\nend\n</code></pre>\n\n<h4>nginx.conf</h4>\n\n<pre><code class=\"language-apacheconf\">user nobody nogroup;\nworker_processes auto;          # auto-detect number of logical CPU cores\n\nevents {\n  worker_connections 512;       # set the max number of simultaneous connections (per worker process)\n}\n\nhttp {\n  server {\n    listen *:80;                # Listen for incoming connections from any interface on port 80\n    server_name \"\";             # Don\'t worry if \"Host\" HTTP Header is empty or not set\n    root /usr/share/nginx/html; # serve static files from here\n  }\n}\n</code></pre>\n\n<h4>html/test.html</h4>\n\n<pre><code class=\"language-markup\">&lt;h1&gt;Hey there!&lt;/h1&gt;\n&lt;p&gt;Here is my test HTML file&lt;/p&gt;\n</code></pre>\n\n<h4>Mounting the files</h4>\n\n<p>Let\'s see the syntax structure of the command I was looking to run:</p>\n\n<pre><code class=\"language-bash\">docker run --name nginx-container \\\n  -v /path/to/static/files/on/host:/usr/share/nginx/html:ro \\\n  -v /path/to/conf/on/host:/etc/nginx/nginx.conf:ro \\\n  -P -d nginx\n</code></pre>\n\n<p>In the above example, you can see I\'m using the <code>-v</code> flag to mount my static files directory to <code>/usr/share/nginx/html</code> as well as mounting my own nginx configuration file into the container at <code>/etc/nginx/nginx.conf</code>.</p>\n\n<blockquote>\n<p>Note: <code>:ro</code> sets the volumes to be \"read only\"</p>\n</blockquote>\n\n<p>So for me, a working example looked like the following:</p>\n\n<pre><code class=\"language-bash\">docker run --name nginx-container \\\n  -v $(pwd)/html:/usr/share/nginx/html:ro \\\n  -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:ro \\\n  -P -d nginx\n</code></pre>\n\n<blockquote>\n<p>Note: the host path has to be absolute, so tweak it as necessary (I used <code>pwd</code> to make the command shorter)</p>\n</blockquote>\n\n<p>If you want to debug things, then you can run the container not as a daemon (<code>-d</code>) but with an interactive tty (<code>-it</code>) and drop yourself inside of a bash shell:</p>\n\n<pre><code class=\"language-bash\">docker run -it --name nginx-container \\\n  -v $(pwd)/html:/usr/share/nginx/html:ro \\\n  -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:ro \\\n  -P nginx bash\n</code></pre>\n\n<p>Once the container is running and the <code>nginx.conf</code> and static files are mounted as a Volume, you can verify that nginx is serving the static files by trying to hit localhost on port <code>80</code> (as mentioned earlier: if you\'re on a Mac using Boot2Docker like me, then you\'ll need to access localhost via the Boot2Docker VM ip address instead):</p>\n\n<blockquote>\n<p>Note: don\'t forget the port number I\'ve used will be different for you (get yours from <code>docker ps</code>)</p>\n</blockquote>\n\n<pre><code class=\"language-bash\">curl http://$(boot2docker ip):32781\n</code></pre>\n\n<p>This will display a <code>403</code> error page, which is to be expected because we\'ve not mounted a folder that has a <code>index.html</code> file. Our mounted directory only contained a <code>test.html</code> file, so if we try to access that instead, then we\'ll see it\'ll be loaded without a problem:</p>\n\n<pre><code class=\"language-bash\">curl http://$(boot2docker ip):32781/test.html\n</code></pre>\n\n<p>If you were following along at home then you would have noticed that this returns the following HTML content:</p>\n\n<pre><code class=\"language-markup\">&lt;h1&gt;Hey there!&lt;/h1&gt;\n&lt;p&gt;Here is my test HTML file&lt;/p&gt;\n</code></pre>\n\n<p>If we try the exact same command again, but this time add the <code>-I</code> flag (e.g. <code>curl -I &lt;url&gt;</code> - this returns just the HTTP headers), we\'ll see that this is indeed being served by nginx:</p>\n\n<pre><code class=\"language-bash\">HTTP/1.1 200 OK\nServer: nginx/1.9.3\nDate: Sat, 01 Aug 2015 17:27:01 GMT\nContent-Type: text/html\nContent-Length: 53\nLast-Modified: Sat, 01 Aug 2015 14:05:59 GMT\nConnection: keep-alive\nETag: \"55bcd247-35\"\nAccept-Ranges: bytes\n</code></pre>\n\n<h4>Dynamically updating containers without restart</h4>\n\n<p>Because we\'ve mounted the <code>html</code> directory as a volume, we can now create an <code>index.html</code> file for nginx to use as the root page to load when you request <code>http://$(boot2docker ip):32781/</code>; and in doing this it\'ll take effect immediately without requiring us to restart the container. Once we\'ve created the file inside the <code>html</code> directory, we can then make the relevant curl request to see nginx serve up the html file.</p>\n\n<p>Just so you know, the <code>index.html</code> file I created looks like this:</p>\n\n<pre><code class=\"language-markup\">&lt;h1&gt;Welcome&lt;/h1&gt;\n&lt;p&gt;This is my home page&lt;/p&gt;\n</code></pre>\n\n\n\n<h2>Setting up the Ruby application</h2>\n\n<p>The Ruby application we\'ll be creating is a super simple <a href=\"http://sinatrarb.com/\">Sinatra</a> web application with two routes defined:</p>\n\n<ol><li><code>/</code></li>\n<li><code>/foo</code></li>\n</ol><p>One of the first things you need to do is to make sure you run <code>bundle install</code> so you have a <code>Gemfile.lock</code> generated, otherwise the base Ruby image will complain. The reason it complains is because the base Docker image is using an <code>onbuild</code> version of the Ruby image, and what this means is that it follows a \"convention over configuration\" model where by it assumes you have three files available (<code>app.rb</code>, <code>Gemfile</code> and <code>Gemfile.lock</code>) for it to automatically copy into the built Docker image for you.</p>\n\n<p>Once you\'ve done that, you can now build the Docker image:</p>\n\n<pre><code class=\"language-bash\">docker build -t my-ruby-app .\n</code></pre>\n\n<p>Once the image is built, you can run your Ruby application like so:</p>\n\n<pre><code class=\"language-bash\">docker run --name ruby-app -p 4567:4567 -d my-ruby-app\n</code></pre>\n\n<p>You\'ll notice we\'re not using a dynamic port range because the Sinatra app we\'ve created explicitly binds to port <code>4567</code> and so I\'m exposing that specific port to the Boot2Docker VM. We can then access this application directly with the following curl command:</p>\n\n<pre><code class=\"language-bash\">curl http://$(boot2docker ip):4567/\n\n# Results in...\n\nHello World%\n</code></pre>\n\n<p>Now if we want to see the HTTP Headers coming back:</p>\n\n<pre><code class=\"language-bash\">curl -I http://$(boot2docker ip):4567/\n\n# Results in...\n\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=utf-8\nContent-Length: 11\nX-Xss-Protection: 1; mode=block\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nServer: WEBrick/1.3.1 (Ruby/2.1.6/2015-04-13)\nDate: Sun, 02 Aug 2015 09:20:47 GMT\nConnection: Keep-Alive\n</code></pre>\n\n\n\n<h2>Linking your app to nginx</h2>\n\n<p>OK, so we\'re nearing the finish line now. We\'ve got a working nginx container and a working Ruby container. We need to gel them together by making a request and having nginx proxy the request on to the Ruby container (if the request was aimed at that) or have nginx serve a static file if the request was relevant to that.</p>\n\n<p>To get this to work with Docker, we have two options:</p>\n\n<ol><li>Host file</li>\n<li>ENV variables</li>\n</ol><p>Both options require a custom Dockerfile to be used for setting up nginx and both have about the same amount of complexity in different ways.</p>\n\n<p>But to understand these options, we need to be sure we understand what Docker does when linking containers. So to clarify, when linking a container (Ruby) with another container (nginx), Docker adds the ip of the linked container (Ruby) into the other container (nginx). It does this by updating the container\'s <code>/etc/hosts</code> file with a new entry that looks something like the following (note the last line of the file output):</p>\n\n<pre><code class=\"language-bash\">host.conf  hostname   hosts\nroot@a4a3bde52f8e:/# cat /etc/hosts\n172.17.0.19     a4a3bde52f8e\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.18     app 3435f6926e83 ruby-app\n</code></pre>\n\n<p>You can test this yourself by using the following command, which interactively jumps into a running version of the nginx container:</p>\n\n<pre><code class=\"language-bash\">docker run --rm -it \\\n  --name nginx-container \\\n  --link ruby-app:app \\\n  -P nginx bash\n</code></pre>\n\n<p>Once inside the container, run <code>cat /etc/hosts</code> to get the above output (or something similar to it at least - your ip will likely be different to mine).</p>\n\n<p>While you\'re still inside the temporarily running nginx container, we can clarify the second option which is the ENV variable setup Docker handles. When linking a container, Docker will add details of the linked container as environment variables (as well as adding a new entry to the <code>/etc/hosts</code> file). So while you\'re still inside the running nginx container, execute the following command:</p>\n\n<pre><code class=\"language-bash\">env | grep APP | sort\n</code></pre>\n\n<blockquote>\n<p>Note: we\'re <code>grep</code>ing for the phrase <code>APP</code> as that\'s what we specified in our <code>docker run</code> command (i.e. <code>--link ruby-app:app</code>)</p>\n</blockquote>\n\n<p>We should now see the following output (or something very similar):</p>\n\n<pre><code class=\"language-bash\">APP_ENV_BUNDLER_VERSION=1.10.6\nAPP_ENV_BUNDLE_APP_CONFIG=/usr/local/bundle\nAPP_ENV_GEM_HOME=/usr/local/bundle\nAPP_ENV_RUBY_DOWNLOAD_SHA256=1e1362ae7427c91fa53dc9c05aee4ee200e2d7d8970a891c5bd76bee28d28be4\nAPP_ENV_RUBY_MAJOR=2.1\nAPP_ENV_RUBY_VERSION=2.1.6\nAPP_NAME=/nginx-container/app\nAPP_PORT=tcp://172.17.0.18:4567\nAPP_PORT_4567_TCP=tcp://172.17.0.18:4567\nAPP_PORT_4567_TCP_ADDR=172.17.0.18\nAPP_PORT_4567_TCP_PORT=4567\nAPP_PORT_4567_TCP_PROTO=tcp\n</code></pre>\n\n<p>Notice that Docker has capitalised the link name (e.g. <code>app</code> is now <code>APP</code>) and has used the convention of <code>&lt;LINK_NAME&gt;_&lt;ENV_VAR_FROM_LINKED_CONTAINER&gt;</code>.</p>\n\n<h3>Choosing an option?</h3>\n\n<p>With this knowledge secured in our minds, we can now understand what we need to do for each option (i.e. host file vs environment variable). For the host file option we can manipulate our <code>nginx.conf</code> file manually (before building the image) to use a named <code>upstream</code> server that references the <code>--link</code> name we provided, as part of the <code>docker run</code> command.</p>\n\n<p>Where as with the environment variables option we would need to manipulate the <code>nginx.conf</code> file <em>dynamically</em> at run time. So within our <code>Dockerfile</code> we would add a shell script, which would be executed by the <code>CMD</code> statement within the <code>Dockerfile</code>. This shell script would run and use something like the <code>sed</code> command to replace a placeholder reference within our <code>nginx.conf</code> file (likely we\'d use the <code>APP_PORT</code> environment variable and do some regular expression parsing for the ip address). Once the placeholder had been replaced with the appropriate container ip, we would manually start nginx using <code>service nginx start</code>.</p>\n\n<p>Out of the two options, I think I\'ll go with the \"host file\" one. So let\'s run through the steps...</p>\n\n<pre><code class=\"language-ini\">.\n├── docker-app\n│   ├── Dockerfile\n│   ├── Gemfile\n│   ├── Gemfile.lock\n│   └── app.rb\n├── docker-nginx\n│   ├── Dockerfile\n│   └── nginx.conf\n└── html\n    ├── index.html\n    └── test.html\n</code></pre>\n\n<ul><li>Build the images (we\'ll see what these look like in a moment) for the Ruby app and nginx</li>\n<li>Run the Ruby app container</li>\n<li>Run the nginx container and link it to the running Ruby container</li>\n<li>Verify everything works</li>\n</ul><p>Other than moving existing files (related to the building of the Ruby Docker image) inside of a <code>docker-app</code> folder, the two biggest changes are the addition of a new <code>Dockerfile</code> inside the <code>docker-nginx</code> folder and the following updated <code>nginx.conf</code> file:</p>\n\n<pre><code class=\"language-apacheconf\">user nobody nogroup;\nworker_processes auto;          # auto-detect number of logical CPU cores\n\nevents {\n  worker_connections 512;       # set the max number of simultaneous connections (per worker process)\n}\n\nhttp {\n  upstream app {\n    server app:4567;            # app is automatically defined inside /etc/hosts by Docker\n  }\n\n  server {\n    listen *:80;                # Listen for incoming connections from any interface on port 80\n    server_name \"\";             # Don\'t worry if \"Host\" HTTP Header is empty or not set\n    root /usr/share/nginx/html; # serve static files from here\n\n    location /app/ {            # catch any requests that start with /app/\n      proxy_pass http://app;    # proxy requests onto our app server (i.e. a different container)\n    }\n  }\n}\n</code></pre>\n\n<p>The aim of the new configuration is to accept any requests to <code>/app/</code> and proxy them onto our application server. So if we were to request <code>/app/</code> we\'d want nginx to proxy it to the Sinatra <code>/</code> route; and if we were to request <code>/app/foo</code> then we\'d expect nginx to proxy it to the Sinatra <code>/foo</code> route.</p>\n\n<p>The new <code>Dockerfile</code> we\'ve created inside the <code>docker-nginx</code> folder will have the following content:</p>\n\n<pre><code class=\"language-bash\">FROM ubuntu\n\n# install nginx\nRUN apt-get update &amp;&amp; apt-get install -y nginx\nRUN rm -rf /etc/nginx/sites-enabled/default\n\n# forward request and error logs to docker log collector\nRUN ln -sf /dev/stdout /var/log/nginx/access.log\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\n\nEXPOSE 80 443\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>\n\n<blockquote>\n<p>Note: some bright chap by the name of <a href=\"https://twitter.com/stevenjack85\">Steven Jack</a> suggested setting <code>ENTRYPOINT</code> in the Dockerfile to <code>nginx</code> and have the two options (<code>-g</code> and <code>daemon off</code>) left in the <code>CMD</code>. Doing this means if you wanted to pass other options to nginx you wouldn\'t have to duplicate all of your CMD</p>\n</blockquote>\n\n<p>So from the root of our project directory, let\'s complete the next step and build our new Docker images (technically you don\'t have to rebuild the Ruby application as there has been no changes to the <code>Dockerfile</code>, but just for completion I\'ll demonstrate the build command again).</p>\n\n<p>First let\'s rebuild the Ruby Docker image:</p>\n\n<pre><code class=\"language-bash\">docker build -t my-ruby-app ./docker-app\n</code></pre>\n\n<p>Now let\'s build our new custom nginx Docker image:</p>\n\n<pre><code class=\"language-bash\">docker build -t my-nginx ./docker-nginx\n</code></pre>\n\n<p>The third step in our list was to run the Ruby container:</p>\n\n<pre><code class=\"language-bash\">docker run --name ruby-app -p 4567:4567 -d my-ruby-app\n</code></pre>\n\n<p>Let\'s also verify that it\'s running (the following command should return back \"Hello World\"):</p>\n\n<pre><code class=\"language-bash\">curl http://$(boot2docker ip):4567/\n</code></pre>\n\n<p>Now onto our fourth step, which was to run our custom nginx container whilst linking it to our already running ruby container:</p>\n\n<pre><code class=\"language-bash\">docker run --name nginx-container \\\n  -v $(pwd)/html:/usr/share/nginx/html:ro \\\n  -v $(pwd)/docker-nginx/nginx.conf:/etc/nginx/nginx.conf:ro \\\n  --link ruby-app:app \\\n  -P -d my-nginx\n</code></pre>\n\n<p>The final step is to verify that everything worked as expected (i.e. we should be able to make a request to our Boot2Docker VM\'s localhost and have it proxy the request through to our Ruby application server). But let\'s do it in stages, so the first stage is to hit the root of localhost:</p>\n\n<blockquote>\n<p>Note: in the following example you\'ll need to get the dynamically allocated port number for the nginx container. You can do this by running <code>docker ps</code> and extracting the port number from the output provided</p>\n</blockquote>\n\n<pre><code class=\"language-bash\">curl http://$(boot2docker ip):&lt;dynamic_port_number&gt;\n</code></pre>\n\n<p>This <code>curl</code> request will result in the following output to stdout...</p>\n\n<pre><code class=\"language-markup\">&lt;h1&gt;Welcome&lt;/h1&gt;\n&lt;p&gt;This is my home page&lt;/p&gt;\n</code></pre>\n\n<p>The second stage is to hit the <code>/test.html</code> endpoint for localhost and make sure nginx is still serving back our static files correctly:</p>\n\n<pre><code class=\"language-bash\">curl http://$(boot2docker ip):&lt;dynamic_port_number&gt;/test.html\n</code></pre>\n\n<p>This <code>curl</code> request will result in the following output to stdout...</p>\n\n<pre><code class=\"language-markup\">&lt;h1&gt;Hey there!&lt;/h1&gt;\n&lt;p&gt;Here is my test HTML file&lt;/p&gt;\n</code></pre>\n\n<p>Looking good. OK the third and final stage is to now try to hit the <code>/app/</code> endpoint for localhost and make sure nginx is proxying the request through to our Ruby backend application server (and also sending the result back again!):</p>\n\n<pre><code class=\"language-bash\">curl http://$(boot2docker ip):32785/app/\n</code></pre>\n\n<p>This <code>curl</code> request will result in the following output to stdout...</p>\n\n<pre><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style type=\"text/css\"&gt;\n  body { text-align:center;font-family:helvetica,arial;font-size:22px;\n    color:#888;margin:20px}\n  #c {margin:0 auto;width:500px;text-align:left}\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h2&gt;Sinatra doesn&amp;rsquo;t know this ditty.&lt;/h2&gt;\n  &lt;img src=\'http://app/__sinatra__/404.png\'&gt;\n  &lt;div id=\"c\"&gt;\n    Try this:\n    &lt;pre&gt;get &amp;#x27;&amp;#x2F;app&amp;#x2F;&amp;#x27; do\n  &amp;quot;Hello World&amp;quot;\nend\n&lt;/pre&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Ewww? OK so we can see nginx <em>is</em> proxying through to our Ruby application server, but the server doesn\'t seem to know how to handle the request <code>/app/</code>? Maybe it\'s something to do with the extra forward slash on the end of the request? If I change it to <code>/app</code> instead we\'ll see what that does:</p>\n\n<pre><code class=\"language-bash\">curl http://$(boot2docker ip):32785/app\n</code></pre>\n\n<p>This <code>curl</code> request will result in the following output to stdout...</p>\n\n<pre><code class=\"language-markup\">&lt;html&gt;\n&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;\n&lt;body bgcolor=\"white\"&gt;\n&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;\n&lt;hr&gt;&lt;center&gt;nginx/1.4.6 (Ubuntu)&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Hmm, ok that\'s not much better. So what\'s going on here? Well, we\'re seeing the <code>301</code> redirect because Sinatra is redirecting anything without a forward slash. So ok, but what about the \"Sinatra doesn\'t know this ditty\" error?</p>\n\n<h3>The final solution</h3>\n\n<p>The cause of the problem is because we\'ve misconfigured nginx. The solution to the issue requires us to know a <em>very</em> subtle detail about how nginx location blocks work, which is:</p>\n\n<p>If you don\'t put a forward slash <code>/</code> at the end of the upstream name, then you\'ll find nginx passes the request exactly as it was made (i.e. <code>/app/</code>) through to the backend service, as apposed to passing it as just <code>/</code>.</p>\n\n<p>For example, we had set the proxy to pass to <code>http://app;</code> which meant a request to <code>/app/</code> was being passed to Sinatra as <code>/app/</code> and a request to <code>/app/foo</code> was being passed on to Sinatra as <code>/app/foo</code>; and as you can see from the Sinatra application code, we have no such routes defined.</p>\n\n<p>What we should do instead is change the proxy pass value to <code>http://app/;</code> (notice the extra forward slash just before the closing semi-colon).</p>\n\n<p>By putting a <code>/</code> after the upstream name means it acts more like nginx\'s <code>alias</code> directive which remaps requests for you. If I kept it as <code>http://app;</code>, then I would\'ve needed to have added an <code>/app/</code> route to my Ruby application. But the additional forward slash remaps <code>/app/</code> so it\'s passed to Sinatra as <code>/</code> (we have a route for that) as well as remapping <code>/app/foo</code> to just <code>/foo</code> (we have a route for that too!).</p>\n\n<p>So with this in mind you\'ll see in GitHub I\'ve updated the <code>nginx.conf</code> to look like the following (with additional comments to clarify the behaviour):</p>\n\n<pre><code class=\"language-apacheconf\">user nobody nogroup;\nworker_processes auto;          # auto-detect number of logical CPU cores\n\nevents {\n  worker_connections 512;       # set the max number of simultaneous connections (per worker process)\n}\n\nhttp {\n  upstream app {\n    server app:4567;            # app is automatically defined inside /etc/hosts by Docker\n  }\n\n  server {\n    listen *:80;                # Listen for incoming connections from any interface on port 80\n    server_name \"\";             # Don\'t worry if \"Host\" HTTP Header is empty or not set\n    root /usr/share/nginx/html; # serve static files from here\n\n    location /app/ {            # catch any requests that start with /app/\n      proxy_pass http://app/;   # proxy requests onto our app server (i.e. a different container)\n                                #\n                                # NOTE: If you don\'t put a forward slash / at the end of the upstream name\n                                #       then you\'ll find nginx passes the request as /app/ rather than just /\n                                #       Putting / after the upstream name means it acts more like the alias directive\n                                #       If I kept it as http://app; then I would\'ve needed to add a /app/ route to Sinatra\n    }\n  }\n}\n</code></pre>\n\n<p>With this change made, we can now make the following requests successfully:</p>\n\n<ul><li><code>curl http://$(boot2docker ip):&lt;dynamic_port_number&gt;/app/</code></li>\n<li><code>curl http://$(boot2docker ip):&lt;dynamic_port_number&gt;/app/foo</code></li>\n</ul><h2>Conclusion</h2>\n\n<p>This was a bit of a whirlwind run through to getting a simple nginx reverse proxy set-up with Docker. You can obviously swap out the Ruby backend with whatever technology stack is more appropriate (e.g. Node, Clojure, Scala... whatever).</p>\n\n<p>From here, if you\'re new to nginx (like I am) you can start to experiment with the many other features nginx provides. Enjoy!</p>\n\n            <hr /><h2>Links</h2>\n            ',1),(32,'Get CoreOS Logs into ELK in 5 Minutes','http://blog.sematext.com/2015/06/22/5-minute-recipe-centralize-logging-in-coreos/',1,0,'\n\n					\n\n					<div class=\"post-info\">\n						<p>\n							<span class=\"time\">June 22, 2015</span>\n															<span class=\"author\">by <a href=\"http://blog.sematext.com/author/seti123/\" title=\"Posts by Stefan Thies\">Stefan Thies</a></span>\n																						\n																				</p>\n					</div>\n\n					<p><em><strong>Update:</strong> We have recently optimized the SPM setup on CoreOS and integrated a logging gateway to Logsene into the SPM Agent for Docker.  </em>Please follow the setup instructions in <a href=\"http://blog.sematext.com/2015/07/21/coreos-clusters-centralized-log-management-and-monitoring/\">Centralized Log Management and Monitoring for CoreOS Clusters</a></p>\n<hr /><p><a href=\"https://coreos.com/using-coreos/\">CoreOS Linux</a> is the operating system for “Super Massive Deployments”.  We wanted to see how easily we can get CoreOS logs into Elasticsearch / <a href=\"http://sematext.com/logsene/\">ELK</a>-powered centralized logging service. Here’s how to <strong>get your CoreOS logs into ELK in about 5 minutes</strong>, give or take.  If you’re familiar with CoreOS and Logsene, you can grab CoreOS/Logsene config files <a href=\"https://github.com/sematext/spm-agent-docker/tree/master/coreos\">from Github</a>. Here’s an example Kibana Dashboard you can get in the end:</p>\n<div class=\"wp-caption alignnone\"><a href=\"https://sematext.files.wordpress.com/2015/06/coreos-kibana-dashboard.png\"><img class=\"size-large wp-image-5144\" src=\"https://sematext.files.wordpress.com/2015/06/coreos-kibana-dashboard.png?w=630&amp;h=457\" alt=\"CoreOS Kibana Dashboard\" width=\"630\" height=\"457\" /></a><p class=\"wp-caption-text\">CoreOS Kibana Dashboard</p></div>\n<p>CoreOS is based on the following:</p>\n<ul><li><strong>Docker</strong> and <strong>rkt</strong> for containers</li>\n<li><strong>systemd</strong> for startup scripts, and restarting services automatically</li>\n<li><strong>etcd</strong> as centralized configuration key/value store</li>\n<li><strong>fleetd</strong> to distribute services over all machines in the cluster. Yum.</li>\n<li><strong>journald</strong> to manage logs. Another yum.</li>\n</ul><p>Amazingly, with CoreOS managing a cluster feels a lot like managing a single machine!  We’ve come a long way since ENIAC!</p>\n<p>There’s one thing people notice when working with CoreOS – the repetitive inspection of local or remote logs using “<strong>journalctl -M machine-N -f | grep something</strong>“.  It’s great to have easy access to logs from all machines in the cluster, but … grep? Really? Could this be done better?  Of course, it’s 2015!</p>\n<p>Here is a quick example that shows how to centralize logging with CoreOS with just a few commands. The idea is to forward the output of “<strong>journalctl -o short</strong>” to <a href=\"http://sematext.com/logsene/\">Logsene</a>‘s <a href=\"https://sematext.atlassian.net/wiki/display/PUBLOGSENE/Syslog\">Syslog Receiver</a> and take advantage of all its functionality – log searching, alerting, anomaly detection, <a href=\"http://blog.sematext.com/2015/06/11/1-click-elk-stack-hosted-kibana-4/\">integrated Kibana</a>, even correlation of logs with <a href=\"http://blog.sematext.com/2015/06/09/docker-monitoring-support/\">Docker performance metrics</a> — hey, why not, it’s all available right there, so we may as well make use of it all!  Let’s get started!</p>\n<p><strong>Preparation: </strong></p>\n<p>1) Get a list of IP addresses of your CoreOS machines</p>\n<pre>fleetctl list-machines\r\n</pre>\n<p>2) Create a new Logsene App (<a href=\"https://apps.sematext.com/logsene-reports/registerApplication.do\">here</a>)<br />3) Change the Logsene App Settings, and authorize the CoreOS host IP Addresses from step 1) (<a href=\"https://sematext.atlassian.net/wiki/display/PUBLOGSENE/Authorizing+IPs+for+Syslog\">here’s how/where</a>)</p>\n<p>Congratulations – you just made it possible for your CoreOS machines to ship their logs to your new Logsene app!<br />Test it by running the following on any of your CoreOS machines:</p>\n<pre>journalctl -o short -f | ncat --ssl logsene-receiver-syslog.sematext.com 10514</pre>\n<p>…and check if the logs arrive in Logsene (<a href=\"https://apps.sematext.com/logsene-reports/mainPage.do\">here</a>).  If they don’t, yell at us <a href=\"http://twitter.com/sematext\">@sematext</a> – there’s nothing better than public shaming on Twitter to get us to fix things. <span class=\"wp-smiley wp-emoji wp-emoji-smile\" title=\":)\">:)</span></p>\n<p><strong>Create a fleet unit file called logsene.service</strong></p>\n<pre>[Unit]\r\nDescription=Logsene Log Forwarder\r\n\r\n[Service]\r\nRestart=always\r\nRestartSec=10s\r\nExecStartPre=/bin/sh -c \"if [ -n \\\"$(etcdctl get /sematext.com/logsene/`hostname`/lastlog)\\\" ]; then  echo \\\"Value Exists: /sematext.com/logsene/`hostname`/lastlog $(etcdctl get /sematext.com/logsene/`hostname`/lastlog)\\\"; else etcdctl set /sematext.com/logsene/`hostname`/lastlog\\\"`date +\\\"%Y-%%m-%d %%H:%M:%S\\\"`\\\"; true; fi\"\r\nExecStart=/bin/sh -c \"journalctl --since \\\"$(etcdctl get /sematext.com/logsene/`hostname`/lastlog)\\\" -o short -f | ncat --ssl logsene-receiver-syslog.sematext.com  10514\"\r\nExecStopPost=/bin/sh -c \"export D=\\\"`date +\\\"%Y-%%m-%%d %%H:%M:%S\\\"`\\\"; /bin/etcdctl set /sematext.com/logsene/$(hostname)/lastlog \\\"$D\\\"\"\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n\r\n[X-Fleet]\r\nGlobal=true\r\n</pre>\n<p><strong>Activate cluster-wide logging to Logsene with fleet</strong></p>\n<p>To start logging to Logsene from <strong><em>all</em></strong> machines activate logsene.service:</p>\n<pre>fleetctl load logsene.service\r\nfleetctl start logsene.service\r\n</pre>\n<p>There.  That’s all there is to it!  Hope this worked for you!</p>\n<p>At this point all your CoreOS logs should be going to <a href=\"http://sematext.com/logsene/\">Logsene</a>.  Now you have a <strong>central place to see all your CoreOS logs</strong>.  If you want to send your app logs to Logsene, you can do that, too — anything that can send logs via Syslog or to Elasticsearch can also <a href=\"https://sematext.atlassian.net/wiki/display/PUBLOGSENE/Sending+Events+to+Logsene\">ship logs to Logsene</a>. If you want some <a href=\"http://sematext.com/spm/integrations/docker-monitoring.html\">Docker containers &amp; host monitoring</a> to go with your CoreOS logs, just <a href=\"https://registry.hub.docker.com/u/sematext/spm-agent-docker/\">pull spm-agent-docker</a> from Docker Registry.  Enjoy!</p>\n<div class=\"sharedaddy sd-rating-enabled sd-like-enabled sd-sharing-enabled\"><div class=\"sd-block sd-rating\"><h3 class=\"sd-title\">Rate this:</h3></div><div class=\"sharedaddy sd-sharing-enabled\"><div class=\"robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing\"><h3 class=\"sd-title\">Share this:</h3></div></div><div class=\"sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded\"><h3 class=\"sd-title\">Like this:</h3><p><span class=\"button\"><span>Like</span></span> <span class=\"loading\">Loading...</span></p><span class=\"sd-text-color\"></span><a class=\"sd-link-color\"></a></div>\n<p>\n	</p><h3 class=\"jp-relatedposts-headline\"><em>Related</em></h3>\n</div>\n					\n					\n\n				',1),(33,'Automating Docker Logging: ElasticSearch, Logstash, Kibana, and Logspout','http://nathanleclaire.com/blog/2015/04/27/automating-docker-logging-elasticsearch-logstash-kibana-and-logspout/',1,0,'\n<p><img src=\"http://nathanleclaire.com/images/logstashcontainer.gif\" alt=\"logstashcontainer.gif\" /></p><p>You, too, could Logstash.</p>\n\n<p>Say that title five times fast! Seriously though, I wasn’t sure what else to\ncall this article so that people would actually find it.</p>\n<p>This article is a spiritual successor to <a href=\"http://evanhazlett.com/2014/11/Logging-with-ELK-and-Docker/\">Evan Hazlett’s article on running the\nELK stack in\nDocker</a> and\n<a href=\"https://clusterhq.com/blog/fig-flocker-multi-server-docker-apps/\">ClusterHQ’s article on doing it with Fig/Docker\nCompose and Flocker</a>.\nHuge shout out to them for being the giants whose shoulders I stand on. It is\nalso influenced by the recent <a href=\"http://research.google.com/pubs/pub43438.html\">Borg\npaper</a> which came out and\nmentions some of these tools in discussing having a “standard stack” for doing\nthe sorts of things that we are interested in here and more.</p>\n\n<p>Hopefully I don’t need to convince you of the value of keeping meticulous logs\nwhich are easily searchable. If I do, simply consider what happens when\nsomething goes wrong with your application and <em>nobody has a damn clue what\nhappened</em> - at the very least, the pointy haired bosses are upset, for some\nreason that has to do with giant piles of money or audits or something like\nthat.</p>\n<p>To that end, a lot of solutions have cropped up to help, including very lovely\ntechnologies such as <a href=\"http://Logstash.net/\">Logstash</a>. More on that in a\nsecond.</p>\n<p>Since most of us know that logging is critical, one of the issues which has\nbeen driving people batty with the increase of interest in Docker is, of\ncourse, how to handle logs in a Dockerized world.</p>\n<p>With Docker, one is suddenly forced to think of logging in a different way than\nthey otherwise might have. In a traditional Linux deployment, the model for\napplication or infrastructure logging is usually to log to files, which are\nfrequently but not always located inside of the <code>/var/log</code> directory. Indeed,\nI have “fond” memories of checking the PHP logs for a project inside of that\ndirectory when things would go blammo and our built-in application logging\nwasn’t telling me anything useful. I’m not really a fan of splitting the logs\nlike that (more moving parts == harder to debug), and it’s probably better\npractice to have a uniform way to access logs. Indeed, there is an interesting\narticle about this idea (a “Unified Logging Layer”)\n<a href=\"http://www.fluentd.org/blog/unified-logging-layer\">here</a> by Kiyoto Tamura of\n<a href=\"http://www.fluentd.org\">Fluentd</a>, which is a tool similar to Logstash.</p>\n<p>So what’s different about Docker? Well, suddenly, instead of having all of\nyour logs in files on one uniform place in the host system, they are scattered\nin a variety of different isolated environments in containers. Uh oh. Sounds\nlike the opposite of what we said we wanted above.</p>\n<p>The way that Docker historically has handled logging is through the <code>docker\nlogs</code> command - Docker captures the STDOUT and STDERR of each container\nprocess, stores it on disk, and the user can query it with <code>docker logs\n&lt;container&gt;</code>. This works pretty well for purposes like development where you\njust want to dump some output to a terminal screen and access it pretty\nquickly, but starts to become more troublesome when you want to consider using\nDocker for more complex environments, <em>or</em> you want to look at logs from more\ntraditionally-architected UNIX daemons which expect to run in the background\nand log to disk inside of containers. In the first case, the issues are mainly\naround:</p>\n<ol><li><em>discoverability</em> - if containers are meant to be ephemeral, trying to track\ndown the one with the logs that I want and parse them using something like\n<code>grep</code> doesn’t sound fun, and-</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Log_rotation\"><em>log rotation</em></a> - some services\nare particular chatty, or simply meant to live for a long time, so we need a\nway of cleaning up after a while and making sure that our disk does not fill up\nwith logs we are not using. Docker out of the box does not really support for\nthis as far as I’m aware.</li>\n</ol><p>I’m not going to talk about log rotation in this article, since that’s a whole\n‘nother can of worms, but I will describe how the stack outlined here is meant\nto ease the process of dealing with the first problem.</p>\n<p>As for keeping tabs on processes which log to disk inside of containers, there\nare a variety of solutions and hacks to make this work. One of my favorites,\nnot really outlined here but in my opinion quite useful, is to make the\ndirectory where the logs are written in the original container a\n<a href=\"http://docs.docker.com/userguide/dockervolumes/\">volume</a>, and have some\nadditional containers inherit that volume using <code>--volumes-from</code>. Then they\ncan follow the logs using <code>tail -f /var/log/foo/access.log</code> or something like\nthat. In my opinion this promotes a decent separation of concerns since your\ncontainer monitoring the log is different from the one writing to it, and\nadditionally (less substantially) you will actually bypass the union filesystem\nto do so (just like you would do with a database). No reason to track logs\n(state) in images, really.</p>\n<p>What to do about discoverability, then? Well, we will run an <a href=\"https://www.elastic.co/webinars/introduction-elk-stack\">ELK\nstack</a> inside of\nDocker, and use the <a href=\"https://github.com/gliderlabs/logspout\">logspout</a> tool to\nautomatically route container logs to Logstash. I really feel like this type\nof approach is the future in a lot of ways - if you’re going to be running\ncontainers, stopping them, deleting them and so on, you might as well hook into\nthose native events and make the lifecycle of a container accessible to track\nand monitor. Then your infrastructure can be reactive instead of needy for\nhuman intervention. Likewise for things like load balancing, service\ndiscovery, and so on, but that’s for another article entirely.</p>\n\n<p>Following the lead of Evan and the ClusterHQ folks, we are going to run:</p>\n<ol><li>ElasticSearch to index the log data collected and make it more easily\nqueryable</li>\n<li>Logstash to act as a remote syslog to collect the logs from the containers</li>\n<li>Logspout to actually send the container logs to Logstash</li>\n<li>Kibana as a nice front end for interacting with the collected data</li>\n<li>Cadvisor, a dashboard for monitoring container resource metrics, for kicks</li>\n</ol><p>If that sounds like an intimidating amount of stuff to run, try not to fret too\nmuch - we’re going to use <a href=\"https://github.com/docker/compose\">Docker Compose</a>\nto make starting up this stack and using it very straightforward.</p>\n<p>So, if you want to follow along at home, you can run the following commands to\nget started very quickly (you will need the latest versions of\n<a href=\"https://docs.docker.com/installation/\">Docker</a> and <a href=\"https://docs.docker.com/compose\">Docker\nCompose</a> installed):</p>\n<pre>\n$ git clone https://github.com/nathanleclaire/elk\n$ cd elk\n$ docker-compose -f docker-compose-quickstart.yml up\n</pre>\n<p>This will boot up the application with prebaked images from Docker Hub, and\nyour Kibana front-end will be accessible from port 80 of whatever host\n<code>DOCKER_HOST</code> points to.</p>\n<p>Personally, I like to kick up a DigitalOcean droplet or equivalent using\n<a href=\"https://github.com/docker/machine\">Docker Machine</a> when I’m doing this kind of\nwork because the bandwidth for image pulls tends to be much better than on your\nfriendly neighborhood WiFi connection. If you want to also do so, the commands\nto create your own server to run this on will be similar to this (and once\nagain, make sure you have the latest version of Machine installed):</p>\n<pre>\n$ export DIGITALOCEAN_ACCESS_TOKEN=MY_SECRET_API_TOKEN\n$ docker-machine create -d digitalocean \\\n    --digitalocean-size 4gb \\\n    --digitalocean-image docker \\\n    droplet\n....\n....\n....\nTo point your Docker client at it, run this in your shell: eval \"$(docker-machine env droplet)\"\n$ eval \"$(docker-machine env droplet)\"\n</pre>\n<p>I generally recommend a decently beefy server like outlined above because these\nprocesses tend to be a little memory-hungry. It will still work fine locally,\nbut the pulls may be a little slower unless you’re one of the lucky few with\nfiber.</p>\n<p>If you’re not a huge fan of running untrusted images (or you just want to\ntinker and modify the build yourself), no problem: the default\n<code>docker-compose.yml</code> in that repo is all based on <code>build</code> parameters, so you\ncan actually build the images yourself and</p>\n<pre>\n$ docker-compose build\n$ docker-compose up\n</pre>\n<p>When you boot the containers up, you’ll see output like this in your terminal:</p>\n<p><img src=\"http://nathanleclaire.com/images/figelk.png\" alt=\"figelk.png\" /></p>\n\n<p>You’ll probably see some errors about Logspout failing to connect to syslog,\nwhich is totally fine and normal. It’s just because the Logstash container\nhasn’t started yet. When it starts, the errors will cease.</p>\n<p>If you visit port 80 on the host where you’ve booted up the little group of\ncontainers, you should be greeted by a Kibana welcome screen:</p>\n<p><img src=\"http://nathanleclaire.com/images/kibanawelcome.png\" alt=\"kibanawelcome.png\" /></p>\n\n<p>Click on the little “Logstash dashboard” link (indicated by the arrow in the\npicture above), or simply go directly to\n<code>&lt;machineIp&gt;/#/dashboard/file/default.json</code>, and you will be taken to the\ndashboard for your new Docker logging infrastructure!</p>\n<p>Like I keep mentioning, the basic “stack” of containers for this was pretty\nmuch ripped straight out of Evan’s article, which is fantastic, but when I went\nto go implement things for myself there were a few issues I encountered:</p>\n<ol><li>Logspout was sending data in a slightly different format than the <code>grok</code>\nfilter for Logstash in Evan’s original article / image expected, so:</li>\n<li>There would be lots of grok parse failures in the logs (this just means\nLogstash tried to match the log message to a pattern it knows and couldn’t).\nBy itself this wouldn’t be <em>too</em> terrible, but:</li>\n<li>Because Logstash is a container monitored by Logspout, Logspout would\nforward all of <em>Logstash</em>’s logs to Logstash, causing it to spin into a\nfrenetic loop and eat up almost all of the CPU on the box (<code>docker stats</code>, a\nvery useful command which will report container resource usage statistics in\nrealtime, was partially how I caught and understood that this was happening).</li>\n</ol><p><img src=\"http://nathanleclaire.com/images/dockerstats.png\" alt=\"dockerstats.png\" /></p><p>This can\'t be good.</p>\n\n<p>So what’s a hacker to do? Hack, of course! I forked Evan’s original\nDockerfiles/repos for the images and modified things a bit. For starters, I\nthrew all of the containers into services in a <code>docker-compose.yml</code> file for\nquick reference (that prevented having to re-type all of the <code>docker run</code>\ncommands over and over again whenever I wanted to re-run the stack). I noticed\nin <a href=\"https://github.com/gliderlabs/logspout\">the Logspout Github repo</a>’s\ndocumentation that you could specify an environment variable on a container to\ndictate that its logs should <em>not</em> be forwarded by Logspout. So, I enabled it\non the Logstash container: an environment variable setting of <code>LOGSPOUT=ignore</code>\ndid the trick.</p>\n<p>It should also be noted, for anyone reading now, that the <code>gliderlabs/logspout</code>\nimage now expects the Docker socket to be mounted in at <code>/var/run/docker.sock</code>\n(the classic location), rather than at <code>/tmp/docker.sock</code> like it was before -\nthis caused me a few headaches before I realized what was going on as I was\ntrying to use the commands from Evan’s article verbatim. So take note!!</p>\n<p>Now my stack was no longer thrashing my CPU by getting into that infinite loop.\nBut I still had a challenge: all of those grok parse failures in the logs. The\nprovided example configuration file for Logstash did not jive well with what\nlogspout was emitting. So, in order to get a better grip on what was\nhappening, I did what anyone should do in this situation and read the source\ncode for Logspout.</p>\n<p>It wasn’t long before I stumbled across this <a href=\"https://github.com/gliderlabs/logspout/blob/master/adapters/syslog/syslog.go#L33\">block of code related to the\nsyslog\nadapter</a>:</p>\n<pre><code class=\"language-go\">func NewSyslogAdapter(route *router.Route) (router.LogAdapter, error) {\n        transport, found := router.AdapterTransports.Lookup(route.AdapterTransport(\"udp\"))\n        if !found {\n                return nil, errors.New(\"bad transport: \" + route.Adapter)\n        }\n        conn, err := transport.Dial(route.Address, route.Options)\n        if err != nil {\n                return nil, err\n        }\n\n        format := getopt(\"SYSLOG_FORMAT\", \"rfc5424\")\n        priority := getopt(\"SYSLOG_PRIORITY\", \"{{.Priority}}\")\n        hostname := getopt(\"SYSLOG_HOSTNAME\", \"{{.Container.Config.Hostname}}\")\n        pid := getopt(\"SYSLOG_PID\", \"{{.Container.State.Pid}}\")\n        tag := getopt(\"SYSLOG_TAG\", \"{{.ContainerName}}\"+route.Options[\"append_tag\"])\n        structuredData := getopt(\"SYSLOG_STRUCTURED_DATA\", \"\")\n        if route.Options[\"structured_data\"] != \"\" {\n                structuredData = route.Options[\"structured_data\"]\n        }\n        data := getopt(\"SYSLOG_DATA\", \"{{.Data}}\")\n\n        var tmplStr string\n        switch format {\n        case \"rfc5424\":\n                tmplStr = fmt.Sprintf(\"&lt;%s&gt;1 {{.Timestamp}} %s %s %s - [%s] %s\\n\",\n                        priority, hostname, tag, pid, structuredData, data)\n        case \"rfc3164\":\n                tmplStr = fmt.Sprintf(\"&lt;%s&gt;{{.Timestamp}} %s %s[%s]: %s\\n\",\n                        priority, hostname, tag, pid, data)\n        default:\n                return nil, errors.New(\"unsupported syslog format: \" + format)\n        }\n        tmpl, err := template.New(\"syslog\").Parse(tmplStr)\n        if err != nil {\n                return nil, err\n        }\n        return &amp;SyslogAdapter{\n                route: route,\n                conn:  conn,\n                tmpl:  tmpl,\n        }, nil\n}\n</code></pre>\n<p>Turns out that in my case Logspout forwards logs according to the <a href=\"https://tools.ietf.org/html/rfc5424\">syslog\nRFC5424 standard</a> (you can see how it\ndefaults to this in the code above). I spent some time fiddling with the very\ncool <a href=\"http://grokdebug.herokuapp.com/\">Logstash grok parse test app</a>, but then\nwondered if there were any existing resources available online which solved\nthis problem already. Some quick Googling lead me to <a href=\"http://scottfrederick.cfapps.io/blog/2014/02/20/cloud-foundry-and-Logstash\">this\narticle</a>,\nwhich brilliantly outlined pretty much the exact grok parse filter I needed. I\nchanged around just a few things (for instance, I changed “app” field to\n“containername”) but I was soon on my way - parsing Logspout logs into useful\ndata.</p>\n<p>My final Logstash configuration file looks like this:</p>\n<pre><code>input {\n  tcp {\n    port =&gt; 5000\n    type =&gt; syslog\n  }\n  udp {\n    port =&gt; 5000\n    type =&gt; syslog\n  }\n}\n\nfilter {\n  if [type] == \"syslog\" {\n    grok {\n      match =&gt; { \"message\" =&gt; \"%{SYSLOG5424PRI}%{NONNEGINT:ver} +(?:%{TIMESTAMP_ISO8601:ts}|-) +(?:%{HOSTNAME:containerid}|-) +(?:%{NOTSPACE:containername}|-) +(?:%{NOTSPACE:proc}|-) +(?:%{WORD:msgid}|-) +(?:%{SYSLOG5424SD:sd}|-|) +%{GREEDYDATA:msg}\" }\n    }\n    syslog_pri { }\n    date {\n      match =&gt; [ \"syslog_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\n    }\n    if !(\"_grokparsefailure\" in [tags]) {\n      mutate {\n        replace =&gt; [ \"@source_host\", \"%{syslog_hostname}\" ]\n        replace =&gt; [ \"@message\", \"%{syslog_message}\" ]\n      }\n    }\n    mutate {\n      remove_field =&gt; [ \"syslog_hostname\", \"syslog_message\", \"syslog_timestamp\" ]\n    }\n  }\n}\n\noutput {\n  elasticsearch { host =&gt; \"elasticsearch\" }\n  stdout { codec =&gt; rubydebug }\n}\n</code></pre>\n<p>There’s probably plenty of room for improvement, but I’ll have to get much\nbetter at Logstash first ;P</p>\n\n<p>Now I actually had logs in a meaningful format, which weren’t thrashing my CPU.\nIt’s great! Whenever I run a container on that host, the logs get indexed in\nElasticSearch and made available for querying from Kibana automatically! The\nLogstash filter takes care of parsing the raw syslog messages into more useful\nlabeled information. This includes, as noted above, the logs from the\ncontainers running this stack (except for Logstash - not sure how to handle\nthat one, or if I should even worry about it. Perhaps there’s an additional\nconfiguration option that would make it only print its own logs to STDOUT\ninstead of all of them). Imagine how useful this kind of automatic container\nlogging would be with something like\n<a href=\"http://rancher.com/rancher-os/\">RancherOS</a> as well, where <em>everything</em>\nincluding system services is running inside of Docker containers.</p>\n<p>You can toggle which fields are displayed in the logs messages to get a quick\nview of what’s being logged to your application. This makes it easier to get a\nfeel for what is happening in your containers in real time. Kibana has an\ninsane amount of power and configurability, allowing you to sort, search, and\nfilter by all of the different fields you have.</p>\n<p><img src=\"http://nathanleclaire.com/images/logfields.png\" alt=\"logfields.png\" /></p><p>Logs which are nice and easy to read and query!</p>\n\n<p>Try running a container against the ELK stack host to see the logs appear in\nKibana automatically (you probably will need to refresh your browser or click\nthe little “refresh” button in Kibana)</p>\n<pre>\n$ docker run -d --name number_spitter debian:jessie bash -c \'for i in {0..2000}; do echo $i; done\'\n</pre>\n<p>You can see now that most of the messages in the log are from the\n<code>number_spitter</code> container, which naturally spits out a bunch of numbers in\nthat little bash loop.</p>\n<p><img src=\"http://nathanleclaire.com/images/numberspitter.png\" alt=\"numberspitter.png\" /></p><p>Whaaaaat! The Number Spitter container is so chatty!</p>\n\n<p>There is a huge amount of amazing stuff you can do beyond this basic setup as\nwell. Naturally, there is the time series graph which can be used as a visual\nrepresentation of your containers’ activity over time, allowing you to zero\ndown on “hot spots” and quickly get a feel for what happened when, and why.</p>\n<p><img src=\"http://nathanleclaire.com/images/kibanagraph.png\" alt=\"kibanagraph.png\" /></p><p>What the hell happened here? I don\'t know, but I can find out.</p>\n\n<p>Displayed: actual incident with the ElasticSearch container.</p>\n<p>There is also a huge world of additional things which can and should be done\nwith Logstash in this setup - the configuration file discussed here is only the\nbeginning. Some containers have their own logging format which should be\nsubjected to additional parsing. For instance, you can see that the log\nmessages in the picture above showing the “table format” are for the Kibana\ncontainer itself and have their own timestamp, information about which IP\naddress accessed what file, the status code of the HTTP response, and so on.</p>\n<p>So, that is additional information which could definitely be parsed into a more\nuseful structured format, and it is the kind of thing which will need to be\ndone on a per-app basis. Likewise, you can probably imagine really cool\nhigher-order constructs like messages which bump their priority up if they\nmatch a certain pattern like if the application recovers from a panic, hits a\ncode path which cases a null pointer exception, fails to connect to the\ndatabase, and so on.</p>\n<p>Also, if Logspout also forwarded Docker events (I’m confused as to whether or\nnot it supports this, since I seem to recall seeing delete events for some\ncontainers show up but nothing else) and/or Docker daemon logs that would be\nSLICK! Perhaps there is an easier way to do this than hijacking Logspout to do\nit though.</p>\n<p>Additionally, Docker 1.6 has <a href=\"https://github.com/docker/docker/issues/7195\">log\ndrivers</a> that might be able to do\na similar thing in a slightly different way, so I’m curious to explore how this\nsetup might mutate when taking that into consideration. I don’t understand the\nLogspout internals well enough yet to know if you could do <code>--log-driver=none</code>\nand still have Logspout forward the logs, for instance. That would be pretty\ncool since then you would only have to track the data in ElasticSearch, not in\nES <em>and</em> <code>--log-driver=json</code> format.</p>\n<p>I’m not really sure if Logstash has support for eventing as well (e.g. send an\ne-mail or a text message to the on-call person if too many errors come in a\nlimited period of time), but that’s another potential use case (I’d be\nsurprised if something like this wasn’t already possible if not\nwell-supported). Come to think of it, this kind of thing is really screaming\nfor a Slack integration as well - e.g., notify the #sales channel every time we\nclose a no-touch subscription, which we know about because it got logged. But\nI digress.</p>\n<p>Speaking of digression, the demo app also includes an instance of\n<a href=\"https://github.com/GoogleComputeEngine/cadvisor\">cAdvisor</a>, a very useful tool\nto monitor the resource usage of your containers. You can access it at port\n8080 on the host you’re working with:</p>\n<p><img src=\"http://nathanleclaire.com/images/cadvisor.png\" alt=\"cadvisor.png\" /></p><p>Pretty graphs for your containers</p>\n\n\n<p>This isn’t the exact setup that you would neccessarily want to chuck into\nproduction immediately without modifying anything, although it definitely looks\na lot better than just “<code>docker run</code>, maybe check up on them later manually\nusing <code>docker logs</code>”. Some additional things to consider, in no particular order:</p>\n<ol><li>ElasticSearch replicas: persisting the data on multiple nodes for\nredundancy. Weird stuff will happen, nodes will go down, and ideally your\ninfrastructure should be set up to handle this kind of failure smoothly.\nLikewise, setting up a logspout instance on each node which forwards the host’s\nlogs to the “master” Logstash (and I’m not really certain of how redundancy\nshould work for this potential point of failure) is something you need to\ntackle if you have a multi-host setup.</li>\n<li><a href=\"https://twitter.com/jessitron/status/591188506350845952\">Backing up</a> and\nrotating the log data stored in ElasticSearch. To that end, I’m sure\n<a href=\"https://clusterhq.com\">ClusterHQ</a> (self-identified as the “container data\npeople”) would love to help you with this ;)</li>\n<li>Making sure that access to this interface is constrained at the network and\nuser level (the demo app leaves everything wide open, so if you run it on the\npublic Internet, expect <em>everyone</em> to be able to see it and mess with it)</li>\n<li>Adding <a href=\"http://docs.docker.com/reference/commandline/cli/#restart-policies\">container restart\npolicies</a>\nand\n<a href=\"http://rancher.com/comparing-monitoring-options-for-docker-deployments/\">monitoring</a>\nto ensure health and uptime of the services.</li>\n<li>Running the containers as lower-privileged users for better security</li>\n</ol><p>So, there are still many things to think about before using this for Very Real\nStuff, but I hope I have gotten some of the gears turning in your head about\nhow you might accomplish this for yourself if you are motivated. I feel like\nrunning this tooling is within the reach of even a very small startup nowadays,\nand I’m pretty excited that world-class tools like this are becoming more\naccessible. Ultimately it will be critical for teams now and in the future to\nbe capable of scaling to many machines per operator (SRE), and this is exactly\nthe type of tooling which makes that goal more approachable.</p>\n\n<p>Go forth and log my friends!! And let me know if you have ideas or\nsuggestions. I love to see follow-up articles on this sort of thing as well,\nso maybe you can be the next link in the chain.</p>\n<p>Until next time, stay sassy Internet!</p>\n',1),(34,'Flockport Labs - Extending layer 2 across container hosts','https://www.flockport.com/flockport-labs-extending-layer-2-across-container-hosts/',1,0,'<div>This post is to consolidate all our <a title=\"Flockport news and guides\" href=\"http://www.flockport.com/news\">LXC networking guides</a> and also explore some advanced container networking that have limited use but are interesting nonetheless hence the Flockport labs monicker. Experimental containers will now be posted under this label in our <a title=\"Flockport containers\" href=\"http://www.flockport.com/containers/\">container section. </a>\n<p>We previously looked at <a title=\"Flockport LXC Networking Guide\" href=\"http://www.flockport.com/lxc-networking-guide/\">basic LXC container networking; bridging, NAT, static IPs, public IPs</a> etc and then at <a title=\"Flockport LXC Advanced Networking Guide\" href=\"http://www.flockport.com/lxc-advanced-networking-guide/\">connecting LXC containers across hosts</a> with<a title=\"Connect LXC hosts with GRE tunnels\" href=\"http://www.flockport.com/connecting-lxc-hosts-with-gre-tunnels/\"> GRE tunnels</a> or secure<a title=\"LXC VPN TINC\" href=\"http://www.flockport.com/building-distributed-mesh-networks-of-lxc-hosts/\"> Tinc </a>or <a title=\"Flockport LXC IPSEC VPN Guide\" href=\"http://www.flockport.com/connect-lxc-hosts-and-containers-with-ipsec-vpns/\">IPSEC VPNs.</a></p>\n<p>We also covered <a title=\"LXC load balancing and failover\" href=\"http://www.flockport.com/load-balancing-and-failover-with-lxc-containers/\">basic failover and load balancing with Keepalived and Nginx </a>and <a title=\"LXC failover and loadbalancing with Keepalived and LVS\" href=\"http://www.flockport.com/load-balancing-and-failover-of-lxc-containers-part-ii/\">with LVS</a>. These networking guides apply to both LXC and VM networking in Linux in general with KVM or Xen for instance.</p>\n<p>This would be a good time to brush up. This guide explores a few advanced LXC networking possibilities that depend on a fair understanding of LXC and VM networking.</p>\n<p>We will cover extending layer 2 across remote LXC hosts with L2tpv3 or Ethernet over GRE in Part I and using LXC\'s support for multiple network interfaces to explore using a container as a router and touch on using VMs of software routers like Vyatta, Vyos or Pfsense to route your container or VM networks in Part II. We also cover <a title=\"Flockport labs - LXC and VXLAN\" href=\"https://www.flockport.com/flockport-labs-lxc-and-vxlan/\">using VXLAN separately</a>.</p>\n<p>Jump directly to <a href=\"https://www.flockport.com/flockport-labs-extending-layer-2-across-container-hosts/#extendingl2\">Extending Layer 2 across LXC hosts</a> if you are up to date on LXC networking.</p>\n<p><b>LXC Networking Refresh</b><br />The default LXC installation creates what is a known as a NAT bridge, this is a standalone software bridge that is created on the host (a software bridge is like a switch and is a basic functionality provided by the Linux kernel)</p>\n<p>Your containers or VMs connect to this bridge and get IPs in a private subnet. The routing is done by some iptables rules.</p>\n<p>The default lxcbr0 is this kind of a bridge. Bridging, DHCP and basic routing is configured by the lxc-net script. The virbr0 bridge used by Virt Manager for KVM is similar.</p>\n<p>Take a look at the /etc/init.d/lxc-net script (in/etc/init/lxc-net in Ubuntu) Here is what the script does in short:</p>\n<pre>1. brctl addbr lxcbr0 ----- adds bridge\r\n2. ifconfig lxcbr0 10.0.3.1 netmask 255.255.255.0 up ----- gives the bridge an IP and brings it up\r\n3. Starts a dnsmasq instance with a specified interface lxcbr0 with DHCP subnet range 10.0.3.2-10.0.3.254\r\n4. iptables -t nat -A POSTROUTING -s 10.0.3..0/24 ! -d 10.0.3.0/24 -j ACCEPT ----- Adds an iptables masquerading rule for lxcbr0 so containers can access the net</pre>\n<p>In the default lxcbr0 network, containers are isolated in a private 10.0.3.0/24 subnet within the host and can only be accessed by each other and the host.</p>\n<p>To access the containers from beyond the host you would need to use port forwarding ie forward port 80 of the host to port 80 of the container to for instance make a web server in the container available on the host and the network. You can of course forward \'n\' number of host ports to various containers but you cannot forward the same port to multiple containers.</p>\n<p>If you are in an internal network you can use basic routing  to connect containers across hosts with the IP route utility. A typical command to connect to let\'s say the 10.0.4.0/24 container network on a host with IP 192.168.1.10 from 192.168.1.5 would look like this.</p>\n<p><code>ip route add 10.0.4.0/24 via 192.168.1.10</code></p>\n<p>To make this kind of routing work you need to ensure containers subnets are different across hosts.</p>\n<p>You can set static IPs inside the container using /etc/network/interfaces file (depending on how your container OS configures networking) or via the dnsmasq instance configured for the lxcbr0 network on the host by associating specific containers to IPs in the /etc/lxc/dnsmasq file.</p>\n<p>In a NAT type network there is no way to associate a public IP to the container. If your host has a public IP you can associate that IP with a container with 1-1 NAT mapping or if you have 2 public IPs use basic IP aliasing to associate the public IP to a container via NAT mapping.</p>\n<p><b>LXC Host Bridge</b><br />That was the NAT bridge. You can also create a different network for LXC containers in which containers are on the same network as your host. This is a direct bridge creating by bridging your physical interface usually eth0 to a bridge say br0 which containers and VMs then connect to.</p>\n<p>If the host is 192.168.1.5 the containers will be in the same subnet 192.168.1.0/24. This is a flat network and easier to work with with no NAT layer between containers and the network. Containers connecting to this interfaces get their IP and networking services directly from the router your host is connected to.</p>\n<p>In case this is a public network you can easily associate public IPs to the containers, and they can be directly accessed from the internet. If you bridge the other hosts on this network to their respective eth0 and connect their containers to br0 interfaces, all you hosts and containers will be on the same network and thus be directly accessible by all containers and hosts.</p>\n<p>If you have 2 network interfaces in the host you can bridge eth1 to br1 for instance, to put containers across hosts in their own network via the br1 interface. Static IPs can be configured inside the container or the router.</p>\n<p><b>Container networking in the cloud</b><br />For cloud vps instances you can use either of the above methods depending on the cloud provider. You can use a private NAT network and use port forwarding to access resources on the container, associate public IP via NAT mapping or if the cloud provider allows you to bridge or gives you private networks, you can become more creative in building your container network.</p>\n<p>At this point its important to remember a lot of cloud, vps, server providers may not support bridging and most do not support things like multicast so services like Keepalived, LVS or an overlay protocol like VXLAN that uses multicast may not work in these networks, unless they support unicast.</p>\n<p><b>Connect containers across several hosts over layer 3</b><br />We already showed you how to connect containers across hosts on the same network with a simple routing rule. You can connect containers across several remote hosts with IPSEC VPNs, plain GRE tunnels or the awesome tool Tinc for mesh networks and VPNs. Containers and VMs that you connect across hosts need to be on different subnets.</p>\n<p>We have detailed guides on these in our <a title=\"Flockport News and Guides\" href=\"http://www.flockport.com/news/\">News and Guides section</a>.</p>\n<p>You can think of these as overlay networks. But remember building VPNs across the public internet has a performance penalty; via the encryption of packets, latencies between your hosts and mtu issues. But these are tried and tested methods to build resilient networks and offer distributed services.</p></div><div>You can actually extend layer 2 across hosts beyond your network through a layer 3 tunnel. This basically means creating a \'distributed virtual switch\' across hosts that may not be in the same private network, and are connected by public IPs over networks.\n<p>Please remember layer 2 over large latencies can be problematic and like all types of tunnels mtu issues need to be addressed. Simplicity is always the best way, and extending layer 2 across hosts is relatively simple to do but may not be simple to run.</p>\n<p>A distributed switch across multiple hosts is an extremely powerful capability to have for networking containers and VMs opening up a host of possibilities. The normal bridges you create in Linux via the inbuilt bridge or soft switches like OpenVSwitch (OVS) are limited to the host. Linux does not have a distributed switch like <a title=\"VMware virtual distributed switch\" href=\"http://www.vmware.com/in/products/vsphere/features/distributed-switch\">VMware\'s VDS</a>.</p>\n<p>Imagine if you could have a bridge that spans both local and remote hosts, that your containers or VMs connect to on the same layer 2 network! You can do this with Ethernet over GRE or l2tpv3, and use ipsec to encrypt the tunnels.</p>\n<p>One of the host bridges can act as the router and offer DHCP service. Application and services which depend on layer 2 like Keepalived, LVS etc benefit from this.</p>\n<p>We are going to create a bridge on 2 remote hosts over their public IPs and connect the bridges with Ethernet over GRE or L2tpv3 so containers connecting to these bridges are on the same layer 2 network. We are using Debian Wheezy with kernel 3.14 from backports, and LXC 1.0.1 from the <a title=\"Flockport getting started guide\" href=\"http://www.flockport.com/start\">Flockport repo</a> for this guide.</p>\n<p>We will first show you how to do this with Ethernet over GRE and then L2tpv3. The main difference is Ethernet over GRE is less well known while L2tpv3 is more widely used for l2 extension and uses UDP, and thus could be more flexible.</p>\n<p><b>Extending L2 with Ethernet over GRE</b><br />First create a bridge on both the remote hosts and bring it up. Let\'s call this bridge superbr0, you are course free to use any name you want.</p>\n<pre>brctl addbr superbr0\r\nifconfig superbr0 up</pre>\n<p>Then lets connect the superbr0 across the 2 hosts with public IP 1.1.1.1 and 2.2.2.2 with a tunnel.</p>\n<p>First on Host A<br /><code>ip link add testgre type gretap remote 2.2.2.2 local 1.1.1.1. ttl 255</code></p>\n<p>Then on Host B<br /><code>ip link add testgre type gretap remote 1.1.1.1 local 2.2.2.2 ttl 255</code></p>\n<p>For Ethernet over GRE we use the gretap device. Our interface/tunnel name is testgre, this can be a name of your choice. Let\'s connect it to our bridge. Do this on both Host A and Host B</p>\n<p><code>brctl addif superbr0 testgre</code></p>\n<p>Now our raw network is ready. Both superbr0 bridges are connected to each other over the testgre tunnel and any VM or container which connects to the superbr0 bridge on either host will be on the same layer 2 network. Neat! You can extend to more hosts by adding more gretap tunnels.</p>\n<p>You can add static IPs to containers on both sides and and test it, but let\'s use dnsmasq and iptables to add basic DHCP and routing capabilities to the bridge. To do this let\'s use the superbr0 on host A as our router. First let\'s give it an IP</p>\n<p><code>ifconfig superbr0 10.0.2.1 netmask 255.255.255.0 up</code></p>\n<p>Now let\'s configure dnsmasq to serve this interface. In /etc/dnsmasq.conf add our newly minted bridge superbr0 to interface, add 10.0.2.1 to listen-address, uncomment bind-interfaces and give it a dhcp range of 10.0.2.2,10.0.2.254. Restart Dnsmasq and it should be ready to offer IPs on the superbr0 interface.</p>\n<pre>interface=superbr0\r\nlisten-address=10.0.2.1\r\nbind-interfaces\r\ndhcp-range=10.0.2.2,10.0.2.254,12h</pre>\n<p>You can also use a standalone instance of dnsmasq launched from a command line like this:</p>\n<pre>dnsmasq --strict-order --bind-interfaces --pid-file=/var/run/dnsmasq-superbr0.pid --listen-address 10.0.2.1 --dhcp-range 10.0.2.2,10.0.2.254 --dhcp-lease-max=253 --dhcp-no-override --interface=superbr0</pre>\n<p>Connect any containers on Host A and B to the superbr0 interface and you should see them getting IPs in the 10.0.2.0/24 range given by dnsmasq we just configured on Host A.</p>\n<p>To provide internet access to your containers and VMs add a simple masquerading rule on Host A.</p>\n<p><code>iptables -t nat -A POSTROUTING -s 10.0.2.0/24 ! -d 10.0.2.0/24 -j MASQUERADE</code></p>\n<p>If you would prefer to have an external router serve the superbr0 interface then add the physical interface that connects to your router to superbr0. In this case you DO NOT need to give the bridge an IP and configure dnsmasq and iptables.</p>\n<p>So now containers on both side are on the same layer 2 network. But what if want to extend this to more physical container hosts?</p>\n<p>To do this you need a switch and a second network interface card on your host A or B. What we do is connect the second network interface eth1 to the switch and add it to the superbr0 interface.</p>\n<p><code>brctl addif superbr0 eth1</code></p>\n<p>So now any physical device connecting to the switch is connected to the superbr0 interface and will get its IPs from the router configured for this interface.</p>\n<p>To put any containers and VM in these additional hosts on the same interface you will have to bridge eth0 on the additional hosts to br0 and connect the containers and VMs to br0 on them. You can similarly do this on the other side of the tunnel on Host B to extend to other hosts.</p>\n<p>Also remember containers on both sides do not have to be limited to the extended layer 2 network on superbr0. You can add multiple network interfaces to the containers and connect them to local networks giving you more possibilities on routing and outbound connectivity.</p>\n<p><b>Extending Layer 2 with L2TPV3</b><br />The principle is the same, only l2tpv3 uses UDP by default. You need to load the l2tp_eth module on both hosts before starting.</p>\n<p>First on Host A</p>\n<pre>modprobe l2tp_eth\r\nip l2tp add tunnel tunnel_id 1000 peer_tunnel_id 2000 encap udp local 1.1.1.1 remote 2.2.2.2 udp_sport 6000 udp_port 5000\r\nip l2tp add session tunnel_id 1000 session_id 3000 peer_session_id 4000</pre>\n<p>On Host B we switch the values</p>\n<pre>modprobe l2tp_eth\r\nip l2tp add tunnel tunnel_id 2000 peer_tunnel_id 1000 encap udp local 2.2.2.2 remote 2.2.2.2 udp_sport 5000 udp_port 6000\r\nip l2tp add session tunnel_id 2000 session_id 4000 peer_session_id 3000</pre>\n<p>Check the tunnel on both Hosts</p>\n<p><code>ip l2tp show tunnel</code></p>\n<p>Now add the l2tpv3 tunnel interface to your bridge on both hosts. Like for our Ethernet over GRE tunnel we will use the superbr0 bridge.</p>\n<p><code>brctl addif superbr0 l2tpeth0</code></p>\n<p>To configure DHCP, routing and other options you can use the instructions for the Ethernet over GRE above. Apart from the the tunnel interface everything else remains the same. You extend this to more hosts by adding more l2tpv3 tunnels. Both protocols have a lot more options to explore.</p>\n<p>You can also use the awesome vpn/mesh network app Tinc in switch mode to extend layer 2 across hosts. The difference is l2tpv3, Ethernet over GRE operates in kernel mode while Tinc operates in user mode.</p>\n<p>Mikrotik for instance uses Ethernet over GRE for their <a title=\"Mikrotik EOIP\" href=\"http://wiki.mikrotik.com/wiki/Manual:Interface/EoIP\">EOIP solution</a> or layer 2 extension and provides hardware acceleration for up to 500 MBit/s. Cisco, Juniper etc have their own L2 extension protocols like <a title=\"Cisco OVT\" href=\"http://www.cisco.com/c/en/us/solutions/data-center-virtualization/overlay-transport-virtualization-otv/index.html\">OVT</a>, using <a title=\"Cisco MPLS\" href=\"http://www.cisco.com/c/en/us/products/collateral/data-center-virtualization/data-center-interconnect/white_paper_c11_493718.html\">MPLS</a> etc.</p>\n<p>New standards for networking in the cloud and virtualization around building SDNs (software defined networking) are fast maturing to enable some of the capabilities we cover in this guide on a large scale.</p>\n<p><a title=\"VXLAN Overlays\" href=\"http://blogs.vmware.com/vsphere/2013/05/vxlan-series-how-vtep-learns-and-creates-forwarding-table-part-5.html\">VXLAN which extends layer 2 across multiple hosts using VTEPs</a> is fairly interesting but depends on multicast which most organizations, service and cloud providers don\'t support. Cisco, Juniper and others are working on their own <a title=\"Cisco VXLAN unicast\" href=\"http://www.cisco.com/c/en/us/products/collateral/switches/nexus-7000-series-switches/guide_c07-728863.html\">\'enhanced vxlan\' extensions with unlticast support</a>.</p>\n<p>Cumulus Linux along with Metacloud - recently acquired by Cisco, have been working on VXLAN unicast and have released a <a title=\"VXLAN VXFLD\" href=\"https://github.com/CumulusNetworks/vxfld\">VXFLD project</a> with some tools.</p>\n<p>The Linux kernel supports VXLAN in both multicast and unicast modes. You need a relatively recent version of the kernel 3.14+ and the iproute2 package 3.14+. We have a <a title=\"Flockport labs - LXC and VXLAN\" href=\"http://www.flockport.com/flockport-labs-lxc-and-vxlan/\">follow up post on VXLAN here</a>.</p>\n<p>But these are still maturing and not yet ready to go. If you are interested in networking <a title=\"Networkheresy\" href=\"http://networkheresy.com\">networkheresy</a>, <a title=\"Scott Lowe\" href=\"http://blog.scottlowe.org/\">Scott Lowe</a> and <a title=\"Ipspace\" href=\"http://www.ipspace.net/Main_Page\">ipspace </a>are 3 great blogs that cover next generation networking in depth.</p>\n<p><a title=\"Use an LXC container as a router\" href=\"http://www.flockport.com/use-an-lxc-container-as-a-router/\">In Part II we are going to cover using LXC containers as routers</a> which is similar to how one would use VMs of software routers like Vyatta, Vyos or Pfsense. LXC supports multiple network interfaces and is a great way to experiment with networking and networking namespaces. With 2 interfaces one could be connected to your wan and the other your lan letting an LXC container operate as a router. There are very limited use cases for this, but its a great way to simulate networks and manage routing for other containers in the cloud.</p>\n<p><b>Further reading and resources</b></p>\n<p><a title=\"Flockport App Store\" href=\"https://www.flockport.com/store/\">Flockport App store</a></p>\n<p><a title=\"Start\" href=\"https://www.flockport.com/start/\">Flockport LXC Installer and VM</a></p>\n<p><a title=\"Flockport LXC Guides\" href=\"https://www.flockport.com/guides/\">Flockport LXC Guides</a></p>\n<p><b>Flockport Networking Series</b></p>\n<p><a title=\"Flockport labs - Use an LXC container as a router\" href=\"http://www.flockport.com/use-an-lxc-container-as-a-router/\">Flockport labs - using an LXC container as a router</a></p>\n<p><a title=\"Flockport LXC Networking Guide\" href=\"http://www.flockport.com/lxc-networking-guide/\">LXC Networking Guide</a></p>\n<p><a title=\"Flockport LXC Advanced Networking Guide\" href=\"http://www.flockport.com/lxc-advanced-networking-guide\">LXC Advanced Networking Guide</a></p>\n<p><a title=\"Connect LXC hosts with GRE tunnels\" href=\"http://www.flockport.com/connecting-lxc-hosts-with-gre-tunnels/\">Connect LXC hosts with GRE tunnels</a></p>\n<p><a title=\"Connect LXC hosts with an IPSEC VPN\" href=\"http://www.flockport.com/connect-lxc-hosts-with-an-ipsec-vpn/\">Connect LXC hosts and containers with IPSEC VPNs</a></p>\n<p><a title=\"Build Distributed Mesh Networks\" href=\"http://www.flockport.com/building-distributed-mesh-networks-of-lxc-hosts/\">Connect LXC hosts and containers with Tinc VPNs</a></p>\n<p><a title=\"Load balancing and failover with LXC containers\" href=\"http://www.flockport.com/load-balancing-and-failover-with-lxc-containers/\">Load balancing and failover with LXC containers</a></p>\n<p><a title=\"Build distributed storage nodes with LXC and Gluster\" href=\"http://www.flockport.com/build-distributed-storage-nodes-with-lxc-and-gluster/\">Build distributed storage nodes with LXC and Gluster</a></p></div>',1),(35,'Getting started','http://getcontenttools.com/getting-started',0,0,'<h2>\n    A very short intro\n</h2>\n<p>\n    ContentTools is one of a <a href=\"http://getcontenttools.com/api\">collection of libraries</a> designed for building tools that make it easier to edit HTML content. The ContentTools library provides a fully functional page editor which is the subject of the <i>Getting started</i> guide. However if you\'re interested in customizing the editor, extending the libraries or have something different in mind for the code then check out the <a href=\"http://getcontenttools.com/tutorials\">Tutorials</a> and <a href=\"http://getcontenttools.com/api\">API</a> sections.\n</p>\n<h2>\n    Download\n</h2>\n<p>\n    First task is to download the JavaScript, CSS and other associated project files. <a href=\"https://github.com/GetmeUK/ContentTools/archive/master.zip\">Download the repo</a> and open the <b>/build</b> folder which contains everything you need including pre-built source files. Copy the contents of the folder into appropriate locations for your project <i>(e.g content-tools.min.js &gt; /www/scripts/content-tools.min.js)</i>. However, the <b>/images</b> folder and <b>icons.woff</b> font need to be copied into the same folder as <b>content-tools.min.css</b> (which I\'ll explain next). Your file structure should look something like:\n</p>\n<pre>/site\n    /assets\n        /images\n            - ce-drop-above.png\n            - ce-drop-below.png\n            - ce-drop-left.png\n            - ce-drop-right.png\n            - video.png\n        - content-tools.min.js\n        - content-tools.min.css\n        - icons.woff</pre>\n<p>\n    The libraries themselves are written using <a href=\"http://coffeescript.org/\">CoffeeScript</a> and <a href=\"http://sass-lang.com/\">SASS</a> and ideally you\'ll want to roll your own for each web project. The build process is managed by <a href=\"http://gruntjs.com/\">grunt</a> and is very simple, however to get started there\'s no need.\n</p>\n<p>\n    If you\'re more the sort to learn by pulling code apart, there is a full demo of the editor complete with example content included in the <b>/sandbox</b> folder.\n</p>\n<p class=\"note\">\n    If you are using Firefox then you may experience an issue where the icon font (icon.woff) doesn\'t load on your local machine. A reason for this along with a solution to the issue can be found on <a href=\"http://stackoverflow.com/questions/2856502/css-font-face-not-working-with-firefox-but-working-with-chrome-and-ie\">stackoverflow</a>.\n</p>\n<h2>\n    Prepare the HTML\n</h2>\n<p>\n    Include the ContentTools CSS and JS in your HTML page:\n</p>\n<pre><code class=\"language-markup\">&lt;head&gt;\n    &lt;title&gt;My page&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"assets/content-tools.min.css\"&gt;\n    ...\n&lt;/head&gt;\n&lt;body&gt;\n    ...\n    &lt;script src=\"assets/content-tools.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"assets/editor.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;</code></pre>\n<p>\n    Notice that we also included an additional JavaScript file named <b>editor.js.</b> This will contain the code that initializes our editor; go ahead and create the file but leave it empty for now.\n</p>\n<p>\n    Next we need to mark the regions that will be editable. There\'s no set way to do this but using a <b>CSS class</b> or <b>data-...</b> attribute is recommended. Only the outer element that will contain editable content is marked:\n</p>\n<pre><code class=\"language-markup\">&lt;div data-editable data-name=\"main-content\"&gt;\n    &lt;blockquote&gt;\n        Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\n    &lt;/blockquote&gt;\n    &lt;p&gt;John F. Woods&lt;/p&gt;\n&lt;/div&gt;</code></pre>\n<p>\n    The <b>data-name</b> attribute is used to identify the region when saving (by default the <b>id</b> attribute is used but I prefer to keep the editable markup separated from the existing HTML markup).\n</p>\n<h2>\n    Launch the editor\n</h2>\n<p>\n    ContentTools provides an editor but we need to configure a few things before we can launch it, namely:\n</p>\n<ul><li>\n        The CSS styles we want users to be able to apply to elements.\n    </li>\n    <li>\n        The regions of the page we want to be editable.\n    </li>\n    <li>\n        A mechanism for saving our content.\n    </li>\n    <li>\n        <i>We might also configure an image handler but that\'s for a later <a href=\"http://getcontenttools.com/tutorials/handling-image-uploads\">tutorial</a>.</i>\n    </li>\n</ul><p>\n    Add the following code to the <b>editor.js</b> file we created earlier:\n</p>\n<pre><code class=\"language-javascript\">window.addEventListener(\'load\', function() {\n    var editor;\n\n});</code></pre>\n<h3>\n    Configure styles\n</h3>\n<p>\n    Much like a word processor, it\'s possible to configure a list of predefined styles for your content. These then appear when the user<b> selects a tag from the inspector bar at the bottom of the viewport.</b> Only styles applicable to the tag type are displayed, though styles can be set to be applicable to all tags.\n</p>\n<img alt=\"Styles tab in properties dialog\" height=\"520\" src=\"http://getcontenttools.com/images/pages/getting-started/properties-dialog-styles-tab.png\" width=\"740\" /><p>\n    We\'re going to add a single style <b>.author</b> that can be applied to paragraph <b>&lt;p&gt;</b> tags. Underneath the <code>var editor;</code> declaration add:\n</p>\n<pre><code class=\"language-javascript\">ContentTools.StylePalette.add([\n    new ContentTools.Style(\'Author\', \'author\', [\'p\'])\n]);</code>\n</pre>\n<p>\n    The <b>StylePalette.add</b> method allows us to add a list of styles to the editor. Each style is declared as a <b>Style</b> instance initialized with a display name, a CSS class and a list of tags the style can be applied to. We\'ll need to add the relevant CSS to support this style so in the head of your HTML add:\n</p>\n<pre><code class=\"language-markup\">&lt;head&gt;\n    ...\n    &lt;style&gt;\n        .author {\n            font-style: italic;\n            font-weight: bold; }\n    &lt;/style&gt;\n&lt;/head&gt;</code></pre>\n<h3>\n    Select the editable regions\n</h3>\n<p>\n    Next we need to initialize the editor and let it know which elements on the page are editable. To do this add the following code to <b>editor.js</b>:\n</p>\n<pre><code class=\"language-javascript\">editor = ContentTools.EditorApp.get();\neditor.init(\'*[data-editable]\', \'data-name\');</code></pre>\n<p>\n    We <b>init</b>ialize the editor with a CSS selector for the editable regions of the page and an attribute name (<b>\'data-name\'</b>) to tell the editor which of the element\'s attributes contains its region name. Region names must be unique within the same page.\n</p>\n<h3>\n    Save changes\n</h3>\n<p>\n    Finally we want to be notified when the user saves the page so that we can store the updated content of each region in a file or on a database. To do this we listen for the <b>save</b> event to be triggered by the <b>editor</b>. Add the following code to <b>editor.js</b> after the <b>editor.init</b> statement.\n</p>\n<pre><code class=\"language-javascript\">editor.bind(\'save\', function (regions) {\n    var name, onStateChange, payload, xhr;\n\n    // Set the editor as busy while we save our changes\n    this.busy(true);\n\n    // Collect the contents of each region into a FormData instance\n    payload = new FormData();\n    for (name in regions) {\n        payload.append(name, regions[name]);\n    }\n\n    // Send the update content to the server to be saved\n    onStateChange = function(ev) {\n        // Check if the request is finished\n        if (ev.target.readyState == 4) {\n            editor.busy(false);\n            if (status == \'200\') {\n                // Save was successful, notify the user with a flash\n                new ContentTools.FlashUI(\'ok\');\n            } else {\n                // Save failed, notify the user with a flash\n                new ContentTools.FlashUI(\'no\');\n            }\n        }\n    };\n\n    xhr = new XMLHttpRequest();\n    xhr.addEventListener(\'readystatechange\', onStateChange);\n    xhr.open(\'POST\', \'/save-my-page\');\n    xhr.send(payload);\n});</code></pre>\n<p>\n    We\'re using AJAX to send the content of each region to the server when the user saves the page. How that content is saved is a decision for you, but the <a href=\"http://getcontenttools.com/tutorials/saving-strategies\">Saving strategies</a> tutorial presents a couple of approaches that might be a useful starting point.\n</p>\n<p>\n    Providing the user with some feedback is nice and so we set the editor to its <b>busy</b> state while we wait for a response from the server. In its busy state a spinning cog will appear to let the user know that something\'s happening. Once we get a response, a <b>flash</b> is used to notify the user of the success/failure of their save request. Flashes appear large and central for a short period; the <b>ok</b> flash displays a tick and <b>no</b> a cross.\n</p>\n<h2>\n    Fin\n</h2>\n<p>\n    That\'s it; open your page in a browser, look for the blue edit button top left and click it to start editing.\n</p>\n<p>\n    If you do get stuck don\'t forget there\'s a full demo included in the <b>/sandbox</b> folder of the ContentTools repo you downloaded.\n</p>\n<p>\n    For a bit of user guidance the <a href=\"http://getcontenttools.com/demo\">demo page</a> is a good place to start.\n</p>\n\n    ',1),(36,'Feathers - Build better APIs, faster than ever','http://feathersjs.com/',1,0,'\n    <div class=\"content\"><div class=\"container center-text\">\n    <div class=\"row clear\">\n      <p>\n        \n        </p><h2 class=\"thin\">Build Better APIs, Faster Than Ever</h2>\n      \n    </div>\n    \n    \n    \n  </div>\n<hr /><div class=\"container\">\n    <div class=\"row clear\">\n      <div class=\"col col-6 mobile-full\">\n        <h3>Feathers is built for developers that need to ship maintainable code, <span class=\"normal\">fast</span>.</h3>\n\n        <ul><li>\n            <p>\n              Get prototypes out in a matter of minutes and production ready in days. Seriously.\n            </p>\n          </li>\n\n          <li>\n            <p>\n              Only worry about your data and application logic. We take out the boilerplate with lightweight services and flexible plug-ins.\n            </p>\n          </li>\n          <li>\n            <p>\n              Less is more! Feathers is a razor thin wrapper on top of <a class=\"primary normal\" href=\"http://expressjs.com/\" title=\"Express\">Express</a> and <a class=\"primary normal\" href=\"http://socket.io/\" title=\"Socket.io\">Socket.io</a>, the defacto technologies for building real-time web applications using NodeJS.\n            </p>\n          </li>\n        </ul></div>\n      <div class=\"col col-6 mobile-full\">\n        <img src=\"http://feathersjs.com/images/ship-it.png\" alt=\"Ship It\" class=\"ship-it block\" /></div>\n    </div>\n    <div class=\"row clear\">\n      <p>\n        </p><h5 class=\"center-text\">\n          At its core Feathers is a real-time, micro-service web framework for NodeJS that gives you control over your data via RESTful resources, sockets and flexible plug-ins.\n        </h5>\n      \n    </div>\n  </div>\n<hr /><div class=\"container\">\n    <div class=\"row clear\">\n      <div class=\"col col-12 mobile-full\">\n        <h2>How it works</h2>\n        <h5>Feathers uses small services that can be registered like an Express middleware. You can use services for <a href=\"http://feathersjs.com/learn/#toc3\" class=\"primary normal\">different databases</a> or <a href=\"http://feathersjs.com/quick-start\" class=\"primary normal\">write your own</a>. Here is a REST and websocket real-time todo API with <a href=\"https://github.com/louischatriot/nedb\" class=\"primary normal\">NEDB</a> for data storage:</h5>\n\n        <div class=\"highlight col-10 push-1\"><pre><code class=\"language-js\">\n  <span class=\"c1\">// app.js</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">feathers</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'feathers\'</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">nedb</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'feathers-nedb\'</span><span class=\"p\">);</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">bodyParser</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">\'body-parser\'</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Initialize NEDB CRUD database service</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">todos</span> <span class=\"o\">=</span> <span class=\"nx\">nedb</span><span class=\"p\">(</span><span class=\"s1\">\'todos\'</span><span class=\"p\">);</span>\n  <span class=\"c1\">// A Feathers app is the same as an Express app</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">feathers</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// Add REST API support</span>\n  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">configure</span><span class=\"p\">(</span><span class=\"nx\">feathers</span><span class=\"p\">.</span><span class=\"nx\">rest</span><span class=\"p\">());</span>\n  <span class=\"c1\">// Configure Socket.io real-time APIs</span>\n  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">configure</span><span class=\"p\">(</span><span class=\"nx\">feathers</span><span class=\"p\">.</span><span class=\"nx\">socketio</span><span class=\"p\">());</span>\n  <span class=\"c1\">// Parse HTTP JSON bodies</span>\n  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n  <span class=\"c1\">// Register the todo service</span>\n  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">\'/todos\'</span><span class=\"p\">,</span> <span class=\"nx\">todos</span><span class=\"p\">);</span>\n  <span class=\"c1\">// Start the server</span>\n  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span>\n  </code></pre>\n        </div>\n\n        <h5>Run the following commands</h5>\n        <pre class=\"col-10 push-1\">npm install feathers body-parser feathers-nedb<br />node app<br />curl \'http://localhost:3000/todos/\' -H \'Content-Type: application/json\' --data-binary \'{ \"text\": \"Learn Feathers!\" }\'</pre>\n        <h5>Then go to <a class=\"primary normal\" href=\"http://localhost:3000/todos\">http://localhost:3000/todos</a></h5>\n\n        \n      </div>\n    </div>\n  </div>\n<div class=\"container\">\n    <div class=\"row clear\">\n      <div class=\"col col-4 mobile-full\">\n        <h4 class=\"normal\">Battle Tested Core</h4>\n        <p>Feathers is a <a href=\"https://github.com/feathersjs/feathers\" class=\"primary\">very thin wrapper</a> over top of Express and Socket.io, both of which have been used in production by thousands of companies.</p>\n      </div>\n      <div class=\"col col-4 mobile-full\">\n        <h4 class=\"normal\">Uber Flexible</h4>\n        <p>Our <a href=\"https://www.npmjs.com/search?q=feathers-plugin\" class=\"primary\">plug-ins</a> are small, easy to learn and extremely flexible. Giving you only what you need and then getting out of your way.</p>\n      </div>\n      <div class=\"col col-4 mobile-full\">\n        <h4 class=\"normal\">Minimal Configuration</h4>\n        <p>Tired of massive JSON or YAML files? Feathers reduces complexity while staying explicit, not by hiding it behind generators and configuration files.</p>\n      </div>\n    </div>\n    <div class=\"row clear\">\n      \n      <div class=\"col col-4 mobile-full\">\n        <h4 class=\"normal\">Front End Agnostic</h4>\n        <p>Use whatever client you want; Angular, React, Swift/ObjC, Android, it doesn\'t matter. We provide some <a href=\"http://feathersjs.com/learn/#toc1\" class=\"primary\">helpful guides</a> and <a href=\"https://www.npmjs.com/search?q=feathers-plugin\" class=\"primary\">plug-ins</a> to make things easier.</p>\n      </div>\n      <div class=\"col col-4 mobile-full\">\n        <h4 class=\"normal\">Pure JavaScript</h4>\n        <p>Because Feathers is 100% vanilla JavaScript on the backend, you get to use the same language all the way through your web stack. More productivity FTW!</p>\n      </div>\n    </div>\n    \n  </div>\n<div class=\"container\">\n    \n    <div class=\"row clear\">\n      <div class=\"col col-6 mobile-full\">\n        <h3>Feathers vs Meteor</h3>\n        <h5 class=\"italic\">\"Once you go Meteor, you don\'t go back. And not in a good way.\"</h5>\n        <p>\n          Meteor has amassed a large community and a lot of venture backed funding. Our biggest complaint is that because of this funding, there is some <span class=\"bold\">serious lock in</span>. Meteor has it\'s own package system, how you use npm modules can be inconsistent and it is a large codebase. There is also the risk that when investors start pushing for a return on their investment, it could negatively impact the community.\n        </p>\n        <p>\n          From a feature standpoint Feathers is pretty similar to Meteor. You get real-time API\'s from both. However, we let you use the defacto npm for managing dependencies, we let you choose whether you want to use Webpack, Gulp, Grunt, or any other tool for managing assets, and Feathers is completely client agnostic without any additional overhead. Everything is open, flexible and pluggable. You use only what you need.\n        </p>\n        \n      </div>\n      <div class=\"col col-6 no-mobile\">\n        <img src=\"http://feathersjs.com/images/feathers-vs-meteor.png\" alt=\"Feathers vs Meteor\" class=\"comparison block\" /></div>\n    </div>\n    <div class=\"row clear\">\n      <div class=\"col col-6 mobile-full\">\n        <h3>Feathers vs Sails</h3>\n        <h5 class=\"italic\">\"If you love JSON config files, Sails is for you.\"</h5>\n        <p>\n          From a feature standpoint Feathers and Sails are probably the closest. Both provide real-time REST API\'s, multiple db support, and are client agnostic. Both frameworks also use Express, but Feathers supports Express 4, while Sails only supports Express 3.\n        </p>\n        <p>\n          Even though the features are very similar, Feathers achieves this with MUCH less code, which means less stuff to break and maintain making it easy to continuously upgrade to the latest version of Express. We also don\'t assume how you want to manage your assets by letting you use your build tool of choice. Feathers provides lightweight services and hooks instead of a full-blown ORM, and we let you write code instead of long config files to define relationships and security policies.\n        </p>\n        \n      </div>\n      <div class=\"col col-6 no-mobile\">\n        <img src=\"http://feathersjs.com/images/feathers-vs-sails.png\" alt=\"Feathers vs Sails\" class=\"comparison block\" /></div>\n    </div>\n    <div class=\"row clear\">\n      <div class=\"col col-6 mobile-full\">\n        <h3>Feathers vs Express</h3>\n        <h5 class=\"italic\">\"I like Express because I love flexibility and boilerplate!\"</h5>\n        <p>\n          Express is awesome! It does much of the heavy lifting behind Feathers; routing, content-negotiation, middleware support, etc. In fact, you can simply replace Express with Feathers in any existing application and start adding new microservices.\n        </p>\n        <p>\n          Feathers eliminates a lot of the common boilerplate and gives you helpful plug-ins to make implementing common features easier, while also providing some convention. This includes stuff like managing permissions, CRUD for multiple databases, and real-time APIs using web sockets. Just like Express, Feathers gives you just enough to build your web app quickly but gets out of your way when you need to customize something.\n        </p>\n        \n      </div>\n      <div class=\"col col-6 no-mobile\">\n        <img src=\"http://feathersjs.com/images/feathers-vs-express.png\" alt=\"Feathers vs Express\" class=\"comparison block\" /></div>\n    </div>\n  </div>\n<hr /><div class=\"container\">\n    <p>\n      \n      </p><h3>No need! Feathers is MIT licensed and totally FREE.</h3>\n    \n    \n  </div>\n</div>\n\n    ',1),(37,'js-sequence-diagrams by bramp','http://bramp.github.io/js-sequence-diagrams/',1,0,'\n      <h3>Intro</h3>\n        <p>A simple javascript library to turn text into vector <a href=\"http://en.wikipedia.org/wiki/Sequence_diagram\">UML sequence diagrams</a>.\n          Heavily inspired by <a href=\"http://www.websequencediagrams.com/\">websequencediagrams.com</a>, who offer a serverside solution. We use <a href=\"http://zaach.github.com/jison/\">Jison</a> to parse the text, and <a href=\"http://raphaeljs.com/\">Raphaël</a> to draw the image.</p>\n      <h3>Examples</h3>\n        <table><tr><td class=\"diagram\"></td>\n            <td>\n              <div class=\"editor-wrapper\">\n                <p>Title: Here is a title\nA-&gt;B: Normal line\nB--&gt;C: Dashed line\nC-&gt;&gt;D: Open arrow\nD--&gt;&gt;A: Dashed open arrow</p>\n              </div>\n              Theme:\n              \n              | <a href=\"http://bramp.github.io/js-sequence-diagrams/#\" class=\"download\">Download as SVG</a>\n            </td>\n          </tr><tr><td class=\"diagram\"></td>\n            <td>\n              <div class=\"editor-wrapper\">\n                <p># Example of a comment.\nNote left of A: Note to the\\n left of A\nNote right of A: Note to the\\n right of A\nNote over A: Note over A\nNote over A,B: Note over both A and B</p>\n              </div>\n              Theme:\n              \n              | <a href=\"http://bramp.github.io/js-sequence-diagrams/#\" class=\"download\">Download as SVG</a>\n            </td>\n          </tr><tr><td class=\"diagram\"></td>\n            <td>\n              <div class=\"editor-wrapper\">\n                <p>participant C\nparticipant B\nparticipant A\nNote right of A: By listing the participants\\n you can change their order</p>\n              </div>\n              Theme:\n              \n              | <a href=\"http://bramp.github.io/js-sequence-diagrams/#\" class=\"download\">Download as SVG</a>\n            </td>\n          </tr></table><h3>Syntax</h3>\n        The following diagram shows the syntax for the diagrams. The exact grammar can be <a href=\"https://github.com/bramp/js-sequence-diagrams/blob/master/src/grammar.jison\">found here</a> in bison format.<div class=\"center\"><img src=\"http://bramp.github.io/js-sequence-diagrams/images/grammar.png\" alt=\"grammar.png\" /></div>\n  \n      <h3>Usage</h3>\n        <p>js-sequence-diagrams depends on <a href=\"http://raphaeljs.com/\">Raphaël</a> and <a href=\"http://underscorejs.org/\">Underscore.js</a> (we are <a href=\"http://lodash.com/\">lodash</a> compatible). To use include the following:\n        </p><pre>&lt;script src=\"<a href=\"http://bramp.github.io/js-sequence-diagrams/bower_components/raphael/raphael-min.js\">raphael-min.js</a>\"&gt;&lt;/script&gt;\n&lt;script src=\"<a href=\"http://bramp.github.io/js-sequence-diagrams/bower_components/underscore/underscore-min.js\">underscore-min.js</a>\"&gt;&lt;/script&gt;\n&lt;script src=\"<a href=\"http://bramp.github.io/js-sequence-diagrams/bower_components/js-sequence-diagrams/build/sequence-diagram-min.js\">sequence-diagram-min.js</a>\"&gt;&lt;/script&gt;\n</pre>\nand now you have two options. You can manually parse the text:\n<pre>\n&lt;div id=\"diagram\"&gt;&lt;/div&gt;\n&lt;script&gt;\n  var diagram = Diagram.parse(\"A-&gt;B: Message\");\n  diagram.drawSVG(\"diagram\", {theme: \'hand\'});\n&lt;/script&gt;\n</pre>\n\nor use jQuery to do all the work:\n<pre>\n&lt;div class=\"diagram\"&gt;A-&gt;B: Message&lt;/div&gt;\n&lt;script&gt;\n$(\".diagram\").sequenceDiagram({theme: \'hand\'});\n&lt;/script&gt;\n</pre>\n\n\n      ',1),(38,'Zenit','http://get.zenitanalytics.com/',1,0,'<div>\n                        <div class=\"feature-list__image\">\n                            <img src=\"http://get.zenitanalytics.com/images/device-laptop-2x.png\" height=\"129\" alt=\"\" /></div>\n                        <p>Intelligence</p>\n                        <p>Zenit Intelligence analyzes user, advertiser, and analytics data and churns it through advanced machine learning models. Zenit identifies important data points, and provides actionable insights for increasing revenues, attracting users, and increasing engagement.</p>\n                    </div><div>\n                        <div class=\"feature-list__image\">\n                            <img src=\"http://get.zenitanalytics.com/images/device-enable-2x.png\" height=\"102\" alt=\"\" /></div>\n                        <p>Decisions</p>\n                        <p>Use Zenit technology to boost your user engagement, explore monetization options, and reduce wasted time on unnecessary development. Zenit lets you focus on which features will grow and retain your users.</p>\n                    </div>',1),(39,'10 Misconceptions about Neural Networks','http://www.turingfinance.com/misconceptions-about-neural-networks/',1,0,' \n           \n\n                                         <p><a href=\"http://www.turingfinance.com/author/StuartReid/\">StuartReid</a> | On 08, May  2014</p>\n  		           \n\n                               \n          <p><span><a></a>Neural networks are one of the most popular and powerful classes of machine learning algorithms. In quantitative finance neural networks are often used for time-series forecasting, constructing proprietary indicators, algorithmic trading, securities classification and credit risk modelling. They have also been used to construct stochastic process models and price derivatives. Despite their usefulness neural networks tend to have a bad reputation because their performance is \"temperamental\". In my opinion this can be attributed to poor network design owing to misconceptions regarding how neural networks work. This article discusses some of those misconceptions.</span></p>\n<ol><li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#brain\">Neural networks are not models of the human brain</a></span></li>\n<li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#stats\">Neural networks are not just a \"weak form\" of statistics</a></span></li>\n<li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#network\">Neural networks come in many different architectures</a></span></li>\n<li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#size\">Size matters, but bigger isn\'t always better</a></span></li>\n<li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#algo\">Many training algorithms exist for neural networks</a></span></li>\n<li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#data\">Neural networks do not always require a lot of data</a></span></li>\n<li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#prep\">Neural networks cannot be trained on any data</a></span></li>\n<li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#break\">Neural networks may need to be retrained</a></span></li>\n<li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#blackbox\">Neural networks are not black boxes</a></span></li>\n<li><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#difficult\">Neural networks are not hard to implement</a></span></li>\n</ol><h3><a></a>1. Neural networks are not models of the human brain</h3>\n<p><span>The human brain is one of the great mysteries of our time and scientists have not reached a consensus on exactly how it works. Two theories of the brain exist namely the <a href=\"http://en.wikipedia.org/wiki/Grandmother_cell\">grandmother cell theory</a> and the distributed representation theory. The first theory asserts that individual neurons have high information capacity and are capable of representing complex concepts such as your grandmother or even <a href=\"http://www.npr.org/blogs/krulwich/2012/03/30/149685880/neuroscientists-battle-furiously-over-jennifer-aniston\">Jennifer Aniston</a>. The second theory neurons asserts that neurons are much more simple and representations of complex objects are distributed across many neurons. Artificial neural networks are loosely inspired by the second theory. </span></p>\n<p><span>One reason why I believe current generation neural networks are not capable of sentience (a different concept to intelligence) is because I believe that biological neurons are much more complex than artificial neurons.</span></p>\n<blockquote>\n<p><span><a href=\"https://medium.com/backchannel/google-brains-co-inventor-tells-why-hes-building-chinese-neural-networks-662d03a8b548\">A single neuron in the brain is an incredibly complex machine that even today we don’t understand. A single “neuron” in a neural network is an incredibly simple mathematical function that captures a minuscule fraction of the complexity of a biological neuron. So to say neural networks mimic the brain, that is true at the level of loose inspiration, but really artificial neural networks are nothing like what the biological brain does. - Andrew Ng</a></span></p>\n</blockquote>\n<p><span>Another big difference between the brain and neural networks is size and organization. Human brains contain many more neurons and synapses than neural network and they are self-organizing and adaptive. Neural networks, by comparison, are organized according to an architecture. Neural networks are not \"self-organizing\" in the same sense as the brain which much more closely resemble a graph than an ordered network.</span></p>\n<div class=\"wp-caption alignnone\"><img class=\"wp-image-2214 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Brain-connections.png\" alt=\"Brain connections\" width=\"934\" height=\"412\" /><p class=\"wp-caption-text\">Some very interesting views of the brain as created by state of the art brain imagine techniques. Click on the image for more information.</p></div>\n<p><span>So what does that mean? Think of it this way: a neural network is inspired by the brain in the same way that the Olympic stadium in Beijing is inspired by a bird\'s nest. That does not mean that the Olympic stadium is-a bird\'s nest, it means that some elements of birds nests are present in the design of the stadium. In other words, elements of the brain are present in the design of neural networks but they are a lot less similar than you might think.</span></p>\n<p><span>In fact neural networks are more closely related to statistical methods such as <a href=\"http://en.wikipedia.org/wiki/Curve_fitting\">curve fitting</a> and <a href=\"http://en.wikipedia.org/wiki/Regression_analysis\">regression analysis</a> than the human brain. In the context of quantitative finance I think it is important to remember that because whilst it may sound cool to say that something is \'inspired by the brain\', this statement may result unrealistic expectations or fear. For more info see <em><a href=\"https://www.linkedin.com/pulse/artificial-intelligence-existential-threat-stuart-gordon-reid\">\'No! Artificial Intelligence is not an existential threat\'</a>.</em></span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2864 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/07/Non-Linear-Regression.gif\" alt=\"Non-Linear Regression\" width=\"610\" height=\"460\" /><p class=\"wp-caption-text\">An example of curve fitting also known as function approximation. Neural networks are quite often used to approximate complex mathematical functions.</p></div>\n<p><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#top\">Back to the top</a></p>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dashed\" /><h3><a></a>2. Neural networks aren\'t a \"weak form\" of statistics</h3>\n<p><span>Neural networks consist of layers of interconnected nodes. Individual nodes are called perceptrons and resemble a <a href=\"https://en.wikipedia.org/wiki/Linear_regression#Simple_and_multiple_regression\">multiple linear regression</a>. The difference between a multiple linear regression and a perceptron is that a perceptron feeds the signal generated by a multiple linear regression into an activation function which may or may not be non-linear. In a <a href=\"https://en.wikipedia.org/wiki/Multilayer_perceptron\">multi layered perceptron</a> (MLP) perceptrons are arranged into layers and layers are connected with other another. In the MLP there are three types of layers namely, the input layer, hidden layer(s), and the output layer. The input layer receives input patterns and the output layer could contain a list of classifications or output signals to which those input patterns may map. Hidden layers adjust the weightings on those inputs until the error of the neural network is minimized. One interpretation of this is that the hidden layers extract salient features in the input data which have predictive power with respect to the outputs.</span></p>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dotted\" /><h5><span>Mapping Inputs : Outputs</span></h5>\n<p><span>A perceptron receives a vector of inputs, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_69e80d9284e5c96bc5ca0cb8e5d9887c.gif\" class=\"tex\" alt=\"\\textbf{z} = (z_1,z_2,\\ldots,z_n)\" /></span>, consisting on <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_7b8b965ad4bca0e41ab51de7b31363a1.gif\" class=\"tex\" alt=\"n\" /></span> attributes. This vector of inputs is called an input pattern. These inputs are weighted according to the weight vector belonging to that perceptron, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_aa49fc60708c8d2081acb6346b9acb50.gif\" class=\"tex\" alt=\"\\textbf{v} = (v_1,v_2,\\ldots,v_n)\" /></span>. In the context of multiple linear regression these can be thought of as regression co-efficients or beta\'s. The net input signal, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_40fa73c9d0083043c6576dd2b40511e4.gif\" class=\"tex\" alt=\"net\" /></span>, of the perceptron is usually the sum product of the input pattern and their weights. Neurons which use the sum-product for <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_40fa73c9d0083043c6576dd2b40511e4.gif\" class=\"tex\" alt=\"net\" /></span> are called summation units.</span></p>\n\n<div class=\"one_half column-last\">\n<p><img class=\"aligncenter size-full wp-image-5860\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/05/Perceptron.png\" alt=\"Perceptron\" width=\"624\" height=\"281\" /></p>\n</div><span>Some popular activation functions used in neural networks are shown below,</span>\n<p><img class=\"size-full wp-image-2226\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Activations-Functions.png\" alt=\"Activations Functions\" width=\"930\" height=\"629\" /></p>\n<p><span>The simplest neural network is one which has just one neuron which maps inputs to an output. Given a pattern, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_83878c91171338902e0fe0fb97a8c47a.gif\" class=\"tex\" alt=\"p\" /></span>, the objective of this network would be to minimize the error of the output signal, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_3e53e70b80ade3783361ec48322aeb46.gif\" class=\"tex\" alt=\"o_p\" /></span>, relative to some known target value for some given training pattern, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_5c2423d9bb6800593fddead13d1534d3.gif\" class=\"tex\" alt=\"t_p\" /></span>. For example, if the neuron was supposed to map <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_83878c91171338902e0fe0fb97a8c47a.gif\" class=\"tex\" alt=\"p\" /></span> to -1 but it mapped it to 1 then the error, as measured by sum-squared distance, of the neuron would be 4, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_a4486bd25214fcf4d9d550bdacb9f0af.gif\" class=\"tex\" alt=\"(-1 - 1)^2\" /></span>. </span></p>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dotted\" /><h5><span>Layering</span></h5>\n<p><img class=\"size-full wp-image-2165 aligncenter\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Multilayer-perceptron.jpg\" alt=\"Multilayer perceptron\" width=\"601\" height=\"253\" /></p>\n<p><span>As shown in the image above perceptrons are organized into layers. The first layer or perceptrons, called the input later, receives the patterns, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_83878c91171338902e0fe0fb97a8c47a.gif\" class=\"tex\" alt=\"p\" /></span>, in the training set, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_5e7919eb5f3f319316869df06a525ab6.gif\" class=\"tex\" alt=\"P_T\" /></span>. The last layer maps to the expected outputs for those patterns. An example of this is that the patterns may be a list of quantities for different technical indicators regarding a security and the potential outputs may be the categories <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_59d89b9f966fcded6f2b1eda95f622e4.gif\" class=\"tex\" alt=\"\\{BUY, HOLD, SELL\\}\" /></span>.</span></p>\n<p><span>A hidden layer is one which receives as inputs the outputs from another layer; and for which the outputs form the inputs into yet another layer. So what do these hidden layers do? One interpretation is that they extract salient features in the input data which have predictive power with respect to the outputs. This is called <a href=\"https://en.wikipedia.org/?title=Feature_extraction\">feature extraction</a> and in a way it performs a similar function to statistical techniques such as <a href=\"http://www.turingfinance.com/artificial-intelligence-and-statistics-principal-component-analysis-and-self-organizing-maps/\">principal component analysis.</a></span></p>\n<p><span>Deep neural networks have a large number of hidden layers and are able to extract much deeper features from the data. Recently, deep neural networks have performed particularly well for <a href=\"https://gigaom.com/2013/08/16/were-on-the-cusp-of-deep-learning-for-the-masses-you-can-thank-google-later/\">image recognition problems</a>. An illustration of feature extraction in the context of image recognition is shown below,</span></p>\n<p><img class=\"aligncenter size-full wp-image-5863\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/05/viz-features.png\" alt=\"viz-features\" width=\"682\" height=\"371\" /></p>\n<p><span>I think that one of the problems facing the use of deep neural networks for trading (in addition to the <a href=\"http://www.turingfinance.com/perils-optimization-in-investment-management/\">obvious risk of overfitting</a>) is that the inputs into the neural network are almost always heavily pre-processed meaning that there may be few features to actually extract because the inputs are already to some extent features.</span></p>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dotted\" /><h5><span>Learning Rules</span></h5>\n<p><span>As mentioned previously the objective of the neural network is to minimize some measure of error, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_92e4da341fe8f4cd46192f21b6ff3aa7.gif\" class=\"tex\" alt=\"\\epsilon\" /></span>. The most common measure of error is sum-squared-error although this metric is sensitive to outliers and may be less appropriate than <a href=\"https://en.wikipedia.org/wiki/Tracking_error\">tracking error</a> in the context of financial markets.</span></p>\n<p><span>Sum squared error (SSE), <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_78871f4eb4c326fc35d3f14e1688a787.gif\" class=\"tex\" alt=\"\\epsilon = \\sum^{P_T}_{p=1} \\big ( t_p - o_p \\big )^2\" /></span></span></p>\n<p><span>Given that the objective of the network is to minimize <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_92e4da341fe8f4cd46192f21b6ff3aa7.gif\" class=\"tex\" alt=\"\\epsilon\" /></span> we can use an optimization algorithm to adjust the weights in the neural network. The most common learning algorithm for neural networks is the gradient descent algorithm although other and potentially better optimization algorithms can be used. </span><span>Gradient descent works by calculating the partial derivative of the error with respect to the weights for each layer in the neural network and then moving in the opposite direction to the gradient (because we want to <em>minimize</em> the error of the neural network). By minimizing the error we maximize the performance of the neural network <em>in-sample</em>.</span></p>\n<p><span>Expressed mathematically the update rule for the weights in the neural network (<span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_794e475083e0f742f2c50a58b3c30ca7.gif\" class=\"tex\" alt=\"\\textbf{v}\" /></span>) is given by,</span></p>\n<p><span><span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_3c5854b6a8fb21a24547ea8e1dbf688d.gif\" class=\"tex\" alt=\"v_i(t) = v_i(t - 1) + \\delta v_i(t)\" /></span> where</span></p>\n<p><span><span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_8075dd6a361f291200eb4ea0f5d1a335.gif\" class=\"tex\" alt=\"\\delta v_i(t) = \\eta(-\\frac{\\partial \\epsilon}{\\partial v_i})\" /></span> where</span></p>\n<p><span><span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_5a0c243d71e7daf682b85386d2cb91c1.gif\" class=\"tex\" alt=\"\\frac{\\partial \\epsilon}{\\partial v_i} = -2(t_p - o_p) \\frac{\\partial f}{\\partial net_p}z_{i,p}\" /></span></span></p>\n<p><span>where <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_ffe9f913124f345732e9f00fa258552e.gif\" class=\"tex\" alt=\"\\eta\" /></span> is the learning rate which controls how quickly or slowly the neural network converges. It is worth nothing that the calculation of the partial derivative of <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_8fa14cdd754f91cc6554c9e71929cce7.gif\" class=\"tex\" alt=\"f\" /></span> with respect to the net input signal for a pattern <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_83878c91171338902e0fe0fb97a8c47a.gif\" class=\"tex\" alt=\"p\" /></span> represents a problem for any discontinuous activation functions; which is one reason why alternative optimization algorithms may be used. The choice of learning rate has a large impact on the performance of the neural network. Small values for <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_ffe9f913124f345732e9f00fa258552e.gif\" class=\"tex\" alt=\"\\eta\" /></span> may result in very slow convergence whereas high values for <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_ffe9f913124f345732e9f00fa258552e.gif\" class=\"tex\" alt=\"\\eta\" /></span> could result in a lot of variance in the training.</span></p>\n<div class=\"one_half\">\n<p><img class=\"aligncenter size-full wp-image-5884\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/05/Small-Learning-Rate1.gif\" alt=\"Small Learning Rate\" width=\"344\" height=\"220\" /></p>\n</div>\n<div class=\"one_half column-last\">\n<p><img class=\"aligncenter size-full wp-image-5885\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/05/High-Learning-Rate1.gif\" alt=\"High Learning Rate\" width=\"346\" height=\"221\" /></p>\n</div>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dotted\" /><h5><span>Summary</span></h5>\n<p><span>Despite what some of the statisticians I have met in my time believe, neural networks are not just a \"weak form of statistics for lazy analysts\" (<em>I have actually been told this before and it was quite funny</em>); neural networks represent an abstraction of solid statistical techniques which date back hundreds of years. For a fantastic explanation of the statistics behind neural networks I recommend <a href=\"http://page.mi.fu-berlin.de/rojas/neural/chapter/K9.pdf\">reading this chapter</a>. That having been said I do agree that some practitioners like to treat neural networks as a \"black box\" which can be thrown at any problem without first taking the time to understand the nature of the problem and whether or not neural networks are an appropriate choice. An example of this is the use of neural networks for trading; markets are dynamic yet neural networks assume the distribution of input patterns remains stationary over time. This is discussed in <a href=\"http://www.turingfinance.com/perils-optimization-in-investment-management/\">more detail here</a>. </span></p>\n<p><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#top\">Back to the top</a></span></p>\n\n<h3><a></a>3. Neural networks come in many architectures</h3>\n<p><span>Up until now we have just discussed the most simple neural network architecture, namely the multi-layer perceptron. There are many different neural network architectures (far too many to mention here) and the performance of any neural network is a function of its architecture and weights. Many modern day advances in the field of machine learning do not come from rethinking the way that perceptrons and optimization algorithms work but rather from being creative regarding how these components fit together. Below I discuss some very interesting and creative neural network architectures which have been developed over time, </span></p>\n<p><span><span><a href=\"http://en.wikipedia.org/wiki/Recurrent_neural_network\">Recurrent Neural Networks</a></span> - some or all connections flow backwards meaning that feed back loops exist in the network. These networks are believed to perform better on time series data. As such, they may be particularly relevant in the context of the financial markets. For more information here is a link to a fantastic article entitled, <em><a href=\"http://karpathy.github.io/2015/05/21/rnn-effectiveness/\">The unreasonable performance of recurrent [deep] neural networks</a></em>.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2192 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Recurrent-Neural-Network-Architectures.png\" alt=\"Recurrent Neural Network Architectures\" width=\"941\" height=\"348\" /><p class=\"wp-caption-text\"><span>This diagram shows three popular recurrent Neural Network Architectures namely the Elman neural network, the Jordan neural network, and the Hopfield single-layer neural network.</span></p></div>\n<p><span>A more recent interesting recurrent neural network architecture is the <a href=\"http://arxiv.org/pdf/1410.5401.pdf\">Neural Turing Machine</a>. This network combines a recurrent neural network architecture with memory. It has been shown that these neural networks are Turing complete and were able to learn sorting algorithms and other computing tasks.</span></p>\n<p><span><span><a href=\"http://en.wikipedia.org/wiki/Boltzmann_machine\">Boltzmann neural network</a></span> - one of the first fully connected neural networks was the Boltzmann neural network a.k.a Boltzmann machine. These networks were the first networks capable of learning internal representations and solving very difficult combinatoric problems. One interpretation of the Boltzmann machine is that it is a Monte Carlo version of the Hopfield recurrent neural network. Despite this, the neural network can be quite difficult to train but when constrained they can prove more efficient than traditional neural networks. The most popular constraint on Boltzmann machines is to disallow direct connections between hidden neurons. This particular architecture is referred to as a <a href=\"https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine\">Restricted Boltzmann Machine</a>, which are used in <a href=\"http://deeplearning.net/tutorial/rbm.html\">Deep Botlzmann Machines</a>.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2193\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Boltzmann-Machine.png\" alt=\"Boltzmann Machine\" width=\"1200\" height=\"660\" /><p class=\"wp-caption-text\"><span>This diagram shows how different Boltzmann Machines with connections between the different nodes can significantly affect the results of the neural network (graphs to the right of the networks)</span></p></div>\n<p><span><a href=\"http://en.wikipedia.org/wiki/Deep_neural_network#Deep_neural_networks\"><span>Deep neural networks</span></a> - there are neural networks with multiple hidden layers. Deep neural networks have become extremely popular in more recent years due to their unparalleled success in image and voice recognition problems. The number of <a href=\"https://en.wikipedia.org/wiki/Deep_learning#Deep_learning_architectures\">deep neural network architectures</a> is growing quite quickly but some of the most popular architectures include <a href=\"https://en.wikipedia.org/wiki/Deep_belief_network\">deep belief networks</a>, <a href=\"https://en.wikipedia.org/wiki/Convolutional_neural_network\">convolutional neural networks</a>, deep restricted Boltzmann machines, stacked auto-encoders, and many more. One of the biggest problems with deep neural networks, especially in the context of financial markets which are non-stationary, is overfitting. More more info see <a href=\"http://deeplearning.net/reading-list/tutorials/\">DeepLearning.net</a>.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2189 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Deep-Neural-Network-Cat2.png\" alt=\"Deep Neural Network Cat\" width=\"670\" height=\"329\" /><p class=\"wp-caption-text\"><span>This diagram shows a deep neural network which consists of multiple hidden layers.</span></p></div>\n<p><span><a href=\"http://www.sciencedirect.com/science/article/pii/S0169207004001116\"><span>Adaptive neural networks</span></a> - are neural networks which simultaneously adapt and optimize their architectures whilst learning. This is done by either growing the architecture (adding more hidden neurons) or shrinking it (pruning unnecessary hidden neurons). I believe that adaptive neural networks are most appropriate for financial markets because markets are non-stationary. I say this because the features extracted by the neural network may strengthen or weaken over time depending on market dynamics. The implication of this is that  any architecture which worked optimally in the past would need to be altered to work optimally today.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2208 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Adaptive-architecture-neural-networks.png\" alt=\"Adaptive architecture neural networks\" width=\"790\" height=\"357\" /><p class=\"wp-caption-text\"><span>This diagram shows two different types of adaptive neural network architectures. The left image is a cascade neural network and the right image is a self-organizing map.</span></p></div>\n<p><span><span><a href=\"http://en.wikipedia.org/wiki/Radial_basis_function_network\">Radial basis networks</a></span> - although not a different type of architecture in the sense of perceptrons and connections, radial basis functions make use of radial basis functions as their activation functions, these are real valued functions whose output depends on the distance from a particular point. The most commonly used radial basis functions is the Gaussian distribution. Because radial basis functions can take on much more complex forms, they were originally used for performing function interpolation. As such, a radial basis function neural network can have a much higher information capacity. Radial basis functions are also used in the kernel of a <a href=\"http://en.wikipedia.org/wiki/Support_vector_machine\">Support Vector Machine</a>.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2246 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Radial-basis-function-fitting1.png\" alt=\"Radial basis function fitting\" width=\"1125\" height=\"346\" /><p class=\"wp-caption-text\"><span>This diagram shows how curve fitting can be done using radial basis functions</span></p></div>\n<p><span>In summary, many hundreds of neural network architectures exist and the performance of one neural network can be significantly superior to another. As such, quantitative analysts interested in using neural networks should probably test multiple neural network architectures and consider combining their outputs together in an ensemble to maximize their investment performance. I recommend reading my article, <em><a href=\"http://www.turingfinance.com/perils-optimization-in-investment-management/\">All Your Models are Wrong, 7 Sources of Model Risk</a></em>, before using Neural Networks for trading because many of the problems still apply.</span></p>\n<p><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#top\">Back to the top</a></span></p>\n\n<h3><a></a>4. Size matters, but bigger isn\'t always better</h3>\n<p><span>Having selected an architecture one must then decide how large or small the neural network should be. How many inputs are there? How many hidden neurons should be used? How many hidden layers should be used (if we are using a deep neural network)? And how many outputs neurons are required? </span><span>The reasons why these questions are important is because if the neural network is too large (too small) the neural network could potentially overfit (underfit) the data meaning that the network would not generalize well out of sample.</span></p>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dotted\" /><h5><span>How many and which inputs should be used?</span></h5>\n<p><span>The number of inputs depends on the problem being solved, the quantity and quality of available data, and perhaps some creativity. Inputs are simply variables which we believe have some predictive power over the dependent variable being predicted. If the inputs to a problem are unclear, you can systematically determine which variables should be included by looking at the correlations and cross-correlation between potential independent variables and the dependent variables. This approach is detailed in the article, <em><a href=\"http://www.turingfinance.com/what-drives-real-gdp-growth-part-one/\">What Drives Real GDP Growth?</a></em></span></p>\n<p><span>There are two problems with using correlations to select input variables. Firstly, if you are using a linear correlation metric you may inadvertently exclude useful variables. Secondly, two relatively uncorrelated variables could potentially be combined to produce a strongly correlated variable. If you look at the variables in isolation you may miss this opportunity. To overcome the second problem you could use <a href=\"http://www.turingfinance.com/artificial-intelligence-and-statistics-principal-component-analysis-and-self-organizing-maps/\">principal component analysis</a> to extract useful eigenvectors (linear combinations of the variables) as inputs. That said a problem with this is that the eigenvectors may not generalize well and they also assume the distributions of input patterns is stationary.</span></p>\n<p><span>Another problem when selecting variables is multicollinearity. Multicollinearity is when two or more of the independent variables being fed into the model are highly correlated. In the context of regression models this may cause regression co-efficients to change erratically in response to small changes in the model or the data. Given that neural networks and regression models are similar I suspect this is also a problem for neural networks. </span></p>\n<p><span>Last, but not least, one statistical bias which may be introduced when selecting variables is <a href=\"http://www.turingfinance.com/perils-optimization-in-investment-management/\">omitted-variable bias</a>. Omitted variable bias occurs when a model is created which leaves out one or more important causal variables. The bias is created when the model incorrectly compensates for the missing variable by over or underestimating the effect of one of the other variables i.e. the weights may become too large on these variables or SSE will be large. </span></p>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dotted\" /><h5><span>How many hidden neurons should I use?</span></h5>\n<p><span>The optimal number of hidden units is <span>problem specific</span>. That said, as a general rule of thumb the more hidden units used the more probable the risk of overfitting becomes. Overfitting is when the neural network does not learn the underlying statistical properties of the data, but rather \'memorizes\' the patterns and any noise they may contain. This results in neural networks which perform well in sample but poorly out of sample. So how can we avoid overfitting? There are two popular approaches used in industry namely early stopping and regularization and then there is my personal favourite approach, global search,</span></p>\n<div class=\"one_half\">\n<p><span><a href=\"https://en.wikipedia.org/wiki/Early_stopping\">Early stopping</a> involves splitting your training set into the main training set and a validation set. Then instead of training a neural network for a fixed number of iterations, you train then until the performance of the neural network on the validation set begins to deteriorate. Essentially this prevents the neural network from using all of the available parameters and limits it\'s ability to simply memorize every pattern it sees. The image on the right shows two potential stopping points for the neural network (a and b).</span></p>\n</div>\n<div class=\"one_half column-last\">\n<p><img class=\"aligncenter wp-image-5874\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/05/Early-Stopping.png\" alt=\"Early Stopping\" width=\"243\" height=\"200\" /></p></div><span>The image below shows the performance and over-fitting of the neural network when stopped at a or b,</span>\n<p><img class=\"aligncenter size-large wp-image-5875\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/05/Early-Stopping-II-1024x397.png\" alt=\"Early Stopping II\" width=\"620\" height=\"240\" /></p>\n<p><span>Regularization penalizes the neural network for using complex architectures. Complexity in this approach is measured by the size of the neural network weights. Regularization is done by adding a term to sum squared error objective function which depends on the size of the weights. This is the equivalent of adding a prior which essentially makes the neural network believe that the function it is approximating is smooth,</span></p>\n<p><span><span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_0a104478aca38aaefe25bbc58127f1cb.gif\" class=\"tex\" alt=\"\\epsilon = \\beta \\sum^{P_T}_{p=1} \\big ( t_p - o_p \\big )^2 + \\alpha \\sum^n_{j=1} v_j^2\" /></span></span></p>\n<p><span>where <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_7b8b965ad4bca0e41ab51de7b31363a1.gif\" class=\"tex\" alt=\"n\" /></span> is the number of weights in the neural network. The parameters <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_7b7f9dbfea05c83784f8b85149852f08.gif\" class=\"tex\" alt=\"\\alpha\" /></span> and <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_b0603860fcffe94e5b8eec59ed813421.gif\" class=\"tex\" alt=\"\\beta\" /></span> control the degree to which the neural network over or underfits the data. Good values for <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_7b7f9dbfea05c83784f8b85149852f08.gif\" class=\"tex\" alt=\"\\alpha\" /></span> and <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_b0603860fcffe94e5b8eec59ed813421.gif\" class=\"tex\" alt=\"\\beta\" /></span> can be derived using Bayesian analysis and optimization. This, and the above, are explained in considerably more detail in this <a href=\"http://hagan.okstate.edu/NNDesign.pdf#page=469\">brilliant chapter</a>.</span></p>\n<p><img class=\"aligncenter size-large wp-image-5876\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/05/Neural-Network-Regularization-1024x800.png\" alt=\"Neural Network Regularization\" width=\"620\" height=\"484\" /></p>\n<p><span>My favourite technique, which is also by far the most computationally expensive, is global search. In this approach a search algorithm is used to try different neural network architectures and arrive at a near optimal choice. This is most often done using genetic algorithms which are discussed further on in this article. </span></p>\n\n<h5><span>What Are the Outputs?</span></h5>\n<p><span>Neural networks can be used for either regression or classification. Under regression model a single value is outputted which may be mapped to a set of real numbers meaning that only one output neuron is required. Under classification model an output neuron is required for each potentially class to which the pattern may belong. If the classes are unknown unsupervised neural network techniques such as self organizing maps should be used.</span></p>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dotted\" /><p><span>In conclusion, the best approach is to follow <a href=\"https://en.wikipedia.org/wiki/Occam\'s_razor\">Ockhams Razor.</a> Ockham\'s razor argues that for two models of equivalent performance, the model with fewer free parameters will generalize better. On the other hand, one should never opt for an overly simplistic model at the cost of performance. Similarly, one should not assume that just because a neural network has more hidden neurons and maybe more hidden layers it will outperform a much simpler network. Unfortunately it seems to me that too much emphasis is placed on large networks and too little emphasis is placed on making good design decisions. In the case of neural networks, bigger isn\'t always better. </span></p>\n\n<p><span></span></p><div class=\"one_half column-last\">\n\n<blockquote>\n<p><span>Entities must not be reduced to the point of inadequacy - <a href=\"https://en.wikipedia.org/wiki/Karl_Menger\">Karl Menger</a></span></p>\n</blockquote>\n</div>\n<p><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#top\">Back to the top</a></span></p>\n\n<h3><a></a>5. Many training algorithms exist for neural networks</h3>\n<p><span>The learning algorithm of a neural network tries to optimize the neural network\'s weights until some stopping condition has been met. This condition is typically either when the error of the network reaches an acceptable level of accuracy on the training set, when the error of the network on the validation set begins to deteriorate, or when the specified computational budget has been exhausted. The most common learning algorithm for neural networks is the <a href=\"http://en.wikipedia.org/wiki/Backpropagation\">backpropagation</a> algorithm which uses <a href=\"http://en.wikipedia.org/wiki/Stochastic_gradient_descent\">stochastic gradient descent</a> which was discussed earlier on in this article. Backpropagation consists of two steps:</span></p>\n<ol><li><span><span>The feedforward pass</span> -  the training data set is passed through the network and the output from the neural network is recorded and the error of the network is calculated</span></li>\n<li><span><span>Backward propagation</span> - the error signal is passed back through the network and the weights of the neural network are optimized using gradient descent.</span></li>\n</ol><p><span>The are some problems with this approach. Adjusting all the weights at once can result in a <a href=\"http://changelog.ca/quote/2011/11/21/why_is_back-propagation_learning_so_slow\">significant movement</a> of the neural network in weight space, the gradient descent algorithm is quite slow, and is susceptible to local minima. Local minima are a problem for specific types of neural networks including all product link neural networks. The first two problems can be addressed by using <a href=\"https://en.wikipedia.org/?title=Gradient_descent#Extensions\">variants of gradient descent</a> including momentum gradient descent (QuickProp), Nesterov\'s Accelerated Momentum (NAG) gradient descent, the <a href=\"http://www.magicbroom.info/Papers/DuchiHaSi10.pdf\">Adaptive Gradient Algorithm</a> (AdaGrad), Resilient Propagation (RProp), and <a href=\"http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf\">Root Mean Squared Propagation</a> (RMSProp). As can be seen from the image below significant improvements can be made on the classical gradient descent algorithm. </span></p>\n<p><img class=\"aligncenter wp-image-5864 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/05/Long-Valley-Training-Algorithms.gif\" alt=\"Long Valley Training Algorithms\" width=\"620\" height=\"480\" /></p>\n<p><span>That having been said, these algorithms cannot overcome local minima and are also less useful when trying to optimize both the architecture and weights of the neural network concurrently. In order to achieve this global optimization algorithms are needed. Two popular global optimization algorithms are the Particle Swarm Optimization (PSO) and the Genetic Algorithm (GA). Here is how they can be used to train neural networks:</span></p>\n<p><span><span>Neural network vector representation</span> - by encoding the neural network as a vector of weights, each representing the weight of a connection in the neural network, we can train neural networks using most meta-heuristic search algorithms. This technique does not work well with deep neural networks because the vectors become too large.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2294 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Vector-Representation-Neural-Network1.png\" alt=\"Vector Representation Neural Network\" width=\"1200\" height=\"544\" /><p class=\"wp-caption-text\"><span>This diagram illustrates how a neural network can be represented in a vector notation and related to the concept of a search space or fitness landscape.</span></p></div>\n<p><span><a href=\"http://en.wikipedia.org/wiki/Particle_swarm_optimization\"><span>Particle Swarm Optimization</span></a> - to train a neural network using a PSO we construct a population / swarm of those neural networks. Each neural network is represented as a vector of weights and is adjusted according to it\'s position from the global best particle and it\'s personal best.</span></p>\n<p><span>The fitness function is calculated as the sum-squared error of the reconstructed neural network after completing one feedforward pass of the training data set. The main consideration with this approach is the velocity of the weight updates. This is because if the weights are adjusted too quickly, the sum-squared error of the neural networks will stagnate and no learning will occur.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2316 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Particle-Swarm-Optimization-Single-Swarm.png\" alt=\"Particle Swarm Optimization Single Swarm\" width=\"1200\" height=\"579\" /><p class=\"wp-caption-text\"><span>This diagram shows how particles are attracted to one another in a single swarm Particle Swarm Optimization algorithm.</span></p></div>\n<p><span><a href=\"http://en.wikipedia.org/wiki/Genetic_algorithm\"><span>Genetic Algorithm</span></a> - to train a neural network using a genetic algorithm we first construct a population of vector represented neural networks. Then we apply the three genetic operators on that population to evolve better and better neural networks. These three operators are,</span></p>\n<ol><li><span><a href=\"http://en.wikipedia.org/wiki/Selection_(genetic_algorithm)\">Selection</a> - Using the sum-squared error of each network calculated after one feedforward pass, we rank the population of neural networks. The top x% of the population are selected to \'survive\' to the next generation and be used for crossover.</span></li>\n<li><span><a href=\"http://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)\">Crossover</a> - The top x% of the population\'s genes are allowed to cross over with one another. This process forms \'offspring\'. In context, each offspring will represent a new neural network with weights from both of the \'parent\' neural networks.</span></li>\n<li><span><a href=\"http://en.wikipedia.org/wiki/Mutation_(genetic_algorithm)\">Mutation</a> - this operator is required to maintain genetic diversity in the population. A small percentage of the population are selected to undergo mutation. Some of the weights in these neural networks will be adjusted randomly within a particular range.</span></li>\n</ol><div class=\"wp-caption aligncenter\"><img class=\"wp-image-2320 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Genetic-Algorithm1.png\" alt=\"Genetic Algorithm\" width=\"961\" height=\"512\" /><p class=\"wp-caption-text\"><span>This algorithm shows the selection, crossover, and mutation genetic operators being applied to a population of neural networks represented as vectors.</span></p></div>\n<p><span>In addition to these population-based metaheuristic search algorithms, other algorithms have been used to train of neural networks including backpropagation with added momentum, <a href=\"http://en.wikipedia.org/wiki/Differential_evolution\">differential evolution</a>, <a href=\"http://en.wikipedia.org/wiki/Levenberg_Marquardt\">Levenberg Marquardt</a>, <a href=\"http://en.wikipedia.org/wiki/Simulated_annealing\">simulated annealing</a>, and many <a href=\"http://page.mi.fu-berlin.de/rojas/neural/chapter/K8.pdf\">more</a>. Personally I would recommend using a combination of local and global optimization algorithms to overcome the shortcomings of both.</span></p>\n<p><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#top\">Back to the top</a></span></p>\n\n<h3><a></a>6. Neural networks do not always require a lot of data</h3>\n<p><span>Neural networks can use one of three learning strategies namely a supervised learning strategy, an unsupervised learning strategy, or a reinforcement learning strategy. </span><span><a href=\"http://en.wikipedia.org/wiki/Supervised_learning\">Supervised learning</a> require at least two data sets, a training set which consists of inputs with the expected output, and a testing set which consists of inputs without the expected output. Both of these data sets must consist of labelled data i.e. data patterns for which the target is known upfront. </span><span><a href=\"http://en.wikipedia.org/wiki/Unsupervised_learning\">Unsupervised learning</a> strategies are typically used to discover hidden structures (such as hidden Markov chains) in unlabeled data. They behave in a similar way to clustering algorithms. <a href=\"http://en.wikipedia.org/wiki/Reinforcement_learning\">Reinforcement learning</a> are based on the simple premise of rewarding neural networks for good behaviours and punishing them for bad behaviours. </span><span>Because unsupervised and reinforcement learning strategies do not require that data be labelled they can be applied to under-formulated problems where the correct output is not known.  </span></p>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dotted\" /><h5><span>Unsupervised Learning</span></h5>\n<p><span>One of the most popular unsupervised neural network architectures is the Self Organizing Map (also known as the Kohonen Map). Self Organizing Maps are essentially a multi-dimensional scaling technique which construct an approximation of the <a href=\"http://en.wikipedia.org/wiki/Probability_density_function\">probability density function</a> of some underlying data set, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_478a3af607f667c68c7fc285afbcca28.gif\" class=\"tex\" alt=\"\\textbf{Z}\" /></span>, whilst preserving the topological structure of that data set. </span><span>This is done by mapping input vectors, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_5267159d0e38d95b56e1d6d392b02ec9.gif\" class=\"tex\" alt=\"\\textbf{z}_i\" /></span>, in the data set, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_478a3af607f667c68c7fc285afbcca28.gif\" class=\"tex\" alt=\"\\textbf{Z}\" /></span>, to weight vectors, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_448f772ad2cd18a4f373ec934c5f4338.gif\" class=\"tex\" alt=\"\\textbf{v}_j\" /></span>, (neurons) in the feature map, <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_41eab3b96e5b6fe7596f4e087c180b48.gif\" class=\"tex\" alt=\"\\textbf{V}\" /></span>. Preserving the topological structure simply means that if two input vectors are close together in <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_478a3af607f667c68c7fc285afbcca28.gif\" class=\"tex\" alt=\"\\textbf{Z}\" /></span>, then the neurons to which those input vectors map in <span class=\"MathJax_Preview\"><img src=\"http://www.turingfinance.com/wp-content/plugins/latex/cache/tex_41eab3b96e5b6fe7596f4e087c180b48.gif\" class=\"tex\" alt=\"\\textbf{V}\" /></span> will also be close together. </span></p>\n<p><img class=\"aligncenter wp-image-3900 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/10/Self-Organizing-Feature-Map.gif\" alt=\"Dimensionality Reduction using Principal Component Analysis and Self Organizing Maps\" width=\"410\" height=\"290\" /></p>\n<p><span>For more information on self organizing maps and how they can be used to produce lower-dimensionality data sets <a href=\"http://www.turingfinance.com/artificial-intelligence-and-statistics-principal-component-analysis-and-self-organizing-maps/\">click here</a>. Another interesting application of SOM\'s is in colouring time series charts for stock trading. This is done to show what the market conditions are at that point in time. This <a href=\"http://cortex.snowcron.com/forex_som.htm#visualization\">website</a> provides a detailed tutorial and code snippets for implementing the idea for improved Forex trading strategies.</span></p>\n<hr class=\"wc-shortcodes-divider wc-shortcodes-item wc-shortcodes-divider-line-single wc-shortcodes-divider-style-dotted\" /><h5><span>Reinforcement Learning</span></h5>\n<p><span>Reinforcement learning strategies consist of three components. A policy which specifies how the neural network will make decisions e.g. using technical and fundamental indicators. A reward function which distinguishes good from bad e.g. making vs. losing money. And a value function which specifies the long term goal. In the context of financial markets (and game playing) reinforcement learning strategies are particularly useful because the neural network learns to optimize a particular quantity such as an appropriate <a href=\"http://www.turingfinance.com/computational-investing-with-python-week-one/\">measure of risk adjusted return</a>. </span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2379 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Reinforcement-Learning.png\" alt=\"Reinforcement Learning\" width=\"701\" height=\"360\" /><p class=\"wp-caption-text\"><span>This diagram shows how a neural network can be either negatively or positively reinforced.</span></p></div>\n<p><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#top\">Back to the top</a></span></p>\n\n<h3><a></a>7. Neural networks cannot be trained on any data</h3>\n<p><span>One of the biggest reasons why neural networks may not work is because people do not properly pre-process the data being fed into the neural network. Data normalization, removal of redundant information, and outlier removal should all be performed to improve the probability of good neural network performance.</span></p>\n<p><span><span><a href=\"http://en.wikipedia.org/wiki/Normalization_(statistics)\">Data normalization</a></span> - neural networks consist of various layers of perceptrons linked together by weighted connections. Each perceptron contains an activation function which each have an \'<a href=\"http://www.jatit.org/volumes/Vol47No3/61Vol47No3.pdf\">active range</a>\' (except for radial basis functions). Inputs into the neural network need to be scaled within this range so that the neural network is able to differentiate between different input patterns.</span></p>\n<p><span>For example, given a neural network trading system which receives indicators about a set of securities as inputs and outputs whether each security should be bought or sold. One of the inputs is the price of the security and we are using the Sigmoid activation function. </span><span>However, most of the securities cost between 5$ and 15$ per share and the output of the Sigmoid function approaches 1.0. So the output of the Sigmoid function will be be 1.0 for all securities, all of the perceptrons will \'fire\' and the neural network will not learn.</span></p>\n<blockquote>\n<p><span>Neural networks trained on unprocessed data produce models where \'the lights are on but nobody\'s home\'</span></p>\n</blockquote>\n<p><span><span><a href=\"http://en.wikipedia.org/wiki/Outlier#Exclusion\">Outlier removal</a></span> - an outlier is value that is much smaller or larger than most of the other values in some set of data. Outliers can cause problems with statistical techniques like regression analysis and curve fitting because when the model tries to \'accommodate\' the outlier, performance of the model across all other data deteriorates,</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2403 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Outlier-Removal.png\" alt=\"Outlier Removal\" width=\"513\" height=\"251\" /><p class=\"wp-caption-text\"><span>This diagram shows the effect of removing an outlier from the training data for a linear regression. The results are comparable for neural networks. Image source: https://statistics.laerd.com/statistical-guides/img/pearson-6.png</span></p></div>\n<p><span>The illustration shows that trying to accommodate an outlier into the linear regression model results in a poor fits of the data set. The effect of outliers on non-linear regression models, including neural networks,  is similar. Therefore it is good practice is to remove outliers from the training data set. That said, identifying outliers is a challenge in and of itself, this <a href=\"https://www.siam.org/meetings/sdm10/tutorial3.pdf\">tutorial</a> and <a href=\"http://www.eng.tau.ac.il/~bengal/outlier.pdf\">paper</a> discuss existing techniques for outlier detection and removal.</span></p>\n<p><span><span><a href=\"http://en.wikipedia.org/wiki/Redundancy_(information_theory)\">Remove redundancy</a></span> - when two or more of the independent variables being fed into the neural network are highly correlated (multiplecolinearity) this can negatively affect the neural networks learning ability. Highly correlated inputs also</span><span> mean that the amount of unique information presented by each variable is small, so the less significant input can be removed. Another benefit to removing redundant variables is faster training times. </span><span>Adaptive neural networks can be used to prune redundant connections and perceptrons.</span></p>\n<p><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#top\">Back to the top</a></span></p>\n\n<h3><a></a>8. Neural networks may need to be retrained</h3>\n<p><span>Given that you were able to train a neural network to trade successfully in and out of sample this neural network may still stop working over time. This is not a poor reflection on neural networks but rather an accurate reflection of the financial markets. Financial markets are complex adaptive systems meaning that they are constantly changing so what worked yesterday may not work tomorrow. This characteristic is called non-stationary or dynamic optimization problems and neural networks are not particularly good at handling them.</span></p>\n<p><span>Dynamic environments, such as financial markets, are extremely difficult for neural networks to model. Two approaches are either to keep retraining the neural network over-time, or to use a dynamic neural network. Dynamic neural networks \'track\' changes to the environment over time and adjust their architecture and weights accordingly. They are adaptive over time. </span><span>For dynamic problems, multi-solution meta-heuristic optimization algorithms can be used to track changes to local optima over time. One such algorithm is the <a href=\"http://en.wikipedia.org/wiki/Multi-swarm_optimization\">multi-swarm optimization</a> algorithm, a derivative of the particle swarm optimization. Additionally, genetic algorithms with enhanced diversity or memory have also been shown to be robust in dynamic environments.</span></p>\n<p><span>The illustration below demonstrates how a genetic algorithm evolves over time to find new optima in a dynamic environment. This illustration also happens to mimic trade crowding which is when market participants crowd a profitable trading strategy, thereby exhausting trading opportunities causing the trade to become less profitable.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2418 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Dynamic-Environment.gif\" alt=\"Dynamic Environment\" width=\"640\" height=\"360\" /><p class=\"wp-caption-text\"><span>This animated image shows a dynamic fitness landscape (search space) change over time. Image source: http://en.wikipedia.org/wiki/Fitness_landscape</span></p></div>\n<p><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#top\">Back to the top</a></span></p>\n\n<h3><a></a>9. Neural networks are not black boxes</h3>\n<p><span>By itself a neural network is a <a href=\"http://en.wikipedia.org/wiki/Black_box\">black-box</a>. This presents problems for people wanting to use them. For example, fund managers wouldn\'t know how a neural network makes trading decisions, so it is impossible to assess the risks of the trading strategies learned by the neural network. Similarly, banks using neural networks for credit risk modelling would not be able to justify why a customer has a particular credit rating, which is a regulatory requirement. </span><span>That having been said, state of the art <a href=\"https://www.google.co.za/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;cad=rja&amp;uact=8&amp;ved=0CEcQFjAC&amp;url=http%3A%2F%2Fwww.mini.pw.edu.pl%2F~mandziuk%2F09-02-06.ppt&amp;ei=DSRiU_-oEoev7AaQtoEI&amp;usg=AFQjCNHnNR7aNo_EMWcDya4ENk5JDG3cSA&amp;sig2=vA7JyJ-uYZqxxWaITp-leg&amp;bvm=bv.65636070,d.ZGU\">rule-extraction algorithms</a> have been developed to vitrify some neural network architectures. These algorithms extract knowledge from the neural networks as either mathematical expressions, symbolic logic, fuzzy logic, or decision trees.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2435 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Black-box1.png\" alt=\"Black box\" width=\"624\" height=\"436\" /><p class=\"wp-caption-text\"><span>This image shows a neural network as a black box and how it related to rule extraction techniques.</span></p></div>\n<p><span><a href=\"http://www.sciencedirect.com/science/article/pii/S0893608002000898\"><span>Mathematical rules</span></a> - algorithms have been developed which can extract multiple linear regression lines from neural networks. The problem with these techniques is that the rules are often still difficult to understand, therefore these do not solve the \'black-box\' problem.</span></p>\n<p><span><a href=\"http://en.wikipedia.org/wiki/Propositional_logic\"><span>Propositional logic</span></a> - propositional logic is a branch of mathematical logic which deals with operations done on discrete valued variables. These variables, such as A or B, are often either TRUE or FALSE, but they could occupy values within a discrete range e.g. {BUY,HOLD,SELL}.</span></p>\n<p><span>Logical operations can then be applied to those variables such as OR, AND, and XOR. The results are called predicates which can also be quantified over sets using the exists or for-all quantifiers. This is the difference between predicate and propositional logic. </span><span>If we had a simple neural network which Price (P), Simple Moving Average (SMA), and Exponential Moving Average (EMA) as inputs and we extracted a trend following strategy from the neural network in propositional logic, we might get rules like this,</span></p>\n<p><span><img class=\"aligncenter size-full wp-image-2446\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Propositional-Logic-Example.gif\" alt=\"Propositional Logic Example\" width=\"398\" height=\"51\" /></span></p>\n<p><span><span><a href=\"http://en.wikipedia.org/wiki/Fuzzy_logic\">Fuzzy logic</a></span> - fuzzy logic is where probability and propositional logic meet. The problem with propositional logic is that is deals in absolutes e.g. BUY or SELL, TRUE or FALSE, 0 or 1. Therefore for traders there is no way to determine the confidence of these results. </span><span>Fuzzy logic overcomes this limitation by introducing a membership function which specifies how much a variable belongs to a particular domain. For example, a company (GOOG) might belong 0.7 to the domain {BUY} and 0.3 to the domain {SELL}. </span><span>Combinations of neural networks and fuzzy logic are called <a href=\"http://en.wikipedia.org/wiki/Neuro-fuzzy\">Neuro-Fuzzy systems</a>. This <a href=\"http://www.ncbi.nlm.nih.gov/pubmed/18249802\">research survey</a> discusses various fuzzy rule extraction techniques.</span></p>\n<p><span><span><a href=\"http://en.wikipedia.org/wiki/Decision_tree\">Decision trees</a></span> - decision trees show how decisions are made when given certain information. This article describes how to evolve <a href=\"http://www.turingfinance.com/using-gp-to-evolve-security-analysis-decision-trees/\">security analysis decision trees using genetic programming</a>. Decision tree induction is the term given to the process of extracting decision trees from neural networks.</span></p>\n<div class=\"wp-caption aligncenter\"><img class=\"wp-image-2457 size-full\" src=\"http://www.turingfinance.com/wp-content/uploads/2014/04/Trading-Strategy-Decision-Tree.png\" alt=\"Trading Strategy Decision Tree\" width=\"950\" height=\"392\" /><p class=\"wp-caption-text\"><span>An example of a simple trading strategy represented using a decision tree. The triangular boxes represent decision nodes, these could be to BUY, HOLD, or SELL a company. Each box represents a tuple of &lt;indicator, inequality,=\"\" value=\"\"&gt;. An example might be &lt;sma,&gt;, 25&gt; or &lt;ema, &lt;=\",\" 30=\"\"&gt;.</span></p></div>\n<p><span><a href=\"http://www.turingfinance.com/misconceptions-about-neural-networks/#top\">Back to the top</a></span></p>\n\n<h3><a></a>10. Neural networks are not hard to implement</h3>\n<p><span>Speaking from personal experience, neural networks are quite difficult to code from scratch. Luckily for us, there are many existing open source and proprietary packages which contain implementations of different types of neural networks. However, for advanced topics, such as rule extraction, custom development is unavoidable.</span></p>\n<p><span><a href=\"http://www.heatonresearch.com/encog\"><span>Encog</span></a> - is an easy to use library containing implementations of many machine learning algorithms and neural networks. Encog is particularly nice because it offers an API which allows users to define new algorithms for training and creating adaptive neural networks.</span></p>\n<p><span><a href=\"http://pybrain.org/\"><span>PyBrain</span></a> - is a modular Machine Learning Library for Python which contains implementations of various neural networks. Python is great for financial modelling because it can be combined with statistical packages such as <a href=\"http://pandas.pydata.org/\">Pandas</a>, and <a href=\"http://www.scipy.org/scipylib/index.html\">SciPy</a>.</span></p>\n<p><span><a href=\"http://www.sas.com/en_us/software/analytics/enterprise-miner.html\"><span>SAS Enterprise Miner</span></a> - SAS is a proprietary statistical programming language used across the financial services industry. The SAS Enterprise Miner module contains an implementation of various neural networks and decision tree classification structures.</span></p>\n<p><span><a href=\"http://scikit-learn.org/stable/\"><span>Scikit Learn</span></a> - is another open source machine learning library for the Python programming language. Again, Python is great for financial mo',1),(40,'The Power of PCAP &amp; Retrospection in Practice - ProtectWise','https://www.protectwise.com/blog/the-power-of-pcap-and-retrospection-in-practice/',0,0,'<p>One of the core benefits of our Cloud Network DVR is that it creates a full fidelity network memory.  This memory provides two powerful capabilities:</p>\n\n<ol><li>The ability to validate and reconstruct security events quickly using full PCAP; and,</li>\n<li>The ability to continuously ‘go back in time’ to uncover previously unknown threats using the latest intelligence (what we refer to as retrospection).</li>\n</ol><p>In this post, I would like to provide some real world insight into how these capabilities provide our customers with improved detection and response capabilities that surpass what is provided by legacy security tools.</p>\n\n<p>Let me provide a few quick examples of how we see this working every day.</p>\n\n<p><strong>Retrospection &amp; Using Full PCAP for Validation</strong></p>\n\n<p>Over the past six months we’ve seen a significant increase in successful credential compromises via phishing websites.  Landing pages for common phishing sites are easy to detect with traditional IDS. However, subsequent flows in which the users give up their credentials tend to be undistinctive and may be missed. This leaves the security team unaware of whether or not the phishing attempt was successful.  </p>\n\n<p>With full PCAP, an analyst can examine all flows associated with a given IP to determine if a compromise occurred. Typically, attacks like this only affect an individual user’s personal security as opposed to the enterprise’s security.  However, the enterprise is put at risk when the user loses credentials associated with the enterprise’s domain.  This makes validating the activity more important as it exposes threats to shadow IT environments that are not otherwise protected.   </p>\n\n<p>For example, some Dropbox phishing sites have captured email credentials associated to a given company’s domain. If the user gives up access to a Dropbox account used for business purposes, they may be compromising their company’s data. Furthermore, if the user reuses the same username and password combination to access resources on their company’s network, an attacker can take advantage of authenticated access, which can be very difficult to detect.    </p>\n\n<p>As new phishing campaigns are deployed, we continually retrospect for evidence of successful attacks.  We have retrospectively discovered evidence of credential theft from phishing websites at 25% of our customers. In all cases, when we reported them they had been undiscovered by their existing security solutions. Phishing sites vary in sophistication with most of the successful sites going a long way to mimic the real site, typically borrowing resources directly from a legitimate page when loaded.  Figure 1 shows a PayPal landing page reconstructed from PCAP.  This page was in English except for a login button in French, despite this flaw it was still successful. </p>\n\n<p><img src=\"https://s3.amazonaws.com/www.protectwise.com/u/132/large/webshell-blog-post-figure-1.png\" alt=\"webshell-blog-post-figure-1.png\" /></p>\n\n<p><em>Fig 1. PayPal phishing landing page</em></p>\n\n<p>As mentioned earlier, when a user’s information is compromised the network traffic is pretty basic and doesn’t contain a enough distinctive elements to stand out from normal network traffic.   Furthermore, those elements change too frequently to be discoverable without retrospection.  Generally, the flows containing the evidence of compromise are separate from the ones requesting the page.  This means that if you’re using a solution that selectively captures PCAP solely for the flow requesting the landing page, you’re missing vital intelligence.  However, if an analyst has access to full PCAP, they can search all flows associated with the IP address in question for HTTP POST requests to server-side scripts like PHP, then search the POST body for evidence of compromise.  Figure 2 shows an example of this involving a Dropbox site.</p>\n\n<p><img src=\"https://s3.amazonaws.com/www.protectwise.com/u/133/large/webshell-blog-post-figure-2.png\" alt=\"webshell-blog-post-figure-2.png\" /></p>\n\n<p><em>Fig 2. HTTP POST request containing user credentials</em> </p>\n\n<p>Criminals often compromise legitimate web servers to host their phishing sites.  </p>\n\n<p>One of our customers was affected by this earlier this year.  The customer had a legitimate website which had an area designed for users to upload image files.  The uploaded files were not validated and an attacker took advantage of this by uploading a WSO webshell to the server. Once the webshell was deployed the intruder had full access to the server\'s file system.  </p>\n\n<p>Again, this is where the beauty of having rapid access to full PCAP has significant benefits. In this case, it made parsing C&amp;C commands and extraction of relevant resources possible.  The attacker used the webshell to upload and deploy multiple phishing sites.  Figure 3, shows a reconstruction of browser traffic, extracted from the PCAP, seen by the attacker as they uploaded and unzipped an archive to the compromised web server.  The zip file contained resources for a well designed USAA phishing site. </p>\n\n<p><img src=\"https://s3.amazonaws.com/www.protectwise.com/u/134/large/webshell-blog-post-figure-3.png\" alt=\"webshell-blog-post-figure-3.png\" /></p>\n\n<p><em>Fig 3. Reconstructed browser view of the attacker’s webshell interface</em> </p>\n\n<p>The resources of this phishing site contained some interesting intelligence on the attacker.  Figure 4, shows one of the extracted PHP file’s logic to send credentials, banking information, and PII to two separate gmail accounts via email.  Exposing this type of intelligence is useful for providing retrospection cues, and allowing the security team to look for newly discovered indicators in the past network history.</p>\n\n<p><img src=\"https://s3.amazonaws.com/www.protectwise.com/u/135/large/webshell-blog-post-figure-4.png\" alt=\"webshell-blog-post-figure-4.png\" /></p>\n\n<p><em>Fig 4. PHP file used to email victim’s information to the attacker</em></p>\n\n<p>While these types of phishing lures have been around for sometime, we are seeing an increase in the quality of the sites as well as the success rate.  These attacks can pose an elevated risk to the organization depending on the type of information that was stolen.  </p>\n\n<p>Retrospection can be used to check for compromises as new campaigns are discovered.  Upon discovery, full PCAP gives an analyst the ability to easily and rapidly validate the attacks, identify victims, and reconstruct resources used in the attack for additional intelligence.</p>',1),(41,'silentbicycle/guff','https://github.com/silentbicycle/guff',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>guff reads a stream of points from a file / stdin and plots them.</p>\n\n<p>guff is short for <a href=\"https://en.wikipedia.org/wiki/MacGuffin\">MacGuffin</a>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/silentbicycle/guff#plots-them\"><span class=\"octicon octicon-link\"></span></a>Plots them?</h2>\n\n<p>It can plot to stdout:</p>\n\n<pre><code>$ wc -l *.c | grep -v total | sort -nr | awk \'{print($1)}\' | ./guff -d 72x30\n    x: [0 - 15]    y: [0 - 302] -- 0: #\n+                                                                       \n#                                                                       \n|                                                                       \n|                                                                       \n|                                                                       \n+                                                                       \n|    #                                                                  \n|                                                                       \n|        #                                                              \n|                                                                       \n+             #                                                         \n|                  #                                                    \n|                      #                                                \n|                           #                                           \n|                                                                       \n+                                #                                      \n|                                                                       \n|                                    #                                  \n|                                                                       \n|                                                                       \n+                                                                       \n|                                                                       \n|                                         #    #                        \n|                                                  #                    \n|                                                       #               \n+                                                                       \n|                                                            #          \n|                                                                       \n|                                                                #    # \n+----+----+----+----+----+----+----+----+----+----+----+----+----+----+-\n\n\n$ ./guff -d 40x20 -m count test_sin\n    x: [0 - 720]    y: [-1 - 1]\n+                                       \n|                          ijjh         \n|                        9j1  2j8       \n|                       ba      ba      \n|                      98        98     \n+                     6a          b5    \n|                    1d            e    \n|                    e              e   \n|                   94              58  \n|                  2a                a2 \n6----+----+----+---d+----+----+----+--8-\n49                94                    \n|a3              49                     \n| e              e                      \n| 2c            d1                      \n+  78          96                       \n|   b6        7a                        \n|    d7      8c                         \n|     cg    hb                          \n|      3jjjj2                           \n</code></pre>\n\n<p>Or to SVG:</p>\n\n<pre><code>$  wc -l *.c | grep -v total | sort -nr | awk \'{print($1)}\' | ./guff -s -m line -r &gt; example.svg\n</code></pre>\n\n<p><a href=\"https://github.com/silentbicycle/guff/blob/master/example.png\"><img src=\"https://github.com/silentbicycle/guff/raw/master/example.png\" alt=\"\" /></a></p>\n\n<pre><code>cat &lt;&lt;EOF | ./guff -s -x -m count\n1 1\n1 2\n-2 -3\n3 -4\n-2 -3\n2 4\n3 -4\n1 2\n3 5\n-2 -3\n</code></pre>\n\n<p><a href=\"https://github.com/silentbicycle/guff/blob/master/example2.png\"><img src=\"https://github.com/silentbicycle/guff/raw/master/example2.png\" alt=\"\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/silentbicycle/guff#input-format\"><span class=\"octicon octicon-link\"></span></a>Input format</h2>\n\n<p>guff reads a stream of lines of floating point numbers, separated by a single character:</p>\n\n<pre><code>1 2.0 3\n</code></pre>\n\n<p>and</p>\n\n<pre><code>1,2,3\n</code></pre>\n\n<p>both read as 1.0, 2.0, 3.0.</p>\n\n<p>If multiple separators appear, then the value is treated as missing for that column\'s row:</p>\n\n<pre><code>1,,3\n</code></pre>\n\n<p>reads as 1.0, [missing value], 3.0.</p>\n\n<p>Any line beginning with \"/\" or \"#\" is ignored, and anything else that\n<code>strtod(3)</code> considers an ill-formatted number (e.g. \"-\") will lead to\nthe rest of the line being skipped.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/silentbicycle/guff#blank-lines\"><span class=\"octicon octicon-link\"></span></a>Blank lines</h3>\n\n<p>Blank lines make guff plot and reset. For example, guff can be used to\nconvert an infinite stream of data periodically broken up by blank lines\ninto an infinite stream of SVG plots, also broken up by blank lines.\n(The included script, <code>discretion</code>, splits these into timestamped SVG\nfiles and updates a symlink to the newest.)</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/silentbicycle/guff#why-write-another-plotter\"><span class=\"octicon octicon-link\"></span></a>Why write another plotter?</h2>\n\n<p>Not everything has graphic libraries installed (or a graphic environment at all),\nand sometimes it\'s helpful to get a rough feel for data\'s distribution from a\ntext-mode command line. SVG images can also be generated pretty easily.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/silentbicycle/guff#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<p>guff depends on on nothing besides a standard POSIX environment.</p>\n\n<p>To build it, type <code>make</code>.</p>\n\n<p>To run the tests, type <code>make test</code>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/silentbicycle/guff#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<pre><code>Usage: guff [-A] [-c] [-d WxH] [-f] [-h] [-l xyc]\n            [-m MODE] [-r] [-s] [-S] [-x] [FILE]\n</code></pre>\n\n<p>Common options:</p>\n\n<pre><code>-d WxH: set width and height (e.g. \"-d 72x40\", \"-d 640x480\")\n-f: flip x &amp; y axes in plot\n-h: print help message\n-l LOG: any of \'x\', \'y\', \'c\' -- set X, Y, and/or count to log scale\n-m MODE: dot, count, line (SVG only), default dot\n-s: render to SVG\n-x: treat first column as X for all following Y columns (def: use row count)\n</code></pre>\n\n<p>SVG only:</p>\n\n<pre><code>-c: use colorblind-safe default colors\n-r: draw linear regression lines\n</code></pre>\n\n<p>Other options (mostly for internal testing):</p>\n\n<pre><code>-A: don\'t draw axes\n-S: disable stream mode\n</code></pre>\n\n<p>For more details, see the man page.</p>\n',1),(42,'flowchart.js','http://adrai.github.io/flowchart.js/',1,0,'<h3>Usage</h3>\n        flowchart.js depends on <a href=\"http://raphaeljs.com/\">Raphaël</a><br />To use include the following:\n        <pre>&lt;script src=\"<a href=\"http://github.com/DmitryBaranovskiy/raphael/raw/master/raphael-min.js\">raphael-min.js</a>\"&gt;&lt;\n&lt;script src=\"<a href=\"http://adrai.github.io/flowchart.js/flowchart-latest.js\">flowchart-latest.js</a>\"&gt;&lt;/script&gt;\n</pre>\nYou can parse the text:\n<pre>\n&lt;div id=\"diagram\"&gt;&lt;/div&gt;\n&lt;script&gt;\n  var diagram = flowchart.parse(\"the code definition\");\n  diagram.drawSVG(\'diagram\');\n\n  // you can also try to pass options:\n\n  diagram.drawSVG(\'diagram\', {\n                              \'x\': 0,\n                              \'y\': 0,\n                              \'line-width\': 3,\n                              \'line-length\': 50,\n                              \'text-margin\': 10,\n                              \'font-size\': 14,\n                              \'font-color\': \'black\',\n                              \'line-color\': \'black\',\n                              \'element-color\': \'black\',\n                              \'fill\': \'white\',\n                              \'yes-text\': \'yes\',\n                              \'no-text\': \'no\',\n                              \'arrow-end\': \'block\',\n                              \'scale\': 1,\n                              // style symbol types\n                              \'symbols\': {\n                                \'start\': {\n                                  \'font-color\': \'red\',\n                                  \'element-color\': \'green\',\n                                  \'fill\': \'yellow\'\n                                },\n                                \'end\':{\n                                  \'class\': \'end-element\'\n                                }\n                              },\n                              // even flowstate support ;-)\n                              \'flowstate\' : {\n                                \'past\' : { \'fill\' : \'#CCCCCC\', \'font-size\' : 12},\n                                \'current\' : {\'fill\' : \'yellow\', \'font-color\' : \'red\', \'font-weight\' : \'bold\'},\n                                \'future\' : { \'fill\' : \'#FFFF99\'},\n                                \'request\' : { \'fill\' : \'blue\'},\n                                \'invalid\': {\'fill\' : \'#444444\'},\n                                \'approved\' : { \'fill\' : \'#58C4A3\', \'font-size\' : 12, \'yes-text\' : \'APPROVED\', \'no-text\' : \'n/a\' },\n                                \'rejected\' : { \'fill\' : \'#C45879\', \'font-size\' : 12, \'yes-text\' : \'n/a\', \'no-text\' : \'REJECTED\' }\n                              }\n                            });\n&lt;/script&gt;\n</pre>\n\n      <table align=\"center\" class=\"inner\"><tr><td>\n            <h3>Demo 2 with color coding (flowstate). Try editing me below</h3>\n            <div class=\"editor-wrapper\">\n<p>st=&gt;start: Start|past:&gt;http://www.google.com[blank]\ne=&gt;end: End|future:&gt;http://www.google.com\nop1=&gt;operation: My Operation|past\nop2=&gt;operation: Stuff|current\nsub1=&gt;subroutine: My Subroutine|invalid\ncond=&gt;condition: Yes\nor No?|approved:&gt;http://www.google.com\nc2=&gt;condition: Good idea|rejected\nio=&gt;inputoutput: catch something...|future\n\nst-&gt;op1(right)-&gt;cond\ncond(yes, right)-&gt;c2\ncond(no)-&gt;sub1(left)-&gt;op1\nc2(yes)-&gt;io-&gt;e\nc2(no)-&gt;op2-&gt;e</p>\n           </div>\n           \n            </td>\n            <td class=\"diagram diagram2\">This should be a diagram! If you don\'t see it you need Javascript enabled</td>\n          </tr></table><hr />',1),(44,'Artificial Neural Networks for Beginners Â» Loren on the Art of MATLAB','http://blogs.mathworks.com/loren/2015/08/04/artificial-neural-networks-for-beginners/',1,0,'<p><a href=\"https://en.wikipedia.org/wiki/Deep_learning\">Deep Learning</a> is a very hot topic these days especially in computer vision applications and you probably see it in the news and get curious. Now the question is, how do you get started with it? Today\'s guest blogger, Toshi Takeuchi, gives us a quick tutorial on <a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\">artificial neural networks</a> as a starting point for your study of deep learning.</p><h3>Contents</h3><h4>MNIST Dataset<a></a></h4><p>Many of us tend to learn better with a concrete example. Let me give you a quick step-by-step tutorial to get intuition using a popular <a href=\"http://yann.lecun.com/exdb/mnist/index.html\">MNIST handwritten digit dataset</a>. Kaggle happens to use this very dataset in the <a href=\"https://www.kaggle.com/c/digit-recognizer\">Digit Recognizer</a> tutorial competition. Let\'s use it in this example. You can download the competition dataset from <a href=\"https://www.kaggle.com/c/digit-recognizer/data\">\"Get the Data\"</a> page:</p><div><ul><li>train.csv - training data</li><li>test.csv  - test data for submission</li></ul></div><p>Load the training and test data into MATLAB, which I assume was downloaded into the current folder. The test data is used to generate your submissions.</p><pre class=\"codeinput\">tr = csvread(<span class=\"string\">\'train.csv\'</span>, 1, 0);                  \r\nsub = csvread(<span class=\"string\">\'test.csv\'</span>, 1, 0);                  \r\n</pre><p>The first column is the label that shows the correct digit for each sample in the dataset, and each row is a sample. In the remaining columns, a row represents a 28 x 28 image of a handwritten digit, but all pixels are placed in a single row, rather than in the original rectangular form. To visualize the digits, we need to reshape the rows into 28 x 28 matrices. You can use <a href=\"http://www.mathworks.com/help/matlab/ref/reshape.html\">reshape</a> for that, except that we need to transpose the data, because <tt>reshape</tt> operates by column-wise rather than row-wise.</p><pre class=\"codeinput\">figure                                          \r\ncolormap(gray)                                  \r\n<span class=\"keyword\">for</span> i = 1:25                                    \r\n    subplot(5,5,i)                              \r\n    digit = reshape(tr(i, 2:end), [28,28])\';    \r\n    imagesc(digit)                              \r\n    title(num2str(tr(i, 1)))                    \r\n<span class=\"keyword\">end</span>\r\n</pre><img vspace=\"5\" hspace=\"5\" src=\"http://blogs.mathworks.com/images/loren/2015/neuralnetFinal_01.png\" alt=\"\" /><h4>Data Preparation<a></a></h4><p>You will be using the <a href=\"http://www.mathworks.com/help/nnet/ref/nprtool.html\">nprtool</a> pattern recognition app from <a href=\"http://www.mathworks.com/products/neural-network/\">Neural Network Toolbox</a>. The app expects two sets of data:</p><div><ul><li>inputs - a numeric matrix, each column representing the samples and rows the features. This is the scanned images of handwritten digits.</li><li>targets - a numeric matrix of 0 and 1 that maps to specific labels that images represent. This is also known as a dummy variable. Neural Network Toolbox also expects labels stored in columns, rather than in rows.</li></ul></div><p>The labels range from 0 to 9, but we will use \'10\' to represent \'0\' because MATLAB is indexing is 1-based.</p><pre class=\"language-matlab\">1 --&gt; [1; 0; 0; 0; 0; 0; 0; 0; 0; 0]\r\n2 --&gt; [0; 1; 0; 0; 0; 0; 0; 0; 0; 0]\r\n3 --&gt; [0; 0; 1; 0; 0; 0; 0; 0; 0; 0]\r\n            :\r\n0 --&gt; [0; 0; 0; 0; 0; 0; 0; 0; 0; 1]\r\n</pre><p>The dataset stores samples in rows rather than in columns, so you need to transpose it. Then you will partition the data so that you hold out 1/3 of the data for model evaluation, and you will only use 2/3 for training our artificial neural network model.</p><pre class=\"codeinput\">n = size(tr, 1);                    \r\ntargets  = tr(:,1);                 \r\ntargets(targets == 0) = 10;         \r\ntargetsd = dummyvar(targets);       \r\ninputs = tr(:,2:end);               \r\n\r\ninputs = inputs\';                   \r\ntargets = targets\';                 \r\ntargetsd = targetsd\';               \r\n\r\nrng(1);                             \r\nc = cvpartition(n,<span class=\"string\">\'Holdout\'</span>,n/3);   \r\n\r\nXtrain = inputs(:, training(c));    \r\nYtrain = targetsd(:, training(c));  \r\nXtest = inputs(:, test(c));         \r\nYtest = targets(test(c));           \r\nYtestd = targetsd(:, test(c));      \r\n</pre><h4>Using the Neural Network Toolbox GUI App<a></a></h4><div><ol><li>You can start the Neural Network Start GUI by typing the command <a href=\"http://www.mathworks.com/help/nnet/ref/nnstart.html\">nnstart</a>.</li><li>You then click the Pattern Recognition Tool to open the Neural Network Pattern Recognition Tool. You can also usehe command <a href=\"http://www.mathworks.com/help/nnet/ref/nprtool.html\">nprtool</a> to open it directly.</li><li>Click \"Next\" in the welcome screen and go to \"Select Data\".</li><li>For <tt>inputs</tt>, select <tt>Xtrain</tt> and for <tt>targets</tt>, select <tt>Ytrain</tt>.</li><li>Click \"Next\" and go to \"Validation and Test Data\". Accept the default settings and click \"Next\" again. This will split the data into 70-15-15 for the training, validation and testing sets.</li><li>In the \"Network Architecture\", change the value for the number of hidden neurons, 100, and click \"Next\" again.</li><li>In the \"Train Network\", click the \"Train\" button to start the training. When finished, click \"Next\". Skip \"Evaluate Network\" and click next.</li><li>In \"Deploy Solution\", select \"MATLAB Matrix-Only Function\" and save t the generated code. I save it as <a href=\"http://blogs.mathworks.com/images/loren/2015/myNNfun.m\">myNNfun.m</a>.</li><li>If you click \"Next\" and go to \"Save Results\", you can also save the script as well as the model you just created. I saved the simple script as <a href=\"http://blogs.mathworks.com/images/loren/2015/myNNscript.m\">myNNscript.m</a></li></ol></div><p>Here is the diagram of this artificial neural network model you created with the Pattern Recognition Tool. It has 784 input neurons, 100 hidden layer neurons, and 10 output layer neurons.</p><p><img vspace=\"5\" hspace=\"5\" src=\"http://blogs.mathworks.com/images/loren/2015/network_diagram.png\" alt=\"\" /></p><p>Your model learns through training the weights to produce the correct output.</p><p><tt>W</tt> in the diagram stands for <i>weights</i> and <tt>b</tt> for <i>bias units</i>, which are part of individual neurons. Individual neurons in the hidden layer look like this - 784 inputs and corresponding weights, 1 bias unit, and 10 activation outputs.</p><p><img vspace=\"5\" hspace=\"5\" src=\"http://blogs.mathworks.com/images/loren/2015/neuron.png\" alt=\"\" /></p><h4>Visualizing the Learned Weights<a></a></h4><p>If you look inside <tt>myNNfun.m</tt>, you see variables like <tt>IW1_1</tt> and <tt>x1_step1_keep</tt> that represent the weights your artificial neural network model learned through training. Because we have 784 inputs and 100 neurons, the full layer 1 weights will be a 100 x 784 matrix. Let\'s visualize them. This is what our neurons are learning!</p><pre class=\"codeinput\">load <span class=\"string\">myWeights</span>                          \r\nW1 =zeros(100, 28*28);                  \r\nW1(:, x1_step1_keep) = IW1_1;           \r\nfigure                                  \r\ncolormap(gray)                          \r\n<span class=\"keyword\">for</span> i = 1:25                            \r\n    subplot(5,5,i)                      \r\n    digit = reshape(W1(i,:), [28,28])\'; \r\n    imagesc(digit)                      \r\n<span class=\"keyword\">end</span>\r\n</pre><img vspace=\"5\" hspace=\"5\" src=\"http://blogs.mathworks.com/images/loren/2015/neuralnetFinal_02.png\" alt=\"\" /><h4>Computing the Categorization Accuracy<a></a></h4><p>Now you are ready to use <tt>myNNfun.m</tt> to predict labels for the heldout data in <tt>Xtest</tt> and compare them to the actual labels in <tt>Ytest</tt>. That gives you a realistic predictive performance against unseen data. This is also the metric Kaggle uses to score submissions.</p><p>First, you see the actual output from the network, which shows the probability for each possible label. You simply choose the most probable label as your prediction and then compare it to the actual label. You should see 95% categorization accuracy.</p><pre class=\"codeinput\">Ypred = myNNfun(Xtest);             \r\nYpred(:, 1:5)                       \r\n[~, Ypred] = max(Ypred);            \r\nsum(Ytest == Ypred) / length(Ytest) \r\n</pre><pre class=\"codeoutput\">ans =\r\n   1.3988e-09   6.1336e-05   1.4421e-07   1.5035e-07   2.6808e-08\r\n   1.9521e-05     0.018117   3.5323e-09   2.9139e-06    0.0017353\r\n   2.2202e-07   0.00054599     0.012391   0.00049678   0.00024934\r\n   1.5338e-09      0.46156   0.00058973   4.5171e-07   0.00025153\r\n   4.5265e-08      0.11546      0.91769   2.1261e-05   0.00031076\r\n   1.1247e-08      0.25335   1.9205e-06   1.1014e-06      0.99325\r\n   2.1627e-08    0.0045572    1.733e-08   3.7744e-07   1.7282e-07\r\n   2.2329e-09   7.6692e-05   0.00011479      0.98698   1.7328e-06\r\n   1.9634e-05    0.0011708     0.069215      0.01249   0.00084255\r\n      0.99996      0.14511   1.0106e-07   2.9687e-06    0.0033565\r\nans =\r\n      0.95293\r\n</pre><h4>Network Architecture<a></a></h4><p>You probably noticed that the artificial neural network model generated from the Pattern Recognition Tool has only one hidden layer. You can build a custom model with more layers if you would like, but this simple architecture is sufficient for most common problems.</p><p>The next question you may ask is how I picked 100 for the number of hidden neurons. The general rule of thumb is to pick a number between the number of input neurons, 784 and the number of output neurons, 10, and I just picked 100 arbitrarily. That means you might do better if you try other values. Let\'s do this programmatically this time. <tt>myNNscript.m</tt> will be handy for this - you can simply adapt the script to do a parameter sweep.</p><pre class=\"codeinput\">sweep = [10,50:50:300];                 \r\nscores = zeros(length(sweep), 1);       \r\nmodels = cell(length(sweep), 1);        \r\nx = Xtrain;                             \r\nt = Ytrain;                             \r\ntrainFcn = <span class=\"string\">\'trainscg\'</span>;                  \r\n<span class=\"keyword\">for</span> i = 1:length(sweep)\r\n    hiddenLayerSize = sweep(i);         \r\n    net = patternnet(hiddenLayerSize);  \r\n    net.divideParam.trainRatio = 70/100;\r\n    net.divideParam.valRatio = 15/100;  \r\n    net.divideParam.testRatio = 15/100; \r\n    net = train(net, x, t);             \r\n    models{i} = net;                    \r\n    p = net(Xtest);                     \r\n    [~, p] = max(p);                    \r\n    scores(i) = sum(Ytest == p) /<span class=\"keyword\">...</span>\r\n        length(Ytest);\r\n<span class=\"keyword\">end</span>\r\n</pre><p>Let\'s now plot how the categorization accuracy changes versus number of neurons in the hidden layer.</p><pre class=\"codeinput\">figure\r\nplot(sweep, scores, <span class=\"string\">\'.-\'</span>)\r\nxlabel(<span class=\"string\">\'number of hidden neurons\'</span>)\r\nylabel(<span class=\"string\">\'categorization accuracy\'</span>)\r\ntitle(<span class=\"string\">\'Number of hidden neurons vs. accuracy\'</span>)\r\n</pre><img vspace=\"5\" hspace=\"5\" src=\"http://blogs.mathworks.com/images/loren/2015/neuralnetFinal_03.png\" alt=\"\" /><p>It looks like you get the best result around 250 neurons and the best score will be around 0.96 with this basic artificial neural network model.</p><p>As you can see, you gain more accuracy if you increase the number of hidden neurons, but then the accuracy decreases at some point (your result may differ a bit due to random initialization of weights). As you increase the number of neurons, your model will be able to capture more features, but if you capture too many features, then you end up overfitting your model to the training data and it won\'t do well with unseen data. Let\'s examine the learned weights with 300 hidden neurons. You see more details, but you also see more noise.</p><pre class=\"codeinput\">net = models{end};                      \r\nW1 = zeros(sweep(end), 28*28);          \r\nW1(:, x1_step1_keep) = net.IW{1};       \r\nfigure                                  \r\ncolormap(gray)                          \r\n<span class=\"keyword\">for</span> i = 1:25                            \r\n    subplot(5,5,i)                      \r\n    digit = reshape(W1(i,:), [28,28])\'; \r\n    imagesc(digit)                      \r\n<span class=\"keyword\">end</span>\r\n</pre><img vspace=\"5\" hspace=\"5\" src=\"http://blogs.mathworks.com/images/loren/2015/neuralnetFinal_04.png\" alt=\"\" /><h4>The Next Step - an Autoencoder Example<a></a></h4><p>You now have some intuition on artificial neural networks - a network automatically learns the relevant features from the inputs and generates a sparse representation that maps to the output labels.  What if we use the inputs as the target values? That eliminates the need for training labels and turns this into an unsupervised learning algorithm. This is known as an autoencoder and this becomes a building block of a deep learning network. There is an excellent example of autoencoders on the <a href=\"http://www.mathworks.com/help/nnet/examples/training-a-deep-neural-network-for-digit-classification.html\">Training a Deep Neural Network for Digit Classification</a> page in the Neural Network Toolbox documentation, which also uses MNIST dataset. For more details, Stanford provides an excellent <a href=\"http://deeplearning.stanford.edu/tutorial/\">UFLDL Tutorial</a> that also uses the same dataset and MATLAB-based starter code.</p><h4>Sudoku Solver: a Real-time Processing Example<a></a></h4><p>Beyond understanding the algorithms, there is also a practical question of how to generate the input data in the first place. Someone spent a lot of time to prepare the MNIST dataset to ensure uniform sizing, scaling, contrast, etc. To use the model you built from this dataset in practical applications, you have to be able to repeat the same set of processing on new data. How do you do such preparation yourself?</p><p>There is a fun video that shows you how you can solve Sudoku puzzles using a webcam that uses a different character recognition technique. Instead of static images, our colleague <a href=\"http://www.mathworks.com/matlabcentral/profile/authors/1905880-teja-muppirala\">Teja Muppirala</a> uses a live video feed in real time to do it and he walks you through the pre-processing steps one by one. You should definitely check it out: <a href=\"http://www.mathworks.com/videos/solving-a-sudoku-puzzle-using-a-webcam-68773.html\">Solving a Sudoku Puzzle Using a Webcam</a>.</p><p><img vspace=\"5\" hspace=\"5\" src=\"http://blogs.mathworks.com/images/loren/2015/solveSudokuWebcam.png\" alt=\"\" /></p><h4>Submitting Your Entry to Kaggle<a></a></h4><p>You got 96% categorization accuracy rate by simply accepting the default settings except for the number of hidden neurons. Not bad for the first try. Since you are using a Kaggle dataset, you can now submit your result to Kaggle.</p><pre class=\"codeinput\">n = size(sub, 1);                                   \r\nsub = sub\';                                         \r\n[~, highest] = max(scores);                         \r\nnet = models{highest};                              \r\nYpred = net(sub);                                   \r\n[~, Label] = max(Ypred);                            \r\nLabel = Label\';                                     \r\nLabel(Label == 10) = 0;                             \r\nImageId = 1:n; ImageId = ImageId\';                  \r\nwritetable(table(ImageId, Label), <span class=\"string\">\'submission.csv\'</span>);\r\n</pre><p>You can now submit the <tt>submission.csv</tt> on <a href=\"https://www.kaggle.com/c/digit-recognizer/submissions/attach\">Kaggle\'s entry submission page</a>.</p><h4>Closing<a></a></h4><p>In this example we focused on getting a high level intuition on artificial neural network using a concrete example of handwritten digit recognition. We didn’t go into details such as how the inputs weights and bias units are combined, how activation works, how you train such a network, etc. But you now know enough to use Neural Network Toolbox in MATLAB to participate in a Kaggle competition.</p><p><br /><a><span>Get \r\n      the MATLAB code (requires JavaScript)</span></a></p><p>Published with MATLAB® R2015a<br /></p>',1),(45,'SpeckJS - Comment Driven Development','http://speckjs.github.io/',1,0,'\n        <h4>Add SpeckJS formatted comments to your file</h4>\n        <div class=\"terminal\">\n          \n          <div class=\"shell\">\n            \n            \n            \n            <p>function sum(a, b) {</p>\n            <p>  return a + b;</p>\n            <p>};</p>\n          </div>\n        </div>\n      \n\n      \n      \n        <h4>Pick your favorite tool</h4>\n        \n\n      \n      \n        <h4>Install the npm module</h4>\n        <p>From within your project directory run:</p>\n\n        \n      \n\n      \n      \n        <h4>Hello World</h4>\n        <p>Require speckjs from within your project files:</p>\n\n        \n      \n\n      \n      \n        <h4>Install the grunt plugin</h4>\n        <p>From within your project directory run:</p>\n\n        \n      \n\n      \n      \n        <h4>Set up your Gruntfile.js</h4>\n        <p>Once the plugin has been installed, it may be enabled inside your Gruntfile so:</p>\n\n        \n\n        <p>and configured as:</p>\n\n        \n      \n\n      \n      \n        <h4>Run grunt</h4>\n        \n      \n\n      \n      \n        <h4>Install the gulp plugin</h4>\n        <p>From within your project directory run:</p>\n\n        \n      \n\n      \n      \n        <h4>Set up your gulpfile.js</h4>\n        <p>Once the plugin has been installed, it may be enabled inside your gulpfile so:</p>\n\n        \n\n        <p>and configured as:</p>\n\n        \n      \n\n      \n      \n        <h4>Run gulp</h4>\n        \n      \n\n      \n      \n        <h4>…and Boom!</h4>\n\n        \n        <p>This example shows a Tape test. SpeckJS compiles tests for Tape, Jasmine, and Mocha/Chai.</p>\n        <p>Check the documentation on <a href=\"https://github.com/speckjs/speckjs\">github.com/speckjs/speckjs</a> for more information</p>\n\n          \n\n      \n\n\n      \n      \n        <h4>Download Atom</h4>\n        <p>Atom is a hackable text editor for the 21st Century</p>\n\n        <a class=\"mac-download\" href=\"https://atom.io/\">Download Atom</a>\n      \n\n      \n      \n        <h4>Install the atom plugin</h4>\n\n        <img src=\"http://speckjs.github.io/assets/atom-install.png\" width=\"1078\" alt=\"GitHub for Mac screenshot\" class=\"full-size\" />\n\n      \n      \n        <h4>Open your file, run speck and...</h4>\n\n        <img src=\"http://speckjs.github.io/assets/atom-speck-build.gif\" width=\"1078\" alt=\"GitHub for Mac screenshot\" class=\"full-size\" />\n\n\n      \n      \n\n    ',1),(47,'ImJasonH/ghfs','https://github.com/ImJasonH/ghfs',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>GHFS mounts to a directory using FUSE and serves contents of GitHub repos\non-demand.</p>\n\n<p>Let\'s try an example. First, generate a GitHub personal access token\n<a href=\"https://github.com/settings/tokens\">here</a> -- it only needs the\n<code>public_repo</code> scope.</p>\n\n<pre><code>$ mkdir /github\n$ go run main.go -token=$GITHUB_TOKEN -mountpoint=/github\n2015/09/17 04:27:35 serving...\n</code></pre>\n\n<p>While that runs, in another terminal, list repos owned by a user or organization:</p>\n\n<pre><code>$ ls /github/golang/\nappengine\narch\nbenchmarks\nblog\n...\n</code></pre>\n\n<p>You can inspect a repo\'s branches and tags as subdirectories of the repo:</p>\n\n<pre><code>$ ls /github/golang/go\n...\nmaster\n...\n</code></pre>\n\n<p>And you can inspect the directories and files in the repo at those branches or\ntags:</p>\n\n<pre><code>$ ls /github/golang/go/master\nAUTHORS\nCONTRIBUTING.md\nCONTRIBUTORS\nLICENSE\n...\n</code></pre>\n\n<p>If you know the specific revision you want to explore, you can use that instead of a branch or tag name:</p>\n\n<pre><code>$ ls /github/golang/go/3d1f8c237956ca657b9517040a7431e87f9d8a18\nAUTHORS\nCONTRIBUTING.md\nCONTRIBUTORS\nLICENSE\n...\n</code></pre>\n\n<p>Or use any unique prefix of the revision SHA:</p>\n\n<pre><code>$ ls /github/golang/go/3d1f8c23\n</code></pre>\n\n<p>At a revision/branch/tag, you can explore the repo and read files:</p>\n\n<pre><code>$ cat /github/golang/go/master/src/bytes/bytes.go\n// Copyright 2009 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package bytes implements functions for the manipulation of byte slices.\n// It is analogous to the facilities of the strings package.\npackage bytes\n\nimport (\n    \"unicode\"\n    \"unicode/utf8\"\n)\n...\n</code></pre>\n\n<pre><code>$ wc -l /github/golang/go/master/src/bytes/bytes.go\n     714 /github/golang/go/master/src/bytes/bytes.go\n</code></pre>\n\n<pre><code>$ grep -n TODO /github/golang/go/master/src/bytes/bytes.go\n429:// TODO: update when package unicode captures more of the properties.\n</code></pre>\n\n<pre><code>$ diff \\\n  /github/golang/go/89454b1c/src/bytes/bytes.go \\\n  /github/golang/go/3d1f8c23/src/bytes/bytes.go\n140a141,150\n&gt; // LastIndexByte returns the index of the last instance of c in s, or -1 if c is not present in s.\n&gt; func LastIndexByte(s []byte, c byte) int {\n&gt;   for i := len(s) - 1; i &gt;= 0; i-- {\n&gt;       if s[i] == c {\n&gt;           return i\n&gt;       }\n&gt;   }\n&gt;   return -1\n&gt; }\n&gt; \n</code></pre>\n\n\n\n<ul><li><strong>This is a toy</strong>, and is not intended for anything like production use.</li>\n<li>The GitHub API is rate-limited, and this makes a lot of API calls. Don\'t be\nsurprised if things start to fall apart under load.</li>\n<li>I\'m not responsible for this somehow breaking free and ruining your garden\nparty.</li>\n</ul><hr /><pre><code>Copyright 2015 Jason Hall\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>\n',1),(48,'Getting started Â· Bootstrap Table','http://bootstrap-table.wenzhixin.net.cn/getting-started/',0,0,'\n          \n\n<hr /><p class=\"lead\">\nBootstrap table (currently v1.8.1) has a few easy ways to quickly get started, each one appealing to a different skill level and use case. Read through to see what suits your particular needs.\n</p>\n\n<h2>Source code</h2>\n\n<p>Source css, JavaScript, locales, and extensions, along with our docs.</p>\n\n<p><a href=\"https://github.com/wenzhixin/bootstrap-table/archive/master.zip\" class=\"btn btn-lg btn-outline\">Download source</a></p>\n\n<h2>Clone or fork via GitHub</h2>\n\n<p><a href=\"https://github.com/wenzhixin/bootstrap-table\" class=\"btn btn-lg btn-outline\">Via GitHub</a></p>\n\n<h2>CDN</h2>\n\n<p>The folks over at <a href=\"http://www.cdnjs.com/libraries/bootstrap-table\">CDNJS</a> and <a href=\"http://open.bootcss.com/bootstrap-table/\">bootcss</a> graciously provide CDN support for CSS and JavaScript of Bootstrap table. Just use these CDN links.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"c\">&lt;!-- Latest compiled and minified CSS --&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.8.1/bootstrap-table.min.css\"</span><span class=\"nt\">&gt;</span>\n\n<span class=\"c\">&lt;!-- Latest compiled and minified JavaScript --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.8.1/bootstrap-table.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n\n<span class=\"c\">&lt;!-- Latest compiled and minified Locales --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.8.1/locale/bootstrap-table-zh-CN.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre></div>\n\n<h2>Bower</h2>\n\n<p>Install and manage Bootstrap table\'s CSS, JavaScript, locales, and extensions using <a href=\"http://bower.io/\">Bower</a>.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"gp\">$ </span>bower install bootstrap-table\n</code></pre></div>\n\n\n\n<hr /><p>The Bootstrap table source code download includes the precompiled CSS, JavaScript, locales, extensions, and provides both compiled and minified variations, along with documentation. More specifically, it includes the following and more:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-bash\">bootstrap-table/\n├── dist/\n│   ├── extensions/\n│   ├── locale/\n│   ├── bootstrap-table.min.css\n│   └── bootstrap-table.min.js\n├── docs/\n└── src/\n    ├── extensions/\n    ├── locale/\n    ├── bootstrap-table.css\n    └── bootstrap-table.js\n</code></pre></div>\n\n<p>The <code>src/</code>, <code>locale/</code>, and <code>extensions/</code> are the source code for our CSS, JS. The <code>dist/</code> folder includes everything compiled and minified with <code>src/</code>. The <code>docs/</code> folder includes the source code for our documentation. Beyond that, any other included file provides support for packages, license information, and development.</p>\n\n\n\n<hr /><p>Bootstrap table uses <a href=\"http://gruntjs.com/\">Grunt</a> for its build system, with convenient methods for working with the framework. It\'s how we compile our code, run tests, and more.</p>\n\n<h2>Installing Grunt</h2>\n\n<p>To install Grunt, you must <strong>first</strong> <a href=\"http://nodejs.org/download/\">download and install node.js</a> (which includes npm). npm stands for <a href=\"http://npmjs.org/\">node packaged modules</a> and is a way to manage development dependencies through node.js.</p>\n\n<p>Then, from the command line:</p>\n\n<ol><li>Install <code>grunt-cli</code> globally with <code>npm install -g grunt-cli</code>.</li>\n<li>Navigate to the root <code>/bootstrap-table/</code> directory, then run <code>npm install</code>. npm will look at the <code>package.json</code> file and automatically install the necessary local dependencies listed there.</li>\n</ol><p>When completed, you\'ll be able to run the various Grunt commands provided from the command line.</p>\n\n<h2>Available Grunt commands</h2>\n\n<h3><code>grunt dist</code> (Just compile CSS and JavaScript)</h3>\n\n<p>Regenerates the <code>/dist/</code> directory with compiled and minified CSS and JavaScript files. As a Bootstrap user, this is normally the command you want.</p>\n\n<h3><code>grunt test</code> (Run tests)</h3>\n\n<p>Runs <a href=\"http://jshint.com/\">JSHint</a> to test our code.</p>\n\n<h3><code>grunt docs</code> (Build &amp; test the docs assets)</h3>\n\n<p>Builds and tests CSS, JavaScript, and other assets which are used when running the documentation locally via <code>jekyll serve</code>.</p>\n\n<h3><code>grunt</code> (Build absolutely everything and run tests)</h3>\n\n<p>Compiles and minifies CSS and JavaScript, builds the documentation website, runs the HTML5 validator against the docs, regenerates the Customizer assets, and more. Requires <a href=\"http://jekyllrb.com/docs/installation/\">Jekyll</a>.</p>\n\n<h2>Troubleshooting</h2>\n\n<p>Should you encounter problems with installing dependencies or running Grunt commands, first delete the <code>/node_modules/</code> directory generated by npm. Then, rerun <code>npm install</code>.</p>\n\n\n\n<hr /><p>Include Bootstrap library (if your project doesn\'t use it already) and <code>bootstrap-table.css</code> in the head tag your html document.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"bootstrap.min.css\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"bootstrap-table.css\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div>\n\n<p>Include jQuery library, bootstrap library (if your project doesn\'t use it already) and <code>bootstrap-table.js</code> in the head tag or at the very bottom of your document, just before the closing body tag (usually recommended for better performance).</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"jquery.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"bootstrap.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"bootstrap-table.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;--</span> <span class=\"na\">put</span> <span class=\"na\">your</span> <span class=\"na\">locale</span> <span class=\"na\">files</span> <span class=\"na\">after</span> <span class=\"na\">bootstrap-table</span><span class=\"err\">.</span><span class=\"na\">js</span> <span class=\"na\">--</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"bootstrap-table-zh-CN.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre></div>\n\n<hr /><p>The Bootstrap Table plugin displays data in a tabular format, via data attributes or JavaScript.</p>\n\n<h2>Via data attributes</h2>\n\n<p>Activate bootstrap table without writing JavaScript. Set <code>data-toggle=\"table\"</code> on a normal table.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"nt\">&lt;table</span> <span class=\"na\">data-toggle=</span><span class=\"s\">\"table\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;thead&gt;</span>\n        <span class=\"nt\">&lt;tr&gt;</span>\n            <span class=\"nt\">&lt;th&gt;</span>Item ID<span class=\"nt\">&lt;/th&gt;</span>\n            <span class=\"nt\">&lt;th&gt;</span>Item Name<span class=\"nt\">&lt;/th&gt;</span>\n            <span class=\"nt\">&lt;th&gt;</span>Item Price<span class=\"nt\">&lt;/th&gt;</span>\n        <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;/thead&gt;</span>\n    <span class=\"nt\">&lt;tbody&gt;</span>\n        <span class=\"nt\">&lt;tr&gt;</span>\n            <span class=\"nt\">&lt;td&gt;</span>1<span class=\"nt\">&lt;/td&gt;</span>\n            <span class=\"nt\">&lt;td&gt;</span>Item 1<span class=\"nt\">&lt;/td&gt;</span>\n            <span class=\"nt\">&lt;td&gt;</span>$1<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;/tr&gt;</span>\n        <span class=\"nt\">&lt;tr&gt;</span>\n            <span class=\"nt\">&lt;td&gt;</span>2<span class=\"nt\">&lt;/td&gt;</span>\n            <span class=\"nt\">&lt;td&gt;</span>Item 2<span class=\"nt\">&lt;/td&gt;</span>\n            <span class=\"nt\">&lt;td&gt;</span>$2<span class=\"nt\">&lt;/td&gt;</span>\n        <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;/tbody&gt;</span>\n<span class=\"nt\">&lt;/table&gt;</span>\n</code></pre></div>\n\n<p>We can also use remote url data by setting <code>data-url=\"data1.json\"</code> on a normal table.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"nt\">&lt;table</span> <span class=\"na\">data-toggle=</span><span class=\"s\">\"table\"</span> <span class=\"na\">data-url=</span><span class=\"s\">\"data1.json\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;thead&gt;</span>\n        <span class=\"nt\">&lt;tr&gt;</span>\n            <span class=\"nt\">&lt;th</span> <span class=\"na\">data-field=</span><span class=\"s\">\"id\"</span><span class=\"nt\">&gt;</span>Item ID<span class=\"nt\">&lt;/th&gt;</span>\n            <span class=\"nt\">&lt;th</span> <span class=\"na\">data-field=</span><span class=\"s\">\"name\"</span><span class=\"nt\">&gt;</span>Item Name<span class=\"nt\">&lt;/th&gt;</span>\n            <span class=\"nt\">&lt;th</span> <span class=\"na\">data-field=</span><span class=\"s\">\"price\"</span><span class=\"nt\">&gt;</span>Item Price<span class=\"nt\">&lt;/th&gt;</span>\n        <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;/thead&gt;</span>\n<span class=\"nt\">&lt;/table&gt;</span>\n</code></pre></div>\n\n<h2>Via JavaScript</h2>\n\n<p>Call a bootstrap table with id table with JavaScript.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"nt\">&lt;table</span> <span class=\"na\">id=</span><span class=\"s\">\"table\"</span><span class=\"nt\">&gt;&lt;/table&gt;</span>\n</code></pre></div><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">\'#table\'</span><span class=\"p\">).</span><span class=\"nx\">bootstrapTable</span><span class=\"p\">({</span>\n    <span class=\"na\">columns</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"na\">field</span><span class=\"p\">:</span> <span class=\"s1\">\'id\'</span><span class=\"p\">,</span>\n        <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">\'Item ID\'</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"na\">field</span><span class=\"p\">:</span> <span class=\"s1\">\'name\'</span><span class=\"p\">,</span>\n        <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">\'Item Name\'</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"na\">field</span><span class=\"p\">:</span> <span class=\"s1\">\'price\'</span><span class=\"p\">,</span>\n        <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">\'Item Price\'</span>\n    <span class=\"p\">}],</span>\n    <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">\'Item 1\'</span><span class=\"p\">,</span>\n        <span class=\"na\">price</span><span class=\"p\">:</span> <span class=\"s1\">\'$1\'</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">\'Item 2\'</span><span class=\"p\">,</span>\n        <span class=\"na\">price</span><span class=\"p\">:</span> <span class=\"s1\">\'$2\'</span>\n    <span class=\"p\">}]</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n\n<p>We can also use remote url data by setting <code>url: \'data1.json\'</code>.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">\'#table\'</span><span class=\"p\">).</span><span class=\"nx\">bootstrapTable</span><span class=\"p\">({</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"s1\">\'data1.json\'</span><span class=\"p\">,</span>\n    <span class=\"na\">columns</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n        <span class=\"na\">field</span><span class=\"p\">:</span> <span class=\"s1\">\'id\'</span><span class=\"p\">,</span>\n        <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">\'Item ID\'</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"na\">field</span><span class=\"p\">:</span> <span class=\"s1\">\'name\'</span><span class=\"p\">,</span>\n        <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">\'Item Name\'</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"na\">field</span><span class=\"p\">:</span> <span class=\"s1\">\'price\'</span><span class=\"p\">,</span>\n        <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">\'Item Price\'</span>\n    <span class=\"p\">},</span> <span class=\"p\">]</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n\n        ',1),(49,'jQuery treetable','http://ludo.cubicphuse.nl/jquery-treetable/',0,0,'\n      \n\n      <p><b><a href=\"http://plugins.jquery.com/treetable\">Download</a> the latest release from the jQuery Plugin Registry or grab the <a href=\"https://github.com/ludo/jquery-treetable\">source code</a> from Github.</b> Please <a href=\"https://github.com/ludo/jquery-treetable/issues\">report issues</a> through Github issues. This plugin is released under both the MIT and the GPLv2 license by <a href=\"http://ludovandenboom.com\">Ludo van den Boom</a>.</p>\n\n      <table><caption>Basic jQuery treetable Example</caption>\n        <thead><tr><th>Tree column</th>\n            <th>Additional data</th>\n          </tr></thead><tbody><tr><td>Node 1: Click on the icon in front of me to expand this branch.</td>\n            <td>I live in the second column.</td>\n          </tr><tr><td>Node 1.1: Look, I am a table row <em>and</em> I am part of a tree!</td>\n            <td>Interesting.</td>\n          </tr><tr><td>Node 1.1.1: I am part of the tree too!</td>\n            <td>That\'s it!</td>\n          </tr><tr><td>Node 2: I am another root node, but without children</td>\n            <td>Hurray!</td>\n          </tr></tbody></table><h2>Table of Contents</h2>\n      <ol><li><a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#overview\">Overview</a></li>\n        <li><a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#usage\">Usage</a></li>\n        <li><a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#configuration\">Configuration</a></li>\n        <li><a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#api\">Public API</a></li>\n        <li><a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#examples\">Examples</a></li>\n        <li><a href=\"http://ludo.cubicphuse.nl/jquery-treetable/test.html\">Test Suite</a></li>\n        <li><a href=\"http://ludo.cubicphuse.nl/jquery-treetable/CHANGELOG.txt\">CHANGELOG.txt</a></li>\n      </ol><p>jQuery treetable is a plugin for <a href=\"http://jquery.com\">jQuery</a>, the \'Write Less, Do More, JavaScript Library\'. With this plugin you can display a tree in an HTML table, e.g. a directory structure or a nested list. Why not use a list, you say? Because lists are great for displaying a tree, and tables are not. Oh wait, but this plugin uses tables, doesn\'t it? Yes. Why do I use a table to display a list? Because I need multiple columns to display additional data besides the tree.</p>\n\n      <h3>Unobtrusiveness</h3>\n\n      <p>One of the goals of jQuery treetable is to be as unobtrusive as possible. Being \'unobtrusive\' is very cool nowadays, so that was an important requirement. But it is cool for a reason: it keeps your HTML documents clean and it allows the code to degrade nicely when Javascript is not available.</p>\n\n      <p>The treetable plugin only requires that you add specific <tt>data</tt> attributes to every row that is part of your tree. The plugin uses these attributes to determine what your tree looks like. Otherwise, it would have to guess the structure of the tree and it wouldn\'t be very successful in doing that. See the <a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#usage\">Usage</a> chapter for more information on how to prepare your tree.</p>\n\n      <h3>Features</h3>\n      <ul><li>It can display a tree of data in a table column.</li>\n        <li>It does this as unobtrusively as possible.</li>\n        <li>It allows branches to be collapsed and expanded (think of how a directory structure works in most file explorers).</li>\n        <li>It allows unlimited tree depth.</li>\n        <li>It uses the lightweight <a href=\"http://jquery.com\">jQuery</a> Javascript libray.</li>\n      </ul><p><b>Note:</b> This chapter assumes that you have already installed jQuery as described on their website.</p>\n\n      <h3><a>Include the plugin in your document</a></h3>\n\n      <p>The plugin can either be installed manually or by using the <a href=\"http://bower.io\">Bower</a> package manager.</p>\n\n      <h4>Installing with Bower</h4>\n\n      <pre class=\"listing\">\nbower install jquery-treetable</pre>\n\n      <p>Note that the only listed dependency is jQuery. If you also want to use the drag &amp; drop feature you\'ll have to install jQuery UI yourself.</p>\n\n      <h4>Installing manually</h4>\n\n      <p>Copy the files <tt>jquery.treetable.js</tt> and <tt>css/jquery.treetable.css</tt> to your project. Paste the following code right before the closing <tt>body</tt> tag in your HTML document. Make sure these lines are <b>below</b> the line where you include jQuery. Change the <b>red</b> parts to reflect your situation.</p>\n\n      <pre class=\"listing\">\n&lt;link href=\"<b>path/to/</b>jquery.treetable.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;script src=\"<b>path/to/</b>jquery.treetable.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n$(\"<b>#your_table_id</b>\").treetable();\n&lt;/script&gt;</pre>\n\n      <h3><a>Styling the tree</a></h3>\n\n      <p>By default the tree has little styling. Use the file <tt>css/jquery.treetable.theme.default.css</tt> as a template for your own styling, or just use this default theme.</p>\n\n      <h3><a>Representing your tree in a table</a></h3>\n      <p>When you pasted the above code and adjusted it to reflect your situation, you enabled the <em>possibility</em> of displaying a tree in your table. To make the tree actually display as a tree you have to add <tt>data-tt-id</tt> and <tt>data-tt-parent-id</tt> attributes to your table rows (<tt>tr</tt>).</p>\n\n      <h4>How to do this?</h4>\n      <p>First, you should add a <em>unique</em> <tt>data-tt-id</tt> attribute to each of the rows in your table, for example \'<tt>node-<em>x</em></tt>\'. Then you add a <tt>data-tt-parent-id</tt> attribute to each child of a node, give this class a value of \'<tt><em>node-x</em></tt>\'. The <em>node-x</em> part should be the same as the <tt>data-tt-id</tt> of its parent. Do you still follow me? Let me show you an example of a very simple tree: a single parent with a single child. For more examples you should view the source code of this page, where you find several tables for the examples in the <a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#examples\">examples</a> chapter.</p>\n\n      <pre class=\"listing\">\n&lt;table&gt;\n  &lt;tr data-tt-id=\"1\"&gt;\n    &lt;td&gt;Parent&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr data-tt-id=\"2\" data-tt-parent-id=\"1\"&gt;\n    &lt;td&gt;Child&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;</pre>\n\n      <p>Please note that the plugin expects the rows in the HTML table to be in the same order in which they should be displayed in the tree. For example, suppose you have three nodes: <strong>A</strong>, <strong>B</strong> (child of node <span>A</span>) and <strong>C</strong> (child of node <span>B</span>). If you create rows for these nodes in your HTML table in the following order <span>A</span> - <span>C</span> - <span>B</span>, then the tree will not display correctly. You have to make sure that the rows are in the order <span>A</span> - <span>B</span> - <span>C</span>.</p>\n\n      \n\n      <p>There are several settings that let you adjust the behavior of the plugin. Each of these settings is described in this section. Pass these options and callback functions to the <tt>treetable()</tt> function. See the <a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#examples\">examples</a>.</p>\n\n      <h3>Settings</h3>\n\n      <table class=\"treetable\"><thead><tr><th>Setting</th>\n            <th>Type</th>\n            <th>Default</th>\n            <th>Description</th>\n          </tr></thead><tbody><tr><td><tt>branchAttr</tt></td>\n            <td><tt>string</tt></td>\n            <td><tt>\"ttBranch\"</tt></td>\n            <td>Optional data attribute that can be used to force the expander icon to be rendered on a node. This allows us to define a node as a branch node even though it does not have children yet. This translates to a <tt>data-tt-branch</tt> attribute in your HTML.</td>\n          </tr><tr><td><tt>clickableNodeNames</tt></td>\n            <td><tt>bool</tt></td>\n            <td><tt>false</tt></td>\n            <td>Set to true to expand branches not only when expander icon is clicked but also when node name is clicked.</td>\n          </tr><tr><td><tt>column</tt></td>\n            <td><tt>int</tt></td>\n            <td><tt>0</tt></td>\n            <td>The number of the column in the table that should be displayed as a tree.</td>\n          </tr><tr><td><tt>columnElType</tt></td>\n            <td><tt>string</tt></td>\n            <td><tt>\"td\"</tt></td>\n            <td>The types of cells that should be considered for the tree (<tt>td</tt>, <tt>th</tt> or both).</td>\n          </tr><tr><td><tt>expandable</tt></td>\n            <td><tt>bool</tt></td>\n            <td><tt>false</tt></td>\n            <td>Should the tree be expandable? An expandable tree contains buttons to make each branch with children collapsible/expandable.</td>\n          </tr><tr><td><tt>expanderTemplate</tt></td>\n            <td><tt>string</tt></td>\n            <td><tt>&lt;a href=\"#\"&gt;&amp;nbsp;&lt;/a&gt;</tt></td>\n            <td>The HTML fragment used for the expander.</td>\n          </tr><tr><td><tt>indent</tt></td>\n            <td><tt>int</tt></td>\n            <td><tt>19</tt></td>\n            <td>The number of pixels that each branch should be indented with.</td>\n          </tr><tr><td><tt>indenterTemplate</tt></td>\n            <td><tt>string</tt></td>\n            <td><tt>&lt;span class=\"indenter\"&gt;&lt;/span&gt;</tt></td>\n            <td>The HTML fragment used for the indenter.</td>\n          </tr><tr><td><tt>initialState</tt></td>\n            <td><tt>string</tt></td>\n            <td><tt>\"collapsed\"</tt></td>\n            <td>Possible values: <tt>\"expanded\"</tt> or <tt>\"collapsed\"</tt>.</td>\n          </tr><tr><td><tt>nodeIdAttr</tt></td>\n            <td><tt>string</tt></td>\n            <td><tt>\"ttId\"</tt></td>\n            <td>Name of the data attribute used to identify node. Translates to <tt>data-tt-id</tt> in your HTML.</td>\n          </tr><tr><td><tt>parentIdAttr</tt></td>\n            <td><tt>string</tt></td>\n            <td><tt>\"ttParentId\"</tt></td>\n            <td>Name of the data attribute used to set parent node. Translates to <tt>data-tt-parent-id</tt> in your HTML.</td>\n          </tr><tr><td><tt>stringCollapse</tt></td>\n            <td><tt>string</tt></td>\n            <td><tt>\"Collapse\"</tt></td>\n            <td>For internationalization.</td>\n          </tr><tr><td><tt>stringExpand</tt></td>\n            <td><tt>string</tt></td>\n            <td><tt>\"Expand\"</tt></td>\n            <td>For internationalization.</td>\n          </tr></tbody></table><h3>Events</h3>\n\n      <table class=\"treetable\"><thead><tr><th>Setting</th>\n            <th>Type</th>\n            <th>Default</th>\n            <th>Description</th>\n          </tr></thead><tbody><tr><td><tt>onInitialized</tt></td>\n            <td><tt>function</tt></td>\n            <td><tt>null</tt></td>\n            <td>Callback function fired when the tree has been initialized.</td>\n          </tr><tr><td><tt>onNodeCollapse</tt></td>\n            <td><tt>function</tt></td>\n            <td><tt>null</tt></td>\n            <td>Callback function fired when a branch is collapsed.</td>\n          </tr><tr><td><tt>onNodeExpand</tt></td>\n            <td><tt>function</tt></td>\n            <td><tt>null</tt></td>\n            <td>Callback function fired when a branch is expanded.</td>\n          </tr><tr><td><tt>onNodeInitialized</tt></td>\n            <td><tt>function</tt></td>\n            <td><tt>null</tt></td>\n            <td>Callback function fired when a node has been initialized.</td>\n          </tr></tbody></table><h3><tt>treetable()</tt> Plugin Function</h3>\n\n      <p>The <tt>treetable()</tt> function accepts the following arguments:</p>\n\n      <dl><dt><tt>options</tt> (optional)</dt>\n        <dd>A Javascript object of configuration settings as described in the chapter on <a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#configuration\">configuration</a>.</dd>\n        <dt><tt>force</tt> (optional)</dt>\n        <dd>Pass the boolean <tt>true</tt> to force reinitialization of the tree.</dd>\n      </dl><h3>Additional Functions</h3>\n\n      <p>Use the following functions to manipulate the tree programmatically. Calling a function should be done through the <tt>treetable()</tt> function. For example, to collapse node \'42\' use <tt>$(\"#tree\").treetable(\"collapseNode\", \"42\")</tt>.</p>\n\n      <dl><dt><tt>collapseAll()</tt></dt>\n        <dd>Collapse all nodes at once.</dd>\n        <dt><tt>collapseNode(id)</tt></dt>\n        <dd>Collapse a single node, identified by <tt>id</tt>.</dd>\n        <dt><tt>expandAll()</tt></dt>\n        <dd>Expand all nodes at once.</dd>\n        <dt><tt>expandNode(id)</tt></dt>\n        <dd>Expand a single node, identified by <tt>id</tt>.</dd>\n        <dt><tt>loadBranch(node, rows)</tt></dt>\n        <dd>Load additional rows (HTML <tt>&lt;tr&gt;</tt>s) into the tree, with parent <tt>node</tt>. If <tt>node</tt> is <tt>null</tt> rows will be added as root nodes.</dd>\n        <dt><tt>move(nodeId, destinationId)</tt></dt>\n        <dd>Move node <tt>nodeId</tt> to new parent with <tt>destinationId</tt>.</dd>\n        <dt><tt>node(id)</tt></dt>\n        <dd>Select a node from the tree. Returns a <tt>TreeTable.Node</tt> object.</dd>\n        <dt><tt>removeNode(id)</tt></dt>\n        <dd>Remove a node and all its descendants from the tree.</dd>\n        <dt><tt>reveal(id)</tt></dt>\n        <dd>Reveal a node in the tree.</dd>\n        <dt><tt>sortBranch(node)</tt>, <tt>sortBranch(node, columnOrFunction)</tt></dt>\n        <dd>Sort <tt>node</tt>\'s children alphabetically. Defaults to sorting on the values in the configured tree column (see settings). Pass an optional column number or sorting function as the second argument <tt>columnOrFunction</tt>. See <a href=\"http://ludo.cubicphuse.nl/jquery-treetable/test.html?grep=treetable()%20sortBranch()\">the tests</a> for examples of custom sorting functions. Does not recursively sort children of children.</dd>\n        <dt><tt>unloadBranch(node)</tt></dt>\n        <dd>Remove nodes/rows (HTML <tt>&lt;tr&gt;</tt>s) from the tree, with parent <tt>node</tt>. Note that the parent (<tt>node</tt>) will not be removed.</dd>\n      </dl><h3>Classes</h3>\n      The following classes are dynamically added to the tree rows:\n      <dl><dt><tt>expanded</tt></dt>\n          <dd>When the row is expanded</dd>\n          <dt><tt>collapsed</tt></dt>\n          <dd>When the row is collapsed</dd>\n          <dt><tt>branch</tt></dt>\n          <dd>When the row has children or the branchAttr is present</dd>\n          <dt><tt>leaf</tt></dt>\n          <dd>When the row has no children</dd>\n      </dl><h3>Basic Static Tree</h3>\n\n      <table><tr><td>app</td>\n        </tr><tr><td>controllers</td>\n        </tr><tr><td>application_controller.rb</td>\n        </tr><tr><td>helpers</td>\n        </tr><tr><td>models</td>\n        </tr><tr><td>views</td>\n        </tr></table><pre class=\"listing\">\n$(\"#example-basic-static\").treetable();</pre>\n\n      <h3>Basic Expandable Tree</h3>\n\n      <table><tr><td>app</td>\n        </tr><tr><td>controllers</td>\n        </tr><tr><td>application_controller.rb</td>\n        </tr><tr><td>helpers</td>\n        </tr><tr><td>models</td>\n        </tr><tr><td>views</td>\n        </tr></table><pre class=\"listing\">\n$(\"#example-basic-expandable\").treetable({ expandable: true });</pre>\n\n      <h3>Complex Tree With Drag and Drop</h3>\n\n      <p>This example uses <a href=\"http://jqueryui.com\">jQuery UI</a>\'s Draggable and Droppable components. The tree has 459 nodes.</p>\n\n      \n\n      <table><caption>\n          <a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#\">Expand all</a>\n          <a href=\"http://ludo.cubicphuse.nl/jquery-treetable/#\">Collapse all</a>\n        </caption>\n        <thead><tr><th>Name</th>\n            <th>Kind</th>\n            <th>Size</th>\n          </tr></thead><tbody><tr><td><span class=\"file\">Acknowledgements.rtf</span></td><td>File</td><td>480.95 KB</td></tr><tr><td><span class=\"folder\">CHUD</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">amber</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">AmberTraceFormats.pdf</span></td><td>File</td><td>124.46 KB</td></tr><tr><td><span class=\"folder\">BigTop</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">BigTopUserGuide.pdf</span></td><td>File</td><td>1314.71 KB</td></tr><tr><td><span class=\"folder\">Saturn</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">SaturnUserGuide.pdf</span></td><td>File</td><td>694.29 KB</td></tr><tr><td><span class=\"folder\">Shark</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">SharkUserGuide.pdf</span></td><td>File</td><td>12902.51 KB</td></tr><tr><td><span class=\"folder\">simg4</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">simg4_plus</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">simg5</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">DocSets</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">com.apple.ADC_Reference_Library.CoreReference.docset</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Contents</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">Info.plist</span></td><td>File</td><td>1.23 KB</td></tr><tr><td><span class=\"folder\">Resources</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">docSet.dsidx</span></td><td>File</td><td>41504 KB</td></tr><tr><td><span class=\"file\">docSet.skidx</span></td><td>File</td><td>43072 KB</td></tr><tr><td><span class=\"folder\">Documents</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">documentation</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Accessibility</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Reference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AccessibilityCarbonRef</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">CarbonAXRefRevisions</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">CarbonAXRefRevisions.html</span></td><td>File</td><td>7.44 KB</td></tr><tr><td><span class=\"folder\">Index</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index_of_book.html</span></td><td>File</td><td>174.1 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>1.1 KB</td></tr><tr><td><span class=\"folder\">Reference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">reference.html</span></td><td>File</td><td>196.28 KB</td></tr><tr><td><span class=\"file\">toc.html</span></td><td>File</td><td>15.92 KB</td></tr><tr><td><span class=\"folder\">AccessibilityLowlevel</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">accessibility</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">CompositePage.html</span></td><td>File</td><td>5.7 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>1.67 KB</td></tr><tr><td><span class=\"file\">toc.html</span></td><td>File</td><td>2.87 KB</td></tr><tr><td><span class=\"file\">accessibility-constants.html</span></td><td>File</td><td>26.94 KB</td></tr><tr><td><span class=\"file\">accessibility-datatypes.html</span></td><td>File</td><td>11.02 KB</td></tr><tr><td><span class=\"file\">accessibility-functions.html</span></td><td>File</td><td>15.55 KB</td></tr><tr><td><span class=\"file\">accessibility-mpindex.html</span></td><td>File</td><td>9.87 KB</td></tr><tr><td><span class=\"folder\">AXActionConstants</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">CompositePage.html</span></td><td>File</td><td>15.08 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>1.67 KB</td></tr><tr><td><span class=\"file\">toc.html</span></td><td>File</td><td>4.9 KB</td></tr><tr><td><span class=\"folder\">AXAttributeConstants</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AXError</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AXNotificationConstants</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AXRoleConstants</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AXTextAttributedString</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AXUIElement</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AXValue</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AXValueConstants</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>10.1 KB</td></tr><tr><td><span class=\"folder\">UniversalAccess</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">adcstyle.css</span></td><td>File</td><td>15.86 KB</td></tr><tr><td><span class=\"folder\">AppleApplications</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Reference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AddressBookC_Collection</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Index</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index_of_book.html</span></td><td>File</td><td>153.98 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>13.62 KB</td></tr><tr><td><span class=\"folder\">Introduction</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">Introduction.html</span></td><td>File</td><td>5.41 KB</td></tr><tr><td><span class=\"file\">RevisionHistory.html</span></td><td>File</td><td>4.66 KB</td></tr><tr><td><span class=\"folder\">AddressBookRefUpdate</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Articles</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">AddressBook_10.1-10.2_SymbolChanges.html</span></td><td>File</td><td>80.84 KB</td></tr><tr><td><span class=\"file\">AddressBook_10.2-10.3_SymbolChanges.html</span></td><td>File</td><td>54.2 KB</td></tr><tr><td><span class=\"file\">AddressBook_10.3-10.4_SymbolChanges.html</span></td><td>File</td><td>14.78 KB</td></tr><tr><td><span class=\"file\">AddressBook_10.4-10.5_SymbolChanges.html</span></td><td>File</td><td>11.03 KB</td></tr><tr><td><span class=\"file\">Introduction.html</span></td><td>File</td><td>7.3 KB</td></tr><tr><td><span class=\"file\">RevisionHistory.html</span></td><td>File</td><td>6.19 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>1.08 KB</td></tr><tr><td><span class=\"file\">toc.html</span></td><td>File</td><td>2.84 KB</td></tr><tr><td><span class=\"folder\">AMWorkflow_class</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AMWorkflowController_class</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AMWorkflowView_Class</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AppleApp_Aperture_002</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Automator_constants</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AutomatorFramework</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AutomatorReference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AutomatorRefUpdate</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">CalendarStoreFramework</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">CalendarStoreReference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">CalendarStoreRefUpdate</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Dashboard_Ref</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">FinalCutPro_XML</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">InstantMessageFramework</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">InstantMessageFrameworkRef</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">InstantMessageRefUpdate</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">iSyncJavaScriptRef</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">iSyncManualTestSuiteRef</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">iSyncSyncMLRef</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">MessageFrameworkReference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Motion_FXPlug_Ref</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">SafariCSSRef</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">SafariHTMLRef</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">SyncServicesRefUpdate</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">SyncServicesSchemaRef</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">WebKitDOMRef</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">AppleScript</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Reference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">StudioReference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">art</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">boxes.gif</span></td><td>File</td><td>11.52 KB</td></tr><tr><td><span class=\"file\">browser.gif</span></td><td>File</td><td>26.04 KB</td></tr><tr><td><span class=\"file\">button_in_window.gif</span></td><td>File</td><td>8.17 KB</td></tr><tr><td><span class=\"file\">cc_app_info_window.gif</span></td><td>File</td><td>24.36 KB</td></tr><tr><td><span class=\"file\">circular_prog_indicator.gif</span></td><td>File</td><td>0.65 KB</td></tr><tr><td><span class=\"file\">color_panel.jpg</span></td><td>File</td><td>24.91 KB</td></tr><tr><td><span class=\"file\">color_well.gif</span></td><td>File</td><td>7.58 KB</td></tr><tr><td><span class=\"file\">combobox.gif</span></td><td>File</td><td>1.44 KB</td></tr><tr><td><span class=\"file\">comboboxlist.gif</span></td><td>File</td><td>4.12 KB</td></tr><tr><td><span class=\"file\">display_alert.gif</span></td><td>File</td><td>28.69 KB</td></tr><tr><td><span class=\"file\">display_dialog.gif</span></td><td>File</td><td>28.42 KB</td></tr><tr><td><span class=\"file\">doc_exp_groups.gif</span></td><td>File</td><td>22.52 KB</td></tr><tr><td><span class=\"file\">drawer.gif</span></td><td>File</td><td>34.4 KB</td></tr><tr><td><span class=\"file\">drawer_content_view.gif</span></td><td>File</td><td>8.21 KB</td></tr><tr><td><span class=\"file\">drawer_instances_in_nib.gif</span></td><td>File</td><td>20.97 KB</td></tr><tr><td><span class=\"file\">drawers_in_palette.gif</span></td><td>File</td><td>17.34 KB</td></tr><tr><td><span class=\"file\">files_owner_in_nib.gif</span></td><td>File</td><td>15.24 KB</td></tr><tr><td><span class=\"file\">font_panel.gif</span></td><td>File</td><td>17.16 KB</td></tr><tr><td><span class=\"file\">hw_exp_grps_files.gif</span></td><td>File</td><td>15.35 KB</td></tr><tr><td><span class=\"file\">ib_number_formatter.gif</span></td><td>File</td><td>1.46 KB</td></tr><tr><td><span class=\"file\">image_tab_mainmenu_nib.gif</span></td><td>File</td><td>12.33 KB</td></tr><tr><td><span class=\"file\">image_view_from_app.gif</span></td><td>File</td><td>17.18 KB</td></tr><tr><td><span class=\"file\">matrix.gif</span></td><td>File</td><td>7.36 KB</td></tr><tr><td><span class=\"file\">menu_item.gif</span></td><td>File</td><td>16.85 KB</td></tr><tr><td><span class=\"file\">menu_showing_file_menu.gif</span></td><td>File</td><td>17 KB</td></tr><tr><td><span class=\"file\">movie_view.gif</span></td><td>File</td><td>34.76 KB</td></tr><tr><td><span class=\"file\">number_formatter_info.gif</span></td><td>File</td><td>24.8 KB</td></tr><tr><td><span class=\"file\">open_panel.gif</span></td><td>File</td><td>32.06 KB</td></tr><tr><td><span class=\"file\">outline_view.gif</span></td><td>File</td><td>18.7 KB</td></tr><tr><td><span class=\"file\">popup_button.gif</span></td><td>File</td><td>6.76 KB</td></tr><tr><td><span class=\"file\">progindindet.gif</span></td><td>File</td><td>3.78 KB</td></tr><tr><td><span class=\"file\">save_panel.gif</span></td><td>File</td><td>39.43 KB</td></tr><tr><td><span class=\"file\">secure_text_field.gif</span></td><td>File</td><td>9.91 KB</td></tr><tr><td><span class=\"file\">simple_toolbar.gif</span></td><td>File</td><td>10.4 KB</td></tr><tr><td><span class=\"file\">sliders.gif</span></td><td>File</td><td>11.01 KB</td></tr><tr><td><span class=\"file\">sounds_in_nib_window.gif</span></td><td>File</td><td>22.26 KB</td></tr><tr><td><span class=\"file\">split_view.gif</span></td><td>File</td><td>15.73 KB</td></tr><tr><td><span class=\"file\">stepper.gif</span></td><td>File</td><td>1.08 KB</td></tr><tr><td><span class=\"file\">table_app.gif</span></td><td>File</td><td>22.72 KB</td></tr><tr><td><span class=\"file\">table_view.gif</span></td><td>File</td><td>14.55 KB</td></tr><tr><td><span class=\"file\">tabview.gif</span></td><td>File</td><td>24.86 KB</td></tr><tr><td><span class=\"file\">text_fields.gif</span></td><td>File</td><td>7.1 KB</td></tr><tr><td><span class=\"file\">text_view.gif</span></td><td>File</td><td>12.18 KB</td></tr><tr><td><span class=\"file\">to_do_outline.gif</span></td><td>File</td><td>15.4 KB</td></tr><tr><td><span class=\"file\">window.gif</span></td><td>File</td><td>6.41 KB</td></tr><tr><td><span class=\"folder\">Index</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>1.13 KB</td></tr><tr><td><span class=\"folder\">sr10_panel_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr10_pplugin_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr11_textview_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr1_about</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr2_fundamentals</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr3_app_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr4_container_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr5_control_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr6_data_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr7_doc_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr8_drag_drop_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr9_menu_suite</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">sr_history</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">toc.html</span></td><td>File</td><td>132.84 KB</td></tr><tr><td><span class=\"folder\">Carbon</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Cocoa</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">CoreFoundation</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">css</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Darwin</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">DeveloperTools</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">DeviceDrivers</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Games</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">GraphicsImaging</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Hardware</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">HardwareDrivers</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">images</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index-date.html</span></td><td>File</td><td>74.06 KB</td></tr><tr><td><span class=\"file\">index-date0.html</span></td><td>File</td><td>284.1 KB</td></tr><tr><td><span class=\"file\">index-date2.html</span></td><td>File</td><td>73.94 KB</td></tr><tr><td><span class=\"file\">index-date3.html</span></td><td>File</td><td>74.4 KB</td></tr><tr><td><span class=\"file\">index-date4.html</span></td><td>File</td><td>75.11 KB</td></tr><tr><td><span class=\"file\">index-date5.html</span></td><td>File</td><td>41.11 KB</td></tr><tr><td><span class=\"file\">index-rev-date.html</span></td><td>File</td><td>49.03 KB</td></tr><tr><td><span class=\"file\">index-rev-revision.html</span></td><td>File</td><td>49.01 KB</td></tr><tr><td><span class=\"file\">index-rev-title.html</span></td><td>File</td><td>49.03 KB</td></tr><tr><td><span class=\"file\">index-rev-topic.html</span></td><td>File</td><td>71.41 KB</td></tr><tr><td><span class=\"file\">index-rev-topic0.html</span></td><td>File</td><td>93.76 KB</td></tr><tr><td><span class=\"file\">index-rev-topic2.html</span></td><td>File</td><td>29.61 KB</td></tr><tr><td><span class=\"file\">index-title.html</span></td><td>File</td><td>73.91 KB</td></tr><tr><td><span class=\"file\">index-title0.html</span></td><td>File</td><td>284.11 KB</td></tr><tr><td><span class=\"file\">index-title2.html</span></td><td>File</td><td>74.7 KB</td></tr><tr><td><span class=\"file\">index-title3.html</span></td><td>File</td><td>73 KB</td></tr><tr><td><span class=\"file\">index-title4.html</span></td><td>File</td><td>74.15 KB</td></tr><tr><td><span class=\"file\">index-title5.html</span></td><td>File</td><td>42.91 KB</td></tr><tr><td><span class=\"file\">index-topic.html</span></td><td>File</td><td>72.46 KB</td></tr><tr><td><span class=\"file\">index-topic0.html</span></td><td>File</td><td>601.26 KB</td></tr><tr><td><span class=\"file\">index-topic10.html</span></td><td>File</td><td>74.41 KB</td></tr><tr><td><span class=\"file\">index-topic2.html</span></td><td>File</td><td>73.6 KB</td></tr><tr><td><span class=\"file\">index-topic3.html</span></td><td>File</td><td>72.47 KB</td></tr><tr><td><span class=\"file\">index-topic4.html</span></td><td>File</td><td>71.89 KB</td></tr><tr><td><span class=\"file\">index-topic5.html</span></td><td>File</td><td>73.89 KB</td></tr><tr><td><span class=\"file\">index-topic6.html</span></td><td>File</td><td>73.1 KB</td></tr><tr><td><span class=\"file\">index-topic7.html</span></td><td>File</td><td>70.55 KB</td></tr><tr><td><span class=\"file\">index-topic8.html</span></td><td>File</td><td>71.25 KB</td></tr><tr><td><span class=\"file\">index-topic9.html</span></td><td>File</td><td>72.56 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>20.65 KB</td></tr><tr><td><span class=\"folder\">Internationalization</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">InternetWeb</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">iPhone</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">js</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">LegacyTechnologies</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">MacOSX</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">MacOSXServer</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">MusicAudio</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Networking</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">OpenSource</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Performance</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Porting</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Printing</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">QuickTime</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Resources</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">ScriptingAutomation</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Security</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Storage</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">TextFonts</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">UserExperience</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">WebObjects</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">referencelibrary</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">adc.css</span></td><td>File</td><td>1.46 KB</td></tr><tr><td><span class=\"file\">base.css</span></td><td>File</td><td>1.08 KB</td></tr><tr><td><span class=\"folder\">images</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">body_bg.gif</span></td><td>File</td><td>0.24 KB</td></tr><tr><td><span class=\"file\">main_bgbottom.gif</span></td><td>File</td><td>2.35 KB</td></tr><tr><td><span class=\"file\">main_bgtop.gif</span></td><td>File</td><td>6.88 KB</td></tr><tr><td><span class=\"file\">main_bgtop_stroke.gif</span></td><td>File</td><td>7.62 KB</td></tr><tr><td><span class=\"file\">UpdateBanner_core.png</span></td><td>File</td><td>24.25 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>1.15 KB</td></tr><tr><td><span class=\"file\">version.plist</span></td><td>File</td><td>0.44 KB</td></tr><tr><td><span class=\"folder\">com.apple.ADC_Reference_Library.DeveloperTools.docset</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Contents</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">Info.plist</span></td><td>File</td><td>1.33 KB</td></tr><tr><td><span class=\"folder\">Resources</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">docSet.dsidx</span></td><td>File</td><td>2752 KB</td></tr><tr><td><span class=\"file\">docSet.skidx</span></td><td>File</td><td>5664 KB</td></tr><tr><td><span class=\"folder\">Documents</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">documentation</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">adcstyle.css</span></td><td>File</td><td>15.86 KB</td></tr><tr><td><span class=\"folder\">AppleApplications</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">AppleApplications.html</span></td><td>File</td><td>0.22 KB</td></tr><tr><td><span class=\"folder\">Conceptual</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Dashcode_UserGuide</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Contents</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Resources</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">de.lproj</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Advanced</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">chapter_8_section_1.html</span></td><td>File</td><td>6.71 KB</td></tr><tr><td><span class=\"file\">chapter_8_section_2.html</span></td><td>File</td><td>7.93 KB</td></tr><tr><td><span class=\"file\">chapter_8_section_3.html</span></td><td>File</td><td>6.38 KB</td></tr><tr><td><span class=\"folder\">Art</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">apple_birthday_widget.jpg</span></td><td>File</td><td>33.5 KB</td></tr><tr><td><span class=\"file\">canvas_inspector.jpg</span></td><td>File</td><td>71.75 KB</td></tr><tr><td><span class=\"file\">countdown_attributes.jpg</span></td><td>File</td><td>46.69 KB</td></tr><tr><td><span class=\"file\">project_window.jpg</span></td><td>File</td><td>107.57 KB</td></tr><tr><td><span class=\"file\">source_code_inspector.jpg</span></td><td>File</td><td>76.19 KB</td></tr><tr><td><span class=\"file\">webapp_add_code.jpg</span></td><td>File</td><td>85.65 KB</td></tr><tr><td><span class=\"file\">webapp_add_part.jpg</span></td><td>File</td><td>108.16 KB</td></tr><tr><td><span class=\"file\">webapp_first_test.jpg</span></td><td>File</td><td>86.82 KB</td></tr><tr><td><span class=\"file\">webapp_project_window.jpg</span></td><td>File</td><td>152.27 KB</td></tr><tr><td><span class=\"file\">chapter_999_section_1.html</span></td><td>File</td><td>6.3 KB</td></tr><tr><td><span class=\"folder\">CodeAndDebugging</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">Dashcode_UserGuide.pdf</span></td><td>File</td><td>1875.27 KB</td></tr><tr><td><span class=\"folder\">DebuggingSharing</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">DesignTools</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>1.11 KB</td></tr><tr><td><span class=\"folder\">Introduction</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">MakingaWebApp</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">MakingaWidgetwithDashcode</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">PartsReference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Templates</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">toc.html</span></td><td>File</td><td>38.57 KB</td></tr><tr><td><span class=\"folder\">WidgetProjects</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">en.lproj</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Advanced</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">chapter_8_section_1.html</span></td><td>File</td><td>6.6 KB</td></tr><tr><td><span class=\"file\">chapter_8_section_2.html</span></td><td>File</td><td>7.4 KB</td></tr><tr><td><span class=\"file\">chapter_8_section_3.html</span></td><td>File</td><td>6.24 KB</td></tr><tr><td><span class=\"folder\">Art</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">chapter_999_section_1.html</span></td><td>File</td><td>6.2 KB</td></tr><tr><td><span class=\"folder\">CodeAndDebugging</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">Dashcode_UserGuide.pdf</span></td><td>File</td><td>1087.36 KB</td></tr><tr><td><span class=\"folder\">DebuggingSharing</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">DesignTools</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>1.09 KB</td></tr><tr><td><span class=\"folder\">Introduction</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">MakingaWebApp</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">MakingaWidgetwithDashcode</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">PartsReference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Templates</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">toc.html</span></td><td>File</td><td>38.11 KB</td></tr><tr><td><span class=\"folder\">WidgetProjects</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">es.lproj</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">fr.lproj</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">it.lproj</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">ja.lproj</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">nl.lproj</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">zh.lproj</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">Dashboard-date.html</span></td><td>File</td><td>10.88 KB</td></tr><tr><td><span class=\"file\">Dashboard-rev-date.html</span></td><td>File</td><td>8.85 KB</td></tr><tr><td><span class=\"file\">Dashboard-rev-revision.html</span></td><td>File</td><td>8.83 KB</td></tr><tr><td><span class=\"file\">Dashboard-rev-title.html</span></td><td>File</td><td>8.85 KB</td></tr><tr><td><span class=\"file\">Dashboard-title.html</span></td><td>File</td><td>10.71 KB</td></tr><tr><td><span class=\"file\">index-date.html</span></td><td>File</td><td>11.79 KB</td></tr><tr><td><span class=\"file\">index-rev-date.html</span></td><td>File</td><td>9.38 KB</td></tr><tr><td><span class=\"file\">index-rev-revision.html</span></td><td>File</td><td>9.36 KB</td></tr><tr><td><span class=\"file\">index-rev-title.html</span></td><td>File</td><td>9.37 KB</td></tr><tr><td><span class=\"file\">index-rev-topic.html</span></td><td>File</td><td>9.37 KB</td></tr><tr><td><span class=\"file\">index-title.html</span></td><td>File</td><td>11.78 KB</td></tr><tr><td><span class=\"file\">index-topic.html</span></td><td>File</td><td>12.39 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>7.24 KB</td></tr><tr><td><span class=\"file\">iSync-date.html</span></td><td>File</td><td>8.17 KB</td></tr><tr><td><span class=\"file\">iSync-title.html</span></td><td>File</td><td>8 KB</td></tr><tr><td><span class=\"folder\">Carbon</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">Carbon.html</span></td><td>File</td><td>0.21 KB</td></tr><tr><td><span class=\"file\">DesignGuidelines-date.html</span></td><td>File</td><td>9.93 KB</td></tr><tr><td><span class=\"file\">DesignGuidelines-rev-date.html</span></td><td>File</td><td>7.45 KB</td></tr><tr><td><span class=\"file\">DesignGuidelines-rev-revision.html</span></td><td>File</td><td>7.44 KB</td></tr><tr><td><span class=\"file\">DesignGuidelines-rev-title.html</span></td><td>File</td><td>7.45 KB</td></tr><tr><td><span class=\"file\">DesignGuidelines-title.html</span></td><td>File</td><td>9.77 KB</td></tr><tr><td><span class=\"file\">index-date.html</span></td><td>File</td><td>19.66 KB</td></tr><tr><td><span class=\"file\">index-rev-date.html</span></td><td>File</td><td>12.35 KB</td></tr><tr><td><span class=\"file\">index-rev-revision.html</span></td><td>File</td><td>12.33 KB</td></tr><tr><td><span class=\"file\">index-rev-title.html</span></td><td>File</td><td>12.34 KB</td></tr><tr><td><span class=\"file\">index-rev-topic.html</span></td><td>File</td><td>12.98 KB</td></tr><tr><td><span class=\"file\">index-title.html</span></td><td>File</td><td>19.65 KB</td></tr><tr><td><span class=\"file\">index-topic.html</span></td><td>File</td><td>22.64 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>10.96 KB</td></tr><tr><td><span class=\"file\">IntelBasedMacs-date.html</span></td><td>File</td><td>10.5 KB</td></tr><tr><td><span class=\"file\">IntelBasedMacs-title.html</span></td><td>File</td><td>10.33 KB</td></tr><tr><td><span class=\"file\">Performance-date.html</span></td><td>File</td><td>9.14 KB</td></tr><tr><td><span class=\"file\">Performance-title.html</span></td><td>File</td><td>8.98 KB</td></tr><tr><td><span class=\"file\">Porting-date.html</span></td><td>File</td><td>8.78 KB</td></tr><tr><td><span class=\"file\">Porting-title.html</span></td><td>File</td><td>8.63 KB</td></tr><tr><td><span class=\"file\">Tools-date.html</span></td><td>File</td><td>16.03 KB</td></tr><tr><td><span class=\"file\">Tools-rev-date.html</span></td><td>File</td><td>10.85 KB</td></tr><tr><td><span class=\"file\">Tools-rev-revision.html</span></td><td>File</td><td>10.83 KB</td></tr><tr><td><span class=\"file\">Tools-rev-title.html</span></td><td>File</td><td>10.84 KB</td></tr><tr><td><span class=\"file\">Tools-title.html</span></td><td>File</td><td>15.88 KB</td></tr><tr><td><span class=\"file\">UserExperience-date.html</span></td><td>File</td><td>8.85 KB</td></tr><tr><td><span class=\"file\">UserExperience-title.html</span></td><td>File</td><td>8.69 KB</td></tr><tr><td><span class=\"folder\">Cocoa</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">CoreFoundation</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">css</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Darwin</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">DeveloperTools</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">GraphicsImaging</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">HardwareDrivers</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">images</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index-date.html</span></td><td>File</td><td>38.14 KB</td></tr><tr><td><span class=\"file\">index-rev-date.html</span></td><td>File</td><td>20.91 KB</td></tr><tr><td><span class=\"file\">index-rev-revision.html</span></td><td>File</td><td>20.89 KB</td></tr><tr><td><span class=\"file\">index-rev-title.html</span></td><td>File</td><td>20.9 KB</td></tr><tr><td><span class=\"file\">index-rev-topic.html</span></td><td>File</td><td>45.06 KB</td></tr><tr><td><span class=\"file\">index-title.html</span></td><td>File</td><td>38.14 KB</td></tr><tr><td><span class=\"file\">index-topic.html</span></td><td>File</td><td>77.78 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>17.08 KB</td></tr><tr><td><span class=\"folder\">Internationalization</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">InternetWeb</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Java</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">js</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">LegacyTechnologies</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">MacOSX</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">OpenSource</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Performance</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Porting</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Resources</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">ScriptingAutomation</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">UserExperience</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Xcode</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">featuredarticles</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">adcstyle.css</span></td><td>File</td><td>15.86 KB</td></tr><tr><td><span class=\"folder\">AppleApplications</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">idxDashboard-date.html</span></td><td>File</td><td>8.35 KB</td></tr><tr><td><span class=\"file\">idxDashboard-title.html</span></td><td>File</td><td>8.24 KB</td></tr><tr><td><span class=\"file\">index-date.html</span></td><td>File</td><td>8.52 KB</td></tr><tr><td><span class=\"file\">index-title.html</span></td><td>File</td><td>8.51 KB</td></tr><tr><td><span class=\"file\">index-topic.html</span></td><td>File</td><td>8.51 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>6.46 KB</td></tr><tr><td><span class=\"folder\">Carbon</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Cocoa</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">css</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">DeveloperTools</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">Games</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">images</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index-date.html</span></td><td>File</td><td>16.03 KB</td></tr><tr><td><span class=\"file\">index-title.html</span></td><td>File</td><td>16.03 KB</td></tr><tr><td><span class=\"file\">index-topic.html</span></td><td>File</td><td>19.32 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>10.98 KB</td></tr><tr><td><span class=\"folder\">js</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">LegacyTechnologies</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">ScriptingAutomation</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">UserExperience</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>0.23 KB</td></tr><tr><td><span class=\"folder\">qa</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">reference</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">referencelibrary</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">releasenotes</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">samplecode</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">technicalnotes</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">technicalqas</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">technotes</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">version.plist</span></td><td>File</td><td>0.44 KB</td></tr><tr><td><span class=\"file\">iPhone SDK License.rtf</span></td><td>File</td><td>37.93 KB</td></tr><tr><td><span class=\"folder\">Perl</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">wxPerl</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">INSTALL.pod</span></td><td>File</td><td>8.26 KB</td></tr><tr><td><span class=\"file\">todo.txt</span></td><td>File</td><td>2.3 KB</td></tr><tr><td><span class=\"folder\">Python</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">PyObjC</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">announcement.txt</span></td><td>File</td><td>2.33 KB</td></tr><tr><td><span class=\"file\">api-notes-macosx.html</span></td><td>File</td><td>30.09 KB</td></tr><tr><td><span class=\"file\">api-notes-macosx.txt</span></td><td>File</td><td>18.37 KB</td></tr><tr><td><span class=\"file\">C-API.html</span></td><td>File</td><td>11 KB</td></tr><tr><td><span class=\"file\">C-API.txt</span></td><td>File</td><td>8.67 KB</td></tr><tr><td><span class=\"file\">coding-style.html</span></td><td>File</td><td>4.53 KB</td></tr><tr><td><span class=\"file\">coding-style.txt</span></td><td>File</td><td>2.92 KB</td></tr><tr><td><span class=\"file\">gnustep.html</span></td><td>File</td><td>1.96 KB</td></tr><tr><td><span class=\"file\">gnustep.txt</span></td><td>File</td><td>1.52 KB</td></tr><tr><td><span class=\"file\">index.html</span></td><td>File</td><td>2.75 KB</td></tr><tr><td><span class=\"file\">index.txt</span></td><td>File</td><td>2.64 KB</td></tr><tr><td><span class=\"file\">intro.html</span></td><td>File</td><td>44.82 KB</td></tr><tr><td><span class=\"file\">intro.txt</span></td><td>File</td><td>38.38 KB</td></tr><tr><td><span class=\"file\">protocols.html</span></td><td>File</td><td>3.48 KB</td></tr><tr><td><span class=\"file\">protocols.txt</span></td><td>File</td><td>2.79 KB</td></tr><tr><td><span class=\"file\">PyObjCTools.html</span></td><td>File</td><td>10.96 KB</td></tr><tr><td><span class=\"file\">PyObjCTools.txt</span></td><td>File</td><td>7.9 KB</td></tr><tr><td><span class=\"folder\">Quartz</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">api-notes.txt</span></td><td>File</td><td>1.47 KB</td></tr><tr><td><span class=\"file\">release-process.html</span></td><td>File</td><td>3.83 KB</td></tr><tr><td><span class=\"file\">release-process.txt</span></td><td>File</td><td>2.65 KB</td></tr><tr><td><span class=\"file\">structure.html</span></td><td>File</td><td>6.55 KB</td></tr><tr><td><span class=\"file\">structure.txt</span></td><td>File</td><td>5.1 KB</td></tr><tr><td><span class=\"file\">TODO.html</span></td><td>File</td><td>13.49 KB</td></tr><tr><td><span class=\"file\">TODO.txt</span></td><td>File</td><td>9.06 KB</td></tr><tr><td><span class=\"folder\">tutorial</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">tutorial_embed</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">tutorial_reading.html</span></td><td>File</td><td>12.85 KB</td></tr><tr><td><span class=\"file\">tutorial_reading.txt</span></td><td>File</td><td>11.12 KB</td></tr><tr><td><span class=\"file\">website.lst</span></td><td>File</td><td>0.58 KB</td></tr><tr><td><span class=\"file\">wrapping.html</span></td><td>File</td><td>6.04 KB</td></tr><tr><td><span class=\"file\">wrapping.txt</span></td><td>File</td><td>5.2 KB</td></tr><tr><td><span class=\"folder\">xcode</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">Xcode-Templates.html</span></td><td>File</td><td>13.97 KB</td></tr><tr><td><span class=\"folder\">wxPython</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">RubyCocoa</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"folder\">wxWidgets</span></td><td>Folder</td><td>--</td></tr><tr><td><span class=\"file\">Xcode Tools License.rtf</span></td><td>File</td><td>18.79 KB</td></tr></tbody></table><pre class=\"listing\">\n$(\"#example-advanced\").treetable({ expandable: true });\n\n// Highlight selected row\n$(\"#example-advanced tbody\").on(\"mousedown\", \"tr\", function() {\n  $(\".selected\").not(this).removeClass(\"selected\");\n  $(this).toggleClass(\"selected\");\n});\n\n// Drag &amp; Drop Example Code\n$(\"#example-advanced .file, #example-advanced .folder\").draggable({\n  helper: \"clone\",\n  opacity: .75,\n  refreshPositions: true,\n  revert: \"invalid\",\n  revertDuration: 300,\n  scroll: true\n});\n\n$(\"#example-advanced .folder\").each(function() {\n  $(this).parents(\"#example-advanced tr\").droppable({\n    accept: \".file, .folder\",\n    drop: function(e, ui) {\n      var droppedEl = ui.draggable.parents(\"tr\");\n      $(\"#example-advanced\").treetable(\"move\", droppedEl.data(\"ttId\"), $(this).data(\"ttId\"));\n    },\n    hoverClass: \"accept\",\n    over: function(e, ui) {\n      var droppedEl = ui.draggable.parents(\"tr\");\n      if(this != droppedEl[0] &amp;&amp; !$(this).is(\".expanded\")) {\n        $(\"#example-advanced\").treetable(\"expandNode\", $(this).data(\"ttId\"));\n      }\n    }\n  });\n});</pre>\n\n      <h3>AJAX enabled D&amp;D example</h3>\n\n      <p>See <a href=\"https://github.com/ludo/jquery-treetable-ajax-example\">https://github.com/ludo/jquery-treetable-ajax-example</a>.</p>\n\n      <h3>Using treetable with PersistJS</h3>\n\n      <p>See <a href=\"https://github.com/jughead/jquery-treetable-ajax-persist\">https://github.com/jughead/jquery-treetable-ajax-persist</a>.</p>\n    ',1),(50,'micc83/editTable','https://github.com/micc83/editTable',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>jQuery editTable is a very small jQuery Plugin (~1Kb gzipped) that fill the gap left by the missing of a default <strong>input field for data tables</strong>. jQuery editTable can be used both in ajax and/or HTTP POST contest and let you preset the title and number of columns or just let complete freedom to the user. You can even append custom behaviors to single column cells (ex. <strong>jQuery UI Datepicker</strong>). The only limit is your imagination! :)</p>\n\n<p>To use it you just have to include jQuery and a copy of the plugin in your head or footer:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"jquery.edittable.min.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"jquery.edittable.min.css\"&gt;\n</code></pre>\n\n<p>Now you can trigger editTable on any textarea or block element (ex. div, article, section ...). In case you trigger it on a textarea, its content will be used as JSON source for the table. If the textarea is inside a form, on submit, its content will be updated with the new JSON data. Otherwise, if you trigger it on a block element the table will be appended to the element itself (ajax).</p>\n\n<pre><code>var mytable = $(\'#edittable\').editTable({\n    data: [[\'\']],           // Fill the table with a js array (this is overridden by the textarea content if not empty)\n    tableClass: \'inputtable\',   // Table class, for styling\n    jsonData: false,        // Fill the table with json data (this will override data property)\n    headerCols: false,      // Fix columns number and names (array of column names)\n    maxRows: 999,           // Max number of rows which can be added\n    first_row: true,        // First row should be highlighted?\n    row_template: false,    // An array of column types set in field_templates\n    field_templates: false, // An array of custom field type objects\n\n    // Validate fields\n    validate_field: function (col_id, value, col_type, $element) {\n        return true;\n    }\n});\n</code></pre>\n\n<p>There are of course many methods which can be used on the created table. Let\'s see...</p>\n\n<pre><code>mytable.loadData(dataArray);    // Fill the table with js data\nmytable.loadJsonData(jsonData); // Fill the table with JSON data\nmytable.getData();              // Get a js array of the table data\nmytable.getJsonData();          // Get JSON from the table data\nmytable.reset();                // Reset the table to the initial set of data\nmytable.isValidated()           // Check if the table pass validation set with validate_field\n</code></pre>\n\n<p>To define a <strong>custom field type</strong> object:</p>\n\n<pre><code>[\n    \'checkbox\' : {\n\n        html: \'&lt;input type=\"checkbox\"&gt;\',     // Input type html\n\n        // How to get the value from the custom input\n        getValue: function (input) {\n            return $(input).is(\':checked\');\n        },\n\n        // How to set the value of the custom input\n        setValue: function (input, value) {\n            if ( value ){\n                return $(input).attr(\'checked\', true);\n            }\n            return $(input).removeAttr(\'checked\');\n        }\n    }\n]\n</code></pre>\n\n<p>That\'s it, now give a look to <a href=\"http://codeb.it/edittable/\">the examples</a> to understand how it works.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/micc83/editTable#credits-and-contacts\"><span class=\"octicon octicon-link\"></span></a>Credits and contacts</h2>\n\n<p>ReStable has been made by <a href=\"http://codeb.it\">me</a>. You can contact me at <a href=\"mailto:micc83@gmail.com\">micc83@gmail.com</a> or <a href=\"https://twitter.com/Micc1983\">twitter</a> for any issue or feauture request.</p>\n',1),(51,'How to Create a Fullscreen Video Opening Animation | Codrops','http://tympanus.net/codrops/2015/09/17/how-to-create-a-fullscreen-video-opening-animation/',1,0,'\n								<p>A tutorial on how to create a video opening animation inspired by the effect seen on momentsapp.com.</p>								<div class=\"ct-ad-article-wrapper\">\n										<div class=\"ct-ad-article\">\n																						<img class=\"ct-ad-img\" src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/themes/codropstheme03/images/advertisement.jpg\" alt=\"advertisement.jpg\" /></div>\n									</div>\n								\n								<p><a href=\"http://tympanus.net/Tutorials/VideoOpeningAnimation/\"><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/07/VideoOpeningAnimation_main.jpg\" alt=\"VideoOpeningAnimation_main\" width=\"580\" height=\"315\" class=\"alignnone size-full wp-image-24591\" /></a></p>\n<p><a class=\"demo\" href=\"http://tympanus.net/Tutorials/VideoOpeningAnimation/\">View demo</a> <a class=\"download\" href=\"http://tympanus.net/Tutorials/VideoOpeningAnimation/VideoOpeningAnimation.zip\">Download source</a></p>\n<p>In this in-depth tutorial we want to show you how to create a similar video opening effect to the one seen on <a href=\"http://momentsapp.com/\">momentsapp.com</a>. If you click the “Watch the video” button on the Moments App page, you will see a new image appearing on the photo stack which contains a video. The animation is a slight rotation of the frame and a subtle scaling of the video, which already starts to play. The whole wrapper expands to full screen without any play controls; just the closing cross will be shown. Once the video ends, or, if the user clicks on the closing cross, the video will simply disappear.</p>\n<p>We’ll be using many interesting CSS properties, like <a href=\"http://tympanus.net/codrops/css_reference/animation/\">CSS animations</a>, <a href=\"http://tympanus.net/codrops/css_reference/length/#section_viewportlengths\">viewport-percentage lengths</a>, <a href=\"http://www.w3.org/TR/css3-mediaqueries/\">media queries</a> and the <a href=\"http://tympanus.net/codrops/css_reference/flexbox/\">Flexbox</a> layout mode, beside others. We’ll also dive a bit into HTML5 video and some of its attributes and definitions.</p>\n<p><em>Note that most of these properties are supported in modern browsers only.</em></p>\n<p><strong>The images in the demo are by photographer <a href=\"https://pixabay.com/en/users/Herriest-98056/\">Herriest</a> and the video is from <a href=\"http://unripecontent.com/\">UnripeContent</a>, a great place to find lots of free footage from various categories.</strong></p>\n<p>Let’s get down to business and start by planning the effect, write our markup and the JavaScript. Then we’ll style everything and set up the animations that will give live to the whole effect. </p>\n<h2>Planning, Markup and JavaScript</h2>\n<p>We want to animate a wrapper that contains a video that also gets animated, so we’ll need a nested structure with two wrappers for the video. The only control that we want to have is a close button which will also go into the same wrapper. The video will need to be in MP4 format for minimum support but we’ll add multiple sources for support in various browsers. Read more about this topic in the <a href=\"https://en.wikipedia.org/wiki/HTML5_video\">Wikipedia entry on HTML5 video</a> and Pete LePage’s insightful <a href=\"http://www.html5rocks.com/en/tutorials/video/basics/\">HTML5 Video</a> article on HTML5 Rocks. We’ve used the handy <a href=\"https://cloudconvert.com/mp4-to-anything\">CloudConvert service</a> for converting our MP4 video into the required file formats (<em>WebM</em> and <em>Ogg</em>).</p>\n<p>The <em>poster</em> attribute value allows us to set an image that will be shown before the video loads. With the <em>preload</em> attribute value set to <strong>auto</strong>, we tell the browser that it’s desirable to download the entire video optimistically, i.e. with the outlook on accomplishment. The sources for the different video file formats are listed inside the <code>video</code> element. When defining a source, we also set the <em>codec</em>; a <em>codec</em> encodes audio and video by turning a set of images into a compressed video stream or a set of audio samples into an audio stream and the other way around. The containers for video/audio stream combinations are the familiar file formats like MP4 (combines H.264 with AAC audio) or WebM (VP8 and Vorbis). These also have an identifying MIME type, like “video/webm”. For an in-depth explanation, check out <a href=\"http://tools.ietf.org/html/rfc6381\">The ‘Codecs’ and ‘Profiles’ Parameters for “Bucket” Media Types</a>.</p>\n<img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/07/VideoOpeningAnimation_codec.jpg\" alt=\"Videocodec\" width=\"890\" height=\"656\" class=\"size-full wp-image-24573\" />Using a program like the VLC media player, you can get useful information about the streams.<p>Let’s write the markup:</p>\n<pre class=\"brush:html\"><code>\r\n&lt;div class=\"video-wrap\"&gt;\r\n	&lt;div class=\"video-inner\"&gt;\r\n		&lt;video class=\"video-player\" src=\"media/woods.mp4\" poster=\"media/woods.jpg\" preload=\"auto\"&gt;\r\n			&lt;source src=\"media/woods.webm\" type=\'video/webm; codecs=\"vp8.0, vorbis\"\'&gt;\r\n			&lt;source src=\"media/woods.ogg\" type=\'video/ogg; codecs=\"theora, vorbis\"\'&gt;\r\n			&lt;source src=\"media/woods.mp4\" type=\'video/mp4; codecs=\"avc1.4D401E, mp4a.40.2\"\'&gt;\r\n			&lt;p&gt;Sorry, but your browser does not support this video format.&lt;/p&gt;\r\n		&lt;/video&gt;\r\n		&lt;button class=\"action action--close\"&gt;\r\n			&lt;i class=\"fa fa-close\"&gt;&lt;/i&gt;\r\n			&lt;span class=\"action__label action__label--hidden\"&gt;Close preview&lt;/span&gt;\r\n		&lt;/button&gt;\r\n	&lt;/div&gt;&lt;!-- /video-inner--&gt;\r\n&lt;/div&gt;&lt;!-- /video-wrap--&gt;\r\n\r\n&lt;div class=\"content\"&gt;\r\n	&lt;div class=\"loader\"&gt;\r\n		&lt;i class=\"fa fa-spinner fa-pulse\"&gt;&lt;/i&gt;\r\n	&lt;/div&gt;\r\n	&lt;button class=\"action action--hidden action--play\"&gt;\r\n		&lt;i class=\"fa fa-play\"&gt;&lt;/i&gt;&lt;span class=\"action__label\"&gt;Watch the video&lt;/span&gt;\r\n	&lt;/button&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>We’ll also add a play button that will serve as our trigger for the opening animation and playing the video. As you can see, we are using the <a href=\"http://fortawesome.github.io/Font-Awesome/\">Font Awesome icon font</a> here (class <strong>fa</strong>). </p>\n<p>When we click on that play button, we will add the class <strong>video-wrap–show</strong> to the <strong>video-wrap</strong> division. This will allow us to control the effect on a class-basis by using CSS animations and transitions. Once we click on the closing cross, we will remove that class and add <strong>video-wrap–hide</strong> instead. Like that, we can define an alternative closing behavior with a different animation. </p>\n<p>Our aim is to control all the effect using mostly CSS; adding the classes and controlling the playing of the video will be our script’s job.</p>\n<p>So let’s sum up what we need to do in order to achieve what we want:</p>\n<ul><li>The video will take some time to load, so we’ll need to make sure that we don’t allow opening the video if it’s not ready yet. We can do that by adding the control class <strong>video-loaded</strong> to the body once the video is loaded. This will allow us to control the visibility of the loader element and the play button.</li>\n<li>When we click on the play button, we want the animation to start. By adding the class <strong>video-wrap–show</strong> to our video wrapper, we trigger the animation, and we start playing the video a bit later.</li>\n<li>When the video reaches the end or when we click on the closing cross, we’ll add the class <strong>video-wrap–hide</strong> to play our alternate closing animation.</li>\n<li>We pause the video if it hasn’t ended and we set it to the beginning if we open it (again).</li>\n</ul><p>Let’s write the JavaScript, implementing all the control behavior we have defined before:</p>\n<pre class=\"brush:js\"><code>;( function() {\r\n	\r\n	\'use strict\';\r\n\r\n	var bodyEl = document.body,\r\n		videoWrap = document.querySelector(\'.video-wrap\'),\r\n		videoEl = videoWrap.querySelector(\'video\'),\r\n		playCtrl = document.querySelector(\'.action--play\'),\r\n		closeCtrl = document.querySelector(\'.action--close\');\r\n\r\n	function init() {\r\n		initEvents();\r\n	}\r\n\r\n	function initEvents() {\r\n		playCtrl.addEventListener(\'click\', play);\r\n		closeCtrl.addEventListener(\'click\', hide);\r\n		videoEl.addEventListener(\'canplaythrough\', allowPlay);\r\n		videoEl.addEventListener(\'ended\', hide);\r\n	}\r\n\r\n	function allowPlay() {\r\n		classie.add(bodyEl, \'video-loaded\');\r\n	}\r\n\r\n	function play() {\r\n		videoEl.currentTime = 0;\r\n		classie.remove(videoWrap, \'video-wrap--hide\');\r\n		classie.add(videoWrap, \'video-wrap--show\');\r\n		setTimeout(function() {videoEl.play();}, 600);\r\n	}\r\n\r\n	function hide() {\r\n		classie.remove(videoWrap, \'video-wrap--show\');\r\n		classie.add(videoWrap, \'video-wrap--hide\');\r\n		videoEl.pause();\r\n	}\r\n\r\n	init();\r\n\r\n})();\r\n</code></pre>\n<p>Quite straightforward, right? :) The beauty of having the functionality class-controlled is that we can now define the behavior in an interconnected way in our stylesheet. This has many advantages when it comes to managing an effect. But it’s a matter of preference and requirements; if you have many complex interactions going on, you might be better off defining most or all the behavior (animations, transitions or visibility) in your JavaScript. But we want to dive into CSS today and explore some exciting properties that will hopefully help you with some other challenges during your development work.</p>\n<div class=\"ct-ad-article-wrapper ct-ad-article-wrapper-in\"><div class=\"ct-ad-article\"><img class=\"ct-ad-img\" src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/themes/codropstheme03/images/advertisement.jpg\" alt=\"advertisement.jpg\" /></div></div>\n<p>The effect from the Moments App website is great for examining and utilizing some exciting techniques, so let’s dive into the CSS!</p>\n<h2>The CSS</h2>\n<p>Let’s bring everything to life with our style definitions. We’ll focus on the styles that are important for the effect only, but you can check out the resting styles for the page in the <em>style.css</em> file that is located in the <em>css</em> folder. </p>\n<p>Let’s start by setting the <a href=\"http://tympanus.net/codrops/css_reference/box-sizing/\">box-sizing</a> to <strong>border-box</strong> for all elements. This box model is the preferred choice among developers because it has the advantage of allowing to define sizes <em>including</em> borders and paddings:</p>\n<pre class=\"brush:html\"><code>*,\r\n*:after,\r\n*:before {\r\n	-webkit-box-sizing: border-box;\r\n	box-sizing: border-box;\r\n}</code></pre>\n<p>Let’s define the body and link styles:</p>\n<pre class=\"brush:css\"><code>body {\r\n	font-family: \'Avenir Next\', \'Helvetica Neue\', \'Lato\', \'Segoe UI\', Helvetica, Arial, sans-serif;\r\n	color: #fff;\r\n	background: #333 url(../media/woods.jpg) no-repeat center center;\r\n	background-size: cover;\r\n	-webkit-font-smoothing: antialiased;\r\n	-moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\na {\r\n	text-decoration: none;\r\n	color: #d9ecc9;\r\n	outline: none;\r\n}\r\n\r\na:hover,\r\na:focus {\r\n	color: #fff;\r\n}\r\n</code></pre>\n<p>You don’t need to set the font-smoothing properties, but we choose to do so here as it makes the fonts crisp on Mac and prevents some jiggling in Firefox. </p>\n<p>Next, we need to set the styles for our main page container that wraps everything. Using <a href=\"http://tympanus.net/codrops/css_reference/length/#section_viewportlengths\">viewport-percentage lengths</a>, we set its dimensions to span over the whole viewport and hide any overflow. <em>How do we want the elements inside of the container to be laid out?</em> Since we are using a fixed 100% height, we want the elements to be spread in one column, which is centered on the screen. What a pain this would be without the fantastic <a href=\"http://tympanus.net/codrops/css_reference/flexbox/\">Flexbox</a> layout mode :) Let’s make extensive use of it and define exactly what we want: </p>\n<pre class=\"brush:css\"><code>.container {\r\n	width: 100vw;\r\n	height: 100vh;\r\n	border: 20px solid #fff;\r\n	position: relative;\r\n	overflow: hidden;\r\n	display: -webkit-flex;\r\n	display: flex;\r\n	-webkit-flex-direction: column;\r\n	flex-direction: column;\r\n	-webkit-justify-content: space-around;\r\n	justify-content: space-around;\r\n	-webkit-align-items: center;\r\n	align-items: center;\r\n}\r\n</code></pre>\n<p>We set the display to <strong>flex</strong> and the flex-direction property to <strong>column</strong>. Justifying the content with <strong>space-around</strong> and aligning the items using <strong>center</strong> will give us the elastic layout we want. Try resizing your browser window to see how the elements will be laid out depending on how much space is available.</p>\n<p>Let’s take care of that main video wrapper. Now, before we start styling away, let’s reflect on some possible scenarios and what we need to consider so that things don’t break. We need to cover every possible case (or at least the most important ones, leaving out devices like tiny watches). Considering the case of a smartphone or small device, we want to avoid too much fanciness and we have to consider native behavior (which might just throw our entire effect overboard, like it is the case for iOS). </p>\n<p>So we want our effect to only animate entirely for larger screens and we don’t want to do anything too elaborate for tiny screens (we just want to show the video wrapper). We make use of media queries of which we will have two: one for defining the whole effect for screens bigger than 25em, and one for defining some styles differently according to the aspect ratio of the screen. Our reference aspect ratio is the video itself: with a size of 1280 × 720, we have an aspect ratio of 1280/720, or 16/9. Since we want to make sure that the video covers the whole screen, we need to distinguish between the “vertical” and the “horizontal” case. One will use the width of the video to cover the screen and one will take the height. But more on that later.</p>\n<p>The “default” styles without the main animation effect will be defined first, and then we’ll add everything else we need to our media queries.</p>\n<p>The main wrapper will be a fixed element that will take up all the width and height available. We’ll use flexbox to center the inner container, so let’s define the necessary properties:</p>\n<pre class=\"brush:css\"><code>.video-wrap {\r\n	position: fixed;\r\n	z-index: 1000;\r\n	top: 0;\r\n	left: 0;\r\n	width: 100%;\r\n	height: 100%;\r\n	pointer-events: none;\r\n	display: -webkit-flex;\r\n	display: flex;\r\n	-webkit-align-items: center;\r\n	align-items: center;\r\n}\r\n</code></pre>\n<p>We set the z-index value of the element very high so that it’s on top of everything else, but we don’t want it to be clickable when the inner parts are hidden. Using <strong>pointer-events: none</strong> will make the wrapper “untouchable” and invisible to interaction but be careful when using this, <a href=\"http://caniuse.com/#feat=pointer-events\">support is limited</a>. You can achieve a similar behavior by using <em>visibility</em>, though. If you are interested in how that works, check out this short post of our <a href=\"http://tympanus.net/codrops/2014/02/06/fullscreen-overlay-effects/\">Fullscreen Overlay Effects</a>. </p>\n<p>When we show the video, we will set the pointer-events to <em>auto</em>:</p>\n<pre class=\"brush:css\"><code>.video-wrap--show {\r\n	pointer-events: auto;\r\n}\r\n</code></pre>\n<p>While the main video wrapper serves as a layout container, the <strong>video-inner</strong> division and the video itself are our crucial main players. Let’s set the base styles for the <strong>video-inner</strong> div:</p>\n<pre class=\"brush:css\"><code>.video-inner {\r\n	position: relative;\r\n	overflow: hidden;\r\n	width: 100%;\r\n	height: 100%;\r\n	margin: 0 auto;\r\n	opacity: 0;\r\n	background: black;\r\n}\r\n</code></pre>\n<p>Here we set the width and height to 100% because no expansion or fancy effect will happen for the base case of small devices.</p>\n<pre class=\"brush:css\"><code>.video-wrap--show .video-inner {\r\n	opacity: 1;\r\n}\r\n</code></pre>\n<p>Adding our “show” class will simply trigger the visibility of the inner division.</p>\n<p>The video element itself will be positioned absolutely and centered by setting the top to 50% and a transform to “pull” it back up half of its own height:</p>\n<pre class=\"brush:css\"><code>.video-player {\r\n	position: absolute;\r\n	top: 50%;\r\n	width: 100%;\r\n	-webkit-transform: translate3d(0,-50%,0);\r\n	transform: translate3d(0,-50%,0);\r\n}\r\n</code></pre>\n<p>These are the base styles that will allow to show the main video wrapper and to look like this for small screens:</p>\n<p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/07/VideoOpeningAnimation_screen_base.jpg\" alt=\"VideoOpeningAnimation_screen_base\" width=\"398\" height=\"696\" class=\"alignnone size-full wp-image-24576\" /></p>\n<p>Remember, the styles for the main effect will be defined in two media queries later on.</p>\n<p>Let’s style the loader and action buttons (play and close). The loader and play button will be placed in a division with the class <strong>content</strong> which needs relative positioning. Why? We want the loader to be positioned absolutely in the same place of the play button so that we can switch both with a transition:</p>\n<pre class=\"brush:css\"><code>.content {\r\n	position: relative;\r\n}\r\n\r\n/* Loader */\r\n.loader {\r\n	font-size: 2.5em;\r\n	position: absolute;\r\n	top: 50%;\r\n	left: 50%;\r\n	-webkit-transform: translate3d(-50%,-50%,0);\r\n	transform: translate3d(-50%,-50%,0);\r\n}\r\n\r\n.video-loaded .loader {\r\n	opacity: 0;\r\n	pointer-events: none;\r\n	-webkit-transition: opacity 0.3s;\r\n	transition: opacity 0.3s;\r\n}\r\n</code></pre>\n<p>The buttons that are actions will get the class <strong>action</strong> and we will define some common styles:</p>\n<pre class=\"brush:css\"><code>.action {\r\n	font-family: \'Avenir Next\', \'Helvetica Neue\', \'Lato\', \'Segoe UI\', Helvetica, Arial, sans-serif;\r\n	font-size: 1.15em;\r\n	font-weight: bold;\r\n	position: relative;\r\n	overflow: hidden;\r\n	margin: 0;\r\n	padding: 1em 2em;\r\n	color: #fff;\r\n	border: 2px solid;\r\n	border-radius: 40px;\r\n	background: none;\r\n	-webkit-flex: none;\r\n	flex: none;\r\n}\r\n\r\n.action:focus {\r\n	outline: none;\r\n}\r\n</code></pre>\n<p>Setting the flex property value to <em>none</em> will make sure that our button doesn’t get squeezed when things get tight. </p>\n<p>We remove the outline on focus. <em>(Note: Yes, it’s an absolute sin to do this but I consider it an absolute no-brainer that <strong>you should provide an appropriate focus style for maintaining good accessibility</strong> but when creating demos for Codrops, I want the UI to be impeccable for the sake of being able to concentrate solely on the effect in question; in my opinion, the :focus style breaks this by changing the style on click in a permanent way.)</em></p>\n<p>The action label or text will be set to inline and when we don’t want to show the label but keep it screen reader accessible, we can hide it by setting its position to absolute and the top value to 200%. Note that we need to set the parent’s overflow value to <em>hidden</em> for this to work. </p>\n<pre class=\"brush:css\"><code>.action__label {\r\n	display: inline-block;\r\n	margin: 0 0 0 0.75em;\r\n}\r\n\r\n.action__label--hidden {\r\n	position: absolute;\r\n	top: 200%;\r\n}\r\n</code></pre>\n<p>The play button will be invisible initially, and then, when the video is loaded and we add the <strong>video-loaded</strong> class to the body, we show it: </p>\n<pre class=\"brush:css\"><code>.action--play {\r\n	display: block;\r\n	margin: 1em auto;\r\n	opacity: 0;\r\n	pointer-events: none;\r\n	-webkit-transition: opacity 0.3s 0.1s;\r\n	transition: opacity 0.3s 0.1s;\r\n}\r\n\r\n.video-loaded .action--play {\r\n	opacity: 1;\r\n	pointer-events: auto;\r\n}\r\n</code></pre>\n<p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/07/VideoOpeningAnimation_screen12.jpg\" alt=\"VideoOpeningAnimation_screen1\" width=\"890\" height=\"610\" class=\"alignnone size-full wp-image-24587\" /></p>\n<p>The closing button which is placed in our inner video wrapper, will be shown using a transition on its opacity and scale transform. This transition will have a delay when we open the video wrapper, but none when we close it:</p>\n<pre class=\"brush:css\"><code>.action--close {\r\n	line-height: 1;\r\n	position: absolute;\r\n	z-index: 1000;\r\n	top: 30px;\r\n	right: 30px;\r\n	width: 60px;\r\n	height: 60px;\r\n	padding: 0;\r\n	opacity: 0;\r\n	-webkit-transition: -webkit-transform 0.3s, opacity 0.3s;\r\n	transition: transform 0.3s, opacity 0.3s;\r\n	-webkit-transform: scale3d(0.7,0.7,1);\r\n	transform: scale3d(0.7,0.7,1);\r\n}\r\n\r\n.video-wrap--show .action--close {\r\n	opacity: 1;\r\n	-webkit-transition-delay: 1.2s;\r\n	transition-delay: 1.2s;\r\n	-webkit-transform: scale3d(1,1,1);\r\n	transform: scale3d(1,1,1);\r\n}\r\n</code></pre>\n<p>Now we are getting to the heart of our styles. </p>\n<p>For screens that are at least 25em in width, we want the expanding animation to take effect. So first we need to set the inner video wrapper to the right size. For the “vertical” case we will use the viewport width as a base measure to size our inner container. We do that so that we have a similar size to the decorative polaroid images which also have a dynamic width and height depending on the aspect ratio. </p>\n<p>Once we set the main wrapper’s class to <strong>video-wrap–show</strong>, we play the animation <strong>showVideo-1</strong>. When we close it, we will use the animation <strong>hideVideo</strong>. We’ll have a more detailed look at the animations later on. </p>\n<p>The inner video wrapper will be slightly rotated and scaled down initially. You could also set these properties in the 0% keyframe but you can save yourself the repetition and just define the initial state in the class declaration. </p>\n<p>The video element will take up all the viewport height for this default “vertical case” (in the next media query we will switch that) and let the width be defined automatically. It will also be transformed; first, to be centered with the “translate -50%” technique, then scaled and rotated in the opposite direction to compensate the rotation of the parent slightly. We don’t want to rotate it too much, as we don’t want any edges to show here. Make sure to play around with these transforms to see how you can achieve other interesting effects.</p>\n<p>When we show the main wrapper, we will change the video element’s transform (we’ll still keep it centered, though) and make sure that it’s also in that state when we close it. When we hide everything, we simply want to fade out the wrapper without animating it back. When closing things and making them disappear always think of the fastest elegant way to do it; remember that the user has decided to get rid of whatever is being closed, so making it easy and more fast can be desirable in cases like these.</p>\n<pre class=\"brush:css\"><code>@media screen and (min-width: 25em) {\r\n	.video-inner {\r\n		width: 30vw;\r\n		height: 30vw;\r\n		border: 20px solid #fff;\r\n		-webkit-transform: scale3d(0.1,0.1,1) rotate3d(0,0,1,-5deg);\r\n		transform: scale3d(0.1,0.1,1) rotate3d(0,0,1,-5deg);\r\n	}\r\n	.video-wrap--show .video-inner {\r\n		opacity: 0;\r\n		-webkit-animation: showVideo-1 1.25s forwards;\r\n		animation: showVideo-1 1.25s forwards;\r\n	}\r\n	.video-wrap--hide .video-inner {\r\n		-webkit-animation: hideVideo 1.25s forwards;\r\n		animation: hideVideo 1.25s forwards;\r\n	}\r\n	.video-player {\r\n		left: 50%;\r\n		width: auto;\r\n		height: 100vh;\r\n		-webkit-transition: -webkit-transform 1s;\r\n		transition: transform 1s;\r\n		-webkit-transform: translate3d(-50%,-50%,0) scale3d(0.7,0.7,1) rotate3d(0,0,1,5deg);\r\n		transform: translate3d(-50%,-50%,0) scale3d(0.7,0.7,1) rotate3d(0,0,1,5deg);\r\n	}\r\n	.video-wrap--show .video-player,\r\n	.video-wrap--hide .video-player {\r\n		-webkit-transform: translate3d(-50%,-50%,0) scale3d(1,1,1);\r\n		transform: translate3d(-50%,-50%,0) scale3d(1,1,1);\r\n	}\r\n}\r\n</code></pre>\n<p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/07/VideoOpeningAnimation_screen2.jpg\" alt=\"VideoOpeningAnimation_screen2\" width=\"890\" height=\"608\" class=\"alignnone size-full wp-image-24575\" /></p>\n<p>The second media query is for the “horizontal” case, i.e. the case that we know will make the video cover the whole screen by setting the width to the full viewport width. We take the values of the video’s width and height to define the minimum aspect ratio, which is the same as 16/9.</p>\n<p>We size our inner wrapper to <em>30vh</em> initially, and the video itself will take up all the width of the screen while leaving the height to <em>auto</em>. </p>\n<pre class=\"brush:css\"><code>@media screen and (min-width: 25em) and (min-aspect-ratio: 1280/720) {\r\n	.video-inner {\r\n		width: 30vh;\r\n		height: 30vh;\r\n	}\r\n	.video-wrap--show .video-inner {\r\n		-webkit-animation: showVideo-2 1.25s forwards;\r\n		animation: showVideo-2 1.25s forwards;\r\n	}\r\n	.video-player {\r\n		width: 100vw;\r\n		height: auto;\r\n	}\r\n}\r\n</code></pre>\n<p>Just a side note on formatting the CSS: you might have noticed that we don’t use a new line between rules in media queries; this turns out to be really useful because you <em>know</em> that you are inside of a media query when editing your styles. Not a big amazing thing, but sometimes it can speed things up and ease locating something. </p>\n<p>Let’s define the animations! </p>\n<p><em>You might wonder why we are using the WebKit prefix for transitions and animations. Animations still <a href=\"http://caniuse.com/#search=animation\">need the prefix</a> for Safari (8), iOS Safari (8.4) and Android (40) in order to work and <a href=\"http://caniuse.com/#search=transition\">transitions</a> for some older Android browsers.</em></p>\n<p>The first animation is for expanding the inner video wrapper for the vertical case where we take the viewport width as base measure. You don’t need to distinguish these two cases for the inner wrapper if you have a fixed initial size. But since we want a dynamic size depending on the ratio (and because we want to show you how to abuse the relative viewport units) we define two different opening animations. </p>\n<p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/07/VideoOpeningAnimation_screen31.jpg\" alt=\"VideoOpeningAnimation_screen3\" width=\"890\" height=\"608\" class=\"alignnone size-full wp-image-24586\" /></p>\n<p>Considering the initial state of the inner wrapper, we now animate its dimensions to half of the viewport width and set the opacity to 1. We scale it up a bit but keep the rotation value. Then we animate to fullscreen, using 100vw for the width and 100vh for the height. The transforms will be “unset”: </p>\n<pre class=\"brush:css\"><code>@-webkit-keyframes showVideo-1 {\r\n	50% {\r\n		width: 50vw;\r\n		height: 50vw;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(0.5,0.5,1) rotate3d(0,0,1,-5deg);\r\n		transform: scale3d(0.5,0.5,1) rotate3d(0,0,1,-5deg);\r\n	}\r\n	100% {\r\n		width: 100vw;\r\n		height: 100vh;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n		transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n	}\r\n}\r\n\r\n@keyframes showVideo-1 {\r\n	50% {\r\n		width: 50vw;\r\n		height: 50vw;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(0.5,0.5,1) rotate3d(0,0,1,-5deg);\r\n		transform: scale3d(0.5,0.5,1) rotate3d(0,0,1,-5deg);\r\n	}\r\n	100% {\r\n		width: 100vw;\r\n		height: 100vh;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n		transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n	}\r\n}\r\n</code></pre>\n<p>The other animation is exactly the same, we just use the viewport height as base measure and so we need to set the 50% keyframe width and height to 50vh.</p>\n<pre class=\"brush:css\"><code>@-webkit-keyframes showVideo-2 {\r\n	50% {\r\n		width: 50vh;\r\n		height: 50vh;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(0.5,0.5,1) rotate3d(0,0,1,-5deg);\r\n		transform: scale3d(0.5,0.5,1) rotate3d(0,0,1,-5deg);\r\n	}\r\n	100% {\r\n		width: 100vw;\r\n		height: 100vh;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n		transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n	}\r\n}\r\n\r\n@keyframes showVideo-2 {\r\n	50% {\r\n		width: 50vh;\r\n		height: 50vh;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(0.5,0.5,1) rotate3d(0,0,1,-5deg);\r\n		transform: scale3d(0.5,0.5,1) rotate3d(0,0,1,-5deg);\r\n	}\r\n	100% {\r\n		width: 100vw;\r\n		height: 100vh;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n		transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n	}\r\n}\r\n</code></pre>\n<p>Notice, how we add the actual reset transform with the scale3d and the rotate3d. You could as well simply write one of the transform types but this is a troublemaker for browsers like FF. It’s a good idea to thoroughly test each case if you’d like to simplify it.</p>\n<p><img src=\"http://codropspz.tympanus.netdna-cdn.com/codrops/wp-content/uploads/2015/07/VideoOpeningAnimation_screen4.jpg\" alt=\"VideoOpeningAnimation_screen4\" width=\"890\" height=\"609\" class=\"alignnone size-full wp-image-24572\" /></p>\n<p>Last, but not least, we define the animation for hiding the whole thing. Remember that we’ve already taken care of hiding the video element itself in the first media query. For the video wrapper animation we set the first and last keyframe to be the same except for the opacity. Like that we are simply fading out the video wrapper. </p>\n<pre class=\"brush:css\"><code>@-webkit-keyframes hideVideo {\r\n	0% {\r\n		width: 100vw;\r\n		height: 100vh;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n		transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n	}\r\n	100% {\r\n		width: 100vw;\r\n		height: 100vh;\r\n		opacity: 0;\r\n		-webkit-transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n		transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n	}\r\n}\r\n\r\n@keyframes hideVideo {\r\n	0% {\r\n		width: 100vw;\r\n		height: 100vh;\r\n		opacity: 1;\r\n		-webkit-transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n		transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n	}\r\n	100% {\r\n		width: 100vw;\r\n		height: 100vh;\r\n		opacity: 0;\r\n		-webkit-transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n		transform: scale3d(1,1,1) rotate3d(0,0,1,0deg);\r\n	}\r\n}\r\n</code></pre>\n<p>This syntax looks like we could simplify it, right? It should be possible to define the 0% and 100% keyframe in one definition and then set the different properties in single keyframes, but this does not seem to work well in IE, unfortunately. Also, placing the animations into the media query definitions will bring you into hell’s kitchen in IE10 and IE11: they simply won’t work. Read more about this problem in this article by Karen Menezes: <a href=\"http://blog.karenmenezes.com/2014/dec/26/ie-bug-keyframe-animations/\">IE bug: keyframe animations inside a media query block</a>.</p>\n<p>These are all the styles for the effect. Make sure to play around with the transforms and the animations. For example, you could set a nice timing function or rotate differently, or even rotate in perspective; there are many possibilities—imagination is all you need :)</p>\n<p><strong>We hope you enjoyed this tutorial and find it useful! Thank you for reading!</strong></p>\n\n<p><a class=\"demo\" href=\"http://tympanus.net/Tutorials/VideoOpeningAnimation/\">View demo</a> <a class=\"download\" href=\"http://tympanus.net/Tutorials/VideoOpeningAnimation/VideoOpeningAnimation.zip\">Download source</a></p>\n								\n																	<div class=\"ct-post-nav\">\n										<div class=\"ct-post-prev\">        \n											<strong>Previous:</strong><br /><a href=\"http://tympanus.net/codrops/2015/09/16/freebie-land-io-ui-kit-landing-page-design-sketch/\">Freebie: “Land.io” UI Kit + Landing Page Design (Sketch)</a>  \n										</div>\n										\n										\n									</div> \n																\n							',1),(52,'jmschrei/pomegranate','https://github.com/jmschrei/pomegranate',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://travis-ci.org/jmschrei/pomegranate\"><img src=\"https://camo.githubusercontent.com/ed4151143eab8a141b7e3d62a62a2ceff0335bb8/68747470733a2f2f7472617669732d63692e6f72672f6a6d7363687265692f706f6d656772616e6174652e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a></p>\n\n<p>pomegranate is a package for graphical models and Bayesian statistics for Python, implemented in cython. It grew out of the <a href=\"https://github.com/jmschrei/yahmm\">YAHMM</a> package, where many of the components used could be rearranged to do other cool things. It currently supports:</p>\n\n<ul><li>Probability Distributions</li>\n<li>Finite State Machines</li>\n<li>Hidden Markov Models</li>\n<li>Discrete Bayesian Networks</li>\n<li>General Mixture Models</li>\n</ul><p>See the wiki (currently under construction) for more documentation!</p>\n\n<p>No good project is done alone, and so I\'d like to thank all the previous contributors to YAHMM, and all the current contributors to pomegranate, including the graduate students who share my office I annoy on a regular basis by bouncing ideas off of.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jmschrei/pomegranate#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<p>pomegranate is now pip installable! Install using <code>pip install pomegranate</code>. You can also clone the repo or download the zip and manually move the files into your site-packages folder.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jmschrei/pomegranate#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>If you would like to contribute a feature then fork the master branch (fork the release if you are fixing a bug). Be sure to run the tests before changing any code. You\'ll need to have <a href=\"https://github.com/nose-devs/nose\">nosetests</a> installed. The following command will run all the tests:</p>\n\n<pre><code>nosetests -w tests/\n</code></pre>\n\n<p>Let us know what you want to do just in case we\'re already working on an implementation of something similar. This way we can avoid any needless duplication of effort. Also, please don\'t forget to add tests for any new functions. </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jmschrei/pomegranate#tutorial\"><span class=\"octicon octicon-link\"></span></a>Tutorial</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/jmschrei/pomegranate#probability-distributions\"><span class=\"octicon octicon-link\"></span></a>Probability Distributions</h3>\n\n<p>The emission distributions used later on for the other models can be used independently. This is useful if you want to calculate the probability of some data given a distribution, or had to fit a distribution to some given data. pomegranate offers a simple solution, which is an extensible library of distributions and kernel densities natively built in.</p>\n\n<pre><code>from pomegranate import *\n\na = NormalDistribution( 5, 2 )\nb = TriangleKernelDensity( [1,5,2,3,4], weights=[4,2,6,3,1] )\nc = MixtureDistribution( [ NormalDistribution( 2, 4 ), ExponentialDistribution( 8 ) ], weights=[1, 0.01] )\n\nprint a.log_probability( 8 )\nprint b.log_probability( 8 )\nprint c.log_probability( 8 )\n</code></pre>\n\n<p>This should return -2.737, -inf, and -3.44 respectively.  </p>\n\n<p>We can also update these distributions using Maximum Likelihood Estimates for the new values. Kernel densities will discard previous points and add in the new points, while MixtureDistributions will perform expectation-maximization to update the mixture of distributions.</p>\n\n<pre><code>c.from_sample([1, 5, 7, 3, 2, 4, 3, 5, 7, 8, 2, 4, 6, 7, 2, 4, 5, 1, 3, 2, 1])\nprint c\n</code></pre>\n\n<p>This should result in <code>MixtureDistribution( [NormalDistribution(3.916, 2.132), ExponentialDistribution(0.99955)], [0.9961, 0.00386] )</code>. All distributions can be trained either as a batch using <code>from_sample</code>, or using summary statistics using <code>summarize</code> on lists of numbers until all numbers have been fed in, and then <code>from_summaries</code> like in the following example which produces the same result:</p>\n\n<pre><code>c = MixtureDistribution( [ NormalDistribution( 2, 4 ), ExponentialDistribution( 8 ) ], weights=[1, 0.01] )\nc.summarize([1, 5, 7, 3, 2, 4, 3])\nc.summarize([5, 7, 8])\nc.summarize([2, 4, 6, 7, 2, 4, 5, 1, 3, 2, 1])\nc.from_summaries()\n</code></pre>\n\n<p>In addition, training can be done on weighted samples by passing an array of weights in along with the data for any of the training functions, such as <code>c.summarize([5,7,8], weights=[1,2,3])</code>. Training can also be done with inertia, where the new value will be some percentage the old value and some percentage the new value, used like <code>c.from_sample([5,7,8], inertia=0.5)</code> to indicate a 50-50 split between old and new values. </p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/jmschrei/pomegranate#finite-state-machines\"><span class=\"octicon octicon-link\"></span></a>Finite State Machines</h3>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Finite-state_machine\">Finite state machines</a> are computational machines which can be in one of many states. The machine can be defined as a graphical model where the states are the states of the machine, and the edges define the transitions from each state to the other states in the machine. As the machine receives data, the state which it is in changes in a greedy fashion. Since the machine can be in only one state at a time and is memoryless, it is extremely useful. A classic example is a turnstile, which can take in nickels, dimes, and quarters, but only needs 25 cents to pass.</p>\n\n<pre><code>from pomegranate import *\n\n# Create the states in the same way as you would an HMM\na = State( None, \"5\"  )\nb = State( None, \"10\" )\nc = State( None, \"15\" )\nd = State( None, \"20\" )\ne = State( None, \"25\" )\n\n# Create a FiniteStateMachine object \nmodel = FiniteStateMachine( \"Turnstile\" )\n\n# Add the states in the same way\nmodel.add_states( [a, b, c, d, e] )\n\n# Add in transitions by using nickels\nmodel.add_transition( model.start, a, 5 )\nmodel.add_transition( a, b, 5 )\nmodel.add_transition( b, c, 5 )\nmodel.add_transition( c, d, 5 )\nmodel.add_transition( d, e, 5 )\n\n# Add in transitions using dimes\nmodel.add_transition( model.start, b, 10 )\nmodel.add_transition( a, c, 10 )\nmodel.add_transition( b, d, 10 )\nmodel.add_transition( c, e, 10 )\n\n# Add in transitions using quarters\nmodel.add_transition( model.start, e, 25 )\n\n# Bake the model in the same way\nmodel.bake()\n</code></pre>\n\n<p>In the above example, the name of the states encodes information about the state, and the edges each hold keys as to what cas pass along them. There are no distributions on these states, as this is not a probabilistic model, but distributions can be added without breaking the code if they are useful information to have on each state. </p>\n\n<pre><code># Take a sequence of observations\nseq = [ 5, 25, 10 ]\n\n\n# Print out where you start in the model\nprint model.current_state.name\n\n# Print out where the model is for each step\nfor symbol in seq:\n    i = model.current_state.name\n    model.step( symbol )\n    print \"Inserted {}: Moving from {} to {}.\".format( symbol, i, model.current_state.name )\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>Turnstile-start\nInserted 5: Moving from Turnstile-start to 5.\nInserted 5: Moving from 5 to 10.\nInserted 5: Moving from 10 to 15.\nInserted 5: Moving from 15 to 20.\nInserted 5: Moving from 20 to 25.\n</code></pre>\n\n<p>As we add nickles, we progress through the machine. But if we restarted and tried to do something invalid, we get the following, without progressing in the state machine:</p>\n\n<pre><code># Take a sequence of coins to add to the model\nseq = [ 5, 25, 10 ]\n\n# Print out where you start in the model\nprint model.current_state.name\n\n# Print out where the model is for each step\nfor symbol in seq:\n    i = model.current_state.name\n    model.step( symbol )\n    print \"Inserted {}: Moving from {} to {}.\".format( symbol, i, model.current_state.name )\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>Turnstile-start\nInserted 5: Moving from Turnstile-start to 5.\nException SyntaxError(\'No edges leaving state 5 with key 25\') in \'pomegranate.fsm.FiniteStateMachine._step\' ignored\nInserted 10: Moving from 5 to 15.\n</code></pre>\n\n<p>Presumably there would be client code surrounding the state machine to see where it is at each position, and do something based on which state it is currently in.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/jmschrei/pomegranate#hidden-markov-models\"><span class=\"octicon octicon-link\"></span></a>Hidden Markov Models</h3>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Hidden_Markov_model\">Hidden Markov models</a> are a form of structured learning, in which a sequence of observations are labelled according to the hidden state they belong. HMMs can be thought of as non-greedy FSMs, in that the assignment of tags is done in a globally optimal way as opposed to being simply the best at the next step. HMMs have been used extensively in speech recognition and bioinformatics, where speech is a sequence of phonemes and DNA is a sequence of nucleotides. </p>\n\n<p>A full tutorial on sequence alignment in bioinformatics can be found <a href=\"http://nbviewer.ipython.org/github/jmschrei/yahmm/blob/master/examples/Global%20Sequence%20Alignment.ipynb\">here</a> The gist is that you have a graphical structure as follows:</p>\n\n<p><a href=\"https://camo.githubusercontent.com/34c84a14d744eca052e419a6b4a6b2237fd73256/687474703a2f2f7777772e63732e7461752e61632e696c2f253745727368616d69722f616c676d622f30302f73637269626530302f68746d6c2f6c656330362f696d673130362e676966\"><img src=\"https://camo.githubusercontent.com/34c84a14d744eca052e419a6b4a6b2237fd73256/687474703a2f2f7777772e63732e7461752e61632e696c2f253745727368616d69722f616c676d622f30302f73637269626530302f68746d6c2f6c656330362f696d673130362e676966\" alt=\"alt text\" title=\"Three Character Profile HMM\" /></a></p>\n\n<p>This defines a \'profile HMM\' of length 3, in which you model the a profile and align new sequences to it. A perfectly matching sequence will align its three characters to the three match states. However, there can be mismatches where the observed sequence does not match the profile perfectly, which is why each emission is a distribution over all four nucleotides with small probabilities of seeing other nucleotides. There can also be insertions into the sequence, modelled by the middle track, and deleted in comparison to the profile modelled by the top track of silent states. This type of model can solve an interesting question in sequence analysis of when is it more likely that a nucleotide mutated over time (simply a mismatch in the model), versus was explicitly removed and had a new nucleotide added in (delete + insertion). We can see which is more likely using the Viterbi algorithm. </p>\n\n<p>Lets make our profile we model \'ACT\'. </p>\n\n<pre><code>from pomegranate import *\nmodel = HiddenMarkovModel( \"Global Sequence Aligner\" )\n\n# Define the distribution for insertions\ni_d = DiscreteDistribution( { \'A\': 0.25, \'C\': 0.25, \'G\': 0.25, \'T\': 0.25 } )\n\n# Create the insert states, each with a uniform insertion distribution\ni0 = State( i_d, name=\"I0\" )\ni1 = State( i_d, name=\"I1\" )\ni2 = State( i_d, name=\"I2\" )\ni3 = State( i_d, name=\"I3\" )\n\n# Create the match states with small chances of mismatches\nm1 = State( DiscreteDistribution({ \"A\": 0.95, \'C\': 0.01, \'G\': 0.01, \'T\': 0.02 }) , name=\"M1\" )\nm2 = State( DiscreteDistribution({ \"A\": 0.003, \'C\': 0.99, \'G\': 0.003, \'T\': 0.004 }) , name=\"M2\" )\nm3 = State( DiscreteDistribution({ \"A\": 0.01, \'C\': 0.01, \'G\': 0.01, \'T\': 0.97 }) , name=\"M3\" )\n\n# Create the silent delete states\nd1 = State( None, name=\"D1\" )\nd2 = State( None, name=\"D2\" )\nd3 = State( None, name=\"D3\" )\n\n# Add all the states to the model\nmodel.add_states( [i0, i1, i2, i3, m1, m2, m3, d1, d2, d3 ] )\n\n# Create transitions from match states\nmodel.add_transition( model.start, m1, 0.9 )\nmodel.add_transition( model.start, i0, 0.1 )\nmodel.add_transition( m1, m2, 0.9 )\nmodel.add_transition( m1, i1, 0.05 )\nmodel.add_transition( m1, d2, 0.05 )\nmodel.add_transition( m2, m3, 0.9 )\nmodel.add_transition( m2, i2, 0.05 )\nmodel.add_transition( m2, d3, 0.05 )\nmodel.add_transition( m3, model.end, 0.9 )\nmodel.add_transition( m3, i3, 0.1 )\n\n# Create transitions from insert states\nmodel.add_transition( i0, i0, 0.70 )\nmodel.add_transition( i0, d1, 0.15 )\nmodel.add_transition( i0, m1, 0.15 )\n\nmodel.add_transition( i1, i1, 0.70 )\nmodel.add_transition( i1, d2, 0.15 )\nmodel.add_transition( i1, m2, 0.15 )\n\nmodel.add_transition( i2, i2, 0.70 )\nmodel.add_transition( i2, d3, 0.15 )\nmodel.add_transition( i2, m3, 0.15 )\n\nmodel.add_transition( i3, i3, 0.85 )\nmodel.add_transition( i3, model.end, 0.15 )\n\n# Create transitions from delete states\nmodel.add_transition( d1, d2, 0.15 )\nmodel.add_transition( d1, i1, 0.15 )\nmodel.add_transition( d1, m2, 0.70 ) \n\nmodel.add_transition( d2, d3, 0.15 )\nmodel.add_transition( d2, i2, 0.15 )\nmodel.add_transition( d2, m3, 0.70 )\n\nmodel.add_transition( d3, i3, 0.30 )\nmodel.add_transition( d3, model.end, 0.70 )\n\n# Call bake to finalize the structure of the model.\nmodel.bake()\n\nfor sequence in map( list, (\'ACT\', \'GGC\', \'GAT\', \'ACC\') ):\n    logp, path = model.viterbi( sequence )\n    print \"Sequence: \'{}\'  -- Log Probability: {} -- Path: {}\".format(\n        \'\'.join( sequence ), logp, \" \".join( state.name for idx, state in path[1:-1] ) )\n</code></pre>\n\n<p>This should produce the following:</p>\n\n<pre><code>Sequence: \'ACT\'  -- Log Probability: -0.513244900357 -- Path: M1 M2 M3\nSequence: \'GGC\'  -- Log Probability: -11.0481012413 -- Path: I0 I0 D1 M2 D3\nSequence: \'GAT\'  -- Log Probability: -9.12551967402 -- Path: I0 M1 D2 M3\nSequence: \'ACC\'  -- Log Probability: -5.08795587886 -- Path: M1 M2 M3\n</code></pre>\n\n<p>This seems to work well. A perfect match goes through the three match states, and off matches go through other sequences of hidden states. We see in the case of ACC, the model thinks it\'s more likely that the T at the end of the profile was mutated to a C than a deletion and an insertion, but is not so lenient in the case of \'GGC\'. This is I made G\'s very unlikely in our prior match distributions.</p>\n\n<p>The HMM can then be used as a backend to do the alignment by defining a function which takes in two sequences, and uses the HMM in the global name space to do the alignment (works for this example, but using global name spaces in general is a bad idea). Using the HMM as a backend allows us to shield users from needing to know how HMMs work at all but only that through the power of math their sequences have been aligned.</p>\n\n<pre><code>def pairwise_alignment( x, y ):\n    \"\"\"\n    This function will take in two sequences,  and insert dashes appropriately to make them appear aligned. This consists only of adding a dash to the model sequence for every insert in the path appropriately, and a dash in the observed sequence for every delete in the path appropriately.\n    \"\"\"\n\n    logp, path = model.viterbi( sequence )\n    for i, (index, state) in enumerate( path[1:-1] ):\n        name = state.name\n\n        if name.startswith( \'D\' ):\n            y = y[:i] + \'-\' + y[i:]\n        elif name.startswith( \'I\' ):\n            x = x[:i] + \'-\' + x[i:]\n\n    return x, y\n\nfor sequence in map( list, (\'A\', \'GA\', \'AC\', \'AT\', \'ATCC\' ) ):\n    x, y = pairwise_alignment( \'ACT\', \'\'.join(sequence) )\n    print \"{}\\n{}\".format( x, y )\n    print\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>Sequence: A\nACT\nA--\n\nSequence: GA\n-ACT\nGA--\n\nSequence: AC\nACT\nAC-\n\nSequence: AT\nACT\nA-T\n\nSequence: ATCC\nACT--\nA-TCC\n</code></pre>\n\n<p>Everything is exactly the same as in YAHMM, except the <code>Model</code> class is now <code>HiddenMarkovModel</code>. If you have code using YAHMM you would like to port over to pomegranate, the only difference is the start of your file should have</p>\n\n<pre><code>from pomegranate import *\nfrom pomegranate import HiddenMarkovModel as Model\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>from yahmm import *\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/jmschrei/pomegranate#bayesian-networks\"><span class=\"octicon octicon-link\"></span></a>Bayesian Networks</h3>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Bayesian_network\">Bayesian networks</a> are a powerful inference tool, in which nodes represent some random variable we care about, edges represent dependencies and a lack of an edge between two nodes represents a conditional independence. A powerful algorithm called the sum-product or forward-backward algorithm allows for inference to be done on this network, calculating posteriors on unobserved (\"hidden\") variables when limited information is given. The more information is known, the better the inference will be, but there is no requirement on the number of nodes which must be observed. If no information is given, the marginal of the graph is trivially calculated. The hidden and observed variables do not need to be explicitly defined when the network is set, they simply exist based on what information is given. </p>\n\n<p>Lets test out the Bayesian Network framework on the <a href=\"http://en.wikipedia.org/wiki/Monty_Hall_problem\">Monty Hall problem</a>. The Monty Hall problem arose from the gameshow <i>Let\'s Make a Deal</i>, where a guest had to choose which one of three doors had a prize behind it. The twist was that after the guest chose, the host, originally Monty Hall, would then open one of the doors the guest did not pick and ask if the guest wanted to switch which door they had picked. Initial inspection may lead you to believe that if there are only two doors left, there is a 50-50 chance of you picking the right one, and so there is no advantage one way or the other. However, it has been proven both through simulations and analytically that there is in fact a 66% chance of getting the prize if the guest switches their door, regardless of the door they initially went with. </p>\n\n<p>We can reproduce this result using Bayesian networks with three nodes, one for the guest, one for the prize, and one for the door Monty chooses to open. The door the guest initially chooses and the door the prize is behind are completely random processes across the three doors, but the door which Monty opens is dependent on both the door the guest chooses (it cannot be the door the guest chooses), and the door the prize is behind (it cannot be the door with the prize behind it). </p>\n\n<pre><code>import math\nfrom pomegranate import *\n\n# The guests initial door selection is completely random\nguest = DiscreteDistribution( { \'A\': 1./3, \'B\': 1./3, \'C\': 1./3 } )\n\n# The door the prize is behind is also completely random\nprize = DiscreteDistribution( { \'A\': 1./3, \'B\': 1./3, \'C\': 1./3 } )\n\n    # Monty is dependent on both the guest and the prize. \n    monty = ConditionalProbabilityTable(\n        [[ \'A\', \'A\', \'A\', 0.0 ],\n         [ \'A\', \'A\', \'B\', 0.5 ],\n         [ \'A\', \'A\', \'C\', 0.5 ],\n         [ \'A\', \'B\', \'A\', 0.0 ],\n         [ \'A\', \'B\', \'B\', 0.0 ],\n         [ \'A\', \'B\', \'C\', 1.0 ],\n         [ \'A\', \'C\', \'A\', 0.0 ],\n         [ \'A\', \'C\', \'B\', 1.0 ],\n         [ \'A\', \'C\', \'C\', 0.0 ],\n         [ \'B\', \'A\', \'A\', 0.0 ],\n         [ \'B\', \'A\', \'B\', 0.0 ],\n         [ \'B\', \'A\', \'C\', 1.0 ],\n         [ \'B\', \'B\', \'A\', 0.5 ],\n         [ \'B\', \'B\', \'B\', 0.0 ],\n         [ \'B\', \'B\', \'C\', 0.5 ],\n         [ \'B\', \'C\', \'A\', 1.0 ],\n         [ \'B\', \'C\', \'B\', 0.0 ],\n         [ \'B\', \'C\', \'C\', 0.0 ],\n         [ \'C\', \'A\', \'A\', 0.0 ],\n         [ \'C\', \'A\', \'B\', 1.0 ],\n         [ \'C\', \'A\', \'C\', 0.0 ],\n         [ \'C\', \'B\', \'A\', 1.0 ],\n         [ \'C\', \'B\', \'B\', 0.0 ],\n         [ \'C\', \'B\', \'C\', 0.0 ],\n         [ \'C\', \'C\', \'A\', 0.5 ],\n         [ \'C\', \'C\', \'B\', 0.5 ],\n         [ \'C\', \'C\', \'C\', 0.0 ]], [guest, prize] )  \n\n# State objects hold both the distribution, and a high level name.\ns1 = State( guest, name=\"guest\" )\ns2 = State( prize, name=\"prize\" )\ns3 = State( monty, name=\"monty\" )\n\n# Create the Bayesian network object with a useful name\nnetwork = BayesianNetwork( \"Monty Hall Problem\" )\n\n# Add the three states to the network \nnetwork.add_states( [ s1, s2, s3 ] )\n\n# Add transitions which represent conditional dependencies, where the second node is conditionally dependent on the first node (Monty is dependent on both guest and prize)\nnetwork.add_transition( s1, s3 )\nnetwork.add_transition( s2, s3 )\nnetwork.bake()\n</code></pre>\n\n<p>Bayesian Networks introduc a new distribution, the ConditionalDiscreteDistribution. This distribution takes in (1) a dictionary where each nested layer refers to the values one of the distributions it is dependent on takes and (2) a list of the  distribution objects it is dependent on in the order of the nesting in the dictionary. In the Monty Hall example, the monty distribution is dependent on both the guest and the prize distributions in that order. The first layer of nesting accounts for what happens when the guest chooses various doors, and the second layer indicates what happens when the prize is actually behind a certain door, for each of the 9 possibilities. </p>\n\n<p>In order to reproduce the final result, we need to take advantage of the forward-backward/sum-product algorithm. This algorithm allows the network to calculate posterior probabilities for each distribution in the network when as distributions get clamped to certain values. This is done in pomegranate by feeding in a dictionary of state names and their associated values, and running <code>forward_backward</code>.  </p>\n\n<p>Lets say that the guest chooses door \'A\'. guest becomes an observed variable, while both prize and monty are hidden variables. </p>\n\n<pre><code>observations = { \'guest\' : \'A\' }\n\n# beliefs will be an array of posterior distributions or clamped values for each state, indexed corresponding to the order\n# in self.states. \nbeliefs = network.forward_backward( observations )\n\n# Convert the beliefs into a more readable format\nbeliefs = map( str, beliefs )\n\n# Print out the state name and belief for each state on individual lines\nprint \"\\n\".join( \"{}\\t{}\".format( state.name, belief ) for state, belief in zip( network.states, beliefs ) )\n</code></pre>\n\n<p>This will yield: </p>\n\n<pre><code>prize   DiscreteDistribution({\'A\': 0.3333333333333335, \'C\': 0.3333333333333333, \'B\': 0.3333333333333333})\nguest   DiscreteDistribution({\'A\': 1.0, \'C\': 0.0, \'B\': 0.0})\nmonty   DiscreteDistribution({\'A\': 0.0, \'C\': 0.5, \'B\': 0.5})\n</code></pre>\n\n<p>Since we have clamped the guest distribution to \'A\', it returns just that value. The prize distribution is unaffected. \nSince guest is clamped to \'A\', it is forced to stay that way. Note that the prize distribution is unaffected, but that the monty distribution now puts a 0 probability on him saying A, since he will not open the same door the guest chose. </p>\n\n<p>In order to reproduce the final result, we need to see what happens when Monty opens a door. Lets clamp the Monty distribution to \'B\' to indicate he has opened that door. Now both guest and monty are observed variables, and prize is the hidden variable.</p>\n\n<pre><code>observations = { \'guest\' : \'A\', \'monty\' : \'B\' }\nbeliefs = map( str, network.forward_backward( observations ) )\nprint \"\\n\".join( \"{}\\t{}\".format( state.name, belief ) for state, belief in zip( network.states, beliefs ) )\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>guest   DiscreteDistribution({\'A\': 1.0, \'C\': 0.0, \'B\': 0.0})\nmonty   DiscreteDistribution({\'A\': 0.0, \'C\': 0.0, \'B\': 1.0})\nprize   DiscreteDistribution({\'A\': 0.3333333333333333, \'C\': 0.6666666666666666, \'B\': 0.0})\n</code></pre>\n\n<p>Both guest and monty have been clamped to values. However, we see that probability of prize being \'C\' is 66% mimicking the mystery behind the Monty hall problem!</p>\n\n<p>This has predominately leveraged forward propogation of messages. If we want to see backward propogation of messages, lets see what happens if we tuned in late and only saw which door Monty opened. Monty is an observed variable, while both guest and prize are hidden variables.</p>\n\n<pre><code>observations = { \'monty\' : \'B\' }\nbeliefs = map( str, network.forward_backward( observations ) )\nprint \"\\n\".join( \"{}\\t{}\".format( state.name, belief ) for state, belief in zip( network.states, beliefs ) )\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>guest   DiscreteDistribution({\'A\': 0.49999999999999994, \'C\': 0.49999999999999994, \'B\': 0.0})\nmonty   DiscreteDistribution({\'A\': 0.0, \'C\': 0.0, \'B\': 1.0})\nprize   DiscreteDistribution({\'A\': 0.49999999999999994, \'C\': 0.49999999999999994, \'B\': 0.0})\n</code></pre>\n\n<p>We know that if Monty opened door \'B\', that the prize cannot be behind \'B\' and that the guest could not have opened \'B\'. The posterior guest and prize probabilities show this. </p>\n\n<p>Useful stuff.</p>\n',1),(53,'CryptDB/cryptdb','https://github.com/CryptDB/cryptdb',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>CryptDB\'s website (including latest source code): <a href=\"http://css.csail.mit.edu/cryptdb\">http://css.csail.mit.edu/cryptdb</a></p>\n\n<p>Wiki: <a href=\"https://github.com/burrows-labs/cryptdb-wiki/wiki/_pages\">https://github.com/burrows-labs/cryptdb-wiki/wiki/_pages</a></p>\n\n<p>Convention : When this document uses syntax like\n                single-quote text single-quote\n                + \'some-text-here\'\n                + \'a second example\'\n             it indicates that the reader is to use the value <em>without</em>\n             the single-quotes.</p>\n\n<h6><a class=\"anchor\" href=\"https://github.com/CryptDB/cryptdb#-getting-started\"><span class=\"octicon octicon-link\"></span></a>##### Getting started</h6>\n\n<pre><code>* Requirements:\n  &gt; Ubuntu 12.04, 13.04; Not tested on a different OS.\n  &gt; ruby\n* Build CryptDB using the installation script.\n  &gt; note, this script will stop and start your mysql instance.\n  &gt; scripts/install.rb &lt;path-to-cryptdb&gt;\n    + &lt;path-to-cryptdb&gt; should just be \'.\' if you are in the cryptdb\n      directory\n    + the script will likely require root privileges in order to\n      install dependencies and UDFs.\n* Username/Password\n    By default cryptdb uses \'root\' for the username and \'letmein\'\n    for the password. You can change this by modifying the source.\n        + Tests: test/test_utils.hh\n        + Shell: main/cdb_test.cc\n        + Proxy: mysqlproxy/wrapper.lua\n* Rebuildling CryptDB\n    If you modify the source and want to rebuild, issue \'make\' in the\n    cryptdb directory.  If you change the UDFs you will also need to do\n    \'make install\' (which will likely require root privilege).\n</code></pre>\n\n<h6><a class=\"anchor\" href=\"https://github.com/CryptDB/cryptdb#-a-few-ways-to-run-cryptdb\"><span class=\"octicon octicon-link\"></span></a># A few ways to run CryptDB</h6>\n\n<pre><code>Set (or place in your .bashrc):\n&gt; export EDBDIR=/full/path/to/cryptdb/  \n\nI. Shell\n    &gt; To Start: obj/main/cdb_test  ./shadow &lt;some-database-name&gt;\n    &gt; Type SQL queries that will be encrypted.\n\nII. Proxy\n    A) To Start: \n         &gt; /path/to/cryptdb/bins/proxy-bin/bin/mysql-proxy         \\\n                     --plugins=proxy --event-threads=4             \\\n                     --max-open-files=1024                         \\\n                     --proxy-lua-script=$EDBDIR/mysqlproxy/wrapper.lua \\\n                     --proxy-address=127.0.0.1:3307                \\\n                     --proxy-backend-addresses=localhost:3306\n\n    B) Connect to CryptDB: (where root/letmein are username/password)\n       mysql -u root -pletmein -h 127.0.0.1 -P 3307\n    C) CREATE a database; USE it; Then type queries that will execute\n       on encrypted data at the DB server!\n\nIII. Tests\n    &gt; To Start:\n        obj/test/test queries plain proxy-single\n</code></pre>\n\n<h6><a class=\"anchor\" href=\"https://github.com/CryptDB/cryptdb#-failing-queries\"><span class=\"octicon octicon-link\"></span></a>###### Failing queries</h6>\n\n<pre><code>Note that CryptDB is not a product, but just a more advanced research\nprototype. It only has implemented a subset of SQL queries. For example,\nit supports the regular MySQL client and a variety of queries you can\nplay with from this shell, Wordpress, and other apps. We did not test\nit with other MySQL clients (e.g., PHP, Java) and these likely issue\nsome uncommon metadata query we did not implement. Feel free to\nimplement what\'s missing!\n\n\n&gt; Queries can fail for a few reasons.\n  I) CryptDB can support the query, but we have not yet implemented it.\n     This should throw an UNIMPLEMENTED exception.\n  II) CryptDB can not support this type of query, likely for\n      cryptographic reasons. The error should include a message telling\n      you more about the issue.\n\n        For example if you issue this query to the shell.\n        SELECT * FROM t WHERE x + 10 &lt; 50\n\n        You should get feedback. You will see that the feedback\n        tells you the desired security level for the operation at\n        each onion, and the current security level of each argument\n        for each onion.\n\n        In the case of this query, you can see that it would like\n        to compare order with onion 1 (OPE), 4 (PLAIN) or 6 (WAIT).\n\n        But if you look at it\'s first child \"additive\", you can see\n        that it would like to use the HOM onion.  Because the HOM\n        onion is not supported by the order operation, the query\n        fails and gives you this error message.\n\n        Look to the CryptDB paper for more information regarding\n        how MySQL operations correspond to the cryptographic onions.\n  III) State corruption (ie a bug in our code), this will likely lead\n       to a crash.\n  IV) Invalid query; problem with the query syntax.\n</code></pre>\n\n<h6><a class=\"anchor\" href=\"https://github.com/CryptDB/cryptdb#-misc\"><span class=\"octicon octicon-link\"></span></a>########## Misc</h6>\n\n<pre><code>&gt; The benchmarks in the CryptDB paper are based on an older version of\n  CryptDB. We have added new features and functionality to the current\n  version which we have not yet optimized (but it is part of our\n  roadmap).\n&gt; For example queries, take a look at our tests test/TestQueries.cc\n&gt; Consider connecting directly to MySQL to see what is in the raw\n  database.\n&gt; Resetting state (e.g., after running tests)\n    &gt; Take a look at scripts/refresh.sh ; you probably want that.\n    &gt; If you create a database in cryptdb and then reset\n      the state without first dropping the database from _within_\n      cryptdb; you will need to drop it from the regular mysql client.\n&gt; Modifying the UDFs.\n    + If you make changes to edb/udf.cc, you must reinstall the UDFs\n      before your changes will take affect.\n        &gt; sudo service mysql stop\n        &gt; sudo make install\n        &gt; sudo service mysql start\n&gt; This new version of CryptDB is only single principal. We are in the\n  process of developling a new platform that more affectively addresses\n  multiple principals.\n</code></pre>\n',1),(54,'CoreOS','https://coreos.com/kubernetes/docs/latest/getting-started.html',1,0,'\n\n\n<p>This guide will walk you through a deployment of a single-master/multi-worker Kubernetes cluster on CoreOS. We\'re going to:</p>\n<ul><li>configure an etcd cluster for Kubernetes to use</li>\n<li>generate the required certificates for communication between Kubernetes components</li>\n<li>deploy our Master node</li>\n<li>deploy our Worker nodes</li>\n<li>configure <code>kubectl</code> to work with our cluster</li>\n<li>deploy the DNS add-on</li>\n</ul><p>Working through this guide may take you a few hours, but it will give you good understanding of the moving pieces of your cluster and set you up for success in the long run. Let\'s get started.</p>\n<h2>Deployment Options</h2>\n<p>The following variables will be used throughout this guide. Most of the provided defaults can safely be used, however some values such as <code>ETCD_ENDPOINTS</code> and <code>MASTER_IP</code> will need to be customized to your infrastructure.</p>\n<p><strong>MASTER_IP</strong>=<em>no default</em></p>\n<p>The IP address of the master node. Worker nodes must be able to reach the master via this IP on port 443. Additionally, external clients (such as an administrator using <code>kubectl</code>) will also need access, since this will run the Kubernetes API endpoint.</p>\n<hr /><p><strong>ETCD_ENDPOINTS</strong>=<em>no default</em></p>\n<p>List of etcd machines (<code>http://ip:port</code>), comma separated. If you\'re running a cluster of 5 machines, list them all here.</p>\n<hr /><p><strong>POD_NETWORK</strong>=10.2.0.0/16</p>\n<p>The CIDR network to use for pod IPs.\nEach pod launched in the cluster will be assigned an IP out of this range.\nThis network must be routable between all nodes in the cluster. In a default installation, the flannel overlay network will provide routing to this network.</p>\n<hr /><p><strong>SERVICE_IP_RANGE</strong>=10.3.0.0/24</p>\n<p>The CIDR network to use for service cluster IPs. Each service will be assigned a cluster IP out of this range. This must not overlap with any IP ranges assigned to the POD_NETWORK, or other existing network infrastructure. Routing to these IPs is handled by a kube-proxy service local to each node, and are not required to be routable between nodes.</p>\n<hr /><p><strong>K8S_SERVICE_IP</strong>=10.3.0.1</p>\n<p>The IP address of the Kubernetes API Service. If the SERVICE_IP_RANGE is changed above, this must be set to the first IP in that range.</p>\n<hr /><p><strong>DNS_SERVICE_IP</strong>=10.3.0.10</p>\n<p>The IP address of the cluster DNS service. This IP must be in the range of the SERVICE_IP_RANGE and cannot be the first IP in the range. This same IP must be configured on all worker nodes to enable DNS service discovery.</p>\n<h2>Deploy etcd Cluster</h2>\n<p>Kubernetes uses etcd for data storage and for cluster consensus between different software components. Your etcd cluster will be heavily utilized since all objects storing within and every scheduling decision is recorded. It\'s recommended that you run a multi-machine cluster on dedicated hardware (with fast disks) to gain maximum performance and reliability of this important part of your cluster. For development environments, a single etcd is ok.</p>\n<h3>Single-Node/Development</h3>\n<p>You can simply start etcd via <a href=\"https://coreos.com/os/docs/latest/cloud-config.html#etcd2\">cloud-config</a> when you create your CoreOS machine or start it manually.</p>\n<p>If you are starting etcd manually, we need to first configure it to listen on all interfaces:</p>\n<ul><li>Replace <code>${PUBLIC_IP}</code> with the etcd machines publically routable IP address.</li>\n</ul><p>** /etc/systemd/system/etcd2.service.d/40-listen-address.conf</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">[Service]\nEnvironment=ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379\nEnvironment=ETCD_ADVERTISE_CLIENT_URLS=http://${PUBLIC_IP}:2379\n</code></pre></div>\n<p>Use the value of <code>ETCD_ADVERTISE_CLIENT_URLS</code> as the value of <code>ETCD_ENDPOINTS</code> in the rest of this guide.</p>\n<p>Next, start etcd</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">$ sudo systemctl start etcd2\n</code></pre></div>\n<p>To ensure etcd starts after a reboot, enable it too:</p>\n<div class=\"highlight\"><pre><code class=\"language-sh\"><span class=\"nv\">$ </span>sudo systemctl <span class=\"nb\">enable </span>etcd2\nCreated symlink from /etc/systemd/system/multi-user.target.wants/etcd2.service to /usr/lib64/systemd/system/etcd2.service.\n</code></pre></div>\n<h3>Multi-Node/Production</h3>\n<p>It is highly recommended that etcd is run as a dedicated cluster separately from Kubernetes components.</p>\n<p>Use the <a href=\"https://coreos.com/etcd/docs/latest/clustering.html\">official etcd clustering guide</a> to decide how best to deploy etcd into your environment.</p>\n<h2>Generate Kubernetes TLS Assets</h2>\n<p>The Kubernetes API has various methods for validating clients — this guide will configure the API server to use client cert authentication.</p>\n<p>This means it is necessary to have a Certificate Authority and generate the proper credentials. This can be done by generating the necessary assets from existing PKI infrastructure, or follow the OpenSSL instructions to create everything needed.</p>\n<p><a href=\"https://coreos.com/kubernetes/docs/latest/openssl.html\">OpenSSL Manual Generation</a></p>\n<p>In the following steps, it is assumed that you will have generated the following TLS assets:</p>\n<p><strong>Root CA Public Key</strong></p>\n<p>ca.pem</p>\n<hr /><p><strong>API Server Public &amp; Private Keys</strong></p>\n<p>apiserver.pem</p>\n<p>apiserver-key.pem</p>\n<hr /><p><strong>Worker Node Public &amp; Private Keys</strong></p>\n<p>worker.pem</p>\n<p>worker-key.pem</p>\n<hr /><p><strong>Cluster Admin Public &amp; Private Keys</strong></p>\n<p>admin.pem</p>\n<p>admin-key.pem</p>\n<div class=\"co-m-docs-next-step\">\n<p><strong>Is your etcd cluster up and running?</strong> You need the IPs for the next step.</p>\n<p><strong>Did you generate all of the certificates?</strong> You will place these on disk next.</p>\n<a href=\"https://coreos.com/kubernetes/docs/latest/deploy-master-single.html\" class=\"btn btn-primary btn-icon-right\">Yes, ready to deploy the Master</a>\n</div>\n',1),(55,'eivind88/prm','https://github.com/eivind88/prm',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>A minimal project manager for the terminal.</p>\n\n<p><a href=\"https://github.com/eivind88/prm/blob/demo/prm.gif\"><img src=\"https://github.com/eivind88/prm/raw/demo/prm.gif\" alt=\"Demo\" /></a></p>\n\n<p>This script <strong>must</strong> be sourced, <em>not</em> run in a subshell.\nSee <a href=\"https://github.com/eivind88/prm#usage\">usage</a> for more information.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/eivind88/prm#what\"><span class=\"octicon octicon-link\"></span></a>What?</h2>\n\n<p>This program basically lets you CRUD projects. Upon activation, each projects runs its associated start-script; on deactivation, it runs the project stop-script.</p>\n\n<p>These bash-scripts can be used for things like changing directories, setting environment variables, cleanup, etc.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/eivind88/prm#how\"><span class=\"octicon octicon-link\"></span></a>How?</h2>\n\n<p>Adding and editing projects will open the associated start- and stop-scripts in your editor (as defined by the <code>$EDITOR</code> environment variable).</p>\n\n<p>A project start-script might for instance look something like this:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># cd to project directory</span>\n<span class=\"pl-c1\">cd</span> <span class=\"pl-smi\">$HOME</span>/src/Python/hello-world\n\n<span class=\"pl-c\"># activate conda env</span>\n<span class=\"pl-c1\">source</span> activate hello-world\n\n<span class=\"pl-c\"># show current git status</span>\ngit status</pre></div>\n\n<p>The same project\'s stop-script might look like this:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># deactivate conda env</span>\n<span class=\"pl-c1\">source</span> deactivate hello-world\n\n<span class=\"pl-c\"># clean up</span>\nrm <span class=\"pl-k\">*</span>.log <span class=\"pl-k\">*</span>.tmp</pre></div>\n\n<p>When you activate a new project, prm automatically stops any active projects.</p>\n\n<p>When a project is deactivated, prm changes the working directory back to the path you were originally on before starting your first project.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/eivind88/prm#why\"><span class=\"octicon octicon-link\"></span></a>Why?</h2>\n\n<p>I found myself missing project management features (like those seen in text editors and IDEs) on the terminal.</p>\n\n<p>Instead of remembering what projects I am working on these days or switching between loads of terminal windows or tabs, I now use prm.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/eivind88/prm#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>In order to work properly, prm <strong>must</strong> be sourced, <em>not</em> run in a subshell; i.e. <code>. ./prm</code>.</p>\n\n<p>The easiest way to do this is probably to add an alias to prm in your <code>~/.bashrc</code> (or wherever you keep your aliases), like so:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c1\">alias</span> prm=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>. path/to/prm.sh<span class=\"pl-pds\">\"</span></span></pre></div>\n\n<p>From help the option screen:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>Usage: prm [options] ...\nOptions:\n  add <span class=\"pl-k\">&lt;</span>project name<span class=\"pl-k\">&gt;</span>       Add project.\n  edit <span class=\"pl-k\">&lt;</span>project name<span class=\"pl-k\">&gt;</span>      Edit project.\n  list                     List all projects.\n  remove <span class=\"pl-k\">&lt;</span>project name<span class=\"pl-k\">&gt;</span>    Remove project.\n  rename <span class=\"pl-k\">&lt;</span>old<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">&lt;</span>new<span class=\"pl-k\">&gt;</span>       Rename project.\n  start <span class=\"pl-k\">&lt;</span>project name<span class=\"pl-k\">&gt;</span>     Start project.\n  stop                     Stop active project.\n  -h --help                Display this information.\n  -v --version             Display version info.</pre></div>\n\n<p>All prm-data is written to <code>~/.prm</code></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/eivind88/prm#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>This software is released under the terms of the 3-clause New BSD License. See the <a href=\"https://github.com/eivind88/prm/blob/master/LICENSE.txt\">license</a> file for details.</p>\n',1),(56,'Using an offline GnuPG master key','http://www.incenp.org/notes/2015/using-an-offline-gnupg-master-key.html',0,0,'\n      <p>OpenPGP subkeys have many benefits (well summarized on this <a href=\"https://wiki.debian.org/Subkeys\">Debian wiki page</a>), one of\nthem being that if you have both an encryption subkey and a signing\nsubkey (at least), you don’t need your master private key for your daily\nusage of OpenPGP—you will only need it for signing someone else’s key or\nto modify your own key (adding or revoking User IDs, adding or revoking\nsubkeys, updating the preferences, etc.).</p>\n      <p>Consequently, your private master key can be put offline most of the\ntime, and brought back to your computer only on those few occasions\nwhere it is required.</p>\n      <p>There are already <a href=\"https://alexcabal.com/creating-the-perfect-gpg-keypair/\">many</a>\n<a href=\"http://wiki.fsfe.org/Card_howtos/Card_with_subkeys_using_backups#Removing_the_master_key_from_the_keyring\">pages</a>\non the web describing how to do that.  However, most of them, if not all\nof them, predate the recent release of GnuPG 2.1, so I thought an update\non that topic would be worthwhile.</p>\n      <h2>How to remove the master private key from your keyring</h2>\n      <h3>Step 1: Back up the original keyring</h3>\n      <p>Let’s assume you have the following private keyring:</p>\n      <pre class=\"console\">$ <strong>gpg2 --list-secret-keys</strong>\n/home/alice/.gnupg/pubring.kbx\n------------------------------\nsec   rsa4096/CB2F38F25B491A54 2014-12-31 [SC] [expires: 2017-12-30]\nuid               [ultimate] Alice &lt;alice@example.org&gt;\nssb   rsa2048/04BB7F8FDEC5E5D9 2014-12-31 [S] [expires: 2015-12-31]\nssb   rsa2048/BBB6B86627C2D43A 2014-12-31 [E] [expires: 2015-12-31]</pre>\n      <p>Export the private master key and its private subkeys:</p>\n      <pre class=\"console\">$ <strong>gpg2 --armor --output alice-private-keys.asc --export-secret-key alice@example.org</strong></pre>\n      <p>Store the exported private keys in a secure place (not on your\ncomputer). You may also print a hardcopy with a tool like <a href=\"http://www.jabberwocky.com/software/paperkey/\">Paperkey</a>:</p>\n      <pre class=\"console\">$ <strong>gpg2 --export-secret-key alice@example.org | paperkey | lpr</strong></pre>\n      <h3>Step 2: Remove the private master key from the keyring</h3>\n      <p>The “classic” method for doing that is to export your private\nsubkeys, then delete all your private keys (the master private key and\nthe private subkeys), and import back the private subkeys (because GnuPG\nprior to version 2.1 had no option to delete the master key only).</p>\n      <p>With GnuPG 2.1 however, there is a more direct method. First, find\nthe <em>keygrip</em> of your master key:</p>\n      <pre class=\"console\">$ <strong>gpg2 --list-secret-keys --with-keygrip</strong>\n/home/alice/.gnupg/pubring.kbx\n------------------------------\nsec   rsa4096/CB2F38F25B491A54 2014-12-31 [SC] [expires: 2017-12-30]\n      Keygrip = <em>D4DF0C35D3E22FA6AC37DA2E54FB03F73616A3CB</em>\nuid               [ultimate] Alice &lt;alice@example.org&gt;\nssb   rsa2048/04BB7F8FDEC5E5D9 2014-12-31 [S] [expires: 2015-12-31]\n      Keygrip = 21B2EDF018D7CAF0B45644FDB753DD42307C4425\nssb   rsa2048/BBB6B86627C2D43A 2014-12-31 [E] [expires: 2015-12-31]\n      Keygrip = 2E149DA9C5E46E0DECC6A17EFD8B5FB1DF1E1BAB</pre>\n      <p>Then send a <code>DELETE_KEY</code> command to the GnuPG Agent:</p>\n      <pre class=\"console\">$ <strong>gpg-connect-agent \"DELETE_KEY D4DF0C35D3E22FA6AC37DA2E54FB03F73616A3CB\" /bye</strong></pre>\n      <p>Confirm that you want to delete the key when the agent ask you\nso.</p>\n      <div class=\"note\">\n        <p>For reference, the “classic” method (which still works with GnuPG\n  2.1) is as follows:</p>\n        <p>First, export the subkeys:</p>\n        <pre class=\"console\">$ <strong>gpg2 --armor --output private-subkeys.asc --export-secret-subkeys alice@example.org</strong></pre>\n        <p>Then delete the private master key and its subkeys:</p>\n        <pre class=\"console\">$ <strong>gpg2 --delete-secret-key alice@example.org</strong>\n\nsec  rsa4096/CB2F38F25B491A54 2014-12-31 Alice &lt;alice@example.org&gt;\n\nDelete this key from the keyring? (y/N) <strong>y</strong>\nThis is a secret key! - really delete? (y/N) <strong>y</strong></pre>\n        <p>Then import back the subkeys you have just exported:</p>\n        <pre class=\"console\">$ <strong>gpg2 --import private-subkeys.asc</strong>\ngpg: key CB2F38F25B491A54: \"Alice &lt;alice@example.org&gt;\" not changed\ngpg: key CB2F38F25B491A54: secret key imported\ngpg: Total number processed: 4\ngpg:              unchanged: 1\ngpg:       secret keys read: 4\ngpg:   secret keys imported: 2</pre>\n      </div>\n      <h3>Step 3: Ensure that the private master key has been removed</h3>\n      <p>List the contents of your private keyring again:</p>\n      <pre class=\"console\">$ <strong>gpg2 --list-secret-keys</strong>\n/home/alice/.gnupg/pubring.kbx\n------------------------------\nsec#  rsa4096/CB2F38F25B491A54 2014-12-31 [SC] [expires: 2017-12-30]\nuid               [ultimate] Alice &lt;alice@example.org&gt;\nssb   rsa2048/04BB7F8FDEC5E5D9 2014-12-31 [S] [expires: 2015-12-31]\nssb   rsa2048/BBB6B86627C2D43A 2014-12-31 [E] [expires: 2015-12-31]\nssb   rsa2048/7D2233B8833E70AF 2014-12-31 [A] [expires: 2015-12-31]</pre>\n      <p>No matter which method above you have used, you should see the\n<code>#</code> symbol after the <code>sec</code> keyword, confirming\nthat the private master key is not usable.</p>\n      <p>If you want to be really sure, try to do something that requires the\nprivate master key, such as adding a new dummy User ID to your\nkeyring:</p>\n      <pre class=\"console\">$ <strong>gpg2 --edit-key alice@example.org</strong>\nSecret key is available.\n\npub  rsa4096/CB2F38F25B491A54\n     created: 2014-12-31  expires: 2017-12-30  usage: SC  \n     trust: ultimate      validity: ultimate\nsub  rsa2048/04BB7F8FDEC5E5D9\n     created: 2014-12-31  expires: 2015-12-31  usage: S   \nsub  rsa2048/BBB6B86627C2D43A\n     created: 2014-12-31  expires: 2015-12-31  usage: E   \nsub  rsa2048/7D2233B8833E70AF\n     created: 2014-12-31  expires: 2015-12-31  usage: A   \n[ultimate] (1). Alice &lt;alice@example.org&gt;\n\ngpg&gt; <strong>adduid</strong>\nReal name: <strong>Dummy</strong>\nEmail address: <strong>dummy@example.org</strong>\nComment: \nYou selected this USER-ID:\n    \"Dummy &lt;dummy@example.org&gt;\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? <strong>O</strong>\ngpg: <em>signing failed: No secret key</em>\ngpg: <em>signing failed: No secret key</em>\n\ngpg&gt; <strong>quit</strong></pre>\n      <p>Note the <code>signing failed: No secret key</code> messages.</p>\n      <h2>How to use the offline master key</h2>\n      <p>There are several ways to make GnuPG temporarily use the offline\nmaster key. The method I am currently using goes along the following\nlines.</p>\n      <p>Let’s assume you have stored the <code>alice-private-keys.asc</code>\nfile (generated in step 1 above) on a USB stick, and that, when the\nstick is mounted, the file is available at a location such as\n<code>/run/media/alice/mystick/alice-private-keys.asc</code>.</p>\n      <p>Create a temporary directory to use as a temporary GnuPG home:</p>\n      <pre class=\"console\">$ <strong>mkdir ~/gpgtmp</strong>\n$ <strong>chmod 0700 ~/gpgtmp</strong></pre>\n      <p>Import your complete private keyring on that directory from your\nbackup file:</p>\n      <pre class=\"console\">$ <strong>gpg2 --homedir ~/gpgtmp --import /run/media/alice/mystick/alice-private-keys.asc</strong>\ngpg: keybox ‘gpgtmp/pubring.kbx’ created\ngpg: gpgtmp/trustdb.gpg: trustdb created\ngpg: key 5B491A54: public key \"Alice &lt;alice@example.org&gt;\" imported\ngpg: key 5B491A54: secret key imported\ngpg: Total number processed: 4\ngpg:               imported: 1\ngpg:       secret keys read: 4\ngpg:   secret keys imported: 3</pre>\n      <p>You may now unmount your USB stick and put it back in its safe\nplace.</p>\n      <p>Now edit the key you want to sign. Use the temporary directory as\nGnuPG home, but add the public keyring from your normal GnuPG home\ndirectory:</p>\n      <pre class=\"console\">$ <strong>gpg2 --homedir ~/gpgtmp --keyring ~/.gnupg/pubring.kbx --edit-key bob@example.com</strong></pre>\n      <div class=\"note\">\n        <p>If you were using GnuPG 2.0 prior to GnuPG 2.1, your public keyring\n  is probably still in the “legacy” format and will be called\n  <code>pubring.gpg</code> instead of <code>pubring.kbx</code>.</p>\n      </div>\n      <p>When you have finished, terminate the GnuPG Agent which was started\nin the temporary directory, and wipe out that directory:</p>\n      <pre class=\"console\">$ <strong>gpg-connect-agent --homedir ~/gpgtmp KILLAGENT /bye</strong>\n$ <strong>rm -rf ~/gpgtmp</strong></pre>\n      <p>A drawback of this method is that since you are not using your normal\nGnuPG’s home directory, any configuration file in that directory will be\nignored. If that is a concern, you may copy or symlink your\n<code>$GNUPGHOME/gpg.conf</code> file into the temporary directory\nbefore invoking GnuPG.</p>\n      <p>I strongly suggest using a small script to automatize the above\ncommands—such as this one​<sup></sup>:</p>\n      <pre class=\"file\">#!/bin/bash\n\n# The DOS label of your USB stick\nLABEL=mystick\n\n# The pathname to the file containing your private keys\n# on that stick\nKEYFILE=alice-private-keys.asc\n\n# Identify the device file corresponding to your USB stick\ndevice=$(/sbin/findfs $LABEL)\n\nif [ -n \"$device\" ]; then\n    # Mount the stick\n    udisksctl mount --block-device $device\n\n    # Create temporary GnuPG home directory\n    tmpdir=$(mktemp -d -p $XDG_RUNTIME_DIR gpg.XXXXXX)\n\n    # Import the private keys\n    gpg2 --homedir $tmpdir --import /run/media/$USER/$LABEL/$KEYFILE\n\n    # Unmount the stick\n    udisksctl unmount --block-device $device\n\n    # Launch GnuPG from the temporary directory,\n    # with the default public keyring\n    # and with any arguments given to us on the command line\n    gpg2 --homedir $tmpdir --keyring ${GNUPGHOME:-$HOME/.gnupg}/pubring.kbx $@\n\n    # Cleaning up\n    [ -f $tmpdir/S.gpg-agent ] &amp;&amp; gpg-connect-agent --homedir $tmpdir KILLAGENT /bye\n    rm -rf $tmpdir\nfi</pre>\n      <h2>Some further thoughts</h2>\n      <h3>Splitting the master key in parts</h3>\n      <p>If you don’t like the idea to keep your offline master key on a\nsingle USB stick,<sup></sup> you may want to use a <em>N-of-M secret sharing scheme</em> to\nsplit the backup file in <em>M</em> parts, in such a way that <em>N</em>\nparts at least are needed to reconstruct the file.</p>\n      <p>For example, using <a href=\"http://www.digital-scurf.org/software/libgfshare\">libgfshare</a>’s\nimplementation of <a href=\"http://dl.acm.org/citation.cfm?doid=359168.359176\">Shamir’s\n  Secret Sharing Scheme</a>:</p>\n      <pre class=\"console\">$ <strong>gfsplit -n 2 -m 3 alice-private-keys.asc</strong></pre>\n      <p>This will produce three files of the form\n<code>alice-private-keys.asc.NNN</code>, any two of which will be needed\nto reconstruct the original file. You may then store each of them on a\ndifferent support.</p>\n      <h3>Another method: Manipulating GnuPG Agent’s key files directly</h3>\n      <p>Currently (with GnuPG 2.1), GnuPG Agent stores each private key in a\nseparate file <code>$GNUPGHOME/private-keys-v1.d/NNN…NNN.key</code>,\nwhere <em>NNN…NNN</em> is the 20-bytes long keygrip of the key.</p>\n      <p>This allows a different and much simpler method to put the master\nprivate key offline, and bringing it back only when needed.</p>\n      <p>Back up the private key and delete it from the private keyring in a\nsingle step simply by moving the corresponding file from the\n<code>$GNUPGHOME/private-keys-v1.d</code> directory (once you know its\nkeygrip):</p>\n      <pre class=\"console\">$ <strong>mv ~/.gnupg/private-keys-v1.d/D4DF0C35D3E22FA6AC37DA2E54FB03F73616A3CB.key \\\n  /run/media/alice/mystick/</strong></pre>\n      <p>To use the master key when needed, copy or symlink it from your\nstorage device back into the private keys directory, perform the\noperation requiring the master key, then delete the file or symlink. No\nmore need to use a temporary GnuPG home directory.</p>\n      <div class=\"note\">\n        <p>A few remarks regarding this method:</p>\n        <ul><li>the private key is stored in its protected form, so it is as\n    well protected using this method as it was using the\n    <code>--export-secret-key</code> option above;</li>\n          <li>GnuPG Agent only caches the passphrase protecting the key, never\n    the key itself—it reads the key from file everytime the key is\n    required, which means that as soon as the key file is removed from\n    the agent’s directory, the key is no longer available;</li>\n          <li>a possible cause of concern is that this method depends on what\n    may be considered as implementation details of GnuPG Agent, which\n    may very well change in future GnuPG versions—by contrast the first\n    method above only depends on GnuPG’s public interface.</li>\n        </ul></div>\n      ',1),(57,'sslip.io: A Valid SSL Certificate for Every IP Address','http://blog.pivotal.io/labs/labs/sslip-io-a-valid-ssl-certificate-for-every-ip-address',0,0,'\n								<h4><b><i>[Update 2015-09-08: The key for the sslip.io domain has been revoked, which means that the service is no longer usable; however, the engineering behind sslip.io is still sound, and may be of interest to those who want to deploy a private version]</i></b></h4>\n<p><a href=\"https://sslip.io/\">sslip.io</a> enables developers to equip their servers with valid SSL certificates for free (on the downside, the server\'s URI will be an awkward mash-up of the server\'s IP address and the sslip.io domain, e.g. <a href=\"https://52-0-56-137.sslip.io/\">https://52-0-56-137.sslip.io</a>). Two components make this possible: a custom DNS (<a href=\"https://en.wikipedia.org/wiki/Domain_Name_System\">Domain Name System</a>) backend that resolves hostnames to an embedded IP address (e.g. 192-168-0-1.sslip.io resolves to 192.168.0.1), and an SSL key and wildcard certificate downloadable from GitHub.</p>\n<p>This blog post discusses how we <sup><a href=\"http://blog.pivotal.io/labs/labs/sslip-io-a-valid-ssl-certificate-for-every-ip-address#authors\">[1]</a></sup> implemented the former component (the custom DNS backend) (the latter component\'s implementation, a file downloaded from GitHub, is trivial and thus not discussed).</p>\n<h3>sslip.io Implementation</h3>\n<ul><li>We wanted the concept to be easy to understand. To that end, we made it similar to a popular service, <a href=\"http://xip.io/\">xip.io</a>.</li>\n<li>We wanted it to be easy to implement. Fortunately, we didn\'t have to start from scratch—<a href=\"https://github.com/sstephenson\">Sam Stephenson</a> had already done much of the heavy lifting when he created xip.io, and he made the source code <a href=\"https://github.com/basecamp/xip-pdns\">freely available</a>.</li>\n<li>We wanted it to be a <a href=\"https://bosh.io/docs/create-release.html\">BOSH release</a>, so that we could deploy our servers using a single command (i.e. <code>bosh-init deploy sslip.yml</code>). Also, a stipulation of the Hack Day (a day that Pivotal Software set aside to work on fun projects) was that our project had to be Cloud Foundry-related. We wrote much of sslip.io during the Hack Day.</li>\n</ul><h3>Modifying xip.io to create sslip.io</h3>\n<p>xip.io\'s backend almost accomplished what we needed, but not quite: it lacked the ability to resolve hostnames that were in the sslip.io domain (i.e. not in an sslip.io subdomain). In fact, the typical sslip.io hostname did not resolve properly until it was 3 or more subdomains removed from the sslip.io domain. Here are some examples:</p>\n<table><thead><tr><th>hostname</th>\n<th># of subdomains</th>\n<th>IP address(es)</th>\n</tr></thead><tbody><tr><td>2.sslip.io</td>\n<td>0</td>\n<td>2.0.0.0 (broken)</td>\n</tr><tr><td>1.2.sslip.io</td>\n<td>1</td>\n<td>2.0.0.0 (broken)</td>\n</tr><tr><td>168.1.2.sslip.io</td>\n<td>2</td>\n<td>2.0.0.0 (broken)</td>\n</tr><tr><td>192.168.1.2.sslip.io</td>\n<td>3</td>\n<td>192.168.1.2 (good)</td>\n</tr><tr><td>www.192.168.1.2.sslip.io</td>\n<td>4</td>\n<td>192.168.1.2 (good)</td>\n</tr></tbody></table><p><strong>The hostname must be in the sslip.io domain for the wildcard certificate to work properly</strong>; it will not work in an sslip.io subdomain. This is a technical limitation of wildcard certs and the manner in which browsers treat them (read more <a href=\"http://security.stackexchange.com/questions/10538/what-certificates-are-needed-for-multi-level-subdomains\">here</a>).</p>\n<p>Our solution: use dashes, not dots, to separate the numbers embedded in the hostname. Some examples:</p>\n<table><thead><tr><th>hostname</th>\n<th># of subdomains</th>\n<th>IP address(es)</th>\n</tr></thead><tbody><tr><td>192-168-1-2.sslip.io</td>\n<td>0</td>\n<td>192.168.1.2</td>\n</tr><tr><td>10-9-8-7.sslip.io</td>\n<td>0</td>\n<td>10.9.8.7</td>\n</tr><tr><td>www-172-16-0-1.sslip.io</td>\n<td>0</td>\n<td>172.16.0.1</td>\n</tr></tbody></table><p>We modified <em>xip-pdns.sh</em>, the core of the xip.io backend, to accommodate dashes as well as dots. Although we were surprised to discover that the xip.io backend program was a bash script, we found the coding to be tight, and making the needed changes was fairly straightforward:</p>\n<pre class=\"editor-colors lang-diff\"></pre><p><span class=\"text plain null-grammar\"><span>@@ -68,6 +68,7 @@ log() {</span></span></p><p><span class=\"text plain null-grammar\"><span>+DASHED_IP_SUBDOMAIN_PATTERN=\"(^|-|\\.)(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)-){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\$\"</span></span></p><p><span class=\"text plain null-grammar\"><span>@@ -95,6 +96,10 @@ subdomain_is_ip() {</span></span></p><p><span class=\"text plain null-grammar\"><span>+subdomain_is_dashed_ip() {</span></span></p><p><span class=\"text plain null-grammar\"><span>+  [[ \"$SUBDOMAIN\" =~ $DASHED_IP_SUBDOMAIN_PATTERN ]]</span></span></p><p><span class=\"text plain null-grammar\"><span>+}</span></span></p><p><span class=\"text plain null-grammar\"><span>+</span></span></p><p><span class=\"text plain null-grammar\"><span>@@ -109,6 +114,11 @@ resolve_ip_subdomain() {</span></span></p><p><span class=\"text plain null-grammar\"><span>+resolve_dashed_ip_subdomain() {</span></span></p><p><span class=\"text plain null-grammar\"><span>+  [[ \"$SUBDOMAIN\" =~ $DASHED_IP_SUBDOMAIN_PATTERN ]] || true</span></span></p><p><span class=\"text plain null-grammar\"><span>+  echo \"${BASH_REMATCH[2]//-/.}\"</span></span></p><p><span class=\"text plain null-grammar\"><span>+}</span></span></p><p><span class=\"text plain null-grammar\"><span>+</span></span></p><p><span class=\"text plain null-grammar\"><span>@@ -174,6 +184,9 @@ while read_query; do</span></span></p><p><span class=\"text plain null-grammar\"><span>+      elif subdomain_is_dashed_ip; then</span></span></p><p><span class=\"text plain null-grammar\"><span>+        answer_subdomain_a_query_for dashed_ip</span></span></p><p><span class=\"text plain null-grammar\"><span>+</span></span></p>\n<p>We made the changes, which led us to the next step: deploying our changes with BOSH.</p>\n<h3>Creating the BOSH release</h3>\n<p>Creating the BOSH release posed no problems.</p>\n<ul><li>We followed the <a href=\"https://bosh.io/docs/create-release.html\">BOSH instructions</a></li>\n<li>The release is available on <a href=\"https://github.com/cloudfoundry-community/xip-release\">GitHub</a></li>\n<li>We cut corners when creating a release. Specifically, in our <a href=\"https://github.com/cloudfoundry-community/xip-release/blob/master/packages/pdns-3.4.6/packaging\">packaging script</a> we installed dependent packages (e.g. boost-devel, libmysqlclient-dev) directly using the OS (i.e. <code>yum</code> in the case of a CentOS stemcell, <code>apt-get</code> in the case of Ubuntu). This is strongly discouraged, but the alternative—building releases for the dependencies—would have jeopardized our ability to finish within the 8-hour span of Hack Day.</li>\n</ul><h3>Rolling Your Own</h3>\n<p>Rolling your own version of an xip.io-style nameserver is fairly straightforward; the xip BOSH release has <a href=\"https://github.com/cloudfoundry-community/xip-release#deploying-a-custom-version-of-xip-to-amazon-aws\">instructions</a> for setting up the Amazon AWS environment, deploying, and testing.</p>\n<p>Although there is work involved setting up the BOSH manifest (e.g. setting up the AWS VPC), it\'s not terribly burdensome. We encourage you to review the <a href=\"https://github.com/cloudfoundry-community/xip-release/blob/master/examples/xip-bosh-init-aws.yml\">sample manifest</a>. Most of it is boilerplate; search for \"CHANGEME\" to see what would need to be changed to deploy your own version. Surprisingly little.</p>\n<h3>The Economics of sslip.io: $238.55 per year</h3>\n<p>Costs are a vital but often-overlooked dimension of smaller engineering projects.</p>\n<p>The sslip.io service costs $238.55 per year, two-thirds of which are paid to Amazon AWS for two <sup><a href=\"http://blog.pivotal.io/labs/labs/sslip-io-a-valid-ssl-certificate-for-every-ip-address#rfc1034\">[2]</a></sup> DNS nameservers that run 24 hours a day, answering queries for the sslip.io domain. In our case we were fortunate—the servers were already in place for a previous project, eliminating that line item (i.e. we only had to pay for the registration and certificates, not for the servers).</p>\n<table><thead><tr><th>Expense</th>\n<th>Vendor</th>\n<th>Cost</th>\n<th>Cost / year</th>\n</tr></thead><tbody><tr><td><em>sslip.io</em> domain name registration</td>\n<td>namecheap.com</td>\n<td>$164.40 5-year</td>\n<td>$32.88</td>\n</tr><tr><td>*<em>.sslip.io</em> wildcard cert</td>\n<td>cheapsslshop.com</td>\n<td>$165.00 3-year</td>\n<td>$55.00</td>\n</tr><tr><td>2 × EC2 t2.micro instances</td>\n<td>Amazon AWS</td>\n<td>$0.0172 / hour  <sup><a href=\"http://blog.pivotal.io/labs/labs/sslip-io-a-valid-ssl-certificate-for-every-ip-address#ec2_pricing\">[3]</a></sup></td>\n<td>$150.67</td>\n</tr></tbody></table><h3>A Mysterious 1-Second Delay, Unmasked</h3>\n<p>In one of the more curious moments of troubleshooting, we noticed a mysterious 1+ second delay in the<br />PowerDNS server response. It became apparent that the delay was caused by a series of<br />unfortunate events (involving IPv6):</p>\n<ul><li>the nameserver (<em>ns-he.nono.com</em>) had both IPv4 (78.47.249.19) and IPv6 addresses (2a01:4f8:d12:148e::2)</li>\n<li>the client (<em>maria.nono.com</em>) also had both IPv4 (10.9.9.140) and IPv6 (2601:646:0100:4253:aa66:7fff:fe03:4c1b) <sup><a href=\"http://blog.pivotal.io/labs/labs/sslip-io-a-valid-ssl-certificate-for-every-ip-address#emoji\">[4]</a></sup> addresses</li>\n<li>the <code>nslookup</code> client had an affinity for the IPv6 address</li>\n<li>PowerDNS by default does not bind to the IPv6 address (a surprising and dismaying decision)</li>\n<li>the initial attempt to resolve to the nameserver\'s IPv6 address would fail</li>\n<li><em>nslookup</em> would fall back to the IPv4 address</li>\n<li>the lookup would succeed.</li>\n</ul><p>The fix was to force PowerDNS to bind to the IPv6 port by adding the following lineto the <em>pdns.conf</em> file:</p>\n<pre class=\"editor-colors lang-text\"></pre><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>local-ipv6=::</span></span></span></p>\n<h3>Acknowledgements</h3>\n<p>We\'d like to thank Pivotal Software for setting aside a Hack Day where we could implement sslip.io as a proof of concept.</p>\n<p>We\'d like to thank Sam Stephenson for writing xip.io, which was the initial inspiration for sslip.io, and for suggesting the domain name sslip.io.</p>\n<p><a href=\"https://github.com/justinjsmith\">Justin Smith</a> consulted on the security implications of releasing an SSL certificate and key to the general public.</p>\n\n<p><a><sup>1</sup></a> <a href=\"https://github.com/tylerschultz\">Tyler Schultz</a>, <a href=\"https://github.com/APShirley\">Alvaro Perez-Shirley</a>, and <a href=\"https://github.com/cunnie\">Brian Cunnie</a> created sslip.io</p>\n<p><a><sup>2</sup></a> We must have at least two name servers; we can\'t get away with just one. Per <a href=\"http://tools.ietf.org/html/rfc1034\">RFC 1034</a>:</p>\n<blockquote><p>\nBy administrative fiat, we require every zone to be available on at least two servers, and many zones have more redundancy than that.\n</p></blockquote>\n<p><a><sup>3</sup></a> Amazon effectively charges <a href=\"https://aws.amazon.com/ec2/pricing/\">$0.0086/hour</a> for a 1 year term all-upfront t2.micro reserved instance.</p>\n<p>For those among you who worry that a t2.micro instance might be underpowered to serve DNS, fear not. If anything, our t2.micro instance is overpowered:</p>\n<p>We use <code>top</code> to gauge our server\'s performance:</p>\n<pre class=\"editor-colors lang-text\"></pre><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>top - 20:07:49 up 5 days,  8:18,  1 user,  load average: 0.00, 0.01, 0.05</span></span></span></p><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>Tasks: 124 total,   2 running, 122 sleeping,   0 stopped,   0 zombie</span></span></span></p><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>%Cpu(s):  0.0 us,  0.3 sy,  0.0 ni, 99.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.7 st</span></span></span></p><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>KiB Mem :  1015944 total,   182196 free,   108264 used,   725484 buff/cache</span></span></span></p><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>KiB Swap:  1020120 total,  1013808 free,     6312 used.   664072 avail Mem</span></span></span></p><p><span class=\"text plain\"><span>  </span><span class=\"meta paragraph text\"><span>PID USER  PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span></span></span></p><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>18599 vcap  10 -10  106052  15872   5780 R  3.7  1.6 270:17.78 /var/vcap/packages/ntp-4.2.8p2/bin/nt+</span></span></span></p>\n<ul><li>CPU is not stressed:\n<ul><li>15-minute <a href=\"https://en.wikipedia.org/wiki/Load_%28computing%29\">load average</a> is 0.05. We typically don\'t worry about a system until the load average (sometimes referred to as the \"run queue\") climbs above 6. Note that Linux systems, of which ours is one, has a generous accounting of load average: not only does it include processes that are waiting for CPU but also includes processes that are blocked on I/O. This means that on Linux systems \"load average\" is not a good measure of CPU usage; instead, it lumps I/O and CPU usage in the same bucket.</li>\n<li>CPU idle percentage is typically 98%. This means that 98% of the time the processor has nothing to do.</li>\n</ul></li>\n<li>RAM is not stressed: of the 1015MiB of RAM, 182MiB are free, and only 6MiB of swap is used. We typically don\'t worry about RAM on Linux systems until the swap space used exceeds twice the physical RAM.</li>\n</ul><p>Our disk space is adequate, too, as measured by <code>df</code>:</p>\n<pre class=\"editor-colors lang-text\"></pre><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>$ df -h -t ext4</span></span></span></p><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>Filesystem      Size  Used Avail Use% Mounted on</span></span></span></p><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>/dev/xvda1      2.8G  2.0G  656M  76% /</span></span></span></p><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>/dev/xvdb2      3.0G  155M  2.6G   6% /var/vcap/data</span></span></span></p><p><span class=\"text plain\"><span class=\"meta paragraph text\"><span>/dev/loop0      120M  1.6M  115M   2% /tmp</span></span></span></p>\n<p>Note that our t2.micro instance is not exclusively dedicated to serving DNS; it\'s also running an <a href=\"http://www.pool.ntp.org/en/\">NTP Pool</a> server, processing ~1700 NTP queries / second. And running an nginx server. And yet, in spite of those extra processes, the server is essentially doing nothing 95% of the time.</p>\n<p><a><sup>4</sup></a> The sharp-eyed reader may notice that \":0100\" which appears in maria.nono.com\'s IPv6 address is not appropriately abbreviated (i.e. the leading \"0\" should be stripped). The reason the 0 isn\'t stripped is that when it is stripped, it becomes the emoji <a href=\"http://emojipedia.org/hundred-points-symbol/\">\"100\"</a> (<img class=\"emoji\" title=\":100:\" alt=\"100\" src=\"http://blog.pivotal.io/opt/homebrew-cask/Caskroom/atom/1.0.7/Atom.app/Contents/Resources/app.asar/node_modules/roaster/node_modules/emoji-images/pngs/100.png\" height=\"20\" />) in our <a href=\"https://atom.io/\">Markdown editor</a>, which has the unfortunate side-effect of turning a conventional, boring IPv6 address into a spectacle.</p>\n							',1),(58,'cyrus-and/gdb-dashboard','https://github.com/cyrus-and/gdb-dashboard',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Modular visual interface for GDB in Python.</p>\n\n<p>This comes as a standalone single-file <a href=\"https://raw.githubusercontent.com/cyrus-and/gdb-dashboard/master/.gdbinit\"><code>.gdbinit</code></a> which, among the other\nthings, enables a configurable dashboard showing the most relevant information\nduring the program execution. Its main goal is to reduce the number of GDB\ncommands issued to inspect the current program status allowing the programmer to\nfocus on the control flow instead.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<p>Just place <a href=\"https://raw.githubusercontent.com/cyrus-and/gdb-dashboard/master/.gdbinit\"><code>.gdbinit</code></a> in your home directory, for example:</p>\n\n<pre><code>wget -P ~ git.io/.gdbinit\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#screenshot\"><span class=\"octicon octicon-link\"></span></a>Screenshot</h2>\n\n<p><a href=\"https://camo.githubusercontent.com/a45a4a05692295918e27689833d87c83b096f89f/687474703a2f2f692e696d6775722e636f6d2f4973587030524b2e706e67\"><img src=\"https://camo.githubusercontent.com/a45a4a05692295918e27689833d87c83b096f89f/687474703a2f2f692e696d6775722e636f6d2f4973587030524b2e706e67\" alt=\"Screenshot\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#features\"><span class=\"octicon octicon-link\"></span></a>Features</h2>\n\n<ul><li><p>Single GDB init file.</p></li>\n<li><p>Write the dashboard to the main GDB console or to an external file/TTY.</p></li>\n<li><p>Interaction with GDB using the native <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html\">Python API</a>.</p></li>\n<li><p>Several default modules are included to address the most basic\nneeds: source code, assembly, registers, etc.).</p></li>\n<li><p>User-defined modules can be easily developed by extending a\n<a href=\"https://github.com/cyrus-and/gdb-dashboard#custom-modules\">Python class</a>.</p></li>\n<li><p>Additional configuration files (both <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Command-Files.html\">GDB</a> and Python) are read\nfrom <code>~/.gdbinit.d/</code>.</p></li>\n<li><p>Fully stylable user interface and dynamic command prompt.</p></li>\n<li><p>No GDB command has been redefined, instead all the\nfeatures are available as subcommands of the main <code>dashboard</code> command.</p></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#minimal-requirements\"><span class=\"octicon octicon-link\"></span></a>Minimal requirements</h2>\n\n<p>GDB dashboard requires at least GDB 7.7 compiled with Python 2.7 in order to\nwork properly.</p>\n\n<p>See <a href=\"https://github.com/cyrus-and/gdb-dashboard/issues/1\">#1</a> for more\ndetails/workarounds.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#default-modules\"><span class=\"octicon octicon-link\"></span></a>Default modules</h2>\n\n<p>Follows the list of bundled default modules. Refer to the GDB help system for\nthe full syntax.</p>\n\n<ul><li><p><code>assembly</code> shows the disassembled code surrounding the program counter. The\ninstructions constituting the current statement are marked, if available.</p></li>\n<li><p><code>history</code> lists the last entries of the GDB value history.</p></li>\n<li><p><code>memory</code> allows to inspect memory regions.</p></li>\n<li><p><code>registers</code> shows the CPU registers and their values.</p></li>\n<li><p><code>source</code> shows the program source code, if available.</p></li>\n<li><p><code>stack</code> shows the current stack trace including the function name and the\nfile location, if available. Optionally list the frame arguments and locals\ntoo.</p></li>\n<li><p><code>threads</code> lists the currently available threads.</p></li>\n<li><p><code>expressions</code> watches user expressions.</p></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#commands\"><span class=\"octicon octicon-link\"></span></a>Commands</h2>\n\n<p>The GDB documentation is available at <code>help dashboard</code>. Just like any GDB\ncommand, abbreviations are possible. Moreover, the alias <code>db</code> resolves to\n<code>dashboard</code>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#dashboard\"><span class=\"octicon octicon-link\"></span></a>dashboard</h3>\n\n<p>This is the root command and it is used to manually redisplay the dashboard.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#dashboard--output-file\"><span class=\"octicon octicon-link\"></span></a>dashboard -output [<code>&lt;file&gt;</code>]</h3>\n\n<p>By default the dashboard is written to the GDB console but it is possible to\nredirect its output to a file or even to another terminal. If the target is a\nvalid terminal TTY then its width is used to format the dashboard, otherwise\nfall back to the width of the main GDB console.</p>\n\n<p>Without argument reset this setting to the default.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#display-the-dashboard-in-another-terminal\"><span class=\"octicon octicon-link\"></span></a>Display the dashboard in another terminal</h4>\n\n<p><a href=\"https://camo.githubusercontent.com/256e95149b3a4cbaa9d2b5f8b1c96322c7127d54/687474703a2f2f692e696d6775722e636f6d2f5a546334576a712e706e67\"><img src=\"https://camo.githubusercontent.com/256e95149b3a4cbaa9d2b5f8b1c96322c7127d54/687474703a2f2f692e696d6775722e636f6d2f5a546334576a712e706e67\" alt=\"Dashboard in another terminal\" /></a></p>\n\n<ol><li><p>start GDB in one terminal;</p></li>\n<li><p>open another terminal (e.g. <a href=\"https://github.com/tmux/tmux\">tmux</a> pane) and get its TTY with the\n<code>tty</code> command (e.g. <code>/dev/ttys001</code>, the name may be different for a variety\nof reasons);</p></li>\n<li><p>issue the command <code>dashboard -output /dev/ttys001</code> to redirect the dashboard\noutput to the newly created terminal;</p></li>\n<li><p>debug as usual.</p></li>\n</ol><h4><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#display-the-dashboard-in-a-web-browser\"><span class=\"octicon octicon-link\"></span></a>Display the dashboard in a web browser</h4>\n\n<p>Pushing this even further, one could use a web browser as an auxiliary terminal\nusing <a href=\"https://github.com/yudai/gotty\">gotty</a>.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/2ff7171c3d32e8baed10ad8326c1b187cd4edd92/687474703a2f2f692e696d6775722e636f6d2f7149636f3965302e706e67\"><img src=\"https://camo.githubusercontent.com/2ff7171c3d32e8baed10ad8326c1b187cd4edd92/687474703a2f2f692e696d6775722e636f6d2f7149636f3965302e706e67\" alt=\"Dashboard in a web browser\" /></a></p>\n\n<ol><li><p>start GDB in one terminal;</p></li>\n<li><p>open another terminal and execute <code>gotty sh -c \'tty; cat\'</code>;</p></li>\n<li><p>open a web browser, navigate to <code>http://localhost:8080</code> and note the TTY;</p></li>\n<li><p>issue the command <code>dashboard -output /dev/ttys001</code> to redirect the dashboard\noutput to the web browser;</p></li>\n<li><p>debug as usual.</p></li>\n</ol><h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#dashboard--enabled-onoff\"><span class=\"octicon octicon-link\"></span></a>dashboard -enabled [on|off]</h3>\n\n<p>Enable or disable the automatic display of the dashboard whenever the target\nprogram stops. The dashboard is enabled by default and even when it is disabled,\nit can be manually displayed with <code>dashboard</code>.</p>\n\n<p>Sometimes it may be convenient to redraw the dashboard even if the target\nprogram has not changed its execution status, for example when the programmer\nswitches the currently selected frame with the <code>up</code> or <code>down</code> commands. It is\npossible to do so by setting up some GDB hooks in the <a href=\"https://github.com/cyrus-and/gdb-dashboard#configuration\">user-defined init\nfile</a>, for example:</p>\n\n<pre><code>define hookpost-up\ndashboard\nend\n\ndefine hookpost-down\ndashboard\nend\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#dashboard--layout-directive\"><span class=\"octicon octicon-link\"></span></a>dashboard -layout [<code>&lt;directive&gt;</code>...]</h3>\n\n<p>By default, all the modules are enabled and placed within the dashboard in\nalphabetical order. As the number of modules grows, it is important to decide\nwhich modules will be part of the dashboard, and where.</p>\n\n<p>Each directive is in the form <code>[!]&lt;module&gt;</code>, when the <code>!</code> is present then the\ncorresponding module is disabled by default. The order of directives denotes the\ndisplay order within the dashboard. For example:</p>\n\n<pre><code>dashboard -layout source !assembly stack\n</code></pre>\n\n<p>Modules which do not appear in the list are disabled and placed after the last\nelement in alphabetical order.</p>\n\n<p>When executed without arguments, this command lists all the available modules.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#dashboard--style-name-value\"><span class=\"octicon octicon-link\"></span></a>dashboard -style [<code>&lt;name&gt;</code> [<code>&lt;value&gt;</code>]]</h3>\n\n<p>Access to the stylable attributes of the dashboard, see <a href=\"https://github.com/cyrus-and/gdb-dashboard#stylable-attributes\">Stylable\nattributes</a>. For example, to change the prompt to\nsomething more familiar:</p>\n\n<pre><code>dashboard -style prompt \'(gdb)\'\n</code></pre>\n\n<p>The argument is parsed as a Python literal and converted to the proper type.</p>\n\n<p>When only the name is specified this command shows the current value,\nwhereas without arguments prints all the attributes.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#modules-subcommands\"><span class=\"octicon octicon-link\"></span></a>Modules subcommands</h3>\n\n<p>Every module adds its own subcommand <code>dashboard &lt;module&gt;</code> which is used to\ntoggle the enable flag and to redisplay the dashboard.</p>\n\n<p>Modules may also declare additional subcommands, see <code>help dashboard &lt;module&gt;</code>\nfrom GDB.</p>\n\n<p>Moreover, if a module declare some stylable attributes then the command\n<code>dashboard &lt;module&gt; -style</code> will be available. Its functioning is equivalent to\nthe <a href=\"https://github.com/cyrus-and/gdb-dashboard#dashboard--style-name-value\"><code>dashboard -style</code></a> command but it does apply\nto a module.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#configuration\"><span class=\"octicon octicon-link\"></span></a>Configuration</h2>\n\n<p>Files in <code>~/.gdbinit.d/</code> are executed in alphabetical order, but the preference\nis given to Python files. If there are subdirectories, they are walked\nrecursively. The idea is to keep separated the custom modules definition from\nthe configuration itself.</p>\n\n<p>The main configuration file can be placed in <code>~/.gdbinit.d/</code> (say\n<code>~/.gdbinit.d/init</code>) and should be used to tune the dashboard styles and modules\nconfiguration but also the usual GDB parameters.</p>\n\n<p>The alternative is to hard code changes in the provided <a href=\"https://raw.githubusercontent.com/cyrus-and/gdb-dashboard/master/.gdbinit\"><code>.gdbinit</code></a>, to do\nso just add new modules and GDB settings under <code># Default modules</code> and <code># Better\nGDB defaults</code> respectively.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#stylable-attributes\"><span class=\"octicon octicon-link\"></span></a>Stylable attributes</h2>\n\n<p>There is number of attributes that can be used to customize the aspect of the\ndashboard and of its modules. They are documented within the GDB help system.\nFor what concerns the dashboard itself it can be reached with:</p>\n\n<pre><code>help dashboard -style\n</code></pre>\n\n<p>Whereas for modules:</p>\n\n<pre><code>help dashboard &lt;module&gt; -style\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#ansi-escape-codes\"><span class=\"octicon octicon-link\"></span></a>ANSI escape codes</h3>\n\n<p>Colors and text styles are specified using <a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code\">ANSI</a> escape codes. For\nexample setting a style to <code>1;31</code> will produce <code>^[[1;31m</code>, which will result in\ndisplaying the text red (<code>31</code>) and bright (<code>1</code>). The ANSI output can be disabled\nby setting the <code>ansi</code> attribute (note that this will not affect the command\nprompt).</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#dividers\"><span class=\"octicon octicon-link\"></span></a>Dividers</h3>\n\n<p>A divider is basically a terminal-wide horizontal line with an optional label.\nPrimary dividers are those used to separate the modules, whereas secondary\ndividers may be used inside modules to logically separate different sections.\nWhen a section or module is empty then the styles used for the divider are those\nwith the <code>off</code> qualifier.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#common-styles\"><span class=\"octicon octicon-link\"></span></a>Common styles</h3>\n\n<p>These are general purpose <a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code\">ANSI</a> styles defined for convenience and used\nwithin the default modules.</p>\n\n<ul><li><code>style_selected_1</code></li>\n<li><code>style_selected_2</code></li>\n<li><code>style_low</code></li>\n<li><code>style_high</code></li>\n<li><code>style_error</code></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#custom-modules\"><span class=\"octicon octicon-link\"></span></a>Custom modules</h2>\n\n<p>The idea of custom modules is that they provide ways to access readonly\ninformation from the target program status; it is safe to assume that they will\nbe queried during the program execution only.</p>\n\n<p>Custom modules must inherit the <code>Dashboard.Module</code> class and define some\nmethods:</p>\n\n<ul><li><p><code>label</code> returns the module label which will appear in the divider.</p></li>\n<li><p><code>lines</code> return a list of strings which will form the module content. When a\nmodule is temporarily unable to produce its content, it should return an\nempty list; its divider will then use the styles with the <code>off</code> qualifier.</p></li>\n</ul><p>The name of a module is automatically obtained by the class name.</p>\n\n<p>Modules are instantiated once at initialization time and kept during the whole\nthe GDB session.</p>\n\n<p>Optionally, a module may include a description which will appear in the GDB help\nsystem by specifying a Python docstring for the class.</p>\n\n<p>Optionally, a module may define stylable attributes by defining the <code>attributes</code>\nmethod returning a dictionary in which the key is the attribute name and the\nvalue is another dictionary:</p>\n\n<ol><li><p><code>default</code> is the initial value for this attribute.</p></li>\n<li><p><code>doc</code> is the documentation of this attribute which will appear in the GDB\nhelp system. This key can be omitted.</p></li>\n<li><p><code>name</code> is the name of the attribute of the Python object, defaults to the\nkey value.</p></li>\n<li><p><code>type</code> is the type of this attribute, it is used to coerce the value passed\nas an argument to the proper type, or raise an exception. This key defaults\nto the <code>str</code> type.</p></li>\n<li><p><code>check</code> is a control callback which accept the coerced value and returns\n<code>True</code> if the value satisfies the constraint and <code>False</code> otherwise. This key\nis optional, when omitted no check is performed.</p></li>\n</ol><p>Optionally, a module may declare subcommands by defining the <code>commands</code> method\nreturning a dictionary in which the key is the command name and the value is\nanother dictionary:</p>\n\n<ol><li><p><code>action</code> is the callback to be executed which accepts the raw input string\nfrom the GDB prompt. Callbacks may raise exceptions to notify erroneous\nsituations which message will be shown automatically to the user.</p></li>\n<li><p><code>doc</code> is the command documentation.</p></li>\n<li><p><code>completion</code> is the completion policy, one of the <code>gdb.COMPLETE_*</code> constants\ndefined in the <a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Commands-In-Python.html\">reference manual</a>. This key is optional and\ndefaults to <code>None</code> which is equivalent to <code>gdb.COMPLETE_NONE</code>.</p></li>\n</ol><h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#common-functions\"><span class=\"octicon octicon-link\"></span></a>Common functions</h3>\n\n<p>A number of auxiliary common functions are defined in the global scope, they can\nbe found in the provided <a href=\"https://raw.githubusercontent.com/cyrus-and/gdb-dashboard/master/.gdbinit\"><code>.gdbinit</code></a> and concern topics like <a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code\">ANSI</a>\noutput, divider formatting, conversion callbacks, etc. They should be more or\nless self-documented, some usage examples can be found within the bundled\ndefault modules.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#example\"><span class=\"octicon octicon-link\"></span></a>Example</h3>\n\n<p>Default modules already provide a good example, but here is a simple module\nwhich may be used as a template for new custom modules, it allows the programmer\nto note down some snippets of text during the debugging session.</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Notes</span>(<span class=\"pl-e\">Dashboard.Module</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Simple user-defined notes.<span class=\"pl-pds\">\"\"\"</span></span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\"><span class=\"pl-c1\">__init__</span></span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-v\">self</span>.notes <span class=\"pl-k\">=</span> []\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">label</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Notes<span class=\"pl-pds\">\'</span></span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">lines</span>(<span class=\"pl-smi\">self</span>):\n        out <span class=\"pl-k\">=</span> []\n        <span class=\"pl-k\">for</span> note <span class=\"pl-k\">in</span> <span class=\"pl-v\">self</span>.notes:\n            out.append(note)\n            <span class=\"pl-k\">if</span> <span class=\"pl-v\">self</span>.divider:\n                out.append(divider())\n        <span class=\"pl-k\">return</span> out[:<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>] <span class=\"pl-k\">if</span> <span class=\"pl-v\">self</span>.divider <span class=\"pl-k\">else</span> out\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">add</span>(<span class=\"pl-smi\">self</span>, <span class=\"pl-smi\">arg</span>):\n        <span class=\"pl-k\">if</span> arg:\n            <span class=\"pl-v\">self</span>.notes.append(arg)\n        <span class=\"pl-k\">else</span>:\n            <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">Exception</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Cannot add an empty note<span class=\"pl-pds\">\'</span></span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">clear</span>(<span class=\"pl-smi\">self</span>, <span class=\"pl-smi\">arg</span>):\n        <span class=\"pl-v\">self</span>.notes <span class=\"pl-k\">=</span> []\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">commands</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> {\n            <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>add<span class=\"pl-pds\">\'</span></span>: {\n                <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>action<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-v\">self</span>.add,\n                <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>doc<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Add a note.<span class=\"pl-pds\">\'</span></span>\n            },\n            <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>clear<span class=\"pl-pds\">\'</span></span>: {\n                <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>action<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-v\">self</span>.clear,\n                <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>doc<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Remove all the notes.<span class=\"pl-pds\">\'</span></span>\n            }\n        }\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">attributes</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> {\n            <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>divider<span class=\"pl-pds\">\'</span></span>: {\n                <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>doc<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Divider visibility flag.<span class=\"pl-pds\">\'</span></span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>default<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-c1\">True</span>,\n                <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>type<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-c1\">bool</span>\n            }\n        }</pre></div>\n\n<p>To use the above just save it in a Python file, say <code>notes.py</code>, inside\n<code>~/.gdbinit.d/</code>, the following commands (together with the help) will be\navailable:</p>\n\n<pre><code>dashboard notes\ndashboard notes add\ndashboard notes clear\ndashboard notes -style\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#resources\"><span class=\"octicon octicon-link\"></span></a>Resources</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cyrus-and/gdb-dashboard#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>Copyright (c) 2015 Andrea Cardaci <a href=\"mailto:cyrus.and@gmail.com\">cyrus.and@gmail.com</a></p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n',1),(59,'WikiImunesExamples â€“ IMUNES','http://imunes.net/wiki/wiki/WikiImunesExamples',0,0,'\n\n<p>\nExamples are available for download on github: <a class=\"ext-link\" href=\"https://github.com/imunes/imunes-examples\"><span class=\"icon\">​</span>https://github.com/imunes/imunes-examples</a>.\n</p>\n<p>\nList of currently available documented examples:\n</p>\n\n<p>\nTo install additional packages in the IMUNES virtual nodes the script <tt>pkg_add_imunes</tt> is included in the IMUNES release.\n</p>\n<pre class=\"wiki\"># pkg_add_imunes -r strogswan tshark\n</pre>\n<p>\nIMUNES experiments can be started without GUI, by using the batch option:\n</p>\n<pre class=\"wiki\"># imunes -b topology.imn\nCreating nodes...\npc1 router1 router2 pc2 router3 \nCreating links...\nl0 l2 l1 l3 \nConfiguring nodes...\nn0 n1 n2 n3 n4 \nNetwork topology instantiated in 0 seconds (5 nodes and 4 links).\nExperiment ID = i95350\n</pre><p>\nIMUNES includes the following tools that enable easy scripting for virtual topologies:\n</p>\n<h2>himage</h2>\n<p>\nThe <tt>himage</tt> command is a wrapper around the standard <tt>jls</tt> and <tt>jexec</tt> tools that are used to manage FreeBSD jails.\n</p>\n<p>\nThe default output shows usage possibilities:\n</p>\n<pre class=\"wiki\">$ himage\n\nCommand himage can be used as an interface to the command jexec/jls\nfor virtual images. Hostname is used instead of jail name.\nHostname can be in the form: hostname or hostname@eid.\n\nUsage:\n  himage vi_hostname command\n  himage -v vi_hostname  ---&gt; vimage name      (eid.nodename)\n  himage -n vi_hostname  ---&gt; vimage node name (nodename)\n  himage -e vi_hostname  ---&gt; vimage eid name  (eid)\n  himage -j vi_hostname  ---&gt; vimage jail id   (jid)\n  himage -d vi_hostname  ---&gt; vimage path\n  himage -l              ---&gt; running experiments eids \n</pre><p>\nThe main usage scenario of himage is to run applications in IMUNES nodes without GUI by using node names (i.e. pc1, router1, dnsServer, ...) instead of node identificators (i.e. n0, n1, ...). Running a command inside the node named <tt>pc1</tt> in the current topology (must be ran as root):\n</p>\n<pre class=\"wiki\"># himage pc1 ls\n.cshrc		boot.conf	libexec		rescue		usr\n.profile	dev		media		root		var\nCOPYRIGHT	etc		mnt		sbin\nbin		home		out.log		sys\nboot		lib		proc		tmp\n</pre><p>\nIf there are multiple experiments running with the same node names then a warning will be issued:\n</p>\n<pre class=\"wiki\"># himage pc1\nError: pc1 is not a unique name.\nIt is used (at least) for nodes:\n   245  -               pc1                           /var/imunes/i95350/n0\n   256  -               pc1                           /var/imunes/ib5b10/n0\n</pre><p>\nNow you need to specify the experiment ID (<tt>@i95350</tt>) you want to run the command in:\n</p>\n<pre class=\"wiki\"># himage pc1@i95350 ls\n.cshrc		boot.conf	libexec		rescue		usr\n.profile	dev		media		root		var\nCOPYRIGHT	etc		mnt		sbin\nbin		home		out.log		sys\nboot		lib		proc		tmp\n</pre><p>\nTo see the list of running experiments run the following:\n</p>\n<pre class=\"wiki\">$ himage -l\ni95350\nia0890\nib5b10\n</pre><p>\nAdditional information about experiment nodes can be found using the other <tt>himage</tt> options:\n</p>\n<pre class=\"wiki\">$ himage -v pc1\ni95350.n0\n$ himage -n pc1\nn0\n$ himage -e pc1\ni95350\n$ himage -j pc1\n245\n$ himage -d pc1\n/var/imunes/i95350/n0\n</pre><h2>hcp</h2>\n<p>\nThe <tt>hcp</tt> command is a wrapper around the standard <tt>cp</tt> command. It uses node names to refer to virtual node root partitions.\n</p>\n<p>\nHere are two examples that demonstrate copying from the virtual node and to the virtual node:\n</p>\n<pre class=\"wiki\"># hcp router1:boot.conf .\n# hcp start_script.sh router1:/root/\n</pre><p>\nThe command can also be used to copy files between virtual nodes and between experiments (using the same notation as <tt>himage</tt>):\n</p>\n<pre class=\"wiki\"># hcp router1:boot.conf router2:root/\n# hcp router1@i84ec0:root/start_script.sh router1@i56ad1:root/\n</pre><h2>vlink</h2>\n<p>\nThe <tt>vlink</tt> command is a wrapper around <tt>ngctl</tt>, netgraph tool used to create links between virtual nodes in IMUNES.\n</p>\n<p>\n<tt>vlink</tt> is used to change link parameters. The following link parameters are available:\n</p>\n<ul><li>bandwidth (bps, bits-per-second)\n</li><li>bit-error rate, BER (number of bits in which one error will occur)\n</li><li>delay (microseconds)\n</li><li>packet duplication (%, percentage of packets that will be duplicated)\n</li></ul><p>\nA link is identified by the endpoint node names. The link between pc1 and pc2 is identified by <tt>pc1-pc2</tt> or <tt>pc2-pc1</tt>.\n</p>\n<pre class=\"wiki\">Usage:\nvlink [options] link_name[@eid]\noptions:\n -bw value            set link bandwidth (bps) &lt;&gt;\n -BER value           set link BER (1/value) &lt;&gt;\n -dly value           set link delay (us) &lt;&gt;\n -dup value           set link duplicate (%) &lt;&gt;\n -r                   set link settings to default values\n -e value             specify experiment ID &lt;&gt;\n -eid value           specify experiment ID &lt;&gt;\n -?                   Print this message\n</pre><p>\nSetting the bandwidth to 10 Mb/s with a delay of 30 ms to the link connecting router1 and pc1:\n</p>\n<pre class=\"wiki\"># vlink -bw 10000000 -dly 30000 router1-pc1\n</pre><p>\nGenerate an error on one bit in a million:\n</p>\n<pre class=\"wiki\"># vlink -BER 1000000 router1-pc1\n</pre><p>\nSet packet duplication to 20%:\n</p>\n<pre class=\"wiki\"># vlink -dup 20 router1-pc1\n</pre><p>\nModifying a link in a specific experiment (i.e. Experiment ID = i56ad1):\n</p>\n<pre class=\"wiki\"># vlink -dup 20 router1-pc1@i56ad1\n</pre><p>\nTo reset the link settings to the default values the <tt>-r</tt> flag is used:\n</p>\n<pre class=\"wiki\"># vlink -r router1-pc1@i56ad1\n</pre>',1),(60,'Letâ€™sÂ Encrypt is a new Certificate Authority: Itâ€™s free, automated, and open. Arriving Q4 2015','https://letsencrypt.org/',0,0,'\n\n    \n\n<div class=\"page-content\">\n  <div class=\"wrapper\">\n    <div>\n      <div class=\"pure-g home\">\n        <div class=\"pure-u-1 pure-u-md-1-2\">\n          <div class=\"grid-container\">\n            <h2 class=\"through-line\">From our blog</h2>\n              <ul class=\"post-list\"><li>\n                    <span class=\"post-meta\">Sep 14, 2015</span>\n\n                    \n                    Let’s Encrypt passed another major milestone by issuing our first certificate.\n                    <p><a href=\"https://letsencrypt.org/2015/09/14/our-first-cert.html\">Read more</a></p>\n                  </li>\n                \n                  <li>\n                    <span class=\"post-meta\">Aug 13, 2015</span>\n\n                    \n                    Let’s Encrypt\'s success depends on the support of a strong community. Nowhere is this more true than when it comes to subscriber support. Today we’re happy to announce <a href=\"https://community.letsencrypt.org/\">Let’s Encrypt Community Support</a>, a place for our community to both give and receive support.\n                    <p><a href=\"https://letsencrypt.org/2015/08/13/lets-encrypt-community-support.html\">Read more</a></p>\n                  </li>\n                \n                  <li>\n                    <span class=\"post-meta\">Aug 7, 2015</span>\n\n                    \n                    We can\'t wait to see websites turn on TLS with Let\'s Encrypt. Trust is our most important asset, however, and we need to take the necessary time to make sure our systems are secure and stable.\n                    <p><a href=\"https://letsencrypt.org/2015/08/07/updated-lets-encrypt-launch-schedule.html\">Read more</a></p>\n                  </li>\n                \n              </ul></div>\n        </div>\n\n        <div class=\"pure-u-1 pure-u-md-1-2\">\n          <div class=\"grid-container\">\n            <h2 class=\"through-line\">Major Sponsors</h2>\n            \n\n            <h2 class=\"through-line\">Donate</h2>\n            \n\n            <h2 class=\"through-line\">About ISRG</h2>\n            <p>Internet Security Research Group (ISRG) is a California public\n               benefit corporation, and is recognized by the IRS as a tax-exempt\n               organization under Section 501(c)(3) of the Internal Revenue Code.\n               ISRG’s mission is to reduce financial, technological, and\n               education barriers to secure communication over the Internet.</p>\n          </div>\n        </div>\n    </div>\n  </div>\n</div>\n\n    \n    </div>',1),(61,'Ops-ing with Packer and Terraform','http://engineering.sharethrough.com/blog/2015/09/08/ops-ing-with-packer-and-terraform/',1,0,'\n  <p>Most of Sharethrough’s infrastructure runs on <a href=\"https://aws.amazon.com/\">AWS</a>. For a long time we’ve relied on <a href=\"https://www.chef.io/chef/\">chef</a> and <a href=\"https://github.com/chef/knife-ec2\">knife ec2</a> to maintain resources, but as we grew, we searched for tools that would continue to improve operation efficiency. Recently we started using two tools from <a href=\"https://hashicorp.com/\">Hashicorp</a>, <a href=\"https://www.packer.io/\">Packer</a> and <a href=\"https://www.terraform.io/\">Terraform</a>, that appear to deliver what we’re looking for.</p>\n\n\n\n<p>Sharethrough powers much of its platform with microservices. We preserve package and library versions, system parameters, and application configuration for these services using Chef cookbooks, attributes, and environment files.\nFor a long time, services shared customized tasks for changing EC2 instance state using <code>knife-ec2</code>:</p>\n<div class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8</pre></td><td class=\"code\"><pre>masonleung@Masons-MacBook-Pro $ rake -T\nrake chef:resolve          # resolve cookbook dependencies\nrake chef:vendor           # vendor cookbook dependencies\nrake instance:chef         # run chef on instance\nrake instance:delete       # delete an instance\nrake instance:environment  # setup the environment\nrake instance:list         # list instances\nrake instance:new          # launch a new ec2 instance\n</pre></td></tr></tbody></table></div>\n\n<p>A great approach, but it had some drawbacks:</p>\n\n<ol><li>Every time you created an instance, libraries had to be recompiled from source (slow)</li>\n<li>For service clusters, creating nodes one node at a time was <code>n</code> times slow, where <code>n</code> is the number of instances in the cluster.</li>\n<li>Some resources aren’t EC2 instances at all (e.g. a new queue in <a href=\"https://aws.amazon.com/sqs/\">SQS</a>), but we still needed consistent automation to create them.</li>\n<li>Things like security groups, IAM roles, users, and policies were handled manually, and thus lacked a paper trail.</li>\n</ol><p>We decided to take a two-step approach to bringing up a hypothetical service:</p>\n\n<ol><li>Create a service’s EC2 instance with libraries pre-installed</li>\n<li>Create any non-EC2 resources required to run the service (e.g. SQS)</li>\n</ol><p>Packer creates machine images on multiple platforms using a single configuration file. It contains provisioners that work with common configuration management tools (i.e. Chef). We use it with our Chef cookbooks to create Sharethrough-specific <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html\">Amazon Machine Images</a> (AMI). Packer installs packages and libraries into a reusable image.</p>\n\n<p>Here’s a snippet of a sample packer file:</p>\n<div class=\"highlight json\"><table><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12</pre></td><td class=\"code\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"provisioners\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"chef-solo\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"s2\">\"cookbook_paths\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"ops/chef/berks-cookbooks\"</span><span class=\"p\">],</span><span class=\"w\">\n      </span><span class=\"s2\">\"run_list\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"bakery::{{user `role`}}\"</span><span class=\"p\">],</span><span class=\"w\">\n      </span><span class=\"s2\">\"environments_path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ops/chef/environments\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"s2\">\"chef_environment\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"{{user `environment`}}\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"s2\">\"staging_directory\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"/home/ubuntu/cookbooks\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></td></tr></tbody></table></div>\n\n<p>In our first try, <code>staging</code> and <code>production</code> images were created separately (they access different AWS resources).\nWe later discovered Packer has a <code>staging_directory</code> attribute to save chef cookbooks onto the image. It also has <code>environments_path</code> to store environment specified attributes. The <code>staging_directory</code> and <code>environment_path</code> combination allowed us to rerun cookbooks. When we created an image, we always built with production attributes. If we need a staging environment, we simply reran the Chef cookbooks with staging attributes during instance instantiation. This approach cuts the number of stored images in half.</p>\n\n\n\n<p>If other AWS resources are required to run a microservice, we want to use Terraform to create all of them. Our Terraform files are organized by components; listing the directory gives us a glance of what resources are needed:</p>\n<div class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11</pre></td><td class=\"code\"><pre>masonleung@Masons-MacBook-Pro ~/Projects/code/vaca/ops/terraform/production (master) $ ls -l\ntotal 112\n-rw-r--r--  1 masonleung  staff    120 Jun  9 11:50 aws.tf\n-rw-r--r--  1 masonleung  staff   1346 Aug 20 13:45 ec2.tf\n-rw-r--r--  1 masonleung  staff    116 Aug 20 12:37 iam_instance_profiles.tf\n-rw-r--r--  1 masonleung  staff    196 Aug 20 12:37 iam_policy_attachment.tf\n-rw-r--r--  1 masonleung  staff    322 Aug 20 12:37 iam_role.tf\n-rw-r--r--  1 masonleung  staff   9314 Aug 20 13:45 main.tfstate\n-rw-r--r--  1 masonleung  staff  14090 Aug 20 13:45 main.tfstate.backup\n-rw-r--r--  1 masonleung  staff    317 Aug 20 12:37 security_group.tf\n-rw-r--r--  1 masonleung  staff    680 Aug 20 12:37 variable.tf\n</pre></td></tr></tbody></table></div>\n\n<p>Below is a sample terraform file for EC2 instance creation</p>\n<div class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38</pre></td><td class=\"code\"><pre>resource \"aws_instance\" \"vaca-green\" {\n  count = 2\n  ami = \"ami-12345abc\"\n  instance_type = \"m3.large\"\n  key_name = \"master\"\n  availability_zone = \"${lookup(var.zones, concat(\"zone\",count.index))}\"\n  security_groups = [\"office-access\", \"${aws_security_group.vaca_security_group.name}\", \"${aws_security_group.vaca_production.name}\"]\n  iam_instance_profile = \"${aws_iam_instance_profile.vaca.name}\"\n\n  root_block_device {\n    volume_size = \"50\"\n    delete_on_termination = true\n  }\n\n  tags {\n      Name = \"vaca production green ${count.index}\"\n      Project = \"${var.application_name}\"\n      Roles = \"app\"\n      Stages = \"${var.environment}\"\n      Group = \"green\"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n\n  provisioner \"remote-exec\" {\n    inline = [\n      \"cd /home/ubuntu; sudo chef-solo -c cookbooks/solo.rb -j cookbooks/node.json -E staging\",\n      \"host=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)\",\n      \"touch $host\"\n    ]\n  }\n\n  provisioner \"local-exec\" {\n      command = \"bundle install &amp;&amp; bundle exec cap HOSTFILTER=${self.public_dns} production deploy\"\n  }\n}\n</pre></td></tr></tbody></table></div>\n\n<p>A few callouts:</p>\n\n<ol><li>We perform blue-green deploy to our microservices for breaking changes. Bringing up a new set of EC2 instances requires copy-and-paste of <code>aws_instance</code> resources and a rerun of Terraform. When the deploy is completed, we remove the duplicated <code>aws_instance</code> section and destroy the extra instances.</li>\n<li>As mentioned earlier, we only create AMIs with production attributes. Staging instances are built by re-running chef with staging attributes inside the provisioner section.</li>\n<li>The <code>root_block_device</code> section allows us to create <a href=\"https://aws.amazon.com/ebs/\">EBS</a> volumes of any size, which saves us from forgetting to mount volumes used to, say, store logs.</li>\n<li>Lastly, we tie IAM role and policy which are defined in other Terraform files to an EC2 instance via the <code>iam_instance_profile</code> attribute, preventing us from missing role assignment.</li>\n</ol><p>Packer saves us time from having to install libraries from sources every time a new EC2 instance is created. We can simply harden an image and use it as the base image for microservices.</p>\n\n<p>Terraform also solves a common AWS problem: when a developer modifies resources in the AWS console, there is no way of tracing that change to a documented step that could be reversed.\nWith Terraform, changes made to infrastructure is code in Terraform files, so they’re recorded and maintained in git. Promoting visibility this way has saved us from having a forgotten one-off step.</p>\n\n<p>Pre-baking an image with Packer saves time, but the proliferation of images is hard to manage without the ability to associate metadata to an image. We’re looking at Hashicorp’s <a href=\"https://atlas.hashicorp.com/\">Atlas</a> product as a way to handle images as version-controlled assets.</p>\n\n<p>So far we’ve only used a subset of Terraform, but we’re starting to use it for non-EC2 resources.  And although Terraform is great for creating brand new infrastructure, it needs improvements when working on existing nodes. There is a <a href=\"https://github.com/dtan4/terraforming\">free tool</a> to lessen the work on exporting existing infrastructure, but would be nice if Terraform dealt with it natively.</p>\n\n<p>We’re excited about Hashicorp’s products and will continue to test-drive them as they mature.</p>\n\n',1),(63,'An introduction to visual programming using NoFlo','http://rawkes.com/articles/an-introduction-to-noflo-and-flow-based-programming',0,0,'<p>I recently stumbled upon <a href=\"http://noflojs.org\">NoFlo</a> during my quest for a better way to manage the realtime processing and transformation of data within <a href=\"http://vizicities.com\">ViziCities</a>. I was dubious about this bizarre JavaScript framework at first, initially casting it aside as a fun distraction. In fact, it was only after spending a full day experimenting with NoFlo that I began to comprehend its full potential. And boy does it have potential!</p>\n\n<p><br /><img src=\"http://rawkes.com/media/noflo-introduction/noflo.jpg\" alt=\"noflo.jpg\" /><br /></p>\n\n<p>So what actually is NoFlo? And why would you want to use it? No one wants yet another framework to learn, nor another pitch for the Next Big Thing™ in programming (a.k.a. “I didn\'t like anything else so I half-baked something new that no one will use”). I\'m a grumpy cynic at the best of times, usually casting aside all the new crap as a fad (it usually is), but NoFlo is different. It has inspired me and filled me with a kind of excitement and energy that I\'ve not felt for a long time. More specifically, the concept that NoFlo is created on has the potential to change the way you approach programming, forever. I\'m deadly serious.</p>\n\n<p>Let\'s unwrap this magical concept that NoFlo is based upon.</p>\n\n<h2>Flow-based programming</h2>\n\n<p>Back in the 1970s, a man by the name of Paul Morrison decided it would be a good idea to invent a new way to construct computer programs. It\'s called flow-based programming, or FBP for short.</p>\n\n<p><br /><img src=\"http://rawkes.com/media/noflo-introduction/ibm-system360.jpg\" alt=\"ibm-system360.jpg\" /><br />Computers were so large in the 1970s that you required an army to use them!<br /></p>\n\n<p>Based on <a href=\"http://en.wikipedia.org/wiki/Dataflow_programming\">dataflow programming</a>, the theory of FBP is simple — break a computer program into a series of repeatable individual components and network them together.</p>\n\n<p>In <a href=\"http://www.jpaulmorrison.com/fbp/\">Paul\'s own words</a>:</p>\n\n<blockquote>\n  <p>FBP defines applications as networks of \"black box\" processes, which exchange data across predefined connections by message passing, where the connections are specified externally to the processes. These black box processes can be reconnected endlessly to form different applications without having to be changed internally. FBP is thus naturally component-oriented.</p>\n</blockquote>\n\n<p>Easy peasy! Now I don\'t know about you, but I find it easier to understand something by doing it. Technical descriptions end up confusing me, then as soon as I think it\'s started to make sense I become even more confused.</p>\n\n<p>Fortunately, you need only understand the gist of FBP (that it\'s about breaking things into components and writing little if no code) as the benefits will become obvious as you start to use it. If you do want to dig deep into FBP than I suggest taking a look at <a href=\"http://www.jpaulmorrison.com/fbp/\">Paul\'s fantastic website on it</a>, including a <a href=\"https://github.com/flowbased/flowbased.org/wiki\">wiki overview of the core concepts</a>.</p>\n\n<h2>Why FBP over, you know, normal programming?</h2>\n\n<p>Good question! There\'s my own personal opinion and then the opinion of the FBP hard-liners. They will say that you should always be using FBP, that once you open your eyes to its majesty then you\'ll never want to program “normally” ever again. I actually agree with that, partly.</p>\n\n<p>On the flip-side, the grumpy cynical side of me says that you should continue doing things how you do them now, but that you should try out FBP and see what sticks. You might end up using it in its entirety, or even a mix of both, or perhaps you\'ll never want to look at it again. Any of those options are fine.</p>\n\n<p>Specifically, FBP does introduce new ways of thinking about things and it does make things a lot better in certain areas. None of them are unique to FBP, though together they combine to create a rather powerful offering.</p>\n\n<p>For example, FBP fosters the concept of compartmentalised logic and processing. In fact, it forces you to break things down into processes that ideally take a single expected input and use that to produce a single expected output. These components can be reused amongst other areas of your application, or you can even take components written by other people (think NPM), requiring absolutely zero new code to be written. A perfect FBP application could be created with existing components without writing a single line of code. That\'s pretty amazing.</p>\n\n<p>This compartmentalism (pretty sure I just made that up) means that your application is inherently more robust, more reliable, more testable, more everything-able! FBP literally allows you to create applications faster, and that speed only increases the more you use it and the more components you create (or become available elsewhere). That\'s an unavoidable fact, not a promise.</p>\n\n<h2>So why not FBP?</h2>\n\n<p>FBP isn\'t all shiny (like every single thing ever, apart from perhaps those mirrors they put in space telescopes). I mean, it really is a fantastic concept and its benefits far outweigh the downsides, but those downsides will rule it out for some situations and that\'s ok.</p>\n\n<p>One example is that you can find yourself duplicating similar processes in FBP. If you need to run multiple transformations on an array of data then you may find yourself looping over that data multiple times across different components. This introduces extra processing time to your application.</p>\n\n<p>Then there\'s the overhead of sending data between components. This is an unavoidable part of FBP and it means that every single time you send a message you require a tiny amount of processing time to do that. This can add up when you start sending 1000s of pieces of data around the system.</p>\n\n<p>Fortunately, you can learn to notice and avoid both of these situations. Once you\'ve got used to FBP you\'ll begin to notice common approaches and optimisations. For example, you can avoid the previous situations by carefully thinking about the right component for the job. There are many ways to achieve the same result in FBP, which is both a blessing and a curse.</p>\n\n<h2>FBP\'s magic bullet — visual programming</h2>\n\n<p>The crown jewel of FBP is the ability to construct applications using visual tools. This completely changes the way you look at a computer program, allowing you to get a much better idea about the entire structure and flow of your application.</p>\n\n<p><br /><img src=\"http://rawkes.com/media/noflo-introduction/noflo.jpg\" alt=\"noflo.jpg\" /><br /></p>\n\n<p>Instead of needing to comprehend thousands of lines of code across countless files, with visual programming using FBP you instead need only connect the dots, quite literally.</p>\n\n<p>This approach means that the application itself visually shows you how it works, rather than requiring prior knowledge of the entire system before understanding how it all fits together. This not only makes more sense to the creator of the application  but it also means someone new can look at it and comprehend it nearly immediately. Even if they aren\'t a programmer!</p>\n\n<p><br /><img src=\"http://rawkes.com/media/noflo-introduction/quartz-composer.png\" alt=\"quartz-composer.png\" /><br /></p>\n\n<p>This kind of visual programming isn\'t new. Apple\'s Quartz Composer <a href=\"http://www.bbc.co.uk/blogs/legacy/radiolabs/2009/10/fun_with_quartz_composer_in_sn.shtml\">has done this for years</a>, as have <a href=\"https://cycling74.com/products/max/\">Max MSP</a>, <a href=\"http://vvvv.org/\">vvvv</a>, <a href=\"http://nodered.org/\">NodeRed</a> and many others.</p>\n\n<p>Creating applications in this way is incredibly powerful as it allows you to focus on getting to the final result rather than writing the intermediate code and logic. It\'s a strangely liberating feeling to create an application in a graphical tool without writing a single line of code.</p>\n\n<h2>Enter NoFlo</h2>\n\n<p>It\'s at this point that <a href=\"http://noflojs.org/\">NoFlo</a> enters the fray, the hot new thing in the world of FBP and visual programming. Let\'s save that story for another day.</p>\n',1),(64,'Economic secrets of the dark webâ€”the safe, easy way for anyone to be a little drug lord','http://qz.com/481037/dark-web/',0,0,'\n			\n<p><em>This article has been <a href=\"http://qz.com/481037/dark-web/#Correction\">corrected</a>.</em></p>\n<p>We had met at a bar. I told him I was an economist. He told me he was a pot dealer. You might think we wouldn’t have had much to talk about. But the most exciting story in economics is one where an innovation disrupts a market and creates new ones. So once he said the “dark web” had totally changed his business model in just a few years, I knew he could tell me things that would really blow my mind.</p>\n<p>The dealer, Paul (not his real name), explained how much easier it is to do business if he orders his supply over the web. In some ways, it’s safer—he can buy a wider range of cannabis, gets more consistent quality, doesn’t have to personally interact with his suppliers, and it’s quick and easy. But getting large amounts of marijuana shipped to him through the mail remains a major source of risk. To minimize it he employs a third party—a facilitator—to handle the delivery.</p>\n<img src=\"https://qzprod.files.wordpress.com/2015/08/delivery-variants.png?w=640\" alt=\"\" title=\"Direct delivery? Have it your way.\" /><i class=\"icon-camera\"></i>Direct delivery? Have it your way.<span class=\"inline-image-credit\">(Middle Earth)</span><p>The facilitator rents a carefully vetted Airbnb and arranges for a naive student to be there to sign for the package. The student then takes it to a second location, often a convenience store where the facilitator has a relationship with the owner. He collects the package from there, splits it into smaller portions, and passes those on to street dealers for sale. For taking on the most risk, the facilitator gets 60% of Paul’s profits.</p>\n<p>That 60% got my attention. After all, the market for drugs is notoriously inefficient. <a href=\"http://articles.latimes.com/2005/apr/24/opinion/oe-dubner24\">Street dealers</a>, who face the most risk of violence and arrest, aren’t compensated for it. But in Paul’s model, the biggest risk-taker was the facilitator, and he was getting the biggest share of the profits, just as economic theory said he should. If what Paul told me was true, I wondered, could the dark web be creating a better functioning and more efficient drug market?</p>\n<h2>What is the dark web and how does it work?</h2>\n<p>Marketplaces for contraband have existed for only about four years on the dark web, but they’ve made inroads fast. According to the <a href=\"http://www.globaldrugsurvey.com/the-global-drug-survey-2015-findings/\">2015 Global Drug Survey</a>, about 10%-15% of drug users in the UK, US, and Australia have bought drugs off the net.</p>\n<p>These sites don’t show up in search engines and can’t be visited with a regular web browser. You need special software that will obscure the site’s location on the internet (its IP address) and, generally, yours too. For many dark-web sites, that software is Tor, originally developed by the US government to protect intelligence information. And most of the sites conduct business in bitcoin, the cryptocurrency that allows for anonymous online payments.</p>\n<img src=\"https://qzprod.files.wordpress.com/2015/08/detailed-drug-menu.png?w=321\" alt=\"\" title=\"Spoilt for choice.\" /><i class=\"icon-camera\"></i>Spoilt for choice.<span class=\"inline-image-credit\">(Middle Earth)</span><p>“It was the combination of Tor and bitcoin” that sparked the sudden growth of these drug marketplaces, says <a href=\"https://www.andrew.cmu.edu/user/nicolasc/\">Nicolas Christin </a>of Carnegie Mellon University, an expert on the dark web. People may have previously bought or advertised drugs on non-dark websites like Craigslist, he said, but it was a tiny share of the market, with unsophisticated sellers and buyers.</p>\n<p>Silk Road, founded by Ross Ulbricht (a.k.a. “Dread Pirate Roberts”) in February 2011, was the first site to marry Tor and bitcoin to create a bazaar of illegal goods. By the time Silk Road was shut down in October 2013, about 1,000 vendors were selling on the site. Since it shuttered, dozens of new bazaars have sprung up in its place, offering an exhilarating and terrifying array of products: prescription pills, meth, heroin, speed, crack, guns, stolen identities, gold, and erotica.</p>\n<img src=\"https://qzprod.files.wordpress.com/2015/08/middle-earth-menus_colorcorrected.jpeg?quality=80&amp;strip=all&amp;w=640\" alt=\"\" title=\"Beyond drugs, a terrifying variety of contraband.\" /><i class=\"icon-camera\"></i>Beyond drugs, a terrifying variety of contraband.<span class=\"inline-image-credit\">(Middle Earth)</span><p>Shopping on the dark web is easy. Tor works much like a conventional web browser. You simply download it, open it, search for the name of an active market (some require a referral), choose one, create a login, and you are ready to go.</p>\n<img src=\"https://qzprod.files.wordpress.com/2015/08/left-menu-bar.png?w=380\" alt=\"\" title=\"User-friendly.\" /><i class=\"icon-camera\"></i>User-friendly.<span class=\"inline-image-credit\">(Nucleus)</span><p>And aside from their wares, these marketplaces look remarkably similar to their counterparts on the “clearnet”, or regular internet. Users leave detailed reviews on the quality of a vendor’s product, speed of delivery, and how secure the shipping method was. There’s information on where vendors are located and where they’ll ship to. Some even post their refund and exchange policies. The websites are clean, well organized, and easy to navigate; there are icons for online support, shopping carts, and order status. The bitcoin/dollar/euro exchange rate is often featured on a banner, much like a price ticker on a finance website. Purchasing meth from a dealer in the Netherlands feels as familiar and mundane as buying sheets from Macy’s.</p>\n<p>Christin estimates there are about 9,300 different vendors on the dark web. He and his coauthor, Kyle Soska, <a href=\"https://www.andrew.cmu.edu/user/nicolasc/publications/SC-USENIXSec15.pdf\">recently scraped data</a> (pdf) on transactions and prices from 35 different drug bazaars between 2013 to 2015, in order to see how the market had evolved post-Silk Road.</p>\n<p>They observed that most vendors are casual dealers, selling relatively small amounts, and spend only a few months on a site. About 70% of vendors sold less than $1,000 worth of product in the period they surveyed. Only about 2% sold more than $100,000, and just 35 kingpin vendors sold over $1 million. The top 1% accounted for 51.5% of all the transactions. Despite the variety of things on offer, cocaine, MDMA, and cannabis made up about 70% of sales; and while most listings were for cannabis-related products, an overwhelming majority of the revenue came from selling MDMA and cocaine.</p>\n<h2>Where the risk still lies</h2>\n<p>The dark web does make transactions safer. Thanks to the ratings systems, the product is more reliable and both sides are accountable. You can deal anonymously, and you don’t have to meet potentially dangerous clients or vendors in person.</p>\n<p>All the same, of course, there are risks that Macy’s customers don’t run. Because there’s no legal protection for illegal purchases, the bitcoin payments sit in escrow until the goods have been delivered and both parties are satisfied. That exposes the seller<strong> </strong>to exchange-rate risk, because bitcoin is an extremely volatile currency.</p>\n<img src=\"https://qzprod.files.wordpress.com/2015/08/refund-policy1.png?w=640\" alt=\"\" title=\"Satisfaction (almost) guaranteed.\" /><i class=\"icon-camera\"></i>Satisfaction (almost) guaranteed.<span class=\"inline-image-credit\">(East India Company)</span><p>The original Silk Road offered a crude currency-risk hedging option, but most bazaars today don’t. Vendors are reduced to swapping even cruder hedging strategies on Reddit. A moderator of the popular Reddit <a href=\"https://www.reddit.com/r/DarkNetMarkets/\">DarkNetMarket</a> forum, whose handle is Theeconomist1, wrote to me, “Escrow is obviously a big risk vendors undertake. Especially on certain products with thin margins. A fluctuation can easily wipe out a profit.” There is also, Christin says, a non-trivial risk a marketplace will abruptly shut down and its operators will steal the money sitting in escrow.</p>\n<p>Finally, of course, there is one other big source of risk: the point where the virtual world of the dark web and the world of physical reality intersect. In other words, getting drugs delivered.</p>\n<p>That’s why Paul, the dealer I met, gives up 60% of his profits to hedge delivery risk. Another Reddit user, VIadthePutin, <a href=\"https://www.reddit.com/r/DarkNetMarkets/comments/27x2ov/whats_a_drop_address_how_do_you_get_one_and_why/\">described an equally ornate strategy</a> to secure a safe delivery location (called a drop address):</p>\n<blockquote><p>“A drop address needs to be created, cultivated even. A quick run through on how I pick some of my drops:</p>\n<ul><li>I pick a house with no one living in it (but not bank owned)</li>\n<li>Make it look lived in, including mow the lawn, weed the garden, maybe throw a kids toy out there.</li>\n<li>Stop by every day or two for at least a week, preferably two or three. You want the neighbors to have a vague notion of someone living there without being able to pick out your face.</li>\n<li>Get the mail man used to mail coming here, send junk mail to this address (This is where you pick the delivery name) cheap packages, whatever. Be mindful that Amazon mails through UPS and the USPS man won’t know if you’ve had packages delivered. *I stop by every day and put the mail on the counter inside the house, waiting a few days before opening just to allow LEOs [law-enforcement officers] to jump the gun on me.”</li>\n</ul></blockquote>\n<p>VIadthePutin says he works in property management. That makes it feasible for him to cultivate abandoned houses as drug delivery destinations. Most buyers just have the drugs shipped to their homes (especially if it’s a small amount) or to a friend’s house or PO box. A Quartz summer intern said that at his university, different frat houses had agreements to receive each other’s drug shipments.</p>\n<h2>How the dark web could change the drug market…</h2>\n<p>As with many illegal commodities, the drug market does not function efficiently. According to <a href=\"https://data.unodc.org/\">UN data</a> (and as Quartz has <a href=\"http://qz.com/466273/what-illegal-drugs-cost-on-the-dark-web/\">previously reported</a>), huge price disparities exist across borders. Cocaine, for instance, typically costs $63 a gram in the UK and more than $130 in Sweden. There can be large disparities in price within the same country or even the same city. A wide variation in purity is one reason, but so is an ill-functioning market. If drugs were a legal commodity, those price differences would be arbitraged away through trade.</p>\n<div class=\"atlas-chart\"><img src=\"https://atlas.qz.com/i/atlas_4kISXhx5.png\" alt=\"atlas_4kISXhx5.png\" /></div>\n<p>The root cause of this market inefficiency is information asymmetry. You don’t know how good an illegal drug is until you consume it, and you can’t turn to the law to enforce agreements, return a substandard product, or complain to your dealer if he tries to rob you. That prevents price discovery and risk compensation, key features of a well-functioning market.</p>\n<img src=\"https://qzprod.files.wordpress.com/2015/08/feedback.png?w=640\" alt=\"\" title=\"Happy customers.\" /><i class=\"icon-camera\"></i>Happy customers.<span class=\"inline-image-credit\">(Nucleus)</span><p>What makes the dark web a game-changer is that it has those features. Suppliers have detailed reviews on their product, the market is competitive, and people can shop around easily. Aspiring sellers struggle to get a foothold without a history of good reviews; sometimes they offer special deals and an easy exchange policy in return for good reviews. And the markets are global, so it’s possible to see prices in other countries. All this produces a well-behaved <a href=\"http://qz.com/466273/what-illegal-drugs-cost-on-the-dark-web/\">price distribution</a> like the one you’d find in any functional, legal market.</p>\n<p>Well, almost. TheEconomist1 has noticed that some international pricing disparities persist, because shipping internationally is so risky. Many vendors will only ship domestically. He wrote to me:</p>\n<blockquote><p>“The most obvious example is Australia. Their customs is so good and strict, drug loss via shipping is huge. Prices are hugely divergent from the norm. It could be 5-10 times more than prices found elsewhere.”</p></blockquote>\n<p>But there is already some evidence that the dark web’s competitive market is driving down prices. The median price for cannabis today on the dark web is only $7.60 a gram in the US/Canada, which is about 45% lower than what the street price was in 2013, according to UN data. Synthetic drugs are harder to compare in price than cannabis, because of differences in purity. On the dark web vendors are likely to be more up-front about the purity of their product, because the system holds them accountable.</p>\n<h2>…but only certain parts of it</h2>\n<p>At Ulbricht’s trial, his <a href=\"http://www.scribd.com/doc/265886135/Ulbricht-Sentencing-Defense-Letter\">lawyers argued</a> the dark web made drug dealing safer. <a href=\"http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2436643\">Others argued</a> it could make the industry less violent. At the very least it could make the market more efficient. But for it to reduce most of the violence and other risks in the drug trade, the dark web would need to reach a larger market. And despite its impressive growth, both TheEconomist1 and Christin agree that probably won’t happen. Christin says the market’s exponential growth rate is starting to slow as it converges on its natural, relatively small, size.</p>\n<p>The market is limited in the kinds of buyers it can attract. With few exceptions, it cannot serve large distributors, who do not benefit from buying or selling on the web because they have their own existing relationships, methods of quality control, and so on. Delivery of large shipments is also a problem: Christin points out that some dealers have <a href=\"http://motherboard.vice.com/read/the-rise-and-fall-of-shiny-flakes-germanys-online-drug-market\">used unwitting commercial courier services</a> such as DHL, but, he says, “It’s very hard to ship large amounts of drugs and not get caught.” Instead, most buyers on the dark web are either consumers, who use the web as an alternative to buying on the street, or fairly small-time street dealers.</p>\n<p>The market is also limited in the kinds of drugs it can trade effectively. Drugs like heroin and cocaine already have established distribution and production channels that the web in its current form can’t disrupt. Opium poppies and coca leaves are grown in only a few developing countries, and turning those commodities into consumable drugs, transporting them, and distributing them is the domain of large, well-organized, powerful and very profitable cartels who, so far, don’t benefit from participating in dark web markets.</p>\n<img src=\"https://qzprod.files.wordpress.com/2015/08/variety-of-drugs.png?w=1018\" alt=\"\" title=\"Some of these are more suited to the dark web than others.\" /><i class=\"icon-camera\"></i>Some of these are more suited to the dark web than others.<span class=\"inline-image-credit\">(Nucleus)</span><p>But according to the Theeconomist1, “Certain drugs are prime for bulk orders for distro [distribution].” He explains that RC (LSD), alp powder (Xanax) and MDMA thrive on the web because because vendors can participate in their production, and they are easy to ship in bulk. Theeconomist1 speculates that vendors for RC and possibly alp buy the chemicals overseas (often from China), press them into pills, and then sell the final (or intermediate product) on the web.</p>\n<p>The vendors’ role in production may be what drives the relatively high margins on these drugs. It would also explain why, according to the Global Drug Survey and Christin’s research, they are the largest share of the dark-web market. The nature of these particular drugs and their relatively tech-savvy customer base could mean their sales move from being mainly street-based to being mainly online.</p>\n<p>For other sorts of drugs, such as pharmaceuticals, the dark web will not work as a distribution channel for dealers, Theeconomist1 explained to me:</p>\n<blockquote><p>“No way can you buy adderal, oxy, etc on the DNMs [dark net markets] and resell for a profit. Often the street price is better than the DNM price. So for these types of drugs, its going to be mostly end users on the DNMs. This is mainly due to the how these drugs have to be sourced… You have to find a break in the supply chain. Smaller DNM vendors probably buy scripts [prescriptions] off patients, using pill mills as their source. Larger, more sophisticated vendors, find a way to pinch it higher up in the supply chain. Diversion at the suppply chain level is the only way to stock huge quantities.”</p></blockquote>\n<img src=\"https://qzprod.files.wordpress.com/2015/08/screen-shot-2015-09-11-at-10-59-22-am.png?w=606\" alt=\"\" title=\"Counterfeit Xanax! It makes you so happy!\" /><i class=\"icon-camera\"></i>Counterfeit Xanax! It makes you so happy!<span class=\"inline-image-credit\">(Nucleus)</span><p>Similarly, the dark web is ill-suited to drugs like heroin or meth, whose heavily addicted users usually can’t wait the relatively long times—often weeks—it takes from purchase to delivery, nor have the mental energy to deal with bitcoins.</p>\n<p>Drugs used by students and more affluent people are a more natural fit. Quartz’s intern claimed many drugs at his university were sourced on the web. When I was in college, most students bought recreational drugs from fellow students who were both bold and industrious enough to interact with real drug dealers. But the extent of their dealing was limited to other students and not very profitable. Now that kid down the hall who deals drugs may get his supply online instead of braving the in-person market.</p>\n<h2>The future</h2>\n<p>In short, the web will probably not alter the entire market. At most it will further segment it. Certain drugs like MDMA may move mostly online. And the web may be the preferred source for affluent users and small-time pot dealers.</p>\n<p>Prostitution went through a similar transition in the early 2000s. Most sex workers in the middle and high end of the range no longer work with pimps or madams, because they can advertise for themselves online. This increased the number of providers and lowered prices. But at the lower end (streetwalkers) and the very high end (escorts), the market still functions more or less as it has for millennia.</p>\n<p>Still, the dark web’s present size reflects the current state of technology. New innovation normally catches on with more affluent and sophisticated users first, then trickles down as it becomes more user-friendly. It was hard to imagine the widespread use of smartphones when mobile phones were only used by Wall Street types in the 1980s. Likewise, we cannot predict how the dark web will evolve. If drones, already being used by drug dealers, become more common, it may mitigate shipping risk. Payment technology and mobile could also evolve in ways we can’t predict. In that case even your average junkie may end up using the web, and your neighbor may be running a cartel one day.</p>\n<p><em><a></a><strong>Correction:</strong> An earlier version of this piece said the price of cocaine in the UK was $63 an ounce, rather than a gram.</em></p>\n			\n		',1),(65,'The new art of war: How trolls, hackers and spies are rewriting the rules of conflict','http://toinformistoinfluence.com/2015/09/15/the-new-art-of-war-how-trolls-hackers-and-spies-are-rewriting-the-rules-of-conflict/',0,0,'\n\n		<p>It is nice to read an article that rolls cyber into information warfare.</p>\n<p>Cyber is not done for cyber’s sake, although almost the entire cyber community thinks in those terms – never adventuring outside their comfort zone.</p>\n<p>This article reminds one that it is all about the information.</p>\n<p>Nice quote by Margarita Jaitner, at the end. She gets it.</p>\n<hr /><p>By <a class=\"author\" href=\"http://www.techrepublic.com/search/?q=steve+ranger\">Steve Ranger</a></p>\n<p>Wandering the pretty, medieval streets of Tallinn’s old town, it is hard to believe that the tiny country of Estonia has anything at all to do with cyberwarfare. But first as victim of an attack and now as home to some of the leading thinkers on how the digital battlefield will develop, the country has played a key role in its emergence and evolution.</p>\n<p>Estonia is a country of around 1.3 million people, facing the Baltic Sea and the Gulf of Finland, it borders Latvia to the south and Russia to the east. After decades as part of the Soviet Union, it regained independence in 1991.</p>\n<p>Even today reminders of the Soviet times still abound in the capital Tallinn. There’s a museum in one of the big downtown hotels showing how the KGB would bug the rooms of foreign guests.</p>\n<p>But Estonia does not intend to be defined by its past, but is instead intent on creating the most advanced digital state on the planet. Since independence, Estonia has invested heavily in digital services. It leads the way with internet voting—in the 2011 election nearly a quarter of voters cast their ballots that way—and electronic tax filing, all underpinned by a nationwide digital signature infrastructure.</p>\n<p>Today, you can even become an Estonian e-resident regardless of where you live in the world so you can use that same infrastructure to electronically sign contracts or set up your own company in the country.</p>\n<p>But being so reliant on the internet carries a risk, as the country found out in 2007.</p>\n<p>Plans by Estonian authorities to move a Soviet war memorial sparked a wave of website defacements and denial of service attacks in the country over a three week period, throwing Estonia’s government services, newspapers, and businesses offline. The attacks temporarily disabled the websites of banks, ministries and political parties. Many pointed the finger at Russian hackers (Russia denied any involvement in the incident) but the events demonstrated how a purely digital attack on a state could have real-world consequences.</p>\n<p>The Tallinn Manual<br />While the impact of the attacks can be overstated—”inconvenient, not cyberwar” is how one local described it—it accelerated plans, already in place, to set up a NATO cyber defence think-tank in the country.</p>\n<p>The Cooperative Cyber Defence Centre of Excellence (CDCOE) was established the year after the attacks took place as an institution created to figure out how to improve the digital defences of NATO members and what cyberwarfare would actually look like.</p>\n<blockquote><p>“Our view is that cyber is another operational domain, much as the seas are, much as the land is, much as space is.”<br />Admiral Mike Rogers</p></blockquote>\n<p>As well as the cyber defence exercises it conducts annually, probably the centre’s most important work so far appeared in 2013: the Tallinn Manual on the International Law Applicable to Cyber Warfare, known simply as the Tallinn Manual.</p>\n<p>While there is no international law that directly refers to the ultra-modern concept of cyber warfare, there are plenty that applies. So CDCOE assembled a panel of international legal experts to go through this existing law and show how it applies to cyber warfare.This formed the basis of the Tallinn Manual and the 95 so-called ‘black letter rules’ it contains (so named because that’s how they appear in the text).</p>\n<p>Through these rules the manual attempts to define some of the basics of cyber warfare. At the most fundamental level, the rules states that an online attack on a state can, in certain circumstances, be the equivalent of an armed attack. It also lays out that such an attack is against international law, and that a state attacked in such a way has the right to hit back.</p>\n<p>Other rules the manual spells out: don’t target civilians or launch indiscriminate attacks that could cripple civilian infrastructure. While many of these sorts of rules are well understood when it comes to standard warfare, setting it out in the context of digital warfare was groundbreaking.</p>\n<p>While the manual argues that a cyber attack can be considered to be the equivalent of an armed attack if it causes physical harm to people or property, other attacks can also be considered a use of force depending on their severity or impact. For example, breaking into a military system would be more likely to be seen as serious, as opposed to hacking into a small business. In contrast, cyber attacks that generate “mere inconvenience or irritation” would never be considered to be a use of force.<br />Image: iStock<br />The manual also delves into some of the trickier questions of cyber war: would Country A be justified in launching a pre-emptive military strike against a Country B if it knew Country B planned to blow up Country A’s main oil pipeline by hacking the microcontrollers managing its pipeline pressure? (Answer: probably yes.)</p>\n<p>The manual even considers the legality of some scenarios verging on the science-fictional.</p>\n<p>If an army hacked into and took control of enemy drones, would those drones have to be grounded and marked with the capturers insignia before being allowed to carry out reconnaissance flights? (Answer: maybe.)</p>\n<p>But what’s striking is that the Tallinn Manual sets the rules for a war that hasn’t been fought yet.</p>\n<p>No Digital Pearl Harbour<br />Although nearly every state around the globe has been developing a cyber warfare strategy, and some have been building up skills and perhaps even stockpiles of digital weapons, there haven’t been any digital attacks that have crossed the thresholds of armed attack as defined by the Tallinn Manual. No massed bot armies, no hackers blowing up power stations from their bedrooms.</p>\n<p>Perhaps the closest was the use of the Stuxnet worm (most likely by the US) as part of a bid to derail the Iranian nuclear programme. By contrast, the attacks on Estonia itself would, for all the excitement around them, be towards the inconvenience and irritation end of the spectrum.</p>\n<p>The Tallinn Manual doesn’t say much about the reality of the cut-and-thrust of the modern internet, where state-sponsored hackers, spies, and more are constantly probing the systems of other nations. This is a shadowy world where it is often unclear who the attackers are and what their intentions are (and just what the motivations of their backers is, too). It’s a world filled with misleading evidence, ambiguity and deniability.</p>\n<p>Throughout history, states have used third parties and proxies to get their dirty work done. The difference is that by hacking into systems in countries across the world, these groups can have an impact far from their home territories.</p>\n<img src=\"http://tr4.cbsistatic.com/hub/i/r/2015/09/15/7b2d919b-08c6-4995-bf7b-fa6e4be4ab90/resize/620x485/94a82f322e479a467f2ab2a4c675fadd/img4683.jpg\" alt=\"\" width=\"424\" height=\"285\" />Colonel Artuz Suzik speaking at the CCDCOE conference Image: Estonian Defence Forces<p>On the subject of such attacks—which can be extremely serious but never quite reach the level of an actual attack by force—the manual has little to say. However, these kinds of attacks are the ones that take place every single day. Cyberwar has become the continuation of politics by digital means.</p>\n<p>“The scope of cyber attacks is very, very wide, so that’s why with the first Tallinn Manual we took the most severe case of armed attack and the use of force,” explains Colonel Artur Suzik, the director of CCDCOE until August 2015. “But the majority of cyber incidents nation states face occur outside of the conflict law, so there was a clear need to expand the legal analysis to this area.”</p>\n<p>That doesn’t mean the manual is a failure, or irrelevant. Indeed, it may even be that by making clear that digital attacks are covered by an array of existing international law, the Tallinn Manual has forced countries to rethink their approaches to cyber warfare. That is, because the manual does a good job of defining just what kinds of attack might lead to a missile being lobbed in your direction, states launching hacking attacks have been careful to keep their operations (just) below that threshold, say experts.</p>\n<p>An expanded Tallinn Manual 2.0 is due to be published next year looking at how international law addresses malicious cyber operations by state (and non-state) actors during peacetime.</p>\n<p>The new manual will try to create the same ‘black letter rules’ around much trickier concepts, such as when countries are responsible for hostile cyber operations launched against other states from their territory, and when such operations violate the sovereignty of the state.</p>\n<p>It will take the analysis into the much complicated and murky environment of the day-to-day cyber attacks that don’t ever reach the level of physical attacks, but are no less dangerous for it.</p>\n<p>Few, for example, could have imagined a couple of years ago that a hacking attack against a film studio could lead to an international incident, or that the theft of HR records from the obscure Office of Personnel Management could create such consternation.</p>\n<p>Politicians and diplomats are still struggling to work out how to deal with the near-constant stream of other data leaks from all sorts of government agencies that are blamed on state-sponsored hackers. And there is little in the way of consensus on how to deal with it or often even how to label it. When does hacking become espionage and when does that evolve into something that could escalate into the use of armed force?</p>\n<blockquote><p>“NATO doesn’t have any interest [in militarising] cyberspace.”<br />Sorin Ducaru</p></blockquote>\n<p>And while many industry watchers saw the attacks on Estonia and built out of that lurid ‘Digital Pearl Harbour’ style scenarios where a country could be toppled by a digital attack launched by a dedicated few, this has not taken place. The reality has turned out to be less far less dramatic, but much more complicated to tackle.</p>\n<p>That’s not to say that the apocalyptic scenario of state-backed hackers causing mayhem by breaking into industrial control systems (the technology that runs power stations or chemical plants) is utterly impossible – just extremely unlikely, and extremely hard and extremely expensive. Cyberwar, as it was envisaged, has not taken place.</p>\n<p>But it’s entirely possible that by watching and waiting for a explosive Hollywood-style catastrophe that we’ve missed the much more insidious and protracted cyberwar that has been going on for years already.</p>\n<p>Hybrid information war<br />Earlier this year, the cyber think-tank held a conference to bring together some of the biggest thinkers on cyber warfare in Tallinn to discuss the most recent developments in cyber war theory ahead of the publication of the new Tallinn Manual at an event called CyCon.</p>\n<p>For what was effectively a technology conference, there were a lot of people in uniform. In attendance was not only the head of the NSA, Admiral Mike Rogers, but also the Assistant Secretary General of NATO, Sorin Ducaru, reflecting the level of concern around cyber defence among the allies.</p>\n<p>Despite the subject matter, it wasn’t all serious. Speakers, including surveillance chief Admiral Rogers, were presented on-stage with a thank you present of a mug with an ear for a handle.)</p>\n<p>Both men reflected a cautious, slowly-developing approach when it comes to the use of the internet by the military. NATO itself, for example, only recently decided that a major digital attack on a member state could be covered by Article 5 of its collective defence clause (one of the most fundamental tenets of NATO, that an armed attack on one member should be considered an armed attack on them all). And, Ducaru insisted, “NATO doesn’t have any interest [in militarising] cyberspace or to have an ungoverned space.”</p>\n<p>Rogers emphasised that the use of the internet by the US military is still evolving, with defence the priority. “Our view is that cyber is another operational domain, much as the seas are, much as the land is, much as space is, and increasingly, it is an environment in which we will conduct a series of very traditional military evolutions from the defensive things to the application of capabilities to generate specific kinds of effects,” he said. “We think cyber will evolve over time, much as we’ve seen the other domains, in the more traditional arenas.”</p>\n<img src=\"http://tr4.cbsistatic.com/hub/i/r/2015/09/14/31e78350-3364-4d5b-a543-0aba532a2bed/resize/620x485/7e20dc82f3f44c6955bace1b2670550c/admiralrogers.jpg\" alt=\"\" width=\"422\" height=\"284\" />NSA chief Admiral Mike Rogers speaking at CyCon Image: Estonian Defence Forces<p>To put it another way: cyberwarfare models are maturing in the same way that other technologies mature. To take a more prosaic example, the evolution of cyberwarfare is a lot like the cycle e-commerce went through. There was a lot of initial excitement and investment from retailers in building seperate e-commerce operations or businesse, but gradually these became not just a standard part of their operation but for many retailers the core of their business, just as cyberwarfare planning and strategy is gradually becoming a part of mainstream military planning.</p>\n<p>However that doesn’t mean that all countries are taking the same approach to strategy or that they even agree on what should be included in the term cyberwarfare. Some countries have a very narrow model of what cyberwarfare should look like – that is should focus on hacking and damaging systems. Others see it as just one part of a much wider information warfare spectrum which stretches from hacking to disinformation and propoganda. Indeed,much of the criticism of the Tallinn Manual has been around how it represents a NATO—and specifically Western—outlook on what cyberwarfare should look like.</p>\n<p>Across the street from the hotel where the conference took place stands a building topped with a Soviet star, a reminder of Estonia’s past and, unsurprisingly given the location and the ongoing conflict in Ukraine, understanding the cyberwarfare strategy of Estonia’s big neighbour was a recurring theme.</p>\n<p>And while NATO is thinking of cyberwarfare in terms of defending (and attacking) networks, others—particularly Russia, according to speakers at the conference—have developed a wider perspective that folds classic hacker tools into the broader concept of information warfare, which can stretch all the way from propaganda and disinformation through to the more expected denial of service attacks and more.</p>\n<p>Speaking at a conference session, Keir Giles of the Conflict Studies Research Centre crystalised it thus: “There is now a developing realization that pure cybersecurity and cyberdefence is not sufficient to counter an enemy thinking in much broader terms.”</p>\n<p>Richard Bejtlich of the US Brookings Institution think-tank said that when it comes to cyberwar and cyberdefence, the NATO emphasis is still on software. “The Chinese and Russia have a broader concept,” he said.</p>\n<p>For example there was limited use of cyberwarfare—like hacking and denial of service—during the hostilities in Ukraine, even though many analysts were expecting more. Was it that cyberwar didn’t happen, or that it simply didn’t look quite how western observers were expecting it to?</p>\n<p>“There are number of reasons why it doesn’t look the way people were expecting when the Ukraine conflict first started. Cyber-armageddon was promised but hasn’t happened,” Bejtlich said. “All of the cyberactivity is purely a facilitator for broader information warfare ends.”</p>\n<p>All of this means that cyberwarfare isn’t just—or perhaps even primarily—about breaking stuff anymore.</p>\n<p>Indeed, protecting your networks will not protect you from cyberwar but may even leave you more open to it because those networks are exactly how your opponent will want to deliver its messages, its themes, its memes to their targets.</p>\n<p>As Professor Francois Gere of the French Institute of Strategic Analysis pointed out: “That’s some kind of paradox: if you want to dispatch propaganda and disinformation you cannot totally disrupt the communications devices of your adversary, so the internet must remain relatively safe and accessible.”</p>\n<p>Instead of a being characterised by the delivery of an elegantly crafted digital weapon like Stuxnet, it seems that for some countries, cyberwarfare is becoming just one part of a continuum with includes the much wider concept of hybrid information war. That includes subtle disinformation and overt propaganda along with more traditional options like denial of service or website defacement.</p>\n<p>As such, rather than just worrying about denial of service we should start to worry more about denial of reality. The rise of ‘ troll armies’ is well documented: bloggers paid to promote a pro-government agenda, making it harder for critics to be heard. This is well documented in Russia and China but also seems to be spreading further around the globe.</p>\n<p>This much broader definition of ‘information warfare’ is much harder to tackle, especially as none of it would rise to the level of the use of force as defined by the Tallinn Manual. It’s hard to stop a denial of service attack against a bank; it’s much harder still to deal with a flood of rumours spread across social networks that the bank is running out of money.</p>\n<blockquote><p>“There is now a developing realization that pure cybersecurity and cyberdefence is not sufficient to counter an enemy thinking in much broader terms.”<br />Keir Giles</p></blockquote>\n<p>In some respects this is harnessing the nature of the internet, a space where free speech, doubt, and scepticism can run wild. Fighting an army of online trolls sharing half-truths or outright lies in order to confuse the public and make it harder for politicians to make decisions is hard, and certainly not one that any existing army can deal with.</p>\n<p>Few democratic nations will want to limit the free flow of information to the public but also aren’t set up to—or are capable of—rebutting every crazy rumour which makes it a hard technique to combat. But if a nation can orchestrate a campaign of rumour and disinformation against another that changes public opinion in that country to the point that it alters the decisions made by its political leaders, then an army of trolls could be vastly more useful, and harder to fight, than a squadron of tanks.</p>\n<p>Few democratic countries would want to wage war in such a way, but tackling it without undermining, for example, the freedom of speech which the public are used to is a challenge which they are currently ill-equipped to deal with. However, some are taking gradual steps in this direction. For example, the UK government recently started a Twitter account aimed at countering online propaganda from ISIL.</p>\n<p>The next version of the the Tallinn Manual is due in 2016, and will make it clearer just how international law applies to cyber attacks which don’t reach the level of physical attacks. It may be that providing a legal framework for this extremely murky environment will actually reduce some of the attacks we’re currently seeing. But what is clear is that, overtly or covertly, the internet is now another battlefield, even if it often hard to discern it as such.</p>\n<p>Or, as Margarita Jaitner of the Swedish Defence Academy told the conference: perhaps we have run an “information operation” on ourselves, tricking ourselves into thinking we would see some “breaking things armageddon” but completely missed the part about “what does it do to society, what does it do to our impression of what is going on, and how does it fog our picture of the events, and how does it stop us from acting or reacting?”</p>\n<p>Perhaps the greatest success of cyberwarfare so far is to convince the world that it hasn’t really started yet.</p>\n<p>About Steve Ranger<br />Steve Ranger is the UK editor of TechRepublic, and has been writing about the impact of technology on people, business and culture for more than a decade. Before joining TechRepublic he was the editor of silicon.com.</p>\n<p>Source: <a href=\"http://www.techrepublic.com/article/the-new-art-of-war-how-trolls-hackers-and-spies-are-rewriting-the-rules-of-conflict/\">http://www.techrepublic.com/article/the-new-art-of-war-how-trolls-hackers-and-spies-are-rewriting-the-rules-of-conflict/</a></p>\n		<div class=\"wpcnt\">\n			<div class=\"wpa wpmrec\">\n				<a class=\"wpa-about\" href=\"https://wordpress.com/about-these-ads/\"></a>\n				<div class=\"u\">\n					</div>\n			</div>\n		</div><div class=\"sharedaddy sd-rating-enabled sd-like-enabled sd-sharing-enabled\"><div class=\"sharedaddy sd-sharing-enabled\"><div class=\"robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing\"><h3 class=\"sd-title\">Share this:</h3></div></div><div class=\"sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded\"><h3 class=\"sd-title\">Like this:</h3><div class=\"likes-widget-placeholder post-likes-widget-placeholder\"><span class=\"button\"><span>Like</span></span> <span class=\"loading\">Loading...</span></div><span class=\"sd-text-color\"></span><a class=\"sd-link-color\"></a></div>\n</div>\n				',1),(66,'The Math I Learned After I Thought Had Already Learned Math','http://blog.mrmeyer.com/2015/the-math-i-learned-after-i-thought-had-already-learned-math/',0,0,'\n					<p>True story: it’s possible to <em>fly</em> through your own secondary math education – honor roll bumper sticker on your mom’s minivan and all – but miss some of the Very Big Ideas of secondary math.</p>\n<p>For one example: in <a href=\"http://blog.mrmeyer.com/2015/if-simplifying-rational-expressions-is-aspirin-then-how-do-you-create-the-headache/\">our last post on simplifying rational expressions</a>, the process of turning a lengthy rational expression into a simpler one, <a href=\"http://blog.mrmeyer.com/2015/if-simplifying-rational-expressions-is-aspirin-then-how-do-you-create-the-headache/comment-page-1/#comment-2409318\">Bill F writes</a>:</p>\n<blockquote><p>Another benefit of evaluating both expressions for a set of values is to emphasize the equivalence of both expressions. Students lose the thread that simplifying creates equivalent expressions. All too often the process is seen as a bunch-of-math-steps-that-the-teacher-tells-us-to-do. When asked, “what did those steps accomplish?” blank stares are often seen.</p></blockquote>\n<p>Past a certain point, those operations are trivial. But it’s only past a point much farther in the distance that the <em>understanding</em> – these two rational expressions are <em>equivalent</em> – becomes trivial.</p>\n<p>For another example: I left high school adept at graphing functions. I could complete the square and change forms easily. I knew how to identify the asymptotes, holes, and limiting behavior of those thorny rational expressions. But it wasn’t until I had graduated university math and was several years into <em>teaching</em> that I really, really understood that the graph is a picture of all the points that make the function <em>true</em>. This was difficult for me because graphs don’t often <em>look</em> like a bunch of points. They look like a <em>line</em></p>\n<p>That’s one reason I’m excited about <a href=\"http://teacher.desmos.com/activitybuilder\">the Desmos Activity Builder</a> and this activity I made in it last week, <a href=\"https://student.desmos.com/?prepopulateCode=xffk\">Loco for Loci</a>!</p>\n<p>It asks students to place a point anywhere on a graph so that it makes a particular relationship <em>true</em>. Then it asks the students to imagine what <em>all of our points</em> would look like if we pictured them on the same graph. Then the teacher can show the results, underscoring this Very Big Idea that I didn’t fully appreciate my first time through high school – what we eventually think of as a continuous line is a picture of lots and lots of points.</p>\n<p>Here is what happened when 300 people on Twitter played along:</p>\n<p>“Drag the green point so that it’s the same distance from both blue points.”</p>\n<p><a href=\"http://blog.mrmeyer.com/wp-content/uploads/150811_1hi.png\"><img src=\"http://blog.mrmeyer.com/wp-content/uploads/150811_1lo-1024x890.png\" alt=\"150811_1lo\" width=\"500\" class=\"aligncenter size-large wp-image-23603\" /></a></p>\n<p>Trickier: “Drag the green point so that it’s five units from both blue points.”</p>\n<p><a href=\"http://blog.mrmeyer.com/wp-content/uploads/150811_2hi.png\"><img src=\"http://blog.mrmeyer.com/wp-content/uploads/150811_2lo-1024x885.png\" alt=\"150811_2lo\" width=\"500\" class=\"aligncenter size-large wp-image-23601\" /></a></p>\n<p>Whimsical: “Drag the green point so it is the same distance from a) the line of dinosaurs and b) the big dinosaur.” I really couldn’t have hoped for better here.</p>\n<p><a href=\"http://blog.mrmeyer.com/wp-content/uploads/150811_3hi.png\"><img src=\"http://blog.mrmeyer.com/wp-content/uploads/150811_3lo-1024x652.png\" alt=\"150811_3lo\" width=\"500\" class=\"aligncenter size-large wp-image-23599\" /></a></p>\n<p>And then a couple of very interesting misfires.</p>\n<p>“Drag the green point so that it’s four units from the blue point.”</p>\n<p><a href=\"http://blog.mrmeyer.com/wp-content/uploads/150811_5hi.png\"><img src=\"http://blog.mrmeyer.com/wp-content/uploads/150811_5lo-1024x888.png\" alt=\"150811_5lo\" width=\"500\" class=\"aligncenter size-large wp-image-23595\" /></a></p>\n<p>“Drag the green point so that a line segment is formed with a slope of .5.”</p>\n<p><a href=\"http://blog.mrmeyer.com/wp-content/uploads/150811_4hi.png\"><img src=\"http://blog.mrmeyer.com/wp-content/uploads/150811_4lo-1024x888.png\" alt=\"150811_4lo\" width=\"500\" class=\"aligncenter size-large wp-image-23597\" /></a></p>\n<p>You could run a semester-long master’s seminar on the misconceptions in that last graph.</p>\n<p>Well.</p>\n<p>Maybe more like ten quick seconds at the start of your Algebra class.</p>\n<p>If you’d like to run this activity with your own students, here is <a href=\"https://teacher.desmos.com/activitybuilder/custom/55c368cb6f0091a533ff7fd0\">the teacher link</a>.</p>\n<p><strong>Questions for the Comments</strong></p>\n<ul><li>Obviously, I didn’t invite hyperbolas and ellipses to the party. Which other loci should have received the same treatment?</li>\n<li>Which Very Big Ideas did you only fully understand once you started math teaching?</li>\n</ul><p><strong>Featured Comment</strong></p>\n<p><a href=\"http://blog.mrmeyer.com/2015/the-math-i-learned-after-i-thought-had-already-learned-math/comment-page-1/#comment-2409839\">Jason Dyer</a>:</p>\n<blockquote><p>I find this sort of gap fascinating [my inability to conceive of graphs as a picture of solutions –<strong>dm</strong>] especially because it is likely somewhere along the line you were at least told this fact (you might even be able to track exactly where). But it still didn’t stick! It’s as if being told just isn’t enough.</p></blockquote>\n<p><a href=\"http://blog.mrmeyer.com/2015/the-math-i-learned-after-i-thought-had-already-learned-math/comment-page-1/#comment-2409864\">Bowen Kerins</a>:</p>\n<blockquote><p>The description you give about graphs is something we have to hit early and often in CME Project, it’s one of the top 3 things to learn in the entire curriculum. It’s amazing how that can get lost in the shuffle, but it does, and where it gets lost is the algorithmic way of graphing a function or equation: the A does this, the B does that, etc — all of this ignores the deeper fact that under the hood, this is all a relationship between two variables x and y.</p></blockquote>\n<p>The other two of Bowen’s top three things to learn in Algebra, <a href=\"https://twitter.com/bowenkerins/status/631248340190105600\">according to Bowen on Twitter</a>, are:</p>\n<ul><li>Variables represent numbers, so test numbers to test ideas and build equations.</li>\n<li>Rules for new stuff should respect existing rules.</li>\n</ul><p><strong>Featured Tweets</strong></p>\n<p>Amazing, all the people <a href=\"https://twitter.com/ddmeyer/status/631161953889599488\">unburdening themselves on Twitter</a> of math they only understood once they began teaching. <em>What does it all mean?</em></p>\n									',1),(67,'Introduction to Monte Carlo Tree Search','http://jeffbradberry.com/posts/2015/09/intro-to-monte-carlo-tree-search/',0,0,'\n      <p>The subject of game AI generally begins with so-called <em>perfect\ninformation</em> games.  These are turn-based games where the players have\nno information hidden from each other and there is no element of\nchance in the game mechanics (such as by rolling dice or drawing cards\nfrom a shuffled deck).  Tic Tac Toe, Connect 4, Checkers, Reversi,\nChess, and Go are all games of this type.  Because everything in this\ntype of game is fully determined, a tree can, in theory, be\nconstructed that contains all possible outcomes, and a value assigned\ncorresponding to a win or a loss for one of the players.  Finding the\nbest possible play, then, is a matter of doing a search on the tree,\nwith the method of choice at each level alternating between picking\nthe maximum value and picking the minimum value, matching the\ndifferent players\' conflicting goals, as the search proceeds down the\ntree.  This algorithm is called <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Minimax\">Minimax</a>.</p>\n<p>The problem with Minimax, though, is that it can take an impractical\namount of time to do a full search of the game tree.  This is\nparticularly true for games with a high <em>branching factor</em>, or high\naverage number of available moves per turn.  This is because the basic\nversion of Minimax needs to search all of the nodes in the tree to\nfind the optimal solution, and the number of nodes in the tree that\nmust be checked grows exponentially with the branching factor.  There\nare methods of mitigating this problem, such as searching only to a\nlimited number of moves ahead (or <em>ply</em>) and then using an <em>evaluation\nfunction</em> to estimate the value of the position, or by <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning\">pruning</a> branches\nto be searched if they are unlikely to be worthwhile.  Many of these\ntechniques, though, require encoding domain knowledge about the game,\nwhich may be difficult to gather or formulate.  And while such methods\nhave produced Chess programs capable of defeating grandmasters,\nsimilar success in Go has been elusive, particularly for programs\nplaying on the full 19x19 board.</p>\n<p>However, there is a game AI technique that does do well for games with\na high branching factor and has come to dominate the field of Go\nplaying programs.  It is easy to create a basic implementation of this\nalgorithm that will give good results for games with a smaller\nbranching factor, and relatively simple adaptations can build on it\nand improve it for games like Chess or Go.  It can be configured to\nstop after any desired amount of time, with longer times resulting in\nstronger game play.  Since it doesn\'t necessarily require\ngame-specific knowledge, it can be used for <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/General_game_playing\">general game playing</a>.  It may even\nbe adaptable to games that incorporate randomness in the rules.  This\ntechnique is called Monte Carlo Tree Search.  In this article I will\ndescribe how <abbr title=\"Monte Carlo Tree Search\">MCTS</abbr> works,\nspecifically a variant called Upper Confidence bound applied to Trees\n(<abbr title=\"Upper Confidence bound applied to Trees\">UCT</abbr>), and then will\nshow you how to build a basic implementation in Python.</p>\n<p>Imagine, if you will, that you are faced with a row of slot machines,\neach with different payout probabilities and amounts.  As a rational\nperson (if you are going to play them at all), you would prefer to use\na strategy that will allow you to maximize your net gain.  But how can\nyou do that?  For whatever reason, there is no one nearby, so you\ncan\'t watch someone else play for a while to gain information about\nwhich is the best machine.  Clearly, your strategy is going to have to\nbalance playing all of the machines to gather that information\nyourself, with concentrating your plays on the observed best machine.\nOne strategy, called <abbr title=\"Upper Confidence Bound 1\">UCB1</abbr>, does\nthis by constructing statistical <em>confidence intervals</em> for each\nmachine</p>\n<p>\n\\begin{equation*}\n\\bar{x}_i \\pm \\sqrt{\\frac{2 \\ln n}{n_i}}\n\\end{equation*}\n</p>\n<p>where:</p>\n<ul class=\"simple\"><li><span class=\"math\">\\(\\bar{x}_i\\)</span>: the mean payout for machine <span class=\"math\">\\(i\\)</span></li>\n<li><span class=\"math\">\\(n_i\\)</span>: the number of plays of machine <span class=\"math\">\\(i\\)</span></li>\n<li><span class=\"math\">\\(n\\)</span>: the total number of plays</li>\n</ul><p>Then, your strategy is to pick the machine with the highest upper\nbound each time.  As you do so, the observed mean value for that\nmachine will shift and its confidence interval will become narrower,\nbut all of the other machines\' intervals will widen.  Eventually, one\nof the other machines will have an upper bound that exceeds that of\nyour current one, and you will switch to that one.  This strategy has\nthe property that your <em>regret</em>, the difference between what you would\nhave won by playing solely on the actual best slot machine and your\nexpected winnings under the strategy that you do use, grows only as\n<span class=\"math\">\\(\\mathcal{O}(\\ln n)\\)</span>.  This is the same <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Big_O_notation\">big-O</a> growth rate as the\ntheoretical best for this problem (referred to as the <em>multi-armed\nbandit problem</em>), and has the additional benefit of being easy to\ncalculate.</p>\n<p>And here\'s how Monte Carlo comes in.  In a standard Monte Carlo\nprocess, a large number of random simulations are run, in this case,\nfrom the board position that you want to find the best move for.\nStatistics are kept for each possible move from this starting state,\nand then the move with the best overall results is returned.  The\ndownside to this method, though, is that for any given turn in the\nsimulation, there may be many possible moves, but only one or two that\nare good.  If a random move is chosen each turn, it becomes extremely\nunlikely that the simulation will hit upon the best path forward.  So,\nUCT has been proposed as an enhancement.  The idea is this: any given\nboard position can be considered a multi-armed bandit problem, if\nstatistics are available for all of the positions that are only one\nmove away.  So instead of doing many purely random simulations, UCT\nworks by doing many multi-phase <em>playouts</em>.</p>\n<div class=\"figure align-left\">\n<img alt=\"Selection\" src=\"http://jeffbradberry.com/images/mcts_selection.png\" /><p class=\"caption\">Selection</p>\n<p>\nHere the positions and moves selected by the UCB1 algorithm at each\nstep are marked in bold.  Note that a number of playouts have\nalready been run to accumulate the statistics shown.  Each circle\ncontains the number of wins / number of times played.</p>\n</div>\n<p class=\"group\">The first phase, <em>selection</em>, lasts while you have the statistics\nnecessary to treat each position you reach as a multi-armed bandit\nproblem.  The move to use, then, would be chosen by the UCB1 algorithm\ninstead of randomly, and applied to obtain the next position to be\nconsidered.  Selection would then proceed until you reach a position\nwhere not all of the child positions have statistics recorded.</p>\n<div class=\"figure align-right\">\n<img alt=\"Expansion\" src=\"http://jeffbradberry.com/images/mcts_expansion.png\" /><p class=\"caption\">Expansion</p>\n<p>\nThe position marked 1/1 at the bottom of the tree has no further\nstatistics records under it, so we choose a random move and add a\nnew record for it (bold), initialized to 0/0.</p>\n</div>\n<p class=\"group\">The second phase, <em>expansion</em>, occurs when you can no longer apply\nUCB1.  An unvisited child position is randomly chosen, and a new\nrecord node is added to the tree of statistics.</p>\n<div class=\"figure align-left\">\n<img alt=\"Simulation\" src=\"http://jeffbradberry.com/images/mcts_simulation.png\" /><p class=\"caption\">Simulation</p>\n<p>\nOnce the new record is added, the Monte Carlo simulation begins,\nhere depicted with a dashed arrow.  Moves in the simulation may be\ncompletely random, or may use calculations to weight the randomness\nin favor of moves that may be better.</p>\n</div>\n<p class=\"group\">After expansion occurs, the remainder of the playout is in phase 3,\n<em>simulation</em>.  This is done as a typical Monte Carlo simulation,\neither purely random or with some simple weighting heuristics if a\n<em>light playout</em> is desired, or by using some computationally expensive\nheuristics and evaluations for a <em>heavy playout</em>.  For games with a\nlower branching factor, a light playout can give good results.</p>\n<div class=\"group figure align-right\">\n<img alt=\"Back-propagation\" src=\"http://jeffbradberry.com/images/mcts_backprop.png\" /><p class=\"caption\">Back-Propagation</p>\n<p>\nAfter the simulation reaches an end, all of the records in the path\ntaken are updated.  Each has its play count incremented by one, and\neach that matches the winner has its win count incremented by one,\nhere shown by the bolded numbers.</p>\n</div>\n<p class=\"group\">Finally, the fourth phase is the <em>update</em> or <em>back-propagation</em> phase.\nThis occurs when the playout reaches the end of the game.  All of the\npositions visited during this playout have their play count\nincremented, and if the player for that position won the playout, the\nwin count is also incremented.</p>\n<p>This algorithm may be configured to stop after any desired length of\ntime, or on some other condition.  As more and more playouts are run,\nthe tree of statistics grows in memory and the move that will finally\nbe chosen will converge towards the actual optimal play, though that\nmay take a very long time, depending on the game.</p>\n<p>For more details about the mathematics of UCB1 and UCT, see\n<a class=\"reference external\" href=\"http://homes.di.unimi.it/~cesabian/Pubblicazioni/ml-02.pdf\">Finite-time Analysis of the Multiarmed Bandit Problem</a> and\n<a class=\"reference external\" href=\"https://www.lri.fr/~sebag/Examens_2008/UCT_ecml06.pdf\">Bandit based Monte-Carlo Planning</a>.</p>\n<p>Now let\'s see some code.  To separate concerns, we\'re going to need a\n<tt class=\"docutils literal\">Board</tt> class, whose purpose is to encapsulate the rules of a game\nand which will care nothing about the AI, and a <tt class=\"docutils literal\">MonteCarlo</tt> class,\nwhich will only care about the AI algorithm and will query into the\n<tt class=\"docutils literal\">Board</tt> object in order to obtain information about the game.  Let\'s\nassume a <tt class=\"docutils literal\">Board</tt> class supporting this interface:</p>\n<div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Board</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c\"># Returns a representation of the starting state of the game.</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">current_player</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">):</span>\n        <span class=\"c\"># Takes the game state and returns the current player\'s</span>\n        <span class=\"c\"># number.</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">next_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">play</span><span class=\"p\">):</span>\n        <span class=\"c\"># Takes the game state, and the move to be applied.</span>\n        <span class=\"c\"># Returns the new game state.</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">legal_plays</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state_history</span><span class=\"p\">):</span>\n        <span class=\"c\"># Takes a sequence of game states representing the full</span>\n        <span class=\"c\"># game history, and returns the full list of moves that</span>\n        <span class=\"c\"># are legal plays for the current player.</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">winner</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state_history</span><span class=\"p\">):</span>\n        <span class=\"c\"># Takes a sequence of game states representing the full</span>\n        <span class=\"c\"># game history.  If the game is now won, return the player</span>\n        <span class=\"c\"># number.  If the game is still ongoing, return zero.  If</span>\n        <span class=\"c\"># the game is tied, return a different distinct value, e.g. -1.</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n<p>For the purposes of this article I\'m not going to flesh this part out\nany further, but for example code you can find one of my\nimplementations on <a class=\"reference external\" href=\"https://github.com/jbradberry/ultimate_tictactoe/blob/master/t3/board.py\">github</a>.\nHowever, it is important to note that we will require that the\n<tt class=\"docutils literal\">state</tt> data structure is hashable and equivalent states hash to the\nsame value.  I personally use flat tuples as my state data structures.</p>\n<p>The AI class we will be constructing will support this interface:</p>\n<div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">MonteCarlo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c\"># Takes an instance of a Board and optionally some keyword</span>\n        <span class=\"c\"># arguments.  Initializes the list of game states and the</span>\n        <span class=\"c\"># statistics tables.</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">):</span>\n        <span class=\"c\"># Takes a game state, and appends it to the history.</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_play</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c\"># Causes the AI to calculate the best move from the</span>\n        <span class=\"c\"># current game state and return it.</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run_simulation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c\"># Plays out a \"random\" game from the current position,</span>\n        <span class=\"c\"># then updates the statistics tables with the result.</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n<p>Let\'s begin with the initialization and bookkeeping.  The <tt class=\"docutils literal\">board</tt>\nobject is what the AI will be using to obtain information about where\nthe game is going and what the AI is allowed to do, so we need to\nstore it.  Additionally, we need to keep track of the state data as we\nget it.</p>\n<div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">MonteCarlo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">board</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">states</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n</pre></div>\n<p>The UCT algorithm relies on playing out multiple games from the\ncurrent state, so let\'s add that next.</p>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MonteCarlo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c\"># ...</span>\n        <span class=\"n\">seconds</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\'time\'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">calculation_time</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"n\">seconds</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_play</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">begin</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">begin</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">calculation_time</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_simulation</span><span class=\"p\">()</span>\n</pre></div>\n<p>Here we\'ve defined a configuration option for the amount of time to\nspend on a calculation, and <tt class=\"docutils literal\">get_play</tt> will repeatedly call\n<tt class=\"docutils literal\">run_simulation</tt> until that amount of time has passed.  This code\nwon\'t do anything particularly useful yet, because we still haven\'t\ndefined <tt class=\"docutils literal\">run_simulation</tt>, so let\'s do that now.</p>\n<div class=\"highlight\"><pre><span class=\"c\"># ...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">choice</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MonteCarlo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c\"># ...</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_moves</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\'max_moves\'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run_simulation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">states_copy</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">states</span><span class=\"p\">[:]</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">states_copy</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_moves</span><span class=\"p\">):</span>\n            <span class=\"n\">legal</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">legal_plays</span><span class=\"p\">(</span><span class=\"n\">states_copy</span><span class=\"p\">)</span>\n\n            <span class=\"n\">play</span> <span class=\"o\">=</span> <span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">legal</span><span class=\"p\">)</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">next_state</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">play</span><span class=\"p\">)</span>\n            <span class=\"n\">states_copy</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n            <span class=\"n\">winner</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">winner</span><span class=\"p\">(</span><span class=\"n\">states_copy</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">winner</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n</pre></div>\n<p>This adds the beginnings of the <tt class=\"docutils literal\">run_simulation</tt> method, which\neither selects a move using UCB1 or chooses a random move from the set\nof legal moves each turn until the end of the game.  We have also\nintroduced a configuration option for limiting the number of moves\nforward that the AI will play.</p>\n<p>You may notice at this point that we are making a copy of\n<tt class=\"docutils literal\">self.states</tt> and adding new states to it, instead of adding\ndirectly to <tt class=\"docutils literal\">self.states</tt>.  This is because <tt class=\"docutils literal\">self.states</tt> is the\nauthoritative record of what has happened so far in the game, and we\ndon\'t want to mess it up with these speculative moves from the\nsimulations.</p>\n<p>Now we need to start keeping statistics on the game states that the AI\nhits during each run of <tt class=\"docutils literal\">run_simulation</tt>.  The AI should pick the\nfirst unknown game state it reaches to add to the tables.</p>\n<div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">MonteCarlo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c\"># ...</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wins</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plays</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run_simulation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">visited_states</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"n\">states_copy</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">states</span><span class=\"p\">[:]</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">states_copy</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">current_player</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n        <span class=\"n\">expand</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n        <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_moves</span><span class=\"p\">):</span>\n            <span class=\"n\">legal</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">legal_plays</span><span class=\"p\">(</span><span class=\"n\">states_copy</span><span class=\"p\">)</span>\n\n            <span class=\"n\">play</span> <span class=\"o\">=</span> <span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">legal</span><span class=\"p\">)</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">next_state</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">play</span><span class=\"p\">)</span>\n            <span class=\"n\">states_copy</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n            <span class=\"c\"># `player` here and below refers to the player</span>\n            <span class=\"c\"># who moved into that particular state.</span>\n            <span class=\"k\">if</span> <span class=\"n\">expand</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plays</span><span class=\"p\">:</span>\n                <span class=\"n\">expand</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plays</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wins</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n            <span class=\"n\">visited_states</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">((</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">))</span>\n\n            <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">current_player</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n            <span class=\"n\">winner</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">winner</span><span class=\"p\">(</span><span class=\"n\">states_copy</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">winner</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span> <span class=\"ow\">in</span> <span class=\"n\">visited_states</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plays</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plays</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">player</span> <span class=\"o\">==</span> <span class=\"n\">winner</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wins</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</pre></div>\n<p>Here we\'ve added two dictionaries to the AI, <tt class=\"docutils literal\">wins</tt> and <tt class=\"docutils literal\">plays</tt>,\nwhich will contain the counts for every game state that is being\ntracked.  The <tt class=\"docutils literal\">run_simulation</tt> method now checks to see if the\ncurrent state is the first new one it has encountered this call, and,\nif not, adds the state to both <tt class=\"docutils literal\">plays</tt> and <tt class=\"docutils literal\">wins</tt>, setting both\nvalues to zero.  This method also adds every game state that it goes\nthrough to a set, and at the end updates <tt class=\"docutils literal\">plays</tt> and <tt class=\"docutils literal\">wins</tt> with\nthose states in the set that are in the <tt class=\"docutils literal\">plays</tt> and <tt class=\"docutils literal\">wins</tt> dicts.\nWe are now ready to base the AI\'s final decision on these statistics.</p>\n<div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">division</span>\n<span class=\"c\"># ...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MonteCarlo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_play</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_depth</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">states</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">current_player</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"n\">legal</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">legal_plays</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">states</span><span class=\"p\">[:])</span>\n\n        <span class=\"c\"># Bail out early if there is no real choice to be made.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">legal</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">legal</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">legal</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"n\">games</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">begin</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">begin</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">calculation_time</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_simulation</span><span class=\"p\">()</span>\n            <span class=\"n\">games</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">moves_states</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">next_state</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">legal</span><span class=\"p\">]</span>\n\n        <span class=\"c\"># Display the number of calls of `run_simulation` and the</span>\n        <span class=\"c\"># time elapsed.</span>\n        <span class=\"k\">print</span> <span class=\"n\">games</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">begin</span>\n\n        <span class=\"c\"># Pick the move with the highest percentage of wins.</span>\n        <span class=\"n\">percent_wins</span><span class=\"p\">,</span> <span class=\"n\">move</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wins</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">((</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">/</span>\n             <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plays</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">((</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n             <span class=\"n\">p</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">S</span> <span class=\"ow\">in</span> <span class=\"n\">moves_states</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c\"># Display the stats for each possible play.</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span>\n            <span class=\"p\">((</span><span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wins</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">((</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">/</span>\n              <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plays</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">((</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n              <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wins</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">((</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n              <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plays</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">((</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n             <span class=\"k\">for</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">S</span> <span class=\"ow\">in</span> <span class=\"n\">moves_states</span><span class=\"p\">),</span>\n            <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">print</span> <span class=\"s\">\"{3}: {0:.2f}% ({1} / {2})\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n        <span class=\"k\">print</span> <span class=\"s\">\"Maximum depth searched:\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_depth</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">move</span>\n</pre></div>\n<p>We have added three things in this step.  First, we allow <tt class=\"docutils literal\">get_play</tt>\nto return early if there are no choices or only one choice to make.\nNext, we\'ve added output of some debugging information, including the\nstatistics for the possible moves this turn and an attribute that\nwill keep track of the maximum depth searched in the selection phase\nof the playouts.  Finally, we\'ve added code that picks out the move\nwith the highest win percentage out of the possible moves, and returns\nit.</p>\n<p>But we are not quite finished yet.  Currently, our AI is using pure\nrandomness for its playouts.  We need to implement UCB1 for positions\nwhere the legal plays are all in the stats tables, so the next trial\nplay is based on that information.</p>\n<div class=\"highlight\"><pre><span class=\"c\"># ...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">sqrt</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MonteCarlo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c\"># ...</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\'C\'</span><span class=\"p\">,</span> <span class=\"mf\">1.4</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run_simulation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c\"># A bit of an optimization here, so we have a local</span>\n        <span class=\"c\"># variable lookup instead of an attribute access each loop.</span>\n        <span class=\"n\">plays</span><span class=\"p\">,</span> <span class=\"n\">wins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plays</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wins</span>\n\n        <span class=\"n\">visited_states</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"n\">states_copy</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">states</span><span class=\"p\">[:]</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">states_copy</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">current_player</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n        <span class=\"n\">expand</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n        <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_moves</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">legal</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">legal_plays</span><span class=\"p\">(</span><span class=\"n\">states_copy</span><span class=\"p\">)</span>\n            <span class=\"n\">moves_states</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">next_state</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">legal</span><span class=\"p\">]</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">plays</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">((</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">S</span> <span class=\"ow\">in</span> <span class=\"n\">moves_states</span><span class=\"p\">):</span>\n                <span class=\"c\"># If we have stats on all of the legal moves here, use them.</span>\n                <span class=\"n\">log_total</span> <span class=\"o\">=</span> <span class=\"n\">log</span><span class=\"p\">(</span>\n                    <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">plays</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">S</span> <span class=\"ow\">in</span> <span class=\"n\">moves_states</span><span class=\"p\">))</span>\n                <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">move</span><span class=\"p\">,</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span>\n                    <span class=\"p\">((</span><span class=\"n\">wins</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">)]</span> <span class=\"o\">/</span> <span class=\"n\">plays</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">)])</span> <span class=\"o\">+</span>\n                     <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">C</span> <span class=\"o\">*</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">log_total</span> <span class=\"o\">/</span> <span class=\"n\">plays</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">)]),</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">S</span> <span class=\"ow\">in</span> <span class=\"n\">moves_states</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c\"># Otherwise, just make an arbitrary decision.</span>\n                <span class=\"n\">move</span><span class=\"p\">,</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">moves_states</span><span class=\"p\">)</span>\n\n            <span class=\"n\">states_copy</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n\n            <span class=\"c\"># `player` here and below refers to the player</span>\n            <span class=\"c\"># who moved into that particular state.</span>\n            <span class=\"k\">if</span> <span class=\"n\">expand</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">plays</span><span class=\"p\">:</span>\n                <span class=\"n\">expand</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n                <span class=\"n\">plays</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">wins</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_depth</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_depth</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n\n            <span class=\"n\">visited_states</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">((</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">))</span>\n\n            <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">current_player</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n            <span class=\"n\">winner</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">winner</span><span class=\"p\">(</span><span class=\"n\">states_copy</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">winner</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span> <span class=\"ow\">in</span> <span class=\"n\">visited_states</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">plays</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">plays</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">player</span> <span class=\"o\">==</span> <span class=\"n\">winner</span><span class=\"p\">:</span>\n                <span class=\"n\">wins</span><span class=\"p\">[(</span><span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</pre></div>\n<p>The main addition here is the check to see if all of the results of\nthe legal moves are in the <tt class=\"docutils literal\">plays</tt> dictionary.  If they aren\'t\navailable, it defaults to the original random choice.  But if the\nstatistics are all available, the move with the highest value\naccording to the confidence interval formula is chosen.  This formula\nadds together two parts.  The first part is just the win ratio, but\nthe second part is a term that grows slowly as a particular move\nremains neglected.  Eventually, if a node with a poor win rate is\nneglected long enough, it will begin to be chosen again.  This term\ncan be tweaked using the configuration parameter <tt class=\"docutils literal\">C</tt> added to\n<tt class=\"docutils literal\">__init__</tt> above.  Larger values of <tt class=\"docutils literal\">C</tt> will encourage more\nexploration of the possibilities, and smaller values will cause the AI\nto prefer concentrating on known good moves.  Also note that the\n<tt class=\"docutils literal\">self.max_depth</tt> attribute from the previous code block is now\nupdated when a new node is added and its depth exceeds the previous\n<tt class=\"docutils literal\">self.max_depth</tt>.</p>\n<p>So there we have it.  If there are no mistakes, you should now have an\nAI that will make reasonable decisions for a variety of board games.\nI\'ve left a suitable implementation of <tt class=\"docutils literal\">Board</tt> as an exercise for\nthe reader, but one thing I\'ve left out here is a way of actually\nallowing a user to play against the AI.  A toy framework for this can\nbe found at <a class=\"reference external\" href=\"https://github.com/jbradberry/boardgame-socketserver\">jbradberry/boardgame-socketserver</a> and\n<a class=\"reference external\" href=\"https://github.com/jbradberry/boardgame-socketplayer\">jbradberry/boardgame-socketplayer</a>.</p>\n<p>This version that we\'ve just built uses light playouts.  Next time,\nwe\'ll explore improving our AI by using heavy playouts, by training\nsome evaluation functions using machine learning techniques and\nhooking in the results.</p>\n<p><strong>UPDATE:</strong> The diagrams have been corrected to more accurately\nreflect the possible node values.</p>\n',1),(68,'mistio/mist.io','https://github.com/mistio/mist.io',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.rst\n    </h3>\n\n    <p>Mist.io helps you manage and monitor your virtual machines, across different\nclouds, using any device that can access the web. It is provided under the\nGNU AGPL v3.0 License. Check out the freemium service at <a href=\"https://mist.io\">https://mist.io</a></p>\n<a></a>\n<h2><a class=\"anchor\" href=\"https://github.com/mistio/mist.io#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n<p>Mist.io is written in Python. Currently it is tested and developed using\nPython 2.7. The only system wide requirements are Python, Python header\nfiles and some basic build tools. Git is used for revision control. Every other\ndependency is build automatically via zc.buildout. Although we use zc.buildout\nit is recommended to install mist.io in a virtualenv to avoid conflicts with\neggs in the system\'s Python.</p>\n<p>To install the basic requirements in a Debian based distro do:</p>\n<pre>sudo aptitude install python-dev build-essential git erlang\n</pre>\n<p>If you wish to install it in a virtual environment you\'ll also need:</p>\n<pre>sudo aptitude install python-virtualenv\n</pre>\n<p>If you plan to support KVM via libvirt, you should install libvirt library:</p>\n<pre>sudo aptitude install libvirt-bin libvirt-dev\n./bin/pip install libvirt-python\n</pre>\n<p>For vSphere support, you should install pyvmomi library:</p>\n<pre>./bin/pip install pyvmomi\n</pre>\n<p>In Red Hat based systems the following packages need to be installed:</p>\n<pre>sudo yum install git python-virtualenv python-dev erlang pcre python-lxml gcc libxml2 libxml2-python libxml2-devel\n</pre>\n<p>For openSUSE distibution, you\'ll have to additionally install:</p>\n<pre>sudo zypper in python-gevent libevent-devel\n</pre>\n<p>In MacOSX you have to install Xcode and its command line tools. For virtualenv\nyou simply run:</p>\n<pre>sudo easy_install virtualenv\n</pre>\n<p>Supposing you have all the above, the steps are simple. Clone the repository,\ncreate a virtualenv and run buildout:</p>\n<pre>git clone https://github.com/mistio/mist.io.git\ncd mist.io\nvirtualenv --no-site-packages .\n./bin/pip install ansible\n./bin/python bootstrap.py\n./bin/buildout -v\n</pre>\n<p>In case you are using an older version of setuptools, bootstrap will fail. To\nsolve this you need to:</p>\n<pre>./bin/pip install setuptools --upgrade\n</pre>\n<p>If you are using Python 2.6 you\'ll have to install ipython version 1, otherwise buildout will fail:</p>\n<pre>./bin/pip install ipython==1\n</pre>\n<a></a>\n<h2><a class=\"anchor\" href=\"https://github.com/mistio/mist.io#deployment\"><span class=\"octicon octicon-link\"></span></a>Deployment</h2>\n<p>Mist.io comes with supervisor in order to handle all the processes.</p>\n<p>To get it up and running:</p>\n<pre>./bin/supervisord\n</pre>\n<p>For development you can tail the logs:</p>\n<pre>tail -f var/log/*.log\n</pre>\n<p>You can also monitor that all the processes are up and running:</p>\n<pre>./bin/supervisorctl status\n</pre>\n<p>Finally, you can start, stop or restart a specific process:</p>\n<pre>./bin/supervisorctl restart uwsgi\n</pre>\n<p>Point your browser to <a href=\"http://127.0.0.1:8000\">http://127.0.0.1:8000</a> and you are ready to roll!</p>\n\n',1),(69,'pearkes/tugboat','https://github.com/pearkes/tugboat',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://travis-ci.org/pearkes/tugboat\"><img src=\"https://camo.githubusercontent.com/f2b0f0a827ec342ffc956cf27417a97f63f0e47c/68747470733a2f2f7472617669732d63692e6f72672f706561726b65732f747567626f61742e706e673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a>\n<a href=\"https://coveralls.io/r/pearkes/tugboat\"><img src=\"https://camo.githubusercontent.com/da760c1b35dd7fe37e1f626b9e8f6303ec2a7996/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f706561726b65732f747567626f61742f62616467652e706e673f6272616e63683d6d6173746572\" alt=\"Coverage Status\" /></a></p>\n\n<p>A command line tool for interacting with your <a href=\"https://www.digitalocean.com/\">DigitalOcean</a> droplets.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<pre><code>gem install tugboat\n</code></pre>\n\n<p>Please note that Tugboat version 0.2.0 and up requires Ruby 1.9 or higher.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#configuration\"><span class=\"octicon octicon-link\"></span></a>Configuration</h2>\n\n<p>Run the configuration utility, <code>tugboat authorize</code>. You can grab your keys\n<a href=\"https://cloud.digitalocean.com/api_access\">here</a>.</p>\n\n<pre><code>$ tugboat authorize\nEnter your client key: foo\nEnter your API key: bar\nEnter your SSH key path (optional, defaults to ~/.ssh/id_rsa):\nEnter your SSH user (optional, defaults to jack):\nEnter your SSH port number (optional, defaults to 22):\n\nTo retrieve region, image, size and key ID\'s, you can use the corresponding tugboat command, such as `tugboat images`.\nDefaults can be changed at any time in your ~/.tugboat configuration file.\n\nEnter your default region ID (optional, defaults to 1 (New York)):\nEnter your default image ID (optional, defaults to 350076 (Ubuntu 13.04 x64)):\nEnter your default size ID (optional, defaults to 66 (512MB)):\nEnter your default ssh key ID (optional, defaults to none):\n\nAuthentication with DigitalOcean was successful!\n</code></pre>\n\n<p>This will create a .tugboat file in your home folder (eg. ~/.tugboat).</p>\n\n<p>Tugboat will look for a .tugboat config file first in the current directory you\'re running it in, then will look for one in the home directory.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#retrieve-a-list-of-your-droplets\"><span class=\"octicon octicon-link\"></span></a>Retrieve a list of your droplets</h3>\n\n<pre><code>$ tugboat droplets\npearkes-web-001 (ip: 30.30.30.1, status: active, region: 1, id: 13231511)\npearkes-admin-001 (ip: 30.30.30.3, status: active, region: 1, id: 13231512)\npearkes-api-001 (ip: 30.30.30.5, status: active, region: 1, id: 13231513)\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#fuzzy-name-matching\"><span class=\"octicon octicon-link\"></span></a>Fuzzy name matching</h3>\n\n<p>You can pass a unique fragment of a droplets name for interactions\nthroughout <code>tugboat</code>.</p>\n\n<pre><code>$ tugboat restart admin\nDroplet fuzzy name provided. Finding droplet ID...done, 13231512 (pearkes-admin-001)\nQueuing restart for 13231512 (pearkes-admin-001)...done\n</code></pre>\n\n<p>tugboat handles multiple matches as well:</p>\n\n<pre><code>$ tugboat restart pearkes\nDroplet fuzzy name provided. Finding droplet ID...Multiple droplets found.\n\n0) pearkes-web-001  (13231511)\n1) pearkes-admin-001 (13231512)\n2) pearkes-api-001 (13231513)\n\nPlease choose a droplet: [\"0\", \"1\", \"2\"] 0\nQueuing restart for 13231511 (pearkes-web-001)...done\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#ssh-into-a-droplet\"><span class=\"octicon octicon-link\"></span></a>SSH into a droplet</h3>\n\n<p><em>You can configure an SSH username and key path in <code>tugboat authorize</code>,\nor by changing your <code>~/.tugboat</code>.</em></p>\n\n<p>This lets you ssh into a droplet by providing it\'s name, or a partial\nmatch.</p>\n\n<pre><code>$ tugboat ssh admin\nDroplet fuzzy name provided. Finding droplet ID...done, 13231512 (pearkes-admin-001)\nExecuting SSH (pearkes-admin-001)...\nWelcome to Ubuntu 12.10 (GNU/Linux 3.5.0-17-generic x86_64)\npearkes@pearkes-admin-001:~#\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#create-a-droplet\"><span class=\"octicon octicon-link\"></span></a>Create a droplet</h3>\n\n<pre><code>$ tugboat create pearkes-www-002 -s 64 -i 2676 -r 2 -k 11251\nQueueing creation of droplet \'pearkes-www-002\'...done\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#info-about-a-droplet\"><span class=\"octicon octicon-link\"></span></a>Info about a droplet</h3>\n\n<pre><code>$ tugboat info admin\nDroplet fuzzy name provided. Finding droplet ID...done, 13231512 (pearkes-admin-001)\n\nName:             pearkes-admin-001\nID:               13231512\nStatus:           active\nIP:               30.30.30.3\nRegion ID:        1\nImage ID:         25489\nSize ID:          66\nBackups Active:   false\n</code></pre>\n\n<p>Print info in machine-readable format. The <code>--porcelain</code> flag silences extra output for easy parsing. Fuzzy name matching is not supported with the <code>--porcelain</code> flag.</p>\n\n<pre><code>$ tugboat info -n pearkes-admin-001 --attribute ip --porcelain\nname pearkes-admin-001\nid 13231512\nstatus active\nip 30.30.30.3\nregion_id 1\nimage_id 25489\nsize_id 66\nbackups_active false\n</code></pre>\n\n<p>Print a single attribute.</p>\n\n<pre><code>$ tugboat info -n pearkes-admin-001 --attribute ip --porcelain\n30.30.30.3\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#destroy-a-droplet\"><span class=\"octicon octicon-link\"></span></a>Destroy a droplet</h3>\n\n<pre><code>$ tugboat destroy pearkes-www-002\nDroplet fuzzy name provided. Finding droplet ID...done, 13231515 (pearkes-www-002)\nWarning! Potentially destructive action. Please confirm [y/n]: y\nQueuing destroy for 13231515 (pearkes-www-002)...done\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#restart-a-droplet\"><span class=\"octicon octicon-link\"></span></a>Restart a droplet</h3>\n\n<pre><code>$ tugboat restart admin\nDroplet fuzzy name provided. Finding droplet ID...done, 13231512 (pearkes-admin-001)\nQueuing restart for 13231512 (pearkes-admin-001)...done\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#shutdown-a-droplet\"><span class=\"octicon octicon-link\"></span></a>Shutdown a droplet</h3>\n\n<pre><code>$ tugboat halt admin\nDroplet fuzzy name provided. Finding droplet ID...done, 13231512 (pearkes-admin-001)\nQueuing shutdown for 13231512 (pearkes-admin-001)...done\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#snapshot-a-droplet\"><span class=\"octicon octicon-link\"></span></a>Snapshot a droplet</h3>\n\n<pre><code>$ tugboat snapshot test-admin-snaphot admin\nQueuing snapshot \'test-admin-snapshot\' for 13231512 (pearkes-admin-001)...done\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#resize-a-droplet\"><span class=\"octicon octicon-link\"></span></a>Resize a droplet</h3>\n\n<pre><code>$ tugboat resize admin -s 66\nQueuing resize for 13231512 (pearkes-admin-001)...done\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#list-available-images\"><span class=\"octicon octicon-link\"></span></a>List Available Images</h3>\n\n<p>You can list images that you have created.</p>\n\n<pre><code>$ tugboat images\nMy Images:\npearkes-admin-001 2013-05-19 (id: 13231512, distro: Ubuntu)\n....\n</code></pre>\n\n<p>Optionally, list images provided by DigitalOcean as well.</p>\n\n<pre><code>$ tugboat images --global\nMy Images:\npearkes-admin-001 2013-05-19 (id: 13231512, distro: Ubuntu)\n....\nGlobal Images:\nCentOS 5.8 x64 (id: 1601, distro: CentOS)\n...\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#list-available-sizes\"><span class=\"octicon octicon-link\"></span></a>List Available Sizes</h3>\n\n<pre><code>$ tugboat sizes\nSizes:\n512MB (id: 66)\n1GB (id: 63)\n...\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#list-available-regions\"><span class=\"octicon octicon-link\"></span></a>List Available Regions</h3>\n\n<pre><code>$ tugboat regions\nRegions:\nNew York 1 (id: 1) (slug: nyc1)\nAmsterdam 1 (id: 2) (slug: ams1)\nSan Francisco 1 (id: 3) (slug: sfo1)\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#list-ssh-keys\"><span class=\"octicon octicon-link\"></span></a>List SSH Keys</h3>\n\n<pre><code>$ tugboat keys\nKeys:\npearkes (id: 10501)\n...\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#wait-for-droplet-state\"><span class=\"octicon octicon-link\"></span></a>Wait for Droplet State</h3>\n\n<p>Sometimes you want to wait for a droplet to enter some state, for\nexample \"off\".</p>\n\n<pre><code>$ tugboat wait admin --state off\nDroplet fuzzy name provided. Finding droplet ID...done, 13231512 (pearkes-admin-001)\nWaiting for droplet to become off....\n...\n</code></pre>\n\n<p>This will simply block until the droplet returns a state of \"off\".\nA period will be printed after each request.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#help\"><span class=\"octicon octicon-link\"></span></a>Help</h2>\n\n<p>If you\'re curious about command flags for a specific command, you can\nask tugboat about it.</p>\n\n<pre><code>$ tugboat help restart\n</code></pre>\n\n<p>For a complete overview of all of the available commands, run:</p>\n\n<pre><code>$ tugboat help\n</code></pre>\n\n<p>Depending on your local configuration, you may need to install a CA bundle (OS X only) using <a href=\"http://brew.sh/\">homebrew</a> to communicate with DigitalOcean through SSL/TLS:</p>\n\n<pre><code>$ brew install curl-ca-bundle\n</code></pre>\n\n<p>After installation, source the bundle path in your <code>.bash_profile</code>/<code>.bashrc</code>:</p>\n\n<pre><code>export SSL_CERT_FILE=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#reporting-bugs\"><span class=\"octicon octicon-link\"></span></a>Reporting Bugs</h2>\n\n<p>Yes, please!</p>\n\n<p>It\'s very helpful if you can run <code>DEBUG=1 tugboat ...</code> with the command\nthat is causing you issues, and then include that in the issue.</p>\n\n<p>You can create a new issue <a href=\"https://github.com/pearkes/tugboat/issues/new\">here</a>. Thank you!</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/pearkes/tugboat#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>See the <a href=\"https://github.com/pearkes/tugboat/blob/master/CONTRIBUTING.md\">contributing guide</a>.</p>\n',1),(70,'smdahlen/vagrant-digitalocean','https://github.com/smdahlen/vagrant-digitalocean',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://rubygems.org/gems/vagrant-digitalocean\"><img src=\"https://camo.githubusercontent.com/813fcf8f10e9bc1e13c370487afab75a154457a9/68747470733a2f2f696d672e736869656c64732e696f2f67656d2f64742f76616772616e742d6469676974616c6f6365616e2e737667\" alt=\"Gem\" /></a>\n<a href=\"https://rubygems.org/gems/vagrant-digitalocean\"><img src=\"https://camo.githubusercontent.com/d558b1bd4bfd58c10aadccaff1604cd4fe0dcb4c/68747470733a2f2f696d672e736869656c64732e696f2f67656d2f6474762f76616772616e742d6469676974616c6f6365616e2e737667\" alt=\"Gem\" /></a>\n<a href=\"https://twitter.com/intent/tweet?text=Check%20out%20this%20awesome%20Vagrant%20plugin%21&amp;url=https%3A%2F%2Fgithub.com%2Fsmdahlen%2Fvagrant-digitalocean&amp;hashtags=vagrant%2Cdigitalocean&amp;original_referer=\"><img src=\"https://camo.githubusercontent.com/c3abec4c53c020bde7a10bdf625972d1eca484e5/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f6769746875622e636f6d2f736d6461686c656e2f76616772616e742d6469676974616c6f6365616e2e7376673f7374796c653d736f6369616c\" alt=\"Twitter\" /></a></p>\n\n<p><code>vagrant-digitalocean</code> is a provider plugin for Vagrant that supports the management of <a href=\"https://www.digitalocean.com/\">Digital Ocean</a> droplets (instances).</p>\n\n<p>Features include:</p>\n\n<ul><li>create and destroy droplets</li>\n<li>power on and off droplets</li>\n<li>rebuild a droplet (destroys and ups with same IP address)</li>\n<li>provision a droplet with shell</li>\n<li>setup a SSH public key for authentication</li>\n<li>create a new user account during droplet creation</li>\n</ul><p>The provider has been tested with Vagrant 1.1.5+ using Ubuntu 12.04 and CentOS 6.3 guest operating systems.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/smdahlen/vagrant-digitalocean#install\"><span class=\"octicon octicon-link\"></span></a>Install</h2>\n\n<p>Install the provider plugin using the Vagrant command-line interface:</p>\n\n<p><code>vagrant plugin install vagrant-digitalocean</code></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/smdahlen/vagrant-digitalocean#configure\"><span class=\"octicon octicon-link\"></span></a>Configure</h2>\n\n<p>Once the provider has been installed, you will need to configure your project to use it. The most basic <code>Vagrantfile</code> to create a droplet on Digital Ocean is shown below:</p>\n\n<div class=\"highlight highlight-source-ruby\"><pre><span class=\"pl-c1\">Vagrant</span>.configure(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>2<span class=\"pl-pds\">\'</span></span>) <span class=\"pl-k\">do </span>|<span class=\"pl-smi\">config</span>|\n\n  config.vm.provider <span class=\"pl-c1\">:digital_ocean</span> <span class=\"pl-k\">do </span>|<span class=\"pl-smi\">provider</span>, <span class=\"pl-smi\">override</span>|\n    override.ssh.private_key_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>~/.ssh/id_rsa<span class=\"pl-pds\">\'</span></span>\n    override.vm.box <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>digital_ocean<span class=\"pl-pds\">\'</span></span>\n    override.vm.box_url <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://github.com/smdahlen/vagrant-digitalocean/raw/master/box/digital_ocean.box<span class=\"pl-pds\">\"</span></span>\n\n    provider.token <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>YOUR TOKEN<span class=\"pl-pds\">\'</span></span>\n    provider.image <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>ubuntu-14-04-x64<span class=\"pl-pds\">\'</span></span>\n    provider.region <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>nyc2<span class=\"pl-pds\">\'</span></span>\n    provider.size <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>512mb<span class=\"pl-pds\">\'</span></span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre></div>\n\n<p><strong>Configuration Requirements</strong></p>\n\n<ul><li>You <em>must</em> specify the <code>override.ssh.private_key_path</code> to enable authentication with the droplet. The provider will create a new Digital Ocean SSH key using your public key which is assumed to be the <code>private_key_path</code> with a <em>.pub</em> extension.</li>\n<li>You <em>must</em> specify your Digital Ocean Personal Access Token at <code>provider.token</code>. This may be found on the control panel within the <em>Apps &amp; API</em> section.</li>\n</ul><p><strong>Supported Configuration Attributes</strong></p>\n\n<p>The following attributes are available to further configure the provider:</p>\n\n<ul><li><code>provider.image</code>\n\n<ul><li>A string representing the image to use when creating a new droplet. It defaults to <code>ubuntu-14-04-x64</code>.\nList available images with the <code>digitalocean-list images $DIGITAL_OCEAN_TOKEN</code> command. Like when using the DigitalOcean API directly, <a href=\"https://developers.digitalocean.com/documentation/v2/#create-a-new-droplet\">it can be an image ID or slug</a>.</li>\n</ul></li>\n<li><code>provider.ipv6</code>\n\n<ul><li>A boolean flag indicating whether to enable IPv6</li>\n</ul></li>\n<li><code>provider.region</code>\n\n<ul><li>A string representing the region to create the new droplet in. It defaults to <code>nyc2</code>. List available regions with the <code>digitalocean-list regions $DIGITAL_OCEAN_TOKEN</code> command.</li>\n</ul></li>\n<li><code>provider.size</code>\n\n<ul><li>A string representing the size to use when creating a new droplet (e.g. <code>1gb</code>). It defaults to <code>512mb</code>. List available sizes with the <code>digitalocean-list sizes $DIGITAL_OCEAN_TOKEN</code> command.</li>\n</ul></li>\n<li><code>provider.private_networking</code>\n\n<ul><li>A boolean flag indicating whether to enable a private network interface (if the region supports private networking). It defaults to <code>false</code>.</li>\n</ul></li>\n<li><code>provider.backups_enabled</code>\n\n<ul><li>A boolean flag indicating whether to enable backups for the droplet. It defaults to <code>false</code>.</li>\n</ul></li>\n<li><code>provider.ssh_key_name</code>\n\n<ul><li>A string representing the name to use when creating a Digital Ocean SSH key for droplet authentication. It defaults to <code>Vagrant</code>.</li>\n</ul></li>\n<li><code>provider.setup</code>\n\n<ul><li>A boolean flag indicating whether to setup a new user account and modify sudo to disable tty requirement. It defaults to <code>true</code>. If you are using a tool like <a href=\"https://packer.io\">Packer</a> to create reusable snapshots with user accounts already provisioned, set to <code>false</code>.</li>\n</ul></li>\n<li><code>config.vm.synced_folder</code>\n\n<ul><li>Supports both rsync__args and rsync__exclude, see the <a href=\"http://docs.vagrantup.com/v2/synced-folders/rsync.html\">Vagrant Docs</a> for more information. rsync__args default to <code>[\"--verbose\", \"--archive\", \"--delete\", \"-z\", \"--copy-links\"]</code> and rsync__exclude defaults to <code>[\".vagrant/\"]</code>.</li>\n</ul></li>\n</ul><p>The provider will create a new user account with the specified SSH key for authorization if <code>config.ssh.username</code> is set and the <code>provider.setup</code> attribute is <code>true</code>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/smdahlen/vagrant-digitalocean#run\"><span class=\"octicon octicon-link\"></span></a>Run</h2>\n\n<p>After creating your project\'s <code>Vagrantfile</code> with the required configuration\nattributes described above, you may create a new droplet with the following\ncommand:</p>\n\n<pre><code>$ vagrant up --provider=digital_ocean\n</code></pre>\n\n<p>This command will create a new droplet, setup your SSH key for authentication,\ncreate a new user account, and run the provisioners you have configured.</p>\n\n<p><strong>Supported Commands</strong></p>\n\n<p>The provider supports the following Vagrant sub-commands:</p>\n\n<ul><li><code>vagrant destroy</code> - Destroys the droplet instance.</li>\n<li><code>vagrant ssh</code> - Logs into the droplet instance using the configured user account.</li>\n<li><code>vagrant halt</code> - Powers off the droplet instance.</li>\n<li><code>vagrant provision</code> - Runs the configured provisioners and rsyncs any specified <code>config.vm.synced_folder</code>.</li>\n<li><code>vagrant reload</code> - Reboots the droplet instance.</li>\n<li><code>vagrant rebuild</code> - Destroys the droplet instance and recreates it with the same IP address which was previously assigned.</li>\n<li><code>vagrant status</code> - Outputs the status (active, off, not created) for the droplet instance.</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/smdahlen/vagrant-digitalocean#troubleshooting\"><span class=\"octicon octicon-link\"></span></a>Troubleshooting</h2>\n\n<ul><li><code>vagrant plugin install vagrant-digitalocean</code> \n\n<ul><li>Installation on OS X may not working due to a SSL certificate problem, and you may need to specify a certificate path explicitly. To do so, run <code>ruby -ropenssl -e \"p OpenSSL::X509::DEFAULT_CERT_FILE\"</code>. Then, add the following environment variable to your <code>.bash_profile</code> script and <code>source</code> it: <code>export SSL_CERT_FILE=/usr/local/etc/openssl/cert.pem</code>.</li>\n</ul></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/smdahlen/vagrant-digitalocean#faq\"><span class=\"octicon octicon-link\"></span></a>FAQ</h2>\n\n<ul><li>The Chef provisioner is no longer supported by default (as of 0.2.0). Please use the <code>vagrant-omnibus</code> plugin to install Chef on Vagrant-managed machines. This plugin provides control over the specific version of Chef to install.</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/smdahlen/vagrant-digitalocean#contribute\"><span class=\"octicon octicon-link\"></span></a>Contribute</h2>\n\n<p>To contribute, fork then clone the repository, and then the following:</p>\n\n<p><strong>Developing</strong></p>\n\n<ol><li>Install <a href=\"http://bundler.io/\">Bundler</a></li>\n<li>Currently the Bundler version is locked to 1.7.9, please install this version.\n\n<ul><li><code>sudo gem install bundler -v \'1.7.9\'</code></li>\n</ul></li>\n<li>Then install vagrant-digitalocean dependancies:\n\n<ul><li><code>bundle _1.7.9_ install</code></li>\n</ul></li>\n<li>Do your development and run a few commands, one to get started would be:\n\n<ul><li><code>bundle _1.7.9_ exec vagrant digitalocean-list images</code></li>\n</ul></li>\n<li>You can then run a test:\n\n<ul><li><code>bundle _1.7.9_ exec rake test</code></li>\n</ul></li>\n<li>Once you are satisfied with your changes, please submit a pull request.</li>\n</ol><p><strong>Releasing</strong></p>\n\n<p>To release a new version of vagrant-digitalocean you will need to do the following:</p>\n\n<p><em>(only contributors of the GitHub repo and owners of the project at RubyGems will have rights to do this)</em></p>\n\n<ol><li>First, create a tag and push:\n\n<ul><li><code>git tag -a v0.7.6 -m \'v0.7.6\'</code></li>\n</ul></li>\n<li>Then, create a release on Github with the same versioning convention:\n\n</li>\n<li>You will then need to build and push the new gem to RubyGems:\n\n<ul><li><code>rake gem:build</code></li>\n<li><code>gem push pkg/vagrant-digitalocean-0.7.6.gem</code></li>\n</ul></li>\n<li>Then, when John Doe runs the following, they will receive the updated vagrant-digitalocean plugin:\n\n<ul><li><code>vagrant plugin update</code></li>\n<li><code>vagrant plugin update vagrant-digitalocean</code></li>\n</ul></li>\n</ol>',1),(71,'icodeforlove/doapi','https://github.com/icodeforlove/doapi',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>The doapi module allows you to communicate with the <a href=\"https://developers.digitalocean.com/documentation/v2/\">DigitalOcean API V2</a> from node.js in a promise friendly manner.</p>\n\n<p>It also supports automatic request retries.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<p>This module is published in NPM:</p>\n\n<pre><code>npm install doapi --save\n</code></pre>\n\n<p>The <code>--save</code> tells NPM to automatically add it to your <code>package.json</code> file</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Import a module</span>\n<span class=\"pl-k\">var</span> DigitalOceanAPI <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>doapi<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-c\">// Create an instance with your API V2 credentials</span>\n<span class=\"pl-k\">var</span> api <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DigitalOceanAPI</span>({token<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>my_token<span class=\"pl-pds\">\'</span></span>});\n\n<span class=\"pl-c\">// Get things done</span>\napi.dropletGetAll().then(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">droplets</span>) {\n    <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(droplets);\n});</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#config\"><span class=\"octicon octicon-link\"></span></a>Config</h2>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">new</span> <span class=\"pl-en\">DigitalOceanAPI</span>({\n    token<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>my_token<span class=\"pl-pds\">\'</span></span>,\n    itemsPerPage<span class=\"pl-k\">:</span> <span class=\"pl-c1\">100</span>, <span class=\"pl-c\">// default=100</span>\n    maxRetries<span class=\"pl-k\">:</span> <span class=\"pl-c1\">5</span>, <span class=\"pl-c\">// default=5</span>\n    raw<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span> <span class=\"pl-c\">// default=false</span>\n});</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#pagination\"><span class=\"octicon octicon-link\"></span></a>Pagination</h2>\n\n<p>you can pass pagination params into any method that has a <code>body</code> or <code>query</code> argument.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>api.dropletGetAll({per_page<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>, page<span class=\"pl-k\">:</span> <span class=\"pl-c1\">2</span>}).then(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">droplets</span>) {\n    <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(droplets);\n});</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#raw\"><span class=\"octicon octicon-link\"></span></a>Raw</h2>\n\n<p>if you set raw it will return the full response body with <code>request info</code> and <code>ratelimiting details</code>, the default is false.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>api.accountGet(<span class=\"pl-c1\">true</span>)</pre></div>\n\n<p>would return</p>\n\n<pre><code>    {\n        account: {\n            droplet_limit: 25,\n            email: \'email@domain.com\',\n            uuid: \'f5bbaffce3a8792421593a7075b486bafd66672f\',\n            email_verified: true\n        },\n        ratelimit: {\n            limit: \'5000\',\n            remaining: \'4993\',\n            reset: \'1434197547\'\n        },\n        requestinfo: {\n            id: \'a24427fd-0d43-9536-a206-zac22d2696e1\',\n            runtime: \'0.038537\'\n         }\n    }\n</code></pre>\n\n<p>and with raw set to false (the default), it would return</p>\n\n<pre><code>    {\n        droplet_limit: 25,\n        email: \'email@domain.com\',\n        uuid: \'f5bbaffce3a8792421593a7075b486bafd66672f\',\n        email_verified: true\n    }\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#debugging\"><span class=\"octicon octicon-link\"></span></a>Debugging</h2>\n\n<p>we use the debug module so you can debug the http requests by doing the following</p>\n\n<pre><code>DEBUG=http node myfile.js\n</code></pre>\n\n<p><a href=\"https://camo.githubusercontent.com/30febf8b3cdc03060c1bc322bce0164b225380c3/687474703a2f2f63646e2e696d6734322e636f6d2f34616435663330356236666538303631336339306161646635343333373539382e706e67\"><img src=\"https://camo.githubusercontent.com/30febf8b3cdc03060c1bc322bce0164b225380c3/687474703a2f2f63646e2e696d6734322e636f6d2f34616435663330356236666538303631336339306161646635343333373539382e706e67\" alt=\"image\" /></a></p>\n\n<p>also all methods enforce type checking so invalid usage would result in errors like this</p>\n\n<p><a href=\"https://camo.githubusercontent.com/faf214c31c2d1e855499f41d92adc2b4506179b2/687474703a2f2f63646e2e696d6734322e636f6d2f63663037336439633362663935626330333535303435613032346164306265342e706e67\"><img src=\"https://camo.githubusercontent.com/faf214c31c2d1e855499f41d92adc2b4506179b2/687474703a2f2f63646e2e696d6734322e636f6d2f63663037336439633362663935626330333535303435613032346164306265342e706e67\" alt=\"image\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#methods\"><span class=\"octicon octicon-link\"></span></a>Methods</h2>\n\n<p>All methods follow the <a href=\"https://developers.digitalocean.com/documentation/v2/\">official API documentation</a>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#droplets\"><span class=\"octicon octicon-link\"></span></a>Droplets</h3>\n\n<ul><li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-all-droplets\">dropletGetAll(Object query [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#create-a-new-droplet\">dropletNew(Object body, [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-droplet-by-id\">dropletGet(Number id [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#reboot-a-droplet\">dropletReboot(Number id [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#power-cycle-a-droplet\">dropletPowerCycle(Number id [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#shutdown-a-droplet\">dropletShutdown(Number id [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#power-off-a-droplet\">dropletPowerOff(Number id [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#power-on-a-droplet\">dropletPowerOn(Number id [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#password-reset-a-droplet\">dropletPasswordReset(Number id [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#resize-a-droplet\">dropletResize(Number id, Object body [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#snapshot-a-droplet\">dropletSnapshot(Number id, Object body [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#restore-a-droplet\">dropletRestore(Number id, Object body [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#rebuild-a-droplet\">dropletRebuild(Number id, Object body [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#rename-a-droplet\">dropletRename(Number id, Object body [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#delete-a-droplet\">dropletDestroy(Number id [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-all-available-kernels-for-a-droplet\">dropletKernalsGetAll(Number id, Object query [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-snapshots-for-a-droplet\">dropletSnapshotsGetAll(Number id, Object query [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-backups-for-a-droplet\">dropletBackupsGetAll(Number id, Object query [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-actions-for-a-droplet\">dropletActionGetAll(Number id, Object query [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-neighbors-for-a-droplet\">dropletNeighborsGetAll(Number id, Object query [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-droplet-upgrades\">dropletUpgradesGetAll(Object query [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-all-droplet-neighbors\">reportDropletNeighborsGetAll(Object query [, Boolean raw])</a></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#account\"><span class=\"octicon octicon-link\"></span></a>Account</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#regions\"><span class=\"octicon octicon-link\"></span></a>Regions</h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#images\"><span class=\"octicon octicon-link\"></span></a>Images</h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#ssh-keys\"><span class=\"octicon octicon-link\"></span></a>SSH keys</h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#sizes\"><span class=\"octicon octicon-link\"></span></a>Sizes</h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#domains\"><span class=\"octicon octicon-link\"></span></a>Domains</h3>\n\n<ul><li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-all-domains\">domainGetAll(Object query [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#create-a-new-domain\">domainNew(String name, Object body [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-domain\">domainGet(String name [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#delete-a-domain\">domainDestroy(String name [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#list-all-domain-records\">domainRecordGetAll(String name, Object query [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#retrieve-an-existing-domain-record\">domainRecordGet(String name, Number id [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#update-a-domain-record\">domainRecordEdit(String name, Number id, Object body [, Boolean raw])</a></li>\n<li><a href=\"https://developers.digitalocean.com/documentation/v2/#delete-a-domain-record\">domainRecordDestroy(String name, Number id [, Boolean raw])</a></li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/icodeforlove/doapi#actions\"><span class=\"octicon octicon-link\"></span></a>Actions</h3>\n\n',1),(72,'koalalorenzo/python-digitalocean','https://github.com/koalalorenzo/python-digitalocean',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>This library provides easy access to Digital Ocean APIs to deploy droplets, images and more.</p>\n\n<p><a href=\"https://travis-ci.org/koalalorenzo/python-digitalocean\"><img src=\"https://camo.githubusercontent.com/4ea9cf978b9599c1ed355f115777ba12475a19a1/68747470733a2f2f7472617669732d63692e6f72672f6b6f616c616c6f72656e7a6f2f707974686f6e2d6469676974616c6f6365616e2e737667\" alt=\"\" /></a></p>\n\n\n\n<h2><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#how-to-install\"><span class=\"octicon octicon-link\"></span></a>How to install</h2>\n\n<p>You can install python-digitalocean using <strong>pip</strong></p>\n\n<pre><code>pip install -U python-digitalocean\n</code></pre>\n\n<p>or via sources:</p>\n\n<pre><code>python setup.py install\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#features\"><span class=\"octicon octicon-link\"></span></a>Features</h2>\n\n<p>python-digitalocean support all the features provided via digitalocean.com APIs, such as:</p>\n\n<ul><li>Get user\'s Droplets</li>\n<li>Get user\'s Images (Snapshot and Backups)</li>\n<li>Get public Images</li>\n<li>Get Droplet\'s event status</li>\n<li>Create and Remove a Droplet</li>\n<li>Resize a Droplet</li>\n<li>Shutdown, restart and boot a Droplet</li>\n<li>Power off, power on and \"power cycle\" a Droplet</li>\n<li>Perform Snapshot</li>\n<li>Enable/Disable automatic Backups</li>\n<li>Restore root password of a Droplet</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#examples\"><span class=\"octicon octicon-link\"></span></a> Examples</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#shutdown-all-droplets\"><span class=\"octicon octicon-link\"></span></a>Shutdown all droplets</h3>\n\n<p>This example shows how to shutdown all the active droplets:</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> digitalocean\nmanager <span class=\"pl-k\">=</span> digitalocean.Manager(<span class=\"pl-smi\">token</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>secretspecialuniquesnowflake<span class=\"pl-pds\">\"</span></span>)\nmy_droplets <span class=\"pl-k\">=</span> manager.get_all_droplets()\n<span class=\"pl-k\">for</span> droplet <span class=\"pl-k\">in</span> my_droplets:\n    droplet.shutdown()</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#creating-a-droplet-and-checking-its-status\"><span class=\"octicon octicon-link\"></span></a>Creating a Droplet and checking its status</h3>\n\n<p>This example shows how to create a droplet and how to check its status</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> digitalocean\ndroplet <span class=\"pl-k\">=</span> digitalocean.Droplet(<span class=\"pl-smi\">token</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>secretspecialuniquesnowflake<span class=\"pl-pds\">\"</span></span>,\n                               <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Example<span class=\"pl-pds\">\'</span></span>,\n                               <span class=\"pl-smi\">region</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>nyc2<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-c\"># New York 2</span>\n                               <span class=\"pl-smi\">image</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>ubuntu-14-04-x64<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-c\"># Ubuntu 14.04 x64</span>\n                               <span class=\"pl-smi\">size_slug</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>512mb<span class=\"pl-pds\">\'</span></span>,  <span class=\"pl-c\"># 512MB</span>\n                               <span class=\"pl-smi\">backups</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ndroplet.create()</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#checking-the-status-of-the-droplet\"><span class=\"octicon octicon-link\"></span></a>Checking the status of the droplet</h3>\n\n<div class=\"highlight highlight-source-python\"><pre>actions <span class=\"pl-k\">=</span> droplet.get_actions()\n<span class=\"pl-k\">for</span> action <span class=\"pl-k\">in</span> actions:\n    action.load()\n    <span class=\"pl-c\"># Once it shows complete, droplet is up and running</span>\n    <span class=\"pl-k\">print</span> action.status</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#testing\"><span class=\"octicon octicon-link\"></span></a>Testing</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#test-using-docker\"><span class=\"octicon octicon-link\"></span></a>Test using Docker</h3>\n\n<p>To test this python-digitalocean you can use <a href=\"https://www.docker.com\">docker</a> to have a <strong>clean environment automatically</strong>. First you have to build the container by running in your shell on the repository directory:</p>\n\n<pre><code>docker build -t \"pdo-tests\" .\n</code></pre>\n\n<p>Then you can run all the tests (for both python 2 and python 3)</p>\n\n<pre><code>docker run pdo-tests\n</code></pre>\n\n<p><strong>Note</strong>: This will use Ubuntu 14.04 as base and use your repository to run tests. So every time you edit some files, please run these commands to perform tests on your changes.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#testing-using-pytest-manually\"><span class=\"octicon octicon-link\"></span></a>Testing using pytest manually</h3>\n\n<p>Use <a href=\"http://pytest.org/\">pytest</a> to perform testing. It is recommended to use a dedicated virtualenv to perform tests, using these commands:</p>\n\n<pre><code>$ virtualenv /tmp/digitalocean_env\n$ source /tmp/digitalocean_env/bin/activate\n$ pip install -r requirements.txt\n</code></pre>\n\n<p>To run all the tests manually use py.test command:</p>\n\n<pre><code>$ py.test\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/koalalorenzo/python-digitalocean#links\"><span class=\"octicon octicon-link\"></span></a>Links</h2>\n\n',1),(73,'JamieH/DigitalOcean-CSharp','https://github.com/JamieH/DigitalOcean-CSharp',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>C# bindings for the Digital Ocean API</p>\n\n<p>A nuget package can be found <a href=\"https://www.nuget.org/packages/DigitalOcean-CSharp/\">here</a> and an example of usage is included <a href=\"https://github.com/JamieH/DigitalOcean-CSharp/blob/master/DOAPIExample/Program.cs\">here</a>.</p>\n',1),(74,'valerylisay/digitalocean-api','https://github.com/valerylisay/digitalocean-api',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Simple and easy to use package that provides access to Digital Ocean API v2.</p>\n\n\n\n<p>With <strong>pip</strong></p>\n\n<pre><code>pip install digitalocean-api\n</code></pre>\n\n<p>Or with <strong>setuptools</strong></p>\n\n<pre><code>python setup.py install\n</code></pre>\n\n\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;&gt;</span> <span class=\"pl-k\">from</span> digitalocean <span class=\"pl-k\">import</span> ClientV2\n<span class=\"pl-k\">&gt;&gt;&gt;</span> client <span class=\"pl-k\">=</span> ClientV2(<span class=\"pl-smi\">token</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>your_token_here<span class=\"pl-pds\">\'</span></span>)\n<span class=\"pl-k\">&gt;&gt;&gt;</span> client.droplets.all()\n{u\'droplets\': [{u\'status\': u\'active\', u\'kernel\': {u\'version\': u\'2.6.32-431.1.2.0.1.el6.i686\', u\'id\': 379, u\'name\': u\'CentOS 6.x x32 vmlinuz-2.6.32-431.1.2.0.1.el6.i686\'}, u\'locked\': False, u\'name\': u\'dropletname.com\', u\'backup_ids\': [], u\'region\': {u\'available\': True, u\'sizes\': [u\'512mb\', u\'2gb\', u\'4gb\', u\'8gb\', u\'32gb\', u\'48gb\', u\'16gb\', u\'64gb\', u\'1gb\'], u\'features\': [u\'virtio\', u\'private_networking\', u\'backups\'], u\'slug\': u\'ams2\', u\'name\': u\'Amsterdam 2\'}, u\'snapshot_ids\': [], u\'networks\': {u\'v4\': [{u\'type\': u\'public\', u\'netmask\': u\'255.255.255.0\', u\'ip_address\': u\'188.xxx.xxx.xxx\', u\'gateway\': u\'188.xxx.xxx.1\'}], u\'v6\': []}, u\'vcpus\': 1, u\'features\': [u\'virtio\'], u\'image\': {u\'slug\': u\'centos-6-5-x32\', u\'name\': u\'CentOS 6.5 x32\', u\'created_at\': u\'2014-05-02T20:16:38Z\', u\'id\': 3448674, u\'regions\': [u\'nyc1\', u\'ams1\', u\'sfo1\', u\'nyc2\', u\'ams2\', u\'sgp1\', u\'lon1\', u\'nyc3\', u\'ams3\'], u\'distribution\': u\'CentOS\', u\'public\': True}, u\'memory\': 1024, u\'created_at\': u\'2014-08-13T12:15:58Z\', u\'disk\': 30, u\'id\': 2323856, u\'size\': {u\'price_monthly\': 10.0, u\'transfer\': 2, u\'slug\': u\'1gb\', u\'price_hourly\': 0.01488}}], u\'meta\': {u\'total\': 1}}\n<span class=\"pl-k\">&gt;&gt;&gt;</span> \n<span class=\"pl-k\">&gt;&gt;&gt;</span> client.droplets.get(<span class=\"pl-smi\">droplet_id</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2323856</span>)\n{u\'droplet\': {u\'status\': u\'active\', u\'kernel\': {u\'version\': u\'2.6.32-431.1.2.0.1.el6.i686\', u\'id\': 379, u\'name\': u\'CentOS 6.x x32 vmlinuz-2.6.32-431.1.2.0.1.el6.i686\'}, u\'locked\': False, u\'name\': u\'dropletname.com\', u\'backup_ids\': [], u\'region\': {u\'available\': True, u\'sizes\': [u\'512mb\', u\'2gb\', u\'4gb\', u\'8gb\', u\'32gb\', u\'48gb\', u\'16gb\', u\'64gb\', u\'1gb\'], u\'features\': [u\'virtio\', u\'private_networking\', u\'backups\'], u\'slug\': u\'ams2\', u\'name\': u\'Amsterdam 2\'}, u\'snapshot_ids\': [], u\'networks\': {u\'v4\': [{u\'type\': u\'public\', u\'netmask\': u\'255.255.255.0\', u\'ip_address\': u\'188.xxx.xxx.xxx\', u\'gateway\': u\'188.xxx.xxx.1\'}], u\'v6\': []}, u\'vcpus\': 1, u\'features\': [u\'virtio\'], u\'image\': {u\'slug\': u\'centos-6-5-x32\', u\'name\': u\'CentOS 6.5 x32\', u\'created_at\': u\'2014-05-02T20:16:38Z\', u\'id\': 3448674, u\'regions\': [u\'nyc1\', u\'ams1\', u\'sfo1\', u\'nyc2\', u\'ams2\', u\'sgp1\', u\'lon1\', u\'nyc3\', u\'ams3\'], u\'distribution\': u\'CentOS\', u\'public\': True}, u\'memory\': 1024, u\'created_at\': u\'2014-08-13T12:15:58Z\', u\'disk\': 30, u\'id\': 2323856, u\'size\': {u\'price_monthly\': 10.0, u\'transfer\': 2, u\'slug\': u\'1gb\', u\'price_hourly\': 0.01488}}}\n<span class=\"pl-k\">&gt;&gt;&gt;</span> \n<span class=\"pl-k\">&gt;&gt;&gt;</span> client.droplets.shutdown(<span class=\"pl-smi\">droplet_id</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2323856</span>)\n{<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>action<span class=\"pl-pds\">\'</span></span>: {<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>status<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>in-progress<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>resource_id<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-c1\">2323856</span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>region<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>ams2<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>completed_at<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-c1\">None</span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>started_at<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>2014-09-15T11:04:36Z<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>type<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>shutdown<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-c1\">32469004</span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>resource_type<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>droplet<span class=\"pl-pds\">\'</span></span>}}\n<span class=\"pl-k\">&gt;&gt;&gt;</span> \n<span class=\"pl-k\">&gt;&gt;&gt;</span> client.droplets.get_droplet_action(<span class=\"pl-smi\">droplet_id</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2323856</span>, <span class=\"pl-smi\">action_id</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32469004</span>)\n{<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>action<span class=\"pl-pds\">\'</span></span>: {<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>status<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>completed<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>resource_id<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-c1\">2323856</span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>region<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>ams2<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>completed_at<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>2014-09-15T11:05:13Z<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>started_at<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>2014-09-15T11:04:36Z<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>type<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>shutdown<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-c1\">32469004</span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>resource_type<span class=\"pl-pds\">\'</span></span>: <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\'</span>droplet<span class=\"pl-pds\">\'</span></span>}}</pre></div>\n\n\n\n<ol><li>Documentation</li>\n<li>Dealing with pagination</li>\n<li>Better API with manager and models</li>\n</ol>',1),(75,'andrewchilds/overcast','https://github.com/andrewchilds/overcast',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Overcast is a simple command line program designed to make it easy to spin up, configure and manage clusters of machines, without the learning curve or complexity of existing server management tools.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/f6b14371011f49989e8aee84654c6036e065b6e4/687474703a2f2f692e696d6775722e636f6d2f357831674b56432e706e67\"><img src=\"https://camo.githubusercontent.com/f6b14371011f49989e8aee84654c6036e065b6e4/687474703a2f2f692e696d6775722e636f6d2f357831674b56432e706e67\" alt=\"Screenshot\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#features\"><span class=\"octicon octicon-link\"></span></a>Features</h2>\n\n<p>Create, reboot and destroy instances across DigitalOcean, Linode and Amazon, or locally using Vagrant + Virtualbox.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># Spin up a new Ubuntu 14.04 instance on DigitalOcean:</span>\n$ overcast digitalocean create db-01\n\n<span class=\"pl-c\"># Spin up a new Ubuntu 14.04 instance on Linode:</span>\n$ overcast linode create db-02\n\n<span class=\"pl-c\"># Spin up a new Ubuntu 14.04 instance on EC2:</span>\n$ overcast aws create db-03 --user ubuntu\n$ overcast run db-03 allow_root_access_on_ec2\n$ overcast instance update db-03 --user root\n\n<span class=\"pl-c\"># Spin up a new locally-running Ubuntu 14.04 Virtualbox instance:</span>\n$ overcast virtualbox create db-04\n\n<span class=\"pl-c\"># Upgrade and install Redis across all of those instances in parallel:</span>\n$ overcast run db-<span class=\"pl-k\">*</span> install/core install/redis --parallel</pre></div>\n\n<p>Run multiple commands or multiple scripts on any of your instances over SSH. Commands can be run sequentially or in parallel. Avoid vendor lock-in by running and testing your deployment scripts across different providers.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># Run bundled scripts, e.g. a LAMP stack:</span>\n$ overcast run lamp-01 install/core install/apache install/mysql install/php\n\n<span class=\"pl-c\"># Run scripts relative to the current working directory or using absolute path:</span>\n$ overcast run app-cluster ./recipes/my-app/install /path/to/script\n\n<span class=\"pl-c\"># Run sequences of commands and scripts across multiple machines in parallel:</span>\n$ overcast run db ./script.sh uptime <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>free -m<span class=\"pl-pds\">\"</span></span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>df -h<span class=\"pl-pds\">\"</span></span> --parallel</pre></div>\n\n<p>Quickly SSH in to any instance by name.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ overcast ssh app-01</pre></div>\n\n<p>Push and pull files between your local machine and any of your instances using SCP or rsync. Dynamically rewrite file paths to include the instance name using <code>{instance}</code> in either source or destination.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ overcast push app nginx/myapp.conf /etc/nginx/sites-enabled/myapp.conf\n$ overcast pull all /etc/nginx/sites-enabled/myapp.conf nginx/{instance}.myapp.conf</pre></div>\n\n<p>Overcast is a thin wrapper around your SSH client and doesn\'t install or leave anything on the servers you communicate with, so Overcast itself has no real attack surface.</p>\n\n<p>A library of <a href=\"https://github.com/andrewchilds/overcast/tree/master/scripts\">scripts</a> and <a href=\"https://github.com/andrewchilds/overcast/tree/master/recipes\">recipes</a> are included which make it easy to deploy a number of common software stacks and applications. The libraries were written for and tested against Ubuntu/Debian systems, but you can just as easily run your own custom scripts.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ overcast run all /absolute/path/to/script ./relative/path/to/other/script</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#concepts\"><span class=\"octicon octicon-link\"></span></a>Concepts</h2>\n\n<ul><li><strong>Instances</strong> are any machine you can SSH into.</li>\n<li><strong>Clusters</strong> are sets of instances.</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#installation-os-xlinux\"><span class=\"octicon octicon-link\"></span></a>Installation (OS X/Linux)</h2>\n\n<ol><li><p>Install <a href=\"https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager\">Node.js</a> if not already installed.</p></li>\n<li><p>Install Overcast using npm.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ npm -g install overcast</pre></div></li>\n<li><p>You can now use Overcast from any directory. Running any overcast command from anywhere will create the <code>~/.overcast</code> config directory if it doesn\'t already exist. Add your API keys to <code>~/.overcast/variables.json</code> to use their respective commands, either manually or using the <code>var</code> command:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ overcast var <span class=\"pl-c1\">set</span> AWS_KEY my_aws_key\n$ overcast var <span class=\"pl-c1\">set</span> AWS_SECRET my_aws_secret\n$ overcast var <span class=\"pl-c1\">set</span> DIGITALOCEAN_CLIENT_ID abc123\n$ overcast var <span class=\"pl-c1\">set</span> DIGITALOCEAN_API_KEY abc123\n$ overcast var <span class=\"pl-c1\">set</span> LINODE_API_KEY abc123</pre></div></li>\n<li><p>To make working with Overcast easier, you can add bash tab completion by adding the following to your <code>.bash_profile</code>:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># Overcast Tab completion</span>\n<span class=\"pl-en\">_overcast_completions</span>() {\n  <span class=\"pl-k\">local</span> cur=<span class=\"pl-smi\">${COMP_WORDS[COMP_CWORD]}</span>\n  COMPREPLY=(<span class=\"pl-s\"><span class=\"pl-pds\">$(</span><span class=\"pl-c1\">compgen</span> -W <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-s\"><span class=\"pl-pds\">`</span>overcast completions<span class=\"pl-pds\">`</span></span><span class=\"pl-pds\">\"</span></span> -- <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$cur</span><span class=\"pl-pds\">\"</span></span><span class=\"pl-pds\">)</span></span>)\n  <span class=\"pl-k\">return</span> 0\n}\n<span class=\"pl-c1\">complete</span> -F _overcast_completions overcast</pre></div></li>\n</ol><h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#installation-windows\"><span class=\"octicon octicon-link\"></span></a>Installation (Windows)</h2>\n\n<p>Using Overcast on Windows is possible, but <strong>unsupported</strong>. Instructions TBD.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#uninstallation\"><span class=\"octicon octicon-link\"></span></a>Uninstallation</h2>\n\n<p>Since Overcast is just a wrapper around SSH, there is nothing on your remote machines to uninstall. To uninstall Overcast from your local machine:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># To remove the Overcast package:</span>\n$ npm -g remove overcast\n<span class=\"pl-c\"># Optionally delete your Overcast SSH keys and configuration files:</span>\n$ rm -rf <span class=\"pl-k\">~</span>/.overcast</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#configuration\"><span class=\"octicon octicon-link\"></span></a>Configuration</h2>\n\n<p>Overcast looks for an <code>.overcast</code> directory in the current directory, a parent directory, or <code>~/.overcast</code>, in that order. This means you can have multiple configurations and treat your server infrastructure like source code.</p>\n\n<p>The command <code>overcast init</code> will create a new configuration in the current directory. The config directory looks like this:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>/.overcast\n  /files            <span class=\"pl-c\"># Files to be pushed to / pulled from instances</span>\n  /keys             <span class=\"pl-c\"># SSH keys, can be your own or auto-generated by overcast</span>\n    overcast.key\n    overcast.key.pub\n  /scripts          <span class=\"pl-c\"># Scripts to be run on instances</span>\n  clusters.json     <span class=\"pl-c\"># Cluster/instance definitions (see example.clusters.json)</span>\n  variables.json    <span class=\"pl-c\"># API keys, etc (see example.variables.json)</span></pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#design-goals\"><span class=\"octicon octicon-link\"></span></a>Design Goals</h2>\n\n<p>There are many server management frameworks out there already, but they generally involve a complex server-client implementation, a steep learning curve, or a giant, monolithic conceptual framework that requires taking a course to understand.</p>\n\n<p>I wanted something that had little to no learning curve, that did only what you asked it to do on the remote machines and nothing more, that just focused on multi-server provisioning and communication and leaves problems like process/state management and system monitoring to tools designed specifically for those problems.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#example-app-recipes\"><span class=\"octicon octicon-link\"></span></a>Example App Recipes</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#command-reference\"><span class=\"octicon octicon-link\"></span></a>Command Reference</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-aliases\"><span class=\"octicon octicon-link\"></span></a>overcast aliases</h3>\n\n<pre><code>Usage:\n  overcast aliases\n\nDescription:\n  Return a list of bash aliases for SSHing to your instances.\n\n  To use, add this to your .bash_profile:\n    test -f $HOME/.overcast_aliases &amp;&amp; source $HOME/.overcast_aliases\n\n  And then create the .overcast_aliases file:\n    overcast aliases &gt; $HOME/.overcast_aliases\n\n  Or to automatically refresh aliases in every new terminal window\n  (which will add a couple hundred milliseconds to your startup time),\n  add this to your .bash_profile:\n    overcast aliases &gt; $HOME/.overcast_aliases\n    source $HOME/.overcast_aliases\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-aws-boot\"><span class=\"octicon octicon-link\"></span></a>overcast aws boot</h3>\n\n<pre><code>Usage:\n  overcast aws boot [name]\n\nDescription:\n  Boot up an EC2 instance.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-aws-create\"><span class=\"octicon octicon-link\"></span></a>overcast aws create</h3>\n\n<pre><code>Usage:\n  overcast aws create [name] [options...]\n\nDescription:\n  Creates a new EC2 instance.\n\nOptions:                      Defaults:\n  --cluster CLUSTER           default\n  --availability-zone NAME    (default)\n  --image IMAGE               ami-64e27e0c (Ubuntu 14.04 64bit, EBS, us-east-1)\n  --monitoring                false\n  --region REGION             us-east-1\n  --security-group-ids IDS    (default)\n  --size SIZE                 t1.micro\n  --ssh-key PATH              overcast.key\n  --ssh-pub-key PATH          overcast.key.pub\n  --user USERNAME             root\n\nExamples:\n  # Specify size:\n  $ overcast aws create vm-01 --size m1.small --user ubuntu\n\n  # Specify image and region (Ubuntu 14.04 64bit, EBS, us-west-2):\n  $ overcast aws create vm-01 --region us-west-2 --image ami-978dd9a7 --user ubuntu\n\n  # Specify security groups, separated by spaces:\n  $ overcast aws create vm-01 --security-group-ids \"sg-12a34b56 sg-90c32ab1\" --user ubuntu\n\n  # Specify availability zone:\n  $ overcast aws create vm-01 --availability-zone us-east-1d --user ubuntu\n\n  # Enable root access:\n  $ overcast aws create vm-02 --user ubuntu\n  $ overcast run vm-02 allow_root_access_on_ec2\n  $ overcast instance update vm-02 --user root\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-aws-destroy\"><span class=\"octicon octicon-link\"></span></a>overcast aws destroy</h3>\n\n<pre><code>Usage:\n  overcast aws destroy [name] [options...]\n\nDescription:\n  Destroys an EC2 instance.\n  Using --force overrides the confirm dialog.\n\nOptions:     Defaults:\n  --force    false\n\nExamples:\n  $ overcast aws destroy vm-01\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-aws-instances\"><span class=\"octicon octicon-link\"></span></a>overcast aws instances</h3>\n\n<pre><code>Usage:\n  overcast aws instances [options...]\n\nDescription:\n  List all EC2 instances in your account.\n\nOptions:             Defaults:\n  --region REGION    us-east-1\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-aws-reboot\"><span class=\"octicon octicon-link\"></span></a>overcast aws reboot</h3>\n\n<pre><code>Usage:\n  overcast aws reboot [name]\n\nDescription:\n  Reboots an EC2 instance.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-aws-regions\"><span class=\"octicon octicon-link\"></span></a>overcast aws regions</h3>\n\n<pre><code>Usage:\n  overcast aws regions\n\nDescription:\n  List all EC2 regions.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-aws-shutdown\"><span class=\"octicon octicon-link\"></span></a>overcast aws shutdown</h3>\n\n<pre><code>Usage:\n  overcast aws shutdown [name]\n\nDescription:\n  Shut down an EC2 instance.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-cluster-count\"><span class=\"octicon octicon-link\"></span></a>overcast cluster count</h3>\n\n<pre><code>Usage:\n  overcast cluster count [name]\n\nDescription:\n  Return the number of instances in a cluster.\n\nExamples:\n  $ overcast cluster count db\n  &gt; 0\n  $ overcast instance create db.01 --cluster db\n  &gt; ...\n  $ overcast cluster count db\n  &gt; 1\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-cluster-create\"><span class=\"octicon octicon-link\"></span></a>overcast cluster create</h3>\n\n<pre><code>Usage:\n  overcast cluster create [name]\n\nDescription:\n  Creates a new cluster.\n\nExamples:\n  $ overcast cluster create db\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-cluster-rename\"><span class=\"octicon octicon-link\"></span></a>overcast cluster rename</h3>\n\n<pre><code>Usage:\n  overcast cluster rename [name] [new-name]\n\nDescription:\n  Renames a cluster.\n\nExamples:\n  $ overcast cluster rename app-cluster app-cluster-renamed\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-cluster-remove\"><span class=\"octicon octicon-link\"></span></a>overcast cluster remove</h3>\n\n<pre><code>Usage:\n  overcast cluster remove [name]\n\nDescription:\n  Removes a cluster from the index. If the cluster has any instances\n  attached to it, they will be moved to the \"orphaned\" cluster.\n\nExamples:\n  $ overcast cluster remove db\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-completions\"><span class=\"octicon octicon-link\"></span></a>overcast completions</h3>\n\n<pre><code>Usage:\n  overcast completions\n\nDescription:\n  Return an array of commands, cluster names, and instance names for use\n  in bash tab completion.\n\n  To enable tab completion in bash, add this to your .bash_profile:\n\n  _overcast_completions() {\n    local cur=${COMP_WORDS[COMP_CWORD]}\n    COMPREPLY=($(compgen -W \"`overcast completions`\" -- \"$cur\"))\n    return 0\n  }\n  complete -F _overcast_completions overcast\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-destroy\"><span class=\"octicon octicon-link\"></span></a>overcast destroy</h3>\n\n<pre><code>  overcast destroy [instance]\n    Destroy an instance using the provider API.\n\n      Option      | Default\n      --force     | false\n\n    Example:\n    $ overcast destroy app-01\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-boot\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean boot</h3>\n\n<pre><code>Usage:\n  overcast digitalocean boot [name]\n\nDescription:\n  Boot up an instance if powered off, otherwise do nothing.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-create\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean create</h3>\n\n<pre><code>Usage:\n  overcast digitalocean create [name] [options...]\n\nDescription:\n  Creates a new instance on DigitalOcean.\n\nOptions:                  Defaults:\n  --cluster CLUSTER       default\n  --ssh-port PORT         22\n  --ssh-key PATH          overcast.key\n  --ssh-pub-key PATH      overcast.key.pub\n  --region REGION         nyc3\n  --image IMAGE           ubuntu-14-04-x64\n  --size SIZE             512mb\n  --backups-enabled       false\n  --private-networking    false\n\nExamples:\n  # Match using slugs:\n  $ overcast digitalocean create vm-01 --size 2gb --region sfo1\n\n  # Match using IDs or names:\n  $ overcast digitalocean create vm-02 --region \"London 1\" --image 6374128\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-destroy\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean destroy</h3>\n\n<pre><code>Usage:\n  overcast digitalocean destroy [name] [options...]\n\nDescription:\n  Destroys a DigitalOcean droplet and removes it from your account.\n  Using --force overrides the confirm dialog.\n\nOptions:     Defaults:\n  --force    false\n\nExamples:\n  $ overcast digitalocean destroy vm-01\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-images\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean images</h3>\n\n<pre><code>Usage:\n  overcast digitalocean images\n\nDescription:\n  List all images, including snapshots.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-instances\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean instances</h3>\n\n<pre><code>Usage:\n  overcast digitalocean instances\n\nDescription:\n  List all instances in your account.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-reboot\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean reboot</h3>\n\n<pre><code>Usage:\n  overcast digitalocean reboot [name]\n\nDescription:\n  Reboot an instance using the provider API.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-regions\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean regions</h3>\n\n<pre><code>Usage:\n  overcast digitalocean regions\n\nDescription:\n  List all available regions.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-rebuild\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean rebuild</h3>\n\n<pre><code>Usage:\n  overcast digitalocean rebuild [name] [image]\n\nDescription:\n  Rebuilds an existing instance on DigitalOcean, preserving the IP address.\n  [image] can be image ID, name or slug.\n\nExamples:\n  # Rebuild an instance using a readymade image:\n  $ overcast digitalocean rebuild vm-01 ubuntu-14-04-x64\n\n  # Rebuild an instance using a snapshot:\n  $ overcast digitalocean rebuild vm-01 \"vm-01 backup\"\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-resize\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean resize</h3>\n\n<pre><code>Usage:\n  overcast digitalocean resize [name] [size] [options...]\n\nDescription:\n  Shutdown, resize, and reboot a DigitalOcean instance.\n  [size] can be a size ID, name or slug.\n  If the --skip-boot flag is used, the instance will stay powered off.\n\nOptions:         Defaults:\n  --skip-boot    false\n\nExamples:\n  # Resize an instance to 2gb:\n  $ overcast digitalocean resize vm-01 2gb\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-snapshot\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean snapshot</h3>\n\n<pre><code>Usage:\n  overcast digitalocean snapshot [name] [snapshot-name]\n\nDescription:\n  Creates a named snapshot of a droplet. This will reboot the instance.\n\nExamples:\n  $ overcast digitalocean snapshot vm-01 vm-01-snapshot\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-snapshots\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean snapshots</h3>\n\n<pre><code>Usage:\n  overcast digitalocean snapshots\n\nDescription:\n  List all available snapshots in your account.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-shutdown\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean shutdown</h3>\n\n<pre><code>Usage:\n  overcast digitalocean shutdown [name]\n\nDescription:\n  Shut down an instance using the provider API.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-sizes\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean sizes</h3>\n\n<pre><code>Usage:\n  overcast digitalocean sizes\n\nDescription:\n  List all available instance sizes.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-digitalocean-sync\"><span class=\"octicon octicon-link\"></span></a>overcast digitalocean sync</h3>\n\n<pre><code>Usage:\n  overcast digitalocean sync [name]\n\nDescription:\n  Fetch and update instance metadata.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-expose\"><span class=\"octicon octicon-link\"></span></a>overcast expose</h3>\n\n<pre><code>Usage:\n  overcast expose [instance|cluster|all] [port...] [options]\n\nDescription:\n  Reset the exposed ports on the instance or cluster using iptables.\n  This will fail if you don\'t include the current SSH port.\n  Specifying --whitelist will restrict all ports to the specified address(es).\n  These can be individual IPs or CIDR ranges, such as \"192.168.0.0/24\".\n\n  Expects an Ubuntu server, untested on other distributions.\n\nOptions:\n  --user USERNAME\n  --password PASSWORD\n  --whitelist \"IP|RANGE\"\n  --whitelist-PORT \"IP|RANGE\"\n\nExamples:\n  Allow SSH, HTTP and HTTPS connections from anywhere:\n  $ overcast expose app 22 80 443\n\n  Allow SSH from anywhere, only allow Redis connections from 1.2.3.4:\n  $ overcast expose redis 22 6379 --whitelist-6379 \"1.2.3.4\"\n\n  Only allow SSH and MySQL connections from 1.2.3.4 or from 5.6.7.xxx:\n  $ overcast expose mysql 22 3306 --whitelist \"1.2.3.4 5.6.7.0/24\"\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-exposed\"><span class=\"octicon octicon-link\"></span></a>overcast exposed</h3>\n\n<pre><code>Usage:\n  overcast exposed [instance|cluster|all]\n\nDescription:\n  List the exposed ports on the instance or cluster.\n  Expects an Ubuntu server, untested on other distributions.\n\nOptions:\n  --user USERNAME\n  --password PASSWORD\n  --machine-readable, --mr\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-get\"><span class=\"octicon octicon-link\"></span></a>overcast get</h3>\n\n<pre><code>Usage:\n  overcast get [instance|cluster|all] [attr...] [options...]\n\nDescription:\n  Returns the attribute(s) for the instance or cluster, one per line,\n  or space-delimited using the --single-line option.\n  \"origin\" is a compound attribute that returns user@ip:ssh-port.\n\nOptions:               Defaults:\n  --single-line, -s    false\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-health\"><span class=\"octicon octicon-link\"></span></a>overcast health</h3>\n\n<pre><code>Usage:\n  overcast health [instance|cluster|all]\n\nDescription:\n  Outputs common health statistics in JSON format.\n  Expects an Ubuntu or Debian server.\n\nExamples:\n  Example JSON response:\n  {\n    \"my_instance_name\": {\n      \"cpu_1min\": 0.53,\n      \"cpu_5min\": 0.05,\n      \"cpu_15min\": 0.10,\n      \"disk_total\": 19592,     // in MB\n      \"disk_used\": 13445,      // in MB\n      \"disk_free\": 5339,       // in MB\n      \"mem_total\": 1000,       // in MB\n      \"mem_used\": 904,         // in MB\n      \"mem_free\": 96,          // in MB\n      \"cache_used\": 589,       // in MB\n      \"cache_free\": 410,       // in MB\n      \"swap_total\": 255,       // in MB\n      \"swap_used\": 124,        // in MB\n      \"swap_free\": 131,        // in MB\n      \"tcp\": 152,              // open TCP connections\n      \"rx_bytes\": 196396703,   // total bytes received\n      \"tx_bytes\": 47183785,    // total bytes transmitted\n      \"io_reads\": 1871210,     // total bytes read\n      \"io_writes\": 6446448,    // total bytes written\n      \"processes\": [\n        {\n          \"user\": \"root\",\n          \"pid\": 1,\n          \"cpu%\": 0,\n          \"mem%\": 0,\n          \"time\": \"0:01\",\n          \"command\": \"/sbin/init\"\n        }\n      ]\n    }\n  }\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-help\"><span class=\"octicon octicon-link\"></span></a>overcast help</h3>\n\n<pre><code>  Overcast v0.6.12\n\n  Source code, issues, pull requests:\n    https://github.com/andrewchilds/overcast\n\n  Usage:\n    overcast [command] [options...]\n\n  Help:\n    overcast help\n    overcast help [command]\n    overcast [command] help\n\n  Commands:\n    aliases aws cluster completions destroy digitalocean expose\n    exposed get health import info init instance key linode list\n    ping port pull push reboot remove run scriptvar slack ssh\n    tunnel var virtualbox wait\n\n  Config directory:\n    /path/to/.overcast\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-import\"><span class=\"octicon octicon-link\"></span></a>overcast import</h3>\n\n<pre><code>Usage:\n  overcast import [name] [ip] [options...]\n\nDescription:\n  Imports an existing instance to a cluster.\n\nOptions:                 Defaults:\n  --cluster CLUSTER      default\n  --ssh-port PORT        22\n  --ssh-key PATH         overcast.key\n  --user USERNAME        root\n  --password PASSWORD\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-info\"><span class=\"octicon octicon-link\"></span></a>overcast info</h3>\n\n<pre><code>Usage:\n  overcast info\n  overcast info [name]\n\nDescription:\n  Pretty-prints the complete clusters.json file, stored here:\n  /path/to/.overcast/clusters.json\n  Optionally display only instances matching [name].\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-init\"><span class=\"octicon octicon-link\"></span></a>overcast init</h3>\n\n<pre><code>Usage:\n  overcast init\n\nDescription:\n  Create an .overcast config directory in the current working directory.\n  No action taken if one already exists.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-instance-get\"><span class=\"octicon octicon-link\"></span></a>overcast instance get</h3>\n\n<pre><code>Usage:\n  overcast instance get [instance|cluster|all] [attr...] [options...]\n\nDescription:\n  Returns the attribute(s) for the instance or cluster, one per line,\n  or space-delimited using the --single-line option.\n  \"origin\" is a compound attribute that returns user@ip:ssh-port.\n\nOptions:               Defaults:\n  --single-line, -s    false\n\nExamples:\n  $ overcast instance get app-01 origin\n  root@1.2.3.4:22\n\n  $ overcast instance get app-cluster ip\n  127.0.0.1\n  127.0.0.2\n  127.0.0.3\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-instance-import\"><span class=\"octicon octicon-link\"></span></a>overcast instance import</h3>\n\n<pre><code>Usage:\n  overcast instance import [name] [ip] [options...]\n\nDescription:\n  Imports an existing instance to a cluster.\n\nOptions:                 Defaults:\n  --cluster CLUSTER      default\n  --ssh-port PORT        22\n  --ssh-key PATH         overcast.key\n  --user USERNAME        root\n  --password PASSWORD\n\nExamples:\n  $ overcast instance import app.01 127.0.0.1 --cluster app \\\n      --ssh-port 22222 --ssh-key $HOME/.ssh/id_rsa\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-instance-list\"><span class=\"octicon octicon-link\"></span></a>overcast instance list</h3>\n\n<pre><code>Usage:\n  overcast instance list [cluster...]\n\nDescription:\n  Returns all instance names, one per line.\n  Optionally limit to one or more clusters.\n\nExamples:\n  $ overcast instance list\n  $ overcast instance list app-cluster db-cluster\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-instance-remove\"><span class=\"octicon octicon-link\"></span></a>overcast instance remove</h3>\n\n<pre><code>Usage:\n  overcast instance remove [name]\n\nDescription:\n  Removes an instance from the index.\n  The server itself is not affected by this action.\n\nExamples:\n  $ overcast instance remove app-01\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-instance-update\"><span class=\"octicon octicon-link\"></span></a>overcast instance update</h3>\n\n<pre><code>Usage:\n  overcast instance update [instance|cluster|all] [options...]\n\nDescription:\n  Update any instance property. Specifying --cluster will move the instance\n  to that cluster. Specifying --name will rename the instance.\n\nOptions:\n  --name NAME\n  --cluster CLUSTER\n  --ip IP\n  --ssh-port PORT\n  --ssh-key PATH\n  --user USERNAME\n  --password PASSWORD\n\nExamples:\n  # Update the user and ssh-key of an instance:\n  $ overcast instance update app.01 --user myuser --ssh-key /path/to/key\n\n  # Update ssh-port of a cluster:\n  $ overcast instance update app-cluster --ssh-port 22222\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-key-create\"><span class=\"octicon octicon-link\"></span></a>overcast key create</h3>\n\n<pre><code>Usage:\n  overcast key create [name]\n\nDescription:\n  Creates a new SSH key in the current .overcast config.\n\nExamples:\n  $ overcast key create myKeyName\n  New SSH key \"myKeyName\" created.\n   - /path/to/.overcast/keys/myKeyName.key\n   - /path/to/.overcast/keys/myKeyName.key.pub\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-key-delete\"><span class=\"octicon octicon-link\"></span></a>overcast key delete</h3>\n\n<pre><code>Usage:\n  overcast key delete [name]\n\nDescription:\n  Deletes SSH public/private key files from the current .overcast config.\n\nExamples:\n  $ overcast key delete myKeyName\n  SSH key \"myKeyName\" deleted.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-key-get\"><span class=\"octicon octicon-link\"></span></a>overcast key get</h3>\n\n<pre><code>Usage:\n  overcast key get [name] [option]\n\nDescription:\n  Display the requested SSH key data or path from the current .overcast config.\n  Defaults to displaying the public key data if no option found.\n\nOptions:\n  --public-data\n  --private-data\n  --public-path\n  --private-path\n\nExamples:\n  $ overcast key get myKeyName\n  [public key data]\n  $ overcast key get myKeyName --private-data\n  [private key data]\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-key-list\"><span class=\"octicon octicon-link\"></span></a>overcast key list</h3>\n\n<pre><code>Usage:\n  overcast key list\n\nDescription:\n  List the found SSH key names in the current .overcast config.\n\nExamples:\n  $ overcast key list\n  myKeyName\n  overcast\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-key-push\"><span class=\"octicon octicon-link\"></span></a>overcast key push</h3>\n\n<pre><code>Usage:\n  overcast key push [instance|cluster|all] [name|path] [options...]\n\nDescription:\n  Push a public SSH key to an instance or cluster. Accepts a key name,\n  filename, or full path. This will overwrite the existing authorized_keys\n  file, unless you use --append.\n\nOptions:             Defaults:\n  --user USERNAME\n  --append, -a       false\n\nExamples:\n  # Generate new SSH key pair:\n  $ overcast key create newKey\n\n  # Push public key to instance, update instance config to use private key:\n  $ overcast key push vm-01 newKey\n  $ overcast instance update vm-01 --ssh-key newKey.key\n\n  # Same as above but using key path instead of key name:\n  $ overcast key push vm-02 \"~/.ssh/id_rsa.pub\"\n  $ overcast instance update vm-02 --ssh-key \"~/.ssh/id_rsa\"\n\n  # Push public key to instance using arbitrary user:\n  $ overcast key push vm-03 newKey --user myOtherUser\n\n  # Append public key to authorized_keys instead of overwriting:\n  $ overcast key push vm-04 newKey --append\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-boot\"><span class=\"octicon octicon-link\"></span></a>overcast linode boot</h3>\n\n<pre><code>Usage:\n  overcast linode boot [name]\n\nDescription:\n  Boot up an instance if powered off, otherwise do nothing.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-create\"><span class=\"octicon octicon-link\"></span></a>overcast linode create</h3>\n\n<pre><code>Usage:\n  overcast linode create [name] [options...]\n\nDescription:\n  Creates a new instance on Linode.\n\nOptions:                 Defaults:\n  --cluster CLUSTER      default\n  --image IMAGE          ubuntu-14-04-lts\n  --kernel KERNEL        Latest 64 bit\n  --password PASSWORD    autogenerated\n  --payment-term ID      1 (monthly, if not metered)\n  --region REGION        newark\n  --size SIZE            1024\n  --ssh-key PATH         overcast.key\n  --ssh-pub-key PATH     overcast.key.pub\n  --swap MB              256\n\nExamples:\n  # Specified size:\n  $ overcast linode create vm-01 --size 4096\n\n  # Specified image and region:\n  $ overcast aws create vm-01 --image \"Debian 7.7\" --region london\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-destroy\"><span class=\"octicon octicon-link\"></span></a>overcast linode destroy</h3>\n\n<pre><code>Usage:\n  overcast linode destroy [name] [options...]\n\nDescription:\n  Destroys a Linode instance.\n  Using --force overrides the confirm dialog.\n\nOptions:     Defaults:\n  --force    false\n\nExamples:\n  $ overcast linode destroy vm-01 --force\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-images\"><span class=\"octicon octicon-link\"></span></a>overcast linode images</h3>\n\n<pre><code>Usage:\n  overcast linode images\n\nDescription:\n  List all available images.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-instances\"><span class=\"octicon octicon-link\"></span></a>overcast linode instances</h3>\n\n<pre><code>Usage:\n  overcast linode instances\n\nDescription:\n  List all instances in your account.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-kernels\"><span class=\"octicon octicon-link\"></span></a>overcast linode kernels</h3>\n\n<pre><code>Usage:\n  overcast linode kernels\n\nDescription:\n  List all available kernels.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-reboot\"><span class=\"octicon octicon-link\"></span></a>overcast linode reboot</h3>\n\n<pre><code>Usage:\n  overcast linode reboot [name]\n\nDescription:\n  Reboot an instance using the provider API.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-regions\"><span class=\"octicon octicon-link\"></span></a>overcast linode regions</h3>\n\n<pre><code>Usage:\n  overcast linode regions\n\nDescription:\n  List all available regions.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-resize\"><span class=\"octicon octicon-link\"></span></a>overcast linode resize</h3>\n\n<pre><code>Usage:\n  overcast linode resize [name] [size] [options...]\n\nDescription:\n  Shutdown, resize, and reboot a Linode instance.\n  [size] can be a size ID, name or slug.\n  If the --skip-boot flag is used, the instance will stay powered off.\n\nOptions:         Defaults:\n  --skip-boot    false\n\nExamples:\n  # Resize an instance to 4096:\n  $ overcast linode resize vm-01 4096\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-shutdown\"><span class=\"octicon octicon-link\"></span></a>overcast linode shutdown</h3>\n\n<pre><code>Usage:\n  overcast linode shutdown [name]\n\nDescription:\n  Shut down an instance using the provider API.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-sizes\"><span class=\"octicon octicon-link\"></span></a>overcast linode sizes</h3>\n\n<pre><code>Usage:\n  overcast linode sizes\n\nDescription:\n  List all available instance sizes.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-linode-sync\"><span class=\"octicon octicon-link\"></span></a>overcast linode sync</h3>\n\n<pre><code>Usage:\n  overcast linode sync [name]\n\nDescription:\n  Fetch and update instance metadata.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-list\"><span class=\"octicon octicon-link\"></span></a>overcast list</h3>\n\n<pre><code>Usage:\n  overcast list\n\nDescription:\n  List your cluster and instance definitions.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-ping\"><span class=\"octicon octicon-link\"></span></a>overcast ping</h3>\n\n<pre><code>Usage:\n  overcast ping [instance|cluster|all] [options]\n\nDescription:\n  Display the average ping time for an instance or cluster.\n\nOptions:             Defaults:\n  --count N, -c N    3\n\nExamples:\n  $ overcast ping app-01\n  $ overcast ping db --count 5\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-port\"><span class=\"octicon octicon-link\"></span></a>overcast port</h3>\n\n<pre><code>Usage:\n  overcast port [instance|cluster|all] [port]\n\nDescription:\n  Change the SSH port for an instance or a cluster. This command fails\n  if the new port has not been previously opened by iptables.\n  See also the \"expose\" and \"exposed\" commands.\n\nExamples:\n  # Expose only necessary ports:\n  $ overcast expose vm-01 22 55522 80 443\n\n  # Update SSH port from 22 to 55522:\n  $ overcast port vm-01 55522\n\n  # Close port 22:\n  $ overcast expose vm-01 55522 80 443\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-pull\"><span class=\"octicon octicon-link\"></span></a>overcast pull</h3>\n\n<pre><code>Usage:\n  overcast pull [instance|cluster|all] [source] [dest] [options...]\n\nDescription:\n  Pull a file or directory from an instance or cluster using scp by default,\n  or using rsync if the --rsync flag is used. Source is absolute or relative\n  to the home directory. Destination can be absolute or relative to the\n  .overcast/files directory. Any reference to {instance} in the destination\n  will be replaced with the instance name.\n\nOptions:                 Defaults:\n  --rsync                false\n  --user USERNAME\n  --password PASSWORD\n\nExamples:\n  Assuming instances \"app.01\" and \"app.02\", this will expand to:\n    - .overcast/files/app.01.bashrc\n    - .overcast/files/app.02.bashrc\n  $ overcast pull app .bashrc {instance}.bashrc\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-push\"><span class=\"octicon octicon-link\"></span></a>overcast push</h3>\n\n<pre><code>Usage:\n  overcast push [instance|cluster|all] [source] [dest] [options...]\n\nDescription:\n  Push a file or directory to an instance or cluster using scp by default,\n  or rsync if the --rsync flag is used. Source can be absolute or relative\n  to the .overcast/files directory. Destination can be absolute or relative\n  to the home directory. Any reference to {instance} in the source will be\n  replaced with the instance name.\n\nOptions:                 Defaults:\n  --rsync                false\n  --user USERNAME\n  --password PASSWORD\n\nExamples:\n  Assuming instances \"app.01\" and \"app.02\", this will expand to:\n    - .overcast/files/app.01.bashrc\n    - .overcast/files/app.02.bashrc\n  $ overcast push app {instance}.bashrc .bashrc\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-reboot\"><span class=\"octicon octicon-link\"></span></a>overcast reboot</h3>\n\n<pre><code>  overcast reboot [instance|cluster|all]\n    Reboot an instance or cluster.\n\n    If the instance was created using AWS, DigitalOcean or Linode,\n    this will use the provider API. Otherwise this will execute the \"reboot\"\n    command on the server and then wait until the server is responsive.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-remove\"><span class=\"octicon octicon-link\"></span></a>overcast remove</h3>\n\n<pre><code>Usage:\n  overcast remove [name]\n\nDescription:\n  Removes an instance from the index.\n  The server itself is not affected by this action.\n\nExamples:\n  $ overcast instance remove app-01\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-run\"><span class=\"octicon octicon-link\"></span></a>overcast run</h3>\n\n<pre><code>Usage:\n  overcast run [instance|cluster|all] [command|file...]\n\nDescription:\n  Execute commands or script files on an instance or cluster over SSH.\n  Commands will execute sequentially unless the --parallel flag is used.\n  An error will stop execution unless the --continueOnError flag is used.\n  Script files can be either absolute or relative path.\n\nOptions:                         Defaults:\n  --env \"KEY=VAL KEY=\'1 2 3\'\"\n  --user USERNAME\n  --password PASSWORD\n  --ssh-key PATH\n  --ssh-args ARGS\n  --continueOnError              false\n  --machine-readable, --mr       false\n  --parallel, -p                 false\n  --shell-command \"COMMAND\"      bash -s\n\nExamples:\n  # Run arbirary commands and files in sequence across all instances:\n  $ overcast run all uptime \"free -m\" \"df -h\" /path/to/my/script\n\n  # Setting environment variables:\n  $ overcast run app --env \"foo=\'bar bar\' testing=123\" env\n\n  # Use machine-readable output (no server prefix):\n  $ overcast run app-01 uptime --mr\n\n  # Run bundled and custom scripts in sequence:\n  $ overcast run db-* install/core install/redis ./my/install/script\n\n  # Pass along arbitrary SSH arguments, for example to force a pseudo-tty:\n  $ overcast run all /my/install/script --ssh-args \"-tt\"\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-scriptvar\"><span class=\"octicon octicon-link\"></span></a>overcast scriptvar</h3>\n\n<pre><code>Usage:\n  overcast scriptvar [instance|cluster|all] [filename] [key] [value]\n\nDescription:\n  Set a named variable in a remote file on an instance or cluster.\n  Expects a shell variable format, for example MY_VAR_NAME=\"my_value\"\n\nOptions:                      Defaults:\n  --user USERNAME\n  --password PASSWORD\n  --continueOnError           false\n  --machine-readable, --mr    false\n  --parallel, -p              false\n\nExamples:\n  $ overcast scriptvar app-01 /path/to/file.sh MY_API_TOKEN abc123\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-slack\"><span class=\"octicon octicon-link\"></span></a>overcast slack</h3>\n\n<pre><code>Usage:\n  overcast slack [message] [options...]\n\nDescription:\n  Sends a message to a Slack channel.\n  Requires a SLACK_WEBHOOK_URL property to be set in variables.json.\n  You can set that with the following command:\n  overcast var set SLACK_WEBHOOK_URL https://foo.slack.com/blah\n\nOptions:                Defaults:\n  --channel NAME        #alerts\n  --icon-emoji EMOJI    :cloud:\n  --icon-url URL\n  --user NAME           Overcast\n  --KEY VALUE\n\nExamples:\n  $ overcast slack \"Deploy completed.\" --icon-emoji \":satelite:\"\n  $ overcast slack \"Server stats\" --channel \"#general\" --cpu \"0.54 0.14 0.09\"\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-ssh\"><span class=\"octicon octicon-link\"></span></a>overcast ssh</h3>\n\n<pre><code>Usage:\n  overcast ssh [instance] [options...]\n\nDescription:\n  Opens an interactive SSH connection to an instance.\n\nOptions:\n  --user USERNAME\n  --password PASSWORD\n  --ssh-key PATH\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-tunnel\"><span class=\"octicon octicon-link\"></span></a>overcast tunnel</h3>\n\n<pre><code>Usage:\n  overcast tunnel [instance] [local-port((:hostname):remote-port)...]\n\nDescription:\n  Opens an SSH tunnel to the port(s) specified.\n  If only one port is specified, assume the same port for local/remote.\n  If no remote host is specified, assume the remote host itself (127.0.0.1).\n  Multiple tunnels can be opened over a single connection.\n\nOptions:\n  --user USERNAME\n  --password PASSWORD\n  --ssh-key PATH\n\nExamples:\n  # Tunnel local 5984 to remote 5984\n  $ overcast tunnel app-01 5984\n\n  # Tunnel local 8000 to remote 5984, local 8001 to remote 3000\n  $ overcast tunnel app-01 8000:5984 8001:3000\n\n  # Tunnel local 3000 to otherhost.com:4000\n  $ overcast tunnel app-01 3000:otherhost.com:4000\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-var-list\"><span class=\"octicon octicon-link\"></span></a>overcast var list</h3>\n\n<pre><code>Usage:\n  overcast var list\n\nDescription:\n  List variables in /path/to/.overcast/variables.json.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-var-set\"><span class=\"octicon octicon-link\"></span></a>overcast var set</h3>\n\n<pre><code>Usage:\n  overcast var set [name] [value]\n\nDescription:\n  Set a variable in /path/to/.overcast/variables.json.\n\nExamples:\n  $ overcast var set AWS_KEY myawskey12345\n  $ overcast var set MY_CUSTOM_VARIABLE_NAME foo\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-var-get\"><span class=\"octicon octicon-link\"></span></a>overcast var get</h3>\n\n<pre><code>Usage:\n  overcast var get [name]\n\nDescription:\n  Get a variable from /path/to/.overcast/variables.json.\n\nExamples:\n  $ overcast var get AWS_KEY\n  &gt; myawskey12345\n\n  $ overcast var get MY_CUSTOM_VARIABLE_NAME\n  &gt; foo\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-var-delete\"><span class=\"octicon octicon-link\"></span></a>overcast var delete</h3>\n\n<pre><code>Usage:\n  overcast var delete [name]\n\nDescription:\n  Delete a variable from /path/to/.overcast/variables.json.\n\nExamples:\n  $ overcast var delete MY_CUSTOM_VARIABLE_NAME\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-virtualbox-boot\"><span class=\"octicon octicon-link\"></span></a>overcast virtualbox boot</h3>\n\n<pre><code>Usage:\n  overcast virtualbox boot [name]\n\nDescription:\n  Boot up a Virtualbox instance.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-virtualbox-create\"><span class=\"octicon octicon-link\"></span></a>overcast virtualbox create</h3>\n\n<pre><code>Usage:\n  overcast virtualbox create [name] [options...]\n\nDescription:\n  Creates a new Virtualbox instance.\n\nOptions:                Defaults:\n  --cluster CLUSTER     default\n  --cpus COUNT          1\n  --image NAME          trusty64\n  --ram MB              512\n  --ip ADDRESS          192.168.22.10\n  --ssh-key PATH        overcast.key\n  --ssh-pub-key PATH    overcast.key.pub\n\nExamples:\n  $ overcast virtualbox create vm-01\n  $ overcast virtualbox create vm-02 --ram 1024 --image precise64\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-virtualbox-destroy\"><span class=\"octicon octicon-link\"></span></a>overcast virtualbox destroy</h3>\n\n<pre><code>Usage:\n  overcast virtualbox destroy [name] [options...]\n\nDescription:\n  Destroys a Virtualbox instance.\n  Using --force overrides the confirm dialog.\n\nOptions:     Defaults:\n  --force    false\n\nExamples:\n  $ overcast virtualbox destroy vm-01\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-virtualbox-reboot\"><span class=\"octicon octicon-link\"></span></a>overcast virtualbox reboot</h3>\n\n<pre><code>Usage:\n  overcast virtualbox reboot [name]\n\nDescription:\n  Reboots a Virtualbox instance.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-virtualbox-shutdown\"><span class=\"octicon octicon-link\"></span></a>overcast virtualbox shutdown</h3>\n\n<pre><code>Usage:\n  overcast virtualbox shutdown [name]\n\nDescription:\n  Shut down a Virtualbox instance.\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#overcast-wait\"><span class=\"octicon octicon-link\"></span></a>overcast wait</h3>\n\n<pre><code>Usage:\n  overcast wait [seconds]\n\nDescription:\n  Show a progress bar for a specified number of seconds.\n\nExamples:\n  $ overcast wait 30\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#running-the-tests\"><span class=\"octicon octicon-link\"></span></a>Running the Tests</h2>\n\n<p><a href=\"https://travis-ci.org/andrewchilds/overcast\"><img src=\"https://camo.githubusercontent.com/f779007e740c407c8aaf18b9d253aa4047d9e5e9/68747470733a2f2f7472617669732d63692e6f72672f616e647265776368696c64732f6f766572636173742e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a></p>\n\n\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#upgrading-overcast\"><span class=\"octicon octicon-link\"></span></a>Upgrading Overcast</h2>\n\n<div class=\"highlight highlight-source-shell\"><pre>npm -g update overcast</pre></div>\n\n<p>Configuration files are left alone during an upgrade.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>Contributions are welcome. If you\'ve got an idea for a feature or found a bug, please <a href=\"https://github.com/andrewchilds/overcast/issues\">open an issue</a>. If you\'re a developer and want to help improve Overcast, <a href=\"https://github.com/andrewchilds/overcast/pulls\">open a pull request</a> with your changes.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#hacking-overcast\"><span class=\"octicon octicon-link\"></span></a>Hacking Overcast</h3>\n\n<div class=\"highlight highlight-source-shell\"><pre>git clone git@github.com:andrewchilds/overcast.git\n<span class=\"pl-c1\">cd</span> overcast\n\n<span class=\"pl-c\"># To use local development version:</span>\nbin/overcast [args...]\n\n<span class=\"pl-c\"># To use published version:</span>\novercast [args...]</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#roadmap\"><span class=\"octicon octicon-link\"></span></a>Roadmap</h2>\n\n<ul><li>Standardize Recipes</li>\n<li>Tagging</li>\n<li>Events</li>\n<li>Google Compute Engine support</li>\n<li><a href=\"https://github.com/pkgcloud/pkgcloud#compute\">pkgcloud.compute</a> integration (for Joyent, Openstack, Rackspace support)</li>\n<li>More comprehensive script/recipe library</li>\n<li>More test coverage</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/andrewchilds/overcast#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>MIT. Copyright © 2014 <a href=\"http://twitter.com/andrewchilds\">Andrew Childs</a>.</p>\n',1),(76,'wmira/dropkit','https://github.com/wmira/dropkit',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>dropkit is a node.js module for Digital Ocean\'s V2 REST API.</p>\n\n<p><a href=\"https://travis-ci.org/wmira/dropkit\"><img src=\"https://camo.githubusercontent.com/9c06af63a6a5186e5054b4251875ec21328fb30d/68747470733a2f2f7472617669732d63692e6f72672f776d6972612f64726f706b69742e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a></p>\n\n\n\n<p>npm install --save dropkit</p>\n\n<p>DropKit uses <a href=\"https://github.com/petkaantonov/bluebird\">BlueBird</a> and returns promises.</p>\n\n<div class=\"highlight highlight-source-js\"><pre> <span class=\"pl-k\">var</span> Dropkit <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dropkit<span class=\"pl-pds\">\"</span></span>);\n <span class=\"pl-k\">var</span> v2 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Dropkit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>TOKEN<span class=\"pl-pds\">\"</span></span>);\n\n\n v2.accounts().then(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">account</span>) {\n    <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(account);\n })<span class=\"pl-c1\">.error</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">error</span>) {\n    <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>httpStatusCode: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> error.statusCode);\n    <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>response: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> error.res);\n });</pre></div>\n\n\n\n<p>See the DigitalOcean\'s <a href=\"https://developers.digitalocean.com/#introduction\">V2 Rest API</a> for return definition</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/wmira/dropkit#accounts\"><span class=\"octicon octicon-link\"></span></a>Accounts</h2>\n\n<div class=\"highlight highlight-source-js\"><pre> v2.accounts();\n\n v2.account.keys(); <span class=\"pl-c\">//return all keys</span>\n v2.account.keys(keyIdOrFingerPrint); <span class=\"pl-c\">//retrieve key info</span>\n v2.account.keys({name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>keyname<span class=\"pl-pds\">\'</span></span>,public_key<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ssh-rsa ...<span class=\"pl-pds\">\"</span></span>}); <span class=\"pl-c\">//create a new key</span>\n v2.account.key.update(keyIdOrFingerPrint,newname);\n v2.account.key.destroy(keyIdOrFingerPrint);\n\n</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/wmira/dropkit#actions\"><span class=\"octicon octicon-link\"></span></a>Actions</h2>\n\n<div class=\"highlight highlight-source-js\"><pre> v2.actions(); <span class=\"pl-c\">//list all actions</span>\n v2.actions({page<span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>,per_page<span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>}); <span class=\"pl-c\">//pass parameter on action list</span>\n v2.actions(actionId); <span class=\"pl-c\">//retrieve specific actionid</span>\n</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/wmira/dropkit#domains\"><span class=\"octicon octicon-link\"></span></a>Domains</h2>\n\n<div class=\"highlight highlight-source-js\"><pre> v2.domains(); <span class=\"pl-c\">//list all domains</span>\n v2.domains(domainName); <span class=\"pl-c\">//get domain info</span>\n v2.domain.create({name<span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>domain.com<span class=\"pl-pds\">\'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>ip_address<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>127.0.0.1<span class=\"pl-pds\">\"</span></span>});\n v2.domain.delete(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>domain.com<span class=\"pl-pds\">\"</span></span>); <span class=\"pl-c\">//delete</span></pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/wmira/dropkit#domain-records\"><span class=\"octicon octicon-link\"></span></a>Domain Records</h2>\n\n<div class=\"highlight highlight-source-js\"><pre> v2.records(domainName); <span class=\"pl-c\">//list all records for a given domain</span>\n v2.records(domainName,recordId);<span class=\"pl-c\">//return info for a particular record id</span>\n\n <span class=\"pl-c\">//create a new data, where recordData is https://developers.digitalocean.com/#create-a-new-domain-record</span>\n v2.record.create(domainName,recordData);\n\n v2.record.update(domainName,recordId,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>newrecordname<span class=\"pl-pds\">\"</span></span>);<span class=\"pl-c\">//update the name of a record</span>\n v2.record.delete(domainName,recordId); <span class=\"pl-c\">//delete the record id</span></pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/wmira/dropkit#droplets\"><span class=\"octicon octicon-link\"></span></a>Droplets</h2>\n\n<div class=\"highlight highlight-source-js\"><pre> v2.droplets(); <span class=\"pl-c\">//return list of droplets</span>\n v2.droplets(dropletId); <span class=\"pl-c\">//return info for droplet id</span>\n\n v2.droplet_upgrades(); <span class=\"pl-c\">//return droplet upgrades</span>\n\n <span class=\"pl-c\">//create a droplet where droplet is https://developers.digitalocean.com/#create-a-new-droplet</span>\n v2.droplet.create(droplet);\n\n v2.droplet.kernels(dropletId);\n v2.droplet.snapshots(dropletId);\n v2.droplet.backups(dropletId);\n v2.droplet.delete(dropletId);\n\n <span class=\"pl-c\">//action here can be disable_backups,reboot,power_cycle,shutdown,power_off,power_on,restore,password_reset ..etc</span>\n <span class=\"pl-c\">//see https://developers.digitalocean.com/#droplet-actions</span>\n v2.droplet.<span class=\"pl-c1\">action</span>(dropletId,action);\n</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/wmira/dropkit#droplets-1\"><span class=\"octicon octicon-link\"></span></a>Droplets</h2>\n\n<div class=\"highlight highlight-source-js\"><pre> v2.<span class=\"pl-c1\">images</span>(); <span class=\"pl-c\">//return all images</span>\n v2.<span class=\"pl-c1\">images</span>({type<span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>distribution<span class=\"pl-pds\">\"</span></span>}); <span class=\"pl-c\">//list all distribution images</span>\n v2.<span class=\"pl-c1\">images</span>({type<span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>application<span class=\"pl-pds\">\"</span></span>}); <span class=\"pl-c\">//list all application images</span>\n v2.<span class=\"pl-c1\">images</span>(id); <span class=\"pl-c\">//retrieve an image id</span>\n\n v2.image.update(id,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>newName<span class=\"pl-pds\">\"</span></span>); <span class=\"pl-c\">//update name of id</span>\n v2.image.delete(id); <span class=\"pl-c\">//as specified</span>\n v2.image.transfer(imageId,<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>nyc2<span class=\"pl-pds\">\'</span></span>); <span class=\"pl-c\">//transfer image id to specified region</span>\n v2.image.<span class=\"pl-c1\">action</span>(imageId,actionId); <span class=\"pl-c\">//retrieve actionId</span>\n</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/wmira/dropkit#others\"><span class=\"octicon octicon-link\"></span></a>Others</h2>\n\n<div class=\"highlight highlight-source-js\"><pre> v2.regions();\n v2.sizes();</pre></div>\n\n\n\n<ol><li>npm install</li>\n<li>npm test</li>\n</ol><ol><li>Write more tests!</li>\n</ol>',1),(77,'digitalocean/godo','https://github.com/digitalocean/godo',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://travis-ci.org/digitalocean/godo\"><img src=\"https://camo.githubusercontent.com/64d762bb5df52eab0702c6ad9c20ee8750e96515/68747470733a2f2f7472617669732d63692e6f72672f6469676974616c6f6365616e2f676f646f2e737667\" alt=\"Build Status\" /></a></p>\n\n\n\n<p>Godo is a Go client library for accessing the DigitalOcean V2 API.</p>\n\n<p>You can view the client API docs here: <a href=\"http://godoc.org/github.com/digitalocean/godo\">http://godoc.org/github.com/digitalocean/godo</a></p>\n\n<p>You can view DigitalOcean API docs here: <a href=\"https://developers.digitalocean.com/documentation/v2/\">https://developers.digitalocean.com/documentation/v2/</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/digitalocean/godo#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/digitalocean/godo<span class=\"pl-pds\">\"</span></span></pre></div>\n\n<p>Create a new DigitalOcean client, then use the exposed services to\naccess different parts of the DigitalOcean API.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/digitalocean/godo#authentication\"><span class=\"octicon octicon-link\"></span></a>Authentication</h3>\n\n<p>Currently, Personal Access Token (PAT) is the only method of\nauthenticating with the API. You can manage your tokens\nat the DigitalOcean Control Panel <a href=\"https://cloud.digitalocean.com/settings/applications\">Applications Page</a>.</p>\n\n<p>You can then use your token to create a new client:</p>\n\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>golang.org/x/oauth2<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-smi\">pat</span> <span class=\"pl-k\">:=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mytoken<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">type</span> <span class=\"pl-v\">TokenSource</span> <span class=\"pl-k\">struct</span> {\n    <span class=\"pl-v\">AccessToken</span> <span class=\"pl-k\">string</span>\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">(<span class=\"pl-v\">t</span> *<span class=\"pl-v\">TokenSource</span>) <span class=\"pl-en\">Token</span></span>() (*<span class=\"pl-v\">oauth2</span>.<span class=\"pl-v\">Token</span>, <span class=\"pl-v\">error</span>) {\n    <span class=\"pl-smi\">token</span> <span class=\"pl-k\">:=</span> &amp;oauth2.<span class=\"pl-smi\">Token</span>{\n        AccessToken: t.<span class=\"pl-smi\">AccessToken</span>,\n    }\n    <span class=\"pl-k\">return</span> token, <span class=\"pl-c1\">nil</span>\n}\n\n<span class=\"pl-smi\">tokenSource</span> <span class=\"pl-k\">:=</span> &amp;TokenSource{\n    <span class=\"pl-v\">AccessToken</span>: pat,\n}\n<span class=\"pl-smi\">oauthClient</span> <span class=\"pl-k\">:=</span> oauth2.<span class=\"pl-c1\">NewClient</span>(oauth2.<span class=\"pl-smi\">NoContext</span>, tokenSource)\n<span class=\"pl-smi\">client</span> <span class=\"pl-k\">:=</span> godo.<span class=\"pl-c1\">NewClient</span>(oauthClient)</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/digitalocean/godo#examples\"><span class=\"octicon octicon-link\"></span></a>Examples</h2>\n\n<p>To create a new Droplet:</p>\n\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-smi\">dropletName</span> <span class=\"pl-k\">:=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>super-cool-droplet<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-smi\">createRequest</span> <span class=\"pl-k\">:=</span> &amp;godo.<span class=\"pl-smi\">DropletCreateRequest</span>{\n    <span class=\"pl-v\">Name</span>:   dropletName,\n    <span class=\"pl-v\">Region</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nyc3<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">Size</span>:   <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>512mb<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">Image</span>: godo.<span class=\"pl-smi\">DropletCreateImage</span>{\n        Slug: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ubuntu-14-04-x64<span class=\"pl-pds\">\"</span></span>,\n    },\n}\n\n<span class=\"pl-smi\">newDroplet</span>, <span class=\"pl-smi\">_</span>, <span class=\"pl-smi\">err</span> <span class=\"pl-k\">:=</span> client.<span class=\"pl-smi\">Droplets</span>.<span class=\"pl-c1\">Create</span>(createRequest)\n\n<span class=\"pl-k\">if</span> err != <span class=\"pl-c1\">nil</span> {\n    fmt.<span class=\"pl-c1\">Printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Something bad happened: <span class=\"pl-c1\">%s</span><span class=\"pl-cce\">\\n\\n</span><span class=\"pl-pds\">\"</span></span>, err)\n    <span class=\"pl-k\">return</span> err\n}</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/digitalocean/godo#pagination\"><span class=\"octicon octicon-link\"></span></a>Pagination</h3>\n\n<p>If a list of items is paginated by the API, you must request pages individually. For example, to fetch all Droplets:</p>\n\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">func</span> <span class=\"pl-en\">DropletList</span>(<span class=\"pl-v\">client</span> *<span class=\"pl-v\">godo</span>.<span class=\"pl-v\">Client</span>) ([]<span class=\"pl-v\">godo</span>.<span class=\"pl-v\">Droplet</span>, <span class=\"pl-v\">error</span>) {\n    <span class=\"pl-c\">// create a list to hold our droplets</span>\n    <span class=\"pl-smi\">list</span> <span class=\"pl-k\">:=</span> []godo.<span class=\"pl-smi\">Droplet</span>{}\n\n    <span class=\"pl-c\">// create options. initially, these will be blank</span>\n    <span class=\"pl-smi\">opt</span> <span class=\"pl-k\">:=</span> &amp;godo.<span class=\"pl-smi\">ListOptions</span>{}\n    <span class=\"pl-k\">for</span> {\n        <span class=\"pl-smi\">droplets</span>, <span class=\"pl-smi\">resp</span>, <span class=\"pl-smi\">err</span> <span class=\"pl-k\">:=</span> client.<span class=\"pl-smi\">Droplets</span>.<span class=\"pl-c1\">List</span>(opt)\n        <span class=\"pl-k\">if</span> err != <span class=\"pl-c1\">nil</span> {\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">nil</span>, err\n        }\n\n        <span class=\"pl-c\">// append the current page\'s droplets to our list</span>\n        <span class=\"pl-k\">for</span> <span class=\"pl-smi\">_</span>, <span class=\"pl-smi\">d</span> <span class=\"pl-k\">:=</span> <span class=\"pl-k\">range</span> droplets {\n            list = <span class=\"pl-c1\">append</span>(list, d)\n        }\n\n        <span class=\"pl-c\">// if we are at the last page, break out the for loop</span>\n        <span class=\"pl-k\">if</span> resp.<span class=\"pl-smi\">Links</span> == <span class=\"pl-c1\">nil</span> || resp.<span class=\"pl-smi\">Links</span>.<span class=\"pl-c1\">IsLastPage</span>() {\n            <span class=\"pl-k\">break</span>\n        }\n\n        <span class=\"pl-smi\">page</span>, <span class=\"pl-smi\">err</span> <span class=\"pl-k\">:=</span> resp.<span class=\"pl-smi\">Links</span>.<span class=\"pl-c1\">CurrentPage</span>()\n        <span class=\"pl-k\">if</span> err != <span class=\"pl-c1\">nil</span> {\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">nil</span>, err\n        }\n\n        <span class=\"pl-c\">// set the page we want for the next request</span>\n        opt.<span class=\"pl-smi\">Page</span> = page + <span class=\"pl-c1\">1</span>\n    }\n\n    <span class=\"pl-k\">return</span> list, <span class=\"pl-c1\">nil</span>\n}</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/digitalocean/godo#versioning\"><span class=\"octicon octicon-link\"></span></a>Versioning</h2>\n\n<p>Each version of the client is tagged and the version is updated accordingly.</p>\n\n<p>Since Go does not have a built-in versioning, a package management tool is\nrecommended - a good one that works with git tags is\n<a href=\"http://labix.org/gopkg.in\">gopkg.in</a>.</p>\n\n<p>To see the list of past versions, run <code>git tag</code>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/digitalocean/godo#documentation\"><span class=\"octicon octicon-link\"></span></a>Documentation</h2>\n\n<p>For a comprehensive list of examples, check out the <a href=\"https://developers.digitalocean.com/documentation/v2/\">API documentation</a>.</p>\n\n<p>For details on all the functionality in this library, see the <a href=\"http://godoc.org/github.com/digitalocean/godo\">GoDoc</a> documentation.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/digitalocean/godo#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>We love pull requests! Please see the <a href=\"https://github.com/digitalocean/godo/blob/master/CONTRIBUTING.md\">contribution guidelines</a>.</p>\n',1),(78,'Dosa by shon','http://shon.github.io/dosa/',1,0,'<p>Python wrapper for Digital Ocean <a href=\"https://developers.digitalocean.com\">API\nV2</a>.</p>\n\n<p><a href=\"http://badge.fury.io/py/dosa\"><img src=\"https://badge.fury.io/py/dosa.svg\" alt=\"Latest Version\" /></a></p>\n\n<p><a href=\"https://crate.io/packages/dosa/\"><img src=\"https://pypip.in/d/dosa/badge.png\" alt=\"Number of PyPI downloads\" /></a></p>\n\n\n\n<pre><code>pip install dosa\n</code></pre>\n\n\n\n<pre><code>import dosa\n\nAPI_KEY = \'Your API Key\'\ndosa.set_debug()  # enables debug logs\n\nclient = dosa.Client(api_key=API_KEY)\n\n# Droplets\nclient.droplets.list()\nstatus, result = client.droplets.create(name=\'terminator\', region=\'nyc2\',\\\n    size=\'512mb\', image=\'ubuntu-14-04-x32\', ssh_keys=[12345])\nnew_droplet_id = result[\'id\']\n\n# Droplet\nnew_droplet = client.Droplet(new_droplet_id)\nprint(new_droplet.info())\n## shortcuts\nnew_droplet.status()\nnew_droplet.ip_addresses()\nclient.droplets.delete(new_droplet_id)\n\n# SSH Keys\npub_key = open(\'~/.ssh/id_rsa.pub\').read()\nclient.keys.create(name=\'RSA key\', public_key=pub_key)\nclient.keys.list()\n\n# Images\nclient.images.list()\nclient.images.all()\nclient.images.search(\'ubuntu\', \'sgp1\', show_op=True)\n\n# Domains\nclient.domains.list()\nclient.domains.all()\nclient.domains.create(name=\'example.com\', ip_address=\'1.2.3.4\')\nclient.domains.delete(id=\'example.com\')\n\n### Get specific domain\ndomain = client.Domain(domain=\'example.com\')\ndomain.info()\n\n# Domain Records\ndr = client.DomainRecords(domain=\'example.com\')\ndr.list()\ndr.create(type=\'A\', name=\'example.com\', data=\'162.10.66.0\')\n\n### Get specific domain record for a domain\nrecord = dr.Record(record_id=\'7976006\')\nrecord.info()\nrecord.update(name=\'new.example.com\')\n\n# Extras\n# $ ls keys/\n# rsa_pub1.id  rsa_pub2.key  rsa_pub3.key\nkeys_dir = \'keys\'\nclient.sync_ssh_keys(keys_dir)\n</code></pre>\n\n\n\n<p>Image search:</p>\n\n<pre><code>&gt;&gt;&gt; client.images.search(\'ubuntu\', region=\'sgp1\', show_op=True)\n</code></pre>\n\n<p>Above code snippets searches for images containing ubuntu in description\nor slug. Since region is specified (sgp1), only images in sgp1 region\nwould be considered. If no region is specified all regions are included.</p>\n\n\n\n<p>Created while working on <a href=\"http://scroll.in\">Scroll.in</a>\'s project.</p>\n\n\n\n<p><a href=\"http://commons.wikimedia.org/wiki/File:Paper_Masala_Dosa.jpg#mediaviewer/File:Paper_Masala_Dosa.jpg\"><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Paper_Masala_Dosa.jpg/640px-Paper_Masala_Dosa.jpg\" alt=\"&quot;Paper Masala Dosa&quot; by SteveR- - &lt;http://www.flickr.com/photos/git/3936135033/&gt;. Licensed under Creative Commons Attribution 2.0 via Wikimedia Commons\" /></a></p>\n\n      ',1),(79,'DoSnapshot by merqlove','http://dosnapshot.merqlove.ru/',1,0,'<p><a href=\"https://gitter.im/merqlove/do_snapshot?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Join the chat at https://gitter.im/merqlove/do_snapshot\" /></a>\n<a href=\"https://www.digitalocean.com/community/projects/dosnapshot\">Project Page at Digital Ocean</a>, comment or vote for this project.</p>\n\n<p><a href=\"http://badge.fury.io/rb/do_snapshot\"><img src=\"https://badge.fury.io/rb/do_snapshot.svg\" alt=\"Gem Version\" /></a>\n<a href=\"https://travis-ci.org/merqlove/do_snapshot\"><img src=\"https://travis-ci.org/merqlove/do_snapshot.svg?branch=master\" alt=\"Build Status\" /></a>\n<a href=\"https://gemnasium.com/merqlove/do_snapshot\"><img src=\"https://gemnasium.com/merqlove/do_snapshot.svg\" alt=\"Dependency Status\" /></a>\n<a href=\"https://coveralls.io/r/merqlove/do_snapshot?branch=master\"><img src=\"https://coveralls.io/repos/merqlove/do_snapshot/badge.png?branch=master\" alt=\"Coverage Status\" /></a>\n<a href=\"http://inch-ci.org/github/merqlove/do_snapshot\"><img src=\"http://inch-ci.org/github/merqlove/do_snapshot.png?branch=master\" alt=\"Inline docs\" /></a>\n<a href=\"https://codeclimate.com/github/merqlove/do_snapshot\"><img src=\"https://codeclimate.com/github/merqlove/do_snapshot.png\" alt=\"Code Climate\" /></a></p>\n\n<p>Use this tool to backup DigitalOcean droplet\'s via snapshot method, on the fly!</p>\n\n<p>Here some features:</p>\n\n<ul><li>Multiple threads out of the box. No matter how much droplet\'s you have.</li>\n<li>Snapshots Auto-Cleanup.</li>\n<li>Auto-Boot Droplet back if Snapshot Event is failed or bad connection exception.</li>\n<li>Binary special for cron and command-line. Homebrew, Standalone installers.</li>\n<li>Mail notifications when fail or maximum of snapshots is reached for one or multiple droplets.</li>\n<li>Custom mail settings (You can set <a href=\"https://github.com/benprew/pony\">Pony</a> mail settings).</li>\n<li>Stop mode (when you don\'t want to create new snapshots when maximum is reached).</li>\n<li>Timeout option for long requests or uncaught loops. By default it 600 seconds, but you can change it by hand.</li>\n<li>Logging into selected directory.</li>\n<li>Verbose mode for research.</li>\n<li>Quiet mode for silence.</li>\n</ul><h2>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#compatibility\"><span class=\"octicon octicon-link\"></span></a>Compatibility</h2>\n\n<p>Ruby versions 1.9.3 and higher. JRuby 1.7, 9.0.0.0 or later is also supported.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/merqlove/do_snapshot/master/assets/example.png\" alt=\"DoSnaphot example\" /></p>\n\n<h3>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#you-can-ask-me-why-you-made-this-tool\"><span class=\"octicon octicon-link\"></span></a>You can ask me, \"Why you made this tool?\"</h3>\n\n<ul><li>First. I needed stable tool, which can provide for me automatic Snapshot feature for all of my Droplets via Cron planner.</li>\n<li>I don\'t want to think how much snapshots for each droplet i have.</li>\n<li>I don\'t wont to sleep when my droplets Offline!!! And i wanted tool which can BOOT back droplets, which failed to snapshot.</li>\n<li>Also i want to understand what\'s going on if there some error. Mail is my choice. But logs also good.</li>\n<li>And ... sure ;) We want to do it fast as rocket! :)</li>\n<li>more more more...</li>\n<li>So this tool can save a lot of time for people.</li>\n</ul><h2>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<p>Install it yourself as:</p>\n\n<pre><code>$ gem install do_snapshot\n</code></pre>\n\n<p>Or System Wide Install (OSX, *nix):</p>\n\n<pre><code>$ sudo gem install do_snapshot\n</code></pre>\n\n<p>Standalone with one-liner:</p>\n\n<pre><code>$ wget https://assets.merqlove.ru.s3.amazonaws.com/do_snapshot/do_snapshot.tgz &amp;&amp; sudo tar -xzf do_snapshot.tgz /usr/local/lib/ &amp;&amp; sudo ln -s /usr/local/lib/do_snapshot/bin/do_snapshot /usr/local/bin/do_snapshot\n</code></pre>\n\n<p>For <strong>OSX</strong> users (<a href=\"http://github.com/merqlove/homebrew-do-snapshot\">Homebrew Tap</a>):</p>\n\n<pre><code>$ brew tap merqlove/do-snapshot &amp;&amp; brew install do_snapshot\n\n$ do_snapshot -V\n</code></pre>\n\n<p>Standalone pack for <strong>Unix/Linux</strong> users: <a href=\"https://assets.merqlove.ru.s3.amazonaws.com/do_snapshot/do_snapshot.tgz\">Download</a></p>\n\n<pre><code>$ wget https://assets.merqlove.ru.s3.amazonaws.com/do_snapshot/do_snapshot.tgz # if not done.\n\n# Example Install into /usr/local\n\n$ tar -xzf do_snapshot.tgz /usr/local/ &amp;&amp; ln -s /usr/local/do_snapshot/bin/do_snapshot /usr/local/bin/do_snapshot \n$ do_snapshot help      \n</code></pre>\n\n<p>Standalone Zip pack for others: <a href=\"https://assets.merqlove.ru.s3.amazonaws.com/do_snapshot/do_snapshot.zip\">Download</a></p>\n\n<h2>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>Mainly it\'s pretty simple:</p>\n\n<pre><code>$ do_snapshot --only 123456 -k 5 -c -v\n</code></pre>\n\n<h3>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#setup\"><span class=\"octicon octicon-link\"></span></a>Setup</h3>\n\n<h3>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#digitalocean-api-v1\"><span class=\"octicon octicon-link\"></span></a>Digitalocean API V1:</h3>\n\n<p>You\'ll need to generate an access token in Digital Ocean\'s control panel at <a href=\"https://cloud.digitalocean.com/api_access\">https://cloud.digitalocean.com/api_access</a></p>\n\n<pre><code>$ export DIGITAL_OCEAN_CLIENT_ID=\"SOMEID\"\n$ export DIGITAL_OCEAN_API_KEY=\"SOMEKEY\"\n</code></pre>\n\n<p>If you want to set keys without environment, than set it via options when you run do_snapshot:</p>\n\n<pre><code>$ do_snapshot --digital-ocean-client-id YOURLONGAPICLIENTID --digital-ocean-api-key YOURLONGAPIKEY\n</code></pre>\n\n<h3>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#digitalocean-api-v2\"><span class=\"octicon octicon-link\"></span></a>Digitalocean API V2:</h3>\n\n<p>You\'ll need to generate an access token in Digital Ocean\'s control panel at <a href=\"https://cloud.digitalocean.com/settings/applications\">https://cloud.digitalocean.com/settings/applications</a></p>\n\n<pre><code>$ export DIGITAL_OCEAN_ACCESS_TOKEN=\"SOMETOKEN\"\n</code></pre>\n\n<p>If you want to set keys without environment, than set it via options when you run do_snapshot:</p>\n\n<pre><code>$ do_snapshot --digital-ocean-access-token YOURLONGTOKEN    \n</code></pre>\n\n<h3>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#how-to-here-is-also-longren-tutorial\"><span class=\"octicon octicon-link\"></span></a>How-To (Here is also <a href=\"https://longren.io/automate-making-snapshots-of-your-digitalocean-droplets/\">Longren Tutorial</a>)</h3>\n\n<p>Here we <code>keeping</code> only 5 <strong>latest</strong> snapshots and cleanup older after new one is created. If creation of snapshots failed no one will be deleted. By default we keeping <code>10</code> droplets.</p>\n\n<pre><code>$ do_snapshot --keep 5 -c\n</code></pre>\n\n<p>Using API V2:</p>\n\n<pre><code>$ do_snapshot -p 2\n</code></pre>\n\n<p>Keep latest 3 from selected droplet:</p>\n\n<pre><code>$ do_snapshot --only 123456 --keep 3\n</code></pre>\n\n<p>Working with all except droplets:</p>\n\n<pre><code>$ do_snapshot --exclude 123456 123457\n</code></pre>\n\n<p>Keep latest 5 snapshots, send mail notification instead of creating new one:</p>\n\n<pre><code>$ do_snapshot --keep 10 --stop --mail to:yourmail@example.com\n</code></pre>\n\n<p><img src=\"https://raw.githubusercontent.com/merqlove/do_snapshot/master/assets/safe_mode.png\" alt=\"DoSnapshot Safe Mode Example\" /></p>\n\n<p>E-mail notifications disabled out of the box. \nFor working mailer you need to set e-mail settings via run options.</p>\n\n<pre><code>--mail to:mail@somehost.com from:from@host.com --smtp address:smtp.gmail.com port:25 user_name:someuser password:somepassword\n</code></pre>\n\n<h3>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#cron-example\"><span class=\"octicon octicon-link\"></span></a>Cron example</h3>\n\n<pre><code>0 4 * * 7 . /.../.digitalocean_keys &amp;&amp; /.../bin/do_snapshot -k 5 -m to:TO from:FROM -t address:HOST user_name:LOGIN password:PASSWORD port:2525 -q -c\n</code></pre>\n\n<h3>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#real-world-example\"><span class=\"octicon octicon-link\"></span></a>Real world example</h3>\n\n<pre><code>$ bin/do_snapshot --only 123456 -k 3 -c -m to:TO from:FROM -t address:HOST user_name:LOGIN password:PASSWORD port:2525 -v\n\nChecking DigitalOcean Id\'s.\nStart performing operations\nSetting DigitalOcean Id\'s.\nLoading list of DigitalOcean droplets\nWorking with list of DigitalOcean droplets\nPreparing droplet id: 123456 name: mrcr.ru to take snapshot.\nShutting down droplet.\nStart creating snapshot for droplet id: 123456 name: mrcr.ru.\nWait until snapshot will be created.\nSnapshot name: mrcr.ru_2014_07_18 created successfully.\nDroplet id: 123456 name: mrcr.ru snapshots: 4.\nFor droplet with id: 123456 and name: mrcr.ru the maximum number 3 of snapshots is reached.\nCleaning up snapshots for droplet id: 123456 name: mrcr.ru.\nSnapshot name: mrcr.ru_2014_07_17 delete requested.\nAll operations has been finished.\nSending e-mail notification.\n</code></pre>\n\n<h3>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#all-options\"><span class=\"octicon octicon-link\"></span></a>All options:</h3>\n\n<pre><code>&gt; $ do_snapshot c  \n\naliases: s, snap, create\n\nOptions:\n  -p, [--protocol=1]                                             # Select api version.\n                                                                 # Default: 1\n  -o, [--only=123456 123456 123456]                              # Select some droplets.\n  -e, [--exclude=123456 123456 123456]                           # Except some droplets.\n  -k, [--keep=5]                                                 # How much snapshots you want to keep?\n                                                                 # Default: 10\n  -d, [--delay=5]                                                # Delay between snapshot operation status requests.\n                                                                 # Default: 10                                                                    \n      [--timeout=250]                                            # Timeout in sec\'s for events like Power Off or Create Snapshot.\n                                                                 # Default: 3600                                                                     \n  -m, [--mail=to:yourmail@example.com]                           # Receive mail if fail or maximum is reached.\n  -t, [--smtp=user_name:yourmail@example.com password:password]  # SMTP options.\n  -l, [--log=/Users/someone/.do_snapshot/main.log]               # Log file path. By default logging is disabled.\n  -c, [--clean], [--no-clean]                                    # Cleanup snapshots after create. If you have more images than you want to `keep`, older will be deleted.\n  -s, [--stop], [--no-stop]                                      # Stop creating snapshots if maximum is reached.\n      [--stop-by-power], [--no-stop-by-power]                    # Check if droplet stopped by its power status instead of waiting for event completed state.\n  -v, [--trace], [--no-trace]                                    # Verbose mode.\n  -q, [--quiet], [--no-quiet]                                    # Quiet mode. If don\'t need any messages in console.\n      [--digital-ocean-access-token=YOURLONGAPITOKEN]            # DIGITAL_OCEAN_ACCESS_TOKEN. if you can\'t use environment.\n      [--digital-ocean-client-id=YOURLONGAPICLIENTID]            # DIGITAL_OCEAN_CLIENT_ID. if you can\'t use environment.\n      [--digital-ocean-api-key=YOURLONGAPIKEY]                   # DIGITAL_OCEAN_API_KEY. if you can\'t use environment.    \n\nDescription:\n  `do_snapshot` able to create and cleanup snapshots on your droplets.\n\n  You can optionally specify parameters to select or exclude some droplets.   \n</code></pre>\n\n<h2>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#donating\"><span class=\"octicon octicon-link\"></span></a>Donating:</h2>\n\n<p>Support this project and others by <a href=\"https://gratipay.com/~merqlove/\">merqlove</a> via <a href=\"https://gratipay.com/~merqlove/\">gratipay</a>.<br /><a href=\"https://gratipay.com/merqlove/\"><img src=\"https://cdn.rawgit.com/gratipay/gratipay-badge/2.3.0/dist/gratipay.png\" alt=\"Support via Gratipay\" /></a></p>\n\n<h2>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#dependencies\"><span class=\"octicon octicon-link\"></span></a>Dependencies:</h2>\n\n<h2>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<ol><li>Fork it ( <a href=\"https://github.com/merqlove/do_snapshot/fork\">https://github.com/merqlove/do_snapshot/fork</a> )</li>\n<li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li>\n<li>Commit your changes (<code>git commit -am \'Add some feature\'</code>)</li>\n<li>Push to the branch (<code>git push origin my-new-feature</code>)</li>\n<li>Create a new Pull Request</li>\n</ol><h3>\n<a class=\"anchor\" href=\"http://dosnapshot.merqlove.ru/#testing\"><span class=\"octicon octicon-link\"></span></a>Testing</h3>\n\n<pre><code>$ rake spec \n</code></pre>\n\n<p>Copyright (c) 2015 Alexander Merkulov</p>\n\n<p>MIT License</p>\n        ',1),(80,'Brief survey on methods for attacking Tor hidden service','http://translate.wooyun.io/2015/09/19/Brief-survey-on-methods-for-attacking-Tor-hidden-service.html',0,0,'\n            <p>Author:<a href=\"https://twitter.com/PhunterLau\">Phunter</a></p>\n<p>From:http://drops.wooyun.org/papers/8265</p>\n<p>Recently, MIT published an <a href=\"https://people.csail.mit.edu/devadas/pubs/circuit_finger.pdf\">article</a> for their recent work of identifying the hidden service of Tor by circuit fingerprinting with website fingerprinting to eventually trace down the hidden service users. This paper has been discussed on reddit and many other forums, and the question that whether Tor can be compromised becomes hot again. Here I want to have a brief overview of recent research on the methods and attempts for attacking Tor hidden services over the past years. These methods are not my original creation and I try to introduce them in simple words. Some worth reading materials are provided at the ending part are for further review. In summary, Tor hidden services are very hard to compromise and mostly the following methods and attempts are heuristic analysis.</p>\n\n\n<hr /><p>The primary goal of Tor (The Onion Router) is to prevent traffic filter and sniffing from spying user’s communication privacy. Most chinese people know it not for its encryption but for its multi-layered nodes which can bypass the Great Fire Wall (GFW). The general idea of Tor is that, each Tor user setups a local Tor proxy server which regularly communicates with other Tor users, therefore a topology circuit is constructed. Tor users encrypt the message to transmit in the application layer. The communication in between each routing pair is point-to-point encrypted and the routing pairs is just like layers of an onion. Such multi-layered topology structure is the same as place the client right at the heart of an onion which is exactly the methods that Tor uses to protect information sources. When a message is issued from the client, it will search for paths through network, go through multiple layer of proxy nodes and be sent in plain text form at exit layer, that’s to say, the destination node can only see that the plain text is sent from the exit node but it doesn’t know the actual location of the information source client. If attackers know the IP address of some Tor nodes, they might find the information source by querying the flowing direction of the entire information. So for each Tor proxy server, it’s important to hide its own IP address.</p>\n<p><img src=\"http://static.wooyun.org//drops/20150826/2015082606343588393.png\" alt=\"Please enter image description.\" /></p>\n<p>reference from <a href=\"http://drops.wooyun.org/wp-content/uploads/2015/08/137.png\">wikipedia link</a></p>\n<p>Note that the point of attacking against Tor hidden services is not to obtain the transmitted message but to find out: which nodes are Tor’s intermediate nodes, which users are using Tor and which Tor services are used. Because the message at the exit node is in a plain text form. If one knows the exit node, one knows the transmitted message, for example, parts of the leaked files from Wikileaks are captured at some Tor exit nodes.</p>\n\n<hr /><p>Tor is a complicated system. It has the complexity from its design, thus it may have vulnerablilities to be attacked for its complexity. Besides, its implementation plus server configurations are not perfect. Meanwhile, it also has some “stupid teammates\" problems which can be leveraged for attacks. These aspects are the routine attacking points for targeting Tor’s anonymity and privacy.</p>\n<p>Attacks based on Tor’s information characteristics usually leverage its encryption and network complexity. The popular method is wiretapping the pattern of  network data. Because the information is encrypted through multi-layered nodes, Tor’s traffic pattern is different from normal network data transmission, in determining the time of link and the special pattern of network data. A Tor node could generally be identified by listening to the data transmission pattern of a node. The transmitted information contains some intrinsic features (such as <a href=\"http://www.welivesecurity.com/2015/07/29/keystroke-biometrics-exploit-defeats-tor-privacy/\">keystroke frequency pattern</a>), as a result, the encrypted traffic with these features from the source of Tor to the destination may also contain some traceable features. For example, if the attacker designs some experiments, the sequence of message communication can be used to detect the location of a Tor node. Most of the research work of attacking Tor’s anonymity focuses on this aspect, including the recent method mentioned in MIT’s article that is circuit fingerprinting on Tor’s nodes. These methods are mostly nicely construction methods and many major research institutes (some are state-owned) are working on this direction.</p>\n<p>Other approaches with “stupid teammates” that are based on attacking on Tor’s implementation/configuration are often not enrolled in the research projects of all major research institutions, but like the status of it and social engineering in hacking attacks,  it can become <a href=\"https://en.wikipedia.org/wiki/Achilles%27_heel\">Achilles’ heel</a> in a special situation. The methods attacking Tor’s implementation mainly are deceiving, for instance, to set Tor node under attacker’s control to attract other Tor nodes to link. Methods attacking on Tor’s Implementation and server configuration mostly lie in the fact that if a Tor server is not appropriately configured, Tor’s other services may be compromised to leak the address of Tor services. For example, there is a kind of “stupid teammate” , a Tor proxy server node is also the node for other services. If a web application runs on it (for example, the PHP version is old and contains many exploits), an attacker may penetrate the system using the vulnerable web services so long as the attacker can get the shell to scan the entire machine and determine if there’s Tor running on it. Recently, a “stupid teammate” is bitcoin exchange: some relevant research uses bitcoin transactions to detect the IP address of some nodes in Tor. Please read http://orbilu.uni.lu/handle/10993/18679. These methods will not be discussed here.</p>\n\n\n<p>Tor can also be used for bypassing the Great Fire Wall (GFW), because it can automatically monitor if related proxy node is reachable and redirect till it can connect to outside of the GFW. Therefore, the GFW doesn’t like Tor. What more, the GFW hates Tor because the destination server can only see Tor’s exit nodes. So a server located abroad can use Tor to disguise itself as a server inside China and provides services to bypass the GFW.</p>\n<p>•   The main research goal of GFW is not about finding the message source, but blocking Tor nodes and cutting off the connection, so these users who bypass the GFW will be blocked. There’s no official documentation about the GFW for reasons that everyone knows, but based observation results, the GFW uses the following methods:<br />•   Block known IP nodes and Bridge nodes: GFW can block parts of known IP nodes and monitor the rest for further investigation. The purpose of monitoring is about collecting data transmitted among nodes, which can be used as the feature selection from data flow in GFW’s machine learning models.<br />•   Set up some Tor nodes under GFW’s control and attract other Tor nodes for connection and block.<br />•   Attacking non-SSL encrypted Tor nodes to collect data flow as features to analyze (Deep Package Investigation, DPI), then classifying if it is Tor node using machine learning plus artificial rules.</p>\n<p>The advantage of GFW is that it can see real traffic data that other.  Their methods use the traffic features and positive/negative samples collected from real traffic for their machine learning models. GFW can quickly detect any Tor encryption and changing in network structure. It can also perform much passive data collection work without being detected. It keeps GFW a secret from Tor’s attack. As the goal of GFW ‘s work is blocking the connection instead of finding the message source or the user identities, it blocks a small portions of Tor nodes, where new arising nodes are constantly generated. So it won’t cause huge damage to Tor’s anonymity and privacy for now.</p>\n\n<hr /><p>The main objective of academic research is about compromising the privacy and anonymity of Tor, which is commonly found in papers from universities and research institutions, as well as United States National Security Agency\'s (NSA) public materials and accidentally leaked documents.</p>\n\n<hr /><p>As mention at the beginning of this article, MIT fingerprints the data flow circuits in Tor. Its primary target is not looking for Tor nodes or finding user information, but finding out if there is Tor hidden service in the network, which can design a web page fingerprint to attack the client or service location on Tor nodes (more information on webpage fingerprinting please refer to Cai et al “<a href=\"http://www3.cs.stonybrook.edu/~xcai/fp.pdf\">Touching from a Distance: Website Fingerprinting Attacks and Defenses</a>”, basically the method is that, an attacker sets a client in Tor network to visit a specific webpage with a special fingerprint, track the message sent, get the features of  Tor proxy nodes, such as the packet size and interval frequency, and it uses machine learning to classify). It uses a simple way to determine if there is Tor hidden services in the network: they set up a Tor node that is controlled by themselves (the attacker) when other Tor nodes and user links come in and after a while of message transmission, the attacker can count the number of data transferred and the number of packets sent as well as the sequence of construction circuits, so that the attacker can predict which Tor service (e.g. OpenWeb) that the user is using with a simple machine learning model. The reason why this method is powerful is  that, it is passively collecting data rather than actively sending packets, therefore before revealing the Tor node information, the attacker can fly under the radar.</p>\n<p>This is very interesting work, and it also includes in great detail of the full text. It is also a great reading material for beginners who want to learn Tor attacking. As for if it successfully compromises Tor’s anonymity and privacy as claimed, here in this <a href=\"https://www.reddit.com/r/TOR/comments/3f3ioo/mit_breaks_tor_anonymity_by_exploiting_entry_nodes/\">reddit</a> discussion, everyone thought it’s far from so-called “compromising”.</p>\n\n<hr /><p><a href=\"https://sites.google.com/site/sambuddhochakravarty/\">Chakravarty</a> team from IIT leverages a Cisco NetFlow Gateway monitoring tool and designs a smart Perturbation experiment for detecting the relevance between the server and client messages. Many Cisco routers have a default tool called NetFlow, which provides all kind of statistical information, for example, the number of packages and bytes etc. Network administrators use this tool to check the pattern of network information and identify the cause of problems, for example network congestion. Chakravarty team designs such an experiment that it adds a special Perturbation to the pattern of the server traffic, causing the net flow in the gateway some statistical features and constantly send a certain of messages based on this perturbation feature. When this perturbation passes through the whole network, the perturbation feature from the client and the feature in the server show some statistical correlation. Based on this statistical correlation, the information source can be predicted. The team also provides further protection advice: obfuscating these network features that can cause the leak of perturbation feature on nodes, for example, delay sending the package, and hide these features.</p>\n<p>Their experiment is more powerful than MIT’s, because the experiment can be repeated on public Tor network. All they need is monitoring a small part of public Internet gateway, use gateway monitoring tools like netflow to observe enough Tor traffic information. This method is to actively detect Tor network, which differs from MIT’s passive data collection. For further reading, please refer to http://securityaffairs.co/wordpress/30202/hacking/tor-traffic-analysis-attack.html and http://resources.infosecinstitute.com/hacking-tor-network-follow/. From the perspective of principle, GFW also uses similar methods to observe, but details remain unknown.</p>\n\n<hr /><p>Our dear National Security Agency (NSA)’s working is relatively broad. It involves what node is a Tor node, which users use Tor, which Tor services and so on. NSA\'s main purpose is tracking Tor users. But NSA admits they still have a long way before completely breaking the Tor privacy and hidden services. They only attack a few specific users (these users who are successfully captured are generally using a <a href=\"https://edwardsnowden.com/wp-content/uploads/2013/10/tor-stinks-presentation.pdf\">Cookie cache Leakge</a> approach, there are some users who technically don’t know how to use Tor, and carelessly download a software suite to connect to a NSA controlled Tor server, causing them being detected.) None of the following information is NSA initiatively provided.</p>\n<p><img src=\"http://static.wooyun.org//drops/20150826/2015082606343676126.png\" alt=\"Please enter image description.\" /></p>\n<p>Picture credit from http://yalasu.com/an-open-letter-to-asu-president-michael-crow/</p>\n<h2>“Stupid Teammate” Methods</h2>\n<p>The “stupid teammate” of Tor is the browser (mostly Firefox), and the well known Flash, plus some web scripts. Most of the users don\'t really understand the working principles and methods of Tor, and they tend to choose some <a href=\"http://www.darkreading.com/risk-management/fbi-admits-to-tor-server-takeover/d/d-id/1111553?\">one-click installation Tor browser</a> suite which might contain something they don\'t know, like Firefox browser with known vulnerabilities, vulnerable Flash Player etc. For example, a user who installs the complete Baidu programs does not necessarily know what these components are. Agencies like FBI, NSA, take advantage of users who have these packages installed, attack their web browsers and Flash, and exploit the privacy and anonymity of Tor users. However, this method demonstrates that agencies such as NSA actually has no good way to directly attack Tor, thus they have to research on these “stupid  teammates” and primarily target them.</p>\n\n<hr /><p>NSA has a mysterious server code “FoxAcid”. It’s a type of Tor server under NSA control. It has a variety of usages, for example, if NSA wants to track a Tor user, they use some special methods to connect this user\'s circuit to one of NSA\'s  FoxAcid server, and ensure long term of connection. NSA also prepares for some further attacking work by planting malwares into user’s computer, and  makes sure the user connects to the FoxAcid server for a long period of time. It\'s said that these FoxAcid servers are Windows Server 2003, and these Trojan malwre can still connect to the FoxAcid even if users restart the computer.</p>\n<h2>Amazingly good teammates and webpage fingerprints</h2>\n<p>In addition to the use of stupid teammates, NSA has some amazing good teammates: the communications operators. NSA may request American telecommunications operators to provide data of a specific user, and operators such as AT&amp;T will not hesitate to cooperate with. NSA will implant a specific fingerprint information in a Web page, if users access this website through Tor, NSA can track the flow of data from the user visited the Web page through operator’s data. In my opinion, in theory GFW may also have similar work, but their primary goal is tracking users, so they may just block these Tor IPs.</p>\n<p>For further reading, please refer to http://www.networkcomputing.com/networking/nsa-battles-tor-9-facts/d/d-id/1111857?</p>\n\n<hr /><p>Thank you for reading such a long review. Attacks on Tor anonymity and privacy is a popular topic, both in academic and industrial, there are many aspects for attacks. Attack methods are usually in two types, one is distinguishing data flow pattern from normal traffic caused by Tor’s encryption characteristic. The other one uses the weakness of the constructed Tor nodes and other related services. Each agency leverages unique methods to attack Tor because of different goals. Great Fire Wall\'s primary goal is blocking the connection, so they want to find out the location of the Tor nodes and block them, as a result, their methods lie in the detection of network traffic patterns; NSA wants keep tracking users, so their main targets are the users and the Tor chain that users pass through, therefore, they have researched and experimented multiple methods on tracking users. MIT\'s work is more interesting, the paper itself is a detailed description of circuit fingerprinting attack that I suggest reading, where IIIT team’s work is a method that actively probes Tor.</p>\n        ',1);
INSERT INTO `entries` VALUES (81,'\nIntroducing Lemur\n','http://techblog.netflix.com/2015/09/introducing-lemur.html',0,0,'\n<span>by: </span><a href=\"https://twitter.com/kevgliss\">Kevin Glisson</a><span>, </span><a href=\"https://twitter.com/chanjbs\">Jason Chan</a> and <a href=\"https://twitter.com/benhagen\">Ben Hagen</a><br /><span><br /></span>\n<span>Netflix is pleased to announce the open source release of our x.509 certificate orchestration framework : Lemur!</span><br /><span><br /></span>\n<b><span>The Challenge of Certificate Management</span>\n</b><br /><div dir=\"ltr\">\n<span><a href=\"https://en.wikipedia.org/wiki/Public_key_infrastructure\">Public Key Infrastructure</a></span><span> </span><span>is a set of hardware, software, people, policies, and procedures needed to create, manage, distribute, use, store, and revoke digital certificates and manage public-key encryption. PKI allows for secure communication by establishing chains of trust between two entities. </span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>There are three main components to PKI that we are attempting to address:</span></div>\n<ol><li dir=\"ltr\"><div dir=\"ltr\">\n<h4 dir=\"ltr\">\n<img src=\"https://lh5.googleusercontent.com/s2myiuviAbtXDkX8pb4k-ZNNr4QGIbkBQSpQwxE6JOLfjLNKCJiU4BButs_6HKM2nQw1x4h5CFN37BuR3T1xyDKMv5gJJ76j_NhC7uNU04pM57nIPDLj_MHMfd1FdtEFkK4eUMA\" alt=\"s2myiuviAbtXDkX8pb4k-ZNNr4QGIbkBQSpQwxE6\" /></h4>\n<span>Public Certificate</span><span> - A cryptographic document that proves the ownership of a public key, which </span><span>can be used for signing, proving identity or encrypting data.</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Private Key</span><span> - A cryptographic document that is used to decrypt data encrypted by a public key. </span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Certificate Authorities (CAs)</span><span> - Third-party or internal services that validate those they do business with. They provide confirmation that a client is talking to the server it thinks it is. Their public certificates are loaded into major operating systems and provide a basis of trust for others to build on. </span></div>\n</li>\n</ol><b><br /></b>\n<br /><div dir=\"ltr\">\n<span>The management of all the pieces needed for PKI can be a confusing and painful experience. Certificates have expiration dates - if they are allowed to expire without replacing communication can be interrupted, impacting a system’s availability. And, private keys must never be exposed to any untrusted entities - any loss of a private key can impact the confidentiality of communications. There is also increased complexity when creating certificates that support a diverse pool of browsers and devices. It is non-trivial to track which devices and browsers trust which certificate authorities.</span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>On top of the management of these sensitive and important pieces of information, the tools used to create manage and interact with PKI have confusing or ambiguous options. This lack of usability can lead to mistakes and undermine the security of PKI. </span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>For non-experts the experience of creating certificates can be an intimidating one. </span></div>\n<b><br /></b>\n<br /><h4 dir=\"ltr\">\n<span>Empowering the Developer</span></h4>\n<div dir=\"ltr\">\n<span>At Netflix developers are responsible for their entire application environment, and we are moving to an environment that requires the use of HTTPS for all web applications. This means developers often have to go through the process of certificate procurement and deployment for their services. Let’s take a look at what a typical procurement process might look like: </span><span></span></div>\n<div dir=\"ltr\">\n<span>Here we see an example workflow that a developer might take when creating a new service that has TLS enabled.</span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<a href=\"https://lh6.googleusercontent.com/MX5e5ySuiiaFrhwFy0J2b2ZcCyS-2QYVY02iBCC1JNDT9OjXx_bI85dOCzLFdJDL6dpPcib1AUTVmjNSKl6OZkyUB3IOtV8wMRN_p-6kqjkxTL5TVFuTcHWh8i0dgbb8PbEdg7Y\"><img border=\"0\" src=\"https://lh6.googleusercontent.com/MX5e5ySuiiaFrhwFy0J2b2ZcCyS-2QYVY02iBCC1JNDT9OjXx_bI85dOCzLFdJDL6dpPcib1AUTVmjNSKl6OZkyUB3IOtV8wMRN_p-6kqjkxTL5TVFuTcHWh8i0dgbb8PbEdg7Y\" alt=\"MX5e5ySuiiaFrhwFy0J2b2ZcCyS-2QYVY02iBCC1\" /></a><span>There are quite a few steps to this process and much of it is typically handled by humans. Let’s enumerate them:</span></div>\n<ol><li dir=\"ltr\"><div dir=\"ltr\">\n<span>Create Certificate Signing Request (CSR)</span><span> - A CSR is a cryptographically signed request that has information such as State/Province, Location, Organization Name and other details about the entity requesting the certificate and what the certificate is for. Creating a CSR typically requires the developer to use OpenSSL commands to generate a private key and enter the correct information. The OpenSSL command line contains hundreds of options and significant flexibility. This flexibility can often intimidate developers or cause them to make mistakes that undermine the security of the certificate. </span></div>\n</li>\n</ol><b><br /></b>\n<br /><ol start=\"2\"><li dir=\"ltr\"><div dir=\"ltr\">\n<span>Submit CSR</span><span> - The developer then submits the CSR to a CA. Where to submit the CSR can be confusing. Most organizations have internal and external CAs. Internal CAs are used for inter-service or inter-node communication anywhere you have control of both sides of transmission and can thus control who to trust. External CAs are typically used when you don’t have control of both sides of a transmission. Think about your browser communicating with a banking website over HTTPS. It relies on the trust built by third parties (Symantec/Digicert, GeoTrust etc.) in order to ensure that we are talking to who we think we are. External CAs are used for the vast majority of Internet-facing websites. </span></div>\n</li>\n</ol><b><br /></b>\n<br /><ol start=\"3\"><li dir=\"ltr\"><div dir=\"ltr\">\n<span>Approve CSR</span><span> - Due to the sensitive and error-prone nature of the certificate request process, the choice is often made to inject an approval process into the workflow. In this case, a security engineer would review that a request is valid and correct before issuing the certificate.</span></div>\n</li>\n</ol><b><br /></b>\n<br /><ol start=\"4\"><li dir=\"ltr\"><div dir=\"ltr\">\n<span>Deploy Certificate</span><span> - Eventually the issued certificate needs to be placed on a server that will handle the request. It’s now up to the developer to ensure that the keys and server certificates are correctly placed and configured on the server and that the keys are kept in a safe location.</span></div>\n</li>\n</ol><b><br /></b>\n<br /><ol start=\"5\"><li dir=\"ltr\"><div dir=\"ltr\">\n<span>Store Secrets</span><span> - An optional, but important step is to ensure that secrets can be retrieved at a later date. If a server ever needs to be re-deployed these keys will be needed in order to re-use the issued certificate.</span></div>\n</li>\n</ol><b><br /></b>\n<br /><div dir=\"ltr\">\n<span>Each of these steps have the developer moving through various systems and interfaces, potentially copying and pasting sensitive key material from one system to another. This kind of information spread can lead to situations where a developer might not correctly clean up the private keys they have generated or accidently expose the information, which could put their whole service at risk. Ideally a developer would never have to handle key material at all. </span></div>\n<b><br /></b>\n<br /><h4 dir=\"ltr\">\n<span>Toward Better Certificate Management</span></h4>\n<div dir=\"ltr\">\n<span>Certificate management is not a new challenge, tools like </span><a href=\"http://www.ejbca.org/\"><span>EJBCA</span></a><span>, </span><a href=\"http://www.openca.org/\"><span>OpenCA</span></a><span>, and more recently </span><a href=\"https://letsencrypt.org/\"><span>Let’s Encrypt</span></a><span> are all helping to make certificate management easier. When setting out to make certificate management better we had two main goals: First, increase the usability and convenience of procuring a certificate in such a way that would not be intimidating to users. Second, harden the procurement process by generating high strength keys and handling them with care. </span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>Meet Lemur! </span></div>\n<b><br /></b>\n<br /><h4 dir=\"ltr\">\n<span>Lemur</span></h4>\n<div dir=\"ltr\">\n<span>Lemur is a certificate management framework that acts as a broker between certificate authorities and internal deployment and management tools. This allows us to build in defaults and templates for the most common use cases, reduce the need for a developer to be exposed to sensitive key material, and provides a centralized location from which to manage and monitor all aspects of the certificate lifecycle. </span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>We will use the following terminology throughout the rest of the discussion:</span></div>\n<b><br /></b>\n<br /><ul><li dir=\"ltr\"><div dir=\"ltr\">\n<span>Issuers </span><span>are internal or third-party certificate authorities</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Destinations </span><span>are deployment targets, for TLS these would be the servers terminating web requests.</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Sources</span><span> are any certificate store, these can include third party sources such as AWS, GAE, even source code.</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Notifications</span><span> are ways for a subscriber to be notified about a change with their certificate.</span></div>\n</li>\n</ul><b><br /></b>\n<br /><div dir=\"ltr\">\n<span>Unlike many of our tools Lemur is not tightly bound to AWS, in fact Lemur provides several different integration points that allows it to fit into just about any existing environment. </span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>Security engineers can leverage Lemur to act as a broker between deployment systems and certificate authorities. It provides a unified view of, and tracks all certificates in an environment regardless of where they were issued.  </span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>Let’s take a look at what a developer\'s new workflow would look like using Lemur:</span></div>\n\n\n<div class=\"separator\">\n<a href=\"http://1.bp.blogspot.com/-ddSboGM8cbI/VgBSAucAoQI/AAAAAAAABQE/PZJdwxtbOrU/s1600/new.png\"><img border=\"0\" src=\"http://1.bp.blogspot.com/-ddSboGM8cbI/VgBSAucAoQI/AAAAAAAABQE/PZJdwxtbOrU/s1600/new.png\" alt=\"new.png\" /></a></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>Some key benefits of the new workflow are:</span></div>\n<ul><li dir=\"ltr\"><div dir=\"ltr\">\n<span>Developer no longer needs to know OpenSSL commands</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Developer no longer needs to know how to safely handle sensitive key material</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Certificate is immediately deployed and usable</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Keys are generated with known strength properties</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Centralized tracking and notification</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Common API for internal users</span></div>\n</li>\n</ul><b><br /></b>\n<br /><div dir=\"ltr\">\n<span><img src=\"https://lh5.googleusercontent.com/QpkVQLBsDtYiaPxuYpXsdIA9KKxAlnV2su-i-PECVgAIGmRGHwwGDCAJkCN6hYzI3mD5Ovs7f6KJvweZECJzLVaO9GQDqv0DhwreYreBRkW2GmeukLtXwod2bstmMsuX=s1600\" alt=\"QpkVQLBsDtYiaPxuYpXsdIA9KKxAlnV2su-i-PEC\" /></span></div>\n<div dir=\"ltr\">\n<span>This interface is much more forgiving than that of a command line and allows for helpful suggestions and input validation. </span></div>\n<div dir=\"ltr\">\n<span><img src=\"https://lh5.googleusercontent.com/NukE5buAszywR9GzZgRgLCrrwJPZCNQR_MGjPP_3ARALj4vsFBIn-PNute-BwKNBkCQjOeD-NgTt6TTQt37mSXd4mac9McrCsVVskH8nvdh33RWH22uEAak-bc7l8TIOyP0pwxU\" alt=\"NukE5buAszywR9GzZgRgLCrrwJPZCNQR_MGjPP_3\" /></span></div>\n<div dir=\"ltr\">\n<span>For advanced users, Lemur supports all certificate options that the target issuer supports. </span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>Lemur’s destination plugins allow for a developer to pick an environment to upload a certificate. Having Lemur handle the propagation of sensitive material keeps it off developer’s laptops and ensures secure transmission. Out of the box Lemur supports multi-account AWS deployments. Over time, we hope that others can use the common plugin interface to fit their specific needs.</span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>Even with all the things that Lemur does for us we knew there would use cases where certificates are not issued through Lemur. For example, a third party hosting and maintaining a marketing site, or a payment provider generating certificates for secure communication with their service. </span></div>\n<b><br /></b>\n<br /><div dir=\"ltr\">\n<span>To help with these use cases and provide the best possible visibility into an organization’s certificate deployment, Lemur has the concept of source plugins and the ability to import certificates. Source plugins allow Lemur to reach out into different environments and discover and catalog existing certificates, making them an easy way to bootstrap Lemur’s certificate management within an organization. </span><br /><span><br /></span></div>\n<div dir=\"ltr\">\n<span>Lemur creates, discovers and deploys certificates. It also securely stores the sensitive key material created during the procurement process. Letting Lemur handle key management provides a centralized and known method of encryption and the ability to audit the key’s usage and access. </span></div>\n<b><br /></b>\n<br /><h4 dir=\"ltr\">\n<span>Architecture</span></h4>\n<div dir=\"ltr\">\n<span>Lemur makes use of the following components :</span></div>\n<ul><li dir=\"ltr\"><div dir=\"ltr\">\n<span>Python 2.7, 3.4 with Flask API (including a number of helper packages)</span></div>\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>AngularJS UI</span></div>\n</li>\n<li dir=\"ltr\">\n</li>\n<li dir=\"ltr\"><div dir=\"ltr\">\n<span>Optional use of AWS Simple Email Service (SES) for email notifications</span></div>\n</li>\n</ul><div dir=\"ltr\">\n<span>We’re shipping Lemur with built-in plugins for that allow you to issue certificates from Verisign/Symantec and allow for the discovery and deployment of certificates into AWS.</span></div>\n<b><br /></b>\n<br /><h4 dir=\"ltr\">\n<span>Getting Started</span></h4>\n\n<b><br /></b>\n<br /><h4 dir=\"ltr\">\n<span>Interested in Contributing?</span></h4>\n<div dir=\"ltr\">\n<span>Feel free to reach out or submit pull requests if you have any suggestions. We’re looking forward to seeing what new plugins you create to to make Lemur your own! We hope you’ll find Lemur as useful as we do!</span></div>\n<b><br /></b>\n<br /><h4 dir=\"ltr\">\n<span>Conclusion</span></h4>\n<div dir=\"ltr\">\n<span>Lemur is helping the Netflix security team manage our PKI infrastructure by empowering developers and creating a paved road to SSL/TLS enabled applications. Lemur is available on our</span><a href=\"http://netflix.github.io/#repo\"><span> </span><span>GitHub</span></a><span> site now!</span></div>\n\n\n\n',1),(82,'mateogianolio/sshync','https://github.com/mateogianolio/sshync',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Auto-sync files or directories over SSH using <a href=\"https://nodejs.org/docs/latest/api/fs.html#fs_fs_watch_filename_options_listener\">fs.<strong>watch</strong>()</a>.</p>\n\n<p>Comes with a nifty tool <code>sshpair</code> that generates a public SSH key with</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c1\">echo</span> -e <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>y\\n<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">|</span> ssh-keygen -q -N <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> -f <span class=\"pl-k\">~</span>/.ssh/id_rsa</pre></div>\n\n<p>and writes the result to <code>~/.ssh/authorized_keys</code> on the remote host. This prevents the password prompt from showing up every time we sync.</p>\n\n<p>Ignore paths by adding them, one per line, to a file named  <code>.sshyncignore</code> in the provided <code>source</code> folder.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/sshync#install\"><span class=\"octicon octicon-link\"></span></a>install</h3>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install sshync -g</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/sshync#usage\"><span class=\"octicon octicon-link\"></span></a>usage</h3>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># generate a public SSH key (so we don\'t have to retype password)</span>\n<span class=\"pl-c\"># write to user@ip:~/.ssh/authorized_keys</span>\n\n$ sshpair <span class=\"pl-k\">&lt;</span>user@ip[:port]<span class=\"pl-k\">&gt;</span>\n\n<span class=\"pl-c\"># initialize file auto-sync</span>\n$ sshync <span class=\"pl-k\">&lt;</span>user@ip[:port]<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">source</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">&lt;</span>destination<span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-c1\">source</span>:       <span class=\"pl-k\">local</span> <span class=\"pl-c1\">source</span> folder.\n          destination:  remote destination folder.</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/sshync#example\"><span class=\"octicon octicon-link\"></span></a>example</h3>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ git clone https://github.com/mateogianolio/sshync.git\n$ <span class=\"pl-c1\">cd</span> sshync\n$ sshpair root@xxx.xxx.82.203\ngenerated ssh key to <span class=\"pl-k\">~</span>/.ssh/id_rsa.pub\nroot@xxx.xxx.82.203<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>s password:</span>\n<span class=\"pl-s\">root@xxx.xxx.82.203<span class=\"pl-pds\">\'</span></span>s password:\n<span class=\"pl-k\">~</span>/.ssh/id_rsa.pub =<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">~</span>/.ssh/authorized_keys\n\n$ <span class=\"pl-c1\">echo</span> -e <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.git\\nnode_modules<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">&gt;</span> .sshyncignore\n$ sshync root@xxx.xxx.82.203 <span class=\"pl-c1\">.</span> /root/sshync\n<span class=\"pl-c1\">.</span> =<span class=\"pl-k\">&gt;</span> root@xxx.xxx.82.203:/root/sshync\n\nignore ./.sshyncignore\nmkdir -p /root/sshync\n[+] ./README.md =<span class=\"pl-k\">&gt;</span> /root/sshync/README.md [399 bytes]\n[+] ./package.json =<span class=\"pl-k\">&gt;</span> /root/sshync/package.json [520 bytes]\n[+] ./sshync.js =<span class=\"pl-k\">&gt;</span> /root/sshync/sshync.js [3304 bytes]\n[+] ./LICENSE.md =<span class=\"pl-k\">&gt;</span> /root/sshync/LICENSE.md [1084 bytes]\n<span class=\"pl-c\"># ... edit package.json ...</span>\n[/] ./package.json =<span class=\"pl-k\">&gt;</span> /root/sshync/package.json [524 bytes]</pre></div>\n',1),(83,'\nBetter logging in Nodejs using Bunyan\n','http://www.codingdefined.com/2014/12/better-logging-in-nodejs-using-bunyan.html',1,0,'\n<div dir=\"ltr\">\n<div class=\"separator\">\n<a href=\"http://4.bp.blogspot.com/-vJcblLR5n7g/U7Vh52-vssI/AAAAAAAAACA/M2EcY7husXc/s1600/nodejslogo.jpg\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-vJcblLR5n7g/U7Vh52-vssI/AAAAAAAAACA/M2EcY7husXc/s1600/nodejslogo.jpg\" height=\"64\" width=\"200\" alt=\"nodejslogo.jpg\" /></a></div>\nIn this post we will discuss about logging in Nodejs using <a href=\"https://github.com/trentm/node-bunyan/\">Bunyan</a>. You might have seen examples of nodejs in our site as well as in any other site, that everyone uses console.log to log the messages. Thus it gives a wrong impression to the developers that this is the best way to log messages in an application.<br /><a></a><br />But, a BIGG NO to <span>console.log</span>. You must use something better than console.log when you are creating your node applications. In this post we will discuss about better logging in your node application by using Bunyan.<div class=\"separator\">\n<a href=\"http://4.bp.blogspot.com/-nyr2yCe1OA4/VJVAHI6FvRI/AAAAAAAAAPo/QQmXAHgaXyY/s1600/bunyan.png\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-nyr2yCe1OA4/VJVAHI6FvRI/AAAAAAAAAPo/QQmXAHgaXyY/s1600/bunyan.png\" height=\"242\" width=\"640\" alt=\"bunyan.png\" /></a></div>\n\nPC: <a href=\"https://www.npmjs.com/package/bunyan\">https://www.npmjs.com/package/bunyan</a><p>As per <a href=\"https://github.com/trentm/node-bunyan/\">Bunyan</a>, it is a simple and fast JSON logging library for nodejs services. They also have a Bunyan CLI tool for nicely viewing the logs.<br /><b><br /></b>\n<b>How to Install Bunyan</b><br /><b><br /></b>\n<span>npm install -g bunyan</span> <span>// It will get you Bunyan CLI in your Path</span></p><p><b>How to Use Bunyan</b></p><p>Create a file named example5.js whose contents will be :</p><p><span>var bunyan = require(\'bunyan\');</span><br /><span>var log = bunyan.createLogger({name: \'myFirstBunyanExample\'});</span><br /><span>log.info(\'1st Log using Bunyan\');</span><br /><span>log.warn(\'It\'s just a warning\');</span></p><p><b>Output Without Using CLI</b></p><div class=\"separator\">\n<a href=\"http://2.bp.blogspot.com/-ZwZNBCNDlyo/VJ-eEqnMvDI/AAAAAAAAAUg/lzZA8Sc9RHE/s1600/bsiilji.png\"><img border=\"0\" src=\"http://2.bp.blogspot.com/-ZwZNBCNDlyo/VJ-eEqnMvDI/AAAAAAAAAUg/lzZA8Sc9RHE/s1600/bsiilji.png\" height=\"132\" width=\"640\" alt=\"bsiilji.png\" /></a></div>\n<br /><b>Output With Using CLI</b><br /><b><br /></b>\n<div class=\"separator\">\n<a href=\"http://3.bp.blogspot.com/-4JjPOq7evQA/VJ-eEjH5PhI/AAAAAAAAAUk/QSOQdNZet30/s1600/sy4zp3u.png\"><img border=\"0\" src=\"http://3.bp.blogspot.com/-4JjPOq7evQA/VJ-eEjH5PhI/AAAAAAAAAUk/QSOQdNZet30/s1600/sy4zp3u.png\" height=\"96\" width=\"640\" alt=\"sy4zp3u.png\" /></a></div>\n<br /><b>Log Levels</b><p>As you can see in the output level field is a number, where for Info it is 30 and for Warning it is 40. So, let see what are the different Log Levels available</p><p><span>Level Name : trace, Level Number : 10</span><br /><span>Level Name : debug, Level Number : 20</span><br /><span>Level Name : info, Level Number : 30</span><br /><span>Level Name : warn, Level Number : 40</span><br /><span>Level Name : error, Level Number : 50</span><br /><span>Level Name : fatal, Level Number : 60</span></p><p><b>Log Method API</b></p><p><span>log.info();</span> <span>// returns a boolean message to know is \"info\" level enabled</span><br /><span>log.info(\'message\');</span> <span>// logs a simple message</span><br /><span>log.info(\'message %s\', a, b);</span> <span>// message formatting using util.format</span><br /><span>log.info({a: \'b\'}, \'message\');</span> <span>//adds \"a\" field to log record</span><br /><span><br /></span>\nPlease Like and Share the Blog, if you find it interesting and helpful.<br /></p>\n</div>\n\n',1),(84,'Home | Lattice','http://lattice.cf/',1,0,'\n          <h2 class=\"mvxxl type-neutral-11 h1 em-joey title\">Run Containerized Workloads</h2>\n\n          \n\n          <p class=\"h1 type-neutral-11 em-low\">\n          Lattice aspires to make clustering containers easy. Lattice includes a cluster scheduler, http load balancing, log aggregation and health management. Lattice containers can be long running or temporary tasks which get dynamically scaled and balanced across a cluster. Lattice packages components from Cloud Foundry to provide a cloud native platform for individual developers and small teams.</p>\n        ',1),(85,'webXray','http://webxray.org/',0,0,'<div>\n		<p>webXray is a tool for detecting third-party HTTP requests on large numbers of web pages and matching them to the companies which receive user data.</p>\n\n		<h2>Why</h2>\n		<p>Third-party HTTP requests are the lowest-level mechanism by which user data may be surreptitiously disclosed to unknown parties on the web. This may be for perfectly benign reasons, such as an embedded a picture from another site, or it may be a form of surveillance utilizing tracking pixels, cookies, or even sophisticated fingerprinting techniques.</p>\n\n		<h2>How</h2>\n		<p>As a departure from existing tools, webXray facilitates the identification of the real-world entities to which requests are made by correlating domain request with the owners of domains. In other words, webXray allows you to see which companies are monitoring which pages.</p>\n\n		<p>The core of webXray is a python program which ingests addresses of webpages, passes them to the headless web browser <a href=\"http://phantomjs.org\">PhantomJS</a>, and parses requests in order to determine those which go to domains which are exogenous to the primary (or first-party) domain of the site. This data is then stored in MySQL for later analysis.</p>\n\n		<h2>Who</h2>\n		<p>webXray was originally developed for academic research, but may be used by anybody with an interest in the hidden structures of the web, privacy, and surveillance.</p>\n\n			<h2>Cost</h2>\n			<p>Free!*</p>\n			<p>(*Subject to terms of the <a href=\"https://www.gnu.org/copyleft/gpl.html\">GNU Public License</a>.)</p>\n		</div><div>\n			\n			webXray can downloaded from <a href=\"https://github.com/timlib/webxray\">GitHub</a>.\n			\n			<h2>Dependencies</h2>\n			<p>In order to use webXray the following must be installed on your system:</p>\n\n			<p>In regards to the MySQL Python Connector, I have had the best luck with going with the \"Platform Independent\" version.  Make sure you use Python3 to install it.</p>\n\n			<h2>OS Specific Directions</h2>\n			<h3>Installing on Ubuntu 14.04</h3>\n			<p>Ubuntu 14.04 already has Python3 installed, to make sure you have 3.4 type:</p>\n			<p class=\"cli\">python3 --version</p>\n			<p>...if you see 3.4 or above you are good to go!</p>\n			<p>Next is to install PhantomJS, to do so execute this command:</p>\n			<p class=\"cli\">apt-get install phantomjs</p>\n			<p>...this will install PhantomJS.  webXray requires 1.9 or above, to see if you have this type:</p>\n			<p class=\"cli\">phantomjs --version</p>\n			<p>Assuming you are going well so far it\'s time to install the MySQL database server.  Do do so enter this command:</p>\n			<p class=\"cli\">apt-get install mysql-server</p>\n			<p>This will walk you through setting up MySQL.  It will encourage you to enter a password, strictly speaking this is a good idea, but if you are only using the database for webXray it is likely ok to run it without a password, in which case webXray will work with no changes.  However, if you <em>do</em> choose to use a password you will need to modify the file \'webxray/MySQLDriver.py\' so webXray can connect.</p>\n			<p>Now you start the MySQL server:</p>\n			<p class=\"cli\">service mysql start</p>\n			<p>Each time you reboot your computer you will need to start the MySQL server.</p><p>The last Ubuntu-specific step is to install git:</p>\n			<p class=\"cli\">apt-get install git</p>\n			<p>Great, you can now skip to <a href=\"http://webxray.org/#connector\">installing the Python MySQL Connector</a>.</p>\n\n			<h3>Other Linux Flavors</h3>\n			<p>Should be similar to above, if you are using another flavor you\'re likely able to figure it out based on the above.  webXray was tested and developed primarily on CentOS and RHEL; the major pain there is installing Python 3.</p>\n			\n			<h3>Windows Specific Instructions</h3>\n			<p>Get a linux cloud server (which cost fractions of a cent per hour these days).  Ubuntu is the easiest flavor of Linux to get started with and the directions above will serve you well.  Seriously, this is your best option.  You can do it.  I\'m both confident in your abilities and proud of you for taking this important step in life.</p>\n			\n			<h3>Mac OSX Specific Directions</h3>\n			<p>Unlike Windows, Mac OSX is UNIX-based, this means you can run webXray pretty easily.</p>\n			<p>First you need to install Homebrew which will manage the rest of your installation steps.  You can get Homebrew <a href=\"http://brew.sh\">here</a>, it may take a little bit to get set up.  We\'ll be patient while you do that.</p>\n			<p>OK, the following assumes Homebrew is installed on your system.  Using the terminal (if you have installed Homebrew this is where you are already), you will now install Python3:</p>\n			<p class=\"cli\">brew install python3</p>\n			<p>To make sure you have the right version of Python installed type:</p>\n			<p class=\"cli\">python3 --version</p>\n			<p>...if you see 3.4 or above you are good to go!</p>\n			<p>Next is to install PhantomJS, to do so execute this command:</p>\n			<p class=\"cli\">brew install phantomjs</p>\n			<p>...this will install PhantomJS.  webXray requires 1.9 or above, to see if you have this type:</p>\n			<p class=\"cli\">phantomjs --version</p>\n			<p>Assuming you are going well so far it\'s time to install the MySQL database server.  Do do so enter this command:</p>\n			<p class=\"cli\">brew install mysql</p>\n			<p>This will walk you through setting up MySQL.  It will encourage you to enter a password, strictly speaking this is a good idea, but if you are only using the database for webXray it is likely ok to run it without a password, in which case webXray will work with no changes.  However, if you <em>do</em> choose to use a password you will need to modify the file \'webxray/MySQLDriver.py\' so webXray can connect.</p>\n			<p>Now you start the MySQL server:</p>\n			<p class=\"cli\">mysql.server start</p>\n			<p>Each time you reboot your computer you will need to start the MySQL server.</p><p>The last Mac specific step is to install wget, a program that allows you to download resources from the web.  To do so type:</p>\n			<p class=\"cli\">brew install wget</p>\n			<p>Great, you can now continue to <a href=\"http://webxray.org/#connector\">installing the Python MySQL Connector</a>.</p>\n			\n			<h3>Installing Python MySQL Connector</h3>\n			<p>OK, here is the part that is a pain in the ass: installing the Python MySQL Connector.  To do so first download it using this command:</p>\n			<p class=\"cli\">wget https://dev.mysql.com/get/Downloads/Connector-Python/mysql-connector-python-2.0.4.tar.gz</p>\n			<p>Next, you need to extract the archive:</p>\n			<p class=\"cli\">tar -xvf mysql-connector-python-2.0.4.tar.gz</p>\n			<p>Next, go to the directory:</p>\n			<p class=\"cli\">cd mysql-connector-python-2.0.4/</p>\n			<p>...and run the installer:</p>\n			<p class=\"cli\">python3 setup.py install</p>\n			<p>...the go back to the last directory:</p>\n			<p class=\"cli\">cd ..</p>\n			<p>Continue below to...</p>\n			\n			<h3>Install webXray!</h3>\n			<p>The last step is to get webXray from GitHub!</p>\n			<p class=\"cli\">git clone https://github.com/timlib/webXray.git</p>\n			<p>Now webXray is ready to go!  To use it type:</p>\n			<p class=\"cli\">cd webXray</p>\n			<p class=\"cli\">python3 run_webxray.py -i</p>\n			<p>This is the interactive mode and will guide you to scanning the top 1,000 Alexa websites.</p>\n	</div>',1),(86,'/ËˆTrÃ¦fÉªk/','http://traefik.github.io/',1,0,'\n\n    \n    <div class=\"post-holder\">\n\n<p>Træfɪk is a modern HTTP reverse proxy and load balancer made to deploy microservices with ease.\nIt supports several backends (Docker, Mesos/Marathon, Consul, Etcd, Rest API, file…) to manage its configuration automatically and dynamically.</p>\n\n    </div>\n\n\n                \n        \n                \n                    <div class=\"post-holder\">\n\n<ul><li>No dependency hell, single binary made with go</li>\n<li>Simple json Rest API</li>\n<li>Simple TOML file configuration</li>\n<li>Multiple backends supported: Docker, Mesos/Marathon, Consul, Etcd, and more to come</li>\n<li>Watchers for backends, can listen change in backends to apply a new configuration automatically</li>\n<li>Hot-reloading of configuration. No need to restart the process</li>\n<li>Graceful shutdown http connections during hot-reloads</li>\n<li>Circuit breakers on backends</li>\n<li>Round Robin, rebalancer load-balancers</li>\n<li>Rest Metrics</li>\n<li>Tiny docker image included</li>\n<li>SSL backends support</li>\n<li>SSL frontend support</li>\n<li>WebUI</li>\n</ul></div>\n\n\n                \n        \n                \n                    <div class=\"post-holder\">\n\n<pre><code>./traefik traefik.toml\n</code></pre>\n\n<ul><li>Use the tiny Docker image:</li>\n</ul><pre><code>docker run -d -p 8080:8080 -p 80:80 -v $PWD/traefik.toml:/traefik.toml emilevauge/traefik\n</code></pre>\n\n<ul><li>From sources:</li>\n</ul><pre><code>git clone https://github.com/EmileVauge/traefik\n</code></pre>\n\n<p>You can find the complete documentation <a href=\"https://github.com/EmileVauge/traefik/blob/master/docs/index.md\">here</a>.</p>\n\n<p><a href=\"https://circleci.com/gh/EmileVauge/traefik\"><img src=\"https://img.shields.io/circleci/project/EmileVauge/traefik.svg\" alt=\"Circle CI\" /></a></p>\n\n<p><a href=\"https://github.com/EmileVauge/traefik\"><img src=\"https://img.shields.io/github/forks/EmileVauge/traefik.svg\" alt=\"Forks\" /></a></p>\n\n<p><a href=\"https://github.com/EmileVauge/traefik\"><img src=\"https://img.shields.io/github/stars/EmileVauge/traefik.svg\" alt=\"Stars\" /></a></p>\n\n<p><a href=\"https://github.com/EmileVauge/traefik/blob/master/LICENSE.md\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"License\" /></a></p>\n\n    </div>\n\n\n                \n        \n\n',1),(87,'Checkpoint and restore Docker container with CRIU','http://blog.circleci.com/checkpoint-and-restore-docker-container-with-criu/',1,0,'\r\n			\r\n									\r\n			\r\n									\n<h2>Start a container</h2>\n<p><code>$ export cid=$(docker run -d busybox tail -f /dev/null)</code></p>\n<h2>Checkpoint the container</h2>\n<p><code>$ docker checkpoint $cid<br />7cc692f22c11</code></p>\n<h2>It’s not running anymore</h2>\n<p><code>$ docker ps --quiet<br />No containers shown here</code></p>\n<h2>Restore the container</h2>\n<p><code>$ docker restore $cid<br />7cc692f22c11</code></p>\n<h2>It’s running again!!</h2>\n<p><code>$ docker ps --quiet<br />7cc692f22c11</code></p>\n\n<p>CR (checkpoint and restart) is a technology that saves the memory state of process into files and resume the processes from the saved state. <a href=\"https://github.com/xemul/criu\">CRIU</a> is a tool originally developed to CR LXC containers.</p>\n<p>Since Docker can run LXC containers, we should be able to CR Docker containers by using CRIU, right? I’ve experimented this before and wrote <a href=\"http://kimh.github.io/blog/en/criu/experiment-to-suspend-and-resume-docker-container-with-criu/\">this post</a>. Unfortunately, the experiment didn’t succeed because CRIU didn’t support Docker very well at that moment.</p>\n<p>More than a year has passed since then and CRIU team made a lot of effort to support Docker.</p>\n<p>In this post, I will show you how Docker checkpoint/restore works with CRIU and why I’m excited about it with use cases.</p>\n\n<p>CR Docker by using CRIU is still under the experiment, so you need to build Docker with experimental feature enabled. Also, it’s not fully merged into Docker, so you need to use a fork of Docker that one of developers in CRIU team created. In addition to that, you also need to compile Kernel with special kernel modules enabled.</p>\n<p>It’s not very fun to do all these things, but don’t worry! I’ve created a Vagrant box with all these things done and uploaded for you! You just need to download the box and run on your local machine.</p>\n\n<p>Assuming that the name of VM is <strong>vg-1</strong>, run the following commands.</p>\n<p><code>vagrant box add https://atlas.hashicorp.com/kimh/boxes/criu<br />mkdir &lt;path to vg-1&gt;<br />cd &lt;path to vg-1&gt;<br />vagrant init kimh/criu<br />vagrant up<br />vagrant ssh</code></p>\n<p>That’s all you have to do to try CRIU!</p>\n\n<p>Docker running on <strong>vg-1</strong> is enabled experimental features and has two commands you’ve never seen before.</p>\n<p><code>$ docker checkpoint --help</code></p>\n<p>Usage:  docker checkpoint [OPTIONS] CONTAINER [CONTAINER...]</p>\n<p>Checkpoint one or more running containers<br />....</p>\n<p><code>$ docker restore --help</code></p>\n<p>Usage:  docker restore [OPTIONS] CONTAINER [CONTAINER...]</p>\n<p>Restore one or more checkpointed containers<br />....</p>\n<p>These <code>checkpoint</code> and <code>restore</code> commands use the CRIU executable which I compiled and installed on the vagrant box.</p>\n<p><code>$ criu --help</code></p>\n<p>Usage:<br />criu dump|pre-dump -t PID []<br />criu restore []<br />criu check [--ms]<br />criu exec -p PID <br />criu page-server<br />criu service []<br />criu dedup</p>\n<p>....</p>\n<p>Here’s a very simple example of how to CR a Docker container.</p>\n\n<p><code>docker run \\<br />--name np \\<br />--rm \\<br />busybox:latest \\<br />/bin/sh -c \\<br />\'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done\'</code></p>\n<p>This command download busybox image andruns a number-printer container which keeps printing incremental numbers.</p>\n\n<p>Now, let’s checkpoint this container. You can do this with <code>docker checkpoint</code> command. Because the number-printer container is running in the foreground, do this from other terminal.</p>\n<p><code>docker checkpoint np</code></p>\n<p>Once you checkpoint the container, you will see that it stops printing numbers. <code>docker ps</code> command doesn’t show the container anymore.</p>\n\n<p>Let’s restore the number-printing container with <code>docker restore</code> command.</p>\n<p><code>docker restore np</code></p>\n<p>If restoring succeeded, the number-printing container again starts printing numbers. It’s also back in the result of <code>docker ps</code>. We succeeded in checkpointing and restoring the container!</p>\n\n<p>You may say, <i>“Wait, you can already do this with docker pause/unpause commands”.</i></p>\n<p>That’s right and you don’t see a behavior difference between pause/unpause and checkpoint/restore in the previous example. Both commands stop a job of container in the middle and resume later.</p>\n<p>The difference is while checkpoint/restart saves the memory state of containers into a disk while pause/unpause doesn’t.</p>\n<p>You can think of pause/unpause as sending SIGSTOP and SIGCONT to UNIX process. You can run a process in foreground and hitting Ctrl+z will stop the process. You can also restore the process with <code>fg job-id</code>. Pause/unpause commands do the similar thing to running containers.</p>\n<p>Checkpoint/restore does more complicated things. It dumps the memory state of running containers into the disk and restore the containers by reading the memory dump.</p>\n<p>Because checkpoint/restore saves the state of containers into the disk, we can do more interesting things that we cannot do with pause/unpase. We will see these interesting use cases in the next section.</p>\n\n<p>Here are some use cases of CR Docker containers.</p>\n\n<p>You sometimes want to run tasks that take very long time. For example, if you run a program that calculates digits of Pi on a Docker container, the container need to be long-running to calculate trillion digits.</p>\n<p>But what if you accidentally shutdown your host machine? This will shutdown the Pi container and you will lose trillion digits that the container has calculated.</p>\n<p>CRIU is a great tool to solve this problem. You can periodically checkpoint the container and be prepared for the accident. If the accident happens, you just need to restore the container and resume the calculation in the middle.</p>\n\n<p>There are applications that take very long time to start. You can speed up such containers by checkpointing the containers after slow applications started.</p>\n<p>Here is an example that demonstrates this use case. Let’s assume that redis is super slow to start (This is completely not true in reality!!).</p>\n<p>We just start a redis container as usual.</p>\n<p><code>cid=$(docker run -d redis)</code></p>\n<p>Because redis is slow to start in the world of this blog, we need to wait for 20 secs before redis is ready to accept connections. After wating 20 secs, we checkpoint the container.</p>\n<p><code>docker checkpoint --image-dir=/tmp/redis $cid</code></p>\n<p>We need to restore the redis container into a new container so that you can start multiple containers from the saved container. To do this, you need to use <strong>–force=true</strong> and pass a new container id.</p>\n<p><code>docker create --name=redis-0 redis<br />docker restore --force=true --image-dir=/tmp/redis redis-0</code></p>\n<p>The started container is immediately ready to accept the connection without waiting 20 secs.</p>\n<p>The cool thing is that you can repeat the same process to start multiple containers very fast.</p>\n<p><code>for i in 1 2 3 4 5; do<br />docker create --name=redis-$i redis<br />docker restore --force=true --image-dir=/tmp/redis redis-$i<br />done</code></p>\n<p>The above example theoretically takes 100 secs (20 sec x 5) to finish without CR. With CR, the five containers start in the blink of an eye.</p>\n\n<p>You can do the Docker container migration with CRIU.</p>\n<p>To see how this works, you need to run two vagrant VMs. You should be already running <strong>vg-1</strong>, so you need to run one more VM <strong>vg-2</strong>.</p>\n<p><code># Create vg-2<br />mkdir &lt;path to vg-2&gt;<br />cd &lt;path to vg-2&gt;<br />vagrant init kimh/criu<br />vagrant up</code></p>\n<p>Once <strong>vg-2</strong> is up, run the following command to run a container. This is needed because of a bug in CRIU. Otherwise, the following exmaples don’t work. So, please don’t forget to do this.</p>\n<p><code>vagrant ssh -- \'docker run --name=foo -d busybox tail -f /dev/null &amp;&amp; docker rm -f foo\'</code></p>\n<p>You are now running two vagrant VMs <strong>vg-1</strong> and <strong>vg-2</strong>. Run a number-printer container on <strong>vg-1</strong>.</p>\n<p><code>docker run \\<br />-d \\<br />--name np busybox:latest \\<br />/bin/sh -c \\<br />\'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done\'</code></p>\n<p>You can see that the number-printer container is keep printing numbers.</p>\n<p><code>$ docker logs -f np<br />1<br />2<br />3<br />4<br />5<br />....</code></p>\n<p>Now let’s migrate the container to <strong>vg-2</strong>. I made a <a href=\"https://gist.github.com/kimh/79f7bcb195466acea39a\">helper shell script</a> to do this, so you need to download it to your local machine.</p>\n<p><code>curl -L -o docker-migrate.sh https://gist.githubusercontent.com/kimh/79f7bcb195466acea39a/raw/ca0965d90c850dcbe54654a6002678fff333d408/docker-migrate.sh<br />chmod +x docker-migrate.sh</code></p>\n<p>You need to pass three arguments to use the script.</p>\n<p>The first argument is the name of the container to migrate. In our case, it’s <strong>np</strong>.</p>\n<p>The second and third arguments are path to vagrant directories that you migrate from and to.</p>\n<p><code>docker-migrate.sh np &lt;path to vg-1&gt; &lt;path to vg-2&gt;</code></p>\n<p>Ex. /tmp/docker-migrate.sh np /Users/kimh/vagrant/vg1 /Users/kimh/vagrant/vg2</p>\n<p>Once the script successfully finished, you can go to <strong>vg-2</strong> and check with <code>docker logs -f np</code> command. You should see that the number-printing container resumes printing numbers from the place that it’s paused on vg-1.</p>\n<p><a href=\"http://blog.circleci.com/wp-content/uploads/2015/09/Migration_Succeeded.jpg\"><img src=\"http://blog.circleci.com/wp-content/uploads/2015/09/Migration_Succeeded-1024x319.jpg\" alt=\"Migration_Succeeded\" width=\"640\" height=\"199\" class=\"alignleft size-large wp-image-412\" /></a><br />The migration succeeded!</p>\n\n<p>We’ve seen how to CR Docker container with CRIU and some use cases. I hope people will come up more interesting use cases and develop tools that takes the advantages of CR.</p>\n<p>Here are useful resources to learn more about CR Docker with CRIU.</p>\n<p><a href=\"http://criu.org/Docker\">Main website of CRIU</a><br /><a href=\"https://github.com/boucher/docker/blob/cr-combined/experimental/checkpoint_restore.md\">Docker fork with CRIU support</a><br /><a href=\"http://blog.kubernetes.io/2015/07/how-did-quake-demo-from-dockercon-work.html\">Kubernetes blog about CRIU</a></p>\n<p class=\"special-message\">Need fast, easy-to-setup Continuous Integration? Try <a href=\"https://circleci.com\">Circle</a> and set up your CI server in 20 seconds!</p>												\r\n																					\r\n																	\r\n										\r\n					',1),(88,'Tutorial - pyrit - First steps and tutorial - WPA/WPA2-PSK and a world of affordable many-core platforms','https://code.google.com/p/pyrit/wiki/Tutorial',1,0,'\n <p>This document will guide you through your first steps with Pyrit. <strong>Before continuing, you should have Pyrit installed and working.</strong> See the <a href=\"https://code.google.com/p/pyrit/wiki/Installation\">Installation</a>-Wiki for details. You will also need to have <a href=\"http://www.secdev.org/projects/scapy/\">Scapy</a> installed, which should come with your distribution or may be installed from source. Pyrit can use <a href=\"http://www.sqlalchemy.org/\">SQLAlchemy</a> to access various kinds of SQL-databases and you\'ll need to have it installed if you want to try that feature as explained below. </p><p>You should also take a look at the <a href=\"https://code.google.com/p/pyrit/wiki/ReferenceManual\">manual</a> when new commands get introduced below; more information and details about the features a command provides are given there. </p><p>Throughout this tutorial we will refer to files and examples that are distributed together with Pyrit\'s source-code. Therefore the first step is to get yourself a copy of <a href=\"http://pyrit.googlecode.com/files/pyrit-0.3.0.tar.gz\">the source-code tarball</a>, unpack it and switch to the /test-directory: </p><pre class=\"prettyprint\">wget http://pyrit.googlecode.com/files/pyrit-0.3.0.tar.gz\ntar xvzf pyrit-0.3.0.tar.gz\ncd pyrit-0.3.0/test</pre><p>You should find three files within this directory that will be of interest for us: </p><ul><li><i>dict.gz</i> is a gzip-compressed wordlist </li><li><i>wpa2psk-linksys.dump.gz</i> is a gzip-compressed dump of a WPA2-PSK handshake </li><li><i>wpapsk-linksys.dump.gz</i> is a gzip-compressed dump a WPA-PSK handshake </li></ul><p>Pyrit can understand packet capture files in pcap-format. These files basically contain what was captured from the air. Our first meaningful step in this tutorial is to let Pyrit analyze one of the capture files and give us some information about the content.  </p><h2><a></a>Analyzing a capture file<a href=\"https://code.google.com/p/pyrit/wiki/Tutorial#Analyzing_a_capture_file\" class=\"section_anchor\"></a></h2><p>Issue to following command to analyze the file <i>wpapsk-linksys.dump.gz</i>: </p><pre class=\"prettyprint\">pyrit -r wpapsk-linksys.dump.gz analyze</pre><p>  Pyrit should answer with output very similar like the following: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nParsing file \'wpapsk-linksys.dump.gz\' (1/1)...\n587 packets (587 802.11-packets), 1 APs\n\n#1: AccessPoint 00:0b:86:c2:a4:85 (\'linksys\')\n  #0: Station 00:13:ce:55:98:ef, handshake found\n  #1: Station 01:00:5e:7f:ff:fa\n  #2: Station 01:00:5e:00:00:16</pre><p>Pyrit has successfuly parsed the capture file and found one AccessPoint with BSSID <i>00:0b:86:c2:a4:85</i> and ESSID <i>\'linksys\'</i> and three Stations communicating with that AccessPoint. The key-negotiation (known as the fourway-handshake) between the Station with MAC <i>00:13:ce:55:98:ef</i> and the AccessPoint has also been recorded in the capture file. We can use the data from this handshake to guess that password that is used to protect the network. </p><p><strong>Please note</strong> that Pyrit can transparently read/write gzip-compressed files; this becomes very handy when dealing with large wordlists or cowpatty-files that may take hundrets of megabytes. </p><h2><a></a>Attacking a handshake and revealing the password<a href=\"https://code.google.com/p/pyrit/wiki/Tutorial#Attacking_a_handshake_and_revealing_the_password\" class=\"section_anchor\"></a></h2><p>We now use the example wordlist <i>dict.gz</i> and let Pyrit guess the password that was used in the key-negotiation between AccessPoint <i>00:0b:86:c2:a4:85</i> and Station <i>00:13:ce:55:98:ef</i>. The correct password should get detected, if it is part of the list. In our terms, this is known as a \"passthrough-attack\". Issue the following command: </p><pre class=\"prettyprint\">pyrit -r wpapsk-linksys.dump.gz -i dict.gz -b 00:0b:86:c2:a4:85 attack_passthrough</pre><p>This tells Pyrit to take the capture-file <i>wpapsk-linksys.dump.gz</i> and attack the key-negotiation with AccessPoint <i>00:0b:86:c2:a4:85</i> using the dictionary-file <i>dict.gz</i>. </p><p><strong>Please note</strong> that you do not always have to tell Pyrit which AccessPoint to choose from the capture-file - Pyrit will usually be able to figure that out by itself. </p><p>You should get a response very similar to the following: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nParsing file \'wpapsk-linksys.dump.gz\' (1/1)...\n587 packets (587 802.11-packets), 1 APs\n\nTried 4091 PMKs so far; 935 PMKs per second.\n\nThe password is \'dictionary\'.</pre><p>We\'ve successfully revealed that the password used to protect the network <i>00:0b:86:c2:a4:85</i> is <i>\"dictionary\"</i>... </p><h2><a></a>Interlude: Stripping a capture-file from unnecessary cruft<a href=\"https://code.google.com/p/pyrit/wiki/Tutorial#Interlude:_Stripping_a_capture-file_from_unnecessary_cruft\" class=\"section_anchor\"></a></h2><p>Capture-files are usually simple dumps of the traffic captured directly from the air. For our purpose, we are only interested in a very tiny fraction of the traffic between AccessPoint and Station. Pyrit can help reducing the size of a packet-capture file by analyzing the traffic and throwing away all packets that are of no use for us. We end up with a new, very small capture file that still holds all valuable information and is useable with other tools like <i>Wireshark</i>. </p><p><strong>Please note</strong> that stripping a capture file is not necessary. It\'s sole purpose is to make life a little easier when it comes to large capture files. </p><p>Our original example has 587 packets and a size of roughly 13kb. Issue the following command: </p><pre class=\"prettyprint\">pyrit -r wpapsk-linksys.dump.gz -o wpapsk-linksys_stripped.dump.gz strip</pre><p>You should get a response like the following: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nParsing file \'wpapsk-linksys.dump.gz\' (1/1)...\n587 packets (587 802.11-packets), 1 APs\n\n#1: AccessPoint 00:0b:86:c2:a4:85 (\'linksys\')\n  #0: Station 00:13:ce:55:98:ef (1 authentications)\n\nNew pcap-file \'wpapsk-linksys_stripped.dump.gz\' written (4 out of 587 packets)</pre><p>The new capture file <i>wpapsk-linksys_stripped.dump.gz</i> has a size of only a few hundred bytes and contains only three from the key-negotiation (used to attack the password) and one beacon-frame (used to detect the network\'s ESSID). </p><p>As you may already know, guessing the password used in a WPA(2)-PSK key-negotiation is a computational-intensive task. During this process, more than 99.9% of the CPU-cycles have to be spent to compute what is known as the <i>Pairwise Master Key</i>, a 256-bit key derived from the ESSID and a password using the PBKDF2-HMAC-SHA1-algorithm. One of the major weaknesses of WPA(2)-PSK is that the <i>Pairwise Master Key</i> has no elements that are unique to the moment of the key-negotiation between AccessPoint and Station. It is therefor possible to pre-compute the <i>Pairwise Master Key</i> and store it for later use. In the moment of attacking a key-negotiation, we are left with the remaining 0.1% of what depends on session-unique data. It is therefore extremely valueable for an attacker to pre-compute large tables of <i>Pairwise Master Keys</i> for common ESSIDs. </p><p>This is where Pyrit\'s database kicks in. It can store ESSIDs, passwords and their corresponding <i>Pairwise Master Keys</i>, possibly growing to the size of hundrets of millions of entries. Starting with a fresh installation of Pyrit, your database will most probably be empty. Issue the following command to get an overview: </p><pre class=\"prettyprint\">pyrit eval</pre><p>Pyrit should respond like this: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nConnecting to storage at \'file://\'...  connected.\nPasswords available: 0</pre><p>Nothing fancy to see here, yet. </p><p><strong>Please note</strong> the default filesystem-based storage <i>\'file://\'</i>. We\'ll come to SQL-databases later on. </p><h2><a></a>Populating and batch-processing the database<a href=\"https://code.google.com/p/pyrit/wiki/Tutorial#Populating_and_batch-processing_the_database\" class=\"section_anchor\"></a></h2><p>In order to make the database usefull, we\'ll populate it with passwords from a wordlist. Issue the following command: </p><pre class=\"prettyprint\">pyrit -i dict.gz import_passwords</pre><p>Pyrit will read the file <i>\'dict.gz\'</i> and store the wordlist in it\'s internal database format. You should get a response like the following: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nConnecting to storage at \'file://\'...  connected.\n10202 lines read. Flushing buffers... \nAll done.</pre><p><strong>Please note</strong> that you can add more passwords to the database later on; the command <i>\'import_passwords\'</i> ensures that duplicates within the wordlist or between the wordlist and the database are tossed out and not stored again. For now, run the <i>\'eval\'</i>-command again to see how the database has been populated with passwords from <i>\'dict.gz\'</i>. You should get output similar to this: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nConnecting to storage at \'file://\'...  connected.\nPasswords available: 4078</pre><p>You\'ll notice that Pyrit has only stored 4,078 out of the 10,202 passwords from the file. Pyrit has automatically filtered passwords that are not suitable for WPA(2)-PSK and also sorted out duplicates. Now that we have some passwords in the database, we have to create an ESSID. Issue the following command: </p><pre class=\"prettyprint\">pyrit -e linksys create_essid</pre><p>... and you\'ll get an output like this: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nConnecting to storage at \'file://\'...  connected.\nCreated ESSID \'linksys\'</pre><p>Run the <i>\'eval\'</i>-command again and you\'ll see that ESSID <i>\'linksys\'</i> has been created in the database: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nConnecting to storage at \'file://\'...  connected.\nPasswords available: 4078\n\nESSID \'linksys\' : 0 (0.00%)</pre><p>The database now contains enough information to start batch-processing it. Pyrit will take all (ESSID:password)-combinations, compute the corresponding <i>Pairwise master Keys</i> and store those for later use. </p><p><strong>Please note</strong> that you can stop Pyrit\'s batch-processing at any time (with ctrl+c or sending SIGTERM). Pyrit will start at the point where it stopped the next time you start batch-processing. Issue to following command: </p><pre class=\"prettyprint\">pyrit batch</pre><p>... and watch how Pyrit crunches through the database until it runs out of work: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nConnecting to storage at \'file://\'...  connected.\nWorking on ESSID \'linksys\'\nProcessed all workunits for ESSID \'linksys\'; 1035 PMKs per second.\n\nBatchprocessing done.</pre><p>You can use the <i>\'eval\'</i>-command once more to see that all workunits for ESSID <i>\'linksys\'</i> have been computed. </p><h2><a></a>Using the database to attack a handshake<a href=\"https://code.google.com/p/pyrit/wiki/Tutorial#Using_the_database_to_attack_a_handshake\" class=\"section_anchor\"></a></h2><p>We can now use the <i>Pairwise Master Keys</i> stored in the database to attack the same handshake as in the example above. Instead of running a \"passthrough-attack\", where the database is not touched at all, we issue a \"database-attack\" like the following: </p><pre class=\"prettyprint\">pyrit -r wpapsk-linksys.dump.gz attack_db</pre><p><strong>Please note</strong> that we did neither specify the network\'s ESSID nor it\'s BSSID. </p><p>You should get a response very similar to the following: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nConnecting to storage at \'file://\'...  connected.\nParsing file \'wpapsk-linksys.dump.gz\' (1/1)...\n587 packets (587 802.11-packets), 1 APs\n\nPicked AccessPoint 00:0b:86:c2:a4:85 (\'linksys\') automatically.\nAttacking handshake with Station 00:13:ce:55:98:ef...\nTried 1639 PMKs so far (39.8%); 1577435 PMKs per second.\n\nThe password is \'dictionary\'.</pre><p>Again, the password protecting the network has been revealed. </p><p>While our example uses an extremely small wordlist and the performance-numbers are thereby not very reliable, attacking a handshake from a database of pre-computed <i>Pairwise Master Keys</i> will usually crunch through more than one million passwords per second. You can also run a database-attack against the second capture file <i>\'wpa2psk-linksys.dump.gz\'</i>, which will also take use of the pre-computed <i>Pairwise Master Keys</i>. </p><h2><a></a>Scaling up: Using a SQL-database as storage<a href=\"https://code.google.com/p/pyrit/wiki/Tutorial#Scaling_up:_Using_a_SQL-database_as_storage\" class=\"section_anchor\"></a></h2><p>Using a SQL-database instead of the filesystem will give you some benefits: </p><ul><li>Real ACID-compliance, backup- and load-balancing-features. </li><li>Multiple Pyrit-clients can operate on the same database at the same time over the network. </li><li>Meta- and binary-data are (possibly) stored independent of each other, making the database easier to query and operate on. </li></ul><p>Pyrit uses <a href=\"http://www.sqlalchemy.org/\">SQLAlchemy</a> and can therefor use all kinds of SQL-databases for it\'s internal storage mechanism: <a href=\"http://www.sqlite.org/\">SQLite</a> has all the benefits described above (except the network-functionality), <a href=\"http://dev.mysql.com/\">MySQL</a> and <a href=\"http://www.postgresql.org/\">PostgreSQL</a> require some setup but provide more features and better scaling. Please refer to <a href=\"http://www.sqlalchemy.org/\">SQLAlchemy</a>\'s documentation for more details about supported databases. </p><p>Using a database as storage is extremely easy - all you got to do is to provide an alternative <i>connection-string</i> instead of <i>\'file://\'</i> that Pyrit uses by default (please refer to the <a href=\"https://code.google.com/p/pyrit/wiki/ReferenceManual\">manual</a> for details about the connection-string). In the following example, we use a SQLite-database stored in the single file <i>\'mydb.db\'</i>: </p><pre class=\"prettyprint\">pyrit -u sqlite:///mydb.db -i dict.gz import_passwords</pre><p><strong>Please note</strong> that we do not have to care about creating the database (in the case of SQLite) or any tables within it. Pyrit will take care of this. You should get an output very similar to this: </p><pre class=\"prettyprint\">Pyrit 0.3.0 (C) 2008-2010 Lukas Lueg http://pyrit.googlecode.com\nThis code is distributed under the GNU General Public License v3+\n\nConnecting to storage at \'sqlite:///mydb.db\'...  connected.\n10202 lines read. Flushing buffers... \nAll done.</pre><p>Setting up a MySQL- or PostreSQL-server is beyond the scope of this tutorial. However, after setting up the database-server, creating a (empty) database and providing the necessary credentials, the required steps in Pyrit are the same as above. For example, to use the (already created) database <i>\'pyrit\'</i> on a PostgreSQL-server at 192.168.0.7 with user <i>\'pyrit\'</i> and no password, your commandline would look something like this: </p><pre class=\"prettyprint\">pyrit -u postgres://pyrit:@192.168.0.7/pyrit -e linksys create_essid</pre><p>To make life a little easier, you can save the default connection-string in Pyrit\'s configuration-file at <i>\'~/.pyrit/config\'</i>. Change the value of the key <i>default_storage</i> to a new connection-string and you won\'t have to supply it every single time. </p>\n ',1),(89,'Letâ€™s Write a Web Extension','https://hacks.mozilla.org/2015/09/lets_write_a_webextension/',0,0,'<blockquote class=\"entry-content\">\n      <p>Cross browser extensions are awesome!</p>\n    </blockquote>',1),(90,'Create Your Own Streaming Service With Emby','http://www.linux.com/news/software/multimedia/854527-create-your-own-streaming-service-with-emby/',0,0,'\n\n<p dir=\"ltr\"><img src=\"http://www.linux.com/images/stories/66866/emby-1.jpg\" width=\"300\" height=\"185\" alt=\"emby-1\" title=\"Figure 1: Configure Emby user.\" class=\"caption\" />We live in an age where everything is moving to cloud. This trend of course has its own advantages and disadvantages. The biggest advantage is that we can access our data anywhere, anytime from any device. On the flip side, the biggest disadvantage is that we lose control or ownership of our data.</p>\n<p dir=\"ltr\">What if you could get the best of both worlds? What if you get to “own” this cloud? That\'s what I do. Although ownCloud takes care of my cloud needs, there are other fully or partially open source solutions that take care of my streaming needs. I have been using Plex Media Server so far and it\'s extremely powerful. Recently, however, I came across an open source media server that looks quite promising; it\'s called <a href=\"http://emby.media/\">Emby</a>. According to the website, the Emby server automatically converts and streams your media on the fly to play on any device.</p>\n<h3 dir=\"ltr\">Why Emby?</h3>\n<p dir=\"ltr\">I tried Emby not because I wanted to switch away from Plex or because I was looking for an alternative; I love Plex, it serves me well. I gave Emby a try because of its open source base, and because it\'s good to have choices.</p>\n<p dir=\"ltr\">Installation of Emy is quite easy. Officially, it supports Arch Linux (my favorite distro), CentOS, Debian (runs on my server), Docker, Fedora, and Ubuntu, but you can always install it on any distro of your choice, manually. There are different instructions for different distros.</p>\n<p dir=\"ltr\">If you are running Ubuntu 14.04, then run the following commands in the terminal:</p>\n<pre dir=\"ltr\">wget -qO - <a href=\"http://download.opensuse.org/repositories/home\">http://download.opensuse.org/repositories/home</a>:emby/xUbuntu_14.04/Release.key | sudo apt-key add -<br class=\"kix-line-break\" />sudo sh -c \"echo \'deb <a href=\"http://download.opensuse.org/repositories/home\">http://download.opensuse.org/repositories/home</a>:/emby/xUbuntu_14.04/ /\' &gt;&gt; /etc/apt/sources.list.d/emby-server.list\"<br class=\"kix-line-break\" />sudo apt-get update<br class=\"kix-line-break\" />sudo apt-get install mono-runtime mediainfo libsqlite3-dev imagemagick-6.q8 libmagickwand-6.q8-2 libmagickcore-6.q8-2<br class=\"kix-line-break\" />sudo apt-get install emby-server</pre>\n<p dir=\"ltr\">If you are on Fedora or CentOS, first install the epel repo:</p>\n<pre dir=\"ltr\">yum install epel-release</pre>\n<p dir=\"ltr\">Then, install Emby for CentOS or Fedora releases (check the directory path for your version of Fedora <a href=\"http://docs.google.com/htdownload.opensuse.org/repositories/home:/emby/\">here</a>) and replace \"REPO_DIRECTORY\" with it in the the following command:</p>\n<pre dir=\"ltr\">wget <a href=\"http://download.opensuse.org/repositories/home\">http://download.opensuse.org/repositories/home</a>:/emby/REPO_DIRECTORY/home:emby.repo -O /etc/yum.repos.d/emby.repo<br class=\"kix-line-break\" />yum install emby-server</pre>\n<p dir=\"ltr\">For example, if you are on CentOS 7, the command will be:</p>\n<pre dir=\"ltr\">wget <a href=\"http://download.opensuse.org/repositories/home\">http://download.opensuse.org/repositories/home</a>:/emby/CentOS_7/home:emby.repo -O /etc/yum.repos.d/emby.repo</pre>\n<pre dir=\"ltr\">yum install emby-server</pre>\n<p dir=\"ltr\">Arch users can install emby server from the community repository.</p>\n<pre dir=\"ltr\">sudo pacman -S emby-server</pre>\n<p dir=\"ltr\">During the installation process, you will come across this warning: \"Emby by default runs under a user named “emby”. Please ensure that the user emby has read and write access to any folders you wish to add to your library. Otherwise please run emby under a different user.\"</p>\n<p dir=\"ltr\">Hit OK, and it will give you an option to change the user (see Figure 1 above).</p>\n<p>You can change the user to an existing user on the system or create a new one. I would prefer to keep a separate user so that I can better manager permissions on my server.</p>\n<p dir=\"ltr\">Once the installation is finished, you may have to start the service, depending on your distro. Debian-based servers usually start the service automatically, but if you are on systemd-based systems such as Arch Linux, you will have to start the service using the following command:</p>\n<pre dir=\"ltr\">sudo systemctl start emby-server</pre>\n<p dir=\"ltr\">Once the server is running, you can open the Emby server in a browser :</p>\n<pre dir=\"ltr\"><a href=\"/web/wizardstart.html\">http://SERVER_IP:8096/web/wizardstart.html</a></pre>\n<p dir=\"ltr\">You will be greeted by the window shown in Figure 2.</p>\n<p dir=\"ltr\"><img src=\"http://www.linux.com/images/stories/66866/emby-2.jpg\" width=\"350\" height=\"145\" alt=\"emby-2\" title=\"Figure 2: Emby main window.\" class=\"caption\" /></p>\n<p dir=\"ltr\"> </p>\n<h3 dir=\"ltr\">Configuration</h3>\n<p>You can follow these steps to complete the configuration process.</p>\n<p dir=\"ltr\">1. Enter language</p>\n<p dir=\"ltr\">2. In this window you have to create a user so you can control which user has access to which media libraries.</p>\n<p dir=\"ltr\">Emby also offers a service similar to Plex Pass where you can use it to access the server from outside the local network or from mobile devices. You will notice a <a href=\"http://emby.media/connect/\">link to create Emby Connect account</a>, at the bottom of the page. You will get a free trial of the service for a few weeks, after that you have to pay a fee to support the development work. However, Emby Connect is not required if you want to play it on local network using a browser, but I think it\'s needed if you use it on Amazon Fire TV or other such devices. </p>\n<p>3. In the next window, you can start setting up the media library (Figure 3).</p>\n<p dir=\"ltr\"><img src=\"http://www.linux.com/images/stories/66866/Swapnil-emby-3.jpg\" width=\"550\" height=\"353\" alt=\"Swapnil-emby-3\" title=\"Figure 3: Media settings.\" class=\"caption\" />Click on the + button, choose the media type from the list and give it a name. You can add all the libraries, by media type, that you need. We will configure the location of media later.</p>\n<p dir=\"ltr\">4. Choose the preferred language for metadata</p>\n<p dir=\"ltr\">5. I skipped the Live TV Tuner settings page, as I don\'t have any TV tuner.</p>\n<p dir=\"ltr\">6. Accept the terms of service.</p>\n<p dir=\"ltr\">That\'s it.</p>\n<p dir=\"ltr\">You can now log into your Emby media server. That\'s where you can further fine-tune the server and configure the location for media libraries (Figure 4).</p>\n<p dir=\"ltr\"><img src=\"http://www.linux.com/images/stories/66866/emby-4.jpg\" width=\"550\" height=\"318\" alt=\"emby-4\" title=\"Figure 4: Emby server dashboard.\" class=\"caption\" />Click on Library and choose the media type, then click on the + button on “Media Locations” and choose the path to the directory where videos, music, photos or other media is stored. You can play around to understand other settings. Once configured, you can now access your very own “Netflix &amp; Pandora” on the local server using the server path.</p>\n<p dir=\"ltr\">Just open the browser on any PC connected to the local network and give the path to Emby server, as mentioned above. Log in to the user account and access your media (Figure 5).  </p>\n<p dir=\"ltr\"><img src=\"http://www.linux.com/images/stories/66866/emby-5.jpg\" width=\"550\" height=\"303\" alt=\"emby-5\" title=\"Figure 5: Emby settings page.\" class=\"caption\" />If you want to access the server from outside the local network, just log into your account from this address: <em>app.emby.media</em>. Once logged in, go to the settings menu and provide it with the server IP of your Emby Server. Enjoy your media remotely!</p>\n<p dir=\"ltr\">You can also access the server from mobile devices using either the Emby app or UPnP/DLNA clients. The official Emby app is available for Android devices, along with Amazon\'s Fire TV. There is no client for iOS yet, but you can use VLC to play movies on the local network.</p>\n<p dir=\"ltr\">Go ahead, install Emby on your server and let us know what you think about it!</p>',1),(91,'B2 Cloud Storage','https://www.backblaze.com/b2/cloud-storage.html',0,0,'\n        <div class=\"col-sm-4\">\n            <img src=\"https://www.backblaze.com/b2/images/b2-home-icon-live-archive.png\" class=\"img-responsive img248\" alt=\"b2-home-icon-live-archive.png\" /><h2>Live &amp; Archive</h2>\n\n            <p><span class=\"bbold\">Data is instantly available;</span> no offline or nearline delays.</p>\n\n            <p> Don’t worry about choosing between a service that makes your data available or one that is inexpensive;\n                you get the best of both.\n            </p>\n        </div>\n        <div class=\"col-sm-4\">\n            <img src=\"https://www.backblaze.com/b2/images/b2-home-icon-scale-tree.png\" class=\"img-responsive img248\" alt=\"b2-home-icon-scale-tree.png\" /><h2>Scale Freely</h2>\n\n            <p><span class=\"bbold\">Unlimited Storage:</span> Upload 1 file or millions. 1 MB or 100 petabytes.</p>\n\n            <p><span class=\"bbold\">Pay Only For What You Use:</span> No need to plan and pay for extra head room.</p>\n\n            <p><span class=\"bbold\">Scale Up/Down:</span> Store more data or less as your needs change.</p>\n\n        </div>\n        \n    ',1),(92,'Launching nginScript and Looking Ahead - NGINX','https://www.nginx.com/blog/launching-nginscript-and-looking-ahead/',1,0,'\n		<p>I’ve been wanting to add more scripting capabilities to NGINX for a long time. Scripting lets people do more in NGINX without having to write C modules, for example. Lua is a good tool in this area, but it’s not as widely known as some other languages.</p>\n<p>JavaScript was the most obvious language to add next. It’s the most popular language – <a href=\"http://venturebeat.com/2015/08/19/here-are-the-top-10-programming-languages-used-on-github/\">#1 on GitHub</a> for the past three years. JavaScript is also a good fit for the way we configure NGINX.</p>\n<p>I recently <a href=\"https://www.nginx.com/blog/nginx-open-source-reflecting-back-and-looking-ahead/\">announced</a> a working prototype of a JavaScript virtual machine (VM) that would be embedded within NGINX. Today we announced the launch of the first preview of this software, <i>nginScript</i>, at <a href=\"https://www.nginx.com/nginxconf/\">nginx.conf 2015</a>.</p>\n<p>This is another milestone in the development of NGINX open source software and NGINX Plus. I want to take the opportunity to explain what nginScript is, describe why it’s needed, share some examples, and talk about the future.</p>\n<h2>What nginScript Is</h2>\n<p>nginScript is a robust implementation of much of JavaScript, including the parts most useful for configuring NGINX. Some less-used parts of JavaScript and some less relevant built-in objects are not supported.</p>\n<p>nginScript can be used for quick fixes, making NGINX configuration more convenient and operations more efficient. But, because it runs at the application delivery level, it will also enable you to refactor your applications for greater long-term stability, security, and scale.</p>\n<p>nginScript has two parts:</p>\n<ol><li>A custom virtual machine (VM) and byte-code compiler with a very fast start-up and tear-down time. Blocking operations, such as an HTTP subrequest, can be suspended and resumed, in the same way as other blocking operations in JavaScript.</li>\n<li>A configuration syntax for embedding snippets of JavaScript in your NGINX configuration. These snippets are evaluated at runtime, as HTTP transactions proceed. You can create powerful conditional configurations, modify requests and responses on the fly, and adjust the internal operations of NGINX specifically for each request.</li>\n</ol><p>There are currently several popular JavaScript VMs out there, but they are optimized for use with browsers. The nginScript VM is focused on server requirements. We run a separate VM for each request, so there’s no need for garbage collection. And an nginScript program can be pre-empted so NGINX code can run.</p>\n<h2>What nginScript Makes Possible</h2>\n<p>nginScript has a wide range of potential uses. The following capabilities are available today, and they will be extended over time:</p>\n<ul><li><b>Defend against security threats</b> – nginScript can dynamically respond to abusive traffic sources by rate-limiting or denying requests.</li>\n<li><b>Gain richer control over traffic</b> – You can implement flexible control over how traffic is routed using information in the request or other sources.</li>\n<li><b>Consolidate functions across applications</b> – You can move duplicated functionality out of applications and into the application delivery platform.</li>\n<li><b>Speed application development with function libraries</b> – nginScript code can be developed, reused, improved, stored, and shared.</li>\n</ul><p>In the future, we’ll add more capabilities to nginScript and broaden its scope, so you can use it for tasks such as fixing application bugs, changing business rules, personalizing the user experience, and sharding requests across servers and aggregating the replies.</p>\n<h2>nginScript in Action</h2>\n<p>There are two new directives that can be used to insert JavaScript code into NGINX, <code>js_set</code> and <code>js_run</code>.</p>\n<h3>js_set</h3>\n<p>The <code>js_set</code> directive sets the value of a variable to the result of the execution of JavaScript code:</p>\n<pre><code>http {\r\n    js_set $hello_world \"\r\n            var str = \'Hello World!\';\r\n            // JavaScript\r\n            str;\r\n    \";\r\n\r\n    server {\r\n        ...\r\n        location /{\r\n            return 200 $hello_world;\r\n        }\r\n    }\r\n}</code></pre>\n<p>In the above example, the value of <code>$hello_world</code> is set to the value of the last statement in the JavaScript code. The client is then returned the value of this variable: “Hello World!”.</p>\n<p>A variable set by <code>js_set</code> can be used in any NGINX directive that takes a variable parameter, such as <code>limit_req_zone</code>, <code>proxy_pass</code>, and <code>sub_filter</code>.</p>\n<h3>js_run</h3>\n<p>The <code>js_run</code> directive is evaluated at the content-generation stage. It’s used to execute JavaScript natively and generate an HTTP response. It goes inside a <code>location</code> block and triggers execution of JavaScript code when the location matches a request URL.</p>\n<pre><code>location / {\r\n    js_run \"\r\n        var res;\r\n        res = $r.response;\r\n        res.status = 200;\r\n        res.send(\'Hello World!\');\r\n        res.finish();\r\n    \";\r\n}\r\n</code></pre>\n<h3>Request Parameters</h3>\n<p>With nginScript you have full access to the request parameters, with the <code>$r</code> variable. The following example returns the request parameters back to the requester.</p>\n<pre><code>http {\r\n    js_set $summary \"\r\n    var a, s, h;\r\n\r\n    s = \'JS summary\\n\\n\';\r\n\r\n    s += \'Method: \' + $r.method + \'\\n\';\r\n    s += \'HTTP version: \' + $r.httpVersion + \'\\n\';\r\n    s += \'Host: \' + $r.headers.host + \'\\n\';\r\n    s += \'Remote Address: \' + $r.remoteAddress + \'\\n\';\r\n    s += \'URI: \' + $r.uri + \'\\n\';\r\n\r\n    s += \'Headers:\\n\';\r\n    for (h in $r.headers) {\r\n        s += \'  header \\\"\' + h + \'\\\" is \\\"\' + $r.headers[h] + \'\\\"\\n\';\r\n    }\r\n\r\n    s += \'Args:\\n\';\r\n    for (a in $r.args) {\r\n        s += \'  arg \\\"\' + a + \'\\\" is \\\"\' + $r.args[a] + \'\\\"\\n\';\r\n    }\r\n\r\n    s;\r\n    \";\r\n\r\n    server {\r\n    listen 8000;\r\n\r\n    location /summary {\r\n        return 200 $summary;\r\n    }\r\n}</code></pre>\n<h3>Custom Request Routing</h3>\n<p>With the <code>location</code> block in NGINX you can route traffic based on URI. With nginScript you can route traffic based on any data in the request, including  cookies, headers, arguments, or any keywords in the request body. The following example routes traffic based on the presence of an argument named <code>upstream</code>:</p>\n<pre><code>upstream my_upstream0 {\r\n    server server1.example.com;\r\n    server server2.example.com;\r\n}\r\nupstream my_upstream1 {\r\n    server server3.example.com;\r\n    server server4.example.com;\r\n}\r\n\r\njs_set $my_upstream \"\r\n    var s, upstream, upstream_num;\r\n\r\n    upstream = $r.args.upstream;\r\n\r\n    // convert upstream number to integer\r\n    upstream_num = +upstream;\r\n\r\n    if (upstream_num &lt; 0 || upstream_num &gt; 1) {\r\n        upstream_num = 0;\r\n    }\r\n\r\n    s = \'my_upstream\' + upstream_num;\r\n\r\n    s;\r\n\";\r\n\r\nserver {\r\n    listen 80;\r\n\r\n    location / {\r\n        proxy_set_header Host $host;\r\n        proxy_pass http://$my_upstream;\r\n    }\r\n}</code></pre>\n<h2>The Future of nginScript</h2>\n<p>Our goal is to make NGINX the connective tissue and traffic management layer for all modern web applications. Embedding JavaScript in NGINX is a major step in this direction. nginScript joins Lua, Perl, and modules as robust ways to extend NGINX.</p>\n<p>nginScript is not intended to replace Lua or other embedded languages in NGINX. JavaScript has now been added to the existing community of extensions to NGINX, and we expect the number of alternatives continues to grow in the future.</p>\n<p>nginScript enables testing and prototyping, functionality and security fixes, and strategic refactoring of application development and deployment. We look forward to your feedback as you try out nginScript and consider its long-term place in your application development and delivery strategy.</p>\n<p>For more information, check out these resources:</p>\n<p>To provide feedback, please use our <a href=\"http://mailman.nginx.org/mailman/listinfo/nginx\">mailing list</a>. </p>\n	',1),(93,'Pyra: Full Prototypes Soon! - PandoraLive','http://pandoralive.info/?p=5296',0,0,'\n			<p><img class=\"alignnone size-full wp-image-5150\" src=\"http://pandoralive.info/wp-content/uploads/2015/06/keymat-CAD-top.png\" alt=\"keymat-CAD-top\" width=\"640\" height=\"150\" /></p>\n<p>As we are soon jumping in the 4th quarter of 2015, things are getting progressively in place for the Dragonbox Pyra, with full prototypes to be assembled within November. The remaining elements are now being produced: the keymat, following its layout finalization, is now in production and samples of the real thing will be available by Mid-October. Once received we will see how it works hands-on, and if keys are lighted up as expected via the backlights.</p>\n\n<p>The case’s mould is also being manufactured and should be done by early November. That means that the subsequent cases produced will be very much the final ones, while the colour needs to be decided. I’d say that the colour will also depend on the mould design. Colouring of plastics is done via the addition of masterbatches mixtures, and those can modify the property of plastics at high temperatures – making some colours more prone to cracks or breakage depending on your mould design. I hope ED is aware of that.</p>\n<p>As you may be aware, the Pyra’s hardware is comprised of two essential parts, the main board and the CPU board (for modularity purposes). It looks like the rotator chip is working as expected now (you can see the video at the bottom of this post). It seems like the design is completely done for these 2 boards and there will be a pre-production run by Mid-October to ensure the assembly can work with the fixed design on the actual production line.</p>\n<div class=\"wp-caption alignnone\"><img class=\"size-large wp-image-4985\" src=\"http://pandoralive.info/wp-content/uploads/2015/04/Screenshot-from-2015-04-14-081442-1024x575.png\" alt=\"This is how the two boards look like when assembled together\" width=\"625\" height=\"350\" /><p class=\"wp-caption-text\">This is what the two boards look like when assembled together</p></div>\n<p>Batteries are manufactured and 3000 are now available at the production site in Germany.</p>\n<p>With all these elements in place, the first pre-production models could be assembled by October-November and go to developers in order to increase the pace of software availability (and OS optimizations) by the actual time of release. This also means that pre-orders could start as early as November or something like that, and give it a few more months for the availability of the final machine. So, it now seems like Q1 2016 is a likely shipping period.</p>\n<p>On a side note, ED also shared this video showing the Pyra using a dual video output mode: an emulator running on the Pyra screen, and a full X desktop running at the same time on the HDMI-out via a connected monitor.</p>\n<p><iframe width=\"625\" height=\"352\" src=\"https://www.youtube.com/embed/F1ccK1aX4OY?feature=oembed\" frameborder=\"0\">[embedded content]</iframe></p>\n<p>Not sure how useful this kind of dual output would be in reality (maybe one could use the Pyra screen as a notification display while doing actual work on the X session on a larger screen), but as a tech demo it’s quite cool. This technique works by using one framebuffer running an X-Server and the second framebuffer sent directly to the emulator for display on the attached screen.</p>\n\n					',1),(94,'grammarly/rocker-compose','https://github.com/grammarly/rocker-compose',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://travis-ci.org/grammarly/rocker-compose\"><img src=\"https://camo.githubusercontent.com/69032f520def19bc0583412bd1f2fc99c3011293/68747470733a2f2f7472617669732d63692e6f72672f6772616d6d61726c792f726f636b65722d636f6d706f73652e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a> </p>\n\n<p>Docker composition tool with idempotency features for deploying apps composed of multiple containers. It\'s intended to be used in the following cases:</p>\n\n<ol><li>Deploying containerized apps to servers</li>\n<li>Running containerized apps locally for development or testing</li>\n</ol><p>There is an official <a href=\"https://github.com/docker/compose\">docker-compose</a> tool that may do the trick. But we found that it is missing a few key features that make us unable to use it for production deployment. <code>rocker-compose</code> is designed to be a deployment tool in the first place and be useful for development as a bonus (docker-compose is vice versa). For us, a docker deployment tool should:</p>\n\n<ol><li>Be able to read the manifest (configuration file) and run an isolated chain of containers, respecting a dependency graph</li>\n<li>Be idempotent: only affected containers should be restarted <em>(docker-compose simply restarts everything on every run)</em></li>\n<li>Support configurable namespaces and avoid name clashes between apps <em>(docker-compose does not even support underscores in container names - that\'s a bummer)</em></li>\n<li>Remove containers that are not in the manifest anymore <em>(docker-compose does not)</em></li>\n<li>Respect any changes that can be made to containers\' configuration. Images can be updated, their names might stay the same (in case of using mutable tags)</li>\n<li>From the dependency graph, we can determine, which actions may run in parallel, and utilize that</li>\n<li>Support templating in the manifest file: not only ENV variables, but also conditionals, etc. <em>(docker-compose does not have it, but they recently came up with a <a href=\"https://github.com/docker/compose/issues/1377\">pretty good solution</a> that we have also adopted)</em></li>\n</ol><p>Contributing these features to docker-compose was also an option, but we decided to come up with a new solution due the following reasons:</p>\n\n<ol><li>docker-compose is written in Python, and we don\'t have tools in Python. Also it would be nice if the tool was written in Go to benefit from the existing ecosystem and to ease installations on development machines and any instance or CI server</li>\n<li>We wanted to have full control over the tool and be able to add any feature to it at any time</li>\n<li>Also, there is <a href=\"https://github.com/docker/libcompose\">libcompose</a> and it’s a great initiative. However, it’s in an experimental stage.</li>\n<li>The time factor was also critical; we were able to come up with a working solution in four days</li>\n</ol><p>The most notable feature of <code>rocker-compose</code> is <strong>idempotency</strong>. We have to be able to compare any bit of a container runtime, which includes configuration and state.\nFor every run, rocker-compose is building two data sets: <strong>desired</strong> and <strong>actual</strong>. \"Desired\" is the list of containers given in the manifest. \"Actual\" is the list of currently running containers we get through the Docker API. By <a href=\"https://github.com/grammarly/rocker-compose/blob/master/src/compose/diff.go\">comparing the two sets</a> and knowing the dependencies among the containers we are about to run, we build an <a href=\"https://github.com/grammarly/rocker-compose/blob/master/src/compose/action.go\">ordered action list</a>. You can also consider the action list as a <em>delta</em> between the two sets.</p>\n\n<p>If a desired container does not exist, <code>rocker-compose</code> simply creates it (and optionally starts). For an existing container with the same name (namespace does help here), it does a more sophisticated comparison:</p>\n\n<ol><li><strong>Compare configuration.</strong> When starting a container, <code>rocker-compose</code> puts the serialized source YAML configuration under a label called <code>rocker-compose-config</code>. By <a href=\"https://github.com/grammarly/rocker-compose/blob/master/src/compose/config/compare.go\">comparing</a> the source config from the manifest and the one stored in a running container label, <code>rocker-compose</code> can detect changes.</li>\n<li><strong>Compare image id</strong>. <code>rocker-compose</code> also checks if the image id has changed. It may happen when you are using <code>:latest</code> tags, and an image can be updated without changing the tag.</li>\n<li><a href=\"https://github.com/grammarly/rocker-compose#state\">Compare state</a>.</li>\n</ol><p>It allows <code>rocker-compose</code> to perform <strong>as few changes as possible</strong> to make the actual state match the desired one. If something was changed, <code>rocker-compose</code> recreates the container from scratch. Note that any container change can trigger recreations of other containers depending on that one.</p>\n\n<p><strong>In cases of loose coupling</strong>, you can benefit from a micro-services approach and do clever updates, affecting only a single container, without touching others. See <a href=\"https://github.com/grammarly/rocker-compose#patterns\">patterns</a> to learn more about the best practices.</p>\n\n\n\n<p>rocker-compose isn\'t yet battle-tested for production. However, it\'s intended to be used for deployments due to its idempotent properties. Also, anything you do with rocker-compose on your local machine you can do on a remote machine by simply adding remote host parameters or having <a href=\"https://docs.docker.com/reference/commandline/cli/#environment-variables\">appropriate ENV</a>. rocker-compose implements docker\'s native client interface for connection parameterization.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ rocker-compose run                              <span class=\"pl-c\"># gathers info about docker server from ENV</span>\n$ rocker-compose <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>docker-machine config qa1<span class=\"pl-pds\">)</span></span> run <span class=\"pl-c\"># connects to qa1 server and runs there  </span></pre></div>\n\n<p><em>NOTE: You should have qa1 machine registered in your docker-machine</em></p>\n\n<p>See <a href=\"https://github.com/grammarly/rocker-compose#command-line-reference\">command line reference</a> for more details.</p>\n\n\n\n<h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#for-osx-users\"><span class=\"octicon octicon-link\"></span></a>For OSX users</h3>\n\n<pre><code>brew tap grammarly/tap\nbrew install grammarly/tap/rocker-compose\n</code></pre>\n\n<p>Ensure that it is built with <code>go 1.5.x</code> . If not, make <code>brew update</code> before installing <code>rocker-compose</code>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#manual-installation\"><span class=\"octicon octicon-link\"></span></a>Manual installation</h3>\n\n<p>Go to the <a href=\"https://github.com/grammarly/rocker-compose/releases\">releases</a> section and download the latest binary for your platform. Then unpack the tar archive and copy the binary somewhere to your path, such as <code>/usr/local/bin</code>, and give it executable permissions.</p>\n\n<p>Something like this:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>curl -SL https://github.com/grammarly/rocker-compose/releases/download/0.1.1/rocker-compose-0.1.1_darwin_amd64.tar.gz <span class=\"pl-k\">|</span> tar -xzC /usr/local/bin <span class=\"pl-k\">&amp;&amp;</span> chmod +x /usr/local/bin/rocker-compose</pre></div>\n\n\n\n<pre><code>diff docker-compose rocker-compose\n</code></pre>\n\n<p><code>rocker-compose</code> does its best to be compatible with docker-compose manifests, however there are a few differences you should consider in order to migrate:</p>\n\n<ol><li><code>rocker-compose</code> does not support image names without tags specified. In case you have images without tags, just add <code>:latest</code> explicitly.</li>\n<li><code>rocker-compose</code> does not support <code>build</code> and <code>dockerfile</code> properties for the container spec. If you rely on it heavily, please file an issue and describe your use case.</li>\n<li>Instead of <code>external_links</code> property, you can specify a different or empty namespace, e.g. <code>links: other.app</code> or <code>links: .redis</code>. However, it is suggested to use <a href=\"https://github.com/grammarly/rocker-compose#loose-coupling-network\">loose coupling strategies</a> instead.</li>\n<li>No <a href=\"https://docs.docker.com/swarm/\">Swarm</a> integration, since we don\'t use it. It seems to be not a big deal to implement, so PR or issue, please.</li>\n<li><code>rocker-compose</code> has <code>restart:always</code> by default. Despite Docker\'s default value being \"no\", we found that more often we want to have \"always\" and people constantly forget to put it.</li>\n<li>By default, <code>rocker-compose</code> sets <code>max-file:5 max-size:100m</code> options for <code>json-file</code> log driver. We found that it is much more expected behavior to have log rotation by default.</li>\n<li>There is no <code>rocker-compose scale</code>. Instead, we took a more <a href=\"https://github.com/grammarly/rocker-compose#dynamic-scaling\">declarative approach</a> to replicate containers.</li>\n<li><code>extends</code> works differently: you cannot extend from a different file. <a href=\"https://github.com/grammarly/rocker-compose#extends\">More info</a></li>\n<li>Other properties that are not supported but may be added easily - file an issue or open a pull request if you miss them: <code>env_file</code>, <code>cap_add</code>, <code>devices</code>, <code>security_opt</code>, <code>stdin_open</code>, <code>tty</code>, <code>read_only</code>, <code>volume_driver</code>, <code>mac_address</code>.</li>\n</ol><p>Here is an <a href=\"https://github.com/grammarly/rocker-compose/blob/master/example/wordpress.yml\">example of running a wordpress application</a> with rocker-compose:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">wordpress </span></span><span class=\"pl-c\"># specify a manifest-level namespace under which all containers will be named</span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">main:</span> </span><span class=\"pl-c\"># container name will be \"wordpress.main\"</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">wordpress:4.1.2 </span></span><span class=\"pl-c\"># run from \"wordpress\" image of version 4.1.2</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">links:</span></span>\n      <span class=\"pl-c\"># link container named \"db\" as alias \"mysql\", inside the \"main\" container</span>\n      <span class=\"pl-c\"># you can reach \"db\" container by using \"mysql\" host or using MYSQL_PORT_3306_TCP_ADDR env var</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">db:mysql</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">ports:</span></span>\n      <span class=\"pl-s\">- <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>8080:80<span class=\"pl-pds\">\"</span></span><span class=\"pl-s\"> </span></span><span class=\"pl-c\"># throw 8080 port to a host network, map it to 80 internal port</span>\n\n  <span class=\"pl-s\"><span class=\"pl-ent\">db:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">mysql:5.6</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">env:</span></span>\n      <span class=\"pl-s\"><span class=\"pl-ent\">MYSQL_ROOT_PASSWORD:</span> <span class=\"pl-s\">example </span></span><span class=\"pl-c\"># provide MYSQL_ROOT_PASSWORD env var</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes_from:</span></span>\n      <span class=\"pl-c\"># specify to mount all volumes from \"db_data\" container, this way we can</span>\n      <span class=\"pl-c\"># update \"db\" container without loosing data</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">db_data </span></span>\n\n  <span class=\"pl-s\"><span class=\"pl-ent\">db_data:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">grammarly/scratch:latest </span></span><span class=\"pl-c\"># use empty image, just for data</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">state:</span> <span class=\"pl-s\">created </span></span><span class=\"pl-c\"># this tells compose to not try to run this container, data containers need to be only created</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes:</span></span>\n      <span class=\"pl-c\"># define the empty directory that will be used by the \"db\" container</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">/var/lib/mysql</span></span></pre></div>\n\n<p>You can run this manifest with the following command:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>rocker-compose run -f example/wordpress.yml</pre></div>\n\n<p>Or simply this, in case your manifest is in the same directory and is named <code>compose.yml</code>:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>rocker-compose run</pre></div>\n\n<p>The output will be something like the following:</p>\n\n<pre><code>INFO[0000] Reading manifest: .../rocker-compose/example/wordpress.yml\nINFO[0000] Gathering info about 17 containers\nINFO[0000] Create container wordpress.db_data\nINFO[0000] Create container wordpress.db\nINFO[0000] Starting container wordpress.db id:810cb0e65e2d from image mysql:5.6\nINFO[0001] Waiting for 1s to ensure wordpress.db not exited abnormally...\nINFO[0002] Create container wordpress.main\nINFO[0002] Starting container wordpress.main id:20aa94bd256d from image wordpress:4.1.2\nINFO[0002] Waiting for 1s to ensure wordpress.main not exited abnormally...\nINFO[0003] Running containers: wordpress.main, wordpress.db, wordpress.db_data\n</code></pre>\n\n<p><em>NOTE: I have all images downloaded already. Rocker-compose will download missing images during the first run. If you want to pull all images from the manifest separately, there is a <code>rocker-compose pull</code> command for that</em></p>\n\n<p><em>NOTE 2: The line \"Gathering info about 17 containers\" just means that there are 17 containers on my machine that were created by rocker-compose. You will have 0</em></p>\n\n<p>Rocker-compose creates containers in a deliberate order respecting inter-container dependencies. Let\'s see what we\'ve created:</p>\n\n<pre><code>$ docker ps -a | grep wordpress\n13f34666431e        wordpress:4.1.2           \"/entrypoint.sh apac   2 minutes ago      Up 2 minutes                  0.0.0.0:8080-&gt;80/tcp     wordpress.main\n810cb0e65e2d        mysql:5.6                 \"/entrypoint.sh mysq   2 minutes ago      Up 2 minutes                  3306/tcp                 wordpress.db\n26511eaeccd2        grammarly/scratch:latest         \"true\"                 2 minutes ago                                               wordpress.db_data\n$\n</code></pre>\n\n<p><code>rocker-compose</code> prefixed container names with the namespace \"wordpress\". Namespaces help <code>rocker-compose</code> to isolate container names and also detect obsolete containers that should be removed.</p>\n\n<p>You can now go to your browser and check <code>:8080</code> under your <code>docker-machine ip</code> address. Wordpress application should be there.</p>\n\n<p>Assuming you have a virtual machine named <code>dev</code>, you can do:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ open http://<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>docker-machine ip dev<span class=\"pl-pds\">)</span></span>:8080/</pre></div>\n\n<p>Let\'s inspect some stuff and connect to the Wordpress application container to see how it interacts with mysql:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># as you can see, wordpress is running a bunch of apache2 processes</span>\n$ docker <span class=\"pl-c1\">exec</span> -ti wordpress.main ps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.9 177140 20184 <span class=\"pl-k\">?</span>        Ss   14:59   0:00 apache2 -DFOREGROUND\nwww-data   118  0.0  0.3 177172  7416 <span class=\"pl-k\">?</span>        S    14:59   0:00 apache2 -DFOREGROUND\nwww-data   119  0.0  0.3 177172  7416 <span class=\"pl-k\">?</span>        S    14:59   0:00 apache2 -DFOREGROUND\nwww-data   120  0.0  0.3 177172  7416 <span class=\"pl-k\">?</span>        S    14:59   0:00 apache2 -DFOREGROUND\nwww-data   121  0.0  0.3 177172  7416 <span class=\"pl-k\">?</span>        S    14:59   0:00 apache2 -DFOREGROUND\nwww-data   122  0.0  0.3 177172  7416 <span class=\"pl-k\">?</span>        S    14:59   0:00 apache2 -DFOREGROUND\nroot       131  0.0  0.1  17492  2100 <span class=\"pl-k\">?</span>        Rs+  15:12   0:00 ps aux\n\n<span class=\"pl-c\"># let\'s look at ENV variables that are in our wordpress container</span>\n<span class=\"pl-c\"># there is a MYSQL_PORT_3306_TCP_ADDR which can be used to connect to a db container</span>\n$ docker <span class=\"pl-c1\">exec</span> -ti wordpress.main env\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=20aa94bd256d\nMYSQL_PORT=tcp://172.17.3.21:3306\nMYSQL_PORT_3306_TCP=tcp://172.17.3.21:3306\nMYSQL_PORT_3306_TCP_ADDR=172.17.3.21\nMYSQL_PORT_3306_TCP_PORT=3306\nMYSQL_PORT_3306_TCP_PROTO=tcp\nMYSQL_NAME=/wordpress.main/mysql\nMYSQL_ENV_MYSQL_ROOT_PASSWORD=example\nMYSQL_ENV_MYSQL_MAJOR=5.6\nMYSQL_ENV_MYSQL_VERSION=5.6.25\nPHP_INI_DIR=/usr/local/etc/php\nPHP_EXTRA_BUILD_DEPS=apache2-dev\nPHP_EXTRA_CONFIGURE_ARGS=--with-apxs2\nPHP_VERSION=5.6.8\nWORDPRESS_VERSION=4.1.2\nWORDPRESS_UPSTREAM_VERSION=4.1.2\nWORDPRESS_SHA1=9e9745bb8a1166622de866076eac73a49cb3eba0\nHOME=/root\n\n<span class=\"pl-c\"># /etc/hosts shows that there is a host entry for db container as well</span>\n$ docker <span class=\"pl-c1\">exec</span> -ti wordpress.main cat /etc/hosts\n172.17.3.23 20aa94bd256d\n127.0.0.1 localhost\n::1 localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.3.21 mysql 810cb0e65e2d wordpress.db\n\n<span class=\"pl-c\"># you can also open a shell inside of the wordpress container and inspect some stuff</span>\n$ docker <span class=\"pl-c1\">exec</span> -ti wordpress.main bash\nroot@20aa94bd256d:/var/www/html# df -h\nFilesystem      Size  Used Avail Use% Mounted on\nnone             19G   17G  598M  97% /\ntmpfs          1002M     0 1002M   0% /dev\nshm              64M     0   64M   0% /dev/shm\n/dev/sda1        19G   17G  598M  97% /etc/hosts\nroot@20aa94bd256d:/var/www/html# <span class=\"pl-c1\">exit</span>\n<span class=\"pl-c1\">exit</span>\n$</pre></div>\n\n<p>As you can see, I am almost out of space on my boot2docker virtual machine.</p>\n\n<p>In case you run <code>rocker-compose</code> again without changing anything, it will ensure that nothing was changed and quit:</p>\n\n<pre><code>$ rocker-compose run\nINFO[0000] Reading manifest: .../rocker-compose/example/wordpress.yml\nINFO[0000] Gathering info about 20 containers\nINFO[0000] Running containers: wordpress.main, wordpress.db, wordpress.db_data\n$\n</code></pre>\n\n<p>Let\'s update our Wordpress application and set the newer version:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-c\"># ...</span>\n<span class=\"pl-s\"><span class=\"pl-ent\">main:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">wordpress:4.2.2</span></span>\n<span class=\"pl-c\"># ...</span></pre></div>\n\n<p>And to apply the effects of our changes, you have to repeat the run:</p>\n\n<pre><code>$ rocker-compose run\nINFO[0000] Reading manifest:.../rocker-compose/example/wordpress.yml\nINFO[0000] Gathering info about 20 containers\nINFO[0000] Pulling image: wordpress:4.2.2 for wordpress.main\n...\nINFO[0045] Removing container wordpress.main id:20aa94bd256d\nINFO[0045] Create container wordpress.main\nINFO[0045] Starting container wordpress.main id:13f34666431e from image wordpress:4.2.2\nINFO[0046] Waiting for 1s to ensure wordpress.main not exited abnormally...\nINFO[0047] Running containers: wordpress.main, wordpress.db, wordpress.db_data\n$\n</code></pre>\n\n<p><code>rocker-compose</code> has automatically pulled the newer version 4.2.2 of Wordpress and restarted the container. Note that our <code>db</code> and <code>db_data</code> containers were untouched since they haven\'t been changed.</p>\n\n<pre><code>$ docker ps -a | grep wordpress\n13f34666431e        wordpress:4.2.2          \"/entrypoint.sh apac   2 minutes ago      Up 2 minutes                  0.0.0.0:8080-&gt;80/tcp     wordpress.main\n810cb0e65e2d        mysql:5.6                \"/entrypoint.sh mysq   15 minutes ago     Up 15 minutes                  3306/tcp                 wordpress.db\n26511eaeccd2        grammarly/scratch:latest        \"true\"                 15 minutes ago                                               wordpress.db_data\n$\n</code></pre>\n\n<p>You can see that <code>wordpress.main</code> container was restarted later than others. Also, it is running a newer version now.</p>\n\n<p>Any attribute can be changed and after running <code>compose</code> again, it will change as little as it can to make the actual state match the desired one.</p>\n\n<p>After experimenting you can remove containers from the manifest:</p>\n\n<pre><code>$ rocker-compose rm\nINFO[0000] Reading manifest: .../rocker-compose/example/wordpress.yml\nINFO[0000] Gathering info about 20 containers\nINFO[0000] Removing container wordpress.main id:13f34666431e\nINFO[0001] Removing container wordpress.db id:810cb0e65e2d\nINFO[0002] Removing container wordpress.db_data id:26511eaeccd2\nINFO[0002] Nothing is running\n$\n</code></pre>\n\n\n\n<h5><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#rocker-compose-1\"><span class=\"octicon octicon-link\"></span></a><code>rocker-compose</code></h5>\n\n<p>These options are global and can be used with any subcommand:</p>\n\n<table><thead><tr><th>option</th>\n<th>alias</th>\n<th>default value</th>\n<th>description</th>\n<th>example</th>\n</tr></thead><tbody><tr><td><code>-verbose</code></td>\n<td><code>-vv</code></td>\n<td><code>false</code></td>\n<td>makes debug output</td>\n<td><code>rocker-compose -vv run</code></td>\n</tr><tr><td><code>-log</code></td>\n<td><code>-l</code></td>\n<td><code>nil</code></td>\n<td>redirects output to a log file</td>\n<td><code>rocker-compose -l out.log run</code></td>\n</tr><tr><td><code>-json</code></td>\n<td><em>none</em></td>\n<td>makes json output</td>\n<td><code>rocker-compose -json run</code></td>\n<td></td>\n</tr><tr><td><code>-host</code></td>\n<td><code>-H</code></td>\n<td><code>unix:///var/run/docker.sock</code></td>\n<td>Daemon socket(s) to connect to [$DOCKER_HOST]</td>\n<td><code>rocker-compose -H tcp://10.10.41.2:2376 run</code></td>\n</tr><tr><td><code>-tlsverify</code></td>\n<td><code>-tls</code></td>\n<td><code>false</code></td>\n<td>Use TLS and verify the remote</td>\n<td></td>\n</tr><tr><td><code>-tlscacert</code></td>\n<td><em>none</em></td>\n<td><code>~/.docker/ca.pem</code></td>\n<td>Trust certs signed only by this CA</td>\n<td></td>\n</tr><tr><td><code>-tlscert</code></td>\n<td><em>none</em></td>\n<td><code>~/.docker/cert.pem</code></td>\n<td>Path to TLS certificate file</td>\n<td></td>\n</tr><tr><td><code>-tlskey</code></td>\n<td><em>none</em></td>\n<td><code>~/.docker/key.pem</code></td>\n<td>Path to TLS key file</td>\n<td></td>\n</tr><tr><td><code>-auth</code></td>\n<td><code>-a</code></td>\n<td><code>nil</code></td>\n<td>Docker auth, username and password in user:password format</td>\n<td><code>rocker-compose -a user:pass run</code></td>\n</tr><tr><td><code>-help</code></td>\n<td><code>-h</code></td>\n<td><code>nil</code></td>\n<td>shows help</td>\n<td><code>rocker-compose --help</code></td>\n</tr><tr><td><code>-version</code></td>\n<td><code>-v</code></td>\n<td><code>nil</code></td>\n<td>prints rocker-compose version</td>\n<td><code>rocker-compose -v</code></td>\n</tr></tbody></table><h5><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#common-options-for-run-pull-rm-and-clean-commands\"><span class=\"octicon octicon-link\"></span></a>Common options for <code>run</code>, <code>pull</code>, <code>rm</code> and <code>clean</code> commands</h5>\n\n<table><thead><tr><th>option</th>\n<th>alias</th>\n<th>default value</th>\n<th>description</th>\n<th>example</th>\n</tr></thead><tbody><tr><td><code>-file</code></td>\n<td><code>-d</code></td>\n<td><code>compose.yml</code></td>\n<td>Path to configuration file, if <code>-</code> is given as a value, then STDIN will be used</td>\n<td><code>rocker-compose run -f c.yml</code>, <code>cat c.yml | rocker-compose run -f -</code></td>\n</tr><tr><td><code>-var</code></td>\n<td><em>none</em></td>\n<td><code>[]</code></td>\n<td>Set variables to pass to build tasks</td>\n<td><code>rocker-compose run -var v=1 -var dev=true</code></td>\n</tr><tr><td><code>-dry</code></td>\n<td><code>-d</code></td>\n<td><code>false</code></td>\n<td>Don\'t execute any operations on target docker</td>\n<td><code>rocker-compose clean -d</code></td>\n</tr></tbody></table><h5><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#rocker-compose-run--executes-manifest-composeyml\"><span class=\"octicon octicon-link\"></span></a><code>rocker-compose run</code> — executes manifest (compose.yml)</h5>\n\n<table><thead><tr><th>option</th>\n<th>alias</th>\n<th>default value</th>\n<th>description</th>\n<th>example</th>\n</tr></thead><tbody><tr><td><code>-force</code></td>\n<td><em>none</em></td>\n<td><code>false</code></td>\n<td>Force recreation of all containers</td>\n<td><code>rocker-compose run -force</code></td>\n</tr><tr><td><code>-attach</code></td>\n<td><em>none</em></td>\n<td><code>false</code></td>\n<td>Stream stdout and stderr of all containers from the spec</td>\n<td><code>rocker-compose run -attach</code></td>\n</tr><tr><td><code>-pull</code></td>\n<td><em>none</em></td>\n<td><code>false</code></td>\n<td>Pull images before running</td>\n<td><code>rocker-compose run -pull</code></td>\n</tr><tr><td><code>-wait</code></td>\n<td><em>none</em></td>\n<td><code>1s</code></td>\n<td>Wait and check exit codes of launched containers</td>\n<td><code>rocker-compose run -wait 5s</code></td>\n</tr><tr><td><code>-ansible</code></td>\n<td><em>none</em></td>\n<td><code>false</code></td>\n<td>output json in ansible format for easy parsing</td>\n<td><code>rocker-compose clean -ansible</code></td>\n</tr></tbody></table><p>+ Common options.</p>\n\n<h5><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#rocker-compose-pull--pull-images-specified-in-the-manifest\"><span class=\"octicon octicon-link\"></span></a><code>rocker-compose pull</code> — pull images specified in the manifest</h5>\n\n<table><thead><tr><th>option</th>\n<th>alias</th>\n<th>default value</th>\n<th>description</th>\n<th>example</th>\n</tr></thead><tbody><tr><td><code>-ansible</code></td>\n<td><em>none</em></td>\n<td><code>false</code></td>\n<td>output json in ansible format for easy parsing</td>\n<td><code>rocker-compose clean -ansible</code></td>\n</tr></tbody></table><p>+ Common options.</p>\n\n<h5><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#rocker-compose-rm--stop-and-remove-any-containers-specified-in-the-manifest\"><span class=\"octicon octicon-link\"></span></a><code>rocker-compose rm</code> — stop and remove any containers specified in the manifest</h5>\n\n<p>+ Common options.</p>\n\n<h5><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#rocker-compose-clean--cleanup-old-tags-for-images-specified-in-the-manifest\"><span class=\"octicon octicon-link\"></span></a><code>rocker-compose clean</code> — cleanup old tags for images specified in the manifest</h5>\n\n<table><thead><tr><th>option</th>\n<th>alias</th>\n<th>default value</th>\n<th>description</th>\n<th>example</th>\n</tr></thead><tbody><tr><td><code>-keep</code></td>\n<td><code>-k</code></td>\n<td><code>5</code></td>\n<td>number of last images to keep</td>\n<td><code>rocker-compose clean -k 10</code></td>\n</tr><tr><td><code>-ansible</code></td>\n<td><em>none</em></td>\n<td><code>false</code></td>\n<td>output json in ansible format for easy parsing</td>\n<td><code>rocker-compose clean -ansible</code></td>\n</tr></tbody></table><p>+ Common options.</p>\n\n<h5><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#rocker-compose-info--show-docker-info-check-connectivity-versions-etc\"><span class=\"octicon octicon-link\"></span></a><code>rocker-compose info</code> — show docker info (check connectivity, versions, etc.)</h5>\n\n<table><thead><tr><th>option</th>\n<th>alias</th>\n<th>default value</th>\n<th>description</th>\n<th>example</th>\n</tr></thead><tbody><tr><td><code>-all</code></td>\n<td><code>-a</code></td>\n<td><code>false</code></td>\n<td>show advanced info</td>\n<td><code>rocker-compose info -a</code></td>\n</tr></tbody></table><p>The spec is a <a href=\"http://yaml.org/\">YAML</a> file format. Note that the indentation is 2 spaces. Empty lines should be unindented.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#example\"><span class=\"octicon octicon-link\"></span></a>Example</h3>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">wordpress </span></span><span class=\"pl-c\"># specify a manifest-level namespace under which all containers will be named</span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">main:</span> </span><span class=\"pl-c\"># container name will be \"wordpress.main\"</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">wordpress:4.1.2 </span></span><span class=\"pl-c\"># run from \"wordpress\" image of version 4.1.2</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">links:</span></span>\n      <span class=\"pl-c\"># link container named \"db\" as alias \"mysql\", inside the \"main\" container</span>\n      <span class=\"pl-c\"># you can reach \"db\" container by using \"mysql\" host or using MYSQL_PORT_3306_TCP_ADDR env var</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">db:mysql</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">ports:</span></span>\n      <span class=\"pl-s\">- <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>8080:80<span class=\"pl-pds\">\"</span></span><span class=\"pl-s\"> </span></span><span class=\"pl-c\"># throw 8080 port to a host network, map it to 80 internal port</span>\n\n  <span class=\"pl-s\"><span class=\"pl-ent\">db:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">mysql:5.6</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">env:</span></span>\n      <span class=\"pl-s\"><span class=\"pl-ent\">MYSQL_ROOT_PASSWORD:</span> <span class=\"pl-s\">example </span></span><span class=\"pl-c\"># provide MYSQL_ROOT_PASSWORD env var</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes_from:</span></span>\n      <span class=\"pl-c\"># specify to mount all volumes from \"db_data\" container, this way we can</span>\n      <span class=\"pl-c\"># update \"db\" container without loosing data</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">db_data </span></span>\n\n  <span class=\"pl-s\"><span class=\"pl-ent\">db_data:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">grammarly/scratch:latest </span></span><span class=\"pl-c\"># use empty image, just for data</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">state:</span> <span class=\"pl-s\">created </span></span><span class=\"pl-c\"># this tells compose to not try to run this container, data containers need to be only created</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes:</span></span>\n      <span class=\"pl-c\"># define the empty directory that will be used by the \"db\" container</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">/var/lib/mysql</span></span></pre></div>\n\n<p>rocker-compose is also compatible with docker-compose format, where containers are specified in the root level:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">main:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">wordpress:4.1.2</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">links:</span> <span class=\"pl-s\">db:mysql</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">ports:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>8080:80<span class=\"pl-pds\">\"</span></span></span>\n\n<span class=\"pl-s\"><span class=\"pl-ent\">db:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">mysql:5.6</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">env:</span> <span class=\"pl-s\">MYSQL_ROOT_PASSWORD=example</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">volumes_from:</span> <span class=\"pl-s\">db_data </span></span>\n\n<span class=\"pl-s\"><span class=\"pl-ent\">db_data:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">grammarly/scratch:latest</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">state:</span> <span class=\"pl-s\">created</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">volumes:</span> <span class=\"pl-s\">/var/lib/mysql</span></span></pre></div>\n\n<p>In this case, namespace will be the name of parent directory of your <code>compose.yml</code> file.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#types\"><span class=\"octicon octicon-link\"></span></a>Types</h3>\n\n<p>String:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">wordpress</span></span>\n\n<span class=\"pl-s\"><span class=\"pl-ent\">cmd:</span> <span class=\"pl-s\">while true; do sleep 1; done</span></span>\n\n<span class=\"pl-s\"><span class=\"pl-ent\">cmd:</span> |-</span>\n<span class=\"pl-s\">  set -e</span>\n<span class=\"pl-s\">  touch /var/log/out.log</span>\n<span class=\"pl-s\">  while true; do echo \"hello\" &gt;&gt; /var/log/out.log; sleep 1; done</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"></span><span class=\"pl-s\"><span class=\"pl-ent\">str1:</span> <span class=\"pl-s\">and i am also a string</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">str2:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>and i<span class=\"pl-pds\">\"</span></span></span></pre></div>\n\n<p>Array:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">cmd:</span> <span class=\"pl-s\">[\"/bin/sh\", \"-c\", \"echo hello\"]</span></span>\n\n<span class=\"pl-s\"><span class=\"pl-ent\">volumes_from:</span></span>\n  <span class=\"pl-s\">- <span class=\"pl-s\">data</span></span>\n  <span class=\"pl-s\">- <span class=\"pl-s\">config</span></span>\n\n<span class=\"pl-s\"><span class=\"pl-ent\">ports:</span></span>\n  <span class=\"pl-s\">- <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>8080:80<span class=\"pl-pds\">\"</span></span></span></pre></div>\n\n<p>Hash:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">env:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">DB_PASSWORD:</span> <span class=\"pl-s\">lopata</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">DB_HOST:</span> <span class=\"pl-s\">localhost</span></span></pre></div>\n\n<p>Bool:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">evil:</span> <span class=\"pl-s\">false</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">good:</span> <span class=\"pl-s\">true</span></span></pre></div>\n\n<p>Number:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-c1\"><span class=\"pl-ent\">kill_timeout:</span> 123</span></pre></div>\n\n<p>Ulimit:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">ulimits:</span></span>\n  <span class=\"pl-s\">- <span class=\"pl-ent\">name:</span> <span class=\"pl-s\">nofile</span></span>\n    <span class=\"pl-c1\"><span class=\"pl-ent\">soft:</span> 1024</span>\n    <span class=\"pl-c1\"><span class=\"pl-ent\">hard:</span> 2048</span></pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#root-level-properties\"><span class=\"octicon octicon-link\"></span></a>Root level properties</h3>\n\n<table><thead><tr><th>Property</th>\n<th>Default value</th>\n<th>Type</th>\n<th>Description</th>\n</tr></thead><tbody><tr><td><strong>namespace</strong></td>\n<td><em>REQUIRED</em></td>\n<td>String</td>\n<td>root namespace to prefix all container names in the current manifest</td>\n</tr><tr><td><strong>containers</strong></td>\n<td><em>REQUIRED</em></td>\n<td>Hash</td>\n<td>list of containers to run within the current namespace where every key:value pair is a container name as a key and container spec as a value</td>\n</tr></tbody></table><h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#container-properties\"><span class=\"octicon octicon-link\"></span></a>Container properties</h3>\n\n<p>Example:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">wordpress</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">main:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">wordpress</span></span></pre></div>\n\n<p>Where <code>main</code> is a container name and <code>image: wordpress</code> is its spec. If container name begins with an underscore (<code>_</code>) then <code>rocker-compose</code> will not consider it — useful for creating base specs for <a href=\"https://github.com/grammarly/rocker-compose#extends\">extends</a>. Note that by convention, properties should be maintained in the given order when writing compose manifests.</p>\n\n<table><thead><tr><th>Property</th>\n<th>Default</th>\n<th>Type</th>\n<th>Run param</th>\n<th>Description</th>\n</tr></thead><tbody><tr><td><strong>extends</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td><em>none</em></td>\n<td><code>container_name</code> - extend spec from another container of the current manifest</td>\n</tr><tr><td><strong>image</strong></td>\n<td><em>REQUIRED</em></td>\n<td>String</td>\n<td><code>docker run &lt;image&gt;</code></td>\n<td>image name for the container, the syntax is <code>[registry/][repo/]name[:tag]</code></td>\n</tr><tr><td><strong>state</strong></td>\n<td><code>running</code></td>\n<td>String</td>\n<td><em>none</em></td>\n<td><code>running</code>, <code>ran</code>, <code>created</code> - desired state of a container (<a href=\"https://github.com/grammarly/rocker-compose#state\">read more about state</a>)</td>\n</tr><tr><td><strong>entrypoint</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#entrypoint-default-command-to-execute-at-runtime\"><code>--entrypoint</code></a></td>\n<td>overwrite the default entrypoint set by the image</td>\n</tr><tr><td><strong>cmd</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><code>docker run &lt;image&gt; &lt;cmd&gt;</code></td>\n<td>the list of command arguments to pass</td>\n</tr><tr><td><strong>workdir</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#workdir\"><code>-w</code></a></td>\n<td>set working directory inside the container</td>\n</tr><tr><td><strong>restart</strong></td>\n<td><code>always</code></td>\n<td>String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#restart-policies-restart\"><code>--restart</code></a></td>\n<td><code>never</code>, <code>always</code>, <code>on-failure,N</code> - container restart policy</td>\n</tr><tr><td><strong>labels</strong></td>\n<td><em>nil</em></td>\n<td>Hash|String</td>\n<td><code>--label FOO=BAR</code></td>\n<td>key/value labels to add to the container</td>\n</tr><tr><td><strong>env</strong></td>\n<td><em>nil</em></td>\n<td>Hash|String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#env-environment-variables\"><code>-e</code></a></td>\n<td>key/value ENV variables</td>\n</tr><tr><td><strong>wait_for</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><em>none</em></td>\n<td>array of container names - wait for other containers to start before starting the container</td>\n</tr><tr><td><strong>links</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><a href=\"https://docs.docker.com/userguide/dockerlinks/\"><code>--link</code></a></td>\n<td>other containers to link with; can be <code>container</code> or <code>container:alias</code></td>\n</tr><tr><td><strong>volumes_from</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><a href=\"https://docs.docker.com/userguide/dockervolumes/\"><code>--volumes-from</code></a></td>\n<td>mount volumes from other containers</td>\n</tr><tr><td><strong>volumes</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><a href=\"https://docs.docker.com/userguide/dockervolumes/\"><code>-v</code></a></td>\n<td>specify volumes of a container, can be <code>path</code> or <code>src:dest</code> <a href=\"https://github.com/grammarly/rocker-compose#volumes\">read more</a></td>\n</tr><tr><td><strong>expose</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><a href=\"https://docs.docker.com/articles/networking/\"><code>--expose</code></a></td>\n<td>expose a port or a range of ports from the container without publishing it/them to your host; e.g. <code>8080</code> or <code>8125/udp</code></td>\n</tr><tr><td><strong>ports</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><a href=\"https://docs.docker.com/articles/networking/\"><code>-p</code></a></td>\n<td>publish a container᾿s port or a range of ports to the host, e.g. <code>8080:80</code> or <code>0.0.0.0:8080:80</code> or <code>8125:8125/udp</code></td>\n</tr><tr><td><strong>publish_all_ports</strong></td>\n<td><code>false</code></td>\n<td>Bool</td>\n<td><a href=\"https://docs.docker.com/articles/networking/\"><code>-P</code></a></td>\n<td>every port in <code>expose</code> will be published to the host</td>\n</tr><tr><td><strong>log_driver</strong></td>\n<td><code>json-file</code></td>\n<td>string</td>\n<td><a href=\"https://docs.docker.com/reference/logging/overview/\"><code>--log-driver</code></a></td>\n<td>logging driver</td>\n</tr><tr><td><strong>log_opt</strong></td>\n<td><code>max-file:5 max-size:100m</code></td>\n<td>Hash</td>\n<td><a href=\"https://docs.docker.com/reference/logging/overview/\"><code>--log-opt</code></a></td>\n<td>logging driver configuration</td>\n</tr><tr><td><strong>dns</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#network-settings\"><code>--dns</code></a></td>\n<td>add DNS servers to the container</td>\n</tr><tr><td><strong>add_host</strong></td>\n<td><em>nil</em></td>\n<td>Array|String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#network-settings\"><code>--add-host</code></a></td>\n<td>add records to <code>/etc/hosts</code> file, e.g. <code>mysql:172.17.3.21</code></td>\n</tr><tr><td><strong>net</strong></td>\n<td><code>bridge</code></td>\n<td>String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#network-settings\"><code>--net</code></a></td>\n<td>network mode, options are: <code>bridge</code>, <code>host</code>, <code>container:&lt;name|id&gt;</code>; <code>none</code> is used to disable networking</td>\n</tr><tr><td><strong>hostname</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#network-settings\"><code>--hostname</code></a></td>\n<td>set a custom hostname for the container</td>\n</tr><tr><td><strong>domainname</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td><a href=\"https://docs.docker.com/articles/networking/#configuring-dns\"><code>--dns-search</code></a></td>\n<td>set the search domain to <code>/etc/resolv.conf</code></td>\n</tr><tr><td><strong>user</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#user\"><code>-u</code></a></td>\n<td>run container process with specified user or UID</td>\n</tr><tr><td><strong>uts</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#uts-settings-uts\"><code>--uts</code></a></td>\n<td>if set to <code>host</code> container will inherit host machine\'s hostname and domain; warning, <strong>insecure</strong>, use only with trusted containers</td>\n</tr><tr><td><strong>pid</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#pid-settings-pid\"><code>--pid</code></a></td>\n<td>set the PID (Process) Namespace mode for the container, when set to <code>host</code> will be in host machine\'s namespace</td>\n</tr><tr><td><strong>privileged</strong></td>\n<td><code>false</code></td>\n<td>Bool</td>\n<td><a href=\"https://docs.docker.com/reference/run/#runtime-privilege-linux-capabilities-and-lxc-configuration\"><code>--privileged</code></a></td>\n<td>give extended privileges to this container</td>\n</tr><tr><td><strong>memory</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td>Number</td>\n<td><a href=\"https://docs.docker.com/reference/run/#runtime-constraints-on-resources\"><code>--memory</code></a></td>\n</tr><tr><td><strong>memory_swap</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td>Number</td>\n<td><a href=\"https://docs.docker.com/reference/run/#runtime-constraints-on-resources\"><code>--memory-swap</code></a></td>\n</tr><tr><td><strong>cpu_shares</strong></td>\n<td><em>nil</em></td>\n<td>Number</td>\n<td><a href=\"https://docs.docker.com/reference/run/#runtime-constraints-on-resources\"><code>--cpu-shares</code></a></td>\n<td>CPU shares (relative weight)</td>\n</tr><tr><td><strong>cpu_period</strong></td>\n<td><em>nil</em></td>\n<td>Number</td>\n<td><a href=\"https://docs.docker.com/reference/run/#runtime-constraints-on-resources\"><code>--cpu-period</code></a></td>\n<td>limit the CPU CFS (Completely Fair Scheduler) period</td>\n</tr><tr><td><strong>cpuset_cpus</strong></td>\n<td><em>nil</em></td>\n<td>String</td>\n<td><a href=\"https://docs.docker.com/reference/run/#runtime-constraints-on-resources\"><code>--cpuset-cpus</code></a></td>\n<td>CPUs in which to allow execution, e.g. <code>0-3</code> or <code>0,1</code></td>\n</tr><tr><td><strong>ulimits</strong></td>\n<td><em>nil</em></td>\n<td>Array of Ulimit</td>\n<td><a href=\"https://github.com/docker/docker/pull/9437\"><code>--ulimit</code></a></td>\n<td>ulimit spec for the container</td>\n</tr><tr><td><strong>kill_timeout</strong></td>\n<td><code>0</code></td>\n<td>Number</td>\n<td><em>none</em></td>\n<td>timeout in seconds to wait for container to <a href=\"https://docs.docker.com/reference/commandline/stop/\">stop before killing it</a> with <code>-9</code></td>\n</tr><tr><td><strong>keep_volumes</strong></td>\n<td><code>false</code></td>\n<td>Bool</td>\n<td><em>none</em></td>\n<td>tell <code>rocker-compose</code> to keep volumes when removing the container</td>\n</tr></tbody></table><p>Some aliases are supported for compatibility with <code>docker-compose</code> and <code>docker run</code> specs:</p>\n\n<table><thead><tr><th>docker_compose</th>\n<th>rocker_compose</th>\n</tr></thead><tbody><tr><td><code>command</code></td>\n<td><code>cmd</code></td>\n</tr><tr><td><code>link</code></td>\n<td><code>links</code></td>\n</tr><tr><td><code>label</code></td>\n<td><code>labels</code></td>\n</tr><tr><td><code>hosts</code></td>\n<td><code>add_host</code></td>\n</tr><tr><td><code>extra_hosts</code></td>\n<td><code>add_host</code></td>\n</tr><tr><td><code>working_dir</code></td>\n<td><code>workdir</code></td>\n</tr><tr><td><code>environment</code></td>\n<td><code>env</code></td>\n</tr></tbody></table><p>For every pair of containers with the same name, <code>rocker-compose</code> does a comparison of all properties to figure out changes, as well as a check of the running state. To determine if the container should be restarted, in case all other properties are equal, <code>rocker-compose</code> uses the following decision scheme:</p>\n\n<table><thead><tr><th>Desired State</th>\n<th>Actual State</th>\n<th>Exit Code</th>\n<th>Action</th>\n</tr></thead><tbody><tr><td>running</td>\n<td>not exists</td>\n<td><em>none</em></td>\n<td>start</td>\n</tr><tr><td>running</td>\n<td>exists</td>\n<td><em>any</em></td>\n<td>remove and start</td>\n</tr><tr><td>running</td>\n<td>restarting</td>\n<td><em>any</em></td>\n<td>remove and start</td>\n</tr><tr><td>running</td>\n<td>running</td>\n<td><em>none</em></td>\n<td>NOOP</td>\n</tr><tr><td>created</td>\n<td>not exists</td>\n<td><em>none</em></td>\n<td>create</td>\n</tr><tr><td>created</td>\n<td>exists</td>\n<td><em>any</em></td>\n<td>NOOP</td>\n</tr><tr><td>created</td>\n<td>restarting</td>\n<td><em>any</em></td>\n<td>remove and create</td>\n</tr><tr><td>created</td>\n<td>running</td>\n<td><em>none</em></td>\n<td>remove and create</td>\n</tr><tr><td>ran</td>\n<td>not exists</td>\n<td><em>none</em></td>\n<td>start and wait</td>\n</tr><tr><td>ran</td>\n<td>exists</td>\n<td><code>0</code></td>\n<td>NOOP</td>\n</tr><tr><td>ran</td>\n<td>exists</td>\n<td>non-zero</td>\n<td>remove, start and wait</td>\n</tr><tr><td>ran</td>\n<td>restarting</td>\n<td><em>any</em></td>\n<td>wait</td>\n</tr><tr><td>ran</td>\n<td>running</td>\n<td><em>none</em></td>\n<td>NOOP?</td>\n</tr></tbody></table><p><em>NOTE: by \"start\" here we mean \"create\" and then \"start\"</em></p>\n\n<p><strong>state: ran</strong> is used for single-shot commands to perform some initialization. <code>rocker-compose</code> does not re-run such containers unless they have changed or previous executions exited with non-zero code.</p>\n\n<p><strong>state: created</strong> is mostly used for data volume and network-share containers. They are described in the <a href=\"https://github.com/grammarly/rocker-compose#patterns\">patterns</a> section.</p>\n\n\n\n<p>It is possible to mount volumes to a running container the same way as it is when using plain <code>docker run</code>. In Docker, there are two types of volumes: <strong>Data volume</strong> and <strong>Mounted host directory</strong>. </p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#data-volume\"><span class=\"octicon octicon-link\"></span></a>Data volume</h3>\n\n<p>\"Data volume\" is a reusable directory managed by Docker daemon that can be shared between containers. Most often, this type of file sharing across containers should be used because of its <a href=\"http://12factor.net/\">12factor</a> compliance — you can think of it as \"data volume as a service\".</p>\n\n<p>Example:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">wordpress</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">db:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">mysql:5.6</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes_from:</span></span>\n      <span class=\"pl-c\"># specify to mount all volumes from \"db_data\" container, this way we can</span>\n      <span class=\"pl-c\"># update \"db\" container without loosing data</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">db_data </span></span>\n\n  <span class=\"pl-s\"><span class=\"pl-ent\">db_data:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">grammarly/scratch:latest </span></span><span class=\"pl-c\"># use empty image, just for data</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">state:</span> <span class=\"pl-s\">created </span></span><span class=\"pl-c\"># this tells compose to not try to run this container, data containers needs to be just created</span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes:</span></span>\n      <span class=\"pl-c\"># define the empty directory that will be used by \"db\" container</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">/var/lib/mysql</span></span>\n\n  <span class=\"pl-c\"># Cron job container that will periodically backup data from /var/lib/mysql volume in db_data container</span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">db_backup:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">some_cron_backuper_image</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes_from:</span> <span class=\"pl-s\">db_data</span></span></pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#mounted-host-directory\"><span class=\"octicon octicon-link\"></span></a>Mounted host directory</h3>\n\n<p>While it is useful for development and testing, it\'s unsafe and error-prone for production use. It requires some external folder to exist on a host machine in order to run your container. Also, it may cause some unpleasant failure modes hard to reproduce. And finally, you cannot guarantee reproducibility of your manifests.</p>\n\n<p>The rule of thumb with \"Mounted host directories\" is the following:</p>\n\n<ol><li>Use it only for development</li>\n<li>Use it for logging or mounting external devices, such as EBS volumes <em>(this one may be covered by tools like <a href=\"https://github.com/ClusterHQ/flocker\">flocker</a> or future docker volume drivers)</em></li>\n</ol><p>Example:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">wordpress</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">db:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">mysql:5.6</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes:</span></span>\n      <span class=\"pl-c\"># mount /mnt/data directory from host machine to /var/lib/mysql in the container</span>\n      <span class=\"pl-c\"># container can be safely removed without data loss</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">/mnt/data:/var/lib/mysql</span></span>\n\n  <span class=\"pl-c\"># Cron job container that will periodically backup data from /mnt/data host machine directory</span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">db_backup:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">some_cron_backuper_image</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes:</span> <span class=\"pl-s\">/mnt/data:/var/lib/mysql</span></span></pre></div>\n\n<p>Development example:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">wordpress</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">main:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">wordpress:4.1.2</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">links:</span> <span class=\"pl-s\">db:mysql</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes:</span></span>\n      <span class=\"pl-c\"># mount ./wordpress-src directory to /var/www/html in the container, this way we can hack wordpress sources while the container is running</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">./wordpress-src:/var/www/html</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">ports:</span></span>\n      <span class=\"pl-s\">- <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>8080:80<span class=\"pl-pds\">\"</span></span></span></pre></div>\n\n<p><em>NOTE: you cannot use the last example for production, obviously, because there should be no such directory as <code>./wordpress-src</code></em></p>\n\n\n\n<p>You can extend some container specifications within a single manifest file. In this example, we will run two identical wordpress containers and assign them to different ports:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">wordpress</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  <span class=\"pl-c\"># define base _main container spec; it will be ignored by rocker-compose because it starts from _</span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">_main:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">wordpress:4.1.2</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">links:</span> <span class=\"pl-s\">db:mysql</span></span>\n\n  <span class=\"pl-c\"># extend main1 from _main and override ports to listen on :8080</span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">main1:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">extends:</span> <span class=\"pl-s\">_main</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">ports:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>8080:80<span class=\"pl-pds\">\"</span></span></span>\n\n  <span class=\"pl-c\"># extend main2 from _main and override ports to listen on :8081</span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">main2:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">extends:</span> <span class=\"pl-s\">_main</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">ports:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>8081:80<span class=\"pl-pds\">\"</span></span></span></pre></div>\n\n<p><strong>NOTE:</strong> nested extends are not allowed by <code>rocker-compose</code>.</p>\n\n\n\n<p><code>rocker-compose</code> uses Go <a href=\"http://golang.org/pkg/text/template/\">text/template</a> engine to render manifests. This way you can put some logic into your manifests or even inject some variables from the outside:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">wordpress</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">main:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">wordpress:4.1.2</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">links:</span> <span class=\"pl-s\">db:mysql</span></span>\n    {{ if eq .env <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dev<span class=\"pl-pds\">\"</span></span> }}\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes:</span></span>\n      <span class=\"pl-c\"># mount ./wordpress-src directory to /var/www/html in the container, such way we can hack wordpress sources while the container is running</span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">./wordpress-src:/var/www/html</span></span>\n    {{ end }}\n    <span class=\"pl-s\"><span class=\"pl-ent\">ports:</span></span>\n      <span class=\"pl-s\">- <span class=\"pl-s\">{{ or .port \"8080\" }}:80</span></span></pre></div>\n\n<p>You can run this manifest as follows:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ rocker-compose run                             <span class=\"pl-c\"># will not mount src volume and run on 8080</span>\n$ rocker-compose run -var env=dev                <span class=\"pl-c\"># will mount src volume and run on :8080</span>\n$ rocker-compose run -var env=dev -var port=8081 <span class=\"pl-c\"># will mount src volume and run on :8081</span></pre></div>\n\n<p>In addition to the <a href=\"http://golang.org/pkg/text/template/#hdr-Functions\">builtin helper functions</a> there are some provided by <code>rocker-compose</code>:</p>\n\n<h6><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#-bridgeip--example\"><span class=\"octicon octicon-link\"></span></a>{{ bridgeIp }} <a href=\"https://github.com/grammarly/rocker-compose#loose-coupling-network\">Example</a></h6>\n\n<p>Returns Docker\'s <a href=\"https://docs.docker.com/articles/networking/\">bridge gateway ip</a>, which can be used to access any exposed ports of an external container. Useful for loose coupling. <a href=\"https://github.com/grammarly/rocker-compose/blob/88007dcf571da7617f775c9abe1824eedc9598fb/src/compose/docker.go#L59\">Source</a></p>\n\n<h6><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#-seq-to--or--seq-from-to--or--seq-from-to-step-\"><span class=\"octicon octicon-link\"></span></a>{{ seq <em>To</em> }} or {{ seq <em>From</em> <em>To</em> }} or {{ seq <em>From</em> <em>To</em> <em>Step</em> }}</h6>\n\n<p>Sequence generator. Returns an array of integers of a given sequence. Useful when you need to duplicate some configuration, for example scale containers of the same type. Mostly used in combination with <code>range</code>:</p>\n\n<pre><code>{{ range $i := seq 1 5 2 }}\ncontainer-$i\n{{ end }}\n</code></pre>\n\n<p>This template will yield:</p>\n\n<pre><code>container-1\ncontainer-3\ncontainer-5\n</code></pre>\n\n<p>See <a href=\"https://github.com/grammarly/rocker-compose#dynamic-scaling\">this example</a> of using <code>seq</code> for dynamically scaling containers.</p>\n\n\n\n<p>Sometimes you need to dynamically set the number of containers to be started. <code>docker-compose</code> has <a href=\"https://docs.docker.com/compose/cli/#scale\">scale</a> command that does exactly what we want. With <code>rocker-compose</code> we can template the configuration with the help of the <code>seq</code> generator:</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">scaling</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  {{ <span class=\"pl-ent\">range $n </span>:= seq .n }}\n  <span class=\"pl-s\"><span class=\"pl-ent\">worker_{{$n}}:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">busybox:buildroot-2013.08.1</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">command:</span> <span class=\"pl-s\">for i in `seq 1 10000`; do echo \"hello $i!!!!\"; sleep 1; done</span></span>\n  {{ end }}</pre></div>\n\n<p>By running <code>rocker-compose</code> with some value for a variable <code>n</code>, it will spawn a desired number of \"worker\" containers:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>rocker-compose run -var n=1 <span class=\"pl-c\"># will spawn worker_1</span>\nrocker-compose run -var n=2 <span class=\"pl-c\"># will add worker_2 while worker_1 is still running</span>\nrocker-compose run -var n=4 <span class=\"pl-c\"># will add worker_3 and worker_4 while worker_1 and worker_2 are running</span>\nrocker-compose run -var n=1 <span class=\"pl-c\"># will kill worker_2, worker_3, and worker_4, while keeping worker_1 running</span></pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#a-more-advanced-example\"><span class=\"octicon octicon-link\"></span></a>A more advanced example</h3>\n\n<p>We can specify complete groups of containers running independently. Here we use <code>_base</code> container configuration to extend our workers from. Each worker writes its name and message sequence number to a log, which is stored in a dedicated volume container. From the other side, there is a <code>tail_container</code> for each worker, that tails the worker\'s log.</p>\n\n<div class=\"highlight highlight-source-yaml\"><pre><span class=\"pl-s\"><span class=\"pl-ent\">namespace:</span> <span class=\"pl-s\">scaling</span></span>\n<span class=\"pl-s\"><span class=\"pl-ent\">containers:</span></span>\n  <span class=\"pl-s\"><span class=\"pl-ent\">_base:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">busybox:buildroot-2013.08.1</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">cmd:</span> <span class=\"pl-s\">for i in `seq 1 10000`; do echo \"hello $NAME $i!!!!\" &gt;&gt; /tmp/log; sleep 1; done</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">env:</span></span>\n      <span class=\"pl-s\"><span class=\"pl-ent\">NAME:</span> <span class=\"pl-s\">{{or .name \"NONE\"}}</span></span>\n\n  {{ <span class=\"pl-ent\">range $n </span>:= seq .n }}\n  <span class=\"pl-s\"><span class=\"pl-ent\">worker_{{$n}}:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">extends:</span> <span class=\"pl-s\">_base</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">env:</span> <span class=\"pl-s\">NAME=worker-{{$n}}</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes_from:</span> <span class=\"pl-s\">volume_container_{{$n}}</span></span>\n\n  <span class=\"pl-s\"><span class=\"pl-ent\">volume_container_{{$n}}:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">grammarly/scratch:latest</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">state:</span> <span class=\"pl-s\">created</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes:</span> <span class=\"pl-s\">/tmp</span></span>\n\n  <span class=\"pl-s\"><span class=\"pl-ent\">tail_container_{{$n}}:</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">image:</span> <span class=\"pl-s\">ubuntu:12.04</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">cmd:</span> <span class=\"pl-s\">tail -f /tmp/log</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">volumes_from:</span> <span class=\"pl-s\">volume_container_{{$n}}</span></span>\n    <span class=\"pl-s\"><span class=\"pl-ent\">links:</span> <span class=\"pl-s\">worker_{{$n}}</span></span>\n  {{ end }}</pre></div>\n\n\n\n<p>Here is a list of the most common problems with multi-container applications and ways you can solve them with <code>rocker-compose</code>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/grammarly/rocker-compose#data-volume-containers\"><span class=\"octicon octicon-link\"></span></a>Data volume containers</h3>\n\n<p>By design, containers are transient. Most of the tools for containerized applications are built expecting your apps to respect this rule. Your container can be dropped and created from scratch at any time. For example, to update ',1),(95,'openvswitch/ovs','https://github.com/openvswitch/ovs/blob/master/INSTALL.Debian.md',0,0,'\n    <p>This document describes how to build Debian packages for Open vSwitch.\nTo install Open vSwitch on Debian without building Debian packages,\nsee <a href=\"https://github.com/openvswitch/ovs/blob/master/INSTALL.md\">INSTALL.md</a> instead.</p>\n\n<p>These instructions should also work on Ubuntu and other Debian\nderivative distributions.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/openvswitch/ovs/blob/master/INSTALL.Debian.md#before-you-begin\"><span class=\"octicon octicon-link\"></span></a>Before You Begin</h2>\n\n<p>Before you begin, consider whether you really need to build packages\nyourself.  Debian \"wheezy\" and \"sid\", as well as recent versions of\nUbuntu, contain pre-built Debian packages for Open vSwitch.  It is\neasier to install these than to build your own.  To use packages from\nyour distribution, skip ahead to \"Installing .deb Packages\", below.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/openvswitch/ovs/blob/master/INSTALL.Debian.md#building-open-vswitch-debian-packages\"><span class=\"octicon octicon-link\"></span></a>Building Open vSwitch Debian packages</h2>\n\n<p>You may build from an Open vSwitch distribution tarball or from an\nOpen vSwitch Git tree with these instructions.</p>\n\n<p>You do not need to be the superuser to build the Debian packages.</p>\n\n<ol><li><p>Install the \"build-essential\" and \"fakeroot\" packages, e.g. with\n<code>apt-get install build-essential fakeroot</code>.</p></li>\n<li><p>Obtain and unpack an Open vSwitch source distribution and <code>cd</code> into\nits top level directory.</p></li>\n<li><p>Install the build dependencies listed under \"Build-Depends:\" near\nthe top of debian/control.  You can install these any way you like,\ne.g. with <code>apt-get install</code>.</p>\n\n<p>Check your work by running <code>dpkg-checkbuilddeps</code> in the top level of\nyour ovs directory.  If you\'ve installed all the dependencies\nproperly, dpkg-checkbuilddeps will exit without printing anything.\nIf you forgot to install some dependencies, it will tell you which ones.</p></li>\n<li><p>Run:</p>\n\n<p><code>fakeroot debian/rules binary</code></p>\n\n<p>This will do a serial build that runs the unit tests. This will take\napproximately 8 to 10 minutes. If you prefer, you can run a faster\nparallel build, e.g.:</p>\n\n<p><code>DEB_BUILD_OPTIONS=\'parallel=8\' fakeroot debian/rules binary</code></p>\n\n<p>If you are in a big hurry, you can even skip the unit tests:</p>\n\n<p><code>DEB_BUILD_OPTIONS=\'parallel=8 nocheck\' fakeroot debian/rules binary</code></p></li>\n<li><p>The generated .deb files will be in the parent directory of the\nOpen vSwitch source distribution.</p></li>\n</ol><h2><a class=\"anchor\" href=\"https://github.com/openvswitch/ovs/blob/master/INSTALL.Debian.md#installing-deb-packages\"><span class=\"octicon octicon-link\"></span></a>Installing .deb Packages</h2>\n\n<p>These instructions apply to installing from Debian packages that you\nbuilt yourself, as described in the previous section, or from packages\nprovided by Debian or a Debian derivative distribution such as Ubuntu.\nIn the former case, use a command such as <code>dpkg -i</code> to install the\n.deb files that you build, and in the latter case use a program such\nas <code>apt-get</code> or <code>aptitude</code> to download and install the provided\npackages.</p>\n\n<p>You must be superuser to install Debian packages.</p>\n\n<ol><li><p>Start by installing an Open vSwitch kernel module.  See\ndebian/openvswitch-switch.README.Debian for the available options.</p></li>\n<li><p>Install the \"openvswitch-switch\" and \"openvswitch-common\" packages.\nThese packages include the core userspace components of the switch.</p></li>\n</ol><p>Open vSwitch .deb packages not mentioned above are rarely useful.\nPlease refer to their individual package descriptions to find out\nwhether any of them are useful to you.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/openvswitch/ovs/blob/master/INSTALL.Debian.md#bug-reporting\"><span class=\"octicon octicon-link\"></span></a>Bug Reporting</h2>\n\n<p>Please report problems to <a href=\"mailto:bugs@openvswitch.org\">bugs@openvswitch.org</a>.</p>\n',1),(96,'Getting and Installing OpenDaylight | OpenDaylight','https://www.opendaylight.org/installing-opendaylight',0,0,'<p dir=\"ltr\">This page provides instructions on how to download and install the OpenDaylight Lithium platform.</p>\n<p>Please note that these instructions are for installing the base ODL platform and does not provide instructions for implementing any specific use cases. Links to select use case examples will be provided below and also can be found on the ODL use cases pages as well as in the documentation included with ODL.  </p>\n<p>This page is only intended to provide installation instructions, for tutorials and educational content, please visit our OpenDaylight Tutorials page.</p>\n<h2>Prerequisites:</h2>\n<p>OpenDaylight software runs in a platform-independent Java Virtual Machine and can be installed on any OS; however the most active members of the community and most  examples and tutorials use Linux. Prior to installing OpenDaylight, it is recommended that you have familiarity with the Linux operating system and are comfortable executing operations in the Bash shell.</p>\n<p dir=\"ltr\">Note: If you are not experienced with Linux, a freely available online course <a href=\"https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2\">Introduction to Linux</a> is available through the Linux Foundation’s partnership with edX.</p>\n<p>The ODL platform provides a broad array of features and services that can be used to implement a wide variety of use cases. The best way to approach installation is to start with an understanding of which use cases matter most to you.  Prior to installation, users should plan for their desired use case or testing scenario and familiarize themselves with the features and modules required. Please check out the Use Cases and Tutorials pages for detailed information on use cases.</p>\n<p>For users needing assistance with implementation, the ODL <a href=\"https://www.opendaylight.org/community-getting-started\">Community Getting Started Guide </a>provides information on accessing community resources, and the <a href=\"https://www.opendaylight.org/solutions-provider-directory\">Solution Provider Directory</a> provides a listing of organizations that offer solutions, applications and services for ODL.</p>\n<h2>System Requirements</h2>\n<p>OpenDaylight Controller runs in a JVM. Being a Java application, it can potentially run on any operating system that supports Java. However, for best results we recommend using a recent Linux distribution. Most of the tutorials and instructions available for ODL leverage popular Linux distributions including CentOS, Red Hat Enterprise Linux (RHEL) and Ubuntu.  </p>\n<p>Note: The following instructions assume:</p>\n<ul><li dir=\"ltr\">\n<p dir=\"ltr\">You are installing OpenDaylight Controller on your local Linux machine;</p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\">You will use the Mininet VM to create a virtual network;</p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\">OpenDaylight Controller has not been tested in other environments.</p>\n</li>\n</ul><p>For initial testing and experimentation, the controller can run on a standard developer desktop or laptop environment. We recommend that systems are equipped with a modern multi-core processor and 8GB of RAM or greater for an optimal experience.</p>\n<p>Prior to deploying OpenDaylight in production, it is recommended that users first gain expertise with the platform and available documentation. In addition to the available community resources, there are a number of organizations offer consulting services for OpenDaylight which can be found in the Solution Provider Directory.</p>\n<h2>Downloading and installing OpenDaylight Lithium</h2>\n<p>The latest release can be found on the OpenDaylight software download page: <a href=\"http://www.opendaylight.org/downloads\">http://www.opendaylight.org/downloads</a>.</p>\n<p>The distribution has no features enabled by default. However, once the base installation is complete, additional features can be enabled simply as needed in your implementation.</p>\n<p>NOTE: For compatibility reasons, you cannot enable all the features simultaneously. Known incompatibilities are listed in the “Installing the Components” section below.</p>\n<h2>Running the Lithium Distribution</h2>\n<p>OpenDaylight uses Apache Karaf to provide lightweight containers for feature modules. This allows the different features in ODL to be bundled into modules that can be loaded on-demand without reboots or instability. This capability makes it easy to run lean with only the features needed in your use case, and to enable additional features as they are needed.</p>\n<p>To run the Lithium distribution, from the Linux prompt:</p>\n<ol><li dir=\"ltr\">\n<p dir=\"ltr\">Unzip the zip file</p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\">Navigate to the directory</p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\">run `./bin/karaf`</p>\n</li>\n</ol><table dir=\"ltr\"><colgroup><col /></colgroup><tbody><tr><td>\n<p dir=\"ltr\"><span>$ ls distribution-karaf-0.3.0-Lithium.zip</span></p>\n<p dir=\"ltr\"><span>distribution-karaf-0.3.0-Lithium.zip</span></p>\n<p dir=\"ltr\"><span>$ unzip distribution-karaf-0.3.0-Lithium.zip</span></p>\n<p dir=\"ltr\"><span>Archive:  distribution-karaf-0.3.0-Lithium.zip</span></p>\n<p dir=\"ltr\"><span>  creating: distribution-karaf-0.3.0-Lithium/</span></p>\n<p dir=\"ltr\"><span>  creating: distribution-karaf-0.3.0-Lithium/configuration/</span></p>\n<p dir=\"ltr\"><span>  creating: distribution-karaf-0.3.0-Lithium/data/</span></p>\n<p dir=\"ltr\"><span>  creating: distribution-karaf-0.3.0-Lithium/data/tmp/</span></p>\n<p dir=\"ltr\"><span>  creating: distribution-karaf-0.3.0-Lithium/deploy/</span></p>\n<p dir=\"ltr\"><span>  creating: distribution-karaf-0.3.0-Lithium/etc/</span></p>\n<p dir=\"ltr\"><span>  creating: distribution-karaf-0.3.0-Lithium/externalapps/</span></p>\n<p dir=\"ltr\"><span>...</span></p>\n<p dir=\"ltr\"><span> inflating: distribution-karaf-0.3.0-Lithium/bin/start.bat</span></p>\n<p dir=\"ltr\"><span> inflating: distribution-karaf-0.3.0-Lithium/bin/status.bat</span></p>\n<p dir=\"ltr\"><span> inflating: distribution-karaf-0.3.0-Lithium/bin/stop.bat</span></p>\n<p dir=\"ltr\"><span>$ cd distribution-karaf-0.3.0-Lithium</span></p>\n<p dir=\"ltr\"><span>$ ./bin/karaf</span></p>\n<p dir=\"ltr\"><span>________                       ________                .__  .__       .__     __</span><br />   \\_____  \\ ______   ____   ____ \\______ \\ _____  ___.__.|  | |__| ____ |  |___/  |_<br />    /   |   \\\\____ \\_/ __ \\ /    \\ |    |  \\\\__  \\&lt;   |  ||  | |  |/ ___\\|  |  \\   __\\<br />   /    |    \\  |_&gt; &gt;  ___/|   |  \\|    `   \\/ __ \\\\___  ||  |_|  / /_/  &gt;   Y  \\  |<br />   \\_______  /   __/ \\___  &gt;___|  /_______  (____  / ____||____/__\\___  /|___|  /__|<br />           \\/|__|        \\/     \\/        \\/     \\/\\/            /_____/      \\/</p>\n<p dir=\"ltr\"><span>----</span></p>\n<p dir=\"ltr\"><span>* Press *tab* for a list of available commands</span></p>\n<p dir=\"ltr\"><span>* Typing *[cmd] --help* will show help for a specific command.</span></p>\n<p dir=\"ltr\"><span>* Press *ctrl-d* or type *system:shutdown* or *logout* to shutdown OpenDaylight.</span></p>\n</td>\n</tr></tbody></table><p>Installing the components</p>\n<p>The section describes a list of components in OpenDaylight Lithium and</p>\n<p>the relevant Karaf feature to install in order to enable that component.</p>\n<p>To install a feature use the following command:</p>\n<p>feature:install &lt;feature-name&gt;</p>\n<p>The syntax for this command allows multiple features to be installed in one line, for example:</p>\n<p>feature:install &lt;feature1-name&gt; &lt;feature2-name&gt; ... &lt;featureN-name&gt;</p>\n<p>The following table provides a summary of features available to be installed in the Lithium release. In the table a compatibility value of *all* means that it can be run with other features. A value of *self+all* indicates that the feature can be installed with other features with a value of *all*, but may interact badly other features with a value of *self+all*. Additional information about compatibility between modules can be found in the <a href=\"https://github.com/opendaylight/docs/tree/stable/lithium\">documentation</a> for each feature.</p>\n<h2>Lithium Karaf Feature Modules:</h2>\n<table dir=\"ltr\"><colgroup><col /><col /><col /><col /></colgroup><tbody><tr><td>\n<p dir=\"ltr\">Component Name</p>\n</td>\n<td>\n<p dir=\"ltr\">Component Description</p>\n</td>\n<td>\n<p dir=\"ltr\">Karaf feature name</p>\n</td>\n<td>\n<p dir=\"ltr\">Compatibility</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">ALTO</p>\n</td>\n<td>\n<p dir=\"ltr\">Enable support for Application-Layer Traffic Optimization</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-alto-all</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">BGP</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables support for BGP</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-bgpcep-bgp-all</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">CAPWAP</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables control of supported wireless APs</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-capwap-ac-rest</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">DIDM</p>\n</td>\n<td>\n<p dir=\"ltr\">Device Identification and Driver Management</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-didm-identification-api, odl-didm-identification, and odl-didm-drivers-api</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Group Based Policy</p>\n</td>\n<td>\n<p dir=\"ltr\">Enable Endpoint Registry and Policy Repository REST APIs and associated functionality for Group Based Policy</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-groupbasedpolicy-ofoverlay</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Internet of Things Data Management</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables support for the oneM2M specification</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-iotdm-onem2m</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">L2 Switch</p>\n</td>\n<td>\n<p dir=\"ltr\">Provides L2 (Ethernet) forwarding across connected OppenFlow switches and support for host tracking</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-l2switch-switch-ui</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">LACP</p>\n</td>\n<td>\n<p dir=\"ltr\">Enable support for the Link Aggregation Control Protocol</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-lacp-ui</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">LISP Flow Mapping</p>\n</td>\n<td>\n<p dir=\"ltr\">Enable LISP control plane services including the mapping system services REST API and LISP protocol SB plugin</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-lispflowmapping-all</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">MD-SAL Clustering</p>\n</td>\n<td>\n<p dir=\"ltr\">Provides support for operating a cluster of OpenDaylight instances</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-mdsal-clustering</p>\n</td>\n<td>\n<p dir=\"ltr\">special</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">NETCONF over SSH</p>\n</td>\n<td>\n<p dir=\"ltr\">Provides support to manage NETCONF-enabled devices over SSH</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-netconf-connector-ssh</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Network Intent Composition</p>\n</td>\n<td>\n<p dir=\"ltr\">Enable support for high-level network control via intents</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-nic-core</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">OVS Management</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables OVS management using OVSDB plugin and its associated OVSDB northbound APIs</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-ovsdb-all</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">OVSDB OpenStack Neutron</p>\n</td>\n<td>\n<p dir=\"ltr\">OpenStack Network Virtualization using OpenDaylight\'s OVSDB support</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-ovsdb-openstack</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">OpFlex</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables support for the OpFlex protocol</p>\n</td>\n<td>\n<p dir=\"ltr\">special (see user/developer guide)</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">OpenFlow Flow Programming</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables discovery and control of OpenFlow switches and the topology between them</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-openflowplugin-flow-services-ui</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">OpenFlow Table Type Patterns</p>\n</td>\n<td>\n<p dir=\"ltr\">Allows OpenFlow Table Type Patterns to be manually associated with network elements</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-ttp-all</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">PCEP</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables support for PCEP</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-bgpcep-pcep-all</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Packetcable PCMM</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables flow-based dynamic QoS management of CMTS using in the DOCSIS infrastructure</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-packetcable-all</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Packetcable Policy Server</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables support for the PacketCable policy server</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-packetcable-policy-server-all</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">RESTCONF API Support</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables REST API access to the MD-SAL including the data store</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-restconf</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">SDN Interface</p>\n</td>\n<td>\n<p dir=\"ltr\">Provides support for interaction and sharing of state between (non-clustered) OpenDaylight instances</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-sdninterfaceapp-all</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">SFC over L2</p>\n</td>\n<td>\n<p dir=\"ltr\">Supports implementing SFC using Layer 2 forwarding</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-sfcofl2</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">SFC over LISP</p>\n</td>\n<td>\n<p dir=\"ltr\">Supports implementing SFC using LISP</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-sfclisp</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">SFC over REST</p>\n</td>\n<td>\n<p dir=\"ltr\">Supports implementing SFC using REST CRUD operations on network elements</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-sfc-sb-rest</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">SFC over VXLAN</p>\n</td>\n<td>\n<p dir=\"ltr\">Supports implementing SFC using VXLAN tunnels</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-sfc-ovs</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">SNMP Plugin</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables monitoring and control of network elements via SNMP</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-snmp-plugin</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">SNMP4SDN</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables OpenFlow-like control of network elements via SNMP</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-snmp4sdn-all</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">SSSD Federated Authentication</p>\n</td>\n<td>\n<p dir=\"ltr\">Enable support for federated authentication using SSSD</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-aaa-sssd-plugin</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Secure Networking Bootstrap</p>\n</td>\n<td>\n<p dir=\"ltr\">Defines a SNBI domain and associated white lists of devices to be accommodated to the domain</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-snbi-all</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Secure tag eXchange Protocol (SXP)</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables distribution of shared tags to network devices</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-sxp-controller</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Service Flow Chaining (SFC)</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables support for applying chains of network services to certain traffic</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-sfc-all</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Time Series Data Repository (TSDR)</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables historical tracking of OpenFlow statistics</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-tsdr-all</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Topology Processing Framework</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables merged and filtered views of network topologies</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-topoprocessing-framework</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Unified Secure Channel (USC)</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables support for secure, remote connections to network devices</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-usc-channel-ui</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">VPN Service</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables support for OpenStack VPNaaS</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-vpnservice-core</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">VTN Manager</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables Virtual Tenant Network support</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-vtn-manager-rest</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">VTN Manager Neutron</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables OpenStack Neutron support of VTN Manager</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-vtn-manager-neutron</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr></tbody></table><p>The following table lists preview/experimental features that can be accessed in Lithium:</p>\n<h2>Experimental Lithium Components:</h2>\n<table dir=\"ltr\"><colgroup><col /><col /><col /><col /></colgroup><tbody><tr><td>\n<p dir=\"ltr\">Persistence   </p>\n</td>\n<td>\n<p dir=\"ltr\">Enables saving of data to external databases</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-persistence-api</p>\n</td>\n<td>\n<p dir=\"ltr\">self+all</p>\n</td>\n</tr><tr><td>\n<p dir=\"ltr\">Reservation</p>\n</td>\n<td>\n<p dir=\"ltr\">Enables bandwidth calendaring using the TL1 protocol</p>\n</td>\n<td>\n<p dir=\"ltr\">odl-reservation-models</p>\n</td>\n<td>\n<p dir=\"ltr\">all</p>\n</td>\n</tr></tbody></table><h2>Listing available features</h2>\n<p>To find the complete list of Karaf features, run the following command:</p>\n<p dir=\"ltr\">feature:list</p>\n<p>To list the installed Karaf features, run the following command:</p>\n<p>feature:list -i</p>\n<h2>Installing MD-SAL clustering</h2>\n<p>The MD-SAL clustering feature has special compatibility criteria. You *must*</p>\n<p dir=\"ltr\">install clustering, before other features are installed. To install clustering,</p>\n<p dir=\"ltr\">run the following command on the Karaf CLI console:</p>\n<p dir=\"ltr\">feature:install odl-mdsal-clustering</p>\n<h2>Installing support for REST APIs</h2>\n<p>Most components that offer REST APIs will automatically load the RESTCONF API support component, but if for whatever reason they seem to be missing, you can activate this support with the following command:</p>\n<p dir=\"ltr\">feature:install odl-restconf</p>\n<h2>Installing the DLUX web interface</h2>\n<p>The OpenDaylight web interface DLUX draws information from topology and host databases to display information about the topology of the network, flow statistics, and host locations. You can either use DLUX as a standalone plug-in or integrate with OpenDaylight.Demand Generation Manager.</p>\n<p>To install DLUX as a standalone application, refer to <a href=\"https://wiki.opendaylight.org/view/OpenDaylight_DLUX:Setup_and_Run\">https://wiki.opendaylight.org/view/OpenDaylight_DLUX:Setup_and_Run</a></p>\n<p>To integrate with OpenDaylight you must enable the DLUX Karaf feature. You can enable various other bundles within Karaf depending on the features you would like to access using DLUX. Each feature can be enabled or disabled separately.</p>\n<p>Ensure that you have created a topology and enabled the MD-SAL feature in the Karaf distribution before you use DLUX for network management.</p>\n<p>For more information about enabling the Karaf features for DLUX, refer to <a href=\"https://wiki.opendaylight.org/view/OpenDaylight_DLUX:DLUX_Karaf_Feature\">https://wiki.opendaylight.org/view/OpenDaylight_DLUX:DLUX_Karaf_Feature</a></p>\n<h3>Next Steps:</h3>\n<p>Once you have completed these instructions the most common next steps are to enable the relevant features for your use case and then proceed to configuration.</p>\n<p>If you already know which features you need to enable, the <a href=\"https://github.com/opendaylight/docs/tree/stable/lithium\">OpenDaylight Documentation</a> provides installation and configuration instructions.</p>\n<p>In addition to deeper technical details, the documentation includes numerous introductory resources providing informative instructions &amp; details. Some key documents that help provide an introduction &amp; help with navigating documentation include:</p>\n<p>If you are looking for further instructions, educational resources or ideas for use cases, please check out our Tutorials and Use Cases pages.</p>\n<p>If you need further assistance with OpenDaylight, there are a number of ways to engage with the community, please check out the <a href=\"http://www.opendaylight.org/resources/getting-started-guide\">Community Getting Started Guide</a> to learn about available resources. Another way to find assistance is checking out our Solution Provider Directory to find a number of organizations that offer solutions and services for ODL.</p>\n',1),(99,'Open source Slack-alternative adopts GitLab Flavored Markdown','http://www.mattermost.org/open-source-slack-alternative-adopts-markdown/',0,0,'\n		<p>We’re happy to announce that Mattermost is adopting markdown for text rendering. This lets Mattermost users communicate with greater <em>expression</em> and <em>precision </em>through font formatting, emoji, headings, bullet points, tables and many other options.</p>\n<p>As an open source Slack-alternative, we get a lot of feature requests for functionality that Slack doesn’t provide, and markdown was high on the list.</p>\n<p>Since Mattermost ships in the GitLab omnibus installer (as “<a href=\"https://gitlab.com/gitlab-org/gitlab-mattermost\">GitLab Mattermost</a>“, an MIT licensed binary configured with GitLab SSO), it was obvious that <a href=\"https://gitlab.com/gitlab-org/gitlab-ce/blob/6-4-stable/doc/markdown/markdown.md\">GitLab Flavored Markdown</a> would be our standard.</p>\n<a href=\"http://www.mattermost.org/wp-content/uploads/2015/09/gitlab_markdown4.png\"><img class=\"wp-image-1175 size-full\" src=\"http://www.mattermost.org/wp-content/uploads/2015/09/gitlab_markdown4.png\" alt=\"\" width=\"537\" height=\"504\" /></a>Example: Sending richly formatted messages in Mattermost using GitLab Flavored Markdown<p>We’re hugely thankful to the GitLab and Mattermost communities for convincing us to build this, as we <em>love</em> the new functionality and it’s hard to imaging not having it.</p>\n<p>For example, before this feature, if you wanted to have shortcuts in channel headers you’d need to use raw URLs–and a pop-over to see all the links:</p>\n<p><a href=\"http://www.mattermost.org/wp-content/uploads/2015/09/regular_header.png\"><img class=\"wp-image-1127 size-full aligncenter\" src=\"http://www.mattermost.org/wp-content/uploads/2015/09/regular_header.png\" alt=\"\" width=\"537\" height=\"151\" /></a><br />Now we can turn long URLs into concise links using simple formatting:</p>\n<pre><code>[Repo](https://github.com/mattermost/platform) | [Forum](http://forum.mattermost.org/) | [Feature Requests](http://mattermost.uservoice.com/) | [Tickets](http://mattermost.atlassian.net)\r\n</code></pre>\n<p>Which renders neatly in your channel header:</p>\n<p><a href=\"http://www.mattermost.org/wp-content/uploads/2015/09/markdown_projectx_header2.png\"><img class=\"wp-image-1125 size-full aligncenter\" src=\"http://www.mattermost.org/wp-content/uploads/2015/09/markdown_projectx_header2.png\" alt=\"\" width=\"537\" height=\"151\" /></a></p>\n<p>You can also use image icons in place of words to create shortcut buttons–and this works on dynamic images as well, like build status indicators from systems like Travis CI:</p>\n<pre><code>[![Repo](https://assets-cdn.github.com/favicon.ico)](https://github.com/mattermost/platform) | [![Forum](https://cdn1.slant.co/16474-full.ico)](http://forum.mattermost.org/) | [![Feature Requests](https://cdn1.slant.co/14685-full.ico)](http://forum.mattermost.org/) | [![Tickets](http://www.wsit.me.uk/images/jira.ico)](http://mattermost.atlassian.net) | [![Build Status](https://travis-ci.org/mattermost/platform.svg?branch=master)](https://travis-ci.org/mattermost/platform)\r\n</code></pre>\n<p>Here’s how the above renders in your header:</p>\n<p><a href=\"http://www.mattermost.org/wp-content/uploads/2015/09/markdown_icons2.png\"><img class=\"wp-image-1131 size-full aligncenter\" src=\"http://www.mattermost.org/wp-content/uploads/2015/09/markdown_icons2.png\" alt=\"\" width=\"537\" height=\"151\" /></a></p>\n<p>As a fun bonus feature, use “#” to show emoji in different heading sizes:</p>\n<pre>##### :sheep: \r\n#### :sheep: \r\n### :sheep: \r\n## :sheep: \r\n# :sheep:</pre>\n<p>Which renders as:</p>\n<p><a href=\"http://www.mattermost.org/wp-content/uploads/2015/09/sheep.png\"><img class=\"size-full wp-image-1132 aligncenter\" src=\"http://www.mattermost.org/wp-content/uploads/2015/09/sheep.png\" alt=\"sheep\" width=\"357\" height=\"295\" /></a></p>\n<p>Markdown is incredibly compact and powerful, and we’re looking forward to all the creative uses from the community.</p>\n<p>Below is an overview of all that it can do today–documentation written in markdown, describing markdown, rendered in markdown in a Mattermost channel:</p>\n\n\n\n<p><a href=\"http://www.mattermost.org/wp-content/uploads/2015/09/ScreenClip-437.png\"><img class=\"size-full wp-image-1187 aligncenter\" src=\"http://www.mattermost.org/wp-content/uploads/2015/09/ScreenClip-437.png\" alt=\"ScreenClip [437]\" width=\"873\" height=\"1106\" /></a><a href=\"http://www.mattermost.org/wp-content/uploads/2015/09/ScreenClip-438.png\"><img class=\"size-full wp-image-1188 aligncenter\" src=\"http://www.mattermost.org/wp-content/uploads/2015/09/ScreenClip-438.png\" alt=\"ScreenClip [438]\" width=\"866\" height=\"1200\" /></a><a href=\"http://www.mattermost.org/wp-content/uploads/2015/09/ScreenClip-439.png\"><img class=\"size-full wp-image-1189 aligncenter\" src=\"http://www.mattermost.org/wp-content/uploads/2015/09/ScreenClip-439.png\" alt=\"ScreenClip [439]\" width=\"868\" height=\"734\" /></a></p>\n<p>Want to see how it works? The above message was generated with the raw markdown text below:</p>\n<pre>### Markdown Help\r\n\r\nMarkdown makes it easy to format messages. Type a message as you normally would, and use these rules to render it with special formatting. \r\n\r\n#### Text Style: \r\n\r\nYou can use either `_` or `*` around a word to make it italic. Use two to make it bold. \r\n`_italics_` renders as _italics_\r\n`**bold**` renders as **bold**\r\n`**_bold-italic_**` renders as **_bold-italics_**\r\n`~~strikethrough~~` renders as ~~strikethrough~~\r\n\r\n#### Code: \r\n\r\nCreate a code block by indenting four spaces, or by placing ``` on the line above and below your code. \r\n\r\nExample:\r\n ```\r\n code block\r\n ```\r\nRenders as: \r\n```\r\ncode block\r\n```\r\n\r\nCreate in-line monospaced font by surrounding it with back spaces. \r\n```\r\n`monospace`\r\n```\r\nRenders as: `monospace`.\r\n\r\n#### Links: \r\n\r\nCreate labeled links by putting the desired text in square brackets and the associated link in normal brackets. \r\n`[Check out Mattermost!](www.mattermost.com)`\r\nRenders as: [Check out Mattermost!](www.mattermost.com)\r\n\r\n#### In-line Images\r\n\r\nCreate in-line images using an `!` followed by the alt text in square brackets and the link in normal brackets. Add hover text by placing it in quotes after the link.\r\n```\r\n![alt text](link \"hover text\")\r\n\r\nand\r\n\r\n[![Build Status](https://travis-ci.org/mattermost/platform.svg?branch=master)](https://travis-ci.org/mattermost/platform) [![Github](https://assets-cdn.github.com/favicon.ico)](https://github.com/mattermost/platform)\r\n```\r\nRenders as: \r\n![alt text](link \"hover text\")\r\nand\r\n[![Build Status](https://travis-ci.org/mattermost/platform.svg?branch=master)](https://travis-ci.org/mattermost/platform) [![Github](https://assets-cdn.github.com/favicon.ico)](https://github.com/mattermost/platform)\r\n\r\n#### Emojis\r\n\r\nCheck out a full list of emojis [here](http://www.emoji-cheat-sheet.com/).\r\n\r\n```\r\n:smile: :+1: :sheep:\r\n```\r\nRenders as:\r\n:smile: :+1: :sheep:\r\n\r\n#### Lines:\r\n\r\nCreate a line by using three `*`, `_`, or `-`.\r\n\r\n`***` renders as: \r\n***\r\n\r\n#### Block quotes:\r\n\r\nCreate block quotes using `&gt;`.\r\n`&gt; block quotes` renders as:\r\n&gt; block quotes\r\n\r\n#### Lists: \r\n\r\nCreate a list by using `*` or `-` as bullets. Indent a bullet point by adding two spaces in front of it.\r\n```\r\n* list item one\r\n* list item two\r\n * item two sub-point\r\n```\r\nRenders as: \r\n* list item one\r\n* list item two\r\n * item two sub-point\r\n\r\nMake it an ordered list by using numbers instead:\r\n```\r\n1. Item one\r\n2. Item two\r\n```\r\nRenders as: \r\n1. Item one\r\n2. Item two\r\n\r\n#### Tables: \r\n\r\nCreate a table by placing a dashed line under the header row and separating the columns with a pipe `|`. (The columns don’t need to line up exactly for it to work). Choose how to align table columns by including colons `:` within the header row.\r\n```\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| Left column 1 | this text       |  $100 |\r\n| Left column 2 | is              |   $10 |\r\n| Left column 3 | centered        |    $1 |\r\n```\r\n\r\nRenders as:\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| Left column 1 | this text       |  $100 |\r\n| Left column 2 | is              |   $10 |\r\n| Left column 3 | centered        |    $1 |\r\n\r\n#### Headings: \r\n\r\nMake a heading by typing # and a space before your title. For smaller headings, use more #’s. \r\n```\r\n# Large heading\r\n## Smaller heading\r\n### Even smaller heading\r\n```\r\nRenders as: \r\n# Large Heading\r\n## Smaller Heading\r\n### Even smaller heading\r\n\r\nAlternatively, for the large heading you can underline the text using `===`. For the smaller heading you can underline using `---`\r\n```\r\nLarge Heading\r\n=============\r\n\r\nSmaller Heading\r\n--------------\r\n```\r\nRenders as:\r\nLarge Heading\r\n=============\r\n\r\nSmaller Heading\r\n--------------</pre>\n\n<p>There’s still work to be done to complete the full GitLab Flavored Markdown specification. Some of it is formatting, like adding syntax highlighting code from various programming languages, and some elements like <a href=\"https://github.com/gitlabhq/gitlabhq/blob/master/doc/markdown/markdown.md#special-gitlab-references\">GitLab Special References</a> require deeper API integration between GitLab and Mattermost, and that’s planned as well.</p>\n<p>Like what you see? <a href=\"https://github.com/mattermost/platform\">Star us on GitHub!</a></p>\n<p>Thanks for your interest in Mattermost and what we’re building. We look forward to your ideas, comments, and questions. You can reach us in many ways at: <a href=\"http://mattermost.org\">http://mattermost.org</a>.</p>\n<p>Markdown support is on <a href=\"https://github.com/mattermost/platform\">master</a> and ships with Mattermost v0.8.0 on October 2, and GitLab Mattermost on October 22. Please join our mailing list below to be notified of important updates.</p>\n\n\n\n\n	',1),(100,'Dask â€” dask 0.7.1 documentation','http://dask.pydata.org/en/latest/',0,0,'\n\n<p><strong>Dask enables parallel computing</strong> through task scheduling and blocked algorithms.\nThis allows developers to write complex parallel algorithms and execute them\nin parallel either on a modern multi-core machine or on a distributed cluster.</p>\n<p>On a single machine dask increases the scale of comfortable data from\n<em>fits-in-memory</em> to <em>fits-on-disk</em> by intelligently streaming data from disk\nand by leveraging all the cores of a modern CPU.</p>\n<p>Users interact with dask either by making graphs directly or through the <em>dask\ncollections</em> which provide larger-than-memory counterparts to existing popular\nlibraries:</p>\n<ul class=\"simple\"><li><code class=\"docutils literal\"><span class=\"pre\">dask.array</span></code> = <code class=\"docutils literal\"><span class=\"pre\">numpy</span></code> + <code class=\"docutils literal\"><span class=\"pre\">threading</span></code></li>\n<li><code class=\"docutils literal\"><span class=\"pre\">dask.bag</span></code> = <code class=\"docutils literal\"><span class=\"pre\">map,</span> <span class=\"pre\">filter,</span> <span class=\"pre\">toolz</span></code> + <code class=\"docutils literal\"><span class=\"pre\">multiprocessing</span></code></li>\n<li><code class=\"docutils literal\"><span class=\"pre\">dask.dataframe</span></code> = <code class=\"docutils literal\"><span class=\"pre\">pandas</span></code> + <code class=\"docutils literal\"><span class=\"pre\">threading</span></code></li>\n</ul><p>Dask primarily targets parallel computations that run on a single machine.  It\nintegrates nicely with the existing PyData ecosystem and is trivial to setup\nand use:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre>conda install dask\nor\npip install dask\n</pre></div>\n</div>\n<p>Operations on dask collections (array, bag, dataframe) produce task graphs that\nencode blocked algorithms.  Task schedulers execute these task graphs in\nparallel in a variety of contexts.</p>\n<a class=\"reference internal image-reference\" href=\"http://dask.pydata.org/en/latest/_images/collections-schedulers.png\"><img alt=\"Dask collections and schedulers\" class=\"align-center\" src=\"http://dask.pydata.org/en/latest/_images/collections-schedulers.png\" /></a>\n<p><strong>Collections:</strong></p>\n<p>Dask collections are the main interaction point for users.  They look like\nNumPy and pandas but generate dask graphs internally.  If you are a dask <em>user</em>\nthen you should start here.</p>\n\n<p><strong>Graphs:</strong></p>\n<p>Dask graphs encode algorithms in a simple format involving Python dicts,\ntuples, and functions.  This graph format can be used in isolation from the\ndask collections.  If you are a <em>developer</em> then you should start here.</p>\n\n<p><strong>Scheduling:</strong></p>\n<p>Schedulers execute task graphs.  After a collection produces a graph we execute\nthis graph in parallel, either using all of the cores on a single workstation\nor using a distributed cluster.</p>\n\n<p><strong>Inspecting and Diagnosing Graphs</strong></p>\n<p>Parallel code can be tricky to debug and profile. Dask provides a few tools to\nhelp make debugging and profiling graph execution easier.</p>\n\n<p><strong>Other</strong></p>\n\n<p><strong>Contact</strong></p>\n<p>Dask is part of the <a class=\"reference external\" href=\"http://continuum.io/open-source/blaze\">Blaze</a> project supported by <a class=\"reference external\" href=\"http://continuum.io\">Continuum Analytics</a></p>\n',1),(101,'yoannmoinet/nipplejs','https://github.com/yoannmoinet/nipplejs',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://github.com/yoannmoinet/nipplejs/blob/master/test/nipplejs.png\"><img src=\"https://github.com/yoannmoinet/nipplejs/raw/master/test/nipplejs.png\" alt=\"alt tag\" /></a></p>\n\n<blockquote>\n<p>A virtual joystick for touch capable interfaces</p>\n</blockquote>\n\n<h2><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#install\"><span class=\"octicon octicon-link\"></span></a>Install</h2>\n\n<div class=\"highlight highlight-source-shell\"><pre>npm install nipplejs --save\n\n// OR\n\nbower install nipplejs --save</pre></div>\n\n<hr /><h2><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#demo\"><span class=\"octicon octicon-link\"></span></a>Demo</h2>\n\n<p>Check out the <a href=\"http://yoannmoinet.github.io/nipplejs/#demo\">demo here</a>.</p>\n\n<hr /><h2><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>Import it the way you want into your project :</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// CommonJS</span>\n<span class=\"pl-k\">var</span> manager <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>nipplejs<span class=\"pl-pds\">\'</span></span>).create(options);</pre></div>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// AMD</span>\ndefine([<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>nipplejs<span class=\"pl-pds\">\'</span></span>], <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">nipplejs</span>) {\n    <span class=\"pl-k\">var</span> manager <span class=\"pl-k\">=</span> nipplejs.create(options);\n});</pre></div>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>// Global\n&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/javascript<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./dist/nipplejs.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;\n<span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/javascript<span class=\"pl-pds\">\"</span></span>&gt;</span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">var</span> manager <span class=\"pl-k\">=</span> nipplejs.create(options);</span>\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n\n<hr /><h2><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#options\"><span class=\"octicon octicon-link\"></span></a>Options</h2>\n\n<p>You can configure your joystick in different ways :</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> options <span class=\"pl-k\">=</span> {\n    zone<span class=\"pl-k\">:</span> Element,      <span class=\"pl-c\">// active zone</span>\n    color<span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span>,\n    size<span class=\"pl-k\">:</span> Integer,\n    threshold<span class=\"pl-k\">:</span> Float,   <span class=\"pl-c\">// before triggering a directional event</span>\n    fadeTime<span class=\"pl-k\">:</span> Integer,\n    multitouch<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Boolean</span>,\n    maxNumberOfNipples<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>\n};</pre></div>\n\n<p>All options are optional.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#optionszone-defaults-to-body\"><span class=\"octicon octicon-link\"></span></a><code>options.zone</code> defaults to \'body\'</h3>\n\n<p>The dom element in which all your joysticks will be injected.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zone_joystick<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n\n&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/javascript<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./nipplejs.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;\n<span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/javascript<span class=\"pl-pds\">\"</span></span>&gt;</span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">var</span> options <span class=\"pl-k\">=</span> {</span>\n<span class=\"pl-s1\">        zone<span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>zone_joystick<span class=\"pl-pds\">\'</span></span>);</span>\n<span class=\"pl-s1\">    };</span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">var</span> manager <span class=\"pl-k\">=</span> nipplejs.create(options);</span>\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n\n<p>This zone also serve as the mouse/touch events handler.</p>\n\n<p>It represents the zone where all your joysticks will be active.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#optionscolor-defaults-to-white\"><span class=\"octicon octicon-link\"></span></a><code>options.color</code> defaults to \'white\'</h3>\n\n<p>The background color of your joystick\'s elements.</p>\n\n<p>Can be any valid CSS color.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#optionssize-defaults-to-100\"><span class=\"octicon octicon-link\"></span></a><code>options.size</code> defaults to 100</h3>\n\n<p>The size in pixel of the outer circle.</p>\n\n<p>The inner circle is 50% of this size.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#optionsthreshold-defaults-to-01\"><span class=\"octicon octicon-link\"></span></a><code>options.threshold</code> defaults to 0.1</h3>\n\n<p>This is the strength needed to trigger a directional event.</p>\n\n<p>Basically, the center is 0 and the outer is 1.</p>\n\n<p>You need to at least go to 0.1 to trigger a directional event.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#optionsfadetime-defaults-to-250\"><span class=\"octicon octicon-link\"></span></a><code>options.fadeTime</code> defaults to 250</h3>\n\n<p>The time it takes for joystick to fade-out and fade-in when activated or de-activated.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#optionsmultitouch-defaults-to-false\"><span class=\"octicon octicon-link\"></span></a><code>options.multitouch</code> defaults to false</h3>\n\n<p>Enable the multitouch capabilities.</p>\n\n<p>If, for reasons, you need to have multiple nipples into the same zone.</p>\n\n<p>Otherwise it will only get one, and all new touches won\'t do a thing.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#optionsmaxnumberofnipples-defaults-to-1\"><span class=\"octicon octicon-link\"></span></a><code>options.maxNumberOfNipples</code> defaults to 1</h3>\n\n<p>If you need to, you can also control the maximum number of instance that could be created.</p>\n\n<p>Obviously in a multitouch configuration.</p>\n\n<hr /><h2><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#api\"><span class=\"octicon octicon-link\"></span></a>API</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#nipplejs-instance-manager\"><span class=\"octicon octicon-link\"></span></a>NippleJS instance (manager)</h3>\n\n<p>Your manager has the following signature :</p>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n    on<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>,\n    off<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>,\n    get<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>, <span class=\"pl-c\">// get a specific joystick</span>\n    options<span class=\"pl-k\">:</span> {\n        zone<span class=\"pl-k\">:</span> Element,\n        multitouch<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Boolean</span>,\n        maxNumberOfNipples<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>\n    }\n}</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#managerontype-handler\"><span class=\"octicon octicon-link\"></span></a><code>manager.on(type, handler)</code></h4>\n\n<p>If you whish to listen to internal events like :</p>\n\n<div class=\"highlight highlight-source-js\"><pre>manager.on(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>event#1 event#2<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">evt</span>, <span class=\"pl-smi\">data</span>) {\n    <span class=\"pl-c\">// Do something.</span>\n});</pre></div>\n\n<p>Note that you can listen to multiple events at once by separating\nthem either with a space or a comma (or both, I don\'t care).</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#managerofftype--handler\"><span class=\"octicon octicon-link\"></span></a><code>manager.off(type [, handler])</code></h4>\n\n<p>To remove an event handler :</p>\n\n<div class=\"highlight highlight-source-js\"><pre>manager.off(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>event<span class=\"pl-pds\">\'</span></span>, handler);</pre></div>\n\n<p>If you don\'t specify the handler, all handlers for that type will be removed.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#managergetidentifier\"><span class=\"octicon octicon-link\"></span></a><code>manager.get(identifier)</code></h4>\n\n<p>An helper to get an instance via its identifier.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Will return the nipple instanciated by the touch identified by 0</span>\nmanager.get(<span class=\"pl-c1\">0</span>);</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#nipple-instance-joystick\"><span class=\"octicon octicon-link\"></span></a>nipple instance (joystick)</h3>\n\n<p>Each joystick has the following signature :</p>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n    on<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>,\n    off<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>,\n    el<span class=\"pl-k\">:</span> Element,\n    show<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>,         <span class=\"pl-c\">// fade-in</span>\n    hide<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>,         <span class=\"pl-c\">// fade-out</span>\n    add<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>,          <span class=\"pl-c\">// inject into dom</span>\n    remove<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>,       <span class=\"pl-c\">// remove from dom</span>\n    identifier<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>,\n    trigger<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span>,\n    position<span class=\"pl-k\">:</span> {             <span class=\"pl-c\">// position of the center</span>\n        x<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>,\n        y<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>\n    },\n    backPosition<span class=\"pl-k\">:</span> {         <span class=\"pl-c\">// position of the back part</span>\n        x<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>,\n        y<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>\n    },\n    frontPosition<span class=\"pl-k\">:</span> {        <span class=\"pl-c\">// position of the front part</span>\n        x<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>,\n        y<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>\n    },\n    ui<span class=\"pl-k\">:</span> {\n        el<span class=\"pl-k\">:</span> Element,\n        front<span class=\"pl-k\">:</span> Element,\n        back<span class=\"pl-k\">:</span> Element\n    },\n    options<span class=\"pl-k\">:</span> {\n        color<span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span>,\n        size<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>,\n        threshold<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>,\n        fadeTime<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>\n    }\n}</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickon-joystickoff\"><span class=\"octicon octicon-link\"></span></a><code>joystick.on</code>, <code>joystick.off</code></h3>\n\n<p>The same as the manager.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickel\"><span class=\"octicon octicon-link\"></span></a><code>joystick.el</code></h3>\n\n<p>Dom element in which the joystick gets created.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nipple<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>front<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>back<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickshowcb\"><span class=\"octicon octicon-link\"></span></a><code>joystick.show([cb])</code></h3>\n\n<p>Will show the joystick at the last known place.</p>\n\n<p>You can pass a callback that will be executed at the end of the fade-in animation.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickhidecb\"><span class=\"octicon octicon-link\"></span></a><code>joystick.hide([cb])</code></h3>\n\n<p>Will fade-out the joystick.</p>\n\n<p>You can pass a callback that will be executed at the end of the fade-out animation.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickadd\"><span class=\"octicon octicon-link\"></span></a><code>joystick.add()</code></h3>\n\n<p>Add the joystick\'s element to the dom.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickremove\"><span class=\"octicon octicon-link\"></span></a><code>joystick.remove()</code></h3>\n\n<p>Remove the joystick\'s element from the dom.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickidentifier\"><span class=\"octicon octicon-link\"></span></a><code>joystick.identifier</code></h3>\n\n<p>Returns the unique identifier of the joystick.</p>\n\n<p>Tied to its touch\'s identifier.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joysticktriggertype--data\"><span class=\"octicon octicon-link\"></span></a><code>joystick.trigger(type [, data])</code></h3>\n\n<p>Trigger an internal event from the joystick.</p>\n\n<p>The same as <code>on</code> you can trigger multiple events at the same time.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickposition\"><span class=\"octicon octicon-link\"></span></a><code>joystick.position</code></h3>\n\n<p>The absolute position of the center of the joystick.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickfrontposition\"><span class=\"octicon octicon-link\"></span></a><code>joystick.frontPosition</code></h3>\n\n<p>The absolute position of the back part of the joystick\'s ui.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickbackposition\"><span class=\"octicon octicon-link\"></span></a><code>joystick.backPosition</code></h3>\n\n<p>The absolute position of the front part of the joystick\'s ui.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#joystickui\"><span class=\"octicon octicon-link\"></span></a><code>joystick.ui</code></h3>\n\n<p>The object that store its ui elements</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>{\n    el: &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nipple<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n    back: &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>back<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n    front: &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>front<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n}</pre></div>\n\n<hr /><h2><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#events\"><span class=\"octicon octicon-link\"></span></a>Events</h2>\n\n<p>You can listen events both on the manager and all the joysticks.</p>\n\n<p>But some of them are specific to its instance.</p>\n\n<p>If you need to listen to each joystick, for example, you can :</p>\n\n<div class=\"highlight highlight-source-js\"><pre>manager.on(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>added<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">evt</span>, <span class=\"pl-smi\">nipple</span>) {\n    nipple.on(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>start move end dir plain<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">evt</span>) {\n        <span class=\"pl-c\">// DO EVERYTHING</span>\n    });\n}).on(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>removed<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">evt</span>, <span class=\"pl-smi\">nipple</span>) {\n    nipple.off(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>start move end dir plain<span class=\"pl-pds\">\'</span></span>);\n});</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#manager-only\"><span class=\"octicon octicon-link\"></span></a>manager only</h3>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#added\"><span class=\"octicon octicon-link\"></span></a><code>added</code></h4>\n\n<p>A joystick just got added.</p>\n\n<p>Will pass the instance alongside the event.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#removed\"><span class=\"octicon octicon-link\"></span></a><code>removed</code></h4>\n\n<p>A joystick just got removed.</p>\n\n<p>Fired at the end of the fade-out animation.</p>\n\n<p>Will pass the instance alongside the event.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#manager-and-joysticks\"><span class=\"octicon octicon-link\"></span></a>manager and joysticks</h3>\n\n<p>Other events are available on both the manager and joysticks.</p>\n\n<p>When listening on the manager,\nyou can also target <strong>a joystick in particular</strong> by prefixing\nthe event with its identifier, <strong><code>0:start</code></strong> for example.</p>\n\n<p>Else you\'ll get all events from all the joysticks.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#start\"><span class=\"octicon octicon-link\"></span></a><code>start</code></h4>\n\n<p>A joystick is activated. (the user pressed on the active zone)</p>\n\n<p>Will pass the instance alongside the event.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#end\"><span class=\"octicon octicon-link\"></span></a><code>end</code></h4>\n\n<p>A joystick is de-activated. (the user released the active zone)</p>\n\n<p>Will pass the instance alongside the event.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#move\"><span class=\"octicon octicon-link\"></span></a><code>move</code></h4>\n\n<p>A joystick is moved.</p>\n\n<p>Comes with data :</p>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n    identifier<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,              <span class=\"pl-c\">// the identifier of the touch/mouse that triggered it</span>\n    position<span class=\"pl-k\">:</span> {                 <span class=\"pl-c\">// absolute position of the center in pixels</span>\n        x<span class=\"pl-k\">:</span> <span class=\"pl-c1\">125</span>,\n        y<span class=\"pl-k\">:</span> <span class=\"pl-c1\">95</span>\n    },\n    force<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0.2</span>,                 <span class=\"pl-c\">// strength in %</span>\n    distance<span class=\"pl-k\">:</span> <span class=\"pl-c1\">25.4</span>,             <span class=\"pl-c\">// distance from center in pixels</span>\n    pressure<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0.1</span>,              <span class=\"pl-c\">// the pressure applied by the touch</span>\n    angle<span class=\"pl-k\">:</span> {\n        radian<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1.5707963268</span>,   <span class=\"pl-c\">// angle in radian</span>\n        degree<span class=\"pl-k\">:</span> <span class=\"pl-c1\">90</span>\n    },\n    instance<span class=\"pl-k\">:</span> Nipple            <span class=\"pl-c\">// the nipple instance that triggered the event</span>\n}</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#dir\"><span class=\"octicon octicon-link\"></span></a><code>dir</code></h4>\n\n<p>When a direction is reached after the threshold.</p>\n\n<p>Direction are split with a 45° angle.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">//     \\  UP /</span>\n<span class=\"pl-c\">//      \\   /</span>\n<span class=\"pl-c\">// LEFT       RIGHT</span>\n<span class=\"pl-c\">//      /   \\</span>\n<span class=\"pl-c\">//     /DOWN \\</span></pre></div>\n\n<p>You can also listen to specific direction like :</p>\n\n<ul><li><code>dir:up</code></li>\n<li><code>dir:down</code></li>\n<li><code>dir:right</code></li>\n<li><code>dir:left</code></li>\n</ul><p>In this configuration only one direction is triggered at a time.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#plain\"><span class=\"octicon octicon-link\"></span></a><code>plain</code></h4>\n\n<p>When a plain direction is reached after the threshold.</p>\n\n<p>Plain directions are split with a 90° angle.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">//       UP               |</span>\n<span class=\"pl-c\">//     ------        LEFT | RIGHT</span>\n<span class=\"pl-c\">//      DOWN              |</span></pre></div>\n\n<p>You can also listen to specific plain direction like :</p>\n\n<ul><li><code>plain:up</code></li>\n<li><code>plain:down</code></li>\n<li><code>plain:right</code></li>\n<li><code>plain:left</code></li>\n</ul><p>In this configuration two directions can be triggered at a time,\nbecause the user could be both <code>up</code> and <code>left</code> for example.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#shown\"><span class=\"octicon octicon-link\"></span></a><code>shown</code></h4>\n\n<p>Is triggered at the end of the fade-in animation.</p>\n\n<p>Will pass the instance alongside the event.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#hidden\"><span class=\"octicon octicon-link\"></span></a><code>hidden</code></h4>\n\n<p>Is triggered at the end of the fade-out animation.</p>\n\n<p>Will pass the instance alongside the event.</p>\n\n<hr /><h2><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>Your help is more than welcome, I would be very honored to have you on my side.</p>\n\n<p>Here are some very basic guidelines.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#commits\"><span class=\"octicon octicon-link\"></span></a>Commits</h4>\n\n<p>Please follow these <a href=\"https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit\">guidelines</a> so your commits will be taken by the self-generated changelog.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#style\"><span class=\"octicon octicon-link\"></span></a>Style</h4>\n\n<p>There are both <a href=\"http://jscs.info/\">JSCS</a> and <a href=\"http://eslint.org/\">ESLint</a> in the project.</p>\n\n<p>To test your code against them simply run <code>npm run prebuild</code>.</p>\n\n<p>We follow a <strong>4 spaces</strong> rule around here.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#workflow\"><span class=\"octicon octicon-link\"></span></a>Workflow</h4>\n\n<p>You can use the available scripts if needed.</p>\n\n<ul><li><code>npm run watch</code> will run the build each time a change is detected.</li>\n<li><code>npm run prebuild</code> will test the formatting and the linting of your code.</li>\n</ul><h4><a class=\"anchor\" href=\"https://github.com/yoannmoinet/nipplejs#build\"><span class=\"octicon octicon-link\"></span></a>Build</h4>\n\n<p>Once you\'re satisfied with your changes, you can also include a build.</p>\n\n<ol><li><code>npm run build</code> to generate built files.</li>\n<li>commit your build with the message <code>chore: new build</code>.</li>\n<li><code>npm version patch|minor|major</code> depending on your change. Changelog will be generated and bower\'s version synced and everything is automatically committed (not pushed though).</li>\n</ol>',1),(102,'tgriesser/bookshelf','https://github.com/tgriesser/bookshelf',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Bookshelf is a JavaScript ORM for Node.js, built on the <a href=\"http://knexjs.org\">Knex</a> SQL query builder. Featuring both promise based and traditional callback interfaces, it follows the Model &amp; Collection patterns seen in <a href=\"http://backbonejs.com\">Backbone.js</a>, providing transaction support, eager/nested-eager relation loading, polymorphic associations, and support for one-to-one, one-to-many, and many-to-many relations.</p>\n\n<p>It is designed to work well with PostgreSQL, MySQL, and SQLite3.</p>\n\n<p>The project is <a href=\"http://github.com/tgriesser/bookshelf/\">hosted on GitHub</a>, and has a comprehensive <a href=\"https://travis-ci.org/tgriesser/bookshelf\">test suite</a>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#introduction\"><span class=\"octicon octicon-link\"></span></a>Introduction</h2>\n\n<p>Bookshelf aims to provide a simple library for common tasks when querying databases in JavaScript, and forming relations between these objects, taking a lot of ideas from the the <a href=\"http://en.wikipedia.org/wiki/Data_mapper_pattern\">Data Mapper Pattern</a>. With a concise, literate codebase, Bookshelf is simple to read, understand, and extend. It doesn\'t force you to use any specific validation scheme, provides flexible and efficient relation/nested-relation loading, and first class transaction support. It\'s a lean Object Relational Mapper, allowing you to drop down to the raw knex interface whenever you need a custom query that doesn\'t quite fit with the stock conventions.</p>\n\n<p>Bookshelf follows the excellent foundation provided by Backbone.js Models and Collections, using similar patterns, naming conventions, and philosophies to build a lightweight, easy to navigate ORM. If you know how to use Backbone, you probably already know how to use Bookshelf.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<p>You\'ll need to install a copy of <a href=\"http://knexjs.org/\">knex.js</a>, and either mysql, pg, or sqlite3 from npm.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>$ npm install knex <span class=\"pl-k\">--</span>save\n$ npm install bookshelf <span class=\"pl-k\">--</span>save\n\n# Then add one <span class=\"pl-k\">of</span> the following<span class=\"pl-k\">:</span>\n$ npm install pg\n$ npm install mysql\n$ npm install mariasql\n$ npm install sqlite3</pre></div>\n\n<p>The Bookshelf library is initialized by passing an initialized <a href=\"http://knexjs.org/\">Knex</a> client instance. The <a href=\"http://knexjs.org/\">knex documentation</a> provides a number of examples for different databases.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> knex <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>knex<span class=\"pl-pds\">\'</span></span>)({\n  client<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>mysql<span class=\"pl-pds\">\'</span></span>,\n  connection<span class=\"pl-k\">:</span> {\n    host     <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>127.0.0.1<span class=\"pl-pds\">\'</span></span>,\n    user     <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>your_database_user<span class=\"pl-pds\">\'</span></span>,\n    password <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>your_database_password<span class=\"pl-pds\">\'</span></span>,\n    database <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>myapp_test<span class=\"pl-pds\">\'</span></span>,\n    charset  <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>utf8<span class=\"pl-pds\">\'</span></span>\n  }\n});\n\n<span class=\"pl-k\">var</span> bookshelf <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>bookshelf<span class=\"pl-pds\">\'</span></span>)(knex);\n\n<span class=\"pl-k\">var</span> User <span class=\"pl-k\">=</span> bookshelf.Model.extend({\n  tableName<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>users<span class=\"pl-pds\">\'</span></span>\n});</pre></div>\n\n<p>This initialization should likely only ever happen once in your application. As it creates a connection pool for the current database, you should use the <code>bookshelf</code> instance returned throughout your library. You\'ll need to store this instance created by the initialize somewhere in the application so you can reference it. A common pattern to follow is to initialize the client in a module so you can easily reference it later:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// In a file named something like bookshelf.js</span>\n<span class=\"pl-k\">var</span> knex <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>knex<span class=\"pl-pds\">\'</span></span>)(dbConfig);\n<span class=\"pl-c1\">module</span>.exports <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>bookshelf<span class=\"pl-pds\">\'</span></span>)(knex);\n\n<span class=\"pl-c\">// elsewhere, to use the bookshelf client:</span>\n<span class=\"pl-k\">var</span> bookshelf <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>./bookshelf<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> Post <span class=\"pl-k\">=</span> bookshelf.Model.extend({\n  <span class=\"pl-c\">// ...</span>\n});</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#examples\"><span class=\"octicon octicon-link\"></span></a>Examples</h2>\n\n<p>Here is an example to get you started:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> knex <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>knex<span class=\"pl-pds\">\'</span></span>)({client<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>mysql<span class=\"pl-pds\">\'</span></span>, connection<span class=\"pl-k\">:</span> <span class=\"pl-c1\">process</span>.env.MYSQL_DATABASE_CONNECTION });\n<span class=\"pl-k\">var</span> bookshelf <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>bookshelf<span class=\"pl-pds\">\'</span></span>)(knex);\n\n<span class=\"pl-k\">var</span> User <span class=\"pl-k\">=</span> bookshelf.Model.extend({\n  tableName<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>users<span class=\"pl-pds\">\'</span></span>,\n  <span class=\"pl-en\">messages</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">this</span>.hasMany(Posts);\n  }\n});\n\n<span class=\"pl-k\">var</span> Posts <span class=\"pl-k\">=</span> bookshelf.Model.extend({\n  tableName<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>messages<span class=\"pl-pds\">\'</span></span>,\n  <span class=\"pl-en\">tags</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">this</span>.belongsToMany(Tag);\n  }\n});\n\n<span class=\"pl-k\">var</span> Tag <span class=\"pl-k\">=</span> bookshelf.Model.extend({\n  tableName<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>tags<span class=\"pl-pds\">\'</span></span>\n})\n\nUser.where(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-c1\">1</span>).fetch({withRelated<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>posts.tags<span class=\"pl-pds\">\'</span></span>]}).then(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">user</span>) {\n\n  <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(user.related(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>posts<span class=\"pl-pds\">\'</span></span>).toJSON());\n\n}).catch(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">err</span>) {\n\n  <span class=\"pl-en\">console</span><span class=\"pl-c1\">.error</span>(err);\n\n});</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#plugins\"><span class=\"octicon octicon-link\"></span></a>Plugins</h2>\n\n<ul><li><a href=\"https://github.com/tgriesser/bookshelf/wiki/Plugin:-Model-Registry\">Registry</a>: Register models in a central location so that you can refer to them using a string in relations instead of having to require it every time. Helps deal with the challenges of circular module dependencies in Node.</li>\n<li><a href=\"https://github.com/tgriesser/bookshelf/wiki/Plugin:-Virtuals\">Virtuals</a>: Define virtual properties on your model to compute new values.</li>\n<li><a href=\"https://github.com/tgriesser/bookshelf/wiki/Plugin:-Visibility\">Visibility</a>: Specify a whitelist/blacklist of model attributes when serialized toJSON.</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#support\"><span class=\"octicon octicon-link\"></span></a>Support</h2>\n\n<p>Have questions about the library? Come join us in the <a href=\"http://webchat.freenode.net/?channels=bookshelf\">#bookshelf freenode IRC channel</a> for support on <a href=\"http://knexjs.org/\">knex.js</a> and bookshelf.js, or post an issue on <a href=\"http://stackoverflow.com/questions/tagged/bookshelf.js\">Stack Overflow</a> or in the GitHub <a href=\"https://github.com/tgriesser/bookshelf/issues\">issue tracker</a>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#faq\"><span class=\"octicon octicon-link\"></span></a>F.A.Q.</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#can-i-use-standard-nodejs-style-callbacks\"><span class=\"octicon octicon-link\"></span></a>Can I use standard node.js style callbacks?</h3>\n\n<p>Yes - you can call <code>.asCallback(function(err, resp) {</code> on any \"sync\" method and use the standard <code>(err, result)</code> style callback interface if you prefer.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#my-relations-dont-seem-to-be-loading-whats-up\"><span class=\"octicon octicon-link\"></span></a>My relations don\'t seem to be loading, what\'s up?</h3>\n\n<p>Make sure you check that the type is correct for the initial parameters passed to the initial model being fetched. For example <code>new Model({id: \'1\'}).load([relations...])</code> will not return the same as <code>Model({id: 1}).load([relations...])</code> - notice that the id is a string in one case and a number in the other. This can be a common mistake if retrieving the id from a url parameter.</p>\n\n<p>This is only an issue if you\'re eager loading data with load without first fetching the original model. <code>Model({id: \'1\'}).fetch({withRelated: [relations...]})</code> should work just fine.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#my-process-wont-exit-after-my-script-is-finished-why\"><span class=\"octicon octicon-link\"></span></a>My process won\'t exit after my script is finished, why?</h3>\n\n<p>The issue here is that Knex, the database abstraction layer used by Bookshelf, uses connection pooling and thus keeps the database connection open. If you want your process to exit after your script has finished, you will have to call <code>.destroy(cb)</code> on the <code>knex</code> property of your <code>Bookshelf</code> instance or on the <code>Knex</code> instance passed during initialization. More information about connection pooling can be found over at the <a href=\"http://knexjs.org/#Installation-pooling\">Knex docs</a>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#how-do-i-debug\"><span class=\"octicon octicon-link\"></span></a>How do I debug?</h3>\n\n<p>If you pass <code>{debug: true}</code> as one of the options in your initialize settings, you can see all of the query calls being made. Sometimes you need to dive a bit further into the various calls and see what all is going on behind the scenes. I\'d recommend <a href=\"https://github.com/dannycoates/node-inspector\">node-inspector</a>, which allows you to debug code with <code>debugger</code> statements like you would in the browser.</p>\n\n<p>Bookshelf uses its own copy of the \"bluebird\" promise library, you can read up here for more on debugging these promises... but in short, adding:</p>\n\n<pre><code>process.stderr.on(\'data\', function(data) {\n  console.log(data);\n});\n</code></pre>\n\n<p>At the start of your application code will catch any errors not otherwise caught in the normal promise chain handlers, which is very helpful in debugging.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#how-do-i-run-the-test-suite\"><span class=\"octicon octicon-link\"></span></a>How do I run the test suite?</h3>\n\n<p>The test suite looks for an environment variable called <code>BOOKSHELF_TEST</code> for the path to the database configuration. If you run the following command: <code>$ export BOOKSHELF_TEST=\'/path/to/your/bookshelf_config.js\'</code>, replacing with the path to your config file, and the config file is valid, the test suite should run with npm test.</p>\n\n<p>Also note that you will have to create the appropriate database(s) for the test suite to run. For example, with MySQL, you\'ll need to run the command <code>create database bookshelf_test;</code> in addition to exporting the correct test settings prior to running the test suite.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/tgriesser/bookshelf#can-i-use-bookshelf-outside-of-nodejs\"><span class=\"octicon octicon-link\"></span></a>Can I use Bookshelf outside of Node.js?</h3>\n\n<p>While it primarily targets Node.js, all dependencies are browser compatible, and it could be adapted to work with other javascript environments supporting a sqlite3 database, by providing a custom <a href=\"http://knexjs.org/#Adapters\">Knex adapter</a>.</p>\n',1),(103,'Sortable. No jQuery.','http://rubaxa.github.io/Sortable/',0,0,'\n			<div><p>Code example</p></div>\n			<pre class=\"layer javascript\"><code>// Simple list\nvar list = document.getElementById(\"my-ui-list\");\nSortable.create(list); // That\'s all.\n\n\n// Grouping\nvar foo = document.getElementById(\"foo\");\nSortable.create(foo, { group: \"omega\" });\n\nvar bar = document.getElementById(\"bar\");\nSortable.create(bar, { group: \"omega\" });\n\n\n// Or\nvar container = document.getElementById(\"multi\");\nvar sort = Sortable.create(container, {\n  animation: 150, // ms, animation speed moving items when sorting, `0` — without animation\n  handle: \".tile__title\", // Restricts sort start click/touch to the specified element\n  draggable: \".tile\", // Specifies which items inside the element should be sortable\n  onUpdate: function (evt/**Event*/){\n     var item = evt.item; // the current dragged HTMLElement\n  }\n});\n\n// ..\nsort.destroy();\n\n\n// Editable list\nvar editableList = Sortable.create(editable, {\n  filter: \'.js-remove\',\n  onFilter: function (evt) {\n    var el = editableList.closest(evt.item); // get dragged item\n    el &amp;&amp; el.parentNode.removeChild(el);\n  }\n});\n</code></pre>\n		',1),(104,'Building Web Apps with Go','https://codegangsta.gitbooks.io/building-web-apps-with-go/content/index.html',1,0,'\n                \n                \n                    <p>Welcome to <strong>Building Web Apps with Go</strong>! If you are reading this then you have just started your journey from noob to pro. No seriously, web programming in Go is so fun and easy that you won\'t even notice how much information you are learning along the way!</p>\n<p>Keep in mind that there are still portions of this book that are incomplete and need some love. The beauty of open source publishing is that I can give you an incomplete book and it is still of value to you.</p>\n<p>Before we get into all the nitty gritty details, let\'s start with some ground rules:</p>\n<h2>Prerequisites</h2>\n<p>To keep this tutorial small and focused, I\'m assuming that you are prepared in the following ways:</p>\n<ol><li>You have installed the <a href=\"https://golang.org\">Go Programming Language</a>.</li>\n<li>You have setup a <code>GOPATH</code> by following the <a href=\"https://golang.org/doc/code.html#Organization\">How to Write Go Code</a> tutorial.</li>\n<li>You are somewhat familiar with the basics of Go. (The <a href=\"http://tour.golang.org\">Go Tour</a> is a pretty good place to start)</li>\n<li>You have installed all the <a href=\"https://codegangsta.gitbooks.io/building-web-apps-with-go/content/index.html#required-packages\">required packages</a></li>\n<li>You have installed the <a href=\"https://toolbelt.heroku.com/\">Heroku Toolbelt</a></li>\n<li>You have a <a href=\"https://id.heroku.com/signup\">Heroku</a> account</li>\n</ol><h2>Required Packages</h2>\n<p>For the most part we will be using the built in packages from the standard library to build out our web apps. Certain lessons such as Databases, Middleware and URL Routing will require a third party package. Here is a list of all the go packages you will need to install before starting:</p>\n<table><thead><tr><th>Name</th>\n<th>Import Path</th>\n<th>Description</th>\n</tr></thead><tbody><tr><td><a href=\"https://github.com/julienschmidt/httprouter\">httprouter</a></td>\n<td>github.com/julienschmidt/httprouter</td>\n<td>A high performance HTTP request router that scales well</td>\n</tr><tr><td><a href=\"https://github.com/codegangsta/negroni\">Negroni</a></td>\n<td>github.com/codegangsta/negroni</td>\n<td>Idiomatic HTTP Middleware</td>\n</tr><tr><td><a href=\"https://github.com/russross/blackfriday\">Black Friday</a></td>\n<td>github.com/russross/blackfriday</td>\n<td>a markdown processor</td>\n</tr><tr><td><a href=\"https://github.com/unrolled/render/tree/v1\">Render</a></td>\n<td>gopkg.in/unrolled/render.v1</td>\n<td>Easy rendering for JSON, XML, and HTML</td>\n</tr><tr><td><a href=\"https://github.com/mattn/go-sqlite3\">SQLite3</a></td>\n<td>github.com/mattn/go-sqlite3</td>\n<td>sqlite3 driver for go</td>\n</tr></tbody></table><p>You can install (or update) these packages by running the following command in your console</p>\n<pre><code class=\"lang-bash\">go get -u &lt;import_path&gt;\n</code></pre>\n<p>For instance, if you wish to install Negroni, the following command would be:</p>\n<pre><code class=\"lang-bash\">go get -u github.com/codegangsta/negroni\n</code></pre>\n\n                    \n                    ',1),(105,'Framer - Prototype Interaction and Animation','http://framerjs.com/resources/',0,0,'<a href=\"http://js2.coffee\">\n	        <img src=\"http://framerjs.com/static/images/resources/js2coffee.png\" alt=\"js2coffee.png\" /></a>\n	    <h6>JS2Coffee</h6>\n	    <p class=\"author\">js2.coffee</p>\n	    <p class=\"small\">Instantly compile and convert JavaScript into CoffeeScript, or the other way round.</p>\n	    <a class=\"button-line blue\" href=\"http://js2.coffee\">Visit Site</a>\n	<a href=\"http://javascriptbook.com\">\n	        <img src=\"http://framerjs.com/static/images/resources/js-book.png\" alt=\"js-book.png\" /></a>\n	    <h6>JavaScript Book</h6>\n	    <p class=\"author\">javascriptbook.com</p>\n	    <p class=\"small\">Learn the basics of JavaScript and computer programming in a simple, visual way.</p>\n	    <a class=\"button-line blue\" href=\"http://javascriptbook.com\">Visit Site</a>\n	<a href=\"http://coffeescript.org\">\n	        <img src=\"http://framerjs.com/static/images/resources/coffeescript-org.png\" alt=\"coffeescript-org.png\" /></a>\n	    <h6>CoffeeSript Website</h6>\n	    <p class=\"author\">coffeescript.org</p>\n	    <p class=\"small\">The official CoffeeScript website, with documentation, examples and snippets.</p>\n	    <a class=\"button-line blue\" href=\"http://coffeescript.org\">Visit Site</a>\n	',1),(107,'Quintus JavaScript HTML5 Game Engine','http://www.html5quintus.com/',0,0,'<p> \na platfomer in ~80 lines of code, you can edit the code on the left. Click to focus, arrow keys to move. <a href=\"http://www.html5quintus.com/quintus/examples/platformer_full/\">more</a></p><div><p> \n\nvar Q = Quintus()\n        .include(\"Sprites, Scenes, Input, 2D, Touch, UI\")\n        .setup({ maximize: true })\n        .controls().touch()\n        \nQ.Sprite.extend(\"Player\",{\n  init: function(p) {\n    this._super(p, { sheet: \"player\", x: 410, y: 90 });\n    this.add(\'2d, platformerControls\');\n    \n    this.on(\"hit.sprite\",function(collision) {\n      if(collision.obj.isA(\"Tower\")) {\n        Q.stageScene(\"endGame\",1, { label: \"You Won!\" }); \n        this.destroy();\n      }\n    });\n  }\n});\n\nQ.Sprite.extend(\"Tower\", {\n  init: function(p) {\n    this._super(p, { sheet: \'tower\' });\n  }\n});\n\nQ.Sprite.extend(\"Enemy\",{\n  init: function(p) {\n    this._super(p, { sheet: \'enemy\', vx: 100 });\n    this.add(\'2d, aiBounce\');\n    \n    this.on(\"bump.left,bump.right,bump.bottom\",function(collision) {\n      if(collision.obj.isA(\"Player\")) { \n        Q.stageScene(\"endGame\",1, { label: \"You Died\" }); \n        collision.obj.destroy();\n      }\n    });\n    \n    this.on(\"bump.top\",function(collision) {\n      if(collision.obj.isA(\"Player\")) { \n        this.destroy();\n        collision.obj.p.vy = -300;\n      }\n    });\n  }\n});\n\nQ.scene(\"level1\",function(stage) {\n  stage.collisionLayer(new Q.TileLayer({ dataAsset: \'level.json\', sheet: \'tiles\' }));\n  var player = stage.insert(new Q.Player());\n  \n  stage.add(\"viewport\").follow(player);\n  \n  stage.insert(new Q.Enemy({ x: 700, y: 0 }));\n  stage.insert(new Q.Enemy({ x: 800, y: 0 }));\n  \n  stage.insert(new Q.Tower({ x: 180, y: 50 }));\n});\n\nQ.scene(\'endGame\',function(stage) {\n  var box = stage.insert(new Q.UI.Container({\n    x: Q.width/2, y: Q.height/2, fill: \"rgba(0,0,0,0.5)\"\n  }));\n  \n  var button = box.insert(new Q.UI.Button({ x: 0, y: 0, fill: \"#CCCCCC\",\n                                           label: \"Play Again\" }))         \n  var label = box.insert(new Q.UI.Text({x:10, y: -10 - button.p.h, \n                                        label: stage.options.label }));\n  button.on(\"click\",function() {\n    Q.clearStages();\n    Q.stageScene(\'level1\');\n  });\n  box.fit(20);\n});\n\nQ.load(\"sprites.png, sprites.json, level.json, tiles.png\", function() {\n  Q.sheet(\"tiles\",\"tiles.png\", { tilew: 32, tileh: 32 });\n  Q.compileSheets(\"sprites.png\",\"sprites.json\");\n  Q.stageScene(\"level1\");\n});\n</p></div><p>A breakdown of the example is below.</p><p>Create an HTML file, pull in the Quintus library and setup the engine. Quintus has a modular engine that lets you pull in just the modules you need and can run in multiple instances on a page. </p><pre><code class=\"html\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;!-- Pull the engine from the Quintus CDN or load it locally --&gt;\n    &lt;!-- (use quintus-all.min.js for production) --&gt;\n    &lt;script src=\'http://cdn.html5quintus.com/v0.2.0/quintus-all.js\'&gt;&lt;/script&gt;\n  &lt;/head&gt;\n   &lt;body&gt;\n     &lt;script&gt;\n     \n      // Now set up your game (most games will load a separate .js file)\n      var Q = Quintus()                          // Create a new engine instance\n              .include(\"Sprites, Scenes, Input, 2D, Touch, UI\") // Load any needed modules\n              .setup()                           // Add a canvas element onto the page\n              .controls()                        // Add in default controls (keyboard, buttons)\n              .touch();                          // Add in touch support (for the UI)\n              \n      /*\n        ... Actual game code goes here ... \n      */\n   &lt;/script&gt;\n   &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>Quintus supports an event-based, hybrid Object-Oriented and Component-based approach, allowing for both a standard inheritance model with support for reusable components.</p><pre><code class=\"javascript\">// You can create a sub-class by extending the Q.Sprite class to create Q.Player\nQ.Sprite.extend(\"Player\",{\n\n  // the init constructor is called on creation\n  init: function(p) {\n  \n    // You can call the parent\'s constructor with this._super(..)\n    this._super(p, {\n      sheet: \"player\",  // Setting a sprite sheet sets sprite width and height\n      x: 410,           // You can also set additional properties that can\n      y: 90            // be overridden on object creation\n    });\n    \n    // Add in pre-made components to get up and running quickly\n    this.add(\'2d, platformerControls\');\n    \n    // Write event handlers to respond hook into behaviors.\n    // hit.sprite is called everytime the player collides with a sprite\n    this.on(\"hit.sprite\",function(collision) {\n      // Check the collision, if it\'s the Tower, you win!\n      if(collision.obj.isA(\"Tower\")) {\n        // Stage the endGame scene above the current stage\n        Q.stageScene(\"endGame\",1, { label: \"You Won!\" }); \n        // Remove the player to prevent them from moving\n        this.destroy();\n      }\n    });\n  }\n});\n\n// Sprites can be simple, the Tower sprite just sets a custom sprite sheet\nQ.Sprite.extend(\"Tower\", {\n  init: function(p) {\n    this._super(p, { sheet: \'tower\' });\n  }\n});\n\n// Create the Enemy class to add in some baddies\nQ.Sprite.extend(\"Enemy\",{\n  init: function(p) {\n    this._super(p, { sheet: \'enemy\', vx: 100 });\n    \n    // Enemies use the Bounce AI to change direction \n    // whenver they run into something.\n    this.add(\'2d, aiBounce\');\n    \n    // Listen for a sprite collision, if it\'s the player,\n    // end the game unless the enemy is hit on top\n    this.on(\"bump.left,bump.right,bump.bottom\",function(collision) {\n      if(collision.obj.isA(\"Player\")) { \n        Q.stageScene(\"endGame\",1, { label: \"You Died\" }); \n        collision.obj.destroy();\n      }\n    });\n    \n    // If the enemy gets hit on the top, destroy it\n    // and give the user a \"hop\"\n    this.on(\"bump.top\",function(collision) {\n      if(collision.obj.isA(\"Player\")) { \n        this.destroy();\n        collision.obj.p.vy = -300;\n      }\n    });\n  }\n});</code></pre><p>Quintus let\'s you easily create reusable scenes that can be swapped in and out by loading them onto stages. Stages stack on top of each other.</p><pre><code class=\"javascript\">// Create a new scene called level 1\nQ.scene(\"level1\",function(stage) {\n\n  // Add in a tile layer, and make it the collision layer\n  stage.collisionLayer(new Q.TileLayer({\n                             dataAsset: \'level.json\',\n                             sheet:     \'tiles\' }));\n                             \n  // Create the player and add him to the stage\n  var player = stage.insert(new Q.Player());\n  \n  // Give the stage a moveable viewport and tell it\n  // to follow the player.\n  stage.add(\"viewport\").follow(player);\n  \n  // Add in a couple of enemies\n  stage.insert(new Q.Enemy({ x: 700, y: 0 }));\n  stage.insert(new Q.Enemy({ x: 800, y: 0 }));\n  \n  // Finally add in the tower goal\n  stage.insert(new Q.Tower({ x: 180, y: 50 }));\n});\n\n// To display a game over / game won popup box, \n// create a endGame scene that takes in a `label` option\n// to control the displayed message.\nQ.scene(\'endGame\',function(stage) {\n  var container = stage.insert(new Q.UI.Container({\n    x: Q.width/2, y: Q.height/2, fill: \"rgba(0,0,0,0.5)\"\n  }));\n  \n  var button = container.insert(new Q.UI.Button({ x: 0, y: 0, fill: \"#CCCCCC\",\n                                                  label: \"Play Again\" }))         \n  var label = container.insert(new Q.UI.Text({x:10, y: -10 - button.p.h, \n                                                   label: stage.options.label }));\n  // When the button is clicked, clear all the stages\n  // and restart the game.\n  button.on(\"click\",function() {\n    Q.clearStages();\n    Q.stageScene(\'level1\');\n  });\n  \n  // Expand the container to visibily fit it\'s contents\n  container.fit(20);\n});</code></pre><p>Quintus features easy asset loading, sprite sheet generation. Launch your game by staging a scene.</p><pre><code class=\"javascript\">// Q.load can be called at any time to load additional assets\n// assets that are already loaded will be skipped\nQ.load(\"sprites.png, sprites.json, level.json, tiles.png\",\n  // The callback will be triggered when everything is loaded\n  function() {\n    // Sprites sheets can be created manually\n    Q.sheet(\"tiles\",\"tiles.png\", { tilew: 32, tileh: 32 });\n    \n    // Or from a .json asset that defines sprite locations\n    Q.compileSheets(\"sprites.png\",\"sprites.json\");\n    \n    // Finally, call stageScene to run the game\n    Q.stageScene(\"level1\");\n  });\n  </code></pre>',1),(109,'Many JS Frameworks but Vue.js Is Different','http://taha-sh.com/blog/many-js-frameworks-but-vuejs-is-different',1,0,'\n        \n<p>Nowadays, we have countless Javascript libraries available for us to use. Every once in a while we get a new framework/library for Javascript. I’ve used many Javascript frameworks, but I’ve never seen something as simple and flexible as <a href=\"http://vuejs.org/\">Vue.js</a>.</p>\n\n<p>You’ll be amazed by how a few lines you need to write to accomplish common tasks in Javascript with Vue.js.</p>\n\n<img src=\"http://taha-sh.com/images/blog/1438789978many-js-frameworks-but-vue-js-is-different-1.png\" alt=\"Vue.js website\" /><p>In this tutorial, I’m going to show you all of that by building a simple tasks app. To see what we’re going to build, check out the <a href=\"http://jsfiddle.net/dvvzhLh4/\">demo</a>. You can also get the source code on <a href=\"https://github.com/TahaSh/Tasks-App-With-VueJS\">github</a>.</p>\n\n<img src=\"http://taha-sh.com/images/blog/1438790026many-js-frameworks-but-vue-js-is-different-2.png\" alt=\"Tasks App\" /><p><strong>Note:</strong> If you feel that you don’t understand everything here, don’t worry, this tutorial is just intended to show you how awesome Vue.js is. Maybe, in the future, there’ll be more tutorials that review the basics of Vue.js.</p>\n\n<h3>Setting Up The Project</h3>\n\n<p>For this app, we need three files: <code>index.html</code>, <code>app.js</code> and <code>app.css</code>.</p>\n\n<p>As a start, here’s how <code>index.html</code> should look like:</p>\n\n<h4>index.html</h4>\n\n<pre><code>&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;title&gt;Tasks App&lt;/title&gt;\r\n    &lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\"/&gt;\r\n    &lt;link rel=\"stylesheet\" href=\"app.css\"&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n\r\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/0.12.9/vue.min.js\"&gt;&lt;/script&gt;\r\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n\n<p>All we have here is a basic HTML5 boilerplate. For this tutorial, I pulled in <code>vue.js</code> via CDN — but feel free to use bower if you want. Also for better styling, I included bootstrap.</p>\n\n<h3>Define a Vue Instance</h3>\n\n<p>To start things off, we have to declare a Vue instance and tell it which DOM element it controls.</p>\n\n<p>In <code>index.html</code>, add <code>&lt;div id=\"app\"&gt;&lt;/div&gt;</code> which will be the view for our Vue instance.</p>\n\n<h4>index.html</h4>\n\n<pre><code>&lt;!-- ... --&gt;\r\n\r\n&lt;body&gt;\r\n\r\n&lt;div id=\"app\"&gt;&lt;/div&gt;\r\n\r\n&lt;!-- ... --&gt;\r\n</code></pre>\n\n<p>Now to create the Vue instance, go to <code>app.js</code> and put this in.</p>\n\n<h4>app.js</h4>\n\n<pre><code>new Vue({\r\n    el: \'#app\'\r\n});\r\n</code></pre>\n\n<p>With that, we have created a Vue instance and associated it with the <code>div#app</code> tag from <code>index.html</code>. This means the Vue instance will control the tag <code>div#app</code> and everything it houses.</p>\n\n<p>For this app we need a little bit of styling. So go to <code>app.css</code> and add this code.</p>\n\n<pre><code>#app {\r\n    padding: 2em;\r\n}\r\n\r\n#app input[type=text] {\r\n    margin-bottom: 1em\r\n}\r\n\r\n#app h1 {\r\n    margin-bottom: 0.5em;\r\n}\r\n\r\n.task:hover .remove-btn {\r\n    display: block;\r\n}\r\n\r\n.remove-btn {\r\n    display: none;\r\n    background: transparent;\r\n    border: 0;\r\n    color: darkred;\r\n}\r\n\r\n.completed {\r\n    color: silver;\r\n    text-decoration: line-through;\r\n}\r\n</code></pre>\n\n<h3>Show a List of Tasks</h3>\n\n<p>Since Vue uses two-way binding, like angular, we need a way to specify what data Vue will use (as a model). We can do that by declaring an object named <code>data</code> in the Vue instance. Like this:</p>\n\n<pre><code>new Vue({\r\n    el: \'#app\',\r\n\r\n    data: {\r\n\r\n    }\r\n});\r\n</code></pre>\n\n<p>We need a list of tasks, so we have to declare an array of tasks in that <code>data</code> object.</p>\n\n<pre><code>new Vue({\r\n    el: \'#app\',\r\n\r\n    data: {\r\n        tasks: []\r\n    }\r\n});\r\n</code></pre>\n\n<p>Each task will have a <code>title</code> and <code>completed</code> property to specify if the task is completed. So each task object will look like this: <code>{ title: \'My task\', completed: false }</code>.</p>\n\n<p>For now, let’s just add a bunch of tasks in that array as hard-coded values.</p>\n\n<pre><code>new Vue({\r\n    el: \'#app\',\r\n\r\n    data: {\r\n        tasks: [\r\n            { title: \'Go to grocery store\', completed: false },\r\n            { title: \'Do the dishes\', completed: false },\r\n            { title: \'Call John\', completed: false }\r\n        ]\r\n    }\r\n});\r\n</code></pre>\n\n<p>We have defined the tasks, but how would we display them? Well, we have two ways: <strong>directives</strong> or <strong>mustache binding</strong>.</p>\n\n<p>For now, I want you to think of directives as html attributes that are prefixed with <code>v-</code>. Examples: <code>v-model</code>, <code>v-text</code>, <code>v-on</code>, etc….</p>\n\n<p>Another way is to use mustache-like syntax. Like this: <code>{{ data }}</code>.</p>\n\n<p>Let’s use the latter one. To see how it works, open <code>index.html</code>, and put this <code>{{ tasks[0].title }}</code> inside <code>div#app</code>. After that, if you view the browser, you should see the title of the first task: <strong>Go to grocery store</strong>.</p>\n\n<p>This is to show a single value. However, to show all tasks we have to use the <code>v-repeat</code> directive. Like this:</p>\n\n<h4>index.html</h4>\n\n<pre><code>&lt;div id=\"app\"&gt;\r\n    &lt;h1&gt;Tasks&lt;/h1&gt;\r\n    &lt;ul class=\"list-group\"&gt;\r\n       &lt;li class=\"list-group-item task\"\r\n           v-repeat=\"task : tasks\"\r\n       &gt;\r\n           &lt;input type=\"checkbox\"&gt;\r\n           {{ task.title }}\r\n       &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n\n<p>You can think of the <code>v-repeat</code> directive as a for-in loop. So we access each element in the <code>tasks</code> array as <code>task</code>.</p>\n\n<p>Now if you get back to the browser, you should see all tasks displayed in a list group.</p>\n\n<img src=\"http://taha-sh.com/images/blog/1438790055many-js-frameworks-but-vue-js-is-different-3.png\" alt=\"Showing a list of tasks\" /><h3>Deleting Tasks</h3>\n\n<p>We need a button for each task, when it’s clicked, the task should be deleted.</p>\n\n<h4>index.html</h4>\n\n<pre><code>&lt;div id=\"app\"&gt;\r\n    &lt;ul class=\"list-group\"&gt;\r\n       &lt;li class=\"list-group-item task\"\r\n           v-repeat=\"task : tasks\"\r\n       &gt;\r\n       &lt;input type=\"checkbox\"&gt;\r\n       {{ task.title }}\r\n\r\n       &lt;button class=\"remove-btn pull-right\" v-on=\"click: removeTask(task)\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/button&gt;\r\n\r\n   &lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n\n<p>That button has a <code>v-on</code> directive. This directive is used to bind event listeners to DOM events. So when the button is clicked, we should call <code>removeTask()</code> method passing in the task to be deleted.</p>\n\n<p>But where to define that method? The answer is in a <code>methods</code> object in the Vue instance.</p>\n\n<p>So add this in the Vue instance:</p>\n\n<h4>app.js</h4>\n\n<pre><code>new Vue({\r\n    el: \'#app\',\r\n\r\n    data: {\r\n        tasks: [\r\n            { title: \'Go to grocery store\', completed: false },\r\n            { title: \'Do the dishes\', completed: false },\r\n            { title: \'Call John\', completed: false }\r\n        ]\r\n    },\r\n    \r\n    methods: {\r\n      removeTask: function(task) {\r\n          this.tasks.$remove(task);\r\n      }\r\n  }\r\n});\r\n</code></pre>\n\n<p>Now when you put the cursor on the task, a delete button should be displayed. When you click on it, the task should be deleted.</p>\n\n<img src=\"http://taha-sh.com/images/blog/1438790078many-js-frameworks-but-vue-js-is-different-4.png\" alt=\"Showing delete button\" /><h3>Completing Tasks</h3>\n\n<p>Now let’s see how we can complete tasks. The idea is to toggle a class on each task item. So when the task is completed, we should add a <code>.completed</code> class to it. And when it’s uncompleted, we should remove that class.</p>\n\n<p>That action should happen when the user click on the checkbox for each task. So we need to associate some data with each checkbox. For that we use the directive <code>v-model</code>. This directive is used to associate data with form input. The data we should associate is the <code>completed</code> property for each task (<code>task.completed</code>).</p>\n\n<p>So what we want do is to change <code>task.completed</code> to <strong>true</strong> when the checkbox is checked. And back to <strong>false</strong> when it’s unchecked.</p>\n\n<p>All we have to do to accomplish this is to add <code>v-model=\"task.completed\"</code> for the checkbox.</p>\n\n<pre><code>&lt;input type=\"checkbox\" v-model=\"task.completed\"&gt;\r\n</code></pre>\n\n<p>With that, the <code>completed</code> property is changed with the checkbox. But how to determine if we should add or remove (i.e. toggle) the class <code>.completed</code>. This is done simply by using the directive <code>v-class</code>. This directive takes the class and the condition to show that class.</p>\n\n<p>So add <code>v-class=\"completed: task.completed\"</code> to the list item. In this case, the class <code>.completed</code> will be set only when <code>task.completed</code> is a truthy value.</p>\n\n<pre><code>&lt;div id=\"app\"&gt;\r\n    &lt;ul class=\"list-group\"&gt;\r\n         &lt;li class=\"list-group-item task\"\r\n            v-repeat=\"task : tasks\"\r\n            v-class=\"completed: task.completed\"\r\n         &gt;\r\n         &lt;input type=\"checkbox\"&gt;\r\n           {{ task.title }}\r\n\r\n           &lt;button class=\"remove-btn pull-right\" v-on=\"click: removeTask(task)\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/button&gt;\r\n\r\n       &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n\n<p>Now your tasks can be completed and uncompleted.</p>\n\n<img src=\"http://taha-sh.com/images/blog/1438790097many-js-frameworks-but-vue-js-is-different-5.png\" alt=\"Completing tasks\" /><h3>Adding New Tasks</h3>\n\n<p>For adding new tasks, we need a text input to write in the task’s title. By default, each new task should be uncompleted.</p>\n\n<p>Add the input above <code>ul#list-group</code>.</p>\n\n<h4>index.html</h4>\n\n<pre><code>&lt;input type=\"text\"\r\n       class=\"form-control\"\r\n       placeholder=\"New Task\"\r\n       v-model=\"newTask.title\"\r\n       v-on=\"keyup: addTask | key \'enter\'\"\r\n&gt;\r\n</code></pre>\n\n<p>The new task’s data will be represented by the property <code>newTask</code>. So we have to declare it in the Vue instance.</p>\n\n<h4>app.js</h4>\n\n<pre><code>data: {\r\n    newTask:{ title: \'\', completed: false},\r\n    //...\r\n}\r\n</code></pre>\n\n<p>Notice that I’ve associated an event listener with the input which will be triggered when the user presses the enter key. I’ve specified the key using filters — which you probably know from angular.</p>\n\n<p>Now let’s define the <code>addTask</code> handler in the methods object.</p>\n\n<h4>app.js</h4>\n\n<pre><code>methods: {\r\n    addTask: function() {\r\n        if ( ! this.newTask.title) {\r\n            return;\r\n        }\r\n\r\n        this.tasks.push({\r\n            title: this.newTask.title,\r\n            completed: false\r\n        });\r\n\r\n        this.newTask = { title: \'\', completed: false};\r\n    },\r\n\r\n    // ...\r\n}\r\n</code></pre>\n\n<p>In the <code>addTask</code> method, we first make sure that the task to be added is not empty. If not, then we add the new task to the tasks array using the push method. After that, we clear out the text input by resetting the values of <code>this.newTask</code>.</p>\n\n<p>If you switch back to the browser, you should be able to add a new task by typing in its title and pressing enter.</p>\n\n<img src=\"http://taha-sh.com/images/blog/1438790135many-js-frameworks-but-vue-js-is-different-6.png\" alt=\"Adding new task\" /><h3>Editing Tasks</h3>\n\n<p>The last feature we’re going to add is the ability to edit tasks. The way we want to edit tasks is by double-clicking a task from the list. Then that task’s title will be editable in the same text input we use to add tasks. After we’re done with our changes, we press enter to commit the changes and clear out the text input.</p>\n\n<p>It seems that it’s a tough one, but really isn’t. All you have to do in <code>index.html</code> is to add this event listener to the task item: <code>v-on=\"dblclick: startEditingTask(task)\"</code>.</p>\n\n<pre><code>&lt;li class=\"list-group-item task\"\r\n    v-repeat=\"task : tasks\"\r\n    v-class=\"completed: task.completed\"\r\n    v-on=\"dblclick: startEditingTask(task)\"\r\n&gt;\r\n</code></pre>\n\n<p>Then define that handler in the Vue instance.</p>\n\n<pre><code>methods: {\r\n    startEditingTask: function(task) {\r\n        this.newTask = task;\r\n        this.editingTask = true;\r\n    },\r\n    // ...\r\n}\r\n</code></pre>\n\n<p>In that handler we assign the task that we want to edit to the <code>newTask</code> property — so we can use the same text input to update it. But what about the <code>editingTask</code> property?</p>\n\n<p>Well, this one is used to determine whether the task in the text input is a new one to be added or a task to be updated. But for that to work, we have to define it in the <code>data</code> object.</p>\n\n<pre><code>data: {\r\n    newTask:{ title: \'\', completed: false},\r\n\r\n    editingTask: false,\r\n\r\n    tasks: [\r\n        { title: \'Go to grocery store\', completed: false },\r\n        { title: \'Do the dishes\', completed: false },\r\n        { title: \'Call John\', completed: false }\r\n    ]\r\n}\r\n</code></pre>\n\n<p>The last change we’ll do in <code>index.html</code> is to change the event handler of the text input (when the enter is pressed) to another method — called <code>pressedEnter</code>.</p>\n\n<pre><code>&lt;input type=\"text\"\r\n       class=\"form-control\"\r\n       placeholder=\"New Task\"\r\n       v-model=\"newTask.title\"\r\n       v-on=\"keyup: pressedEnter | key \'enter\'\"\r\n&gt;\r\n</code></pre>\n\n<p>Now in your Vue instance add this method.</p>\n\n<pre><code>pressedEnter: function() {\r\n    if ( ! this.editingTask) {\r\n        this.addTask();\r\n    }\r\n    \r\n    this.newTask = { title: \'\', completed: false};\r\n        this.editingTask = false;\r\n}\r\n</code></pre>\n\n<p>Notice that I moved <code>this.newTask = { title: \'\', completed: false};</code> from the <code>addTask</code> method to the <code>pressedEnter</code>. Also, in the last line, I changed <code>editingTask</code> back to false so users would be able to add more tasks in case they were editing a task before that.</p>\n\n<p>Now we’re able to edit tasks.</p>\n\n<img src=\"http://taha-sh.com/images/blog/1438790156many-js-frameworks-but-vue-js-is-different-7.png\" alt=\"Edit tasks\" /><h3>Removing Tasks When They Are Empty</h3>\n\n<p>Now what if the user provided an empty string when editing the task. In this case we should just remove that task because empty tasks will help nobody.</p>\n\n<img src=\"http://taha-sh.com/images/blog/1438790195many-js-frameworks-but-vue-js-is-different-8.png\" alt=\"Update task with empty string\" /><p>To tackle that, update <code>pressedEnter</code> accordingly:</p>\n\n<pre><code>pressedEnter: function() {\r\n    if (this.editingTask) {\r\n        this.removeIfEmpty();\r\n    } else {\r\n        this.addTask();             \r\n    }\r\n    \r\n    this.newTask = { title: \'\', completed: false};\r\n        this.editingTask = false;\r\n}\r\n</code></pre>\n\n<p>Then create that <code>removeIfEmpty</code> method and put this into it.</p>\n\n<pre><code>removeIfEmpty: function() {\r\n    if ( ! this.newTask.title) {\r\n        this.removeTask(this.newTask);\r\n    }\r\n}\r\n</code></pre>\n\n<h3>All The Code</h3>\n\n<p>Here are the three files that we’ve been working on.</p>\n\n<h4>index.html</h4>\n\n<pre><code>&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;title&gt;Tasks App&lt;/title&gt;\r\n    &lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\"/&gt;\r\n    &lt;link rel=\"stylesheet\" href=\"app.css\"&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;div id=\"app\"&gt;\r\n    &lt;h1&gt;Tasks&lt;/h1&gt;\r\n\r\n    &lt;input type=\"text\"\r\n           class=\"form-control\"\r\n           placeholder=\"New Task\"\r\n           v-model=\"newTask.title\"\r\n           v-on=\"keyup: pressedEnter | key \'enter\'\"\r\n    &gt;\r\n\r\n    &lt;ul class=\"list-group\"&gt;\r\n        &lt;li class=\"list-group-item task\"\r\n            v-repeat=\"task : tasks\"\r\n            v-class=\"completed: task.completed\"\r\n            v-on=\"dblclick: startEditingTask(task)\"\r\n        &gt;\r\n            &lt;input type=\"checkbox\" v-model=\"task.completed\"&gt;\r\n            {{ task.title }}\r\n\r\n            &lt;button class=\"remove-btn pull-right\" v-on=\"click: removeTask(task)\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/button&gt;\r\n        &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n&lt;/div&gt;\r\n\r\n\r\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/0.12.9/vue.min.js\"&gt;&lt;/script&gt;\r\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n\n<h4>app.js</h4>\n\n<pre><code>new Vue({\r\n    el: \'#app\',\r\n\r\n    data: {\r\n        newTask:{ title: \'\', completed: false},\r\n\r\n        tasks: [\r\n            { title: \'Go to grocery store\', completed: false },\r\n            { title: \'Do the dishes\', completed: false },\r\n            { title: \'Call John\', completed: false }\r\n        ]\r\n    },\r\n\r\n    methods: {\r\n        pressedEnter: function() {\r\n            if (this.editingTask) {\r\n                this.removeIfEmpty();\r\n            } else {\r\n                this.addTask();             \r\n            }\r\n            \r\n            this.newTask = { title: \'\', completed: false};\r\n            this.editingTask = false;\r\n        },\r\n\r\n        addTask: function() {\r\n            if ( ! this.newTask.title) {\r\n                return;\r\n            }\r\n\r\n            this.tasks.push({\r\n                title: this.newTask.title,\r\n                completed: false\r\n            });\r\n        },\r\n\r\n        removeTask: function(task) {\r\n          this.tasks.$remove(task);\r\n        },\r\n\r\n        startEditingTask: function(task) {\r\n            this.newTask = task;\r\n            this.editingTask = true;\r\n        },\r\n        removeIfEmpty: function() {\r\n            if ( ! this.newTask.title) {\r\n                this.removeTask(this.newTask);\r\n            }\r\n        }\r\n    }\r\n});\r\n</code></pre>\n\n<h4>app.css</h4>\n\n<pre><code>#app {\r\n    padding: 2em;\r\n}\r\n\r\n#app input[type=text] {\r\n    margin-bottom: 1em\r\n}\r\n\r\n#app h1 {\r\n    margin-bottom: 0.5em;\r\n}\r\n\r\n.task:hover .remove-btn {\r\n    display: block;\r\n}\r\n\r\n.remove-btn {\r\n    display: none;\r\n    background: transparent;\r\n    border: 0;\r\n    color: darkred;\r\n}\r\n\r\n.completed {\r\n    color: silver;\r\n    text-decoration: line-through;\r\n}\r\n</code></pre>\n\n<h3>Wrap Up</h3>\n\n<p>With that, we’re done with our little tasks app. I hope you can see how easy it is to accomplish things in Vue.js. </p>\n\n<p>Actually, we’ve barely scratched the surface in this tutorial. Vue has many more things to learn. Anyway, the purpose of this tutorial was to show you the basic workflow of building apps in Vue.js.</p>\n\n<p>As I said at the beginning, don’t worry if it doesn’t all make sense to you. This tutorial was just to whet your appetite to learn more about Vue. So if you found this library very interesting to you, and you want to learn it from scratch, please let me know this in the comments.</p>\n    ',1),(110,'delight-im/FreeGeoDB','https://github.com/delight-im/FreeGeoDB?hn=2015-09-25',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Free database of geographic place names and corresponding geospatial data</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/delight-im/FreeGeoDB?hn=2015-09-25#entities\"><span class=\"octicon octicon-link\"></span></a>Entities</h2>\n\n<ul><li>airports</li>\n<li>cities</li>\n<li>countries (admin-0)</li>\n<li>lakes</li>\n<li>ports</li>\n<li>railroads</li>\n<li>regions (admin-1)</li>\n<li>roads</li>\n<li>time zones</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/delight-im/FreeGeoDB?hn=2015-09-25#formats\"><span class=\"octicon octicon-link\"></span></a>Formats</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/delight-im/FreeGeoDB?hn=2015-09-25#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>All contributions are welcome! If you wish to contribute, please create an issue first so that your feature, problem or question can be discussed.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/delight-im/FreeGeoDB?hn=2015-09-25#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<pre><code>Copyright 2015 delight.im &lt;info@delight.im&gt;\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>\n',1),(111,'A walk through the SA-IS algorithm','http://zork.net/~st/jottings/sais.html',0,0,'\n	<p>Some time ago, while looking for solutions to some string-searching problem\nI was having, I stumbled across the <a href=\"http://en.wikipedia.org/wiki/Suffix_array\">Suffix Array</a> data-structure. It\nseemed promising, so I looked up the algorithm Wikipedia recommended (the\n\"SA-IS\" algorithm from the paper \"Linear Suffix Array Construction by Almost\nPure Induced-Sorting\" by G. Nong, S. Zhang and W. H. Chan). I downloaded the\npaper from <a href=\"https://code.google.com/p/ge-nong/\">the authors\' site</a> and I read through it.</p>\n<p>Unfortunately, the paper was aimed at an audience of Computer Science\nresearchers well-versed in the literature of the field, rather than an industry\nprogrammer with some spare-time and curiosity, so it made almost no sense to\nme. I decided I would research this research, figure out how the SA-IS\nalgorithm worked, and write up the most accessible explanation I could muster.</p>\n<p>Before we begin, though, some caveats:</p>\n<ul><li>I will explain the ideas behind the SA-IS algorithm, but I won\'t go into\n   detail about <em>why</em> they work. For fully-worked proofs, see the original\n   paper.</li>\n<li>At any point where I have to choose between an efficiently-implemented\n   example and a simple-to-explain example, I\'ll pick simplicity. You can\n   probably come up with practical optimisations yourself.</li>\n<li>Although SA-IS can be generally applied to strings with an alphabet of any\n   size, the code shown here is specialised to strings of 8-bit bytes, because\n   in practice that\'s what most people will want to do.</li>\n<li>The SA-IS algorithm itself is simple enough, but requires storage for\n   intermediate values. To keep things simple I\'ll ignore storage costs, but G.\n   Nong\'s follow-up paper, \"Practical Linear-Time O(1)-Workspace Suffix Sorting\n   for Constant Alphabets\" discusses how to build a suffix-array in linear-time\n   and constant (working) space (obviously you need O(n) space to store the\n   resulting sorted array). It\'s basically the same as the SA-IS algorithm but\n   it\'s smarter about storing intermediate values.</li>\n<li>All the code examples are written to work with Python 3, and specifically\n   tested against Python 3.4.</li>\n</ul><h2>What\'s a suffix array?</h2>\n<p>A suffix array is an index over a string that helps you find all the times\nsome smaller string occurs inside it, if at all. A suffix array for a string\nwith N characters will generally be an array of N integers, where each item of\nthe array stores an offset into the string, representing the suffix of the\nstring starting at that offset and continuing (as suffixes do) to the end.</p>\n<p>The important thing about a suffix-array is that it represents a <em>sorted</em>\nsequence of suffixes, so you can find some particular suffix—or all the\nsuffixes beginning with some particular string—by using an ordinary binary\nsearch.</p>\n<p>Here\'s a simple Python function that generates a suffix array:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">naivelyMakeSuffixArray</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s\">\"\"\"</span>\n<span class=\"s\">...     A naive, slow suffix-array construction algorithm.</span>\n<span class=\"s\">...     \"\"\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Construct a list of suffixes of the source string.</span>\n<span class=\"o\">...</span>     <span class=\"n\">suffixes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">offset</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"n\">suffixes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:])</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Sort the suffixes</span>\n<span class=\"o\">...</span>     <span class=\"n\">suffixes</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Calculate the start offset of each suffix, storing them in</span>\n<span class=\"o\">...</span>     <span class=\"c\"># sorted order into the suffix array.</span>\n<span class=\"o\">...</span>     <span class=\"n\">suffixArray</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">suffix</span> <span class=\"ow\">in</span> <span class=\"n\">suffixes</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"n\">suffixArray</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">suffixArray</span>\n</pre></div>\n\n\n<p>If we feed a string like <code>cabbage</code> into this algorithm, we get the correct\nsuffix array in return:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">naivelyMakeSuffixArray</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'cabbage\'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>The string contains two instances of the character <code>a</code>, at indexes 1 and 4, and\ntherefore two suffixes starting with <code>a</code>. Sure enough, the indexes 1 and 4 are\ngrouped together in the suffix array. Index 1 comes first, because that suffix\nbegins with <code>ab</code>, which is alphabetically before index 4\'s <code>ag</code>.</p>\n<p>Note that although the indexes of the characters run 0 to 6, for a total of\nseven characters, the suffix array has <em>eight</em> offsets. The suffix beginning\njust after the last character and continuing to the end of the string is the\nempty suffix, containing no characters. Because it\'s the shortest possible\nsuffix, it always winds up sorted to the beginning of the suffix array. Most\npeople who want to use suffix arrays don\'t care about the empty suffix, but it\nturns out to be important for the SA-IS algorithm.</p>\n<p>The naive algorithm above just re-uses a standard O(n log n) sorting algorithm,\nplus it adds the overhead of building a list of suffixes and building a new\narray of offsets at the end. SA-IS manages to do the whole thing in O(n) time,\nfaster than just the standard sorting on its own, a massive improvement. To\nachieve this speed, SA-IS takes advantage of certain features of suffix arrays\nthat are not necessarily true of any old array of strings. </p>\n\n<p>Before we get into the details of the SA-IS algorithm, we need to cover the\nconcepts that SA-IS is built on.</p>\n<h2>S-type and L-type suffixes</h2>\n<p>When sorting an array of suffixes of some string, SA-IS divides them into two\ngroups: \"S-type\" suffixes and \"L-type\" suffixes. S-type suffixes are <em>smaller</em>\n(in the sorting sense) than the suffix to their right (and so must appear\ncloser to the start of the finished suffix array) and L-type suffixes are\n<em>larger</em> than the suffix to their right (and so appear closer to the end).</p>\n<p>Let\'s take the string <code>cabbage</code> again. The suffix starting at offset 1 is\n<code>abbage</code>; the suffix starting to the right of it is <code>bbage</code>, and <code>abbage</code> comes\nbefore <code>bbage</code> alphabetically, so <code>abbage</code> is an S-type suffix. Meanwhile, the\nsuffix starting at offset 5 is <code>ge</code>; the suffix starting to the right is <code>e</code>,\nand <code>ge</code> comes after <code>e</code>, so <code>ge</code> is an L-type suffix.</p>\n<p>We can figure out whether the suffix starting at some particular place is\nS-type or L-type by comparing the character at that place with the character\nto the right, but what if both characters are the same? For example, the suffix\nat offset 2 is <code>bbage</code>, and the suffix to the right is <code>bage</code>. You could just\nuse a normal string comparison, but imagine if one suffix was \"a million <code>b</code>s\nfollowed by <code>age</code>\" and the other suffix was \"a million and one <code>b</code>s followed by\n<code>age</code>\"—that comparison would get expensive quickly! However, because both are\nsuffixes of the same string, it turns out that when a character is the same as\nthe character to its right, then its type is the same as the other character\ntoo. <code>bage</code> turns out to be L-type, and so <code>bbage</code> is also L-type.</p>\n<p>Therefore, if we know whether the suffix at some offset is L-type or S-type, we\ncan easily calculate the type of every suffix to the left of that offset by\nstarting at that point and walking left, comparing characters and storing\ntypes. But what about the right-most suffix? It doesn\'t have a right-hand\nsuffix to compare to, so we can\'t figure out whether it\'s larger or smaller!\nWell, in SA-IS the right-most suffix is always the empty suffix, and it\'s\ndefined to always be S-type.</p>\n<p>Now we have a complete set of rules for determining the type of each suffix of\na string:</p>\n<ol><li>The empty suffix at the end of the string is S-type by definition, and\n   therefore the penultimate suffix (containing just the last character) is\n   always L-type (since it\'s alphabetically after the empty suffix).</li>\n<li>If the character at offset X is alphabetically larger than the character at\n   offset X+1, the suffix starting at offset X is L-type.</li>\n<li>If the character at offset X is the same as the character at offset X+1, and\n   the suffix starting at offset X+1 is L-type, then the suffix starting at\n   offset X is also L-type.</li>\n<li>Otherwise, the suffix starting at offset X is S-type.</li>\n</ol><p>If we define some values to represent \"S-type\" and \"L-type\":</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">S_TYPE</span> <span class=\"o\">=</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">\"S\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">L_TYPE</span> <span class=\"o\">=</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">\"L\"</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>...we can make a function that takes a string and maps out whether each\ncharacter of the source string as S-type or L-type, following the above rules.</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">buildTypeMap</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s\">\"\"\"</span>\n<span class=\"s\">...     Builds a map marking each suffix of the data as S_TYPE or L_TYPE.</span>\n<span class=\"s\">...     \"\"\"</span>\n<span class=\"o\">...</span>     <span class=\"c\"># The map should contain one more entry than there are characters</span>\n<span class=\"o\">...</span>     <span class=\"c\"># in the string, because we also need to store the type of the</span>\n<span class=\"o\">...</span>     <span class=\"c\"># empty suffix between the last character and the end of the</span>\n<span class=\"o\">...</span>     <span class=\"c\"># string.</span>\n<span class=\"o\">...</span>     <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># The empty suffix after the last character is S_TYPE</span>\n<span class=\"o\">...</span>     <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">S_TYPE</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># If this is an empty string...</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"c\"># ...there are no more characters, so we\'re done.</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">res</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># The suffix containing only the last character must necessarily</span>\n<span class=\"o\">...</span>     <span class=\"c\"># be larger than the empty suffix.</span>\n<span class=\"o\">...</span>     <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">L_TYPE</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Step through the rest of the string from right to left.</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n<span class=\"o\">...</span>             <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">L_TYPE</span>\n<span class=\"o\">...</span>         <span class=\"k\">elif</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">L_TYPE</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">L_TYPE</span>\n<span class=\"o\">...</span>         <span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">S_TYPE</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">res</span>\n</pre></div>\n\n\n<p>The <code>buildTypeMap()</code> function stores its map as a <code>bytearray</code>, so if we want to\nprint out a type-map we\'ll need to decode it into text first:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">showTypeMap</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s\">\'ascii\'</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">buildTypeMap</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s\">\'ascii\'</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>If we look at the type map of <code>cabbage</code>, we can see the S-type and L-type\nsuffixes are just as we expected:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">showTypeMap</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'cabbage\'</span><span class=\"p\">)</span>\n<span class=\"n\">cabbage</span>\n<span class=\"n\">LSLLSLLS</span>\n</pre></div>\n\n\n<p>Note again that the type-map is longer than the input text, because it\'s\nstoring an entry for the empty suffix.</p>\n<h2>LMS characters</h2>\n<p>Let\'s say that some particular character in our input string is an\n\"S character\" if an S-type suffix starts at that location (and likewise for\nan \"L character\"). A \"left-most S character\" (or \"LMS character\" for short), is\njust an S character that has an L character to its immediate left. The first\ncharacter in the string can never be an LMS character (because there\'s no\ncharacter to the immediate left, let alone an L character), but apart from that\nthe definition is straightforward. Therefore, we can very easily write\na function to implement this test:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">isLMSChar</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s\">\"\"\"</span>\n<span class=\"s\">...     Returns true if the character at offset is a left-most S-type.</span>\n<span class=\"s\">...     \"\"\"</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"n\">offset</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"bp\">False</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"n\">typemap</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">S_TYPE</span> <span class=\"ow\">and</span> <span class=\"n\">typemap</span><span class=\"p\">[</span><span class=\"n\">offset</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">L_TYPE</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"bp\">True</span>\n<span class=\"o\">...</span> \n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</pre></div>\n\n\n<p>...and we can also extend our <code>showTypeMap()</code> function to point out which\ncharacters in the string are LMS characters:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">showTypeMap</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">typemap</span> <span class=\"o\">=</span> <span class=\"n\">buildTypeMap</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> \n<span class=\"o\">...</span>     <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s\">\'ascii\'</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">typemap</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s\">\'ascii\'</span><span class=\"p\">))</span>\n<span class=\"o\">...</span> \n<span class=\"o\">...</span>     <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>             <span class=\"s\">\"^\"</span> <span class=\"k\">if</span> <span class=\"n\">isLMSChar</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"s\">\" \"</span>\n<span class=\"o\">...</span>             <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">typemap</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>         <span class=\"p\">))</span>\n</pre></div>\n\n\n<p>Now we can see where the LMS characters are in <code>cabbage</code>:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">showTypeMap</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'cabbage\'</span><span class=\"p\">)</span>\n<span class=\"n\">cabbage</span>\n<span class=\"n\">LSLLSLLS</span>\n <span class=\"o\">^</span>  <span class=\"o\">^</span>  <span class=\"o\">^</span>\n</pre></div>\n\n\n<p>Note that as a side-effect of our definition, the empty suffix is regarded as\nan LMS character, even though it\'s not a character as such.</p>\n<p>If we try a word that has consecutive S characters, we can see that only the\nleft-most S character is marked as an LMS character:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">showTypeMap</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'caabage\'</span><span class=\"p\">)</span>\n<span class=\"n\">caabage</span>\n<span class=\"n\">LSSLSLLS</span>\n <span class=\"o\">^</span>  <span class=\"o\">^</span>  <span class=\"o\">^</span>\n</pre></div>\n\n\n<h2>LMS substrings</h2>\n<p>Looking at the examples above, you can see that LMS characters are somewhat\nsparse throughout the input string. An \"LMS substring\" is a portion of the\ninput string starting at one LMS character and continuing up to (but not\nincluding) the next LMS character. In the string <code>cabbage</code> examined above,\nthere are two LMS substrings: <code>abb</code> and <code>age</code>. The SA-IS algorithm does its\nmagic by sorting LMS substrings, but we can\'t use an ordinary string comparison\nfunction because we don\'t necessarily know how long each LMS string is. We\'d\nneed to walk along the string to find the beginning of the next LMS character,\nand if we\'re walking the string anyway, we might as well do the comparison at\nthe same time.</p>\n<p>The rules for comparing LMS substrings are straightforward: they must have the\nsame length and the same characters in the same order. Here\'s a function that,\ngiven an input string, its typemap and two offsets into that string, determines\nwhether the LMS substrings starting at those offsets are equal:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">lmsSubstringsAreEqual</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">,</span> <span class=\"n\">offsetA</span><span class=\"p\">,</span> <span class=\"n\">offsetB</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s\">\"\"\"</span>\n<span class=\"s\">...     Return True if LMS substrings at offsetA and offsetB are equal.</span>\n<span class=\"s\">...     \"\"\"</span>\n<span class=\"o\">...</span>     <span class=\"c\"># No other substring is equal to the empty suffix.</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"n\">offsetA</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">offsetB</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"bp\">False</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">...</span>     <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">aIsLMS</span> <span class=\"o\">=</span> <span class=\"n\">isLMSChar</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">offsetA</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"n\">bIsLMS</span> <span class=\"o\">=</span> <span class=\"n\">isLMSChar</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">offsetB</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"c\"># If we\'ve found the start of the next LMS substrings...</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">aIsLMS</span> <span class=\"ow\">and</span> <span class=\"n\">bIsLMS</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>             <span class=\"c\"># ...then we made it all the way through our original LMS</span>\n<span class=\"o\">...</span>             <span class=\"c\"># substrings without finding a difference, so we can go</span>\n<span class=\"o\">...</span>             <span class=\"c\"># home now.</span>\n<span class=\"o\">...</span>             <span class=\"k\">return</span> <span class=\"bp\">True</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"n\">aIsLMS</span> <span class=\"o\">!=</span> <span class=\"n\">bIsLMS</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"c\"># We found the end of one LMS substring before we reached</span>\n<span class=\"o\">...</span>             <span class=\"c\"># the end of the other.</span>\n<span class=\"o\">...</span>             <span class=\"k\">return</span> <span class=\"bp\">False</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">offsetA</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">offsetB</span><span class=\"p\">]:</span>\n<span class=\"o\">...</span>             <span class=\"c\"># We found a character difference, we\'re done.</span>\n<span class=\"o\">...</span>             <span class=\"k\">return</span> <span class=\"bp\">False</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>This function doesn\'t explicitly test for reaching the end of the string, but\nremember that the empty suffix at the end of the string is always regarded as\nan LMS character—if <code>i + offsetA</code> reaches the end of the string, then\n<code>aIsLMS</code> must be true, and the code will always take one of the first two <code>if</code>\nstatements in the body of the <code>while</code> loop.</p>\n<p>Let\'s take a string with some repeated content:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">showTypeMap</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'rikki-tikki-tikka\'</span><span class=\"p\">)</span>\n<span class=\"n\">rikki</span><span class=\"o\">-</span><span class=\"n\">tikki</span><span class=\"o\">-</span><span class=\"n\">tikka</span>\n<span class=\"n\">LSLLLSLSLLLSLSLLLS</span>\n <span class=\"o\">^</span>   <span class=\"o\">^</span> <span class=\"o\">^</span>   <span class=\"o\">^</span> <span class=\"o\">^</span>   <span class=\"o\">^</span>\n</pre></div>\n\n\n<p>You can see the LMS substrings at offset 1 and offset 7 both have the same\ncontent (<code>ikki</code>) and the same types (<code>SLLL</code>). Therefore, those two LMS\nsubstrings should be equal:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"s\">\'rikki-tikki-tikka\'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tm</span> <span class=\"o\">=</span> <span class=\"n\">buildTypeMap</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lmsSubstringsAreEqual</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">tm</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"bp\">True</span>\n</pre></div>\n\n\n<p>On the other hand, the LMS substring at offset 13 has the same length and the\nsame types, but different content (<code>ikka</code>), so it should be reported as\nunequal:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lmsSubstringsAreEqual</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">tm</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"bp\">False</span>\n</pre></div>\n\n\n<h2>Bucket sorting</h2>\n<p>Bucket sorting is a common operation even outside the world of suffix arrays,\nbut since it\'s important to SA-IS here\'s a brief description. Since we\'re\nmaking a sorted suffix array, we know that all the suffixes beginning with the\nsame character will wind up grouped together. The string <code>cabbage</code> has two\n<code>a</code>s, two <code>b</code>s, one <code>c</code>, and no <code>d</code>s, so we can already predict that the first\ntwo indexes in the suffix array will point at suffixes beginning with <code>a</code>, the\n<code>b</code>s will take the next two slots, then one for <code>c</code> and none for <code>d</code>.</p>\n<p>Given a string (and the size of its alphabet), the following function will\nfigure out how many suffixes of the string begin with each character of the\nalphabet; colloquially, how many suffixes are in the \"bucket\" for each\ncharacter:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">findBucketSizes</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">alphabetSize</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">alphabetSize</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">char</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">res</span>\n</pre></div>\n\n\n<p>We could find the bucket sizes for <code>cabbage</code> using the traditional ASCII\nencoding for each letter, but ASCII is a 128-character alphabet, and that would\nmake for an awkwardly-long list. Instead, let\'s make up our own encoding where\n<code>a</code> = 0, <code>b</code> = 1, <code>c</code> = 2, etc.:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">encoded_cabbage</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>Because <code>g</code> is the alphabetically largest letter in our string, we only need\n7 characters in our alphabet to spell it. And so, our bucket sizes are:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">findBucketSizes</span><span class=\"p\">(</span><span class=\"n\">encoded_cabbage</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>As predicted, the <code>a</code> bucket has two suffixes, <code>b</code> has two, <code>c</code> has one, <code>d</code>\nhas none, and so on.</p>\n<p>Now that we know how big each bucket is, it\'s simple to derive an array where\neach character\'s index points at the beginning of the corresponding bucket in\nthe suffix array:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">findBucketHeads</span><span class=\"p\">(</span><span class=\"n\">bucketSizes</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>     <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">size</span> <span class=\"ow\">in</span> <span class=\"n\">bucketSizes</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">size</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">res</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cabbage_buckets</span> <span class=\"o\">=</span> <span class=\"n\">findBucketSizes</span><span class=\"p\">(</span><span class=\"n\">encoded_cabbage</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">findBucketHeads</span><span class=\"p\">(</span><span class=\"n\">cabbage_buckets</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>The empty suffix always winds up at the beginning of the suffix array in index\n0, so the <code>a</code> bucket begins at index 1. There\'s two <code>a</code>s so the <code>b</code> bucket\nbegins at 3, and so on. Note that the buckets for <code>d</code> and <code>e</code> both begin at\nindex 6, but there\'s no <code>d</code> suffixes so that won\'t cause a problem.</p>\n<p>We can easily find the indexes of the end of each bucket in a similar fashion:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">findBucketTails</span><span class=\"p\">(</span><span class=\"n\">bucketSizes</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>     <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">size</span> <span class=\"ow\">in</span> <span class=\"n\">bucketSizes</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">size</span>\n<span class=\"o\">...</span>         <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">offset</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">res</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">findBucketTails</span><span class=\"p\">(</span><span class=\"n\">cabbage_buckets</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>And now, having covered all the background material, let\'s talk about the\nalgorithm itself.</p>\n\n<p>The SA-IS algorithm\'s name comes from the fact that it produces a Suffix Array\nby Induced Sorting. What is \"Induced Sorting\"? Well, the tricky part of\nbuilding a suffix array turns out to be the LMS suffixes. If you imagine\na simple string like \"AAAAA\", it\'s very easy to create a sorted suffix list\nbecause all the suffixes are L-type, so you can just list them out. LMS\nsuffixes are the knots in the string that make the problem hard, so if you have\nthem properly sorted it\'s easy to slot all the L-type and other S-type suffixes\ninto place.</p>\n<p>At a very high level, the SA-IS algorithm looks like this (don\'t worry about\nthe functions we haven\'t defined yet, we\'ll get to them in the following\nsections):</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">makeSuffixArrayByInducedSorting</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">alphabetSize</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s\">\"\"\"</span>\n<span class=\"s\">...     Compute the suffix array of \'string\' with the SA-IS algorithm.</span>\n<span class=\"s\">...     \"\"\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Classify each character of the string as S_TYPE or L_TYPE</span>\n<span class=\"o\">...</span>     <span class=\"n\">typemap</span> <span class=\"o\">=</span> <span class=\"n\">buildTypeMap</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># We\'ll be slotting suffixes into buckets according to what</span>\n<span class=\"o\">...</span>     <span class=\"c\"># character they start with, so let\'s precompute that info now.</span>\n<span class=\"o\">...</span>     <span class=\"n\">bucketSizes</span> <span class=\"o\">=</span> <span class=\"n\">findBucketSizes</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">alphabetSize</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Use a simple bucket-sort to insert all the LMS suffixes into</span>\n<span class=\"o\">...</span>     <span class=\"c\"># approximately the right place the suffix array.</span>\n<span class=\"o\">...</span>     <span class=\"n\">guessedSuffixArray</span> <span class=\"o\">=</span> <span class=\"n\">guessLMSSort</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">bucketSizes</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Slot all the other suffixes into guessedSuffixArray, by using</span>\n<span class=\"o\">...</span>     <span class=\"c\"># induced sorting. This may move the LMS suffixes around.</span>\n<span class=\"o\">...</span>     <span class=\"n\">induceSortL</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">guessedSuffixArray</span><span class=\"p\">,</span> <span class=\"n\">bucketSizes</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">induceSortS</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">guessedSuffixArray</span><span class=\"p\">,</span> <span class=\"n\">bucketSizes</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Create a new string that summarises the relative order of LMS</span>\n<span class=\"o\">...</span>     <span class=\"c\"># suffixes in the guessed suffix array.</span>\n<span class=\"o\">...</span>     <span class=\"n\">summaryString</span><span class=\"p\">,</span> <span class=\"n\">summaryAlphabetSize</span><span class=\"p\">,</span> <span class=\"n\">summarySuffixOffsets</span> <span class=\"o\">=</span> \\\n<span class=\"o\">...</span>         <span class=\"n\">summariseSuffixArray</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">guessedSuffixArray</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Make a sorted suffix array of the summary string.</span>\n<span class=\"o\">...</span>     <span class=\"n\">summarySuffixArray</span> <span class=\"o\">=</span> <span class=\"n\">makeSummarySuffixArray</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>         <span class=\"n\">summaryString</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"n\">summaryAlphabetSize</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Using the suffix array of the summary string, determine exactly</span>\n<span class=\"o\">...</span>     <span class=\"c\"># where the LMS suffixes should go in our final array.</span>\n<span class=\"o\">...</span>     <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">accurateLMSSort</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">bucketSizes</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>             <span class=\"n\">summarySuffixArray</span><span class=\"p\">,</span> <span class=\"n\">summarySuffixOffsets</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># ...and once again, slot all the other suffixes into place with</span>\n<span class=\"o\">...</span>     <span class=\"c\"># induced sorting.</span>\n<span class=\"o\">...</span>     <span class=\"n\">induceSortL</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">bucketSizes</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">induceSortS</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">bucketSizes</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre></div>\n\n\n<p>As an aid to illustrating the algorithm in action, we\'ll use the following\nfunction to show the state of a suffix array in progress. We\'ll store -1 in\nsuffix array elements that are uninitialised, and since we\'ll be demonstrating\nthis algorithm on short strings, we can get away with assuming each offset will\nbe one or two digits long (the same length as \"-1\") and render intermediate\nstates of a suffix array like this:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">showSuffixArray</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\" \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%02d</span><span class=\"s\">\"</span> <span class=\"o\">%</span> <span class=\"n\">each</span> <span class=\"k\">for</span> <span class=\"n\">each</span> <span class=\"ow\">in</span> <span class=\"n\">arr</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\" \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>                 <span class=\"s\">\"^^\"</span> <span class=\"k\">if</span> <span class=\"n\">each</span> <span class=\"o\">==</span> <span class=\"n\">pos</span> <span class=\"k\">else</span> <span class=\"s\">\"  \"</span>\n<span class=\"o\">...</span>                 <span class=\"k\">for</span> <span class=\"n\">each</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>         <span class=\"p\">))</span>\n</pre></div>\n\n\n<p>This shows all the offsets in a suffix array:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">showSuffixArray</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"mo\">02</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"mo\">04</span>\n</pre></div>\n\n\n<p>...and it also allows an individual cell in the array to be highlighted, to\nshow the progress of whatever part of the algorithm we\'re looking at:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">showSuffixArray</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mo\">02</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"mo\">04</span>\n      <span class=\"o\">^^</span>\n</pre></div>\n\n\n<h2>The first guess</h2>\n<p>We don\'t yet know exactly where our LMS suffixes should go in our sufffix\narray, so we start by putting them in approximately the right place with\na bucket sort. All else being equal, a longer suffix (one occurring earlier in\nthe string) sorts after a shorter suffix (one occurring later), so we\'ll go\nthrough the string from left-to-right and stack each LMS suffix we find at the\ntail-end of its bucket.</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">guessLMSSort</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">bucketSizes</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s\">\"\"\"</span>\n<span class=\"s\">...     Make a suffix array with LMS-substrings approximately right.</span>\n<span class=\"s\">...     \"\"\"</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Create a suffix array with room for a pointer to every suffix of</span>\n<span class=\"o\">...</span>     <span class=\"c\"># the string, including the empty suffix at the end.</span>\n<span class=\"o\">...</span>     <span class=\"n\">guessedSuffixArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"n\">bucketTails</span> <span class=\"o\">=</span> <span class=\"n\">findBucketTails</span><span class=\"p\">(</span><span class=\"n\">bucketSizes</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># Bucket-sort all the LMS suffixes into their appropriate bucket.</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)):</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">isLMSChar</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>             <span class=\"c\"># Not the start of an LMS suffix</span>\n<span class=\"o\">...</span>             <span class=\"k\">continue</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"c\"># Which bucket does this suffix go into?</span>\n<span class=\"o\">...</span>         <span class=\"n\">bucketIndex</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>         <span class=\"c\"># Add the start position at the tail of the bucket...</span>\n<span class=\"o\">...</span>         <span class=\"n\">guessedSuffixArray</span><span class=\"p\">[</span><span class=\"n\">bucketTails</span><span class=\"p\">[</span><span class=\"n\">bucketIndex</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n<span class=\"o\">...</span>         <span class=\"c\"># ...and move the tail pointer down.</span>\n<span class=\"o\">...</span>         <span class=\"n\">bucketTails</span><span class=\"p\">[</span><span class=\"n\">bucketIndex</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"c\"># Show the current state of the array</span>\n<span class=\"o\">...</span>         <span class=\"n\">showSuffixArray</span><span class=\"p\">(</span><span class=\"n\">guessedSuffixArray</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># The empty suffix is defined to be an LMS-substring, and we know</span>\n<span class=\"o\">...</span>     <span class=\"c\"># it goes at the front.</span>\n<span class=\"o\">...</span>     <span class=\"n\">guessedSuffixArray</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"n\">showSuffixArray</span><span class=\"p\">(</span><span class=\"n\">guessedSuffixArray</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">guessedSuffixArray</span>\n</pre></div>\n\n\n<p>So now we can guess the positions of the LMS substrings in our string, leaving\nall the other positions set to -1:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cabbage_buckets</span> <span class=\"o\">=</span> <span class=\"n\">findBucketSizes</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'cabbage\'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cabbage_types</span> <span class=\"o\">=</span> <span class=\"n\">buildTypeMap</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'cabbage\'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cabbage_guess</span> <span class=\"o\">=</span> <span class=\"n\">guessLMSSort</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'cabbage\'</span><span class=\"p\">,</span> <span class=\"n\">cabbage_buckets</span><span class=\"p\">,</span> <span class=\"n\">cabbage_types</span><span class=\"p\">)</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"mo\">01</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"mo\">04</span> <span class=\"mo\">01</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"mo\">07</span> <span class=\"mo\">04</span> <span class=\"mo\">01</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>Because <code>guessLMSSort()</code> calls <code>showSuffixArray()</code> at various points of the\nprocess, we can trace its operation:</p>\n<ul><li>the first LMS suffix it finds is <code>abbage</code> at index 1 in the string, so it\n  puts that at the end of the <code>a</code> bucket</li>\n<li>the next LMS suffix it finds is <code>age</code> at index 4, so it puts that immediately\n  before <code>abbage</code></li>\n<li>we hit the end of the source string, so we add the empty suffix at position\n  0 in the suffix array</li>\n</ul><p>To fill in the rest of the positions, we\'re going to use \"induced sorting\";\nthat is, determining where to put the other suffixes based on what\'s already in\nthe array.</p>\n<h2>Induced sorting: L-type suffixes</h2>\n<p>Now that we have the LMS suffixes in our suffix array, we can extrapolate where\nall the other suffixes go. We start by scanning through our temporary suffix\narray and for each listed suffix, we check the suffix to the <em>left</em> of it in\nthe original string - if that\'s L-type, we\'ll bucket-sort that one too.</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">induceSortL</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">guessedSuffixArray</span><span class=\"p\">,</span> <span class=\"n\">bucketSizes</span><span class=\"p\">,</span> <span class=\"n\">typemap</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s\">\"\"\"</span>\n<span class=\"s\">...     Slot L-type suffixes into place.</span>\n<span class=\"s\">...     \"\"\"</span>\n<span class=\"o\">...</span>     <span class=\"n\">bucketHeads</span> <span class=\"o\">=</span> <span class=\"n\">findBucketHeads</span><span class=\"p\">(</span><span class=\"n\">bucketSizes</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"c\"># For each cell in the suffix array....</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">guessedSuffixArray</span><span class=\"p\">)):</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"n\">guessedSuffixArray</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"c\"># No offset is recorded here.</span>\n<span class=\"o\">...</span>             <span class=\"k\">continue</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"c\"># We\'re interested in the suffix that begins to the left of</span>\n<span class=\"o\">...</span>         <span class=\"c\"># the suffix this entry points at.</span>\n<span class=\"o\">...</span>         <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">guessedSuffixArray</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"c\"># There is no useful information in the typemap at this</span>\n<span class=\"o\">...</span>             <span class=\"c\"># location; skip it.</span>\n<span class=\"o\">...</span>             <span class=\"k\">continue</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"n\">typemap</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">L_TYPE</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"c\"># We\'re only interested in L-type suffixes right now.</span>\n<span class=\"o\">...</span>             <span class=\"k\">continue</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"c\"># Which bucket does this suffix go into?</span>\n<span class=\"o\">...</span>         <span class=\"n\">bucketIndex</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>         <span class=\"c\"># Add the start position at the head of the bucket...</span>\n<span class=\"o\">...</span>         <span class=\"n\">guessedSuffixArray</span><span class=\"p\">[</span><span class=\"n\">bucketHeads</span><span class=\"p\">[</span><span class=\"n\">bucketIndex</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\n<span class=\"o\">...</span>         <span class=\"c\"># ...and move the head pointer up.</span>\n<span class=\"o\">...</span>         <span class=\"n\">bucketHeads</span><span class=\"p\">[</span><span class=\"n\">bucketIndex</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>         <span class=\"n\">showSuffixArray</span><span class=\"p\">(</span><span class=\"n\">guessedSuffixArray</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>If we feed this function our guess from before, we can watch it propagate\nL-type suffixes into the array:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">induceSortL</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'cabbage\'</span><span class=\"p\">,</span> <span class=\"n\">cabbage_guess</span><span class=\"p\">,</span> <span class=\"n\">cabbage_buckets</span><span class=\"p\">,</span> <span class=\"n\">cabbage_types</span><span class=\"p\">)</span>\n<span class=\"mo\">07</span> <span class=\"mo\">04</span> <span class=\"mo\">01</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"mo\">06</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">^^</span>                     \n<span class=\"mo\">07</span> <span class=\"mo\">04</span> <span class=\"mo\">01</span> <span class=\"mo\">03</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"mo\">06</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n   <span class=\"o\">^^</span>                  \n<span class=\"mo\">07</span> <span class=\"mo\">04</span> <span class=\"mo\">01</span> <span class=\"mo\">03</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"mo\">00</span> <span class=\"mo\">06</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n      <span class=\"o\">^^</span>               \n<span class=\"mo\">07</span> <span class=\"mo\">04</span> <span class=\"mo\">01</span> <span class=\"mo\">03</span> <span class=\"mo\">02</span> <span class=\"mo\">00</span> <span class=\"mo\">06</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n         <span class=\"o\">^^</span>            \n<span class=\"mo\">07</span> <span class=\"mo\">04</span> <span class=\"mo\">01</span> <span class=\"mo\">03</span> <span class=\"mo\">02</span> <span class=\"mo\">00</span> <span class=\"mo\">06</span> <span class=\"mo\">05</span>\n                  <span class=\"o\">^^</span>\n</pre></div>\n\n\n<p>Tracing through the output above, we can see what it\'s done:</p>\n<ul><li>we start at the first cell in the suffix array, which represents the empty\n  suffix at the end of the string</li>\n<li>the character before the empty suffix is <code>e</code> at offset 6, so we slot 6 into\n  the <code>e</code> bucket</li>\n<li>the next cell has the suffix <code>age</code> at offset 4, and the suffix to the left of\n  it is the L-type suffix <code>bage</code> at offset 3, so we slot 3 into the <code>b</code> bucket</li>\n<li>next is <code>abbage</code> at offset 1, offset 0 has the L-type suffix <code>cabbage</code>, so we\n  slot 0 into the <code>c</code> bucket</li>\n<li>we find <code>bage</code> at offset 3, which we stored two steps ago - but the\n  suffix at offset 2 (<code>bbage</code>) is still L-type, so we slot it into the <code>b</code>\n  bucket</li>\n<li>we find <code>bbage</code> at offset 2, but the suffix to its left is not L-type so\n  we move on</li>\n<li>we find <code>cabbage</code> at offset 0, but there\'s nothing to its left, so we\n  move on</li>\n<li>we find <code>e</code> at offset 6, and the suffix at offset 5 (<code>ge</code>) is L-type, so\n  we slot it into the <code>g</code> bucket</li>\n<li>we find <code>ge</code> at offest 5, but the suffix to its left is not L-type, so we\'re\n  done</li>\n</ul><p>If we compare the above output to the result of the naive algorithm...</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">showSuffixArray</span><span class=\"p\">(</span><span class=\"n\">naivelyMakeSuffixArray</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"s\">\'cabbage\'</span><span class=\"p\">))</span>\n<span class=\"mo\">07</span> <span class=\"mo\">01</span> <span class=\"mo\">04</span> <span class=\"mo\">03</span> <span class=\"mo\">02</span> <span class=\"mo\">00</span> <span class=\"mo\">06</span> <span class=\"mo\">05</span>\n</pre></div>\n\n\n<p>...we can see that we already have something fairly close to the correct\nanswer. That\'s partially because of the power of induced sorting, but also\nbecause <code>cabbage</code> is a pretty easy string to begin with: it only has two S-type\nsuffixes, and they\'re both LMS suffixes. Let\'s investigate a more complex\nstring:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">baa</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"s\">\'baabaabac\'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">showTypeMap</span><span class=\"p\">(</span><span class=\"n\">baa</span><span class=\"p\">)</span>\n<span class=\"n\">baabaabac</span>\n<span class=\"n\">LSSLSSLSLS</span>\n <span class=\"o\">^</span>  <span class=\"o\">^</span>  <span class=\"o\">^</span> <span class=\"o\">^</span>\n</pre></div>\n\n\n<p>This string has six S-type suffixes, only four of which are LMS-suffixes. If\nwe duplicate what we did with <code>cabbage</code> on this new string...</p>\n<div class=\"codehilite\"><pre><span class=',1),(112,'Install Sandstorm','https://sandstorm.io/install/',1,0,'\n<p>The install script prints the URL of your server\'s admin panel. Follow that link.</p>\n<p>Your first action with Sandstorm is to use the <em>admin panel</em> to choose Google login,\nGitHub login, or email login.</p>\n<p>Once you\'ve configured login, log in! The first user to log in is automatically admin.</p>\n',1),(113,'whose xterm is it anyway?','http://www.tedunangst.com/flak/post/whose-xterm-is-it-anyway',0,0,'\n<p>\nAs part of the effort to <a href=\"http://www.tedunangst.com/flak/post/rough-idling\">find idle hogs</a>, I noticed some xterms were heavier than others.</p><p> 9960 tedu       2    0 7056K   12M sleep     select    0:08  0.00% xterm\n15257 tedu       2    0 6808K   12M sleep     select    0:01  0.00% xterm\n10960 tedu       2    0 6924K   12M idle      select    0:01  0.00% xterm\n25365 tedu       2    0 6796K   12M sleep     select    0:01  0.00% xterm\n</p><p>\nHow did inmate 9960 come to acquire 8 whole seconds of CPU time? For that matter, which xterm is it? The answer to the second will likely reveal the first.</p><p>\nLooking around, all my xterms are currently idle. Just as indicated by top. How do we turn a pid into a window?</p><h4>brute force</h4><p>\nThe brute, or even brutal, force technique is to quit each xterm one by one until 9960 goes away. A nicer approach is to send SIGSTOP to each xterm and see which one stops responding. (Alas, if xterm is setgid, you may not be able to SIGCONT it afterwards. Less nice.) Or run <span class=\"code\">find /</span> in each xterm while watching top to see who lights up. All a bit intrusive, but wasn’t it Heisenberg who proved there can be no observation without modification? Actually no, though observer effect is a real thing. Nevertheless, we can do a better job of observing xterms without pummeling them to see which one bruises.</p><p>\nLet’s start with ps.</p><p> 2157 p9  Ss      0:00.02 -ksh (ksh)\n17271 p9  R+      0:00.00 ps\n30407 pa  Ss      0:00.05 -ksh (ksh)\n   79 pa  S+      0:00.16 vim kern_sig.c\n20564 pb  Is+     0:00.01 -ksh (ksh)\n21379 pc  Is+     0:00.03 -ksh (ksh)\n  236 pd  Is      0:00.02 -ksh (ksh)\n 3583 pd  S+      0:00.38 top\n</p><p>\nThe second column is controlling terminal. So we have some hints. I now know which terminal is running ps, and which is running top, and which is finding out why SIGCONT doesn’t work. But no xterms, unless we run ps x.</p><p> 9960 ??  Is      0:07.80 xterm\n24106 ??  Is      0:00.66 xterm\n24358 ??  Is      0:00.25 xterm\n</p><p>\nxterms don’t have controlling terminals; instead they control the terminal. But this is still useful info to have.</p><p>&gt; fstat -p 9960\nUSER     CMD          PID   FD MOUNT        INUM MODE       R/W    SZ|DV\ntedu     xterm       9960 text /usr       702660 -rwxr-sr-x   r   596224\ntedu     xterm       9960   wd /home     1611008 drwxr-xr-x   r     2560\ntedu     xterm       9960    0 /          182659 crw-------  rw    ttyC0\ntedu     xterm       9960    1 /          183026 crw-rw-rw-   w     null\ntedu     xterm       9960    2 /          183026 crw-rw-rw-   w     null\ntedu     xterm       9960    3* unix stream 0x0\ntedu     xterm       9960    4 /          182379 crw-rw-rw-  rw    ptyp1\n</p><p>\nThere it is. We’re looking at p1.</p><p>&gt; pgrep -lf -t p1\n6988 -ksh\n</p><p>\nAnother approach is would be to run <span class=\"code\">ps -O ppid</span> (or <span class=\"code\">pgrep -lf -P 9960</span>) and look for the shell with a parent of 9960, and walk back up. Either way, it’s one of the dozen xterms sitting there with an idle shell, which is a hint not an answer. Running around and pasting <span class=\"code\">echo $$</span> in each shell would find the suspect. Or I could run <span class=\"code\">write tedu ttyp1</span> and look for the graffiti.</p><p>\nWe can also continue further on this path, inspecting the working directory for each shell, and then narrowing our search to those xterms, but maybe it’s time to switch techniques.</p><h4>just ask</h4><p>\nA smarter approach would be to just ask. In theory, every xterm has a <em>_NET_WM_PID</em> property that is equal to its pid. This can be retrieved by running <em>xprop</em> and clicking the window. Or using the -id argument. Then we need all the xterm window IDs, which can be obtained via xwininfo.</p><p>&gt; xwininfo -root -children | grep XTerm | awk \'{print $1}\' | \\\n    xargs -n1 -I % sh -c \"echo %; xprop -id % _NET_WM_PID\"\n0xe0000d\n_NET_WM_PID(CARDINAL) = 24106\n0xc0000d\n_NET_WM_PID(CARDINAL) = 9960\n0xa0000d\n_NET_WM_PID(CARDINAL) = 25365\n</p><p>\nArmed with the window ID, we can feed it back to xwininfo.</p><p>&gt; xwininfo -id 0xc0000d\nxwininfo: Window id: 0xc0000d \"Thanks for flying Vim\"\n  Corners:  +-2542+15  -3831+15  -3831-12  +-2542-12\n  -geometry 115x67+-2542-12\n</p><p>\nAlight, so this xterm is off screen somewhere, but the geometry maybe gives us another hint as to which it is based on size. And it once upon a time ran vim, which fiddles with the title. Interesting, but we’d like something a little more obvious.</p><p>&gt; xwd -id 0xc0000d | xwud \nX Error of failed request:  BadMatch (invalid parameter attributes)\n  Major opcode of failed request:  73 (X_GetImage)\n  Serial number of failed request:  95\n  Current serial number in output stream:  95\nxwud: Error =&gt; Unable to read dump file header.\nxwud: Resource temporarily unavailable\n</p><p>\nDamn. I was hoping for <em>Woah! A new exact duplicate of 9960 has appeared. So that’s which one it is.</em> but no dice. Depends on the suspect window being on screen. But if we can get all the windows on screen (dwm ”0” screen) either this or the above approach can work.</p><p>\nFor funsies, there’s a Stack Overflow answer dedicated to <a href=\"http://unix.stackexchange.com/questions/5478/what-process-created-this-x11-window\">finding the pid for an X11 window</a>, which is the reverse process.</p><h4>inferno</h4><p>\nWe’re moving well past the point of no return now. Instead of using X to spy on our xterm, we can do so ourselves. This can be done using gdb, for instance. Unfortunately, other people would do it that way. How hard can it be to write a one off single purpose debugger?</p><p>\nStep one of our journey is gazing into the xterm source code. Eventually one will discover that there is a <em>LineData</em> structure with a pointer to what appears to be character data. There’s an array of these, one for each line. But there is not an obvious pointer to this array. Instead it’s accessed using a variety of casts, offsets, and pointer arithmetic, but the base pointer is <em>visbuf</em> in something called <em>TScreen</em>, a giant structure that takes over 500 lines of code to declare. That is embedded in an <em>XTermWidget</em>, and (thank the heavens!) there is a global pointer to one of these called <em>term</em>, bringing our trek to an end.</p><p>\nAll we need to do now is write a debugger that iteratively reads each:</p><p>\n<span class=\"code\">((LineData *)(term-&gt;screen.visbuf + offset))-&gt;chardata</span>.</p><p>\nOpenBSD includes a useful <em>sysctl</em> for examining the address space of another process. Through arcane magic not explained here (procmap), I know the xterm I’m looking at has a text segment of 540672 bytes. We can find it programmatically thusly:</p><p><span>local</span> <span>function</span> <span>findexecbase</span>(pid, execsize)\n        <span>local</span> mib <span>=</span> ffi.new(<span>\"int[3]\"</span>)\n        mib[<span>0</span>] <span>=</span> CTL_KERN\n        mib[<span>1</span>] <span>=</span> KERN_PROC_VMMAP\n        mib[<span>2</span>] <span>=</span> pid\n        <span>local</span> numents <span>=</span> <span>200</span>\n        <span>local</span> ents <span>=</span> ffi.new(<span>\"struct vmentry[?]\"</span>, numents)\n        <span>local</span> entsize <span>=</span> ffi.sizeof(<span>\"struct vmentry\"</span>)\n        <span>local</span> oldsize <span>=</span> ffi.new(<span>\"size_t[1]\"</span>)\n        oldsize[<span>0</span>] <span>=</span> entsize <span>*</span> numents\n        <span>local</span> rv <span>=</span> C.sysctl(mib, <span>3</span>, ents, oldsize, <span>nil</span>, <span>0</span>)\n        <span>if</span> rv <span>==</span> <span>-1</span> <span>then</span>\n                <span>return</span> <span>nil</span>\n        <span>end</span>\n        <span>for</span> i <span>=</span> <span>0</span>, <span>tonumber</span>(oldsize[<span>0</span>]) <span>/</span> numents <span>-</span> <span>1</span> <span>do</span>\n                <span>local</span> ent <span>=</span> ents[i]\n                <span>if</span> (<span>tonumber</span>(ent.kve_end) <span>-</span> <span>tonumber</span>(ent.kve_start)) <span>==</span> execsize <span>and</span>\n                                ent.kve_prot <span>==</span> PROT_RW <span>then</span>\n                        <span>return</span> ent.kve_start\n                <span>end</span>\n        <span>end</span>\n<span>end</span>\n<span>local</span> addr <span>=</span> findexecbase(pid, <span>540672</span>)</p><p>\nUsing further magic (I’m cheating a bit, but basically <span class=\"code\">nm xterm | grep term$</span>), we know the offset from there to <em>term</em>, and then we can start chasing pointers with <em>ptrace</em>. Offsets calculated by compiling an xterm with a <em>printf</em> of interesting values.</p><p><span>local</span> <span>function</span> <span>pread</span>(addr)\n        <span>local</span> v <span>=</span> C.ptrace(PT_READ_D, pid, addr, <span>0</span>)\n        v <span>=</span> <span>tonumber</span>(v)\n        <span>if</span> v <span>&lt;</span> <span>0</span> <span>then</span>\n                v <span>=</span> v <span>+</span> <span>4294967296</span>\n        <span>end</span>\n        <span>return</span> v\n<span>end</span>\n\n<span>local</span> <span>function</span> <span>preadptr</span>(addr)\n        <span>local</span> p1 <span>=</span> pread(addr)\n        <span>local</span> p2 <span>=</span> pread(addr <span>+</span> <span>4</span>)\n        <span>return</span> p1 <span>+</span> p2 <span>*</span> <span>4294967296</span>\n<span>end</span>\n\nrv <span>=</span> C.ptrace(PT_ATTACH, pid, <span>0</span>, <span>0</span>)\nrv <span>=</span> C.waitpid(pid, <span>nil</span>, <span>0</span>)\naddr <span>=</span> addr <span>+</span> <span>4912632</span> <span>-- offset of term</span>\naddr <span>=</span> preadptr(addr) <span>--read term</span>\naddr <span>=</span> addr <span>+</span> <span>392</span> <span>-- offset of term-&gt;screen</span>\naddr <span>=</span> addr <span>+</span> <span>15496</span> <span>-- offset of screen.visbuf</span>\naddr <span>=</span> preadptr(addr)\n<span>print</span>(<span>\"SCREEN DUMP\"</span>)\n<span>for</span> row <span>=</span> <span>0</span>, <span>10</span> <span>do</span>\n        <span>local</span> datadr <span>=</span> preadptr(addr <span>+</span> row <span>*</span> <span>48</span> <span>+</span> <span>24</span>)\n        <span>local</span> s <span>=</span> { }\n        <span>for</span> i <span>=</span> <span>0</span>, <span>80</span> <span>do</span>\n                <span>local</span> v <span>=</span> pread(datadr <span>+</span> i <span>*</span> <span>4</span>)\n                <span>table.insert</span>(s, <span>string.char</span>(v))\n        <span>end</span>\n        <span>print</span>(<span>table.concat</span>(s))\n<span>end</span>\nrv <span>=</span> C.ptrace(PT_DETACH, pid, <span>0</span>, <span>0</span>)</p><p>\nLet it rip and...</p><p>SCREEN DUMP\n    if (row &gt;= 0 &amp;&amp; row &lt;= max_row) {                                            \n        result = (LineData *) scrnHeadAddr(screen, buffer, (unsigned) row);      \n        if (result != 0) {                                                       \n#if 1                           /* FIXME - these should be done in setupLineData,\n            result-&gt;lineSize = (Dimension) MaxCols(screen);                      \n#if OPT_WIDE_CHARS                                                               \n            if (screen-&gt;wide_chars) {                                            \n                result-&gt;combSize = (Char) screen-&gt;max_combining;                 \n            } else {                                                             \n                result-&gt;combSize = 0;                                            \n            }                                                                    \n</p><p>\nHey! Now that does look familiar. It’s the source code to the line getting function in xterm. Now I know exactly which window it is.</p><h4>epilogue</h4><p>\nThis was a pretty big waste of time. As soon as I saw that one xterm was busier than the rest, I knew exactly which one it was: the one I read mail in, which has to redraw the screen for every email. This was trivially confirmed using any of the brute force techniques which work well enough with some educated guesswork guiding them. Learning to script gdb may have been faster, but a lot less fun.\n</p>',1),(114,'WSO2 Machine Learner: Why would You care?','https://iwringer.wordpress.com/2015/09/25/wso2-machine-learner-why-would-you-care/',0,0,'\n		<p>After about a year worth of work, WSO2 Machine Learner (WSO2 ML) is officially out. You can find the pack from http://wso2.com/products/machine-learner/ ( also <a href=\"https://github.com/wso2/product-ml\">Code</a> and <a href=\"https://docs.wso2.com/display/ML100/Introducing+Machine+Learner\">User Guide</a>). It is free and Opensource under Apache Licence ( which pretty much means you can do whatever with the code as long as you keep the same Licence).</p>\n<p>Let me try to answer “the question”. How is it different and why would you care?</p>\n\n<p>The short answer is it is a Wizard and a system on top of Apache Spark MLLib. The long answer is the following picture.</p>\n<p><img class=\"aligncenter wp-image-488\" src=\"https://iwringer.files.wordpress.com/2015/09/ml-overview.png?w=561&amp;h=302\" alt=\"ML-overview\" width=\"561\" height=\"302\" /></p>\n<p>You can use it to do the following</p>\n<ol><li>User can start with data ( in his disk, in HDFS, or in WSO2 DAS)</li>\n<li>Explore the data ( more about that later)</li>\n<li>Create a Project and build machine learning models going through a Wizard</li>\n<li>Compare those models and find the best model</li>\n<li>Export that model and use it with WSO2 CEP, WSO2 ESB, or from Java Code.</li>\n</ol><p>WSO2 Machine Learner is designed for the Enterprise world. It comes as an integrated solution with the rest of the Big Data processing technologies: batch, realtime, and interactive analytics. Also, it includes support from data collection, analysis,  to communication (e.g. visualizations, APIs, and alerts). Please see the earlier post “<a href=\"https://iwringer.wordpress.com/2015/03/18/introducing-wso2-analytics-platform-note-for-architects/\">Introducing WSO2 Analytics Platform: Note for Architects</a>” for more details.  Hence, it is part of a complete analytics solution.</p>\n<p>WSO2 ML handles the full predictive analytics lifecycle, including model deployment and management.</p>\n<p><a href=\"https://iwringer.files.wordpress.com/2015/09/mldeployment.png\"><img class=\"wp-image-498 aligncenter\" src=\"https://iwringer.files.wordpress.com/2015/09/mldeployment.png?w=368&amp;h=280\" alt=\"MLDeployment\" width=\"368\" height=\"280\" /></a></p>\n<p>If you are already collecting data, we can pull that data, process them, and build models. Models you built are immediately available to use from your main transaction flow ( via WSO2 ESB) or  data analysis flow ( via WSO2 CEP). Basically, you copy the model ID and add it to WSO2 ESB mediation scripts or WSO2 CEP queries, and now you have a Machine Learning integrated into your business. (Please see in <a href=\"https://docs.wso2.com/display/ML100/Using+Models\">Using Models</a> for more information.) This handles details like keeping a central store of Models while deploying models in production and also let you quickly switch between models.</p>\n<p>If you are not collecting data, you can start with WSO2 DAS and go from there. The same story holds.</p>\n<p>Furthermore, it gives you the concept of a project where you can try out and keep track of multiple machine learning models. Also, it handles details like sending you an email when a long running machine learning algorithm execution has completed.</p>\n<p>Finally, as we discuss in the next section, the ML Wizard is built such a way that you can use it with minimal understanding about Machine Learning. Sure, you will not get the same accuracy as the experts who will know how to tune the thing, but it can get you started and give you OK accuracy.</p>\n\n<p>First of all, you need to understand what Machine Learning can do for you. Most problems, we know the exact steps to be followed to solve the problem. With those kinds of problems, all we have to do is to write a code that does those steps. This is what we call programming and lot of us do this day in day out.</p>\n<p>However, there are other problems that you will learn by example. Driving a car, cycling, and drawing a picture are problems that we learn by looking at examples. If you want a computer to solve those problems, you cannot write a program to solve them because you do not know the algorithm. Machine Learning is used to solve specifically those problems. Instead of the algorithm, you give it lots of examples, and Machine Learning will learn a model (a function) from those examples. You can use the model to solve your initial problem. Google’s driverless car does exactly this.</p>\n<p>If you are new to Machine Learning, I highly recommend looking at <a href=\"http://www.r2d3.us/visual-intro-to-machine-learning-part-1/\">A Visual Introduction to Machine Learning</a> and the following talk by Ron Beckerman.</p>\n<div class=\"jetpack-video-wrapper\"><span class=\"embed-youtube\"><iframe class=\"youtube-player\" width=\"656\" height=\"399\" src=\"https://www.youtube.com/embed/wjTJVhmu1JM?version=3&amp;rel=1&amp;fs=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;wmode=transparent\" frameborder=\"0\">[embedded content]</iframe></span></div>\n<p>The Machine Learner wizard tries to model the experience around what you want to do as oppose to showing you lot of ML algorithms. For example, you can choose to predict the next value, classify something to a one of the categories, or detect an anomaly. You can click through, use defaults, and get a model. You can try several algorithms and compare them with each other.</p>\n<p>We support several standard techniques to compare ML models such as ROC curve, confusion Matrix, etc. CD’s blog post “<a href=\"https://cdathuraliya.wordpress.com/2015/09/17/wso2-ml-machine-learning-for-everone/\">Machine Learning for Everyone</a>” talks about this in detail.</p>\n<p>For example, following confusion matrix shows how much of true positives, false negatives etc resulted from the model.</p>\n<p><img class=\"wp-image-494 aligncenter\" src=\"https://iwringer.files.wordpress.com/2015/09/confusion-matrix_r.png?w=510&amp;h=167\" alt=\"confusion-matrix_r\" width=\"510\" height=\"167\" /></p>\n<p>The figure on the left chart shows a scatter plot of data points that are predicted correctly and incorrectly while the right-hand side shows the RoC curve.</p>\n<p><img class=\"wp-image-493 alignleft\" src=\"https://iwringer.files.wordpress.com/2015/09/predicted-vs-actual.png?w=285&amp;h=197\" alt=\"predicted-vs-actual\" width=\"285\" height=\"197\" /></p>\n<p><img class=\"wp-image-495 alignleft\" src=\"https://iwringer.files.wordpress.com/2015/09/roc-graph.png?w=288&amp;h=193\" alt=\"roc-graph\" width=\"288\" height=\"193\" /></p>\n<p>However, at this point I suggest that you read <a href=\"http://blog.dato.com/how-to-evaluate-machine-learning-models-part-2a-classification-metrics\">How to Evaluate Machine Learning Models: Classification Metrics</a> by <a class=\"author-link\" href=\"http://blog.dato.com/author/alice-zheng\">Alice Zheng</a>. It is ok to not to know how ML algorithms work, but you must know what models are better and why.</p>\n<p>However, there is a catch. If you try well known Machine Learning datasets, they would work well ( You can find few of such data sets from the sample directory of the pack). However, sometimes with real datasets, getting good results need transforming features into different features, and that might be beyond you if you have just started. If you want to go pro and learn to transform features ( a.k.a. Feature Engineering) and other fascinating stuff, then Andrew Ng’s famous course <a href=\"https://www.coursera.org/learn/machine-learning\">https://www.coursera.org/learn/machine-learning</a> is the best place to start.</p>\n\n<p>If you are an ML expert, still WSO2 Machine Learner can help in several ways.</p>\n<p>First, it provides pretty sophisticated support for exploring the dataset based on a random sample. This includes scatter plots for looking at any two numerical features, parallel sets for looking at categorical data, Trellis sets for looking at 4-5 numerical dimensions at the same time, and cluster diagrams ( see below for some examples).</p>\n<p><a href=\"https://iwringer.files.wordpress.com/2015/09/cluster-diagram.png\"><img class=\"wp-image-500 alignleft\" src=\"https://iwringer.files.wordpress.com/2015/09/cluster-diagram.png?w=302&amp;h=200\" alt=\"cluster-diagram\" width=\"302\" height=\"200\" /></a> <a href=\"https://iwringer.files.wordpress.com/2015/09/trellis-chart.png\"><img class=\"wp-image-501 alignleft\" src=\"https://iwringer.files.wordpress.com/2015/09/trellis-chart.png?w=282&amp;h=223\" alt=\"trellis-chart\" width=\"282\" height=\"223\" /></a> <a href=\"https://iwringer.files.wordpress.com/2015/09/parallel-set.png\"><img class=\"aligncenter wp-image-502\" src=\"https://iwringer.files.wordpress.com/2015/09/parallel-set.png?w=330&amp;h=224\" alt=\"parallel-set\" width=\"330\" height=\"224\" /></a></p>\n<p>Second, it gives you access to a large collection of scalable machine learning algorithms pretty easily. For a single node setup, you just download and unzip it. ( see below for how to do it).</p>\n<p>Third, it provides an extensive set of model comparison measures as visualizations and also let you compare models side by side.</p>\n<p>Fourth, in addition to predictive analytics, you have access to batch analytics though SparkSQL, interactive analytics with Lucence, and relatime analytics through WSO2 CEP. This will make understanding dataset as well as preprocessing data much easier. One limitation of this release is that those other types of analytics must be done before using data within WSO2 ML. However, the next release will enable you to run queries within the WSO2 ML pipeline as well.</p>\n<p>Finally, you will also have all advantages listed under enterprise user such as seamless deployment of models and ability to switch the model easily.</p>\n<p>Furthermore, many interesting features are coming shortly in the next release.</p>\n<ul><li>Support for Deep Learning and Neural Networks</li>\n<li>Support for out of the Box Anomaly detection using Markov Chains and Clustering</li>\n<li>Support to data cleanup and preprocessing using Data Wrangler and SparkSQL</li>\n<li>Support for out of the box ensembles that let you combine models</li>\n<li>Improvements to pipeline to warn the user on cases like class imbalances in classifications</li>\n</ul><p>Carry out following steps</p>\n<ol><li>Download WSO2 ML from <a href=\"http://wso2.com/products/machine-learner/\">http://wso2.com/products/machine-learner/</a></li>\n<li>Make sure you have Java 7 installed in your machine and set JAVA_HOME.</li>\n<li>Unzip the pack and run bin/wso2server.sh from the unpacked directory. Wait for WSO2 ML to start.</li>\n<li>Go to <a href=\"https://hostname:9443/ml\">https://hostname:9443/ml</a> and Login using username admin and password admin.</li>\n<li>Now you can upload your own dataset and follow along with the wizard. You can find more info from the <a href=\"https://docs.wso2.com/display/ML100/Introducing+Machine+Learner\">User Guide</a>. However, Wizard should be self-explanatory.</li>\n</ol><p>Remember, it is all free under apache Licence. Give it a try, and we will love to hear your thoughts. If you find any problems or have suggestions, report them via <a href=\"https://wso2.org/jira/browse/ML\">https://wso2.org/jira/browse/ML</a>.</p>\n<div class=\"sharedaddy sd-like-enabled sd-sharing-enabled\"><div class=\"sharedaddy sd-sharing-enabled\"><div class=\"robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing\"><h3 class=\"sd-title\">Share this:</h3></div></div><div class=\"sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded\"><h3 class=\"sd-title\">Like this:</h3><div class=\"likes-widget-placeholder post-likes-widget-placeholder\"><span class=\"button\"><span>Like</span></span> <span class=\"loading\">Loading...</span></div><span class=\"sd-text-color\"></span><a class=\"sd-link-color\"></a></div>\n</div>			',1),(117,'keen/dashboards','https://github.com/keen/dashboards',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Building an analytics dashboard? Don’t start from scratch. Grab one of our Bootstrap-based templates and admire your data in minutes.</p>\n\n<p>Begin with a layout:</p>\n\n<p><a href=\"https://camo.githubusercontent.com/2a58c8a8796e09dbdd2bce6204f4d79373de0651/687474703a2f2f636c2e6c792f696d6167652f3376324831383055306b30512f53637265656e25323053686f74253230323031342d31302d32392532306174253230332e31322e3234253230414d2e706e67\"><img src=\"https://camo.githubusercontent.com/2a58c8a8796e09dbdd2bce6204f4d79373de0651/687474703a2f2f636c2e6c792f696d6167652f3376324831383055306b30512f53637265656e25323053686f74253230323031342d31302d32392532306174253230332e31322e3234253230414d2e706e67\" alt=\"Hero Thirds Example\" /></a></p>\n\n<p>Add charts to each <code>chart-stage</code> HTML element:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>col-sm-6 col-md-3<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>chart-wrapper<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>chart-title<span class=\"pl-pds\">\"</span></span>&gt;\n      Chart Title\n    &lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>chart-stage<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>grid-1-1<span class=\"pl-pds\">\"</span></span>&gt;\n        <span class=\"pl-c\">&lt;!-- chart goes here! --&gt;</span>\n      &lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>chart-notes<span class=\"pl-pds\">\"</span></span>&gt;\n      Notes about this chart (optional)\n    &lt;/<span class=\"pl-ent\">div</span>&gt;\n  &lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<p>And voilà!</p>\n\n<p><a href=\"https://camo.githubusercontent.com/a294bbeb78340c703f12a7eb1f8cebe1da1fe3dc/687474703a2f2f636c2e6c792f696d6167652f3154336130583430327230572f53637265656e25323053686f74253230323031342d31302d32392532306174253230332e33352e3034253230414d2e706e67\"><img src=\"https://camo.githubusercontent.com/a294bbeb78340c703f12a7eb1f8cebe1da1fe3dc/687474703a2f2f636c2e6c792f696d6167652f3154336130583430327230572f53637265656e25323053686f74253230323031342d31302d32392532306174253230332e33352e3034253230414d2e706e67\" alt=\"Sample Dashboard\" /></a></p>\n\n<p>An attractive, custom analytics dashboard that\'s ready to be shown to your team or your customers. No hours lost tweaking CSS or testing responsiveness on eight different mobile devices.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/keen/dashboards#the-templates\"><span class=\"octicon octicon-link\"></span></a>The Templates</h2>\n\n<p>These layout templates are composed of a minimal set of <a href=\"http://getbootstrap.com/\">Bootstrap v3.2</a> custom styles. They cover the most common use cases and layout configurations we\'ve encountered so far.</p>\n\n<ul><li><a href=\"http://keen.github.io/dashboards/layouts/\">Layouts</a> for pre-built, responsive dashboard views</li>\n<li><a href=\"http://keen.github.io/dashboards/examples/\">Examples</a> for specific domains, data models and popular integrations</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/keen/dashboards#integrations\"><span class=\"octicon octicon-link\"></span></a>Integrations</h2>\n\n<p>These templates can work with any data source or charting library, but they\'re particularly streamlined to work with Keen IO\'s <a href=\"https://github.com/keenlabs/keen-js\">visualization toolkit</a>. To see the Keen integration in action, create a <a href=\"http://keen.io/signup?s=gh-dashboards\">free project</a> and send some data to it. Then add some charts to your dashboard with just a few lines of code.</p>\n\n<p>You can also use this pre-populated set of <a href=\"https://github.com/keen/dashboards/tree/gh-pages/demo-data\">demo data</a>. </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/keen/dashboards#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>Ready to use one of these awesome layouts? Here\'s how to get started.</p>\n\n<ol><li><p>In the sidebar, is a <em>Download Zip</em> link. Click it to download a copy of the code.</p></li>\n<li><p>Check out the various <a href=\"http://keen.github.io/dashboards/layouts/\">layouts</a> and pick the one that best suits your needs. Find the template in the repository you downloaded at <code>folder/layouts/(name-of-template)</code>.</p></li>\n<li><p>Start editing! In the destination folder will exist an <code>.html</code> file. Open it in your favorite text editor. There are three things you need to do to edit your dashboard:</p>\n\n<ol><li>Setup: If you\'re a registered Keen IO user, navigate to <a href=\"http://keen.io/login?s=gh-dashboards\">your keen project</a> or if you don\'t have a user at first, you can simply use some demo data that we\'ve prepared for you. You can access those by going to the repository and navigating to demo-data. There, you will see some javascript files with some code in them. We will simply paste those in the .html file.</li>\n<li>Some copypasta. When you navigate to the bottom of the .html file, you can see that there are a bunch of script tags. Just before the end of the body tag, we\'re going to add in the code from sample.html. Simply copy and paste the code just before you see <code>&lt;/body&gt;</code>.</li>\n<li>Once you\'ve done that we need to hook up the specific items within the template to the code that we\'ve just pasted in to our file. In line 21 of sample.html, you will see a line of code: <code>document.getElementById(\'chart-01\')</code>. That means that this <em>query</em> will try to find inside the html file a node with an id of \'chart-01\'. In these templates, you will see lines of that resemble something like:</li>\n</ol><div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>chart-stage<span class=\"pl-pds\">\"</span></span>&gt; <span class=\"pl-c\">&lt;!-- This is where you need to put the id property in! --&gt;</span>\n  &lt;<span class=\"pl-ent\">img</span> <span class=\"pl-e\">data-src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>holder.js/100%x650/white<span class=\"pl-pds\">\"</span></span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<p>Now we\'re going to change those lines so that it looks like this:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>chart-stage<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>chart-01<span class=\"pl-pds\">\"</span></span>&gt; <span class=\"pl-c\">&lt;!-- This is where you need to put the id property in! --&gt;</span>\n  <span class=\"pl-c\">&lt;!-- Get rid of that img tag! --&gt;</span>\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div></li>\n</ol><p>You\'re finished! Congratulations on setting up your first chart! Repeat step three with the rest of the items in the template to complete your dashboard!</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/keen/dashboards#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>Contributions are 11,000,000% welcome! That\'s a lot!</p>\n\n<p>Please file issues for any bugs you find or features you\'d like to see. And if you\'re up for it, send in a pull request.</p>\n\n<p>To develop, you\'ll need to first install dependencies using <a href=\"http://bower.io/\">Bower</a>:</p>\n\n<pre><code>$ npm install -g bower\n$ bower install\n</code></pre>\n\n<p>Note: Updates to the site backed by the <strong>gh-pages</strong> branch go live immediately once pull requests are reviewed and approved.</p>\n\n<p>Note #2: This project is moving fast, so make sure and stay up to date. Here\'s what we suggest. Fork this repo, clone the fork, and add the original repo as a remote called <code>upstream</code>:</p>\n\n<pre><code>$ git clone https://github.com/username/dashboards.git\n$ cd dashboards\n$ git remote add upstream https://github.com/keen/dashboards.git\n</code></pre>\n\n<p>Pull from <code>upstream</code> frequently to keep your local copy up to date:</p>\n\n<pre><code>$ git pull upstream gh-pages\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/keen/dashboards#support\"><span class=\"octicon octicon-link\"></span></a>Support</h2>\n\n<p>Need a hand with something? Send us an email to <a href=\"mailto:contact@keen.io\">contact@keen.io</a> and we\'ll get back to you right away!\nFor technical questions, use the <a href=\"https://stackoverflow.com/questions/tagged/keen-io\"><code>keen-io</code></a> tag on Stack Overflow.</p>\n',1),(118,'yahoo/gryffin','https://github.com/yahoo/gryffin',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Gryffin is a large scale web security scanning platform. It is not yet another scanner. It was written to solve two specific problems with existing scanners: coverage and scale. </p>\n\n<p>Better coverage translates to fewer false negatives. Inherent scalability translates to capability of scanning, and supporting a large elastic application infrastructure. Simply put, the ability to scan 1000 applications today to 100,000 applications tomorrow by straightforward horizontal scaling.   </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#coverage\"><span class=\"octicon octicon-link\"></span></a>Coverage</h2>\n\n<p>Coverage has two dimensions - one during crawl and the other during fuzzing. In crawl phase, coverage implies being able to find as much of the application footprint. In scan phase, or while fuzzing, it implies being able to test each part of the application for an applied set of vulnerabilities in a deep.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#crawl-coverage\"><span class=\"octicon octicon-link\"></span></a>Crawl Coverage</h4>\n\n<p>Today a large number of web applications are template-driven, meaning the same code or path generates millions of URLs. For a security scanner, it just needs one of the millions of URLs generated by the same code or path. Gryffin\'s crawler does just that. </p>\n\n<h5><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#page-deduplication\"><span class=\"octicon octicon-link\"></span></a>Page Deduplication</h5>\n\n<p>At the heart of Gryffin is a deduplication engine that compares a new page with already seen pages. If the HTML structure of the new page is similar to those already seen, it is classified as a duplicate and not crawled further.</p>\n\n<h5><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#dom-rendering-and-navigation\"><span class=\"octicon octicon-link\"></span></a>DOM Rendering and Navigation</h5>\n\n<p>A large number of applications today are rich applications. They are heavily driven by client-side JavaScript. In order to discover links and code paths in such applications, Gryffin\'s crawler uses PhantomJS for DOM rendering and navigation.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#scan-coverage\"><span class=\"octicon octicon-link\"></span></a>Scan Coverage</h4>\n\n<p>As Gryffin is a scanning platform, not a scanner, it does not have its own fuzzer modules, even for fuzzing common web vulnerabilities like XSS and SQL Injection.</p>\n\n<p>It\'s not wise to reinvent the wheel where you do not have to. Gryffin at production scale at Yahoo uses open source and custom fuzzers. Some of these custom fuzzers might be open sourced in the future, and might or might not be part of the Gryffin repository.</p>\n\n<p>For demonstration purposes, Gryffin comes integrated with sqlmap and arachni. It does not endorse them or any other scanner in particular. </p>\n\n<p>The philosophy is to improve scan coverage by being able to fuzz for just what you need.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#scale\"><span class=\"octicon octicon-link\"></span></a>Scale</h2>\n\n<p>While Gryffin is available as a standalone package, it\'s primarily built for scale. </p>\n\n<p>Gryffin is built on the publisher-subscriber model. Each component is either a publisher, or a subscriber, or both. This allows Gryffin to scale horizontally by simply adding more subscriber or publisher nodes.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#operating-gryffin\"><span class=\"octicon octicon-link\"></span></a>Operating Gryffin</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#pre-requisites\"><span class=\"octicon octicon-link\"></span></a>Pre-requisites</h3>\n\n<ol><li>Go </li>\n<li>PhantomJS, v2</li>\n<li>Sqlmap (for fuzzing SQLi)</li>\n<li>Arachni (for fuzzing XSS and web vulnerabilities)</li>\n<li>NSQ , \n\n<ul><li>running lookupd at port 4160,4161</li>\n<li>running nsqd at port 4150,4151</li>\n<li>with <code>--max-msg-size=5000000</code></li>\n</ul></li>\n<li>Kibana and Elastic search, for dashboarding\n\n</li>\n</ol><h3><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h3>\n\n<pre><code>go get github.com/yahoo/gryffin/...\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#run\"><span class=\"octicon octicon-link\"></span></a>Run</h3>\n\n<h2><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#todo\"><span class=\"octicon octicon-link\"></span></a>TODO</h2>\n\n<ol><li>Mobile browser user agent</li>\n<li>Preconfigured docker images </li>\n<li>Redis for sharing states across machines</li>\n<li>Instruction to run gryffin (distributed or standalone)</li>\n<li>Documentation for html-distance</li>\n<li>Implement a JSON serializable cookiejar. </li>\n<li>Identify duplicate url patterns based on simhash result.</li>\n</ol><h2><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#credits\"><span class=\"octicon octicon-link\"></span></a>Credits</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/yahoo/gryffin#licence\"><span class=\"octicon octicon-link\"></span></a>Licence</h2>\n\n<p>Code licensed under the BSD-style license. See LICENSE file for terms.</p>\n',1),(119,'JSON Lines Examples','http://jsonlines.org/examples/',1,0,'<div><h3>\n<a class=\"anchor\" href=\"http://jsonlines.org/examples/#better-than-csv\"><span class=\"octicon octicon-link\"></span></a>Better than CSV</h3>\n\n<div class=\"highlight\"><pre><span class=\"p\">[</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Session\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Score\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Completed\"</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s2\">\"Gilbert\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2013\"</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s2\">\"Alexa\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2013\"</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s2\">\"May\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2012B\"</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s2\">\"Deloise\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2012A\"</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">]</span> \n</pre></div>\n\n          <p>CSV seems so easy that many programmers have written code to generate it themselves, and almost every implementation is different. Handling broken CSV files is a common and frustrating task. CSV has no standard encoding, no standard column separator and multiple character escaping standards. String is the only type supported for cell values, so some programs attempt to guess the correct types.</p>\n\n          <p>JSON Lines handles tabular data cleanly and without ambiguity. Cells may use the standard JSON types.</p>\n\n          <p>The biggest missing piece is an import/export filter for popular spreadsheet programs so that non-programmers can use this format.</p>\n\n          <h3>\n<a class=\"anchor\" href=\"http://jsonlines.org/examples/#easy-nested-data\"><span class=\"octicon octicon-link\"></span></a>Easy Nested Data</h3>\n\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Gilbert\"</span><span class=\"p\">,</span> <span class=\"nt\">\"wins\"</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"s2\">\"straight\"</span><span class=\"p\">,</span> <span class=\"s2\">\"7♣\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"one pair\"</span><span class=\"p\">,</span> <span class=\"s2\">\"10♥\"</span><span class=\"p\">]]}</span>\n<span class=\"p\">{</span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Alexa\"</span><span class=\"p\">,</span> <span class=\"nt\">\"wins\"</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"s2\">\"two pair\"</span><span class=\"p\">,</span> <span class=\"s2\">\"4♠\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"two pair\"</span><span class=\"p\">,</span> <span class=\"s2\">\"9♠\"</span><span class=\"p\">]]}</span>\n<span class=\"p\">{</span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"May\"</span><span class=\"p\">,</span> <span class=\"nt\">\"wins\"</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n<span class=\"p\">{</span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Deloise\"</span><span class=\"p\">,</span> <span class=\"nt\">\"wins\"</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"s2\">\"three of a kind\"</span><span class=\"p\">,</span> <span class=\"s2\">\"5♣\"</span><span class=\"p\">]]}</span>\n</pre></div>\n\n        </div><p>JSON Lines\' biggest strength is in handling lots of similar nested data structures. One <code>.jsonl</code> file is easier to work with than a directory full of XML files.</p><p>If you have large nested structures then reading the JSON Lines text directly isn\'t recommended. Use the \"jq\" tool to make viewing large structures easier:</p><div><pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Gilbert\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"wins\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n      <span class=\"s2\">\"straight\"</span><span class=\"p\">,</span> \n      <span class=\"s2\">\"7♣\"</span>\n    <span class=\"p\">],</span> \n    <span class=\"p\">[</span>\n      <span class=\"s2\">\"one pair\"</span><span class=\"p\">,</span> \n      <span class=\"s2\">\"10♥\"</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Alexa\"</span><span class=\"p\">,</span> \n  <span class=\"nt\">\"wins\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n      <span class=\"s2\">\"two pair\"</span><span class=\"p\">,</span> \n      <span class=\"s2\">\"4♠\"</span>\n    <span class=\"p\">],</span> \n    <span class=\"p\">[</span>\n      <span class=\"s2\">\"two pair\"</span><span class=\"p\">,</span> \n      <span class=\"s2\">\"9♠\"</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>',1),(120,'WickyNilliams/headroom.js','https://github.com/WickyNilliams/headroom.js',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><strong>Give your pages some headroom. Hide your header until you need it.</strong></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#whats-it-all-about\"><span class=\"octicon octicon-link\"></span></a>What\'s it all about?</h2>\n\n<p>Headroom.js is a lightweight, high-performance JS widget (with no dependencies!) that allows you to react to the user\'s scroll. The header on <a href=\"http://wicky.nillia.ms/headroom.js\">this site</a> is a living example, it slides out of view when scrolling down and slides back in when scrolling up.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#why-use-it\"><span class=\"octicon octicon-link\"></span></a>Why use it?</h3>\n\n<p>Fixed headers are a popular approach for keeping the primary navigation in close proximity to the user. This can reduce the effort required for a user to quickly navigate a site, but they are not without problems…</p>\n\n<p>Large screens are usually landscape-oriented, meaning less vertical than horizontal space. A fixed header can therefore occupy a significant portion of the content area. Small screens are typically used in a portrait orientation. Whilst this results in more vertical space, because of the overall height of the screen a meaningfully-sized header can still be quite imposing.</p>\n\n<p>Headroom.js allows you to bring elements into view when appropriate, and give focus to your content the rest of the time.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#how-does-it-work\"><span class=\"octicon octicon-link\"></span></a>How does it work?</h3>\n\n<p>At it\'s most basic headroom.js simply adds and removes CSS classes from an element in response to a scroll event. This means <strong>you must supply your own CSS styles separately</strong>. The classes that are used in headroom.js that are added and removed are:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-c\">&lt;!-- initially --&gt;</span>\n&lt;<span class=\"pl-ent\">header</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>headroom<span class=\"pl-pds\">\"</span></span>&gt;\n\n<span class=\"pl-c\">&lt;!-- scrolling down --&gt;</span>\n&lt;<span class=\"pl-ent\">header</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>headroom headroom--unpinned<span class=\"pl-pds\">\"</span></span>&gt;\n\n<span class=\"pl-c\">&lt;!-- scrolling up --&gt;</span>\n&lt;<span class=\"pl-ent\">header</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>headroom headroom--pinned<span class=\"pl-pds\">\"</span></span>&gt;</pre></div>\n\n<p>Relying on CSS classes affords headroom.js incredible flexibility. The choice of what to do when scrolling up or down is now entirely yours - anything you can do with CSS you can do in response to the user\'s scroll.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>Using headroom.js is really simple. It has a pure JS API, plus an optional jQuery/Zepto plugin and AngularJS directive.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#install-with-bower\"><span class=\"octicon octicon-link\"></span></a>Install with bower</h3>\n\n<div class=\"highlight highlight-source-shell\"><pre>bower install headroom.js --save</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#using-headroomjs-with-a-cdn\"><span class=\"octicon octicon-link\"></span></a>Using Headroom.js with a CDN</h3>\n\n<p>CDN provided by <a href=\"https://cdnjs.com/libraries/headroom\">cdnjs</a></p>\n\n<pre><code>&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/headroom/0.7.0/headroom.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/headroom/0.7.0/headroom.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/headroom/0.7.0/angular.headroom.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/headroom/0.7.0/angular.headroom.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/headroom/0.7.0/jQuery.headroom.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/headroom/0.7.0/jQuery.headroom.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>CDN provided by <a href=\"http://www.jsdelivr.com/#!headroomjs\">jsDelivr CDN</a></p>\n\n<pre><code>&lt;script src=\"//cdn.jsdelivr.net/headroomjs/0.7.0/headroom.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdn.jsdelivr.net/headroomjs/0.7.0/angular.headroom.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdn.jsdelivr.net/headroomjs/0.7.0/jQuery.headroom.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#with-pure-js\"><span class=\"octicon octicon-link\"></span></a>With pure JS</h3>\n\n<p>Include the <code>headroom.js</code> script in your page, and then:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// grab an element</span>\n<span class=\"pl-k\">var</span> myElement <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.querySelector(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>header<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-c\">// construct an instance of Headroom, passing the element</span>\n<span class=\"pl-k\">var</span> headroom  <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Headroom</span>(myElement);\n<span class=\"pl-c\">// initialise</span>\nheadroom.init();</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#with-jqueryzepto\"><span class=\"octicon octicon-link\"></span></a>With jQuery/Zepto</h3>\n\n<p>Include the <code>headroom.js</code> and <code>jQuery.headroom.js</code> scripts in your page, and then:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// simple as this!</span>\n<span class=\"pl-c\">// NOTE: init() is implicitly called with the plugin</span>\n$(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>header<span class=\"pl-pds\">\"</span></span>).headroom();</pre></div>\n\n<p>The plugin also offers a data-* API if you prefer a declarative approach.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-c\">&lt;!-- selects $(\"[data-headroom]\") --&gt;</span>\n&lt;<span class=\"pl-ent\">header</span> <span class=\"pl-e\">data-headroom</span>&gt;</pre></div>\n\n<p>Note: Zepto\'s additional <a href=\"https://github.com/madrobby/zepto#zepto-modules\">data module</a> is required for compatibility.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#with-angularjs\"><span class=\"octicon octicon-link\"></span></a>With AngularJS</h3>\n\n<p>Include the <code>headroom.js</code> and <code>angular.headroom.js</code> scripts in your page, and include the Headroom module</p>\n\n<div class=\"highlight highlight-source-js\"><pre>angular.module(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>app<span class=\"pl-pds\">\'</span></span>, [\n<span class=\"pl-c\">// your requires</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>headroom<span class=\"pl-pds\">\'</span></span>\n]);</pre></div>\n\n<p>And then use the directive in your markup:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">header</span> <span class=\"pl-e\">headroom</span>&gt;&lt;/<span class=\"pl-ent\">header</span>&gt;\n<span class=\"pl-c\">&lt;!-- or --&gt;</span>\n&lt;<span class=\"pl-ent\">headroom</span>&gt;&lt;/<span class=\"pl-ent\">headroom</span>&gt;\n<span class=\"pl-c\">&lt;!-- or with options --&gt;</span>\n&lt;<span class=\"pl-ent\">headroom</span> <span class=\"pl-e\">tolerance</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>0<span class=\"pl-pds\">\'</span></span> <span class=\"pl-e\">offset</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>0<span class=\"pl-pds\">\'</span></span> <span class=\"pl-e\">scroller</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.app-view<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">classes</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{pinned:\'headroom--pinned\',unpinned:\'headroom--unpinned\',initial:\'headroom\'}<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">headroom</span>&gt;</pre></div>\n\n<p>Note: in AngularJS, you cannot pass a DOM element as a directive attribute. Instead, you have to provide a selector that can be passed to <a href=\"http://docs.angularjs.org/api/ng/function/angular.element\">angular.element</a>. If you use default AngularJS jQLite selector engine, <a href=\"https://code.google.com/p/jqlite/wiki/UsingJQLite\">here are the compliant selectors</a>. </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#options\"><span class=\"octicon octicon-link\"></span></a>Options</h2>\n\n<p>Headroom.js can also accept an options object to alter the way it behaves. You can see the default options by inspecting <code>Headroom.options</code>. The structure of an options object is as follows:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n    <span class=\"pl-c\">// vertical offset in px before element is first unpinned</span>\n    offset <span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n    <span class=\"pl-c\">// scroll tolerance in px before state changes</span>\n    tolerance <span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n    <span class=\"pl-c\">// or scroll tolerance per direction</span>\n    tolerance <span class=\"pl-k\">:</span> {\n        down <span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n        up <span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>\n    },\n    <span class=\"pl-c\">// css classes to apply</span>\n    classes <span class=\"pl-k\">:</span> {\n        <span class=\"pl-c\">// when element is initialised</span>\n        initial <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>headroom<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-c\">// when scrolling up</span>\n        pinned <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>headroom--pinned<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-c\">// when scrolling down</span>\n        unpinned <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>headroom--unpinned<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-c\">// when above offset</span>\n        top <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>headroom--top<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-c\">// when below offset</span>\n        notTop <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>headroom--not-top<span class=\"pl-pds\">\"</span></span>\n    },\n    <span class=\"pl-c\">// callback when pinned, `this` is headroom object</span>\n    <span class=\"pl-en\">onPin</span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {},\n    <span class=\"pl-c\">// callback when unpinned, `this` is headroom object</span>\n    <span class=\"pl-en\">onUnpin</span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {},\n    <span class=\"pl-c\">// callback when above offset, `this` is headroom object</span>\n    <span class=\"pl-en\">onTop</span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {},\n    <span class=\"pl-c\">// callback when below offset, `this` is headroom object</span>\n    <span class=\"pl-en\">onNotTop</span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {}\n}</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#examples\"><span class=\"octicon octicon-link\"></span></a>Examples</h2>\n\n<p>Head over to the <a href=\"http://wicky.nillia.ms/headroom.js/playroom/\">headroom.js playroom</a> if you want see some example usages. There you can tweak all of headroom\'s options and apply different CSS effects in an interactive demo.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#browser-support\"><span class=\"octicon octicon-link\"></span></a>Browser support</h2>\n\n<p>Headroom.js is dependent on the following browser APIs:</p>\n\n<p>All of these APIs are capable of being polyfilled, so headroom.js can work with less-capable browsers if desired. Check the linked resources above to determine if you must polyfill to achieve your desired level of browser support.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#contributions--issues\"><span class=\"octicon octicon-link\"></span></a>Contributions &amp; Issues</h2>\n\n<p>Contributions are welcome. Please clearly explain the purpose of the PR and follow the current style.</p>\n\n<p>Issues can be resolved quickest if they are descriptive and include both a reduced test case and a set of steps to reproduce.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/WickyNilliams/headroom.js#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>Licensed under the <a href=\"http://www.opensource.org/licenses/mit-license.php\">MIT License</a>.</p>\n',1),(121,'Your first snap | Ubuntu developer portal','https://developer.ubuntu.com/en/snappy/snapcraft/your-first-snap/',1,0,'\n\n\n<p>Let\'s make a snap from scratch using Snapcraft! We\'ll pick something a little interesting: a webcam server.</p>\n\n<h2>Preparation</h2>\n\n<p>You\'ll want a webcam and a Snappy device. We\'ll assume you have those, but if you need help setting up a Snappy install, there is help <a href=\"https://developer.ubuntu.com/en/snappy/start/\">online</a>.</p>\n\n<p>(Even if you don\'t have either of those, you can still follow along. You just won\'t be able to use the final snap package you create. But you\'ll get to see how Snapcraft works, which is still super rewarding.)</p>\n\n<p>You should also install Snapcraft:</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ sudo add-apt-repository ppa:snappy-dev/tools\n$ sudo apt-get update\n$ sudo apt-get install snapcraft\n</code></pre>\n</div>\n\n<h2>Approach</h2>\n\n<p>This example is easy because we won\'t be doing much of the heavy lifting ourselves. We\'re going to integrate a couple pieces of code together to make an interesting app.</p>\n\n<p>Namely, we\'ll combine a web server with a webcam program and combine them to serve a new frame every ten seconds.</p>\n\n<p><cite>The resulting package is also part of the examples directory in the <a href=\"http://bazaar.launchpad.net/~snappy-dev/snapcraft/core/files/head:/examples/webcam-webui/\">snapcraft sources</a></cite></p>\n\n<h3>The Web Server</h3>\n\n<p>Go has a simple web server in its standard libraries. So let\'s just use that.</p>\n\n<p>It\'s trivial to write a complete (but basic) web server in a few lines:</p>\n\n<div class=\"twelve-col\">\n<pre><code>package main\nimport \"net/http\"\nfunc main() {\n    panic(http.ListenAndServe(\":8080\", http.FileServer(http.Dir(\".\"))))\n}\n</code></pre>\n</div>\n\n<p>This will serve the current directory on port <code>:8080</code>. If there is an <code>index.html</code> in the current directory, it will be served. Otherwise a directory listing will be shown.</p>\n\n<p>I\'ve provided the above code in a simple GitHub <a href=\"https://github.com/mikix/golang-static-http\">repository</a>.</p>\n\n<h3>The Webcam Program</h3>\n\n<p>There is a webcam program provided in the Ubuntu archives called <code>fswebcam</code>. It has a lot of neat features. But all we\'ll be needing for now is its ability to take a webcam freeze frame and drop it to a file by calling it like so:</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ fswebcam output.jpg\n</code></pre>\n</div>\n\n<h2>Snapcraft Recipe</h2>\n\n<p>OK, let\'s create a Snapcraft recipe that combines the above programs into a useful snap.</p>\n\n<p>Snapcraft reads a single file, <code>snapcraft.yaml</code>, which tells it how to combine code. It contains a list of <code>parts</code>, or pieces of code, and some metadata for the final snap it will create. But let\'s not worry about the metadata yet.</p>\n\n<h3>Initializing a project</h3>\n\n<p>To get started with a base template create a folder that will hold your project, and initialize it:</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ mkdir webcam-webui\n$ cd webcam-webui\n$ snapcraft init</code></pre>\n</div>\n\n<p>then open the created <code>snapcraft.yaml</code> and edit the templated values for <code>name</code>, <code>version</code>, <code>vendor</code>, <code>summary</code> and <code>description</code>. You can make it look like this:</p>\n\n<div class=\"twelve-col\">\n<pre><code>name: webcam-webui\nversion: 1\nvendor: You &lt;you@example.com&gt;\nsummary: Webcam web UI\ndescription: Exposes your webcam over a web UI\nicon: icon.png</code></pre>\n</div>\n\n<p>and copy over an icon to <code>icon.png</code> or change the path accordingly (if you change the path just make sure it is part of your project directory and that the path is relative to be able to share your snapcrafting):</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ cp /usr/share/icons/hicolor/64/mimetypes/text-x-apport.png ./icon.png</code></pre>\n</div>\n\n<p>If you run <code>snapcraft</code> now, it will complain about not having any <code>parts</code>.</p>\n\n<p>We will look more into this metadata in a bit, but first let\'s look at adding some <code>parts</code>.</p>\n\n<h3>Web Server Part</h3>\n\n<p>Let\'s start with the web server.</p>\n\n<div class=\"twelve-col\">\n<pre><code>parts:\n  cam:\n    type: go-project\n    source: git://github.com/mikix/golang-static-http\n</code></pre>\n</div>\n\n<p>You\'ve just defined a <code>part</code> inside <code>parts</code> named <code>cam</code>, but you could call it anything. That part has a two options: A <code>type</code> option that tells Snapcraft how to interpret the part (in this case, it\'s a Go project), and a <code>source</code> option telling Snapcraft where to download the code.</p>\n\n<p>Go ahead and append the above contents to your recently created <code>snapcraft.yaml</code>.</p>\n\n<p>Now we can build and \"stage\" this recipe. Staging just means putting the output of the parts in a common folder that has the same layout as the snap we\'ll eventually create. It lets you look at how the snap is constructed and make<br />sure everything is in place.</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ snapcraft stage</code></pre>\n</div>\n\n<p>You\'ll see a bunch of output, including Snapcraft downloading the Go compiler if not already installed on your host build environment.<br />It will use this to compile the code found on GitHub. Eventually when it is done, you\'ll be able to inspect the <code>./stage</code> folder and see the web server executable sitting in <code>./stage/bin</code>:</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ ls stage/bin\ngolang-static-http</code></pre>\n</div>\n\n<h3>Adding an Ubuntu dependency to a part.</h3>\n\n<p>Now let\'s add the webcam program <code>fswebcam</code> to our snap. Edit <code>snapcraft.yaml</code> to make the <code>cam part </code>look like:</p>\n\n<div class=\"twelve-col\">\n<pre><code>parts:\n  cam:\n    plugin: go-project\n    source: git://github.com/mikix/golang-static-http\n    stage-packages:\n      - fswebcam\n</code></pre>\n</div>\n\n<p>We\'ve just added a new property to the <code>cam</code> part called <code>stage-packages</code> which contains a yaml list with any supporting Ubuntu package we want; in this case our list has one element with an entry for the <code>fswebcam</code> Ubuntu `deb` based<br />package.</p>\n\n<p>Now let\'s stage our recipe again (and force it to go through the lifecycle).</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ snapcraft stage --force\n</code></pre>\n</div>\n\n<p>You\'ll also see Snapcraft downloading and unpacking all the Ubuntu packages into your snap. If you look at <code>./stage</code>, you\'ll see a lot more files now:</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ ls stage\nbin  etc  lib  usr  var\n</code></pre>\n</div>\n\n<h3>A copy Part</h3>\n\n<p>OK, so we have the two programs in our staging area. But how do we make them work together?</p>\n\n<p>We\'ll write a tiny little script that runs the server and <code>fswebcam</code> together:</p>\n\n<div class=\"twelve-col\">\n<pre><code>#!/bin/sh\nset -e\n\ncd \"$SNAP_APP_DATA_PATH\"\n\ngolang-static-http &amp;\n\nwhile :; do\n    fswebcam shot.jpeg\n    sleep 10\ndone\n</code></pre>\n</div>\n\n<p>Save the above as <code>webcam-webui</code> and make it executable:</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ chmod a+x webcam-webui\n</code></pre>\n</div>\n\n<p>Alright, let\'s put this script in our snap too:</p>\n\n<div class=\"twelve-col\">\n<pre><code>parts:\n  cam:\n    type: go-project\n    source: git://github.com/mikix/golang-static-http\n    stage-packages:\n      - fswebcam\n  glue:\n    type: copy\n    files:\n      webcam-webui: bin/webcam-webui\n</code></pre>\n</div>\n\n<p>The <code>copy</code> plugin takes a list of files to just directly copy without building or downloading anything. In this case, we just want to put our glue script in the <code>bin/</code> directory.</p>\n\n<p>If we run Snapcraft again, we won\'t be surprised:</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ snapcraft stage\n</code></pre>\n</div>\n\n<p>We should now see both the web server and our script in stage/bin (the webcam program is in stage/usr/bin since it came from Ubuntu):</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ ls stage/bin\ngolang-static-http  webcam-webui\n</code></pre>\n</div>\n\n<h3>Filesets</h3>\n\n<p>Some files in <code>./stage</code> could be needed for building dependent parts during the staging phase and some of these would be useful for the resulting snap. In this case we don\'t need some of these for either staging or the resulting snap, so let\'s add some filesets for the snap.</p>\n\n<p>Edit <code>snapcraft.yaml</code> once more to make the <code>cam</code> part in <code>parts</code> to look like:</p>\n\n<div class=\"twelve-col\">\n<pre><code>parts:\n    cam:\n        type: go-project\n        source: git://github.com/mikix/golang-static-http\n        stage-packages:\n          - fswebcam\n        filesets:\n          fswebcam:\n            - usr/bin/fswebcam\n            - lib\n            - usr/lib\n          go-server:\n            - bin/golang-*\n        snap:\n          - $fswebcam\n          - $go-server\n    glue:\n        type: copy\n        files:\n          webcam-webui: bin/webcam-webui\n</code></pre>\n</div>\n\n<p>What we did was add two <code>filesets</code>, one named <code>fswebcam</code> and another one named <code>go-server</code> and then added a <code>snap</code> entry referencing these two filesets with <code>$</code>. All these filesets are inclusion based filesets, you can use <code>*</code> to glob many files and directories (if <code>*</code> is the first character, it needs to be quoted e.g.; <code>\'*\'</code>). An exclusion can be added by prefixing the file<br />with a <code>-</code>. Additionally, you don\'t need to define a fileset, you can explicitly mention the file, directory or match under <code>snap</code> or <code>stage</code>.</p>\n\n<h3>Extending the Metadata</h3>\n\n<p>The defined values in <code>snapcraft.yaml</code> are used to build the corresponding <code>meta</code> directory that holds all the package information.</p>\n\n<p>You can read all about the resulting <a href=\"https://developer.ubuntu.com/en/snappy/guides/packaging-format-apps/\">format of this metadata</a> but we\'ll assume here that you\'re already familiar.</p>\n\n<p>The templated values when <code>snapcraft init</code> was run did not hold any <code>parts</code> which we\'ve filled along the way. It also did not define any <code>services</code> or <code>binaries</code> which we will be adding now</p>\n\n<p>Edit <code>snapcraft.yaml</code> once more and add the <code>services</code> entry, your resulting `snapcraft.yaml` should look very similar to:</p>\n\n<div class=\"twelve-col\">\n<pre><code>name: webcam-webui\nversion: 1\nvendor: You &lt;you@example.com&gt;\nsummary: Webcam web UI\ndescription: Exposes your webcam over a web UI\nicon: icon.png\nservices:\n    webcam-webui:\n        start: bin/webcam-webui\n\nparts:\n    cam:\n        type: go-project\n        source: git://github.com/mikix/golang-static-http\n        stage-packages:\n          - fswebcam\n        filesets:\n          fswebcam:\n            - usr/bin/fswebcam\n            - lib\n            - usr/lib\n          go-server:\n            - bin/golang-*\n        snap:\n          - $fswebcam\n          - $go-server\n    glue:\n        type: copy\n        files:\n          webcam-webui: bin/webcam-webui\n</code></pre>\n</div>\n\n<p>and tell Snapcraft to actually make the snap package:</p>\n\n<div class=\"twelve-col\">\n<pre><code>$ snapcraft</code></pre>\n\n<div>\n<p>You should now have a <code>webcam-webui_1_amd64.snap</code> file sitting in your directory (assuming you are running on amd64). Congratulations!</p>\n\n<h2>Next steps</h2>\n\n<p>Well done, your first snap using snapcraft is ready. If you want to check out a few examples for reference or to get inspired, have a look at the <code>examples</code> directory in the source directory of snapcraft:</p>\n\n<div class=\"twelve-col\">\n<pre><code>bzr branch lp:snapcraft\ncd snapcraft/examples\n</code></pre>\n</div>\n\n<p>In <code>examples/</code> you can find a diverse set of examples which should help you get started on your own projects.</p>\n\n<p>If you should have any more questions, ask us on</p>\n\n</div>\n</div>',1),(122,'marcuswestin/store.js','https://github.com/marcuswestin/store.js',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>store.js exposes a simple API for cross browser local storage</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Store \'marcus\' at \'username\'</span>\nstore.set(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>username<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>marcus<span class=\"pl-pds\">\'</span></span>)\n\n<span class=\"pl-c\">// Get \'username\'</span>\nstore.get(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>username<span class=\"pl-pds\">\'</span></span>)\n\n<span class=\"pl-c\">// Remove \'username\'</span>\nstore.remove(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>username<span class=\"pl-pds\">\'</span></span>)\n\n<span class=\"pl-c\">// Clear all keys</span>\nstore.<span class=\"pl-c1\">clear</span>()\n\n<span class=\"pl-c\">// Store an object literal - store.js uses JSON.stringify under the hood</span>\nstore.set(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>user<span class=\"pl-pds\">\'</span></span>, { name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>marcus<span class=\"pl-pds\">\'</span></span>, likes<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>javascript<span class=\"pl-pds\">\'</span></span> })\n\n<span class=\"pl-c\">// Get the stored object - store.js uses JSON.parse under the hood</span>\n<span class=\"pl-k\">var</span> user <span class=\"pl-k\">=</span> store.get(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>user<span class=\"pl-pds\">\'</span></span>)\n<span class=\"pl-c1\">alert</span>(user.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span> likes <span class=\"pl-pds\">\'</span></span> <span class=\"pl-k\">+</span> user.likes)\n\n<span class=\"pl-c\">// Get all stored values</span>\nstore.getAll().user.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>marcus<span class=\"pl-pds\">\'</span></span>\n\n<span class=\"pl-c\">// Loop over all stored values</span>\nstore.forEach(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">val</span>) {\n    <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(key, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>==<span class=\"pl-pds\">\'</span></span>, val)\n})</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#how-does-it-work\"><span class=\"octicon octicon-link\"></span></a>How does it work?</h2>\n\n<p>store.js uses localStorage when available, and falls back on the userData behavior in IE6 and IE7. No flash to slow down your page load. No cookies to fatten your network requests.</p>\n\n<p>store.js depends on JSON for serialization to disk.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<p>Just grab <a href=\"https://raw.github.com/marcuswestin/store.js/master/store.min.js\">store.min.js</a> or <a href=\"https://raw.github.com/marcuswestin/store.js/master/store+json2.min.js\">store+json2.min.js</a> and include them with a script tag.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#storeenabled-flag\"><span class=\"octicon octicon-link\"></span></a><code>store.enabled</code> flag</h2>\n\n<p>If your product depends on store.js, you must check the <code>store.enabled</code> flag first:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>store.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;\n<span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;</span>\n<span class=\"pl-s1\">    init()</span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">function</span> <span class=\"pl-en\">init</span>() {</span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>store.enabled) {</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Local storage is not supported by your browser. Please disable \"Private Mode\", or upgrade to a modern browser.<span class=\"pl-pds\">\'</span></span>)</span>\n<span class=\"pl-s1\">            <span class=\"pl-k\">return</span></span>\n<span class=\"pl-s1\">        }</span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">var</span> user <span class=\"pl-k\">=</span> store.get(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>user<span class=\"pl-pds\">\'</span></span>)</span>\n<span class=\"pl-s1\">        <span class=\"pl-c\">// ... and so on ...</span></span>\n<span class=\"pl-s1\">    }</span>\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n\n<p>LocalStorage may sometimes appear to be available but throw an error when used. An example is Safari\'s private browsing mode. Other browsers allow the user to temporarily disable localStorage. Store.js detects these conditions and sets the <code>store.enabled</code> flag appropriately.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#screencast\"><span class=\"octicon octicon-link\"></span></a>Screencast</h2>\n\n<p><a href=\"http://javascriptplayground.com/blog/2012/06/javascript-local-storage-store-js-tutorial\">Introductory Screencast to Store.js</a> by Jack Franklin.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#contributors--forks\"><span class=\"octicon octicon-link\"></span></a>Contributors &amp; Forks</h2>\n\n<p>Contributors: <a href=\"https://github.com/marcuswestin/store.js/graphs/contributors\">https://github.com/marcuswestin/store.js/graphs/contributors</a></p>\n\n<p>Forks: <a href=\"https://github.com/marcuswestin/store.js/network/members\">https://github.com/marcuswestin/store.js/network/members</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#in-nodejs\"><span class=\"octicon octicon-link\"></span></a>In node.js</h2>\n\n<p>store.js works as expected in node.js, assuming that global.localStorage has been set:</p>\n\n<pre><code>global.localStorage = require(\'localStorage\')\nvar store = require(\'./store\')\nstore.set(\'foo\', 1)\nconsole.log(store.get(\'foo\'))\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#supported-browsers\"><span class=\"octicon octicon-link\"></span></a>Supported browsers</h2>\n\n<ul><li>Tested in iOS 4+</li>\n<li>Tested in Firefox 3.5</li>\n<li>Tested in Firefox 3.6</li>\n<li>Tested in Firefox 4.0+</li>\n<li>Support dropped for Firefox &lt; 3.5 (see notes below)</li>\n<li>Tested in Chrome 5</li>\n<li>Tested in Chrome 6</li>\n<li>Tested in Chrome 7</li>\n<li>Tested in Chrome 8</li>\n<li>Tested in Chrome 10</li>\n<li>Tested in Chrome 11+</li>\n<li>Tested in Safari 4</li>\n<li>Tested in Safari 5</li>\n<li>Tested in IE6</li>\n<li>Tested in IE7</li>\n<li>Tested in IE8</li>\n<li>Tested in IE9</li>\n<li>Tested in IE10</li>\n<li>Tested in Opera 10</li>\n<li>Tested in Opera 11</li>\n<li>Tested in Opera 12</li>\n<li>Tested in Node.js v0.10.4 (with <a href=\"https://github.com/coolaj86/node-localStorage\">https://github.com/coolaj86/node-localStorage</a> 1.0.2)</li>\n</ul><p><em>Private mode</em> Store.js may not work while browsing in private mode. This is as it should be. Check the <code>store.enabled</code> flag before relying on store.js.</p>\n\n<p><em>Saucelabs.com rocks</em> Extensive browser testing of store.js is possible thanks to Saucelabs.com. Check them out, they\'re awesome.</p>\n\n<p><em>Firefox 3.0 &amp; 2.0:</em> Support for FF 2 &amp; 3 was dropped in v1.3.6. If you require support for ancient versions of FF, use v1.3.5 of store.js.</p>\n\n<p><em>Important note:</em> In IE6 and IE7, many special characters are not allowed in the keys used to store any key/value pair. With <a href=\"https://github.com/mferretti\">@mferretti</a>\'s help, there\'s a suitable workaround which replaces most forbidden characters with \"___\".</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#storage-limits\"><span class=\"octicon octicon-link\"></span></a>Storage limits</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#unsupported-browsers\"><span class=\"octicon octicon-link\"></span></a>Unsupported browsers</h2>\n\n<ul><li>Firefox 1.0: no means (beside cookies and flash)</li>\n<li>Safari 2: no means (beside cookies and flash)</li>\n<li>Safari 3: no synchronous api (has asynch sqlite api, but store.js is synch)</li>\n<li>Opera 9: don\'t know if there is synchronous api for storing data locally</li>\n<li>Firefox 1.5: don\'t know if there is synchronous api for storing data locally</li>\n<li>Microsoft IIS &amp; IE7: With meta tag &amp; \"charset=iso-8859-1\", things stop working. See issue #47.</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#some-notes-on-serialization\"><span class=\"octicon octicon-link\"></span></a>Some notes on serialization</h2>\n\n<p>localStorage, when used without store.js, calls toString on all stored values. This means that you can\'t conveniently store and retrieve numbers, objects or arrays:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>localStorage.myage <span class=\"pl-k\">=</span> <span class=\"pl-c1\">24</span>\nlocalStorage.myage <span class=\"pl-k\">!==</span> <span class=\"pl-c1\">24</span>\nlocalStorage.myage <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>24<span class=\"pl-pds\">\'</span></span>\n\nlocalStorage.user <span class=\"pl-k\">=</span> { name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>marcus<span class=\"pl-pds\">\'</span></span>, likes<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>javascript<span class=\"pl-pds\">\'</span></span> }\nlocalStorage.user <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[object Object]<span class=\"pl-pds\">\"</span></span>\n\nlocalStorage.<span class=\"pl-c1\">tags</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>javascript<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>localStorage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>store.js<span class=\"pl-pds\">\'</span></span>]\nlocalStorage.<span class=\"pl-c1\">tags</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">32</span>\nlocalStorage.<span class=\"pl-c1\">tags</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript,localStorage,store.js<span class=\"pl-pds\">\"</span></span></pre></div>\n\n<p>What we want (and get with store.js) is</p>\n\n<div class=\"highlight highlight-source-js\"><pre>store.set(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>myage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-c1\">24</span>)\nstore.get(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>myage<span class=\"pl-pds\">\'</span></span>) <span class=\"pl-k\">===</span> <span class=\"pl-c1\">24</span>\n\nstore.set(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>user<span class=\"pl-pds\">\'</span></span>, { name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>marcus<span class=\"pl-pds\">\'</span></span>, likes<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>javascript<span class=\"pl-pds\">\'</span></span> })\n<span class=\"pl-c1\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hi my name is <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> store.get(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>user<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-c1\">name</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>!<span class=\"pl-pds\">\"</span></span>)\n\nstore.set(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>tags<span class=\"pl-pds\">\'</span></span>, [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>javascript<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>localStorage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>store.js<span class=\"pl-pds\">\'</span></span>])\n<span class=\"pl-c1\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>We\'ve got <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> store.get(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>tags<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-c1\">length</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> tags here<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<p>The native serialization engine of javascript is JSON. Rather than leaving it up to you to serialize and deserialize your values, store.js uses JSON.stringify() and JSON.parse() on each call to store.set() and store.get(), respectively.</p>\n\n<p>Some browsers do not have native support for JSON. For those browsers you should include <a href=\"https://github.com/marcuswestin/store.js/blob/master/non-minified%20copy%20is%20included%20in%20this%20repo\">JSON.js</a>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#no-sessionstorageauto-expiration\"><span class=\"octicon octicon-link\"></span></a>No sessionStorage/auto-expiration?</h2>\n\n<p>No. I believe there is no way to provide sessionStorage semantics cross browser. However, it is trivial to expire values on read on top of store.js:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> storeWithExpiration <span class=\"pl-k\">=</span> {\n    <span class=\"pl-en\">set</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">val</span>, <span class=\"pl-smi\">exp</span>) {\n        store.set(key, { val<span class=\"pl-k\">:</span>val, exp<span class=\"pl-k\">:</span>exp, time<span class=\"pl-k\">:</span><span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>().<span class=\"pl-c1\">getTime</span>() })\n    },\n    <span class=\"pl-en\">get</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>) {\n        <span class=\"pl-k\">var</span> info <span class=\"pl-k\">=</span> store.get(key)\n        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>info) { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span> }\n        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>().<span class=\"pl-c1\">getTime</span>() <span class=\"pl-k\">-</span> info<span class=\"pl-c1\">.time</span> <span class=\"pl-k\">&gt;</span> info.exp) { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span> }\n        <span class=\"pl-k\">return</span> info.val\n    }\n}\nstoreWithExpiration.set(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>foo<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>bar<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-c1\">1000</span>)\n<span class=\"pl-c1\">setTimeout</span>(<span class=\"pl-k\">function</span>() { <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(storeWithExpiration.get(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>foo<span class=\"pl-pds\">\'</span></span>)) }, <span class=\"pl-c1\">500</span>) <span class=\"pl-c\">// -&gt; \"bar\"</span>\n<span class=\"pl-c1\">setTimeout</span>(<span class=\"pl-k\">function</span>() { <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(storeWithExpiration.get(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>foo<span class=\"pl-pds\">\'</span></span>)) }, <span class=\"pl-c1\">1500</span>) <span class=\"pl-c\">// -&gt; null</span></pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/marcuswestin/store.js#testing\"><span class=\"octicon octicon-link\"></span></a>Testing</h2>\n\n<p>For a browser: Go to <a href=\"http://marcuswestin.github.io/store.js/test.html\">http://marcuswestin.github.io/store.js/test.html</a> to test the latest version of store.js.</p>\n\n<p>For a browser, locally: do <code>npm install node-static &amp;&amp; ./node_modules/node-static/bin/cli.js</code> and go to http://localhost:8080</p>\n\n<p>(Note that test.html must be served over http:// or https://. This is because localStore does not work in some browsers when using the file:// protocol.)</p>\n\n<p>For Nodejs: do <code>npm install . localStorage &amp;&amp; node test-node.js</code></p>\n',1),(123,'gernest/utron','https://github.com/gernest/utron',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><code>utron</code> is a lightweight MVC framework in Go (<a href=\"https://golang.org\">Golang</a>) for building fast, scalable and robust database-driven web applications.</p>\n\n\n\n\n\n<p><code>utron</code> is a lightweight MVC framework. It is based on the principles of simplicity, relevance and elegance.</p>\n\n<ul><li><p>Simplicity. The design is simple, easy to understand and doesn\'t introduce many layers between you and the standard library. It is a goal of the project that users should understand the whole framework in a single day.</p></li>\n<li><p>Relevance. <code>utron</code> doesn\'t assume anything. We focus on things that matter, this way we are able to ensure easy maintenance and keeping the system well-organized, well-planned and sweet.</p></li>\n<li><p>Elegance. <code>utron</code> uses golang best practises. We are not afraid of heights, it\'s just that we need a parachute in our backpack. The source code is heavily documented, any functionality should be well explained and well tested.</p></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#motivation\"><span class=\"octicon octicon-link\"></span></a>Motivation</h2>\n\n<p>After two years of playing with golang, I have looked on some of my projects and asked myself: \"How golang is that?\"</p>\n\n<p>So, <code>utron</code> is my reimagining of lightweight MVC, that maintains the golang spirit, and works seamlessly with the current libraries.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<pre><code>$ go get github.com/gernest/utron\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#the-mvc\"><span class=\"octicon octicon-link\"></span></a>The MVC</h2>\n\n<p>There is nothing revolutionary about MVC that <code>utron</code> brings on the table.</p>\n\n<ul><li><p>M is for models, it is the data structures that helps in data persistence, utron uses <a href=\"https://github.com/jinzhu/gorm\">gorm</a> an already established Object Relational Mapper for golang. So if you are familiar with gorm then you are good on the M part.</p></li>\n<li><p>V is for Views. Views are templates that render the final output. <code>utron</code> uses golang standard templates. You don\'t have to learn anything new, just the text/template package to master views.</p></li>\n<li><p>C is for controllers. This is where the application logic stands. In order to achieve modularity, there are some things that utron requires of controllers. This subject is explained in more detail below.</p></li>\n</ul><p>With the power of composition and inheritance, <code>utron</code> achieves a beautiful MVC workflow. I recommend you read the source code, it is well documented so as to demystify any magical unicorns.</p>\n\n<p>We will create a TODO List application in <code>utron</code> to explore all components that makes <code>utron</code> MVC tick. The source code of the final application is included in this repository and can be found here <a href=\"https://github.com/gernest/utron/blob/master/fixtures/todo\">utron todoMVC</a></p>\n\n\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#project-structure\"><span class=\"octicon octicon-link\"></span></a>Project structure</h2>\n\n<p>This is the structure of the <code>todo</code> list application that will showcase how you can build web apps with <code>utron</code>:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>todo\n├── config\n│   ├── app.json\n│   ├── app.toml\n│   └── app.yml\n├── controllers\n│   └── todo.go\n├── models\n│   └── todo.go\n├── static\n│   └── todo.css\n├── views\n│   ├── error.html\n│   └── index.html\n└── main.go\n\n5 directories, 9 files</pre></div>\n\n<p>I have included three configuration files to show how, but you are better off with just one.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#configurations\"><span class=\"octicon octicon-link\"></span></a>Configurations</h2>\n\n<p>utron support yaml, json and toml configurations files. In our todo app, we put the configuration files in the config directory. I have included all three formats for clarity, you can be just fine with either one of them.</p>\n\n<p><code>utron</code> searches for a file named <code>app.json</code>, or <code>app.yml</code> or <code>app.toml</code> in the config directory. The first to be found is the one to be used.</p>\n\n<p>This is the content of <code>config/app.json</code> file:</p>\n\n<div class=\"highlight highlight-source-json\"><pre>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>app_name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>utron web app<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>base_url<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://localhost:8090<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>port<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">8090</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>verbose<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">false</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>static_dir<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>static<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>view_dir<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>views<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>database<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>postgres<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>database_conn<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>postgres://postgres:postgres@localhost/todo<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n\n<p>You can override the values from the config file by setting environment variables. The names of the environment variables are shown below (with their details)</p>\n\n<table><thead><tr><th>setting</th>\n<th>environment name</th>\n<th>details</th>\n</tr></thead><tbody><tr><td>app_name</td>\n<td>APP_NAME</td>\n<td>application name</td>\n</tr><tr><td>base_url</td>\n<td>BASE_URL</td>\n<td>the base url to use in your views</td>\n</tr><tr><td>port</td>\n<td>PORT</td>\n<td>port number the server will listen to</td>\n</tr><tr><td>verbose</td>\n<td>VERBOSE</td>\n<td>if set to true, will make all state information log to stdout</td>\n</tr><tr><td>static_dir</td>\n<td>STATIC_DIR</td>\n<td>directory to serve static files e.g. images, js or css</td>\n</tr><tr><td>view_dir</td>\n<td>VIEWS_DIR</td>\n<td>directory to look for views</td>\n</tr><tr><td>database</td>\n<td>DATABASE</td>\n<td>the name of the database you use, e.g. postgres, mysql, foundation</td>\n</tr><tr><td>database_conn</td>\n<td>DATABASE_CONN</td>\n<td>connection string to your database</td>\n</tr></tbody></table><p>If you haven\'t specified explicitly the location of the configuration directory, it defaults to the directory named <code>config</code> in the current working directory.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#models\"><span class=\"octicon octicon-link\"></span></a>Models</h2>\n\n<p><code>utron</code> uses the <a href=\"https://github.com/jinzhu/gorm\">gorm</a> library as its Object Relational Mapper, so you won\'t need to learn anything fancy. In our todo app, we need to define a <code>Todo</code> model that will be used to store our todo details.</p>\n\n<p>In the file <code>models/todo.go</code> we define our todo model like this</p>\n\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">package</span> models\n\n<span class=\"pl-k\">import</span> (\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>time<span class=\"pl-pds\">\"</span></span>\n\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/gernest/utron<span class=\"pl-pds\">\"</span></span>\n)\n\n<span class=\"pl-k\">type</span> <span class=\"pl-v\">Todo</span> <span class=\"pl-k\">struct</span> {\n    <span class=\"pl-v\">ID</span>        <span class=\"pl-k\">int</span>       <span class=\"pl-s\"><span class=\"pl-pds\">`</span>schema: \"-\"<span class=\"pl-pds\">`</span></span>\n    <span class=\"pl-v\">Body</span>      <span class=\"pl-k\">string</span>    <span class=\"pl-s\"><span class=\"pl-pds\">`</span>schema:\"body\"<span class=\"pl-pds\">`</span></span>\n    <span class=\"pl-v\">CreatedAt</span> time.<span class=\"pl-smi\">Time</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>schema:\"-\"<span class=\"pl-pds\">`</span></span>\n    <span class=\"pl-v\">UpdatedAt</span> time.<span class=\"pl-smi\">Time</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>schema:\"-\"<span class=\"pl-pds\">`</span></span>\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">init</span>() {\n    utron.<span class=\"pl-c1\">RegisterModels</span>(&amp;Todo{})\n}</pre></div>\n\n<p>Notice that we need to register our model by calling <code>utron.RegisterModels(&amp;Todo{})</code> in the <code>init</code> function otherwise <code>utron</code> won\'t be aware of the model.</p>\n\n<p><code>utron</code> will automatically create the table <code>todos</code> if it doesn\'t exist yet.</p>\n\n<p>Don\'t be confused by the <code>schema</code> tag, I just added them since we will use the <a href=\"https://github.com/gorilla/schema\">schema</a> package to decode form values(this has nothing to do with <code>utron</code>, you can use whatever form library you fancy.)</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#controllers\"><span class=\"octicon octicon-link\"></span></a>Controllers</h2>\n\n<p><code>utron</code> controllers are structs that implement the <code>Controller</code> interface. To help make <code>utron</code> usable, <code>utron</code> provides a <code>BaseController</code> which implements the <code>Controller</code> interface and offers additional conveniences to help in composing reusable code.</p>\n\n<p>You get all the benefits of <code>BaseController</code> by embedding it in your struct. Our <code>TODO</code> Controller is in the <code>controller/todo.go</code></p>\n\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">package</span> controllers\n\n<span class=\"pl-k\">import</span> (\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>net/http<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>strconv<span class=\"pl-pds\">\"</span></span>\n\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/gernest/utron<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/gernest/utron/fixtures/todo/models<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/gorilla/schema<span class=\"pl-pds\">\"</span></span>\n)\n\n<span class=\"pl-k\">var</span> <span class=\"pl-smi\">decoder</span> = schema.<span class=\"pl-c1\">NewDecoder</span>()\n\n<span class=\"pl-k\">type</span> <span class=\"pl-v\">TODO</span> <span class=\"pl-k\">struct</span> {\n    *utron.<span class=\"pl-smi\">BaseController</span>\n    <span class=\"pl-v\">Routes</span> []<span class=\"pl-k\">string</span>\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">(<span class=\"pl-v\">t</span> *<span class=\"pl-v\">TODO</span>) <span class=\"pl-en\">Home</span></span>() {\n    <span class=\"pl-smi\">todos</span> <span class=\"pl-k\">:=</span> []*models.<span class=\"pl-smi\">Todo</span>{}\n    t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">DB</span>.<span class=\"pl-c1\">Order</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>created_at desc<span class=\"pl-pds\">\"</span></span>).<span class=\"pl-c1\">Find</span>(&amp;todos)\n    t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">Data</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>List<span class=\"pl-pds\">\"</span></span>] = todos\n    t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">Template</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>index<span class=\"pl-pds\">\"</span></span>\n    t.<span class=\"pl-c1\">HTML</span>(http.<span class=\"pl-smi\">StatusOK</span>)\n}\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">(<span class=\"pl-v\">t</span> *<span class=\"pl-v\">TODO</span>) <span class=\"pl-en\">Create</span></span>() {\n    <span class=\"pl-smi\">todo</span> <span class=\"pl-k\">:=</span> &amp;models.<span class=\"pl-smi\">Todo</span>{}\n    <span class=\"pl-smi\">req</span> <span class=\"pl-k\">:=</span> t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-c1\">Request</span>()\n    req.<span class=\"pl-c1\">ParseForm</span>()\n    <span class=\"pl-k\">if</span> <span class=\"pl-smi\">err</span> <span class=\"pl-k\">:=</span> decoder.<span class=\"pl-c1\">Decode</span>(todo, req.<span class=\"pl-smi\">PostForm</span>); err != <span class=\"pl-c1\">nil</span> {\n        t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">Data</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Message<span class=\"pl-pds\">\"</span></span>] = err.<span class=\"pl-c1\">Error</span>()\n        t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">Template</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>error<span class=\"pl-pds\">\"</span></span>\n        t.<span class=\"pl-c1\">HTML</span>(http.<span class=\"pl-smi\">StatusInternalServerError</span>)\n        <span class=\"pl-k\">return</span>\n    }\n\n    t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">DB</span>.<span class=\"pl-c1\">Create</span>(todo)\n    t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-c1\">Redirect</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>, http.<span class=\"pl-smi\">StatusFound</span>)\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">(<span class=\"pl-v\">t</span> *<span class=\"pl-v\">TODO</span>) <span class=\"pl-en\">Delete</span></span>() {\n    <span class=\"pl-smi\">todoID</span> <span class=\"pl-k\">:=</span> t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">Params</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>]\n    <span class=\"pl-smi\">ID</span>, <span class=\"pl-smi\">err</span> <span class=\"pl-k\">:=</span> strconv.<span class=\"pl-c1\">Atoi</span>(todoID)\n    <span class=\"pl-k\">if</span> err != <span class=\"pl-c1\">nil</span> {\n        t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">Data</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Message<span class=\"pl-pds\">\"</span></span>] = err.<span class=\"pl-c1\">Error</span>()\n        t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">Template</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>error<span class=\"pl-pds\">\"</span></span>\n        t.<span class=\"pl-c1\">HTML</span>(http.<span class=\"pl-smi\">StatusInternalServerError</span>)\n        <span class=\"pl-k\">return</span>\n    }\n    t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-smi\">DB</span>.<span class=\"pl-c1\">Delete</span>(&amp;models.<span class=\"pl-smi\">Todo</span>{ID: ID})\n    t.<span class=\"pl-smi\">Ctx</span>.<span class=\"pl-c1\">Redirect</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>, http.<span class=\"pl-smi\">StatusFound</span>)\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">NewTODO</span>() *<span class=\"pl-v\">TODO</span> {\n    <span class=\"pl-k\">return</span> &amp;TODO{\n        Routes: []<span class=\"pl-k\">string</span>{\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>get;/;Home<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>post;/create;Create<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>get;/delete/{id};Delete<span class=\"pl-pds\">\"</span></span>,\n        },\n    }\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">init</span>() {\n    utron.<span class=\"pl-c1\">RegisterController</span>(<span class=\"pl-c1\">NewTODO</span>())\n}</pre></div>\n\n<p>Note we registered our controller by calling <code>utron.RegisterController(NewTODO())</code> in the <code>init</code> function\nso as to make <code>utron</code> aware of our controller. See Routing section below for more explanation of what the controller is doing.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#routing\"><span class=\"octicon octicon-link\"></span></a>Routing</h2>\n\n<p>By registering a controller, there are two ways of assigning routes.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/gernest/utron#case-1--vanilla-routing\"><span class=\"octicon octicon-link\"></span></a>case 1- vanilla routing</h3>\n\n<p>By registering a Controller, routes are auto-generated for the controller methods. The format is <code>/:controler/:method</code> where <code>:controller</code> is the lowercase name of the Controller, and <code>:method</code> is its method in lowercase.</p>\n\n<p>so <code>(*TODO) Hello()</code> will map to <code>/todo/hello</code></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/gernest/utron#case-2--specifying-routes-field\"><span class=\"octicon octicon-link\"></span></a>case 2- Specifying Routes field</h3>\n\n<p>The user controller can define a field named <code>Routes</code> it should be of type <code>[]string</code>, then you can assign routes by appending route string to the Routes field.</p>\n\n<p>This is a better explanation from comments on the <code>router.go</code> file.</p>\n\n<div class=\"highlight highlight-source-go\"><pre>        <span class=\"pl-c\">// if there is any field named Routes, and it is of signature []string</span>\n        <span class=\"pl-c\">// then the field\'s value is used to overide the patterns defined earlier.</span>\n        <span class=\"pl-c\">//</span>\n        <span class=\"pl-c\">// It is not necessary for every user implementation to define method named Routes</span>\n        <span class=\"pl-c\">// If we cant find it then we just ignore its use( fallback to defaults).</span>\n        <span class=\"pl-c\">//</span>\n        <span class=\"pl-c\">// Route strings, are of the form \"httpMethods;path;method\"</span>\n        <span class=\"pl-c\">// where httMethod: is a comma separated list of http method strings</span>\n        <span class=\"pl-c\">//                  e.g GET,POST,PUT.</span>\n        <span class=\"pl-c\">//                  The case does not matter, you can use lower case or upper case characters</span>\n        <span class=\"pl-c\">//                  or even mixed case, that is get,GET,gET and GeT will all be treated as GET</span>\n        <span class=\"pl-c\">//</span>\n        <span class=\"pl-c\">//        path:     Is a url path or pattern, utron uses the gorilla mux package. So, everything you can do</span>\n        <span class=\"pl-c\">//                  with gorilla mux url path then you can do here.</span>\n        <span class=\"pl-c\">//                  e.g /hello/{world}</span>\n        <span class=\"pl-c\">//                  Don\'t worry about the params, they will be accessible via .Ctx.Params field in your</span>\n        <span class=\"pl-c\">//                  controller.</span>\n        <span class=\"pl-c\">//</span>\n        <span class=\"pl-c\">//        method:   The name of the user Controller method to execute for this route.</span></pre></div>\n\n<p>So, that explains much the following lines in our <code>todo</code> app in <code>controllers/todo.go</code></p>\n\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">func</span> <span class=\"pl-en\">NewTODO</span>() *<span class=\"pl-v\">TODO</span> {\n    <span class=\"pl-k\">return</span> &amp;TODO{\n        Routes: []<span class=\"pl-k\">string</span>{\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>get;/;Home<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>post;/create;Create<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>get;/delete/{id};Delete<span class=\"pl-pds\">\"</span></span>,\n        },\n    }\n}</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/gernest/utron#case-3-using-routes-file\"><span class=\"octicon octicon-link\"></span></a>case 3: using routes file</h3>\n\n<p>You can define routes in a file, the supported formats are json, toml and yaml. The routes file should be in the <code>config</code> directory.</p>\n\n<p><code>utron</code> will look for file named <code>routes.json</code>, <code>routes.toml</code> or <code>routes.yml</code> in that order, the first to be found is the one to be used.</p>\n\n<p>I have included a sample routes file in <a href=\"https://github.com/gernest/utron/blob/master/fixtures/config/routes.json\">fixtures/config/routes.json</a>.</p>\n\n<p>The difference with case 2 above is you will need to specify the name of the controller explicitly. That is for <code>TODO</code> controller, we can define the home route string in routes file like <code>get;/;TODO.Home</code>.</p>\n\n<p>We won\'t use this in our TODO list app, but you can find it useful in your use case.\'</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#views\"><span class=\"octicon octicon-link\"></span></a>Views</h2>\n\n<p><code>utron</code> views are golang templates. This is the content of <code>views/index.html</code>:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;!DOCTYPE html&gt;\n&lt;<span class=\"pl-ent\">html</span>&gt;\n&lt;<span class=\"pl-ent\">head</span> <span class=\"pl-e\">lang</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">charset</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>UTF-8<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">title</span>&gt;Utron Todo MVC&lt;/<span class=\"pl-ent\">title</span>&gt;\n    &lt;<span class=\"pl-ent\">link</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/static/todo.css<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">rel</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stylesheet<span class=\"pl-pds\">\"</span></span>&gt;\n&lt;/<span class=\"pl-ent\">head</span>&gt;\n&lt;<span class=\"pl-ent\">body</span>&gt;\n&lt;<span class=\"pl-ent\">form</span> <span class=\"pl-e\">method</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>post<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">action</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/create<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">table</span>&gt;\n        &lt;<span class=\"pl-ent\">tr</span>&gt;\n           &lt;<span class=\"pl-ent\">th</span>&gt;\n               Create A TODO\n           &lt;/<span class=\"pl-ent\">th</span>&gt;\n        &lt;/<span class=\"pl-ent\">tr</span>&gt;\n        &lt;<span class=\"pl-ent\">tr</span>&gt;\n            &lt;<span class=\"pl-ent\">td</span>&gt;\n                &lt;<span class=\"pl-ent\">input</span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>body<span class=\"pl-pds\">\"</span></span>&gt;\n            &lt;/<span class=\"pl-ent\">td</span>&gt;\n            &lt;<span class=\"pl-ent\">td</span>&gt;\n                &lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>submit<span class=\"pl-pds\">\"</span></span>&gt;create&lt;/<span class=\"pl-ent\">button</span>&gt;\n            &lt;/<span class=\"pl-ent\">td</span>&gt;\n        &lt;/<span class=\"pl-ent\">tr</span>&gt;\n    &lt;/<span class=\"pl-ent\">table</span>&gt;\n&lt;/<span class=\"pl-ent\">form</span>&gt;\n&lt;<span class=\"pl-ent\">table</span>&gt;\n    &lt;<span class=\"pl-ent\">tr</span>&gt;\n        &lt;<span class=\"pl-ent\">th</span>&gt;\n            My TODO LIST\n        &lt;/<span class=\"pl-ent\">th</span>&gt;\n    &lt;/<span class=\"pl-ent\">tr</span>&gt;\n    {{range $k,$v:=.List}}\n    &lt;<span class=\"pl-ent\">tr</span>&gt;\n        &lt;<span class=\"pl-ent\">td</span>&gt;\n            {{$v.ID}}\n        &lt;/<span class=\"pl-ent\">td</span>&gt;\n        &lt;<span class=\"pl-ent\">td</span>&gt;\n            {{$v.Body}}\n        &lt;/<span class=\"pl-ent\">td</span>&gt;\n        &lt;<span class=\"pl-ent\">td</span>&gt;\n            &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/delete/{{$v.ID}}<span class=\"pl-pds\">\"</span></span>&gt;\n                &lt;<span class=\"pl-ent\">button</span>&gt;Delete&lt;/<span class=\"pl-ent\">button</span>&gt;\n            &lt;/<span class=\"pl-ent\">a</span>&gt;\n        &lt;/<span class=\"pl-ent\">td</span>&gt;\n    &lt;/<span class=\"pl-ent\">tr</span>&gt;\n    {{end}}\n&lt;/<span class=\"pl-ent\">table</span>&gt;\n&lt;/<span class=\"pl-ent\">body</span>&gt;\n&lt;/<span class=\"pl-ent\">html</span>&gt;</pre></div>\n\n<p>Note that we have access to <code>.List</code> in our view. This is set in the controller, additionally you can access the application configuration via <code>.Config</code> context.</p>\n\n<p>Above is a simple golang template to render our <code>todo</code> list application.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#the-maingo-file\"><span class=\"octicon octicon-link\"></span></a>The main.go file</h2>\n\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">package</span> main\n\n<span class=\"pl-k\">import</span> (\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/gernest/utron<span class=\"pl-pds\">\"</span></span>\n    _ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/gernest/utron/fixtures/todo/controllers<span class=\"pl-pds\">\"</span></span>\n    _ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/gernest/utron/fixtures/todo/models<span class=\"pl-pds\">\"</span></span>\n)\n\n<span class=\"pl-k\">func</span> <span class=\"pl-en\">main</span>() {\n    utron.<span class=\"pl-c1\">Run</span>()\n}</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#running-the-todo-app\"><span class=\"octicon octicon-link\"></span></a>Running the TODO app</h2>\n\n<p>In case you want to run the app we just created, it is included in this repository in <a href=\"https://github.com/gernest/utron/blob/master/fixtures/todo\">fixtures/todo</a></p>\n\n<ul><li>Prerequisite\n\n<ul><li>a working database connection (postres, mysql or foundation)</li>\n<li>golang toolchain installed and the <code>go</code> command in your system $PATH.</li>\n</ul></li>\n</ul><p>step 1 Install <code>utron</code> which will also include the todo app</p>\n\n<pre><code>$ go get github.com/gernest/utron\n</code></pre>\n\n<p>step 2 cd into the todo app directory</p>\n\n<pre><code>$ cd $GOPATH/src/github.com/gernest/utron/fixtures/todo\n</code></pre>\n\n<p>step 3 install dependency</p>\n\n<pre><code>$ go get github.com/gorilla/schema\n</code></pre>\n\n<p>step 4 edit <code>config/app.json</code> by setting database and database_conn to your values</p>\n\n<p>step 5 run the app</p>\n\n<pre><code>go run main.go\n</code></pre>\n\n<p>If you see something like this</p>\n\n<pre><code>$ 2015/09/15 18:27:24 &gt;&gt;INFO&gt;&gt; starting server at http://localhost:8090\n</code></pre>\n\n<p>Then everything is okay, open <code>http://localhost:8090</code> in your browser to start writing your todos.\nIf you experience anything different, redo the steps and make sure you did them in order and with no errors. If so, and it still doesn\'t work, better open an <a href=\"https://github.com/gernest/utron/issues\">issue</a>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/gernest/utron#screenshot\"><span class=\"octicon octicon-link\"></span></a>Screenshot</h2>\n\n<p><a href=\"https://github.com/gernest/utron/blob/master/fixtures/todo.png\"><img src=\"https://github.com/gernest/utron/raw/master/fixtures/todo.png\" alt=\"todo app with utron\" /></a></p>\n\n\n\n<p>Start with clicking the star button to make the author and his neighbors happy. Then fork it and submit a pull request for whatever change you want to be added to this project.</p>\n\n<p>Or, open an issue for any questions.</p>\n\n\n\n<p>Geofrey Ernest <a href=\"mailto:geofreyernest@live.com\">geofreyernest@live.com</a></p>\n\n<p>Twitter  : <a href=\"https://twitter.com/gernesti\">@gernesti</a></p>\n\n<p>Facebook : <a href=\"https://www.facebook.com/geofrey.ernest.35\">Geofrey Ernest</a></p>\n\n\n\n<p>I have 2 years experience working with golang and 5 years doing web development. I don\'t have any juicy CV because I\'m in Tanzania, and almost everyone I graduated with has no job, never had one and doubts if he/she will ever land one (unless, of course, you are lucky which I\'m not.)</p>\n\n<p>And if you are a recruiter, any tips on where I\'m doing it wrong will be highly appreciated, because I have my full trust that code will get me out of this abysmal poverty.</p>\n\n\n\n<p>These are amazing projects that made <code>utron</code> possible.</p>\n\n\n\n<ul><li> Fix a lot of typos (English is my third language).</li>\n</ul><p>This project is released under MIT licence see <a href=\"https://github.com/gernest/utron/blob/master/LICENCE\">LICENCE</a> for more details.</p>\n',1),(124,'Flask-Potion â€” Flask-Potion 0.0.0 documentation','http://potion.readthedocs.org/en/latest/',1,0,'\n            \n  <img alt=\"Flask-Potion\" class=\"align-center\" src=\"http://potion.readthedocs.org/en/latest/_images/Logo.png\" /><div class=\"section\">\n\n<p><strong>Flask-Potion</strong> is a powerful Flask extension for building RESTful JSON APIs.\nPotion features include validation, model resources and routes, relations, object permissions, filtering, sorting,\npagination, signals, and automatic API schema generation.</p>\n<p>Potion is designed to handle SQLAlchemy models, but it is also possible to integrate other data stores,\nor even to use parts of Potion without any data store at all.</p>\n<div class=\"section\">\n<h2>User’s guide</h2>\n\n</div>\n</div>\n\n\n          ',1),(125,'Containers 101 - Developer.com','http://www.developer.com/design/containers-101.html',1,0,'\n		<div class=\"col clearfix\">\n			<div class=\"colLeft dimMainLeft\">\n								\n				\n				\n				<div class=\"article\">\n					\n					  \n					\');\n                                                                        newwindow.document.write(\'</div>\');\n                                                                        newwindow.document.write(\'<div>\');\n                                                                        newwindow.document.write(\'\');\n                                                                        newwindow.document.write(\'<div class=\"col clearfix\">\');\n                                                                        newwindow.document.write(\'<div class=\"author_bio\">\');\n                                                                        newwindow.document.write(\'<div class=\"author colLeft\">\');\n                                                                        newwindow.document.write(\'<ul class=\"noBullets\"><li>\');\n                                                                        newwindow.document.write(\'</li><li>Bob Reselman\');\n                                                                        newwindow.document.write(\'</li></ul>\');\n                                                                        newwindow.document.write(\'</div>\');\n                                                                        newwindow.document.write(\'<p>Bob Reselman has written numerous books and articles about computer programming and topics related to software development. Presently Bob is a Technical Process Architect at Edmunds Inc. Edmunds Inc. is a leading publisher of high volume, high availabilit </p>\');\n                                                                        newwindow.document.write(\'\');\n                                                                        newwindow.document.write(\'</div>\');\n                                                                        newwindow.document.write(\'</div>\');\n                                                                        newwindow.document.write(\'</div>\');\n                                                                        newwindow.document.write(\'</div>\');\n                                                                        newwindow.document.write(\'\'+\'dy&gt;\');\n                                                                        newwindow.document.write(\'\'+\'ml&gt;\');\n								        if (window.focus) {newwindow.focus()}\n								}\n							\n\n							<a class=\"email\">Bio »</a>\n														\n																					<a href=\"http://www.developer.com/feedback/design/containers-101.html\">Send Email »</a>\n																					\n														<a href=\"http://www.developer.com/author/Bob-Reselman-91220.htm\">More Articles  »</a>\n														\n						\n						\n					</div>\n					<p>About six months ago, I started to notice that there is a lot of hubbub going around in the tech-o-sphere about containers as a new way to approach virtual computing. I like exploring new technology, so I\'ve spent the last few months getting the ins and outs of them. Here\'s what I can tell you: Containers are an important technology that is not going away anytime soon. There are a lot of players in the space, and new ones enter all the time. If you are a developer in the modern world, understanding and using containers are necessary skills to have in your professional life.</p>\n<p>So, in the spirit of moving a good idea along, I am going to share with you the basics of container technology by answering the following questions:</p>\n<ul><li>What are containers?</li>\n<li>What\'s so special about containers?</li>\n<li>How do I use them?</li>\n</ul><p>My desire in answering these question is to give you the basic knowledge and understanding that you need to start using containers when making and deploying code.</p>\n\n\n\n\n<p>Let\'s get started.</p>\n<h2>What Are Containers?</h2>\n\n\n		<p>Container technology is a way to create a virtual environment by using an isolated process on a host computer. The isolated process, the container, has its own set of file system resources and subordinate processes. And, the container does not intrude on the host system, nor does the host system intrude on the container.</p>\n<p>A container runs on the kernel of the host computer (see Figure 1). A component called, a <em>container manager</em>, makes it so that the container can run on the host. (You\'ll learn more about container managers later in this article.)</p>\n<p><img alt=\"Contain1\" height=\"297\" src=\"http://www.developer.com/imagesvr_ce/2432/Contain1.jpg\" width=\"296\" /><br /><strong>Figure 1:</strong> A container provides the ability to run an isolated process that has its own resources in a shared environment</p>\n<h2>What\'s So Special About Containers?</h2>\n<p>To understand what makes containers so special, we need to review the concept of the virtual machine. A <em>virtual machine</em> is a piece of software that emulates a computer. The benefit of a virtual machine is that you get a lot more efficiency out of your hardware usage. You can have a lot of virtual machines running on a single piece of hardware (see Figure 2).</p>\n\n<p><img alt=\"Contain2\" height=\"365\" src=\"http://www.developer.com/imagesvr_ce/9209/Contain2.gif\" width=\"600\" /><br /><strong>Figure 2:</strong> When you use virtual machines, resource allocation is fixed for each machine.</p>\n<p>However, there is a drawback to virtual machine technology. Take a look at Figure 2. You\'ll notice that in the illustration there are three virtual machines running on a computer that has 48 GB of RAM, a 12 core CPU, and 3 terabytes of disk storage. Each virtual machine is allocated 16 GB of RAM, 4 cores, and a terabyte of storage. So far, so good. But, here is the drawback. Regardless of whether any one machine is using all of it resources or a fraction of its resources, the hardware allocation is static. In other words, if one of the virtual machines never uses more than 1 GB of RAM, and stores only 100 MB of the file system, that machine still has dibs on 4 GB of RAM and a full terabyte of storage, <strong><em>despite the fact that the virtual machine is using only 25% of its RAM and 1% of it storage</em></strong>. This is not so good.</p>\n<p>A container, on the other hand, does not tie up resources. When you make a container, you do not assign it RAM, processors, or storage. Rather, the container uses the RAM, CPU, and storage on the host in a shared manner. You can load as many containers on a physical machine as the machine can handle. A container will take only what it needs at the the time of need. Again, there is no fixed allocation of resources.</p>\n<p>And, there\'s more. Typically, hardware that runs containers uses a light-weight version of Linux as the operating system. This light-weight host OS provides kernel level service. <a href=\"https://coreos.com/\">CoreOS</a> is one of the popular host operating systems. There are others, such as Ubuntu <a href=\"https://developer.ubuntu.com/en/snappy/start/\">Snappy</a> and Red Hat <a href=\"https://www.redhat.com/en/about/blog/os-behind-curtain\">Atomic</a>.</p>\n<p>When you create a container, you can add in an operating system of your choosing; say, you want to use Ubuntu. The Ubuntu operating system that\'s in the container will leverage the host kernel, but have packages that are part of Ubuntu. For example, whereas the kernel knows nothing about package management, Ubuntu will provide <a href=\"https://help.ubuntu.com/12.04/serverguide/apt-get.html\">apt-get</a>. And, you can configure the container to use a special Web server, script interpreter, and so forth.... The result is that you get the environment configuration that a virtual machine provides without tying up the resources on the host system with static allocation. Also, the container will have an IP address that is visible within the host. Thus, the host has direct access to the container via its IP address (see Figure 3).</p>\n<p><img alt=\"Contain3\" height=\"281\" src=\"http://www.developer.com/imagesvr_ce/775/Contain3.jpg\" width=\"473\" /><br /><strong>Figure 3:</strong> A container shares host resources and leverage the host\'s operating system for kernel level services.</p>\n<table align=\"center\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\" class=\"a\" width=\"720\"><tbody><tr><td valign=\"top\" width=\"720\">\n<p align=\"center\"><strong>What About Windows?</strong></p>\n<p>A constraint of containers is that you cannot mix and match operating systems. In the world of virtual machines, it is quite usual to have a Windows host support a virtual machine running Linux, or an OSX system running a Windows VM. Not so with containers because, by definition, a container uses the host kernel. Thus, you need to match up operating systems. Linux containers run on Linux hosts. You can run Windows containers on Windows Server as of <a href=\"https://msdn.microsoft.com/en-us/virtualization/windowscontainers/about/about_overview\">Windows Server 2016</a>. Also, there is a <a href=\"https://docs.docker.com/installation/windows/\">Windows version</a> of the container manager, Docker.</p>\n<p>If you do find yourself in a place where you need to run Linux containers on Windows, you can always start up a Linux virtual machine under Windows and use the Linux VM as your host system.</p>\n</td>\n</tr></tbody></table><h2>How Do I Use Them?</h2>\n<p>There are three concepts that you need to understand in order to work with containers. The first is the notion of the container manager. The second is understanding container layer architecture. The third is container registries.</p>\n<h3>Enter the Container Manager</h3>\n<p>A container manager is a tool that you use to create a container, deploy it, and get a container running on a host. The most popular container managers in play as of this writing are <a href=\"https://www.docker.com/\">Docker</a> and <a href=\"https://coreos.com/blog/rocket/\">Rocket</a>.</p>\n<p>A container manager works this way: Say you\'ve written a small Hello World Web application in PHP. You\'ll create a container configuration file in which you\'ll describe the PHP files you application requires. Also in the configuration file, you\'ll define the layers that your application requires. In this case, let\'s say your application needs the PHP 5.6 interpreter and you want to run under the Apache web server. You\'ll issue a command via the container manager to run your application. Behind the scenes, the container manager will (1) read the configuration file to determine the layers it needs to get from a registry, (2) create your container image, (3) including your apps source file, and (4) fire it up on the host machine (see Figure 4).</p>\n<p><img alt=\"Contain4\" height=\"521\" src=\"http://www.developer.com/imagesvr_ce/9879/Contain4.jpg\" width=\"424\" /><br /><strong>Figure 4:</strong> Configuration files, images, and registries are all part of the container ecosystem.</p>\n<p>Simple, huh? Yet, you are probably asking, \"hey, what\'s a layer, what\'s an image, what\'s registry, what\'s going on?\" These are good questions that deserve to be answered. So, let\'s answer them.</p>\n<h3>Understanding Layers and Images</h3>\n<p>A container is made up of layers. A layer is a container image. (Yes, the notion of a container made up of other container might be a bit confusing at first.) You can start with an operating system base layer. Then, you declare other other layers, say a Web server and a script runtime. Once you have your container defined, you\'ll create an image based on your defined container. An image is a template of your container that you can reuse on one or many hosts.</p>\n<p>Figure 5 illustrates a scenario in which the host computer is running CoreOs and using Docker as the container manager. There are three containers running on the host. One container uses Debian as the base OS layer, Apache as the web server, PHP 5.5 as the script run time, and a custom PHP application for which the container has been created. Another container is for an additional customer PHP app that uses <a href=\"http://wiki.nginx.org/Main\">nginx</a> as the Web server, and PHP 5.6 as the script interpreter, all running on a RHEL base image. Finally, a third container has a JSP app running over Tomcat and Apache, on an Ubuntu base image.</p>\n<p><img alt=\"Contain5\" height=\"470\" src=\"http://www.developer.com/imagesvr_ce/9379/Contain5.jpg\" width=\"600\" /><br /><strong>Figure 5:</strong> A container image can define a special host as the base image, and then add layers for your web server, script run time, and your script files.</p>\n<p>As you can see, each container is distinct. Yet, they live side by side as isolated processes leveraging the CoreOS kernel. No hardware allocation is in place. All environment resources are shared.</p>\n<h3>Understanding Registries</h3>\n<p>Container images are stored in a registry. The concept of a registry is similar to that of a <a href=\"https://maven.apache.org/\">Maven</a> repository, for those of you familiar with the Java framework. The analogous technology in the .NET world is a <a href=\"https://www.nuget.org/\">NuGet</a> server.</p>\n<p>There are a number of public repositories where you can store container images. Docker has <a href=\"https://hub.docker.com/\">Docker Hub</a>. There are others. Also, there is a growing number of private registry providers emerging.</p>\n<p>Using a registry is almost automagical. When you tell your container manager to run a container, it will check the configuration file to determine the layers the container requires and then check for the required layer images out on a registry, either the default registry or ones you define. The container manager will assemble the layers that your container needs from the registry and then load your container onto the host.</p>\n<p>Using a registry allows you to have a high degree reusability with your container images. Also, using container images means that you can scale your application, as you\'ll see in the next section.</p>\n<h2>Scaling Containers</h2>\n<p>Containers work really well in dynamic environments that need to scale up or down on demand. Unlike a virtual machine, which can take a long time to load into the host environment, a container loads quickly. Quick loading, coupled with the ubiquitous nature of a container registry, means that you can create highly available, load balanced environments fast.</p>\n<p>Please take a look at Figure 6. The diagram illustrates an application cluster environment based on containers. These days, it\'s quite common to have a load balancer negotiating load among many containers made from the same image. In fact, the load balancer itself can be a container. In other words, you can use a <a href=\"http://nginx.org/en/docs/http/load_balancing.html\">nxginx container as the load balancer</a> that coordinates traffic among a cluster of identical application nodes.</p>\n<p><img alt=\"Contain6\" height=\"498\" src=\"http://www.developer.com/imagesvr_ce/1115/Contain6.jpg\" width=\"574\" /><br /><strong>Figure 6:</strong> You can use a load balancer container to management clusters of application containers.</p>\n<h2>Now What?</h2>\n<p>The ecosystem for containers is growing quickly. For example, there is Google\'s open source project, <a href=\"http://kubernetes.io/v1.0/docs/whatisk8s.html\">Kubernetes</a> that provides a platform for deploying and scaling applications containers at the enterprise level, across clusters of hosts. <a href=\"https://coreos.com/etcd/docs/latest/getting-started-with-etcd.html\">etcd</a>, another open source project, allows you to share key-value information between containers. Sharing key-value information is important when you need to have containers use a common data store or cache. There\'s <a href=\"https://coreos.com/using-coreos/clustering/\">fleet</a>, which makes sure that if you are running a lot of homogenous containers over a variety of machines and one of a machine goes down, your container will be moved to another machine. This is a very power technology in large scale, computing environments where it is very important that your containers run all the time. The list of projects and products is getting very large, very fast.</p>\n<p>As I said at the beginning of this article, containers are not going away anytime soon. In fact, Microsoft, Google, IBM, Redhat, Amazon, and a lot of other major technology companies have teamed up to form the <a href=\"https://www.opencontainers.org/\">Open Container Initiative</a>, which is formed under the <a href=\"http://www.linuxfoundation.org/\">Linux Foundation</a>. Imagine that: Microsoft working with Linux heads. So, if the folks in Redmond are jumping on the container bandwagon full blast, it\'s only a matter of time before containers will be part of your world. So, if you haven\'t started working with containers, now is the time to start.</p>					<br /><div class=\"article\">\n												Tags: \n\n												<a href=\"http://www.developer.com/tags/Linux-1870.htm\">Linux,</a> \n												<a href=\"http://www.developer.com/tags/Windows-2470.htm\">Windows,</a> \n												<a href=\"http://www.developer.com/tags/Ubuntu-5320.htm\">Ubuntu,</a> \n												<a href=\"http://www.developer.com/tags/virtual-machine-10490.htm\">virtual machine,</a> \n												<a href=\"http://www.developer.com/tags/kernel-12850.htm\">kernel,</a> \n												<a href=\"http://www.developer.com/tags/virtual-environment-90180.htm\">virtual environment,</a> \n												<a href=\"http://www.developer.com/tags/containers-138200.htm\">containers,</a> \n												<a href=\"http://www.developer.com/tags/CoreOS-13544910.htm\">CoreOS,</a> \n												<a href=\"http://www.developer.com/tags/Red-Hat-Atomic-Host-15263410.htm\">Red Hat Atomic Host,</a> \n												<a href=\"http://www.developer.com/tags/Snappy-15997410.htm\">Snappy,</a> \n												<a href=\"http://www.developer.com/tags/Windows-Server-2016-18189710.htm\">Windows Server 2016,</a> \n												<a href=\"http://www.developer.com/tags/container-manager-18812310.htm\">container manager</a> \n											</div>\n					                    \n                    Please enable Javascript in your browser, before you post the comment! Now Javascript is disabled.\n\n<a>\n	\n</a>\n\n\n\n\n\n	<br />',1),(126,'A Developerâ€™s Journey into Linux Containers','https://deis.com/blog/2015/developer-journey-linux-containers',1,0,'<p><img src=\"https://deis.com/images/blog-images/dev_journey_0.jpg\" alt=\"\" /></p>\n\n<p>I’ll let you in on a secret: all that DevOps cloud stuff that goes into getting my applications into the world is still a bit of a mystery to me. But, over time I’ve come to realize that understanding the ins and outs of large scale machine provisioning and application deployment is important knowledge for a developer to have. It’s akin to being a professional musician. Of course you need know how to play your instrument. But, if you don’t understand how a recording studio works or how you fit into a symphony orchestra, you’re going to have a hard time working in such environments. </p>\n\n<p>In the world of software development getting your code into our very big world is just as important as making it. DevOps counts and it counts a lot.</p>\n\n<p>So, in the spirit of bridging the gap between Dev and Ops I am going to present container technology to you from the ground up. Why containers? Because there is strong evidence to suggest that containers are the next step in machine abstraction: making a computer a place and no longer a thing. Understanding containers is a journey that we’ll take together.</p>\n\n<p>In this article I am going to cover the concepts behind containerization. I am going to cover how a container differs from a virtual machine. I am going to go into the logic behind containers construction as well as how containers fit into application architecture. I’ll discussion how lightweight versions of the Linux operating system fits into the container ecosystem. I’ll discuss using images to create reusable containers. Lastly I’ll cover how clusters of containers allow your applications to scale quickly.</p>\n\n<p>In later articles I’ll show you the step by step process to containerize a sample application and how to create a host cluster for your application’s containers. Also, I’ll show you how to use a Deis to deploy the sample application to a VM on your local system as well as a variety of cloud providers.</p>\n\n<p>So let’s get started.</p>\n\n<a class=\"read-more-anchor\"></a>\n\n<h2>The Benefit of Virtual Machines</h2>\n\n<p>In order to understand how containers fit into the scheme of things you need to understand the predecessor to containers: virtual machines. </p>\n\n<p>A <a href=\"https://en.wikipedia.org/wiki/Virtual_machine\"><em>virtual machine</em></a> (VM) is a software abstraction of a computer that runs on a physical host computer. Configuring a virtual machine is akin to buying a typical computer: you define the number of CPUs you want along with desired RAM and disk storage capacity. Once the machine is configured, you load in the operating system and then any servers and applications you want the VM to support.</p>\n\n<p>Virtual machines allow you to run many simulations of a computer on a single hardware host. Here’s what that looks like with a handy diagram:</p>\n\n<p><img src=\"https://deis.com/images/blog-images/dev_journey_1.png\" alt=\"\" /></p>\n\n<p>Virtual machines bring efficiency to your hardware investment.  You can buy a big, honking machine and run a lots of VMs on it. You can have a database VM sitting with a bunch of VMs with identical versions of your custom app running as a cluster. You can get a lot of scalability out of a finite hardware resources. If you find that you need more VMs and your host hardware has the capacity, you add what you need. Or, if you don’t need a VM, you simply bring the VM off line and delete the VM image.</p>\n\n<h2>The Limitations of Virtual Machines</h2>\n\n<p>But, virtual machines <em>do</em> have limits. </p>\n\n<p>Say you create three VMs on a host as shown above. The host has 12 CPUs, 48 GB of RAM, and 3 TB of storage. Each VM is configured to have 4 CPUs, 16 GB of RAM and 1 TB of storage. So far, so good. The host has the capacity. </p>\n\n<p>But there is a drawback. All the resources allocated to a particular machine are dedicated, no matter what. Each machine has been allocated 16 GB of RAM. However, if the first VM never uses more than 1 GB of its RAM allocation, the remaining 15 GB just sit there unused.  If the third VM uses only 100 GB of its 1 TB storage allocation, the remaining 900 GB is wasted space. </p>\n\n<p>There is no leveling of resources. Each VM owns what it is given. So, in a way we’re back to that time before virtual machines when we were paying a lot of good money for unused resources.</p>\n\n<p>There is <em>another</em> drawback to VMs too. They can take a long time to spin up. So, if you are in a situation where your infrastructure needs to grow quickly, even in a situation when VM provisioning is automated, you can still find yourself twiddling your thumbs waiting for machines to come online.</p>\n\n<h2>Enter: Containers</h2>\n\n<p>Conceptually, a container is a Linux process that thinks it is the only process running. The process knows only about things it is told to know about. Also, in terms of containerization, the container process is assigned its own IP address. This is important, so I will say it again. <em>In terms of containerization, the container process is assigned its own IP address</em>. Once given an IP address, the process is an identifiable resource within the host network. Then, you can issue a command to the container manager to map the container’s IP address to a IP address on the host that is accessible to the public. Once this mapping takes place, for all intents and purposes, a container is a distinct machine accessible on the network, similar in concept to a virtual machine. </p>\n\n<p>Again, a container is an isolated Linux process that has a distinct IP address thus making it identifiable on a network. Here’s what that looks like as diagram:</p>\n\n<p><img src=\"https://deis.com/images/blog-images/dev_journey_2.png\" alt=\"\" /></p>\n\n<p>A container/process shares resources on the host computer in a dynamic, cooperative manner. If the container needs only 1 GB of RAM, it uses only 1 GB. If it needs 4 GB, it uses 4 GB. It’s the same with CPU utilization and storage. The allocation of CPU, memory and storage resources is dynamic, not static as is usual on a typical virtual machine. All of this resource sharing is managed by the container manager.</p>\n\n<p>Lastly, containers boot very quickly. </p>\n\n<p>So, the benefit of containers is: <em>you get the isolation and encapsulation of a virtual machine without the drawback of dedicated static resources</em>. Also, because containers load into memory fast, you get better performance when it comes to scaling many containers up.</p>\n\n<h2>Container Hosting, Configuration, and Management</h2>\n\n<p>Computers that host containers run a version of Linux that is stripped down to the essentials. These days, the more popular underlying operating system for a host computer is <a href=\"https://coreos.com/using-coreos/\">CoreOS,</a> <a href=\"https://coreos.com/using-coreos/\">mentioned above</a>. There are others, however, such as <a href=\"http://www.projectatomic.io/\">Red Hat Atomic Host</a> and <a href=\"https://developer.ubuntu.com/en/snappy/\">Ubuntu Snappy</a>.</p>\n\n<p>The Linux operating system is shared between all containers, minimising duplication and reducing the container footprint. Each container contains only what is unique to <em>that specific container</em>. Here’s what that looks like in diagram form:</p>\n\n<p><img src=\"https://deis.com/images/blog-images/dev_journey_3.png\" alt=\"\" /></p>\n\n<p>You configure your container with the components it requires. A container component is called a <em>layer</em>. A layer is a container image. (You’ll read more about container images in the following section.). You start with a base layer which typically the type of operating system you want in your container. (The container manager will provides only the parts of your desired operating system that is not in the host OS) As you construct the configuration of your container, you’ll add layers, say Apache if you want a web server, PHP or Python runtimes, if your container is running scripts. </p>\n\n<p>Layering is very versatile. If you application or service container requires PHP 5.2, you configure that container accordingly. If you have another application or service that requires PHP 5.6, no problem. You configure that container to use PHP.5.6. Unlike VMs, where you need to go through a lot of provisioning and installation hocus pocus to change a version of a runtime dependency; with containers you just redefine the layer in the container configuration file.</p>\n\n<p>All of the container versatility described previously is controlled by the a piece of software called a <em>container manager</em>. Presently, the most popular container managers are <a href=\"https://www.docker.com/\">Docker</a> and <a href=\"https://coreos.com/blog/rocket/\">Rocket</a>. The figure above shows a host scenario is which Docker is the container manager and CoreOS is the host operating system.</p>\n\n\n\n<p>When it comes time for you to build our application into a container, you are going to assemble images. An image represents a template of a container that your container needs to do its work. (I know, containers within containers. Go figure.) Images are stored in a registry. Registries live on the network. </p>\n\n<p>Conceptually, a registry is similar to a <a href=\"https://en.wikipedia.org/wiki/Apache_Maven\">Maven</a> repository, for those of you from the Java world, or a <a href=\"https://www.nuget.org/\">NuGet</a> server, for you .NET heads. You’ll create a container configuration file that lists the images your application needs. The you’ll use the container manager to make a container that includes your application’s code as well as constituent resources downloaded from a container registry. For example, if your application is made up of some PHP files, your container configuration file will declare that you get the PHP runtime from a registry. Also, you’ll use the container configuration file to declare the <code>.php</code> files to copy into the container’s file system. The container manager encapsulates all your application stuff into a distinct container that you’ll run on a host computer, under a container manager. </p>\n\n<p>Here’s a diagram that illustrates the concepts behind container creation:</p>\n\n<p><img src=\"https://deis.com/images/blog-images/dev_journey_4.png\" alt=\"\" /></p>\n\n<p>Let’s take a detailed look at this diagram.  </p>\n\n<p>Here, (1) indicates there is a container configuration file that defines the stuff your container needs, as well as how your container is to be constructed. When you run your container on the host, the container manager will read the configuration file to get the container images you need from a registry on the cloud (2) and add the images as layers in your container. </p>\n\n<p>Also, if that constituent image requires other images, the container manager will get those images too and layer them in. At (3) the container manager will copy in files to your container as is required. </p>\n\n<p>If you use a provisioning service, such as <a href=\"http://deis.com/learn\">Deis</a>, the application container you just created exists as an image (4) which the provisioning service will deploy to a cloud provider of your choice. Examples of cloud providers are AWS and Rackspace. </p>\n\n\n\n<p>Okay. So we can say there is a good case to be made that containers provide a greater degree of configuration flexibility and resource utilization than virtual machines. Still, this is not the all of it. </p>\n\n<p>Where containers get really flexible is when they’re clustered. Remember, a container has a distinct IP address. Thus, it can be put behind a load balancer. Once a container goes behind a load balancer, the game goes up a level. </p>\n\n<p>You can run a cluster of containers behind a load balancer container to achieve high performance, high availability computing. Here’s one example setup:</p>\n\n<p><img src=\"https://deis.com/images/blog-images/dev_journey_5.png\" alt=\"\" /></p>\n\n<p>Let’s say you’ve made an application that does some resource intensive work. Photograph processing, for example. Using a container provisioning technology such as <a href=\"http://deis.com/learn\">Deis</a>, you can create a container image that has your photo processing application configured with all the resources upon which your photo processing application depends. Then, you can deploy one or many instances of your container image to under a load balancer that reside on the host. Once the container image is made, you can keep it on the sidelines for introduction later on when the system becomes maxed out and more instances of your container are required in the cluster to meet the workload at hand.</p>\n\n<p>There is more good news. You don’t have manually configure the load balancer to accept your container image every time you add more instances into the environment. You can use service discovery technology to make it so that your container announces its availability to the balancer. Then, once informed, the balancer can start to route traffic to the new node.</p>\n\n\n\n<p>Container technology picks up where the virtual machine has left off. Host operating systems such as CoreOS, RHEL Atomic, and Ubuntu’s Snappy, in conjunction with container management technologies such as Docker and Rocket, are making containers more popular everyday. </p>\n\n<p>While containers are becoming more prevalent, they do take a while to master. However, once you get the hang of them, you can use provisioning technologies such as <a href=\"http://deis.com/learn\">Deis</a> to make container creation and deployment easier.</p>\n\n<p>Getting a conceptual understanding of containers is important as we move forward to actually doing some work with them. But, I imagine the concepts are hard to grasp without the actual hands-on experience to accompany the ideas in play. So, this is what we’ll do in the next segment of this series: make some containers.</p>\n\n        ',1),(127,'Selz/plyr','https://github.com/Selz/plyr',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      readme.md\n    </h3>\n\n    <p>A simple, accessible HTML5 media player. </p>\n\n<p><a href=\"http://plyr.io\">Checkout the demo</a></p>\n\n<p><a href=\"http://plyr.io\"><img src=\"https://camo.githubusercontent.com/d4ac076d3cb4309d4a36e63e756a004dd9893301/68747470733a2f2f63646e2e706c79722e696f2f7374617469632f706c79722e6a7067\" alt=\"Image of Plyr\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#why\"><span class=\"octicon octicon-link\"></span></a>Why?</h2>\n\n<p>We wanted a lightweight, accessible and customisable media player that just supports <a href=\"https://github.com/Selz/plyr#browser-support\"><em>modern</em></a> browsers. Sure, there are many other players out there but we wanted to keep things simple, using the right elements for the job. </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#features\"><span class=\"octicon octicon-link\"></span></a>Features</h2>\n\n<ul><li><strong>Accessible</strong> - full support for VTT captions and screen readers.</li>\n<li><strong>Lightweight</strong> - just 8KB minified and gzipped.</li>\n<li><strong><a href=\"https://github.com/Selz/plyr#html\">Customisable</a></strong> - make the player look how you want with the markup you want.</li>\n<li><strong>Semantic</strong> - uses the <em>right</em> elements. <code>&lt;input type=\"range\"&gt;</code> for volume and <code>&lt;progress&gt;</code> for progress and well, <code>&lt;button&gt;</code>s for buttons. There\'s no <code>&lt;span&gt;</code> or <code>&lt;a href=\"#\"&gt;</code> button hacks.</li>\n<li><strong>Responsive</strong> - as you\'d expect these days.</li>\n<li><strong>Audio &amp; Video</strong> - support for both formats.</li>\n<li><strong><a href=\"https://github.com/Selz/plyr#embeds\">Embedded Video</a></strong> - support for YouTube (Vimeo soon).</li>\n<li><strong><a href=\"https://github.com/Selz/plyr#api\">API</a></strong> - toggle playback, volume, seeking, and more.</li>\n<li><strong><a href=\"https://github.com/Selz/plyr#fullscreen\">Fullscreen</a></strong> - supports native fullscreen with fallback to \"full window\" modes.</li>\n<li><strong>i18n support</strong> - support for internationalization of controls.</li>\n<li><strong>No dependencies</strong> - written in vanilla JavaScript, no jQuery required. </li>\n</ul><p>Oh and yes, it works with Bootstrap. </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#changelog\"><span class=\"octicon octicon-link\"></span></a>Changelog</h2>\n\n<p>Check out <a href=\"https://github.com/Selz/plyr/blob/master/changelog.md\">the changelog</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#planned-development\"><span class=\"octicon octicon-link\"></span></a>Planned development</h2>\n\n<ul><li>Vimeo support</li>\n<li>Playback speed</li>\n<li>Playlists</li>\n<li>Multiple language captions (with selection)</li>\n<li>Audio captions\n... and whatever else has been raised in <a href=\"https://github.com/Selz/plyr/issues\">issues</a></li>\n</ul><p>If you have any cool ideas or features, please let me know by <a href=\"https://github.com/Selz/plyr/issues/new\">creating an issue</a> or of course, forking and sending a pull request.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#implementation\"><span class=\"octicon octicon-link\"></span></a>Implementation</h2>\n\n<p>Check <code>docs/index.html</code> and <code>docs/dist/docs.js</code> for an example setup. </p>\n\n<p><strong>Heads up</strong>, the example <code>index.html</code> file needs to be served from a webserver (such as Apache, Nginx, IIS or similar) unless you change the file sources to include http or https. e.g. change <code>//cdn.plyr.io/1.3.6/plyr.js</code> to <code>https://cdn.plyr.io/1.3.6/plyr.js</code></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Selz/plyr#bower\"><span class=\"octicon octicon-link\"></span></a>Bower</h3>\n\n<p>If bower is your thang, you can grab Plyr using:</p>\n\n<pre><code>bower install plyr\n</code></pre>\n\n<p>More info on setting up dependencies can be found in the <a href=\"http://bower.io/docs/creating-packages/#maintaining-dependencies\">Bower Docs</a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Selz/plyr#ember\"><span class=\"octicon octicon-link\"></span></a>Ember</h3>\n\n<p>The awesome <a href=\"https://twitter.com/louisrudner\">@louisrudner</a> has created an ember component, available by running:</p>\n\n<pre><code>ember addon:install ember-cli-plyr\n</code></pre>\n\n<p>More info is on <a href=\"https://www.npmjs.com/package/ember-cli-plyr\">npm</a> and <a href=\"https://github.com/louisrudner/ember-cli-plyr\">GitHub</a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Selz/plyr#cdn\"><span class=\"octicon octicon-link\"></span></a>CDN</h3>\n\n<p>If you want to use our CDN, you can use the following:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">link</span> <span class=\"pl-e\">rel</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stylesheet<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.plyr.io/1.3.6/plyr.css<span class=\"pl-pds\">\"</span></span>&gt;\n&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.plyr.io/1.3.6/plyr.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;</pre></div>\n\n<p>You can also access the <code>sprite.svg</code> file at <code>https://cdn.plyr.io/1.3.6/sprite.svg</code>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Selz/plyr#css\"><span class=\"octicon octicon-link\"></span></a>CSS</h3>\n\n<p>If you want to use the default css, add the <code>plyr.css</code> file from /dist into your head, or even better use <code>plyr.less</code> or <code>plyr.sass</code> file included in <code>/src</code> in your build to save a request. </p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">link</span> <span class=\"pl-e\">rel</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stylesheet<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/plyr.css<span class=\"pl-pds\">\"</span></span>&gt;</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Selz/plyr#svg\"><span class=\"octicon octicon-link\"></span></a>SVG</h3>\n\n<p>The SVG sprite for the controls icons is loaded in by AJAX to help with performance. This is best added before the closing <code>&lt;/body&gt;</code>, before any other scripts.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;</span>\n<span class=\"pl-s1\">(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">d</span>, <span class=\"pl-smi\">p</span>){</span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">var</span> a <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">XMLHttpRequest</span>(),</span>\n<span class=\"pl-s1\">        b <span class=\"pl-k\">=</span> d.<span class=\"pl-c1\">body</span>;</span>\n<span class=\"pl-s1\">    a.<span class=\"pl-c1\">open</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>GET<span class=\"pl-pds\">\"</span></span>, p, <span class=\"pl-c1\">true</span>);</span>\n<span class=\"pl-s1\">    a.<span class=\"pl-c1\">send</span>();</span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\">a</span>.<span class=\"pl-en\">onload</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(){</span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">var</span> c <span class=\"pl-k\">=</span> d.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>div<span class=\"pl-pds\">\"</span></span>);</span>\n<span class=\"pl-s1\">        c.<span class=\"pl-c1\">style</span>.<span class=\"pl-c1\">display</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>none<span class=\"pl-pds\">\"</span></span>;</span>\n<span class=\"pl-s1\">        c.innerHTML <span class=\"pl-k\">=</span> a.responseText;</span>\n<span class=\"pl-s1\">        b.<span class=\"pl-c1\">insertBefore</span>(c, b.<span class=\"pl-c1\">childNodes</span>[<span class=\"pl-c1\">0</span>]);</span>\n<span class=\"pl-s1\">    }</span>\n<span class=\"pl-s1\">})(<span class=\"pl-c1\">document</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/sprite.svg<span class=\"pl-pds\">\"</span></span>);</span>\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n\n<p>More info on SVG sprites here:\n<a href=\"http://css-tricks.com/svg-sprites-use-better-icon-fonts/\">http://css-tricks.com/svg-sprites-use-better-icon-fonts/</a> \nand the AJAX technique here: \n<a href=\"http://css-tricks.com/ajaxing-svg-sprite/\">http://css-tricks.com/ajaxing-svg-sprite/</a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Selz/plyr#html\"><span class=\"octicon octicon-link\"></span></a>HTML</h3>\n\n<p>The only extra markup that\'s needed to use plyr is a <code>&lt;div&gt;</code> wrapper. Replace the source, poster and captions with urls for your media.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>player<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">video</span> <span class=\"pl-e\">poster</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.selz.com/plyr/1.0/poster.jpg<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">controls</span> <span class=\"pl-e\">crossorigin</span>&gt;\n        <span class=\"pl-c\">&lt;!-- Video files --&gt;</span>\n        &lt;<span class=\"pl-ent\">source</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.selz.com/plyr/1.0/movie.mp4<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>video/mp4<span class=\"pl-pds\">\"</span></span>&gt;\n        &lt;<span class=\"pl-ent\">source</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.selz.com/plyr/1.0/movie.webm<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>video/webm<span class=\"pl-pds\">\"</span></span>&gt;\n\n        <span class=\"pl-c\">&lt;!-- Text track file --&gt;</span>\n        &lt;<span class=\"pl-ent\">track</span> <span class=\"pl-e\">kind</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>captions<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">label</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>English captions<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.selz.com/plyr/1.0/movie_captions_en.vtt<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">srclang</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">default</span>&gt;\n\n        <span class=\"pl-c\">&lt;!-- Fallback for browsers that don\'t support the &lt;video&gt; element --&gt;</span>\n        &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.selz.com/plyr/1.0/movie.mp4<span class=\"pl-pds\">\"</span></span>&gt;Download&lt;/<span class=\"pl-ent\">a</span>&gt;\n    &lt;/<span class=\"pl-ent\">video</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<p>And the same for <code>&lt;audio&gt;</code></p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>player<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">audio</span> <span class=\"pl-e\">controls</span>&gt;\n        <span class=\"pl-c\">&lt;!-- Audio files --&gt;</span>\n        &lt;<span class=\"pl-ent\">source</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.selz.com/plyr/1.0/logistics-96-sample.mp3<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>audio/mp3<span class=\"pl-pds\">\"</span></span>&gt;\n        &lt;<span class=\"pl-ent\">source</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.selz.com/plyr/1.0/logistics-96-sample.ogg<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>audio/ogg<span class=\"pl-pds\">\"</span></span>&gt;\n\n        <span class=\"pl-c\">&lt;!-- Fallback for browsers that don\'t support the &lt;audio&gt; element --&gt;</span>\n        &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.selz.com/plyr/1.0/logistics-96-sample.mp3<span class=\"pl-pds\">\"</span></span>&gt;Download&lt;/<span class=\"pl-ent\">a</span>&gt;\n    &lt;/<span class=\"pl-ent\">audio</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<p>For YouTube, Plyr uses the standard YouTube API markup (an empty <code>&lt;div&gt;</code>):</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>player<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">data-video-id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>L1h9xxCU20g<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">data-type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>youtube<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/Selz/plyr#cross-origin-cors\"><span class=\"octicon octicon-link\"></span></a>Cross Origin (CORS)</h4>\n\n<p>You\'ll notice the <code>crossorigin</code> attribute on the example <code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code> elements. This is because the media is loaded from another domain. If your media is hosted on another domain, you may need to add this attribute. </p>\n\n<p>More info on CORS here:\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS</a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Selz/plyr#javascript\"><span class=\"octicon octicon-link\"></span></a>JavaScript</h3>\n\n<p>Much of the behaviour of the player is configurable when initialising the library. Here\'s an example of a default setup:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/plyr.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;\n<span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;plyr.setup();&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/Selz/plyr#options\"><span class=\"octicon octicon-link\"></span></a>Options</h4>\n\n<p>You can pass the following options to the setup method using <code>plyr.setup({...})</code>.</p>\n\n<table width=\"100%\"><thead><tr><th width=\"20%\">Option</th>\n    <th width=\"15%\">Type</th>\n    <th width=\"15%\">Default</th>\n    <th width=\"50%\">Description</th>\n  </tr></thead><tbody><tr><td><code>enabled</code></td>\n    <td>Boolean</td>\n    <td><code>true</code></td>\n    <td>Completely disable Plyr. This would allow you to do a User Agent check or similar to programatically enable or disable Plyr for a certain UA. Example below.</td>\n  </tr><tr><td><code>html</code></td>\n    <td>String</td>\n    <td><code><a href=\"https://github.com/Selz/plyr/blob/master/controls.md\">See controls.md</a></code></td>\n    <td>See <a href=\"https://github.com/Selz/plyr/blob/master/controls.md\">controls.md</a> for more info on how the html needs to be structured.</td>\n  </tr><tr><td><code>controls</code></td>\n    <td>Array</td>\n    <td><code>[\"restart\", \"rewind\", \"play\", \"fast-forward\", \"current-time\", \"duration\", \"mute\", \"volume\", \"captions\", \"fullscreen\"]</code></td>\n    <td>Toggle which control elements you would like to display when using the default controls html. If you specify a <code>html</code> option, this is redundant. The default value is to display everything.</td>\n  </tr><tr><td><code>i18n</code></td>\n    <td>Object</td>\n    <td><code><a href=\"https://github.com/Selz/plyr/blob/master/controls.md\">See controls.md</a></code></td>\n    <td>Used for internationalisation (i18n) of the tooltips/labels within the buttons.</td>\n  </tr><tr><td><code>iconPrefix</code></td>\n    <td>String</td>\n    <td><code>icon</code></td>\n    <td>Specify the id prefix for the icons used in the default controls (e.g. \"icon-play\" would be \"icon\"). This is to prevent clashes if you\'re using your own SVG defs file but with the default controls. Most people can ignore this option.</td>\n  </tr><tr><td><code>debug</code></td>\n    <td>Boolean</td>\n    <td><code>false</code></td>\n    <td>Display debugging information on what Plyr is doing.</td>\n  </tr><tr><td><code>seekTime</code></td>\n    <td>Number</td>\n    <td><code>10</code></td>\n    <td>The time, in seconds, to seek when a user hits fast forward or rewind.</td>\n  </tr><tr><td><code>volume</code></td>\n    <td>Number</td>\n    <td><code>5</code></td>\n    <td>A number, between 1 and 10, representing the initial volume of the player.</td>\n  </tr><tr><td><code>click</code></td>\n    <td>Boolean</td>\n    <td><code>true</code></td>\n    <td>Click (or tap) will toggle pause/play of a <code>&lt;video&gt;</code>.</td>\n  </tr><tr><td><code>tooltips</code></td>\n    <td>Boolean</td>\n    <td><code>false</code></td>\n    <td>Display control labels as tooltips on :hover &amp; :focus (by default, the labels are screen reader only).</td>\n  </tr><tr><td><code>displayDuration</code></td>\n    <td>Boolean</td>\n    <td><code>true</code></td>\n    <td>Displays the duration of the media on the \"metadataloaded\" event (on startup) in the current time display. This will only work if the `preload` attribute is not set to `none` (or is not set at all) and you choose not to display the duration (see <code>controls</code> option).</td>\n  </tr><tr><td><code>selectors</code></td>\n    <td>Object</td>\n    <td>—</td>\n    <td>See <code>plyr.js</code> in <code>/src</code> for more info. The only option you might want to change is <code>player</code> which is the hook used for Plyr, the default is <code>.player</code>.</td>\n  </tr><tr><td><code>classes</code></td>\n    <td>Object</td>\n    <td>—</td>\n    <td>Similar to above, these are the classes added to the player when state changes occur.</td>\n  </tr><tr><td><code>captions</code></td>\n    <td>Object</td>\n    <td>—</td>\n    <td>One property <code>defaultActive</code> which toggles if captions should be on by default. The default value is <code>false</code>.</td>\n  </tr><tr><td><code>fullscreen</code></td>\n    <td>Object</td>\n    <td>—</td>\n    <td>Three properties; <code>enabled</code> which toggles if fullscreen should be enabled (if the browser supports it). The default value is <code>true</code>. A <code>fallback</code> property which will enable a full window view for older browsers. The default value is <code>true</code>. A <code>hideControls</code> property which will hide the controls when fullscreen is active and the video is playing, after 1s. The controls reappear on hover of the progress bar (mouse), focusing a child control or pausing the video (by tap/click of video if `click` is `true`). The default value is <code>true</code>.</td>\n  </tr><tr><td><code>storage</code></td>\n    <td>Object</td>\n    <td>—</td>\n    <td>Two properties; <code>enabled</code> which toggles if local storage should be enabled (if the browser supports it). The default value is `true`. This enables storing user settings, currently it only stores volume but more will be added later. The second property <code>key</code> is the key used for the local storage. The default is <code>plyr_volume</code> until more settings are stored.</td>\n  </tr><tr><td><code>onSetup</code></td>\n    <td>Function</td>\n    <td>—</td>\n    <td>This callback function is called on every new plyr instance created. The context (<code>this</code>) is the plyr instance itself.</td>\n  </tr></tbody></table><h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#api\"><span class=\"octicon octicon-link\"></span></a>API</h2>\n\n<p>A <code>plyr</code> object is added to any element that Plyr is initialised on. You can then control the player by accessing methods in the <code>plyr</code> object. For example if you wanted to pause Plyr:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">document</span>.querySelectorAll(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.player<span class=\"pl-pds\">\"</span></span>)[<span class=\"pl-c1\">0</span>].plyr.pause();</pre></div>\n\n<p>Here\'s a list of the methods supported:</p>\n\n<table width=\"100%\"><thead><tr><th width=\"20%\">Method</th>\n    <th width=\"15%\">Parameters</th>\n    <th width=\"65%\">Description</th>\n  </tr></thead><tbody><tr><td><code>play()</code></td>\n    <td>—</td>\n    <td>Plays the media</td>\n  </tr><tr><td><code>pause()</code></td>\n    <td>—</td>\n    <td>Pauses the media</td>\n  </tr><tr><td><code>restart()</code></td>\n    <td>—</td>\n    <td>Restarts playback</td>\n  </tr><tr><td><code>rewind(...)</code></td>\n    <td>Number</td>\n    <td>Rewinds by the provided parameter, in seconds. If no parameter is provided, the default seekInterval is used (10 seconds).</td>\n  </tr><tr><td><code>forward(...)</code></td>\n    <td>Number</td>\n    <td>Fast forwards by the provided parameter, in seconds. If no parameter is provided, the default seekInterval is used (10 seconds).</td>\n  </tr><tr><td><code>seek(...)</code></td>\n    <td>Number</td>\n    <td>Seeks the media to the provided parameter, time in seconds.</td>\n  </tr><tr><td><code>setVolume(...)</code></td>\n    <td>Number</td>\n    <td>Sets the player volume to the provided parameter. The value should be between 0 (muted) and 10 (loudest). If no parameter is provided, the default volume is used (5). Values over 10 are ignored.</td>\n  </tr><tr><td><code>togglePlay()</code></td>\n    <td>Boolean</td>\n    <td>Toggles playback for the player based on either the boolean argument or it\'s current state.</td>\n  </tr><tr><td><code>toggleMute()</code></td>\n    <td>—</td>\n    <td>Toggles mute for the player.</td>\n  </tr><tr><td><code>toggleCaptions()</code></td>\n    <td>—</td>\n    <td>Toggles whether captions are enabled.</td>\n  </tr><tr><td><code>toggleFullscreen()</code></td>\n    <td>Event</td>\n    <td>Toggles fullscreen. This can only be initiated by a user gesture due to browser security, i.e. a user event such as click.</td>\n  </tr><tr><td><code>isFullscreen()</code></td>\n    <td>—</td>\n    <td>Boolean returned if the player is in fullscreen.</td>\n  </tr><tr><td><code>support(...)</code></td>\n    <td>String</td>\n    <td>Determine if a player supports a certain MIME type. This is not supported for embedded content (YouTube).</td>\n  </tr><tr><td><code>source(...)</code></td>\n    <td>String or Array</td>\n    <td>\n      Set the media source.\n      <p><strong>string</strong><br /><code>.source(\"/path/to/video.mp4\")</code><br />This will set the <code>src</code> attribute on the <code>video</code> or <code>audio</code> element.\n      </p><p><strong>array</strong><br /><code>.source([{ src: \"/path/to/video.webm\", type: \"video/webm\", ...more attributes... }, { src: \"/path/to/video.mp4\", type: \"video/mp4\", ...more attributes... }])`</code><br />This will inject a child `source` element for every element in the array with the specified attributes. `src` is the only required attribute although adding `type` is recommended as it helps the browser decide which file to download and play. \n      </p><p><strong>YouTube</strong><br />Currently this API method only accepts a YouTube ID when used with a YouTube player. I will add URL support soon, along with being able to swap between types (e.g. YouTube to Audio or Video and vice versa.)\n    </p></td>\n  </tr><tr><td><code>poster(...)</code></td>\n    <td>String</td>\n    <td>Set the poster url. This is supported for the <code>video</code> element only.</td>\n  </tr><tr><td><code>destroy()</code></td>\n    <td>—</td>\n    <td>Destroys the plyr UI and any media event listeners, effectively restoring to the previous state before <code>setup()</code> was called.</td>\n  </tr><tr><td><code>restore()</code></td>\n    <td>—</td>\n    <td>Reverses the effects of the <code>destroy()</code> method, restoring the UI and listeners.</td>\n  </tr></tbody></table><h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#eventscallbacks\"><span class=\"octicon octicon-link\"></span></a>Events/Callbacks</h2>\n\n<p>The <code>plyr</code> object on the player element also contains a <code>media</code> property which is a reference to the <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> element within the player which you can use to listen for events. Here\'s an example:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> media <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.querySelectorAll(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.player<span class=\"pl-pds\">\"</span></span>)[<span class=\"pl-c1\">0</span>].plyr.<span class=\"pl-c1\">media</span>;\n\nmedia.addEventListener(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>playing<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">function</span>() { \n  <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>playing<span class=\"pl-pds\">\"</span></span>);\n});</pre></div>\n\n<p>A complete list of events can be found here:\n<a href=\"http://www.w3.org/2010/05/video/mediaevents.html\">Media Events - W3.org</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#embeds\"><span class=\"octicon octicon-link\"></span></a>Embeds</h2>\n\n<p>Currently only YouTube is supported. Vimeo will be coming soon. Some HTML5 media events are triggered on the <code>media</code> property of the <code>plyr</code> object:</p>\n\n<ul><li><code>play</code></li>\n<li><code>pause</code></li>\n<li><code>timeupdate</code></li>\n<li><code>progress</code></li>\n</ul><p>Due to the way the YouTube API works, the <code>timeupdate</code> and <code>progress</code> events are triggered by polling every 200ms so the event may trigger without an actual value change. Buffering progress is <code>media.buffered</code> in the <code>plyr</code> object. It is a a number between 0 and 1 that specifies the percentage of the video that the player shows as buffered.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">document</span>.querySelector(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.player<span class=\"pl-pds\">\"</span></span>).plyr.<span class=\"pl-c1\">media</span>.addEventListener(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>play<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">function</span>() { \n    <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>play<span class=\"pl-pds\">\"</span></span>);\n});</pre></div>\n\n<p>The <code>.source()</code> API method can also be used but the video id must be passed as the argument. </p>\n\n<p>Currently caption control is not supported but I will work on this. </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#fullscreen\"><span class=\"octicon octicon-link\"></span></a>Fullscreen</h2>\n\n<p>Fullscreen in Plyr is supported for all browsers that <a href=\"http://caniuse.com/#feat=fullscreen\">currently support it</a>. If you\'re using the default CSS, you can also use a \"full browser\" mode which will use the full browser window by adding the <code>player-fullscreen</code> class to your container.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#browser-support\"><span class=\"octicon octicon-link\"></span></a>Browser support</h2>\n\n<table width=\"100%\"><thead><tr><td>Safari</td>\n      <td>Firefox</td>\n      <td>Chrome</td>\n      <td>Opera</td>\n      <td>IE9</td>\n      <td>IE10+</td>\n    </tr></thead><tbody><tr><td>✔¹</td>\n      <td>✔</td>\n      <td>✔</td>\n      <td>✔</td>\n      <td>API²</td>\n      <td>✔³</td>\n    </tr></tbody></table><p>¹ Mobile Safari on the iPhone forces the native player for <code>&lt;video&gt;</code> so no useful customisation is possible. <code>&lt;audio&gt;</code> elements have volume controls disabled.</p>\n\n<p>² Native player used (no support for <code>&lt;progress&gt;</code> or <code>&lt;input type=\"range\"&gt;</code>) but the API is supported (v1.0.28+)</p>\n\n<p>³ IE10 has no native fullscreen support, fallback can be used (see options)</p>\n\n<p>The <code>enabled</code> option can be used to disable certain User Agents. For example, if you don\'t want to use Plyr for smartphones, you could use: </p>\n\n<div class=\"highlight highlight-source-js\"><pre>enabled<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span>Android<span class=\"pl-k\">|</span>webOS<span class=\"pl-k\">|</span>iPhone<span class=\"pl-k\">|</span>iPad<span class=\"pl-k\">|</span>iPod<span class=\"pl-k\">|</span>BlackBerry<span class=\"pl-pds\">/</span>i</span>.<span class=\"pl-c1\">test</span>(<span class=\"pl-c1\">navigator</span>.<span class=\"pl-c1\">userAgent</span>)</pre></div>\n\n<p>If a User Agent is disabled but supports <code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code> natively, it will use the native player.</p>\n\n<p>Any unsupported browsers will display links to download the media if the correct html is used.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Selz/plyr#checking-for-support\"><span class=\"octicon octicon-link\"></span></a>Checking for support</h3>\n\n<p>There\'s an API method for checking support. You can call <code>plyr.supported()</code> and optionally pass a type to it, e.g. <code>plyr.supported(\"video\")</code>. It will return an object with two keys; <code>basic</code> meaning there\'s basic support for that media type (or both if no type is passed) and <code>full</code> meaning there\'s full support for plyr. </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#issues\"><span class=\"octicon octicon-link\"></span></a>Issues</h2>\n\n<p>If you find anything weird with Plyr, please let us know using the GitHub issues tracker.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#author\"><span class=\"octicon octicon-link\"></span></a>Author</h2>\n\n<p>Plyr is developed by <a href=\"https://twitter.com/sam_potts\">@sam_potts</a> / <a href=\"http://sampotts.me\">sampotts.me</a> with help from the awesome <a href=\"https://github.com/Selz/plyr/graphs/contributors\">contributors</a> </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#mentions\"><span class=\"octicon octicon-link\"></span></a>Mentions</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#used-by\"><span class=\"octicon octicon-link\"></span></a>Used by</h2>\n\n<p>Let me know on <a href=\"https://twitter.com/sam_potts\">Twitter</a> I can add you to the above list. It\'d be awesome to see how you\'re using Plyr :-) </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#useful-links-and-credits\"><span class=\"octicon octicon-link\"></span></a>Useful links and credits</h2>\n\n<p>Credit to the PayPal HTML5 Video player from which Plyr\'s caption functionality is ported from:</p>\n\n<p>Also these links helped created Plyr:</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Selz/plyr#copyright-and-license\"><span class=\"octicon octicon-link\"></span></a>Copyright and License</h2>\n\n<p><a href=\"https://github.com/Selz/plyr/blob/master/license.md\">The MIT license</a>.</p>\n',1),(128,'Mango/slideout','https://github.com/Mango/slideout',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <blockquote>\n<p>A touch slideout navigation menu for your mobile web apps.</p>\n</blockquote>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#features\"><span class=\"octicon octicon-link\"></span></a>Features</h2>\n\n<ul><li>Dependency-free.</li>\n<li>Simple markup.</li>\n<li>Native scrolling.</li>\n<li>Easy customization.</li>\n<li>CSS transforms &amp; transitions.</li>\n<li>Just 2 Kb! (min &amp; gzip)</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#demo\"><span class=\"octicon octicon-link\"></span></a>Demo</h2>\n\n<p><a href=\"https://mango.github.io/slideout/\">Check out the demo</a> to see it in action (on your mobile or emulate touches on your browser).</p>\n\n<p><a href=\"https://camo.githubusercontent.com/9975d7a2331494043067998480ace0f1d2157e86/68747470733a2f2f692e696d6775722e636f6d2f415767776c56572e676966\"><img src=\"https://camo.githubusercontent.com/9975d7a2331494043067998480ace0f1d2157e86/68747470733a2f2f692e696d6775722e636f6d2f415767776c56572e676966\" alt=\"Slideout.js demo\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<p>Slideout is available on cdnjs</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/slideout/0.1.9/slideout.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;</pre></div>\n\n<p>Also you can use one of many package managers</p>\n\n<pre><code>$ npm install slideout\n\n$ spm install slideout\n\n$ bower install slideout.js\n\n$ component install mango/slideout\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>Implementing Slideout.js into your project is easy.</p>\n\n<p>First of all, you\'ll need to create your markup. You should have a menu (<code>#menu</code>) and a main content (<code>#panel</code>) into your body.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">nav</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>menu<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">header</span>&gt;\n    &lt;<span class=\"pl-ent\">h2</span>&gt;Menu&lt;/<span class=\"pl-ent\">h2</span>&gt;\n  &lt;/<span class=\"pl-ent\">header</span>&gt;\n&lt;/<span class=\"pl-ent\">nav</span>&gt;\n\n&lt;<span class=\"pl-ent\">main</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>panel<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">header</span>&gt;\n    &lt;<span class=\"pl-ent\">h2</span>&gt;Panel&lt;/<span class=\"pl-ent\">h2</span>&gt;\n  &lt;/<span class=\"pl-ent\">header</span>&gt;\n&lt;/<span class=\"pl-ent\">main</span>&gt;</pre></div>\n\n<p>Add the Slideout.js styles (index.css) in your web application.</p>\n\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">body</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;\n}\n\n<span class=\"pl-e\">.slideout-menu</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">position</span></span>: <span class=\"pl-c1\">fixed</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">left</span></span>: <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">top</span></span>: <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">bottom</span></span>: <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">right</span></span>: <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">z-index</span></span>: <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">256<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">overflow-y</span></span>: <span class=\"pl-c1\">auto</span>;\n  <span class=\"pl-c1\">-webkit-<span class=\"pl-c1\">overflow</span>-scrolling</span>: touch;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">none</span>;\n}\n\n<span class=\"pl-e\">.slideout-panel</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">position</span></span>:<span class=\"pl-c1\">relative</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">z-index</span></span>: <span class=\"pl-c1\">1</span>;\n}\n\n<span class=\"pl-e\">.slideout-open</span>,\n<span class=\"pl-e\">.slideout-open</span> <span class=\"pl-ent\">body</span>,\n<span class=\"pl-e\">.slideout-open</span> <span class=\"pl-e\">.slideout-panel</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">overflow</span></span>: <span class=\"pl-c1\">hidden</span>;\n}\n\n<span class=\"pl-e\">.slideout-open</span> <span class=\"pl-e\">.slideout-menu</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">block</span>;\n}</pre></div>\n\n<p>Then you just include Slideout.js and create a new instance with some options:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/slideout.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;\n<span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;</span>\n<span class=\"pl-s1\">  <span class=\"pl-k\">var</span> slideout <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Slideout</span>({</span>\n<span class=\"pl-s1\">    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>panel<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>panel<span class=\"pl-pds\">\'</span></span>),</span>\n<span class=\"pl-s1\">    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>menu<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>menu<span class=\"pl-pds\">\'</span></span>),</span>\n<span class=\"pl-s1\">    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>padding<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">256</span>,</span>\n<span class=\"pl-s1\">    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>tolerance<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">70</span></span>\n<span class=\"pl-s1\">  });</span>\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/Mango/slideout#full-example\"><span class=\"octicon octicon-link\"></span></a>Full example</h4>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;!doctype html&gt;\n&lt;<span class=\"pl-ent\">html</span> <span class=\"pl-e\">lang</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">head</span>&gt;\n    &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">charset</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>utf-8<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">title</span>&gt;Slideout Demo&lt;/<span class=\"pl-ent\">title</span>&gt;\n    &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">http-equiv</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cleartype<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>on<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MobileOptimized<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>320<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>HandheldFriendly<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>True<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>apple-mobile-web-app-capable<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yes<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>viewport<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>width=device-width, initial-scale=1.0, user-scalable=no<span class=\"pl-pds\">\"</span></span>&gt;\n<span class=\"pl-s1\">    &lt;<span class=\"pl-ent\">style</span>&gt;</span>\n<span class=\"pl-s1\">      <span class=\"pl-ent\">body</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;</span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">      <span class=\"pl-e\">.slideout-menu</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">position</span></span>: <span class=\"pl-c1\">fixed</span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">left</span></span>: <span class=\"pl-c1\">0</span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">top</span></span>: <span class=\"pl-c1\">0</span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">bottom</span></span>: <span class=\"pl-c1\">0</span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">right</span></span>: <span class=\"pl-c1\">0</span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">z-index</span></span>: <span class=\"pl-c1\">0</span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">256<span class=\"pl-k\">px</span></span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">overflow-y</span></span>: <span class=\"pl-c1\">auto</span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\">-webkit-<span class=\"pl-c1\">overflow</span>-scrolling</span>: touch;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">none</span>;</span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">      <span class=\"pl-e\">.slideout-panel</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">position</span></span>:<span class=\"pl-c1\">relative</span>;</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">z-index</span></span>: <span class=\"pl-c1\">1</span>;</span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">      <span class=\"pl-e\">.slideout-open</span>,</span>\n<span class=\"pl-s1\">      <span class=\"pl-e\">.slideout-open</span> <span class=\"pl-ent\">body</span>,</span>\n<span class=\"pl-s1\">      <span class=\"pl-e\">.slideout-open</span> <span class=\"pl-e\">.slideout-panel</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">overflow</span></span>: <span class=\"pl-c1\">hidden</span>;</span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">      <span class=\"pl-e\">.slideout-open</span> <span class=\"pl-e\">.slideout-menu</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">block</span>;</span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\">    &lt;/<span class=\"pl-ent\">style</span>&gt;</span>\n  &lt;/<span class=\"pl-ent\">head</span>&gt;\n  &lt;<span class=\"pl-ent\">body</span>&gt;\n\n    &lt;<span class=\"pl-ent\">nav</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>menu<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">h2</span>&gt;Menu&lt;/<span class=\"pl-ent\">h2</span>&gt;\n    &lt;/<span class=\"pl-ent\">nav</span>&gt;\n\n    &lt;<span class=\"pl-ent\">main</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>panel<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">header</span>&gt;\n        &lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>toggle-button<span class=\"pl-pds\">\"</span></span>&gt;☰&lt;/<span class=\"pl-ent\">button</span>&gt;\n        &lt;<span class=\"pl-ent\">h2</span>&gt;Panel&lt;/<span class=\"pl-ent\">h2</span>&gt;\n      &lt;/<span class=\"pl-ent\">header</span>&gt;\n    &lt;/<span class=\"pl-ent\">main</span>&gt;\n\n<span class=\"pl-s1\">    &lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/slideout.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;</span>\n<span class=\"pl-s1\">    &lt;<span class=\"pl-ent\">script</span>&gt;</span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">var</span> slideout <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Slideout</span>({</span>\n<span class=\"pl-s1\">        <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>panel<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>panel<span class=\"pl-pds\">\'</span></span>),</span>\n<span class=\"pl-s1\">        <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>menu<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>menu<span class=\"pl-pds\">\'</span></span>),</span>\n<span class=\"pl-s1\">        <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>padding<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">256</span>,</span>\n<span class=\"pl-s1\">        <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>tolerance<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">70</span></span>\n<span class=\"pl-s1\">      });</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">      <span class=\"pl-c\">// Toggle button</span></span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">document</span>.querySelector(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>.toggle-button<span class=\"pl-pds\">\'</span></span>).addEventListener(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>click<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span>() {</span>\n<span class=\"pl-s1\">        slideout.toggle();</span>\n<span class=\"pl-s1\">      });</span>\n<span class=\"pl-s1\">    &lt;/<span class=\"pl-ent\">script</span>&gt;</span>\n\n  &lt;/<span class=\"pl-ent\">body</span>&gt;\n&lt;/<span class=\"pl-ent\">html</span>&gt;</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#browser-support\"><span class=\"octicon octicon-link\"></span></a>Browser Support</h2>\n\n<ul><li>Chrome (IOS, Android, desktop)</li>\n<li>Firefox (Android, desktop)</li>\n<li>Safari (IOS, Android, desktop)</li>\n<li>Opera (desktop)</li>\n<li>IE 10+ (desktop)</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#api\"><span class=\"octicon octicon-link\"></span></a>API</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutoptions\"><span class=\"octicon octicon-link\"></span></a>Slideout(options)</h3>\n\n<p>Create a new instance of <code>Slideout</code>.</p>\n\n<ul><li><code>options</code> (Object) - Options to customize a new instance of Slideout.</li>\n<li><code>options.panel</code> (HTMLElement) - The DOM element that contains all your application content (<code>.slideout-panel</code>).</li>\n<li><code>options.menu</code> (HTMLElement) - The DOM element that contains your menu application (<code>.slideout-menu</code>).</li>\n<li><code>[options.duration]</code> (Number) - The time (milliseconds) to open/close the slideout. Default: <code>300</code>.</li>\n<li><code>[options.fx]</code> (String) - The CSS effect to use when animating the opening and closing of the slideout. Default: <code>ease</code>.</li>\n<li><code>[options.padding]</code> (Number) - Default: <code>256</code>.</li>\n<li><code>[options.tolerance]</code> (Number) - Default: <code>70</code>.</li>\n<li><code>[options.touch]</code> (Boolean) - Set this option to false to disable Slideout touch events. Default: <code>true</code>.</li>\n<li><code>[options.side]</code> (String) - The side to open the slideout (<code>left</code> or <code>right</code>). Default: <code>left</code>.</li>\n</ul><div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> slideout <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Slideout</span>({\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>panel<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>main<span class=\"pl-pds\">\'</span></span>),\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>menu<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>menu<span class=\"pl-pds\">\'</span></span>),\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>padding<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">256</span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>tolerance<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">70</span>\n});</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutopen\"><span class=\"octicon octicon-link\"></span></a>Slideout.open();</h3>\n\n<p>Opens the slideout menu. It emits <code>beforeopen</code> and <code>open</code> events.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.<span class=\"pl-c1\">open</span>();</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutclose\"><span class=\"octicon octicon-link\"></span></a>Slideout.close();</h3>\n\n<p>Closes the slideout menu. It emits <code>beforeclose</code> and <code>close</code> events.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.<span class=\"pl-c1\">close</span>();</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideouttoggle\"><span class=\"octicon octicon-link\"></span></a>Slideout.toggle();</h3>\n\n<p>Toggles (open/close) the slideout menu.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.toggle();</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutisopen\"><span class=\"octicon octicon-link\"></span></a>Slideout.isOpen();</h3>\n\n<p>Returns <code>true</code> if the slideout is currently open, and <code>false</code> if it is closed.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.isOpen(); <span class=\"pl-c\">// true or false</span></pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutdestroy\"><span class=\"octicon octicon-link\"></span></a>Slideout.destroy();</h3>\n\n<p>Cleans up the instance so another slideout can be created on the same area.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.destroy();</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutenabletouch\"><span class=\"octicon octicon-link\"></span></a>Slideout.enableTouch();</h3>\n\n<p>Enables opening the slideout via touch events.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.enableTouch();</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutdisabletouch\"><span class=\"octicon octicon-link\"></span></a>Slideout.disableTouch();</h3>\n\n<p>Disables opening the slideout via touch events.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.disableTouch();</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutonevent-listener\"><span class=\"octicon octicon-link\"></span></a>Slideout.on(event, listener);</h3>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.on(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>open<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span>() { ... });</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutonceevent-listener\"><span class=\"octicon octicon-link\"></span></a>Slideout.once(event, listener);</h3>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.once(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>open<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span>() { ... });</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutoffevent-listener\"><span class=\"octicon octicon-link\"></span></a>Slideout.off(event, listener);</h3>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.off(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>open<span class=\"pl-pds\">\'</span></span>, listener);</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#slideoutemitevent-data\"><span class=\"octicon octicon-link\"></span></a>Slideout.emit(event, ...data);</h3>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.emit(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>open<span class=\"pl-pds\">\'</span></span>);</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#events\"><span class=\"octicon octicon-link\"></span></a>Events</h2>\n\n<p>An instance of Slideout emits the following events:</p>\n\n<ul><li><code>beforeclose</code></li>\n<li><code>close</code></li>\n<li><code>beforeopen</code></li>\n<li><code>open</code></li>\n<li><code>translate</code></li>\n</ul><p>The slideout emits <code>translate</code> event only when it is opening/closing via touch events.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>slideout.on(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>translate<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">translated</span>) {\n  <span class=\"pl-en\">console</span><span class=\"pl-c1\">.log</span>(translated); <span class=\"pl-c\">// 120 in px</span>\n});</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#npm-scripts\"><span class=\"octicon octicon-link\"></span></a>npm-scripts</h2>\n\n<pre><code>$ npm run build\n</code></pre>\n\n<pre><code>$ npm run dist\n</code></pre>\n\n<pre><code>$ npm test\n</code></pre>\n\n<pre><code>$ npm run hint\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#faq\"><span class=\"octicon octicon-link\"></span></a>FAQ</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#how-to-add-a-toggle-button\"><span class=\"octicon octicon-link\"></span></a>How to add a toggle button.</h3>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// vanilla js</span>\n<span class=\"pl-c1\">document</span>.querySelector(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>.toggle-button<span class=\"pl-pds\">\'</span></span>).addEventListener(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>click<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span>() {\n  slideout.toggle();\n});\n\n<span class=\"pl-c\">// jQuery</span>\n$(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>.toggle-button<span class=\"pl-pds\">\'</span></span>).on(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>click<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span>() {\n    slideout.toggle();\n});</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Mango/slideout#how-to-open-slideout-from-right-side\"><span class=\"octicon octicon-link\"></span></a>How to open slideout from right side.</h3>\n\n<p>You should define <code>left: auto</code> on the class <code>.slideout-menu</code>.</p>\n\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.slideout-menu</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">left</span></span>: <span class=\"pl-c1\">auto</span>;\n}</pre></div>\n\n<p>Then, use the <code>side</code> option with the value <code>right</code>.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> slideout <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Slideout</span>({\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>panel<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>content<span class=\"pl-pds\">\'</span></span>),\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>menu<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>menu<span class=\"pl-pds\">\'</span></span>),\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>side<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>right<span class=\"pl-pds\">\'</span></span>\n});</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#with--by\"><span class=\"octicon octicon-link\"></span></a>With ❤ by</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Mango/slideout#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>MIT license. Copyright © 2015 <a href=\"http://getmango.com\">Mango</a>.</p>\n',1),(129,'Reading and Writing Electronic Text','http://rwet.decontextualize.com/book/textblob/',0,0,'\n  <p>by <a href=\"http://www.decontextualize.com\">Allison Parrish</a></p>\n\n<p>In this chapter, we’ll use a Python library called <a href=\"http://textblob.readthedocs.org/en/dev/\">TextBlob</a> to perform simple natural language processing tasks.</p>\n\n<p>“Natural Language Processing” is a field at the intersection of computer\nscience, linguistics and artificial intelligence which aims to make the\nunderlying structure of language available to computer programs for analysis\nand manipulation. It’s a vast and vibrant field with a long history! New\nresearch and techniques are being developed constantly.</p>\n\n<p>The aim of this chapter is to introduce a few simple concepts and techniques\nfrom NLP—just the stuff that’ll help you do creative things quickly, and\nmaybe open the door for you to understand more sophisticated NLP concepts that\nyou might encounter elsewhere.</p>\n\n<p>The most commonly known library for doing NLP in Python is <a href=\"http://www.nltk.org/\">NLTK</a>. NLTK is a fantastic library, but it’s also a writhing behemoth: large\nand slippery and difficult to understand. TextBlob is a simpler, more humane\ninterface to much of NLTK’s functionality: perfect for NLP beginners or poets\nthat just want to get work done.</p>\n\n<h2>Natural language</h2>\n\n<p>“Natural language” is a loaded phrase: what makes one stretch of language\n“natural” while another stretch is not? NLP techniques are opinionated about\nwhat language is and how it works; as a consequence, you’ll sometimes find\nyourself having to conceptualize your text with uncomfortable abstractions in\norder to make it work with NLP. (This is especially true of poetry, which\nalmost by definition breaks most “conventional” definitions of how language\nbehaves and how it’s structured.)</p>\n\n<p>Of course, a computer can never really fully “understand” human language.<br />Even when the text you’re using fits the abstractions of NLP perfectly, the\nresults of NLP analysis are always going to be at least a little bit\ninaccurate. But often even inaccurate results can be “good enough”—and in any\ncase, inaccurate output from NLP procedures can be an excellent source of the\nsublime and absurd juxtapositions that we (as poets) are constantly in search\nof.</p>\n\n<h3>The English Speakers Only Club</h3>\n\n<p>The main assumption that most NLP libraries and techniques make is that the\ntext you want to process will be in English. Historically, most NLP research\nhas been on English specifically; it’s only more recently that serious work\nhas gone into applying these techniques to other languages. The examples in\nthis chapter are all based on English texts, and the tools we’ll use are\ngeared toward English. If you’re interested in working on NLP in other\nlanguages, here are a few starting points:</p>\n\n<ul><li><a href=\"https://github.com/konlpy/konlpy\">Konlpy</a>, natural language processing in\nPython for Korean</li>\n  <li><a href=\"https://github.com/fxsjy/jieba\">Jieba</a>, text segmentation and POS tagging in\nPython for Chinese</li>\n  <li>The <a href=\"http://www.clips.ua.ac.be/pattern\">Pattern</a> library (like TextBlob, a\nsimplified/augmented interface to NLTK) includes POS-tagging and some\nmorphology for Spanish in its\n<a href=\"http://www.clips.ua.ac.be/pages/pattern-es\">pattern.es</a> package.</li>\n</ul><h2>English grammar: a crash course</h2>\n\n<p>The only thing I believe about English grammar is <a href=\"http://www.writing.upenn.edu/~afilreis/88v/creeley-on-sentence.html\">this</a>:</p>\n\n<blockquote>\n  <p>“Oh yes, the sentence,” Creeley once told the critic Burton Hatlen, “that’s\nwhat we call it when we put someone in jail.”</p>\n</blockquote>\n\n<p>There is no such thing as a sentence, or a phrase, or a part of speech, or even\na “word”—these are all pareidolic fantasies occasioned by glints of sunlight\nwe see on reflected on the surface of the ocean of language; fantasies that we\ncomfort ourselves with when faced with language’s infinite and unknowable\nvariability.</p>\n\n<p>Regardless, we may find it occasionally helpful to think about language using\nthese abstractions. The following is a gross oversimplification of both how\nEnglish grammar works, and how theories of English grammar work in the context\nof NLP. But it should be enough to get us going!</p>\n\n<h3>Sentences and parts of speech</h3>\n\n<p>English texts can roughly be divided into “sentences.” Sentences are themselves\ncomposed of individual words, each of which has a function in expressing the\nmeaning of the sentence. The function of a word in a sentence is called its\n“part of speech”—i.e., a word functions as a noun, a verb, an adjective, etc.\nHere’s a sentence, with words marked for their part of speech:</p>\n\n<table><tbody><tr><td>I</td>\n      <td>really</td>\n      <td>love</td>\n      <td>entrees</td>\n      <td>from</td>\n      <td>the</td>\n      <td>new</td>\n      <td>cafeteria.</td>\n    </tr><tr><td>pronoun</td>\n      <td>adverb</td>\n      <td>verb</td>\n      <td>noun (plural)</td>\n      <td>preposition</td>\n      <td>determiner</td>\n      <td>adjective</td>\n      <td>noun</td>\n    </tr></tbody></table><p>Of course, the “part of speech” of a word isn’t a property of the word itself.\nWe know this because a single “word” can function as two different parts of speech:</p>\n\n<blockquote>\n  <p>I love cheese.</p>\n</blockquote>\n\n<p>The word “love” here is a verb. But here:</p>\n\n<blockquote>\n  <p>Love is a battlefield.</p>\n</blockquote>\n\n<p>… it’s a noun. For this reason (and others), it’s difficult for computers to\naccurately determine the part of speech for a word in a sentence. (It’s\ndifficult sometimes even for humans to do this.) But NLP procedures do their\nbest!</p>\n\n<h3>Phrases</h3>\n\n<p>A sentence can be divided into groups of words that work as units, or “phrases.” Phrases themselves might have smaller phrases within them, forming a tree structure. Linguists traditionally draw the structure of a sentence out in an actual tree:</p>\n\n<p><img src=\"http://rwet.decontextualize.com/book/public/cafeteriatree.png\" alt=\"Cafeteria tree\" /></p>\n\n<p>A declarative sentence consists of a noun phrase (the subject) and a verb\nphrase (the predicate). The verb phrase has a verb, followed (optionally, if\nthe verb is transitive) by a noun phrase. A “noun phrase” is basically the\nnoun, plus all of the stuff that surrounds and modifies the noun, like\nadjectives, relative clauses, prepositional phrases, etc. Noun phrases are\nhandy things to be able to detect and extract, since they give us an idea of\nwhat a text might be “about.”</p>\n\n<p>NLP libraries give us tools to parse sentences into trees like this, and\nextract phrases from the sentence according to what kind of phrase it is.\nNotably, TextBlob makes extracting noun phrases super easy.</p>\n\n<p>But note: if computers are bad at identifying parts of speech, they’re even\n<em>worse</em> at parsing grammar in sentences. You will get some wonky results, so be\nprepared.</p>\n\n<h3>Morphology</h3>\n\n<p>“Morphology” is the word that linguists use to describe all of the weird ways\nthat individual words get modified to change their meaning, usually with\nprefixes and suffixes. e.g.</p>\n\n<pre><code>do -&gt; redo\nsing -&gt; singing\nmonarch -&gt; monarchy\nteach -&gt; taught\n</code></pre>\n\n<p>A word’s “lemma” is its most “basic” form, the form without any morphology\napplied to it. “Sing,” “sang,” “singing,” are all different “forms” of the\nlemma <em>sing</em>. Likewise, “octopi” is the plural of “octopus”; the “lemma” of\n“octopi” is <em>octopus</em>.</p>\n\n<p>“Lemmatizing” a text is the process of going through the text and replacing\neach word with its lemma. This is often done in an attempt to reduce a text\nto its most “essential” meaning, by eliminating pesky things like verb tense\nand noun number.</p>\n\n<h3>Pluralization</h3>\n\n<p>There’s one super important kind of morphology, and that’s the rules for taking\na singular noun and turning it into a plural noun, like:</p>\n\n<pre><code>cat -&gt; cats (easy)\ncheese -&gt; cheeses (also easy...)\nknife -&gt; knives (complicated)\nchild -&gt; children (huh?)\n</code></pre>\n\n<p>Even though we as humans employ plural morphology in pretty much every\nsentence, without a second thought, the rules for how to do it are actually\nreally weird and complicated (as with all elements of human language). A\ncomputer is never going to be able to 100% accurately make this transformation.\nBut, again, some NLP libraries try. </p>\n\n<h2>Using TextBlob</h2>\n\n<p>At this point, let’s actually start using TextBlob so we can put this boring\ntheory into practice.</p>\n\n<h3>Installation</h3>\n\n<p>To use textblob, we of course need to install it! And to install it, we need to\ncreate or activate a virtualenv.</p>\n\n<pre><code>$ virtualenv venv\n$ source venv/bin/activate\n</code></pre>\n\n<p>Then, install TextBlob with <code>pip</code>:</p>\n\n<pre><code>$ pip install textblob\n</code></pre>\n\n<p>Wait as things happen. When it’s all done, you might need to download the\nTextBlob corpora; to do so, type the following on the command line:</p>\n\n<pre><code>$ python -m textblob.download_corpora\n</code></pre>\n\n<h2>Sentences, words and noun phrases</h2>\n\n<p>Let’s play with TextBlob in the interactive interpreter. The basic steps for\nusing TextBlob are:</p>\n\n<ul><li>Create a TextBlob object, passing a string with the text we want to work with.</li>\n  <li>Use various methods and attributes of the resulting object to get at various parts of the text.</li>\n</ul><p>For example, here’s how to get a list of sentences from a string:</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import TextBlob\n&gt;&gt;&gt; blob = TextBlob(\"ITP is a two-year graduate program located in the Tisch School of the Arts. Perhaps the best way to describe us is as a Center for the Recently Possible.\")\n&gt;&gt;&gt; for sentence in blob.sentences:\n...     print sentence\nITP is a two-year graduate program located in the Tisch School of the Arts.\nPerhaps the best way to describe us is as a Center for the Recently Possible.\n</pre>\n\n<p>The <code>.sentences</code> attribute of the resulting object is a list of sentences in the text. (Much easier than trying to split on punctuation, right?)</p>\n\n<p>Each sentence object also has an attribute <code>.words</code> that has a list of words in\nthat sentence.</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import TextBlob\n&gt;&gt;&gt; blob = TextBlob(\"ITP is a two-year graduate program located in the Tisch School of the Arts. Perhaps the best way to describe us is as a Center for the Recently Possible.\")\n&gt;&gt;&gt; for word in blob.sentences[1].words:\n...     print word\nPerhaps\nthe\nbest\nway\nto\ndescribe\nus\nis\nas\na\nCenter\nfor\nthe\nRecently\nPossible\n</pre>\n\n<p>The TextBlob object also has a “.noun_phrases” attribute that simply returns the text of all noun phrases found in the original text:</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import TextBlob\n&gt;&gt;&gt; blob = TextBlob(\"ITP is a two-year graduate program located in the Tisch School of the Arts. Perhaps the best way to describe us is as a Center for the Recently Possible.\")\n&gt;&gt;&gt; for np in blob.noun_phrases:\n...     print np\nitp\ntwo-year graduate program\ntisch\nrecently\n</pre>\n\n<p>(As you can see, this isn’t terribly accurate, but we’re working with computers\nhere. What are you going to do.)</p>\n\n<h3>“Tagging” parts of speech</h3>\n\n<p>TextBlob can also tell us what part of speech each word in a text corresponds\nto. It can tell us if a word in a sentence is functioning as a noun, an\nadjective, a verb, etc. In NLP, associating a word with a part of speech is\ncalled “tagging.” Correspondingly, the attribute of the <code>TextBlob</code> object\nwe’ll use to access this information is <code>.tags</code>.</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import TextBlob\n&gt;&gt;&gt; blob = TextBlob(\"I have a lovely bunch of coconuts.\")\n&gt;&gt;&gt; for word, pos in blob.tags:\n...    print word, pos\nI PRP\nhave VBP\na DT\nlovely JJ\nbunch NN\nof IN\ncoconuts NNS\n</pre>\n\n<p>This <code>for</code> loop is a little weird, because it has <em>two</em> temporary loop\nvariables instead of one. (The underlying reason for this is that <code>.tags</code>\nevaluates to a list of two-item tuples, which we can automatically unpack\nby specifying two items in the for loop. Don’t worry about this if it doesn’t\nmake sense. Just know that when we’re using the <code>.tags</code> attribute, you need\ntwo loop variables instead of one.) The first variable, which we’ve called\n<code>word</code> here, contains the word; the second variable, called <code>pos</code> here,\ncontains the part of speech.</p>\n\n<p>Here’s a brief list of what the tags mean. You can see a more complete list of POS tag meanings <a href=\"http://www.clips.ua.ac.be/pages/mbsp-tags\">here</a>.</p>\n\n<ul><li>NN: noun</li>\n  <li>JJ: adjective</li>\n  <li>IN: preposition</li>\n  <li>VB_: verb (the <code>_</code> gets replaced with various letters depending on the form of the verb)</li>\n</ul><h3>Pluralization</h3>\n\n<p>The TextBlob library comes with a built-in kind of object called <code>Word</code>. If\nyou create a <code>Word</code> object, you can use its <code>.pluralize()</code> method to get the\nplural form of that word:</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import Word\n&gt;&gt;&gt; w = Word(\"university\")\n&gt;&gt;&gt; print w.pluralize()\nuniversities\n</pre>\n\n<p><code>Word</code> objects also have a <code>.lemmatize()</code> method, which returns the word, but with all morphology (suffixes, etc.) removed.</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import Word\n&gt;&gt;&gt; w = Word(\"running\")\n&gt;&gt;&gt; print w.lemmatize()\nrunning\n</pre>\n\n<p>All items in the <code>.words</code> and <code>.tags</code> attribute of a sentence are also secretly\n<code>Word</code> objects, so you can call the <code>.pluralize()</code> method on those items when\n(e.g.) looping through a list:</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import TextBlob\n&gt;&gt;&gt; blob = TextBlob(\"I spy a lion, a tiger, and a bear.\")\n&gt;&gt;&gt; sentence = blob.sentences[0]\n&gt;&gt;&gt; for word, pos in sentence.tags:\n...   if pos == \'NN\':\n...     print word.pluralize()\nspies\nlions\ntigers\n</pre>\n\n<h2>Some examples</h2>\n\n<h3>Print only short sentences</h3>\n\n<p>This example takes an arbitrary input text and parses it into sentences. It\nthen prints out ten random sentences from the text that have five or fewer\nwords.</p>\n\n<pre>\nfrom textblob import TextBlob\nimport random\nimport sys\n\n# stdin\'s read() method just reads in all of standard input as a string;\n# use the decode method to convert to ascii (textblob prefers ascii)\ntext = sys.stdin.read().decode(\'ascii\', errors=\"replace\")\nblob = TextBlob(text)\n\nshort_sentences = list()\nfor sentence in blob.sentences:\n  if len(sentence.words) &lt;= 5:\n    short_sentences.append(sentence.replace(\"\\n\", \" \"))\n\nfor item in random.sample(short_sentences, 10):\n	print item\n</pre>\n<p>Program: hemingwayize.py</p>\n\n<p>Here’s what it looks like when using <em>Pride and Prejudice</em> as input:</p>\n\n<pre>$ python hemingwayize.py &lt; austen.txt\n\"No, not at all.\"\n\"Oh!\n\"Ten thousand pounds!\n.\nsaid Frank Churchill.\nimpossible!\"\n\'Lord!\'\nBut the effort was painful.\nBut what shall I say?\nLet Wickham be _your_ man.\n</pre>\n\n<h4>Dealing with Unicode errors</h4>\n\n<p>Wait, what’s all that <code>decode(\'ascii\', errors=\"replace\")</code> business there?\nIt turns out that TextBlob is really finicky about text: if it gets anything\nexcept plain ASCII text, it has a propensity to return strange errors. The\n<code>decode</code> method can be called on any string; you can use it to remove any\nnon-ASCII characters from a string, making it safe for TextBlob. Use <code>replace</code>\nto replace non-ASCII characters with a placeholder, or <code>ignore</code> to remove them\nentirely. For example:</p>\n\n<pre>\n&gt;&gt;&gt; string_with_stuff = \"weird \\xe1ccents\"\n&gt;&gt;&gt; print string_with_stuff.decode(\'ascii\', errors=\"ignore\")\nweird ccents\n</pre>\n\n<h3>Turn any text into a list of instructions</h3>\n\n<p>This program extracts all noun phrases from a text, and all verbs; it then\nrandomly selects from these lists to generate dada instructions from the text.</p>\n\n<pre>\nfrom textblob import TextBlob\nimport sys\nimport random\n\ntext = sys.stdin.read().decode(\'ascii\', errors=\"replace\")\nblob = TextBlob(text)\n\nnoun_phrases = blob.noun_phrases\n\nverbs = list()\nfor word, tag in blob.tags:\n  if tag == \'VB\':\n    verbs.append(word.lemmatize())\n\nfor i in range(1, 11):\n  print \"Step \" + str(i) + \". \" + random.choice(verbs).title() + \" \" + \\\n      random.choice(noun_phrases)\n</pre>\n<p>Program: instructify.py</p>\n\n<p>Using some H. P. Lovecraft as input:</p>\n\n<pre>$ python instructify.py &lt; lovecraft.txt\nStep 1. Sail thick forests\nStep 2. Come new yearnings\nStep 3. Lessen long grass\nStep 4. Buy books men\nStep 5. Come kuranes\nStep 6. Prove new name\nStep 7. Exist ship\nStep 8. Sail celephais\nStep 9. Remember white summit\nStep 10. Be old world\n</pre>\n\n<h3>Create a “summary” of a text</h3>\n\n<p>This program “summarizes” a text in a very basic way. It does so by examining\nthe part of speech of each word, and appending the word to a list if the word\nis a noun; it then prints out five random nouns from the text in plural form.</p>\n\n<pre>\nfrom textblob import TextBlob, Word\nimport sys\nimport random\n\ntext = sys.stdin.read().decode(\'ascii\', errors=\"ignore\")\nblob = TextBlob(text)\n\nnouns = list()\nfor word, tag in blob.tags:\n	if tag == \'NN\':\n		nouns.append(word.lemmatize())\n\nprint \"This text is about...\"\nfor item in random.sample(nouns, 5):\n	word = Word(item)\n	print word.pluralize()\n</pre>\n<p>Program: summarize_nouns.py</p>\n\n<p>Using Lovecraft as input, once again:</p>\n\n<pre>$ python summarize_nouns.py &lt; lovecraft.txt\nThis text is about...\nmen\nworlds\nseas\nflows\nautumns\n</pre>\n\n<h2>Wordnet</h2>\n\n<p>TextBlob also provides an interface to WordNet data. <a href=\"http://wordnet.princeton.edu/\">WordNet</a> is basically a computer-readable thesaurus. <a href=\"http://wordnetweb.princeton.edu/perl/webwn\">You can use it online\nhere</a>.</p>\n\n<p>Wordnet’s most basic unit is the <em>synset</em>. A synset is essentially a “group” of\ndifferent words that all mean the “same” thing. For example, wordnet might\ngroup “kitty,” “cat,” “feline,” etc. into a synset, categorized under the\nabstract concept of <em>CAT</em>.</p>\n\n<p>You can get a list of synsets that wordnet thinks a word belongs to like so:</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import Word\n&gt;&gt;&gt; bank = Word(\"bank\")\n&gt;&gt;&gt; synsets = bank.synsets\n&gt;&gt;&gt; print synsets\n[Synset(\'bank.n.01\'), Synset(\'depository_financial_institution.n.01\'), Synset(\'bank.n.03\'), Synset(\'bank.n.04\'), Synset(\'bank.n.05\'), Synset(\'bank.n.06\'), Synset(\'bank.n.07\'), Synset(\'savings_bank.n.02\'), Synset(\'bank.n.09\'), Synset(\'bank.n.10\'), Synset(\'bank.v.01\'), Synset(\'bank.v.02\'), Synset(\'bank.v.03\'), Synset(\'bank.v.04\'), Synset(\'bank.v.05\'), Synset(\'deposit.v.02\'), Synset(\'bank.v.07\'), Synset(\'trust.v.01\')]\n</pre>\n\n<p>As you can see, the word “bank” belongs to many different synsets! We can print\nout WordNet’s definition for a synset like so:</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import Word\n&gt;&gt;&gt; synsets = Word(\"bank\").synsets\n&gt;&gt;&gt; for synset in synsets:\n...   print synset.definition()\nsloping land (especially the slope beside a body of water)\na financial institution that accepts deposits and channels the money into lending activities\na long ridge or pile\nan arrangement of similar objects in a row or in tiers\na supply or stock held in reserve for future use (especially in emergencies)\nthe funds held by a gambling house or the dealer in some gambling games\na slope in the turn of a road or track; the outside is higher than the inside in order to reduce the effects of centrifugal force\na container (usually with a slot in the top) for keeping money at home\na building in which the business of banking transacted\na flight maneuver; aircraft tips laterally about its longitudinal axis (especially in turning)\ntip laterally\nenclose with a bank\ndo business with a bank or keep an account at a bank\nact as the banker in a game or in gambling\nbe in the banking business\nput into a bank account\ncover with ashes so to control the rate of burning\nhave confidence or faith in\n</pre>\n\n<p>You can restrict which synsets to retrieve for a word for that word only when\nused as a particular part of speech (say noun or verb).</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import Word\n&gt;&gt;&gt; from textblob.wordnet import NOUN\n&gt;&gt;&gt; synsets = Word(\"bank\").get_synsets(pos=NOUN)\n&gt;&gt;&gt; for synset in synsets:\n...   print synset.definition()\nsloping land (especially the slope beside a body of water)\na financial institution that accepts deposits and channels the money into lending activities\na long ridge or pile\nan arrangement of similar objects in a row or in tiers\na supply or stock held in reserve for future use (especially in emergencies)\nthe funds held by a gambling house or the dealer in some gambling games\na slope in the turn of a road or track; the outside is higher than the inside in order to reduce the effects of centrifugal force\na container (usually with a slot in the top) for keeping money at home\na building in which the business of banking transacted\na flight maneuver; aircraft tips laterally about its longitudinal axis (especially in turning)\n</pre>\n\n<p>We can also take any synset and use its <code>.lemma_names()</code> method to get all of\nthe words belonging to the synset, essentially giving us a list of synonyms\n(words that mean the same thing). Let’s find synonyms for “bank” in the sense\nof “financial institutions” (element 1 from the list above):</p>\n\n<pre>\n&gt;&gt;&gt; from textblob import Word\n&gt;&gt;&gt; from textblob.wordnet import NOUN\n&gt;&gt;&gt; synsets = Word(\"bank\").get_synsets(pos=NOUN)\n&gt;&gt;&gt; print synsets[1].lemma_names()\n[u\'depository_financial_institution\', u\'bank\', u\'banking_concern\', u\'banking_company\']\n</pre>\n\n<p>Thanks, WordNet!</p>\n\n<h3>Example: Synonymize</h3>\n\n<p>This program reads in a ext, parses it into words, and then replaces each \nword with a random synonym (according to WordNet). Only words with three\nor more letters that have synonyms in WordNet are replaced.</p>\n\n<pre>\nfrom textblob import Word\nimport sys\nimport random\n\nfor line in sys.stdin:\n  line = line.strip()\n  line = line.decode(\'ascii\', errors=\"replace\")\n  words = line.split(\" \")\n  output = list()\n  for word_str in words:\n    word_obj = Word(word_str)\n    if len(word_str) &gt; 3 and len(word_obj.synsets) &gt; 0:\n      random_synset = random.choice(word_obj.synsets)\n      random_lemma = random.choice(random_synset.lemma_names)\n      output.append(random_lemma.replace(\'_\', \' \'))\n    else:\n      output.append(word_str)\n  print \" \".join(output)\n</pre>\n<p>Program: synonymize.py</p>\n\n<pre>$ python synonymize.py &lt; sea_rose.txt\nRose, harsh rose,\nscarred and with stretch of petals,\nmeager flower, thin,\nspare of leaf,\n\nmore wanted\nthan a wet climb up\nsingle on a stem --\nyou are catch in the drift.\n\nStunted, with minuscule leaf,\nyou are fling on the sand,\nyou are lift\nin the sharp sand\nthat drive in the wind.\n\nCan the spice-rose\ndrop such acid fragrancy\nharden in a leaf?\n</pre>\n\n<h2>Further reading</h2>\n\n<p>TK</p>\n\n\n',1),(130,'Getting started with Meteor and React','http://sergiotapia.me/2015/09/18/react-and-meteor-match-made-in-heaven/',1,0,'<p>Meteor is still kind of in that wild west style point in time where things move fast, and today\'s good advice is tomorrow\'s bad practice.</p>\n\n<p><em>(RIP IronRouter)</em></p>\n\n<p>In this article, I\'m going to teach you how to integrate React into a Meteor application in a clear, concise, no bullshit way. It\'s going to use current best practices, proven packages, and an easy to understand folder/file structure.</p>\n\n<p>Why should you use React? <a href=\"http://reactfordesigners.com/labs/reactjs-introduction-for-people-who-know-just-enough-jquery-to-get-by/\">Read this article</a> to see what the hype is about. If this article doesn\'t convince you, then maybe React isn\'t for you.</p>\n\n<p>Let\'s get started.</p>\n\n<hr /><p>First create the project.</p>\n\n<pre><code>meteor create reactexample  \ncd reactexample  \n</code></pre>\n\n<p>Add the packages we\'re going to need.</p>\n\n<pre><code>meteor add react  \nmeteor add kadira:react-layout  \nmeteor add kadira:flow-router  \n</code></pre>\n\n<p>The <code>react</code> package is the official MDG Meteor package for React integration.</p>\n\n<p>The <code>kadira:react-layout</code> package is going to allow us to natively invoke React components in our routes.</p>\n\n<p>And finally <code>kadira:flow-router</code> is going to allow us to route urls to render specific components.</p>\n\n<hr /><p>Erase the original three files generated for your brand new project, and create a folder called <code>client</code>.</p>\n\n<p>In there, create a <code>main.html</code> and a <code>main.jsx</code>.</p>\n\n<pre><code>&lt;!-- This is inside main.html --&gt;  \n&lt;head&gt;  \n  &lt;title&gt;Example React App&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;  \n  &lt;div id=\"react-root\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n\n// This is inside main.jsx\nMainLayout = React.createClass({  \n  render() {\n    return (\n      &lt;div&gt;\n        &lt;Header /&gt;\n        &lt;div class=\"container\"&gt;\n          {this.props.content}\n        &lt;/div&gt;\n        &lt;Footer /&gt;\n      &lt;/div&gt;\n    )\n  }\n});\n</code></pre>\n\n<p>Notice how the html file has a <code>#react-root</code> div. That\'s where the MainLayout is going to be rendered, let\'s wire that up. The package is going to look for that div by default configuration.</p>\n\n<p>Create a folder called <code>lib</code> at your root and a file called <code>router.jsx</code> inside.</p>\n\n<pre><code>FlowRouter.route(\'/\', {  \n  action() {\n    ReactLayout.render(MainLayout, { content: &lt;Wall /&gt; });\n  }\n});\n</code></pre>\n\n<p>Whenever someone visits the root path, we\'re going to render the <code>MainLayout</code> component to the <code>#react-root</code> div. Notice we\'re also passing along a parameter, a simple dummy React component. Let\'s create these components next.</p>\n\n<p>Make your folders looks something like:</p>\n\n<pre><code>/client\n  /components\n    wall.jsx\n  /layout\n    footer.jsx\n    header.jsx\n/lib\n  router.jsx\n</code></pre>\n\n<p>Cool stuff! So we have a folder for our components and another for our layout components such as <code>Header</code> and <code>Footer</code>.</p>\n\n<pre><code>// This is inside header.jsx\nHeader = React.createClass({  \n  render() {\n    return (\n      &lt;div class=\"header\"&gt;\n        &lt;p&gt;This is the header.&lt;/p&gt;\n      &lt;/div&gt;\n    )\n  }\n})\n\n// This is inside footer.jsx\nFooter = React.createClass({  \n  render() {\n    return (\n      &lt;div class=\"footer\"&gt;\n        &lt;p&gt;This is the footer.&lt;/p&gt;\n      &lt;/div&gt;\n    )\n  }\n});\n\n// This is inside wall.jsx\nWall = React.createClass({  \n  render() {\n    return (\n      &lt;div class=\"footer\"&gt;\n        &lt;h1&gt;Welcome to the Wall!&lt;/h1&gt;\n      &lt;/div&gt;\n    )\n  }\n});\n</code></pre>\n\n<hr /><p>Now run your server and you should see your React components rendered nicely.</p>\n\n<p>In the next article, I\'m going to be creating some Components that use Mongo data - again super simple stuff, and you\'ll see that by using React you\'ve made subscribing to your data even easier to reason about.</p>\n        ',1),(131,'Document Clustering with Python','http://brandonrose.org/clustering',0,0,'\n<pre>\nTop terms per cluster:\n\nCluster 0 words: family, home, mother, war, house, dies,\n\nCluster 0 titles: Schindler\'s List, One Flew Over the Cuckoo\'s Nest, Gone with the Wind, The Wizard of Oz, Titanic, Forrest Gump, E.T. the Extra-Terrestrial, The Silence of the Lambs, Gandhi, A Streetcar Named Desire, The Best Years of Our Lives, My Fair Lady, Ben-Hur, Doctor Zhivago, The Pianist, The Exorcist, Out of Africa, Good Will Hunting, Terms of Endearment, Giant, The Grapes of Wrath, Close Encounters of the Third Kind, The Graduate, Stagecoach, Wuthering Heights,\n\nCluster 1 words: police, car, killed, murders, driving, house,\n\nCluster 1 titles: Casablanca, Psycho, Sunset Blvd., Vertigo, Chinatown, Amadeus, High Noon, The French Connection, Fargo, Pulp Fiction, The Maltese Falcon, A Clockwork Orange, Double Indemnity, Rebel Without a Cause, The Third Man, North by Northwest,\n\nCluster 2 words: father, new, york, new, brothers, apartments,\n\nCluster 2 titles: The Godfather, Raging Bull, Citizen Kane, The Godfather: Part II, On the Waterfront, 12 Angry Men, Rocky, To Kill a Mockingbird, Braveheart, The Good, the Bad and the Ugly, The Apartment, Goodfellas, City Lights, It Happened One Night, Midnight Cowboy, Mr. Smith Goes to Washington, Rain Man, Annie Hall, Network, Taxi Driver, Rear Window,\n\nCluster 3 words: george, dance, singing, john, love, perform,\n\nCluster 3 titles: West Side Story, Singin\' in the Rain, It\'s a Wonderful Life, Some Like It Hot, The Philadelphia Story, An American in Paris, The King\'s Speech, A Place in the Sun, Tootsie, Nashville, American Graffiti, Yankee Doodle Dandy,\n\nCluster 4 words: killed, soldiers, captain, men, army, command,\n\nCluster 4 titles: The Shawshank Redemption, Lawrence of Arabia, The Sound of Music, Star Wars, 2001: A Space Odyssey, The Bridge on the River Kwai, Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb, Apocalypse Now, The Lord of the Rings: The Return of the King, Gladiator, From Here to Eternity, Saving Private Ryan, Unforgiven, Raiders of the Lost Ark, Patton, Jaws, Butch Cassidy and the Sundance Kid, The Treasure of the Sierra Madre, Platoon, Dances with Wolves, The Deer Hunter, All Quiet on the Western Front, Shane, The Green Mile, The African Queen, Mutiny on the Bounty,\n\n\n\n\n</pre>\n',1),(133,'Aerotwist - CORS for Concern','https://aerotwist.com/blog/cors-for-concern/',1,0,'<p>So the podcast app is a proof-of-concept to try out a bunch of APIs, and, as is normal for me, to battle-test ideas I have for the best way to approach modern development. Ultimately I’d love to push the source code and the app itself, much as I have done for <a href=\"https://voice-memos.appspot.com/\">Voice Memos</a> and <a href=\"https://guitar-tuner.appspot.com\">Guitar Tuner</a>.</p>\n\n<p>This kind of app, at many levels, feels like something that the web should be good for. It’s a case of ingesting others’ feeds &amp; album art, putting their mp3 files in <code>&lt;audio&gt;</code> elements, and making a neat UI in which to present the whole experience. Looking at the tools at our disposal for all this, we have the Cache API, we have Service Workers, we have IndexedDB (which remains a horror show, but hey it does work if you talk to it nicely), and the graphics performance of many browsers can support the kinds of effects I love to make.</p>\n\n<img src=\"https://aerotwist.com/static/blog/cors-for-concern/203-podcast_framed_jpg.jpg\" alt=\"An artist\'s impression of two idiots who have a podcast about the web\" />An artist\'s impression of two idiots who have a podcast about the web<blockquote>\n  <p>This kind of app, at many levels, feels like something that the web should be good for.</p>\n</blockquote>\n\n<p>Here’s the thing, though: <strong>I can’t ship the app</strong>. I can’t because I’d also need to spin up a proxy for all the assets, and, if I mean business, the proxy would also need to handle the (very large) mp3 files as well. All of this is due to <strong>CORS</strong>, <strong>Mixed Content</strong>, and the lack of an escape hatch.</p>\n\n<h2>TL;DR</h2>\n<p>If you want the cheat list (hey, who wouldn’t?), here’s what functionality is locked off unless I use a proxy. It’s worth noting that I want to be on HTTPS so that I can use a Service Worker:</p>\n\n<table class=\"left-titled left-highlight\"><thead><tr><th>Feature</th>\n      <th>Prevented by CORS</th>\n      <th>Prevented by Mixed Content</th>\n    </tr></thead><tbody><tr><td>Reading insecure podcast feed data</td>\n      <td>No</td>\n      <td>Yes</td>\n    </tr><tr><td>Analyzing insecure image assets (for UI colors)</td>\n      <td>Yes</td>\n      <td>Yes</td>\n    </tr><tr><td>Background-loading insecure mp3 files for offline (in a Service Worker)</td>\n      <td>No</td>\n      <td>Yes</td>\n    </tr></tbody></table><h2>CORS and Mixed Content Warnings Are Necessary</h2>\n<p><a href=\"https://annevankesteren.nl/2015/02/same-origin-policy\">CORS saves the bacon of many an intranet</a>. The last thing you want is a random site being able to ping a load of addresses in the background and discover all manner of things about your SuperSecretProject™ without your knowledge. That would be bad, so it’s very good that browsers prevent that from happening. Browser vendors, then, can feel good about things: they have protected intranets and other sites from inadvertently leaking data. Internet high five!</p>\n\n<blockquote>\n  <p>The last thing you want is a random site being able to ping a load of addresses in the background and discover all manner of things about your SuperSecretProject™ without your knowledge.</p>\n</blockquote>\n\n<p>Mixed Content warnings, or even just plain not-loading-a-resource-because-it’s-over-an-insecure-connection, is also a good thing because the user should know that the contract of HTTPS was broken by the developer loading something over HTTP. Another Internet high five!</p>\n\n<p>While we’re here, however, it’s interesting to note that native doesn’t observe CORS restrictions or Mixed Content (today, at least, though <a href=\"http://www.cso.com.au/article/577197/apple-tells-ios-9-developers-use-https-exclusively/\">there does seem to be a shift</a>) and, as it happens, most people <em>seem</em> to consume podcasts through native apps. The <a href=\"http://dictionary.cambridge.org/dictionary/english/knock-on-effect\">knock-on effect</a> means that nobody includes the CORS header (even, ironically, podcasts about the web), and they also serve their assets over HTTP. There’s no incentive to not.</p>\n\n<p>I think the difference between web and native’s permissions model is a function of usage: we actively install apps, granting permissions as we do so (in some cases implicitly), but we skim through sites, and we expect browsers to keep us safe while we do so. It’s right in the web’s model for CORS to exist. CORS, however, has no user permissions component, so the restriction ends up being almost entirely in the hands of SysOps.</p>\n\n<h2>CORS and Mixed Content have Consequences</h2>\n<p>CORS, and its good buddy Mixed Content warnings, excellent as they are for protecting users (and they <em>are</em> excellent), bring developers, users, and publishers some unpleasant side-effects:</p>\n\n<ul><li><strong>Developers need to make proxies / directories.</strong> I have started calling this “resource laundering”, because that’s what it really is. Depending on the app in question, this ranges from “meh” to “excuse-me-wat”. The user is now really being <a href=\"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\">MITM</a>’d by the app for any HTTP resource (or potentially HTTPS, too, depending on the remote side’s config). As the app developer, you’ll probably want to offer some app-wide store or directory, so that you can validate the feed once, then offer it to all of your users. That’s going to involve a fair amount of stream parsing, validation, and caching logic. All of which equates to time, cost, and expertise.</li>\n  <li><strong>Developers have to pay the bandwidth bill.</strong> There’s an interesting side-effect of Service Workers being HTTPS: <strong>mixed content warnings</strong>. Most podcast audio files are served over HTTP. If you request the file from a page you’re going to get a warning, which is ick but understandable. But, if you want to request the file in the background with a fetch inside of a Service Worker, you’re out of luck: if there’s no client making the request the fetch will fail. This is the correct behaviour because there’s no client to put up the mixed content warning, and that wipes out the possibility of doing background sync to get mp3 files. The solution is to also take a copy of the mp3 files yourself, so you can guarantee they are served over HTTPS, but now you have to pay every time a user downloads an mp3 file.</li>\n  <li><strong>Publishers’ ads &amp; analytics get broken.</strong> If I start proxying on behalf of all my users, the publishers of that content will get – say – 1 hit from me, and then the users of my podcast won’t register their hit because they got it from my server. That would affect any business they get based on their traffic since it’s no longer being reported accurately. The more successful the app, the worse it would be for publishers.</li>\n  <li><strong>Developers have to take undue responsibility.</strong> From a personal point-of-view – and I doubt I’m the only person for whom this is true – I don’t want to take on the responsibility of proxying others’ data, because there’s nothing I can do to stop people requesting all kinds of awful things with it. I have to think super defensively about how best to protect, launder, and vet everything that passes through it, which shifts the nature of building for the web to somewhere I find genuinely uncomfortable. That’s over and above the cost and complexity, which were already dealbreakers for me.</li>\n  <li><strong>User privacy potentially takes a hit.</strong> A side effect of using an app with a proxy is that everyone’s usage habits are shared by default with the app creator, which, in this case, would be me. Now, sure, anyone could beacon that data back, and maybe I’d make the most of it on their behalf and offer recommendation services, but it seems to me that making that the default state isn’t necessarily in the user’s best interests.</li>\n</ul><p>Of course, the upside is you get to make sure every podcast’s feed is valid, and you get to serve it with HTTPS. I guess every cloud has a silver lining. It still doesn’t feel to me like the end justifies the means.</p>\n\n<h2>The Purist Answer</h2>\n\n<blockquote>\n  <p>Every site should be HTTPS and serve its publicly accessible content with the CORS header… In Realitysville (population: me, sadly), that’s not going to happen any time soon.</p>\n</blockquote>\n\n<p>Some of the people to whom I’ve spoken have given me the “right answer”, which is that every site should be HTTPS and serve their publicly accessible content with the CORS header: <code>Access-Control-Allow-Origin: *</code>. That is correct, and it would evaporate my issue overnight. In Realitysville (population: me, sadly), that’s not going to happen any time soon. So far not one podcast I’ve checked includes the CORS header and, even if it did, if it serves assets over HTTP then background sync fetches in Service Workers would fail, or if I loaded them directly there’d be a necessary but scary-looking warning to users, which isn’t the experience I would want to ship.</p>\n\n<h2>The “C’mon, it’s Okay” Answer</h2>\n\n<p>Many people I’ve spoken to don’t see writing a proxy as tragic, let alone an issue. At the pragmatic level I can see that: if you’re in the business of shipping an app, you may as well just suck it up and get on with it. But there’s something really wrong to my mind if the best solution we can muster is tantamount to “just send your HTTP traffic through me; I’ll not do anything with it, pinky promise.” Sorry, I don’t want to be that developer, and I don’t see why others should be, either.</p>\n\n<p>I also think there’s a reasonable economic argument against this objection, too: if your app is relatively successful, and its user base means you transfer in ~1TB of data, and ~10TB out every month (not an unreasonable estimate if the average podcast file weighs in at 50MB, there are four new episodes a month, your user base subscribes to 4 or 5 podcasts, and you have in the region of 10k people using your app) then your bandwidth bill would be around <strong>$920 a month</strong> on Amazon’s S3 (<a href=\"http://calculator.s3.amazonaws.com/index.html\">hit their calculator and pop in 10TB for outgoing and 1TB for incoming</a>).That’s a significant cost, and I didn’t even get to handling feeds, images, APIs, disk space, RAM, or CPU time.</p>\n\n<p>Also, as I said before, the content publisher misses out on content hits if I cache their file.</p>\n\n<h2>The “How About a Big Proxy?” Answer</h2>\n\n<p>Mozilla’s Anne van Kesteren has <a href=\"https://annevankesteren.nl/2015/03/public-internet-proxy\">suggested that browsers could perhaps ship with a proxy</a>. Other people I spoke to have also suggested this as a possible approach. This could be helpful inasmuch as it would circumvent the need for developers to ship their own proxies. That’s a win for ergonomics.</p>\n\n<p>But I think there are some issues here, too, depending on what your view of the proxy is. The proxy could act as a fallback mechanism where, should the request fail because of a lack of CORS header, it could confirm that it can get at the resource and, therefore, the lack of CORS header becomes a non-issue. What does that mean if the asset is requested over HTTPS, though? It would also be beaconed to the proxy, which seems to break the HTTPS concept that your traffic is solely between the client and the server. Now it’s the client, the server, and the proxy.</p>\n\n<p>Any proxy, however big or small, requires the user’s trust, because it is included in the traffic between the client and server. Which I guess is another way of me saying that to me it doesn’t matter if the app proxies the traffic, or another entity does; in both cases it carries the same issues.</p>\n\n<h2>The Web as an App Platform</h2>\n\n<p>People tell me they want the web to be a first class app platform; I want them to be right, but as it stands I don’t see how it can be without some progress in this area. Yes, intranets and other sites <em>are</em> protected, and that’s <em>absolutely the right thing to do</em> (please don’t read this post as me having a direct objection to CORS or Mixed Content; I don’t), but we need something more here to not simply move the issue elsewhere, and create new problems in the process.</p>\n\n<blockquote>\n  <p>I don’t want to vomit another proxy onto the web, and I don’t want anyone else to, either.</p>\n</blockquote>\n\n<p>I have no idea what the right solution is, but I also didn’t think up many of the awesome improvements the web has seen in the past few years, so while <em>I</em> might not have an answer, I really hope someone else might. Maybe the right solution is that browsers get better at detecting what is on an intranet and what is publicly available outside of the current network. I don’t know, but I believe we need <em>something</em> if we genuinely want the web to be first class app platform. I don’t want to vomit another proxy onto the web, and I don’t want anyone else to, either.</p>\n\n<p>If you have any great ideas, <a href=\"https://twitter.com/aerotwist\">let me know</a>.</p>\n\n<p class=\"thanks\"><em>Thanks to Mike West, Joel Weinberger, Adrienne Porter Felt, and Alex Russell for reviewing this post and helping me figure out where I wasn’t being clear. Thanks to Mike Mahemoff for helping me understand what running a service like this is like for real. Thanks to Paul Kinlan for not insisting I include a Corrs lyric before pushing this post live… that was a very real danger.</em></p>\n',1),(134,'Intro to WebGL with Three.js','http://davidscottlyons.com/threejs/presentations/frontporch14/#slide-0',1,0,'\n\n    \n\n    <h2>WebGL</h2>\n\n      <p>JavaScript API for rendering interactive 2D and 3D graphics<br />inside an HTML <code class=\"language-markup\">&lt;canvas&gt;</code> element.</p>\n      <div class=\"slide\">\n        <h3>Browser Support</h3>\n        <img src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/webgl-browser-support.png\" alt=\"\" /></div>\n    <h2>three.js</h2>\n      <p class=\"slide\">3D Javascript Library</p>\n      <p class=\"slide\">Renderers: WebGL, &lt;canvas&gt;, &lt;svg&gt;, CSS3D / DOM, and more</p>\n      <p class=\"slide\">Scenes, Cameras, Geometry, 3D Model Loaders, Lights, Materials,<br />Shaders, Particles, Animation, Math Utilities</p>\n    <img src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/300.jpg\" alt=\"\" class=\"spotlight\" /><pre class=\"overlay-full language-markup\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Basic Three.js App&lt;/title&gt;\n    &lt;style&gt;\n      html, body { margin: 0; padding: 0; overflow: hidden; }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script src=\"js/three.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      // Javascript will go here.\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n    <pre class=\"overlay-full language-none\">\n<code><span class=\"scene-required\"><span class=\"token keyword\">var</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">var</span> aspect <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">/</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">;</span>\n<span class=\"scene-required\"><span class=\"token keyword\">var</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> aspect<span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize<span class=\"token punctuation\">(</span> </span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild<span class=\"token punctuation\">(</span> </span>renderer<span class=\"token punctuation\">.</span>domElement <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre><p><code><span class=\"scene-object\"><span class=\"token keyword\">var</span> geometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>BoxGeometry</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> material <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshNormalMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> cube <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span> geometry<span class=\"token punctuation\">,</span> material <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add<span class=\"token punctuation\">(</span></span> cube <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\ncamera<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></code></p><code>\n</code><p><code><span class=\"render-loop\"><span class=\"token keyword\">var</span> render <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">requestAnimationFrame<span class=\"token punctuation\">(</span></span> render <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cube<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n  cube<span class=\"token punctuation\">.</span>rotation<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n  renderer<span class=\"token punctuation\">.</span><span class=\"token function\">render<span class=\"token punctuation\">(</span></span> scene<span class=\"token punctuation\">,</span> camera <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"token function\">render<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></p><code></code>\n    <h2>Scene Graph</h2>\n      <img src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/node-map.png\" alt=\"\" /><h2>Object3D</h2>\n<pre><code>var group = new THREE.Group();\nscene.add( group );\n\ngroup.add( mesh1 );\ngroup.add( mesh2 );\n\nmesh2.visible = false;\ngroup.remove( mesh2 );\n\ngroup.children // mesh1\ngroup.parent // scene</code></pre>\n    \n    <h2>Object3D Transforms</h2>\n      <div class=\"temp abs-bc\"><pre><code>mesh.position.x = 0</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>mesh.position.x = -100</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>mesh.scale.set(2,2,2)</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>mesh.rotation.y = Math.PI / 4</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>mesh.rotation.y = Math.PI * 5 / 4</code></pre></div>\n    <h2>Unit Circle</h2>\n      <p class=\"temp\"><img src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/unit-circle.png\" alt=\"\" /></p>\n      <p class=\"slide\"><img src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/unit-circle-radians.png\" alt=\"\" /></p>\n      <div class=\"slide temp abs-bc\"><pre><code>mesh.rotation.y = THREE.Math.degToRad(45);</code></pre></div>\n      \n      \n    <h2>Unit Circle</h2>\n      <p><img src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/unit-circle-trig.png\" alt=\"\" /></p>\n      <div class=\"slide temp abs-bc\">\n<pre><code>mesh.position.x = Math.cos( time );\nmesh.position.y = Math.sin( time );</code></pre></div>\n      \n    <h2>Cameras</h2>\n      <div class=\"temp abs-bc\"><pre><code>cam = new THREE.PerspectiveCamera( fov, aspect, near, far )</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>cam = new THREE.PerspectiveCamera( fov, aspect, near, far )</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>cam = new THREE.PerspectiveCamera( fov, aspect, near, far )</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>camera.fov = 15</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>camera.fov = 60</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>camera.far = 1000</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>camera.far = 3000</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>camera = new THREE.OrthographicCamera( left, right, top, bottom, near, far );</code></pre></div>\n    <h2>Camera Controls</h2>\n      <p>/three.js/examples/js/controls/OrbitControls.js</p>\n<div class=\"slide temp\"><pre><code class=\"language-markup\">&lt;script src=\"path/to/OrbitControls.js\"&gt;&lt;/script&gt;</code>\n\n<code class=\"language-javascript\">controls = new THREE.OrbitControls( camera );\n\nfunction render() {\n  requestAnimationFrame( render );\n  controls.update();\n  renderer.render( scene, camera );\n}</code></pre></div>\n\n<div class=\"slide temp\"><pre><code>controls.enablePan = false;\ncontrols.enableZoom = false;\ncontrols.enableRotate = false;\n\ncontrols.minDistance\ncontrols.maxDistance\n\ncontrols.minPolarAngle\ncontrols.maxPolarAngle</code></pre></div>\n    <img class=\"spotlight\" src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/orbit-all-the-things.jpg\" alt=\"\" /><img class=\"spotlight\" src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/geometry.png\" alt=\"\" /><h2>Geometry</h2>\n      \n      <div class=\"slide temp abs-bc\"><pre><code>var geo = new THREE.BoxGeometry( width, height, depth );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>var geo = new THREE.SphereGeometry( 60, 24, 16 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>var geo = new THREE.CylinderGeometry( ... );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>var geo = new THREE.TorusGeometry( ... );</code></pre></div>\n    <img class=\"spotlight\" src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/marble.jpg\" alt=\"\" /><h2>Materials</h2>\n      \n      <div class=\"slide temp abs-bc\"><pre><code>var material = new THREE.MeshBasicMaterial({ ... });</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>var material = new THREE.MeshLambertMaterial({ ... });</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>var material = new THREE.MeshPhongMaterial({ ... });</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>var material = new THREE.MeshNormalMaterial({ ... });</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>var material = new THREE.MeshNormalMaterial({ ... });</code></pre></div>\n    <h2>Material Properties</h2>\n      \n      <div class=\"temp abs-bc\"><pre><code>shading: THREE.SmoothShading</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>shading: THREE.FlatShading</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>shading: THREE.FlatShading // face normals</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>shading: THREE.FlatShading // face normals</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>shading: THREE.SmoothShading // vertex normals</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>color: 0xaaaaaa</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>color: 0x3794cf</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>shininess: 40</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>shininess: 80</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>wireframe: true</code></pre></div>\n      \n      <div class=\"slide temp abs-bc\"><pre><code>transparent: true, opacity: 0.5</code></pre></div>\n    <h2>Texture Mapping</h2>\n      \n      <div class=\"temp abs-bc\"><pre><code>texture = THREE.ImageUtils.loadTexture(\"color-map.jpg\");</code></pre></div>\n      <div class=\"temp slide abs-bc\"><pre><code>map: texture</code></pre></div>\n      <div class=\"temp slide abs-bc\"><pre><code>normalMap: texture</code></pre></div>\n      <div class=\"temp slide abs-bc\"><pre><code>specularMap: texture</code></pre></div>\n      <div class=\"temp slide abs-bc\"><pre><code>map: colorMap, specularMap: specMap, normalMap: normalMap</code></pre></div>\n      <div class=\"temp slide abs-bc\"><pre><code>var material = new THREE.MeshPhongMaterial({\n  color: 0xaaaaaa,\n  specular: 0x333333,\n  shininess: 15,\n  map: colorMap,\n  specularMap: specMap,\n  normalMap: normalMap\n});</code></pre></div>\n    <img class=\"spotlight\" src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/sunny-sky.jpg\" alt=\"\" /><h2>Lights</h2>\n      \n      <div class=\"temp abs-bc\"><pre><code>light = new THREE.DirectionalLight( 0xdddddd, 0.8 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light.position.set( -80, 80, 80 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light.position.x = 80;</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light.target.position = 160;</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light.position.x = -80;</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.DirectionalLight( 0xdddddd, 0.8 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.DirectionalLight( 0xb4e7f2, 0.8 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.DirectionalLight( 0xb4e7f2, 0.2 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.DirectionalLight( 0xb4e7f2, 1.5 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.DirectionalLight( 0xb4e7f2, 0.8 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.PointLight( 0xb4e7f2, 0.8 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.PointLight( 0xb4e7f2, 0.8 );</code></pre></div>\n      \n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.SpotLight( 0xb4e7f2, 0.8 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light.angle = Math.PI / 9;</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light.angle = Math.PI / 5;</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light.exponent = 10;</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light.exponent = 1;</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light.exponent = 20;</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.AmbientLight( 0x444444 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.AmbientLight( 0x000000 );</code></pre></div>\n      <div class=\"slide temp abs-bc\"><pre><code>light = new THREE.AmbientLight( 0x444444 );</code></pre></div>\n    <h2>Three Point Lighting</h2>\n      <p>Key, Fill, Rim</p>\n      <p>Key, Fill, Rim</p>\n    <h2>Model Converter</h2>\n      <p>OBJ to JSON converter python tool<br />/three.js/utils/converters/obj/convert_obj_three.py</p>\n      <p><img src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/obj-json.png\" alt=\"\" /></p>\n      <div class=\"temp abs-bc\"><pre><code class=\"language-python\">python convert_obj_three.py -i teapot.obj -o teapot.js</code></pre></div>\n    <h2>Model Loader</h2>\n<div class=\"slide temp abs-bc\"><pre><code>var loader = new THREE.JSONLoader();\n\nloader.load(\"teapot.js\", function( geometry, materials ) {\n  material = new THREE.MeshFaceMaterial( materials );\n  mesh = new THREE.Mesh( geometry, material );\n  scene.add( mesh );\n});</code></pre></div>\n    <img class=\"spotlight\" src=\"http://davidscottlyons.com/threejs/presentations/frontporch14/images/interaction.png\" alt=\"\" /><pre class=\"overlay-full language-none\"><code><span class=\"interaction1\">mouse<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> event<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">/</span> window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nmouse<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span> event<span class=\"token punctuation\">.</span>clientY <span class=\"token operator\">/</span> window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n\nraycaster <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Raycaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"interaction2\"><span class=\"token keyword\">var</span> vector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span> mouse<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> mouse<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unproject<span class=\"token punctuation\">(</span></span> camera <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"interaction3\">raycaster<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span> camera<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">,</span> vector<span class=\"token punctuation\">.</span><span class=\"token function\">sub<span class=\"token punctuation\">(</span></span> camera<span class=\"token punctuation\">.</span>position <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize<span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"interaction4\"><span class=\"token keyword\">var</span> intersects <span class=\"token operator\">=</span> raycaster<span class=\"token punctuation\">.</span><span class=\"token function\">intersectObjects<span class=\"token punctuation\">(</span></span> scene<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nINTERSECTED <span class=\"token operator\">=</span> intersects<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">;</span></span></code></pre>\n      \n      \n      \n      \n    <p class=\"deck-status\">\n      <span class=\"deck-status-current\"></span>\n      /\n      <span class=\"deck-status-total\"></span>\n    </p>\n\n    \n    \n\n    \n  ',1),(135,'The JavaScript Tutorial | JavaScript Tutorial','http://javascript.info/',1,0,'<p>HTML5 is great. jQuery is cool. Node.JS is awesome. Base them on the solid, powerful basement of pure JavaScript and you can rock the web! ;)</p>\n<h2>Learn...</h2>\n \n<ul class=\"book-folder\"><li class=\"book-level-1 book-closed book-has-children\"><span class=\"book-title\">JavaScript: from the Ground to Closures</span></li><li class=\"book-level-1 book-closed book-has-children\"><span class=\"book-title\">Document and Events</span></li><li class=\"book-level-1 book-closed book-has-children\"><span class=\"book-title\">Object Oriented Programming</span></li><li class=\"book-level-1 book-closed book-has-children\"><span class=\"book-title\">Timing</span></li><li class=\"book-level-1 book-closed book-has-children\"><span class=\"book-title\">Frames and windows</span></li><li class=\"book-level-1 book-closed book-has-children\"><span class=\"book-title\">Regular expressions in JavaScript</span></li><li class=\"book-level-1 book-closed book-has-children\"><span class=\"book-title\">Advanced and Extra stuff</span></li></ul>',1),(136,'Building Front-End Web Apps with Plain JavaScript','https://oxygen.informatik.tu-cottbus.de/webeng/JsFrontendApp/book/',1,0,'<div><div>\n<h3><em>Understanding</em> and <code>Implementing</code> Information Management Concepts and Techniques</h3>\n</div><p></p><h2 class=\"subtitle\">An incremental in-depth tutorial about building front-end web applications with plain\n   JavaScript, not using any third-party library or framework, for theory-underpinned\n   and example-based learning by doing it yourself</h2><div><p class=\"releaseinfo\">Warning: This tutorial book is a draft version, so it may still contain errors and\n   may still be incomplete in certain respects. Please report any issue to \n   G.Wagner@b-tu.de.</p></div><div><p class=\"releaseinfo\">This tutorial book is available as an open access online book (HTML) and as an\n	  e-book (PDF) via its <a class=\"link\" href=\"http://web-engineering.info/JsFrontendApp-Book\">book webpage</a>. </p></div><div><p class=\"copyright\">Copyright © 2014-2015 Gerd Wagner</p></div><div><div class=\"legalnotice\"><a></a><p>This book, along with any associated source code, is licensed under <a class=\"link\" href=\"http://www.codeproject.com/info/cpol10.aspx\">The Code Project Open License\n     (CPOL)</a>, implying that the associated code is provided \"as-is\", can be modified to create\n    derivative works, can be redistributed, and can be used in commercial applications, but the book\n    must not be distributed or republished without the author\'s consent.</p></div></div><div><p class=\"pubdate\">2015-07-13</p></div><div><div class=\"revhistory\"><table summary=\"Revision History\"><tr><th align=\"left\" valign=\"top\" colspan=\"3\"><b>Revision History</b></th></tr><tr><td align=\"left\"></td><td align=\"left\">20150701</td><td align=\"left\">gw</td></tr><tr><td align=\"left\" colspan=\"3\">Add section about CSS to the \"Foundations\" chapter, detach the \"More on JavaScript\" chapter from the \"Foundations\" chapter.</td></tr><tr><td align=\"left\"></td><td align=\"left\">20150520</td><td align=\"left\">gw</td></tr><tr><td align=\"left\" colspan=\"3\">Add chapter about enumerations.</td></tr><tr><td align=\"left\"></td><td align=\"left\">20140924</td><td align=\"left\">gw</td></tr><tr><td align=\"left\" colspan=\"3\">Incorporate feedback by Felix Lehmann.</td></tr><tr><td align=\"left\"></td><td align=\"left\">20140221</td><td align=\"left\">gw</td></tr><tr><td align=\"left\" colspan=\"3\">Incorporate feedback by Sorin Carbunaru.</td></tr><tr><td align=\"left\"></td><td align=\"left\">20140212</td><td align=\"left\">gw</td></tr><tr><td align=\"left\" colspan=\"3\">Create first version.</td></tr></table></div></div></div><hr />',1),(137,'DOM Enlightenment - Exploring the relationship between JavaScript and the modern HTML DOM','http://domenlightenment.com/',1,0,'DOM Enlightenment - Exploring the relationship between JavaScript and the modern HTML DOM<div class=\"alert\">An O\'Reilly edited version (printed, epub, mobi, pdf) of this book is now avaliable from <a href=\"http://shop.oreilly.com/product/0636920027690.do\">O\'Reilly</a> or <a href=\"http://www.amazon.com/DOM-Enlightenment-Cody-Lindley/dp/1449342841/\">Amazon</a></div>\n\n<p><strong>Warning!</strong> This is the free online version of the DOM Enlightenment book in its pre-edited/draft form.</p>\n\n\n<p>DOM Enlightenment</p>\n<p>Exploring the relationship between JavaScript and the modern HTML DOM</p>\n<p>By <a href=\"http://twitter.com/codylindley\">Cody Lindley</a> Version: 0.6.0</p>\n\n\n\n\n\n<p>I make websites. Sometimes I make music. Over the years, I’ve noticed an interesting\npattern of behavior from some musicians—often self-taught—who think of themselves\nas creative types: they display an aversion to learning any music theory. The logic, they\nsay, is that knowing the theory behind music will somehow constrain their creative\nabilities. I’ve never understood that logic (and I secretly believe that it’s a retroactive\nexcuse for a lack of discipline). To my mind, I just don’t see how any kind of knowledge\nor enlightenment could be a bad thing.</p>\n<p>Alas, I have seen the same kind of logic at work in the world of web design. There are\ndesigners who not only don’t know how to write markup and CSS, they actively refuse\nto learn. Again, they cite the fear of somehow being constrained by this knowledge (and\nagain, I believe that’s a self-justifying excuse).</p>\n<p>In the world of front-end development, that attitude is fortunately far less prevalent.\nMost web devs understand that there’s always more to learn. But even amongst developers\nwho have an encyclopediac knowledge of HTML and CSS, there is often a knowledge\ngap when it comes to the Document Object Model. That’s understandable. You\ndon’t need to understand the inner workings of the DOM if you’re using a library like\njQuery. The whole point of JavaScript libraries is to abstract away the browser’s internal\nAPI and provide a different, better API instead.</p>\n<p>Nonetheless, I think that many front-end devs have a feeling that they should know\nwhat’s going on under the hood. That’s the natural reaction of a good geek when presented\nwith a system they’re expected to work with. Now, thanks to DOM Enlightenment,\nthey can scratch that natural itch.</p>\n<p>Douglas Crockford gave us a map to understand the inner workings of the JavaScript\nlanguage in his book JavaScript: The Good Parts. Now Cody Lindley has given us the\ncorresponding map for the Document Object Model. Armed with this map, you’ll gain\nthe knowledge required to navigate the passageways and tunnels of the DOM.\nix</p>\n<p>You might not end up using this knowledge in every project. You might decide to use a\nlibrary like jQuery instead. But now it will be your decision. Instead of having to use a\nlibrary because that’s all that you know, you can choose if and when to use a library.\nThat’s a very empowering feeling. That’s what knowledge provides. That is true enlightenment.</p>\n\n<p><small>—Jeremy Keith, founder and technical director of clearleft.com, and author of\nDOM Scripting: Web Design with JavaScript and the Document Object Model</small></p>\n\n\n<p>This book is not an exhaustive reference on DOM scripting or <a href=\"http://javascriptenlightenment.com/\">JavaScript</a>. It may, however, be the most exhaustive book written about DOM scripting without the use of a library/framework. The lack of authorship around this topic is not without good reason. Most technical authors are not willing to wrangle this topic because of the differences that exist among legacy browsers and their implementations of the DOM specifications (or lack thereof).</p>\n<p>For the purpose of this book (i.e. grokking the concepts), I\'m going to sidestep the browser API mess and dying browser discrepancies in an effort to expose the modern DOM. That\'s right, I\'m going to sidestep the ugliness in an effort to focus on the here and now. After all, we have solutions like jQuery to deal with all that browser ugliness, and you should definitely be leveraging something like jQuery when dealing with deprecated browsers. </p>\n<p> While I am not promoting the idea of only going native when it comes to DOM scripting, I did write this book in part so that developers may realize that DOM libraries are not always required when scripting the DOM.  I also wrote for the lucky few who get to write JavaScript code for a single environment (i.e. one browser, mobile browsers, or HTML+CSS+JavaScript-to-native via something like PhoneGap). What you learn in this book may just make a DOM library unnecessary in ideal situations, say for example, some light DOM scripting for deployment on a Webkit mobile browser only.</p>\n\n<h2>Who should read this book</h2>\n<p> As I authored this book, I specifically had two types of developers in mind.  I assume both types already have an intermediate to advanced knowledge of JavaScript, HTML, and CSS. The first developer is someone who has a good handle on JavaScript or jQuery, but has really never taken the time to understand the purpose and value of a library like jQuery (the reason for its rhyme, if you will). Equipped with the knowledge from this book, that developer should fully be able to understand the value provided by jQuery for scripting the DOM. And not just the value, but how jQuery abstracts the DOM and where and why jQuery is filling the gaps. The second type of developer is an engineer who is tasked with scripting HTML documents that will only run in modern browsers or that will get ported to native code for multiple OS\'s and device distributions (e.g. PhoneGap) and needs to avoid the overhead (i.e. size or size v.s. use) of a library.</p>\n\n<h2>Technical intentions, allowances, &amp; limitations</h2>\n<ul><li>The content and code contained in this book was written with modern (IE9+, Firefox latest, Chrome latest, Safari latest, Opera latest) browsers in mind. It was my goal to only include concepts and code that are native to modern browsers. If I venture outside of this goal I will   bring this fact to the readers attention. I\'ve generally steered away from including anything in this book that is browser specific or implemented in a minority of the modern browsers.</li>\n	<li>I\'m not attempting in this book to dogmatically focus on a specific DOM, CSS, or HTML specification. Its not my goal here to dogmatically represent a specific specification. This would be too large of an undertaking (with little value IMO) given the number of specifications at work and the history/status of browsers correctly implementing the specifications. I have leverage and balanced in a very subjective manner the content from several specifications (<a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html\">Document Object Model (DOM) Level 3 Core Specification</a>, <a href=\"http://www.w3.org/TR/dom/\">DOM4</a>, <a href=\"http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/html.html\">Document Object Model HTML </a>, <a href=\"http://www.w3.org/TR/ElementTraversal/\">Element Traversal Specification</a>, <a href=\"http://www.w3.org/TR/selectors-api2/\">Selectors API Level 2</a>, <a href=\"http://html5.org/specs/dom-parsing.html\">DOM Parsing and Serialization</a>, <a href=\"http://dev.w3.org/html5/html-author/\">HTML 5 Reference</a>, <a href=\"http://www.w3.org/TR/html5/\">HTML 5 - A vocabulary and associated APIs for HTML and XHTML</a>, <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/\">HTML Living Standard</a>, <a href=\"http://developers.whatwg.org/\">HTML 5 - A technical specification for Web Developers</a>, <a href=\"http://dom.spec.whatwg.org/\">DOM\nLiving Standard</a>). The content for this book is based more on where the community is and less on dogmatically attempting to express a specific spec.</li>\n	<li>I\'m covering several hand  picked  topics that are not DOM specific. I\'ve included these topics in this book to help the reader build a proper understanding of the DOM in relationship to CSS and JavaScript.</li>\n	<li>I\'ve purposely left out any details as it pertains to XML or XHTML.</li>\n	<li>I\'ve purposely excluded the form and table api\'s to keep the book small. But I can see these sections being added in the future.</li>\n</ul><h2>License</h2>\n\n<p>The DOM Enlightenment HTML version is released under a <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/\">Creative Commons Attribution-Noncommercial-No Derivative Works 3.0</a> unported license.</p>\n\n<h2>Hard Copy &amp; eBook</h2>\n<p><a href=\"http://oreilly.com/\">O\'Reilly</a> will release and sell a hard copy &amp; eBook in the near future.</p>\n\n\n<p>Before you begin, it is important to understand various styles employed in this book. Please do not skip this section, because it contains important information that will aid you in the unique styles of this book.</p>\n\n<h2>This book is not like other programming books</h2>\n<p>The enlightenment series (<a href=\"http://jqueryenlightenment.com/\">jQuery Enlightenment</a> &amp; <a href=\"http://javascriptenlightenment.com/\">JavaScript Enlightenment</a>) is written in a style that favors small, isolated, immediately executable code over wordy explanations and monolithic programs. One of my favorite authors, C.S Lewis, asserts that words are the lowest form of communication that humans traffic in. I totally agree with this assertion and use it as the basis for the style of these books.  I feel that technical information is best covered with as few words as possible, in conjunction with just the right amount of executable code and commenting required to express an idea. The style of this book attempts to present a clearly defined idea with as few words as possible, backed with real code. Because of this, when you first start grokking these concepts, you should execute and examine the code, thereby forming the foundation of a mental model for the words used to describe the concepts. Additionally, the format of these books attempts to systematically break ideas down into their smallest possible form and examine each one in an isolated context. All this to say that this is not a book with lengthy explanations or in-depth coverage on broad topics. Consider yourself warned. If it helps, think of it as a cookbook, but even more terse and to the point than usual.</p>\n\n<h2>Color-coding conventions</h2>\n<p>In the code examples (example shown below), orange is used to highlight code directly relevant to the concept being discussed. Any additional code used to support the orange colored code will be green. The color gray in the code examples is reserved for comments.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n&lt;script&gt;\n\n<em>// this is a comment about a specific part of the code</em><br />var foo = <strong>\'calling out this part of the code\'</strong>;\n\n&lt;/script&gt; \n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h2>jsFiddle</h2>\n<p>The majority of code examples in this book are linked to a corresponding <a href=\"http://jsfiddle.net/\">jsFiddle</a> page, where the code can be tweaked and executed online. The jsFiddle examples have been configured to use the <a href=\"https://getfirebug.com/firebug-lite-debug.js\">Firebug lite-dev plugin</a> to ensure the reader views the console.log prevalent in this book. Before reading this book, make sure you are comfortable with the usage and purpose of <em>console.log</em>.</p>\n<p>In situations where jsFiddle caused complications with the code example, I simply chose not to link to a live example.</p>\n\n\n<p><a href=\"http://www.codylindley.com\">Cody Lindley</a> is a client-side engineer (aka front-end developer) and recovering Flash developer. He has an extensive background working professionally (11+ years) with HTML, CSS, JavaScript, Flash, and client-side performance techniques as it pertains to web development. If he is not wielding client-side code he is likely toying with interface/interaction design or authoring material and speaking at various conferences. When not sitting in front of a computer, it is a sure bet he is hanging out with his wife and kids in Boise, Idaho – training for triathlons, skiing, mountain biking, road biking, alpine climbing, reading, watching movies, or debating the rational evidence for a Christian worldview.</p>\n\n\n\n\n\n\n\n\n\n<div class=\"chapter\">\n\n\n\n<h2>1.1 The Document Object Model (aka the DOM) is a hierarchy/tree of JavaScript node\n    objects</h2>\n<p>When you write an HTML document you encapsulate HTML content inside of\n	other HTML content. By doing this you setup  a hierarchy that can be\n	expressed as a <a href=\"http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#trees\">tree</a>.\n	Often this hierarchy or encapsulation system is indicated visually by indenting\n	markup in an HTML document. The browser when loading the HTML document\n	interrupts and <a href=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#Parsing_general\">parses\n	this hierarchy to create a tree of  node  objects</a> that simulates how\n	the markup is encapsulated. </p>\n<pre class=\"noCodeLink\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;HTML&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n<em>&lt;!-- Add your content here--&gt;</em>\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The above HTML code when parsed by a browser creates a document that contains nodes structrured in a tree format (i.e. DOM). Below\n	I reveal the tree struture  from the above HTML document using Opera\'s Dragonfly DOM inspector. </p>\n<p><img src=\"http://domenlightenment.com/images/c1sec1.png\" alt=\"\" width=\"730\" height=\"297\" /></p>\n<p> On the left you see the HTML document in its tree form. And on the right you see the corresponding JavaScript object that represents the selected element on the left. For example, the selected <em>&lt;body&gt;</em> element highlighted in blue,\nis an element node and an instance of the <em>HTMLBodyElement</em>   interface.</p>\n<p>What you should take away here is that html documents get parsed by a browser and converted into a tree structure of  node objects representing  a live  document. The purpose of the DOM is to provide a programatic interface for scripting (removing, adding, replacing, eventing, modifiying)  this live  document using JavaScript. </p>\n<div class=\"notes\">\n      <h3>Notes</h3>\n      <p>The DOM originally was an application programming interface for XML documents that has been extended for use in HTML documents.</p>\n</div>\n<h2>1.2 Node object types</h2>\n<p>The most common (I\'m not highlighting all of them in the list below) types of nodes (i.e. <em>nodeType</em>/node classifications) one encounters when working with HTML documents are listed below.</p>\n<ul><li><em>DOCUMENT_NODE</em> (e.g. <em>window.document</em>)</li>\n	<li><em>ELEMENT_NODE</em> (e.g. <em>&lt;body&gt;</em>, <em>&lt;a&gt;</em>, <em>&lt;p&gt;</em>, <em>&lt;script&gt;</em>, <em>&lt;style&gt;</em>, <em>&lt;html&gt;</em>, <em>&lt;h1&gt;</em> etc...)</li>\n	<li><em>ATTRIBUTE_NODE</em> (e.g.<em> class=\"funEdges\"</em>)</li>\n	<li><em>TEXT_NODE</em> (e.g. text characters in an html document including carriage returns and white space)</li>\n	<li><em>DOCUMENT_FRAGMENT_NODE</em> (e.g. <em>document.createDocumentFragment()</em>)</li>\n	<li><em>DOCUMENT_TYPE_NODE</em> (e.g. <em>&lt;!DOCTYPE html&gt;</em>)</li>\n</ul><p> I\'ve listed the node types  above formatted (all uppercase with _ separating words)\n	exactly as the constant property is written in the JavaScript browser environment as a property of the <em>Node</em> object. These <em>Node</em> properties are constant values\n	and are used to store numeric code values which map to a specific type of\n	node object. For example in the following code example, <em>Node.ELEMENT_NODE</em> is equal to <em>1</em>.\n	And <em>1</em> is the code value used to identify element nodes.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n&lt;script&gt;\n\nconsole.log(<strong>Node.ELEMENT_NODE</strong>) <em>//logs 1, one is the numeric code value for element nodes</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>In the code below\n	I log all of the node types and there values.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n&lt;script&gt;\n\nfor(var key in Node){\n    console.log(key,\' = \'+Node[key]); \n};\n\n<em><strong>/* the above code logs to the console the following\nELEMENT_NODE  = 1\nATTRIBUTE_NODE  = 2\nTEXT_NODE  = 3\nCDATA_SECTION_NODE  = 4\nENTITY_REFERENCE_NODE  = 5\nENTITY_NODE  = 6\nPROCESSING_INSTRUCTION_NODE  = 7\nCOMMENT_NODE  = 8\nDOCUMENT_NODE  = 9\nDOCUMENT_TYPE_NODE  = 10\nDOCUMENT_FRAGMENT_NODE  = 11\nNOTATION_NODE  = 12\nDOCUMENT_POSITION_DISCONNECTED  = 1\nDOCUMENT_POSITION_PRECEDING  = 2\nDOCUMENT_POSITION_FOLLOWING  = 4\nDOCUMENT_POSITION_CONTAINS  = 8\nDOCUMENT_POSITION_CONTAINED_BY  = 16\nDOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC  = 32 */</strong></em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The previous code example gives an exhaustive list of all node types. For the purpose of this book I\'ll be discussing the shorter list of node types listed at the start of this section. These nodes  will\n	most likely be the ones you come in contact with when scripting an HTML page.</p>\n<p> In the table below I list the name given to the interface/constructor that\n	instantiates the most common node types and their corresponding <em>nodeType</em> classification by number and name. What I hope you take away from the table below is the <em>nodeType</em> value (i.e. <em>1</em>) is just a numeric classificaiton  used to describe a certain type of node constructed from a certain JavaScript interface/constructor. For example, the <em>HTMLBodyElement</em> interface reprsents a node object that has a node type of <em>1</em>, which is a classification for <em>ELEMENT_NODE</em>\'s.</p>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>The DOM specification semantically labels nodes like <em>Node</em>, <em>Element</em>, <em>Text</em>, <em>Attr</em>, and <em>HTMLAnchorElement</em> as an\n		interface, which it is, but keep in mind its also the name given to the JavaScript\n		constructor function that constructs the nodes. As you read this book I\n		will be referring to these interfaces (i.e. <em>Element</em>, <em>Text</em>, <em>Attr</em>, <em>HTMLAnchorElement</em>) as objects or constructor\n		functions while the specification refers to them as interfaces.</p>\n	<p>The <em>ATTRIBUTE_NODE</em> is not actually part of a tree but listed for historical reasons. In this book I do not provide a chapter on attribute nodes and instead discuss them in the <em>Element</em> node chapter given that attributes nodes are sub-like nodes of element nodes with no particiipation in the actual DOM tree structure. Be aware the ATTRIBUTE_NODE is being depreciated in DOM 4.</p>\n	<p>I\'ve not included detail in this book on the <em>COMMENT_NODE</em> but you should be aware that comments in an HTML document are <em>Comment</em> nodes and similar in nature to <em>Text</em> nodes.</p>\n	<p> As I discuss nodes throughout the book I will rarely  refer to a\n	specific node  using  its <em>nodeType</em> name (e.g. <em>ELEMENT_NODE</em>). This is done to be consistent with\n	verbiage used in the specifications provided by the W3C &amp; WHATWG. </p>\n</div>\n<h2>1.3 Sub-node objects inherit from the <em>Node</em> object</h2>\n<p>Each node object in a typical DOM tree inherits properties and methods from  <em>Node</em>. Depending upon the type of node in the document there are also\n	additional sub node object/interfaces that extend the <em>Node</em> object.\n	Below I detail the inheritance model implemented by browsers for the most\n	common node interfaces (&lt; indicates inherited from).</p>\n<ul><li><em>Object </em>&lt;<em> Node</em> &lt;  <em>Element</em> &lt; <em>HTMLElement</em> &lt;  (e.g. <em>HTML*Element</em>)</li>\n	<li><em>Object </em>&lt;<em> </em><em>Node</em> &lt;  <em>Attr</em> (This is deprecated in DOM 4)</li>\n	<li><em>Object </em>&lt;<em> </em><em>Node</em> &lt;  <em>CharacterData</em> &lt;  <em>Text</em></li>\n	<li><em>Object </em>&lt;<em> </em><em>Node</em> &lt;  <em>Document</em> &lt;  <em>HTMLDocument</em></li>\n	<li><em>Object </em>&lt;<em> </em><em>Node</em> &lt;  <em>DocumentFragment</em></li>\n</ul><p>Its important not only to remember that all nodes types inherit from <em>Node</em> but that the chain of inheritance can be long. For example, all <em>HTMLAnchorElement</em> nodes inherit properties and methods from <em>HTMLElement</em>, <em>Element</em>, <em>Node</em>, and <em>Object</em> objects.</p>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p><em>Node</em> is just a JavaScript constructor\n		function. And so logically <em>Node</em> inherits from <em>Object.prototype</em> just like all objects in JavaScript</p>\n</div>\n<p>To verify that all node types inherit properties &amp; methods from the <em>Node</em> object lets loop over an <em>Element</em> node object and examine its\n	properties and methods (including inherited).</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n<strong>&lt;a href=\"#\"&gt;Hi&lt;/a&gt;</strong><em> &lt;!-- this is a HTMLAnchorElement which inherits from... --&gt;</em>\n\n&lt;script&gt;\n\n<em>//get reference to element node object</em>\nvar nodeAnchor = document.querySelector(\'a\');\n<em>\n//create props array to store property keys for element node object</em>\nvar props = [];\n\n<em>//loop over element node object getting all properties &amp; methods (inherited too)</em>\nfor(var key in nodeAnchor){\n    props.push(key);   \n}\n\n<em>//log alphabetical list of properties &amp; methods </em>\nconsole.log(props.sort());\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>If you run the above code in a web browser you will see a long list of\n	properties that are available to the element node object. The properties\n	&amp; methods inherited from the <em>Node</em> object are in this list as\n	well as a great deal of other inherited properties and methods from the <em>Element</em>, <em>HTMLElement</em>, <em>HTMLAnchorElement</em>, <em>Node</em>, and <em>Object</em> object. Its not my point to examine all of these properties and methods\n	now but simply to point out that all nodes inherit a set of baseline\n	properties and methods from its constructor as well as  properties from the prototype chain.</p>\n<p>If you are more of visual learner consider the inheritance chain denoted\n	from examining the above HTML document with Opera\'s DOM inspector. </p>\n<img src=\"http://domenlightenment.com/images/c1sec3.png\" alt=\"\" width=\"714\" height=\"297\" /><p>Notice that the anchor node inherits from <em>HTMLAnchorElement</em>, <em>HTMLElement</em>, <em>Element</em>, <em>Node</em>, and <em>Object</em> all shown in the\n	list of properties highlighted with a gray background. This inheritance chain provides a great deal of shared methods and properties to  all node types.</p>\n\n<h2>1.4 Properties and methods for working nodes</h2>\n<p>Like we have been discussing all node objects (e.g <em>Element</em>, <em>Attr</em>, <em>Text</em> etc...) inherit properties and methods from a primary <em>Node</em> object. These properties and methods are the baseline values and functions\n	for manipulating, inspecting, and traversing the DOM. In addtion to the properties and methods provided by the node interface there are a great deal of other relevant properties and methods that are provided by sub node interfaces such as the <em>document</em>,  <em>HTMLElement</em>, or <em>HTML*Element</em> interface.</p>\n<p>Below I\n	list out the most common <em>Node</em> properties and methods inherited by all node objects including the relevant inherited properties  for working with nodes from sub-node interfaces.</p>\n\nNode Properties:\n<ul><li><em>childNodes</em></li>\n	<li><em>firstChild</em></li>\n	<li><em>lastChild</em></li>\n	<li><em>nextSibling</em></li>\n	<li><em>nodeName</em></li>\n	<li><em>nodeType</em></li>\n	<li><em>nodeValue</em></li>\n	<li><em>parentNode</em></li>\n	<li><em>previousSibling</em></li>\n</ul>\n Node Methods:\n	<ul><li><em>appendChild()</em></li>\n	<li><em>cloneNode()</em></li>\n	<li><em>compareDocumentPosition()</em></li>\n	<li><em>contains()</em></li>\n	<li><em>hasChildNodes()</em></li>\n	<li><em>insertBefore()</em></li>\n	<li><em>isEqualNode()</em></li>\n	<li><em>removeChild()</em></li>\n	<li><em>replaceChild()</em></li>\n</ul><p>Document Methods:</p>\n	<ul><li><em>document.createElement()</em></li>\n		<li><em>document.createTextNode()</em></li>\n	</ul><p>HTML * Element Properties:</p>\n	<ul><li><em>innerHTML</em></li>\n		<li><em>outerHTML</em></li>\n		<li><em>textContent</em></li>\n		<li><em>innerText</em></li>\n		<li><em>outerText</em></li>\n		\n		<li><em>firstElementChild</em></li>\n		<li><em>lastElementChild</em></li>\n		<li><em>nextElementChild</em></li>\n		<li><em>previousElementChild</em></li>\n		<li><em>children</em></li>\n	</ul><p>HTML element Methods:</p>\n	<ul><li><em>insertAdjacentHTML()</em></li>\n	</ul><h2>1.5 Identifying the type and name of a node</h2>\n<p>Every node has a <em>nodeType</em> and <em>nodeName</em> property that\n	is inherited from <em>Node</em>. For example <em>Text</em> nodes have a <em>nodeType</em> code of <em>3</em> and <em>nodeName</em> value of <em>\'#text\'</em>. As\n	previously mentioned the numeric value <em>3</em> is a numeric code representing the type\n	of underlying object the node represents (i.e. <em>Node.TEXT_NODE === 3</em>). </p>\n<p>\n	Below I detail the values returned for <em>nodeType</em> and <em>nodeName</em> for the node objects discussed in this book. It makes sense  to simply memorize these numeric code\'s for the more common nodes given that we are only dealing with 5 numeric codes.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;a href=\"#\"&gt;Hi&lt;/a&gt;\n\n&lt;script&gt;\n\n<em>//This is DOCUMENT_TYPE_NODE or nodeType 10 because Node.DOCUMENT_TYPE_NODE === 10</em>\nconsole.log(\n	<strong>document.doctype.nodeName</strong>, <em>//logs \'html\' also try document.doctype to get &lt;!DOCTYPE html&gt;</em>\n	<strong>document.doctype.nodeType</strong> <em>//logs 10 which maps to DOCUMENT_TYPE_NODE</em>\n);<em></em>\n<em>\n//This is DOCUMENT_NODE or nodeType 9 because Node.DOCUMENT_NODE === 9</em>\nconsole.log(\n	<strong>document.nodeName</strong>, <em>//logs \'#document\'</em>\n	<strong>document.nodeType</strong><em> //logs 9 which maps to DOCUMENT_NODE</em>\n);\n\n<em>//This is DOCUMENT_FRAGMENT_NODE or nodeType 11 because Node.DOCUMENT_FRAGMENT_NODE === 11</em>\nconsole.log(\n	<strong>document.createDocumentFragment().nodeName</strong>, <em>//logs \'#document-fragment\'</em>\n	<strong>document.createDocumentFragment().nodeType</strong> <em>//logs 11 which maps to DOCUMENT_FRAGMENT_NODE</em>\n);\n\n<em>//This is ELEMENT_NODE or nodeType 1 because Node. ELEMENT_NODE === 1</em>\nconsole.log(\n	<strong>document.querySelector(\'a\').nodeName</strong>, <em>//logs \'A\'</em>\n	<strong>document.querySelector(\'a\').nodeType</strong> <em>//logs 1 which maps to ELEMENT_NODE</em>\n);<em></em>\n\n<em>//This is TEXT_NODE or nodeType 3 because Node.TEXT_NODE === 3</em>\nconsole.log(\n	<strong>document.querySelector(\'a\').firstChild.nodeName</strong>, <em>//logs \'#text\'</em>\n	<strong>document.querySelector(\'a\').firstChild.nodeType</strong> <em>//logs 3 which maps to TEXT_NODE</em>\n);<em></em><em></em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>If its not obvious the fastest way to determine if a node is of a\n	certain type is too simply check its <em>nodeType</em> property. Below we\n	check to see if the anchor element has a node number of 1. If it does than\n	we can conclude that its an <em>Element</em> node because <em>Node.ELEMENT_NODE\n	=== 1</em>.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;a href=\"#\"&gt;Hi&lt;/a&gt;\n\n&lt;script&gt;\n\n<em>//is &lt;a&gt; a ELEMENT_NODE?</em>\nconsole.log(document.querySelector(\'a\').<strong>nodeType</strong> === 1); <em>//logs true, &lt;a&gt; is an Element node</em>\n\n<em>//or use Node.ELEMENT_NODE which is a property containg the numerice value of 1</em>\nconsole.log(document.querySelector(\'a\').<strong>nodeType</strong> === Node.ELEMENT_NODE); <em>//logs true, &lt;a&gt; is an Element node</em>\n\n&lt;/script&gt;\n&lt;/body&gt; \n&lt;/html&gt;\n</pre>\n<p>Determining the type of node that you might be scripting becomes very\n	handy so that you might know which properties and methods are available to\n	script the node.</p>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>The values returned by the <em>nodeName</em> property vary according\n		to the node type. Have a look at the <a href=\"http://www.w3.org/TR/dom/#dom-node-nodename\">DOM 4 specification</a> provided  for the details.</p>\n</div>\n<h2>1.6 Getting a nodes value</h2>\n<p>The <em>nodeValue</em> property returns <em>null</em> for most of the node types (except <em>Text</em>, and <em>Comment</em>). It\'s use is centered around extracting actual text strings from <em>Text</em> and <em>Comment</em> nodes. In the code below I demonstrate its use on all the nodes discussed in this book</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;a href=\"#\"&gt;Hi&lt;/a&gt;\n\n&lt;script&gt;\n\n<em>//logs null for DOCUMENT_TYPE_NODE, DOCUMENT_NODE, DOCUMENT_FRAGMENT_NODE, ELEMENT_NODE</em> <em>below</em>\nconsole.log(<strong>document.doctype.nodeValue</strong>);<em></em>\nconsole.log(<strong>document.nodeValue</strong><em></em>);\nconsole.log(<strong>document.createDocumentFragment().nodeValue</strong><em></em>);<em></em>\nconsole.log(<strong>document.querySelector(\'a\').nodeVale</strong><em></em>);\n\n<em>//logs string of text</em>\nconsole.log(<strong>document.querySelector(\'a\').firstChild.nodeValue</strong>);<em></em><em></em> <em>//logs \'Hi\'</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p><em>Text</em> or <em>Comment</em> node values can be set by providing new strings values for the <em>nodeValue</em> property(i.e. <em>document.body.firstElementChild.nodeValue = \'hi\'</em>).</p>\n</div>\n<h2>1.7 Creating element and text nodes using JavaScript  methods</h2>\n<p>When a browser parses an HTML document it constructs the nodes and tree\n	based on the contents of the HTML file. The browser deals with the creation of nodes  for the intial loading of the HTML document. However its possible to create your own nodes using JavaScript. The following two methods allow us to programatically create <em>Element</em> and <em>Text</em> nodes using JavaScript. </p>\n<ul><li><em>createElement()</em></li>\n	<li><em>createTextNode()</em></li>\n</ul><p>Other methods are avaliable but are not commonly used (e.g. <em>createAttribute()</em> and <em>createComment()</em>) . In the code below I show how simple it is to create element and text nodes. </p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n&lt;script&gt;\n\nvar elementNode = <strong>document.createElement(\'div\')</strong>;\nconsole.log(elementNode, elementNode.nodeType); <em>//log &lt;div&gt; 1, and 1 indicates an element node</em>\n\nvar textNode = <strong>document.createTextNode(\'Hi\')</strong>;\nconsole.log(textNode, textNode.nodeType); <em>//logs Text {} 3, and 3 indicates a text node</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>The <em>createElement()</em> method accepts one parameter which is a\n		string specifying the element to be created. The string is the same\n		string that is returned from the <em>tagName</em> property of an <em>Element</em> object. </p>\n	<p>The <em>createAttribute()</em> method is depricated and should not be used for creating\n		attribute nodes. Instead developers typically use <em>getAttribute()</em>, <em>setAttribute()</em>, and <em>removeAttribute()</em> methods. I will\n		discus this in more detail in the <em>Element</em> node chapter.</p>\n	<p> The <em>createDocumentFragment()</em> will be discussed in the chapter\n		covering this method.</p>\n	<p> You should be aware that a <em>createComment()</em> method is\n		available for creating comment nodes. Its not discussed in this book but\n		is very much available to a developer who finds its usage valuable. </p>\n</div>\n<h2>1.8 Creating and adding element and text nodes to the DOM using JavaScript strings</h2>\n<p>The <em>innerHTML</em>, <em>outerHTML</em>, <em>textContent</em> and <em>insertAdjacentHTML()</em> properties and methods provide the\n	functionality to create and add nodes to the DOM using JavaScript strings. </p>\n<p> In the code below we are using the <em>innerHTML</em>, <em>outerHTML</em>,\n	and <em>textContent</em> properties to create nodes from JavaScript\n	strings that are then immediately added to the DOM.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;div id=\"A\"&gt;&lt;/div&gt;\n&lt;span id=\"B\"&gt;&lt;/span&gt;\n&lt;div id=\"C\"&gt;&lt;/div&gt;\n&lt;div id=\"D\"&gt;&lt;/div&gt;\n&lt;div id=\"E\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n\n<em>//create a strong element and text node and add it to the DOM</em>\ndocument.getElementById(\'A\').<strong>innerHTML</strong> = \'&lt;strong&gt;Hi&lt;/strong&gt;\'; \n\n<em>//create a div element and text node to replace &lt;span id=\"B\"&gt;&lt;/div&gt; (notice span#B is replaced)</em>\ndocument.getElementById(\'B\').<strong>outerHTML</strong> = \'&lt;div id=\"B\" class=\"new\"&gt;Whats Shaking&lt;/div&gt;\'\n\n<em>//create a text node and update the div#C with the text node</em>\ndocument.getElementById(\'C\').<strong>textContent</strong> = \'dude\';\n\n\n<em>//NON standard extensions below i.e. innerText &amp; outerText</em>\n\n<em>//create a text node and update the div#D with the text node</em>\ndocument.getElementById(\'D\').<strong>innerText</strong> = \'Keep it\';\n\n<em>//create a text node and replace the div#E with the text node (notice div#E is gone)</em><br />document.getElementById(\'E\').<strong>outerText</strong> = \'real!\';\n\nconsole.log(document.body.innerHTML);\n<em>/* logs\n&lt;div id=\"A\"&gt;&lt;strong&gt;Hi&lt;/strong&gt;&lt;/div&gt;\n&lt;div id=\"B\" class=\"new\"&gt;Whats Shaking&lt;/div&gt;\n&lt;span id=\"C\"&gt;dude&lt;/span&gt;\n&lt;div id=\"D\"&gt;Keep it&lt;/div&gt;\nreal!\n*/</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The <em>insertAdjacentHTML()</em> method which only works on <em>Element</em> nodes is a good deal more precise than the previously mentioned methods<em></em>.\n	Using this method its possible to insert nodes before the beginning tag,\n	after the beginning tag, before the end tag, and after the end tag. Below\n	I construct a sentence using the <em>insertAdjacentHTML()</em> method. </p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;&lt;i id=\"elm\"&gt;how&lt;/i&gt;\n\n&lt;script&gt;\n\nvar elm = document.getElementById(\'elm\');\n\nelm.insertAdjacentHTML(\'beforebegin\', \'&lt;span&gt;Hey-&lt;/span&gt;\');\nelm.insertAdjacentHTML(\'afterbegin\', \'&lt;span&gt;dude-&lt;/span&gt;\'); \nelm.insertAdjacentHTML(\'beforeend\', \'&lt;span&gt;-are&lt;/span&gt;\'); \nelm.insertAdjacentHTML(\'afterend\', \'&lt;span&gt;-you?&lt;/span&gt;\');  \n\nconsole.log(document.body.innerHTML);\n<em>/* logs\n&lt;span&gt;Hey-&lt;/span&gt;&lt;i id=\"A\"&gt;&lt;span&gt;dude-&lt;/span&gt;how&lt;span&gt;-are&lt;/span&gt;&lt;/i&gt;&lt;span&gt;-you?&lt;/span&gt;\n*/</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>The <em>innerHTML</em> property will convert html elements found in\n		the string to actual DOM nodes  while the <em>textContent</em> can only be used to construct text nodes. If you\n		pass <em>textContent</em> a string containing html elements it will\n		simply spit it out as text.</p>\n	<p> <em>document.write()</em> can also be used to simultaneously create\n		and add nodes to the DOM. However its typically not used anymore unless\n		its usage is required to accomplish 3rd party scripting tasks. Basically\n		the <em>write()</em> method will output the values passed to it into\n		the page during page loading/parsing. You should be aware that using the <em>write()</em> method will stall/block the parsing of the html\n		document being loaded.</p>\n	<p><em>innerHTML</em> invokes a heavy &amp; expensive HTML parser where as text node generation is trivial thus use the innerHTML &amp; friends sparingly</p>\n	<p> The <em>insertAdjacentHTML</em> options \"beforebegin\" and \"afterend\"\n		will only work if the node is in the DOM tree and has a parent\n		element. </p>\n	<p> Support for <em>outerHTML</em> was not available natively in\n		Firefox until version 11. A <a href=\"https://gist.github.com/1044128\">polyfill</a> is avaliable.</p>\n	<p><em>textContent</em> gets the content of all elements, including <em>&lt;script&gt;</em> and <em>&lt;style&gt;</em> elements, <em>innerText</em> does not</p>\n	<p><em>innerText</em> is  aware of style and will not return the text of hidden elements, whereas <em>textContent</em> will</p>\n	<p>Avaliable to all modern browser except Firefox is <em>insertAdjacentElement()</em> and <em>insertAdjacentText()</em></p>\n</div>\n<h2>1.9 Extracting parts of the DOM tree as JavaScript strings </h2>\n<p>The same exact properties (<em>innerHTML</em>, <em>outerHTML</em>, <em>textContent</em>)\n	that we use to create and add nodes to the DOM can also be used to extract\n	parts of the DOM (or really the entire DOM) as a JavaScript string. In the code example below I use these properties to return a string value containing text and html values from the HTML document.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;div id=\"A\"&gt;&lt;i&gt;Hi&lt;/i&gt;&lt;/div&gt;\n&lt;div id=\"B\"&gt;Dude&lt;strong&gt; !&lt;/strong&gt;&lt;/div&gt;\n\n&lt;script&gt;\n\nconsole.log(document.getElementById(\'A\').<strong>innerHTML</strong>); <em>//logs \'&lt;i&gt;Hi&lt;/i&gt;\'</em></pre><p>console.log(document.getElementById(\'A\').<strong>outerHTML</strong>); <em>//logs &lt;div id=\"A\"&gt;Hi&lt;/div&gt;</em>\n\n<em>//notice that all text is returned even if its in child element nodes (i.e. &lt;strong&gt; !&lt;/strong&gt;) </em>\nconsole.log(document.getElementById(\'B\').<strong>textContent</strong>); <em>//logs \'Dude !\'</em>\n\n<em>//NON standard extensions below i.e. innerText &amp; outerText</em>\n\nconsole.log(document.getElementById(\'B\').<strong>innerText</strong>);<em> //logs \'Dude !\'</em></p><p>console.log(document.getElementById(\'B\').<strong>outerText</strong>); <em>//logs \'Dude !\'​</em>​\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</p>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>The <em>textContent</em>, <em>innerText</em>, <em>outerText</em> property when being read will return all of\n		the text nodes contained within the selected node. So for example (not a good idea in practice), <em>document.body.textContent</em> will get all the text nodes contained in the body element not just the\n		first text node.</p>\n</div>\n<h2>1.10 Adding  node objects to the DOM using <em>appendChild()</em>&amp; <em>insertBefore() </em></h2>\n<p>The <em>appendChild()</em> and <em>insertBefore()</em> <em>Node</em> methods allow us to insert JavaScript node objects into the DOM tree. The <em>appendChild()</em> method will append a node(s) to the end of the\n	child node(s) of the node the method is called on. If there are no\n	child node(s) then the node being appended is appended as the first\n	child.  For example in the code below we are creating a element node\n	(<em>&lt;strong&gt;</em>) and text node (<em>Dude</em>). Then  the <em>&lt;p&gt;</em> is selected from the DOM and  our <em>&lt;strong&gt;</em> element is appended using <em>appendChild()</em>.\n	Notice that the <em>&lt;strong&gt;</em> element is encapsulated inside of\n	the <em>&lt;p&gt;</em> element and added as the last child node. Next the <em>&lt;strong&gt;</em> element is selected and the text <em>\'Dude\'</em> is appended\n	to the <em>&lt;strong&gt;</em>  element.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;p&gt;Hi&lt;/p&gt;\n\n&lt;script&gt;\n\n<em>//create a blink element node and text node</em>\nvar elementNode = document.createElement(\'strong\');\nvar textNode = document.createTextNode(\' Dude\');\n\n<em>//append these nodes to the DOM</em>\ndocument.querySelector(\'p\').<strong>appendChild</strong>(elementNode);\ndocument.querySelector(\'strong\').<strong>appendChild</strong>(textNode);\n\n<em>//log\'s &lt;p&gt;Hi&lt;strong&gt; Dude&lt;/strong&gt;&lt;/p&gt;</em>\nconsole.log(document.body.innerHTML);\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>When it becomes necessary to control the location of insertion beyond\n	appending nodes to the end of a child list of nodes we can use <em>insertBefore()</em>.\n	In the code below I am inserting the <em>&lt;li&gt;</em> element before\n	the first child node of the <em>&lt;ul&gt;</em> element. </p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;2&lt;/li&gt;\n    &lt;li&gt;3&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n\n<em>//create a text node and li element node and append the text to the li</em>\nvar text1 = document.createTextNode(\'1\');\nvar li = document.createElement(\'li\');\nli.appendChild(text1);\n\n<em>//select the ul in the document</em>\nvar ul = document.querySelector(\'ul\');\n\n<em>/* \nadd the li element we created above to the DOM, notice I call on &lt;ul&gt; and pass reference to &lt;li&gt;2&lt;/li&gt; using ul.firstChild \n*/</em>\nul.<strong>insertBefore</strong>(li,ul.firstChild);\n\nconsole.log(document.body.innerHTML);\n<em>/*logs\n&lt;ul&gt;\n&lt;li&gt;1&lt;/li&gt;\n&lt;li&gt;2&lt;/li&gt;\n&lt;li&gt;3&lt;/li&gt;\n&lt;/ul&gt;\n*/</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>The <em>insertBefore()</em> requires two parameters, the node to be inserted and the reference node in the document you would like the node inserted before.</p>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>If you do not pass the <em>insertBefore()</em> method a second\n		parameter then it functions just like <em>appendChild()</em>. </p>\n	<p>We have <a href=\"http://www.w3.org/TR/dom/#mutation-methods\">more methods</a> (e.g. <em>prepend()</em>, <em>append()</em>, <em>before()</em>, <em>after()</em>) to look forward too in DOM 4.</p>\n</div>\n<h2>1.11 Removing and replacing nodes using <em>removeChild()</em> and <em>replaceChild()</em></h2>\n<p>Removing a node from the DOM is a bit of a multi-step process. First you\n	have to select the node you want to remove. Then you need to gain access\n	to its parent element typically using the <em>parentNode</em> property. Its on the\n	parent node that you invoke the <em>removeChild()</em> method passing it\n	the reference to the node to be removed. Below I demonstrate its use on an\n	element node and text node. </p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;div id=\"A\"&gt;Hi&lt;/div&gt;\n&lt;div id=\"B\"&gt;Dude&lt;/div&gt;\n\n&lt;script&gt;\n\n<em>//remove element node</em>\nvar divA = document.getElementById(\'A\');\ndivA.parentNode.<strong>removeChild</strong>(divA);\n\n<em>//remove text node</em>\nvar divB = document.getElementById(\'B\').firstChild;\ndivB.parentNode.<strong>removeChild</strong>(divB);\n\n<em>//log the new DOM updates, which should only show the remaining empty div#B</em>\nconsole.log(document.body.innerHTML);\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>Replacing an element or text node is not unlike removing one. In the code\n	below I use the same html structure used in the previous code example\n	except this time I use <em>replaceChild()</em> to update the nodes\n	instead of removing them.</p>\n    \n    <pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;div id=\"A\"&gt;Hi&lt;/div&gt;\n&lt;div id=\"B\"&gt;Dude&lt;/div&gt;\n\n&lt;script&gt;\n\n<em>//replace element node</em>\nvar divA = document.getElementById(\'A\');\nvar newSpan = document.createElement(\'span\');\nnewSpan.textContent = \'Howdy\';\ndivA.parentNode.<strong>replaceChild</strong>(newSpan,divA);\n\n<em>//replace text node</em>\nvar divB = document.getElementById(\'B\').firstChild;\nvar newText = document.createTextNode(\'buddy\');\ndivB.parentNode.<strong>replaceChild</strong>(newText, divB);\n\n<em>//log the new DOM updates,</em> \nconsole.log(document.body.innerHTML);\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>Depending upon what you are removing or replacing simply providing the <em> innerHTML</em>, <em>outerHTML</em>, and <em>textContent</em> properties with an empty string might be easier and faster. <a href=\"http://javascript.crockford.com/memory/leak.html\">Careful memory leaks in brwoser might get you however</a>.</p>\n	<p> Both <em>replaceChild()</em> and <em>removeChild()</em> return the\n		replaced or remove node. Basically its not gone just because you\n		replace it or remove. All this does is takes it out of the current live document. You still have a reference to it in memory.</p>\n	<p>We have <a href=\"http://www.w3.org/TR/dom/#mutation-methods\">more methods</a> (e.g.<em>replace()</em>, <em>remove()</em>) to look forward too in DOM 4.</p>\n</div>\n<h2>1.12 Cloning nodes using <em>cloneNode()</em></h2>\n<p>Using the <em>cloneNode()</em> method its possible to duplicate a single\n	node or a node and all its children nodes. </p>\n<p> In the code below I clone only the <em>&lt;ul&gt;</em> (i.e. <em>HTMLUListElement)</em> which once\n	cloned can be treated like any node reference.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;Hi&lt;/li&gt;\n  &lt;li&gt;there&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n\nvar cloneUL = document.querySelector(\'ul\').<strong>cloneNode</strong>();\n\nconsole.log(cloneUL.constructor); <em>//logs HTMLUListElement()</em>\nconsole.log(cloneUL.innerHTML); <em>//logs (an empty string) as only the ul was cloned</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>To clone a node and all of its children nodes you pass the <em>cloneNode()</em> method a parameter of of <em>true</em>. Below I use the <em>cloneNode()</em> method again but this time we clone all of the child nodes as well.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;Hi&lt;/li&gt;\n  &lt;li&gt;there&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n\nvar cloneUL = document.querySelector(\'ul\').cloneNode(<strong>true</strong>);\n\nconsole.log(cloneUL.constructor); <em>//logs HTMLUListElement()</em>\nconsole.log(cloneUL.innerHTML); <em>//logs &lt;li&gt;Hi&lt;/li&gt;&lt;li&gt;there&lt;/li&gt;</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>When cloning an <em>Element</em> node all attributes and values are\n		also cloned. In fact, only attributes are copied! Everything else you\n		can add (e.g. event handlers) to a DOM node is lost when cloning.</p>\n	<p> You might think that cloning a node and its children using <em> cloneNode(true)</em> would return a <em>NodeList</em> but it in fact\n		does not.</p>\n	<p><em>cloneNode()</em> may lead to duplicate element IDs in a document</p>\n</div>\n<h2>1.13 Grokking node collections (i.e. <em>Nodelist</em> &amp; <em>HTMLcollection</em>)</h2>\n<p>When selecting groups of nodes from a tree (cover in chaper 3) or accessing pre-defined sets of nodes, the nodes are either placed in a <a href=\"http://www.w3.org/TR/dom/#nodelist\"><em>NodeList</em></a> (e.g. <em>document.querySelectorAll(\'*\')</em>) or <a href=\"http://www.w3.org/TR/dom/#htmlcollection\"><em>HTMLCollection</em></a> (e.g. <em>document.scripts</em>). These array like (i.e. not a real <em>Array</em>) object collections that have the following characteristics.</p>\n<ul><li>A collection can either be live or static. Meaning that the nodes contained in the collection are either literally part of the live document or a snapshot of the live document.</li>\n	<li>By default nodes are sorted inside of the collection by tree order. Meaning the order matches the liner path from tree trunk to branches.</li>\n	<li>The collections have a <em>length</em> property that reflects the number of elements in the list</li>\n</ul><h2>1.14 Gettting a list/collection of all immediate child nodes</h2>\n<p>Using the <em>childNodes</em> property produces an array like list (i.e. <a href=\"https://developer.mozilla.org/En/DOM/NodeList\">NodeList</a>) of the immediate child nodes. Below I select the <em>&lt;ul&gt;</em> element which I then use to\n	create a list of all of the immediate child nodes contained inside of the <em>&lt;ul&gt;</em>.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;Hi&lt;/li&gt;\n  &lt;li&gt;there&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n\nvar ulElementChildNodes = document.querySelector(\'ul\').<strong>childNodes</strong>;\n\nconsole.log(ulElementChildNodes); <em>//logs an array like list of all nodes inside of the ul</em>\n\n<em>/*Call forEach as if its a method of NodeLists so we can loop over the NodeList. Done because NodeLists are array like, but do not directly inherit from Array*/</em>\nArray.prototype.forEach.call(ulElementChildNodes,function(item){ \n   console.log(item); //logs each item in the array\n}); \n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p> The <em>NodeList</em> returned by <em>childNodes</em> only contains\n		immediate child nodes</p>\n	<p> Be aware <em>childNodes</em> contains not only <em>Element</em> nodes but also all other node types (e.g. <em>Text</em> and <em> Comment</em> nodes)</p>\n	<p><em>[].forEach</em> was implemented in ECMAScript 5th edtion</p>\n</div>\n\n<h2>1.15 Convert a <em>NodeList</em> or <em>HTMLCollection</em> to JavaScript <em>Array</em></h2>\n<p>Node lists  and html collections  are array like but not a true JavaScript array which inherits array methods. In the code below we programtically confirm this using <em>isArray()</em>.</p>\n\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;a href=\"#\"&gt;&lt;/a&gt;\n\n&lt;script&gt;\n\nconsole.log(Array.<strong>isArray(document.links)</strong>); <em>//returns false, its an HTMLCollection not an Array</em>\nconsole.log(Array.<strong>isArray(document.querySelectorAll(\'a\'))</strong>); <em>//returns false, its an NodeList not an Array</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<div class=\"notes\">\n      <h3>Notes</h3>\n      <p><em>Array.isArray</em> was implemented in ECMAScript 5th edtion or ES5</p>\n</div>\n<p>Converting a node list and html collection list to a true JavaScript array can provide a good deal of advantages. For one it gives us the ability to create a snapshot of the list that is not tied to the live DOM considering that <em>NodeList</em> and <em>HTMLCollection</em> are <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#td-live\">live</a> lists. Secondly, converting a list to a JavaScript array gives access to the methods provided by the <em>Array</em> object (e.g. <em>forEach</em>, <em>pop</em>, <em>map</em>, <em>reduce</em> etc...). </p>\n<p>To convert an array like list to a true JavaScript array pass the array-like list to <em>call()</em> or <em>apply()</em>, in which the <em>call()</em> or <em>apply()</em> is calling a method that returns an un-altered true JavaScript array. In the code below I use the <em>.slice()</em> method, which doesn\'t really slice anything I am just using it to convert the list to a JavaScript <em>Array</em> due to the fact the <em>slice()</em> returns an array.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;a href=\"#\"&gt;&lt;/a&gt;\n\n&lt;script&gt;\n\nconsole.log(Array.isArray(<strong>Array.prototype.slice.call(document.links)</strong>)); <em>//returns true</em>\nconsole.log(Array.isArray(<strong>Array.prototype.slice.call(document.querySelectorAll(\'a\'))</strong>)); <em>//returns true</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>In ECMAScript 6th edtion we have<em> Array.from</em> to look forward to which converts a single argument that is an array-like object or list (eg. <em>arguments</em>, <em>NodeList</em>, <em>DOMTokenList</em> (used by <em>classList</em>), <em>NamedNodeMap</em> (used by <em>attributes</em> property)) into a <em>new Array()</em> and returns it</p>\n</div>\n\n<h2>1.16 Traversing nodes in the DOM</h2>\n<p> From a node reference (i.e. <em>document.querySelector(\'ul\')</em>) its possible to get a different node reference by traversing the DOM using the following properties:</p>\n<ul><li><em>parentNode</em></li>\n	<li><em>firstChild</em></li>\n	<li><em>lastChild</em></li>\n	<li><em>nextSibling</em></li>\n	<li><em>previousSibling</em></li>\n</ul><p>In the code example below we examine the <em>Node</em> properties\n	providing DOM traversal functionality.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;&lt;ul&gt;&lt;!-- comment --&gt;\n&lt;li id=\"A\"&gt;&lt;/li&gt;\n&lt;li id=\"B\"&gt;&lt;/li&gt;\n&lt;!-- comment --&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n\n<em>//cache selection of the ul</em>\nvar ul = document.querySelector(\'ul\');\n\n<em>//What is the parentNode of the ul?</em>\nconsole.log(ul.<strong>parentNode</strong>.nodeName); <em>//logs body</em><em></em>\n\n<em>//What is the first child of the ul?</em>\nconsole.log(ul.<strong>firstChild</strong>.nodeName); <em>//logs comment</em>\n\n<em>//What is the last child of the ul?</em>\nconsole.log(ul.<strong>lastChild</strong>.nodeName); <em>//logs text not comment, because there is a line break</em>\n\n<em>//What is the nextSibling of the first li?</em>\nconsole.log(ul.querySelector(\'#A\').<strong>nextSibling</strong>.nodeName); <em>//logs text</em>\n\n<em>//What is the previousSibling of the last li?</em>\nconsole.log(ul.querySelector(\'#B\').<strong>previousSibling</strong>.nodeName); <em>//logs text</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>If you have been around the DOM much then it should be no surprise that\n	traversing the DOM includes not just traversing element nodes but also\n	text and comment nodes. I believe the last code example makes this clear, and this is not exactly ideal.  Using the\n	following properties we can traverse the DOM ignoring text and comment\n	nodes. </p>\n<ul><li><em>firstElementChild</em></li>\n	<li><em>lastElementChild</em></li>\n	<li><em>nextElementChild</em></li>\n	<li><em>previousElementChild</em></li>\n	<li><em>children</em></li>\n</ul><div class=\"notes\">\n	<h3>Notes</h3>\n	<p>The <em>childElementCount</em> is not mentioned but you should be aware of its avaliablity for calculating the number of child elements a node contains. </p>\n</div>\n<p>Examine our code example again using only element traversing methods.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;&lt;ul&gt;&lt;!-- comment --&gt;\n&lt;li id=\"A\"&gt;&lt;/li&gt;\n&lt;li id=\"B\"&gt;&lt;/li&gt;\n&lt;!-- comment --&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n\n<em>//cache selection of the ul</em>\nvar ul = document.querySelector(\'ul\');\n\n<em>//What is the first child of the ul?</em>\nconsole.log(ul.<strong>firstElementChild</strong>.nodeName); <em>//logs li</em>\n\n<em>//What is the last child of the ul?</em>\nconsole.log(ul.<strong>lastElementChild</strong>.nodeName); <em>//logs li</em>\n\n<em>//What is the nextSibling of the first li?</em>\nconsole.log(ul.querySelector(\'#A\').<strong>nextElementSibling</strong>.nodeName); <em>//logs li</em>\n\n<em>//What is the previousSibling of the last li?</em>\nconsole.log(ul.querySelector(\'#B\').<strong>previousElementSibling</strong>.nodeName); <em>//logs li</em>\n\n<em>//What are the element only child nodes of the ul? </em>\nconsole.log(ul.<strong>children</strong>); <em></em><em>//HTMLCollection, all child nodes including text nodes</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h2>1.17 Verify a node position in the DOM tree with <em>contains()</em> &amp; <em>compareDocumentPosition()</em></h2>\n<p>Its possible to know  if a node is contained inside of another node by\n	using the <em>contains()</em> <em>Node</em> method. In the code below I\n	ask if <em>&lt;body&gt;</em> is contained inside of <em>&lt;html lang=\"en\"&gt;</em>.</p>\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;script&gt;\n\n<em>// is &lt;body&gt; inside &lt;html lang=\"en\"&gt; ?</em>\nvar inside = document.querySelector(\'html\').<strong>contains</strong>(document.querySelector(\'body\'));\n\nconsole.log(inside); <em>//logs true</em>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>If you need more robust information about the position of a node in the\n	DOM tree in regards to the nodes around it you can use the <em>compareDocumentPosition()</em> <em>Node</em> method. Basically this method gives you the ability to\n	request information about a selected node relative to the node \n	passed in. The information that you get back is a number that corresponds\n	to the following information.</p>\n<table class=\"table table-bordered\" border=\"0\"><thead><tr><th>number code returned from <em>compareDocumentPosition()</em>: </th>\n			<th>number code info: </th>\n		</tr></thead><tbody><tr><td>0</td>\n			<td> Elements are identical.</td>\n		</tr><tr><td>1</td>\n			<td> DOCUMENT_POSITION_DISCONNECTED<br />Set when selected node and passed in node are not in the same\n				document.</td>\n		</tr><tr><td> 2</td>\n			<td>DOCUMENT_POSITION_PRECEDING<br />Set when passed in node is preceding selected node.</td>\n		</tr><tr><td>3</td>\n			<td>DOCUMENT_POSITION_FOLLOWING<br />Set when passed in node is following selected node.</td>\n		</tr><tr><td>8</td>\n			<td> DOCUMENT_POSITION_CONTAINS<br />Set when passed in node is an ancestor of selected node.</td>\n		</tr><tr><td> 16, 10</td>\n			<td>DOCUMENT_POSITION_CONTAINED_BY (16, 10 in hexadecimal)<br />Set when passed in node is a descendant of selected node.</td>\n		</tr></tbody></table><div class=\"notes\">\n	<h3>Notes</h3>\n	<p><em>contains()</em> will return <em>true</em> if the node selected and\n		node passed in are identical.</p>\n	<p> <em>compareDocumentPosition()</em> can be rather confusing because\n		its possible for a node to have more than one type of relationship with\n		another node. For example when a node both contains (16) and precedes\n		(4) the returned value from <em>compareDocumentPosition()</em> will be\n		20.</p>\n</div>\n<h2>1.18 How to determine if two nodes are identical</h2>\n<p><a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isEqualNode\">According\n	to the DOM 3 specification</a> two nodes are equal if and only if the\n	following conditions are satisfied:</p>\n<ul><li>The two nodes are of the same type.</li>\n	<li>The following string attributes are equal: <em>nodeName</em>, <em>localName</em>, <em>namespaceURI</em>, <em>prefix</em>, <em>nodeValue</em>.\n		That is: they are both null, or they have the same length and are\n		character for character identical.</li>\n	<li>The <em>attributes</em> <em>NamedNodeMaps</em> are\n		equal. That is: they are both <em>null</em>, or they have the same\n		length and for each node that exists in one map there is a node that\n		exists in the other map and is equal, although not necessarily at the\n		same index.</li>\n	<li>The <em>childNodes</em> <em>NodeLists</em> are equal.\n		That is: they are both <em>null</em>, or they have the same length\n		and contain equal nodes at the same index. Note that normalization can\n		affect equality; to avoid this, nodes should be normalized before being\n		compared.</li>\n</ul><p>Calling the <em>.isEqualNode()</em> method on a node in the DOM will ask\n	if that node is equal to the node that you pass it as a parameter.\n	Below I exhibt a case of an two equal nodes and two non-identical\n	nodes.</p>\n\n\n<pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n\n&lt;input type=\"text\"&gt;\n&lt;input type=\"text\"&gt;\n\n&lt;textarea&gt;foo&lt;/textarea&gt;\n&lt;textarea&gt;bar&lt;/textarea&gt;\n\n&lt;script&gt;\n\n<em>//logs true, because they are exactly idential</em>\nvar input = document.querySelectorAll(\'input\');\nconsole.log(input[0].<strong>isEqualNode</strong>(input[1]));\n\n<em>//logs false, because the child text node is not the same</em>\nvar textarea = document.querySelectorAll(\'textarea\');\nconsole.log(textarea[0].<strong>isEqualNode</strong>(textarea[1]));\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<div class=\"notes\">\n	<h3>Notes</h3>\n	<p>If you don\'t care about two nodes being exactly equal but instead\n		want to know if two node references refer to the same node you can\n		simply check it using the <em>===</em> opertor (i.e. <em>document.body === document.body</em>). This will tell us if they are identical but no equal.</p>\n</div>\n\n\n</div>\n\n\n\n\n<div class=\"chapter\">\n\n    \n    <h2>2.1<span> </span><em>document</em><span>\n      </span>node overview</h2>\n    <p>The <em>HTMLDocument</em>\n      constructor (which inherits from  <em>document</em>) when instantiated \n      represents specifically a <em>DOCUMENT_NODE</em>    (i.e. <em>window.document</em>)\n      in the DOM. To verify this we can simply ask which constructor was used in\n      the creation of the <em>document</em> node object.</p>\n    \n    <pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n&lt;script&gt;\n\nconsole.log(window.<strong>document.constructor</strong>); <em>//logs function HTMLDocument() { [native code] }</em>\nconsole.log(window.<strong>document.nodeType</strong>); <strong><em>//logs 9, which is a numeric key mapping to DOCUMENT_NODE</em></strong>\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n    <p>The code above concludes that the <em>HTMLDocument</em> constructor\n      function constructs the <em>window.document</em> node object and that this node is a <em>DOCUMENT_NODE</em> object.</p>\n    <div class=\"notes\">\n      <h3>Notes</h3>\n      <p>Both <em>Document</em> and <em>HTMLDocument</em> constructors are\n        typically instantiated by the browser when you load an HTML document. However, using <em>document.implementation.createHTMLDocument()</em> its possible to create your own HTML document outside of the one currently loaded into the browser. In addtion to <em>createHTMLDocument()</em> its also possible to create a document object which has yet to be setup as an HTML document using <em>createDocument()</em>. Typically the use of theses methods are associated with programatically providing an HTML document to an iframe.</p>\n    </div>\n    <h2>2.2 <em>HTMLDocument</em> properties and methods (including\n      inherited) </h2>\n    <p>To get accurate information pertaining to the available properties and\n      methods on an <em>HTMLDocument</em> node its best to ignore the\n      specification and to ask the browser what is available. Examine the arrays\n      created in the code below detailing the properties and methods available\n      from an <em>HTMLDocument</em> node (a.k.a. <em>window.document</em>)\n      object.</p>\n    \n    <pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n&lt;script&gt;\n\n<em>//document own properties</em>\nconsole.log(Object.keys(document).sort());\n\n<em>//document own properties &amp; inherited properties</em>\nvar documentPropertiesIncludeInherited = [];\nfor(var p in document){\n	documentPropertiesIncludeInherited.push(p);\n}\nconsole.log(documentPropertiesIncludeInherited.sort());\n\n<em>//documment inherited properties only</em>\nvar documentPropertiesOnlyInherited = [];\nfor(var p in document){\n	if(\n		!document.hasOwnProperty(p)){documentPropertiesOnlyInherited.push(p);\n	}\n}\nconsole.log(documentPropertiesOnlyInherited.sort());\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n    <p>The available properties are many even if the inherited properties were not\n      considered. Below I\'ve hand pick a list of noteworthy properties and\n      methods for the context of this chapter. \n    </p>\n    <ul><li><em>doctype</em></li>\n      <li><em>documentElement</em></li>\n      <li><em>implementation</em>.*</li>\n      <li><em>activeElement</em></li>\n      <li><em>body</em></li>\n      <li><em>head </em></li>\n      <li><em>title</em></li>\n      <li><em>lastModified</em></li>\n      <li><em>referrer</em></li>\n      <li><em>URL</em></li>\n      <li><em>defaultview</em>    </li>\n      <li><em>compatMode</em></li>\n      <li><em>ownerDocument</em></li>\n      <li><em>hasFocus()</em></li>\n    </ul><div class=\"notes\">\n      <h3>Notes</h3>\n      <p>The <em>HTMLDocument</em> node object is used to access (typically inherit) a great deal\n        of the methods and properties available for working with the DOM (i.e. <em>document.querySelectorAll()</em>). You\n        will be seeing many of these properties not discussed in this chapter\n        discussed in the appropriate chapter\'s following this chapter.</p>\n    </div>\n    <h2>2.3 Getting general HTML document information (title, url, referrer, lastModified, compatMode)</h2>\n    <p>The <em>document</em> object provides access to some general information\n      about the HTML document/DOM being loaded. In the code below I use the <em>document.title</em>,\n      <em>document.URL</em>, <em>document.referrer</em>, <em>document.lastModified</em>, and <em>document.compatMode</em> properties to gain some general information about the <em>document</em>.\n    Based on the property name the returned values should be obvious.</p>\n    \n    <pre>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;body&gt;\n&lt;script&gt;\n\nvar d = document;\nconsole.log(\'title = \' +d.<strong>title</strong>);\nconsole.log(\'url = \' +d.<strong>URL</strong>);\nconsole.log(\'referrer = \' +d.<strong>referrer</strong>);\nconsole.log(\'lastModified = \' +d.<strong>lastModified</strong>);\n\n<em>//logs either BackCompat (Quirks Mode) or CSS1Compat (Strict Mode)</em>\nconsole.log(\'compatibility mode = \' +d.<strong>compatMode</strong>);\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n',1),(138,'Single page apps in depth','http://singlepageappbook.com/',1,0,'<p>This free book is what I wanted when I started working with single page apps. It\'s not an API reference on a particular framework, rather, the focus is on discussing patterns, implementation choices and decent practices.</p>\n<p>I\'m taking a \"code and concepts\" approach to the topic - the best way to learn how to use something is to understand how it is implemented. My ambition here is to decompose the problem of writing a web app, take a fresh look at it and hopefully make better decisions the next time you make one.</p>\n<p>Update: the book is now also on <a href=\"https://github.com/mixu/singlepageappbook\">Github</a>.</p>\n<h3>Introduction</h3>\n<h3>Writing maintainable code</h3>\n<h3>Implementation alternatives: a look at the options</h3>\n<h3>Meditations on Models &amp; Collections</h3>\n<h3>Views - templating, behavior and event consumption</h3>\n\n        ',1),(139,'With 130+ Pre-Made Layouts the Hard Work was Already Done for You','http://davidwalsh.name/130-premade-layouts-hard-work',1,0,'<p>Select a fully-customizable pre-made layout to serve as the foundation for your web page, and let <a href=\"http://themes.muffingroup.com/be/splash/\">Be Theme</a>, do the heavy lifting. </p>\r\n<p>Imagine if you could choose among <i>130+ pre-made layouts</i> like those shown below, with <i>8 new ones being added each month</i>. It will be easy to find a layout that matches the web design project you have in mind, and these layouts are true productivity hacks. </p>\r\n<p>They can be installed with 1 click, no coding is necessary, and most of the design detail and the often time-consuming repetitive actions are taken care of by tools embedded in the theme. Better yet, Be’s world-class support team is there to help you along the way.</p>\r\n\r\n<h3><a href=\"http://themes.muffingroup.com/be/digital/\">DIGITAL</a></h3>\r\n<p><a href=\"http://bawm.co/1FBiIk0\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/1.jpg\" alt=\"\" /></a></p>\r\n\r\n\r\n<h3><a href=\"http://themes.muffingroup.com/be/surfing/\">SURFING</a></h3>\r\n<p><a href=\"http://bawm.co/1hThISG\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/2.jpg\" alt=\"\" /></a></p>\r\n\r\n\r\n<h3><a href=\"http://themes.muffingroup.com/be/webdesign/\">WEB DESIGN</a></h3>\r\n<p><a href=\"http://bawm.co/1Oak0tl\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/3.jpg\" alt=\"\" /></a></p>\r\n\r\n\r\n<h3><a href=\"http://themes.muffingroup.com/be/software/\">SOFTWARE</a></h3>\r\n<p><a href=\"http://bawm.co/1Oi8Anr\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/4.jpg\" alt=\"\" /></a></p>\r\n\r\n\r\n<h3><a href=\"http://themes.muffingroup.com/be/asg/\">ASG</a></h3>\r\n<p><a href=\"http://bawm.co/1QbfcCV\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/5.jpg\" alt=\"\" /></a></p>\r\n\r\n\r\n<h3><a href=\"http://themes.muffingroup.com/be/club/\">CLUB</a></h3>\r\n<p><a href=\"http://bawm.co/1WPFezz\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/6.jpg\" alt=\"\" /></a></p>\r\n\r\n\r\n<h3><a href=\"http://themes.muffingroup.com/be/space/\">SPACE</a></h3>\r\n<p><a href=\"http://bawm.co/\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/7.jpg\" alt=\"\" /></a></p>\r\n\r\n\r\n\r\n<h2>How to Edit a Pre-made Layout Quickly (1 click installation)</h2>\r\n<p>Watch the <a href=\"https://www.youtube.com/watch?v=dw0boQYXhn8\">video</a>, which takes about a minute of your time, and discover how you can install a pre-made layout and initiate the editing process <i>in about the same amount of time it took to watch the video</i>. It is really that easy!</p>\r\n\r\n<iframe width=\"854\" height=\"480\" src=\"https://www.youtube.com/embed/dw0boQYXhn8\" frameborder=\"0\">[embedded content]</iframe>\r\n\r\n<p>The installation and editing processes seem to be happening at lightning speed, but you will find yourself creating pages at the very same pace in no time at all. Perform a design function once or twice, and you are well on your way to becoming an expert.</p>\r\n<p>Furthermore, the tools you have to work with, like the <b>Admin Panel</b> and the <b>Layout Configurator</b>, keep track of your design efforts, so you never have to go back because you’ve lost track of where you are or what you did. Be Theme does that for you, as you move along a click at a time. The video offers just a small sampling of how easy this WordPress theme is to use.</p>\r\n\r\n\r\n<h2>Be Theme has more than 20 powerful core features</h2>\r\n<p><a href=\"http://bawm.co/bvndlqer\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/8.jpg\" alt=\"\" /></a></p>\r\n\r\n<p>Since every Be Theme layout is totally customizable, you could pick any one and get off to a good start. When you select one that closely matches your objective however, you will get off to an even faster start, and thanks to Be’s more than 20 powerful core features, you can maintain your momentum until you are ready to present the end product to your client.</p>\r\n<p>The <b>Muffin Builder</b> is one of the easiest to use page builders you will find anywhere. It handles even the most complex pages with ease. You will be amazed at how quickly you can put a high-quality page together thanks to the <b>Shortcode Generator</b>, and the <b>Layout Configurator</b> makes the whole website building activity a nearly seamless operation.</p>\r\n<p>There are more than a dozen <b>header styles</b> and a set of <b>base grid configurations</b> to choose from, as well as a useful selection of <b>blog and portfolio configurations</b>. Virtually any element or configuration you select can be edited, so your design options are for all intents and purposes unlimited.</p>\r\n<p>Installing and editing a premade layout is a snap -- as you will see.</p>\r\n<h2>Show the Results to Your Client and Send Him an Invoice </h2>\r\n<p>It is worth mentioning at this point that one of Be’s core features is that it is optimized for speed. It will do what you want it to do as fast as you can click, which means your client is in for a pleasant surprise. Instead of receiving a quality product within the scheduled time, he will be getting an outstanding product in much less time than anticipated.</p>\r\n<p><i>You can build a page in minutes</i>. Spend an extra minute or so for adjusting and polishing, and you can impress and delight your client with a web page that once took an hour or more to put together, and with less impressive results.</p>\r\n<p>Your client will be happy, and you will be pleased; just as is the case with these, and the vast majority of the other Be Theme users:</p>\r\n\r\n<p><a href=\"http://bawm.co/bvndlqer\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/9.png\" alt=\"\" /></a></p>\r\n<p><a href=\"http://bawm.co/bvndlqer\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/10.png\" alt=\"\" /></a></p>\r\n<p><a href=\"http://bawm.co/bvndlqer\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/11.png\" alt=\"\" /></a></p>\r\n<p><a href=\"http://bawm.co/bvndlqer\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/12.png\" alt=\"\" /></a></p>\r\n\r\n<h2>Customer Support: Always There When You Need It</h2>\r\n<p>If a problem should crop up, and you do need assistance, you will never have to put up with having to navigate a menu in order to speak to a real, live person, and you will not have to settle for a stock answer that isn’t all much of a help. </p>\r\n<p>The first place to go should be Be’s well-organized forum, where most of the commonplace questions have already been answered, as demonstrated in these examples:</p>\r\n\r\n<p><a href=\"http://bawm.co/bvndlqer\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/13.jpg\" alt=\"\" /></a></p>\r\n<p><a href=\"http://bawm.co/wpmay8be\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/14.jpg\" alt=\"\" /></a></p>\r\n<p><a href=\"http://bawm.co/wpmay8be\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/15.jpg\" alt=\"\" /></a></p>\r\n<p><a href=\"http://bawm.co/bvndlqer\"><img src=\"http://davidwalsh.name/demo/sponsored-be-images/16.jpg\" alt=\"\" /></a></p>\r\n\r\n<p><a href=\"http://themes.muffingroup.com/be/splash/\">Be Theme</a> is without a doubt the biggest WordPress theme ever; not only in terms of premade layouts, but in terms of the number of core features, the many design options open to you, and the number of totally-satisfied users. </p>\r\n<p>You will discover from the very start how much your <i>productivity will improve</i> because of what the premade layouts offer and the rapidity in which you can create a quality product. There is a <i>layout to fit virtually any web design product</i>, and new ones are being introduced each month. Watch the video, try a demo, and hop on board!</p>',1),(140,'clipboard.js','http://zenorocha.github.io/clipboard.js/',1,0,'\n\n        <p>Copying text to the clipboard shouldn\'t be hard. It shouldn\'t require dozens of steps to configure or hundreds of KBs to load. But most of all, it shouldn\'t depend on Flash or any bloated framework.</p>\n\n        <p>That\'s why clipboard.js exists.</p>\n\n        \n\n        <p>You can get it on npm.</p>\n\n        <pre class=\"snippet\"><code class=\"js\">npm install clipboard --save</code></pre>\n\n        <p>Or bower, too.</p>\n\n        <pre class=\"snippet\"><code class=\"js\">bower install clipboard --save</code></pre>\n\n        <p>If you\'re not into package management, just <a href=\"https://github.com/zenorocha/clipboard.js/archive/master.zip\">download a ZIP</a> file.</p>\n\n        \n\n        <p>First, include the script located on the <code>dist</code> folder.</p>\n\n        <pre class=\"snippet\"><code class=\"html\">&lt;script src=\"dist/clipboard.min.js\"&gt;&lt;/script&gt;</code></pre>\n\n        <p>Or load it from a CDN.</p>\n\n        <pre class=\"snippet\"><code class=\"html\">&lt;script src=\"https://cdn.rawgit.com/zenorocha/clipboard.js/master/dist/clipboard.min.js\"&gt;&lt;/script&gt;</code></pre>\n\n        <p>Now, you need to instantiate it using a DOM selector. This selector corresponds to the trigger element(s), for example <code>&lt;button class=\"btn\"&gt;</code>.</p>\n\n        <pre class=\"snippet\"><code class=\"js\">new Clipboard(\'.btn\');</code></pre>\n\n        <p>Internally, we need to fetch all elements that matches with your selector and attach event listeners for each one. But guess what? If you have hundreds of matches, this operation can consume a lot of memory.</p>\n\n        <p>For this reason we use <a href=\"https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation\">event delegation</a> which replaces multiple event listeners with just a single listener. After all, <a href=\"https://twitter.com/hashtag/perfmatters\">#perfmatters</a>.</p>\n\n        \n\n        <p>We\'re living a <em>declarative renaissance</em>, that\'s why we decided to take advantage of <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes\">HTML5 data attributes</a> for better usability.</p>\n\n        <h3>Copy text from another element</h3>\n\n        <p>A pretty common use case is to copy content from another element. You can do that by adding a <code>data-clipboard-target</code> attribute in your trigger element.</p>\n        <p>The value you include on this attribute needs to match another\'s element selector.</p>\n\n        \n\n        <pre class=\"snippet\"><code class=\"html\">&lt;!-- Target --&gt;\n&lt;input id=\"foo\" value=\"https://github.com/zenorocha/clipboard.js.git\"&gt;\n\n&lt;!-- Trigger --&gt;\n&lt;button class=\"btn\" data-clipboard-target=\"#foo\"&gt;\n    &lt;img src=\"assets/clippy.svg\" alt=\"Copy to clipboard\"&gt;\n&lt;/button&gt;</code></pre>\n\n        <h3>Cut text from another element</h3>\n\n        <p>Additionally, you can define a <code>data-clipboard-action</code> attribute to specify if you want to either <code>copy</code> or <code>cut</code> content.</p>\n        <p>If you omit this attribute, <code>copy</code> will be used by default.</p>\n\n        <div class=\"example\">\n            <p>\n                Mussum ipsum cacilds, vidis litro abertis. Consetis adipiscings elitis. Pra lá , depois divoltis porris, paradis. Paisis, filhis, espiritis santis. Mé faiz elementum girarzis, nisi eros vermeio, in elementis mé pra quem é amistosis quis leo. Manduma pindureta quium dia nois paga.</p>\n            <p>\n                \n                    Cut to clipboard\n                \n            </p>\n        </div>\n\n        <pre class=\"snippet\"><code class=\"html\">&lt;!-- Target --&gt;\n&lt;textarea id=\"bar\"&gt;Mussum ipsum cacilds...&lt;/textarea&gt;\n\n&lt;!-- Trigger --&gt;\n&lt;button class=\"btn\" data-clipboard-action=\"cut\" data-clipboard-target=\"#bar\"&gt;\n    Cut to clipboard\n&lt;/button&gt;</code></pre>\n\n        <p>As you may expect, the <code>cut</code> action only works on <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> elements.</p>\n\n        <h3>Copy text from attribute</h3>\n\n        <p>Truth is, you don\'t even need another element to copy its content from. You can just include a <code>data-clipboard-text</code> attribute in your trigger element.</p>\n\n        <p>\n            Copy to clipboard\n        </p>\n\n        <pre class=\"snippet\"><code class=\"html\">&lt;!-- Trigger --&gt;\n&lt;button class=\"btn\" data-clipboard-text=\"Just because you can doesn\'t mean you should — clipboard.js\"&gt;\n    Copy to clipboard\n&lt;/button&gt;</code></pre>\n\n        \n\n        <p>There are cases where you\'d like to show some user feedback or capture what has been selected after a copy/cut operation.</p>\n\n        <p>That\'s why we fire custom events such as <code>success</code> and <code>error</code> for you to listen and implement your custom logic.</p>\n\n        <pre class=\"snippet\"><code class=\"js\">var clipboard = new Clipboard(\'.btn\');\n\nclipboard.on(\'success\', function(e) {\n    console.info(\'Action:\', e.action);\n    console.info(\'Text:\', e.text);\n    console.info(\'Trigger:\', e.trigger);\n\n    e.clearSelection();\n});\n\nclipboard.on(\'error\', function(e) {\n    console.error(\'Action:\', e.action);\n    console.error(\'Trigger:\', e.trigger);\n});</code></pre>\n\n        <p>For a live demonstration, just open your console :)</p>\n\n        \n\n        <p>If you don\'t want to modify your HTML, there\'s a pretty handy imperative API for you to use. All you need to do is declare a function, do your thing, and return a value.</p>\n\n        <p>For instance, if you want to dynamically set a <code>target</code>, you\'ll need to return a Node.</p>\n\n        <pre class=\"snippet\"><code class=\"js\">new Clipboard(\'.btn\', {\n    target: function(trigger) {\n        return trigger.nextElementSibling;\n    }\n});</code></pre>\n\n        <p>If you want to dynamically set a <code>text</code>, you\'ll return a String.</p>\n\n        <pre class=\"snippet\"><code class=\"js\">new Clipboard(\'.btn\', {\n    text: function(trigger) {\n        return trigger.getAttribute(\'aria-label\');\n    }\n});</code></pre>\n\n        <p>Also, with are working with single page apps, you may want to manage the lifecycle of the DOM more precisely. Here\'s how you clean up the events and objects that we create.</p>\n\n        <pre class=\"snippet\"><code class=\"js\">var clipboard = new Clipboard(\'.btn\');\nclipboard.destroy();</code></pre>\n\n        \n\n        <p>This library relies on both <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection\">Selection</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand\">execCommand</a> APIs. The second one is supported in the following browsers.</p>\n\n        <ul class=\"support\"><li>\n                <img src=\"http://zenorocha.github.io/clipboard.js/assets/images/chrome.png\" width=\"64\" height=\"64\" alt=\"Chrome logo\" /><p>Chrome 42+</p>\n            </li><li>\n                <img src=\"http://zenorocha.github.io/clipboard.js/assets/images/firefox.png\" width=\"64\" height=\"64\" alt=\"Firefox logo\" /><p>Firefox 41+</p>\n            </li>\n            <li>\n                <img src=\"http://zenorocha.github.io/clipboard.js/assets/images/ie.png\" width=\"64\" height=\"64\" alt=\"Internet Explorer logo\" /><p>IE 9+</p>\n            </li>\n            <li>\n                <img src=\"http://zenorocha.github.io/clipboard.js/assets/images/opera.png\" width=\"64\" height=\"64\" alt=\"Opera logo\" /><p>Opera 29+</p>\n            </li>\n            <li>\n                <img src=\"http://zenorocha.github.io/clipboard.js/assets/images/safari.png\" width=\"64\" height=\"64\" alt=\"Safari logo\" /><p>Safari ✘</p>\n            </li>\n        </ul><p>Although copy/cut operations with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand\">execCommand</a> aren\'t supported on Safari yet (including mobile), it gracefully degrades because <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection\">Selection</a> is supported.</p>\n\n        <p>That means you can show a tooltip saying <code>Copied!</code> when <code>success</code> event is called and <code>Press Ctrl+C to copy</code> when <code>error</code> event is called because the text is already selected.</p>\n\n        <p>For a live demonstration, open this site on Safari.</p>\n    ',1),(141,'Popmotion - JavaScript animation, physics and input tracking','http://popmotion.io/',1,0,'\n<div class=\"home\">\n	\n\n\n    <div class=\"container splash-examples\">\n        <h2>A 12kb JavaScript motion engine</h2>\n        <div class=\"container\">\n            \n            <div class=\"third physics\">\n                <h3>Physics</h3>\n                <div class=\"ball-area\">\n                    \n                    <p>Keep it up</p>\n                </div>\n            </div>\n            <div class=\"third tracking\">\n                <h3>Input tracking</h3>\n                \n            </div>\n        </div>\n        <a href=\"http://popmotion.io/guides/get-started\" class=\"get-started button cta clearfix\">Get started</a>\n    </div>\n\n\n</div>\n\n<div class=\"container\">\n        <span class=\"copyright\">© 2015 Popmotion</span>\n        </div>\n',1),(142,'Use jQuery to Create a Simple Slider','http://www.learningjquery.com/2015/10/use-jquery-to-create-a-simple-slider',1,0,'\n   			  All it takes are a few lines of code to make your own simple, lightweight content slider using jQuery -- no plugins necessary.\n\nFirst, use divs to separate your content and create each slide. Make sure each of these divs has its own unique ID. Each div should also contain text or an image/icon with its own class that will be used to trigger the jQuery code.\n\n \n\n<div class=\"syntax_hilite\"><span class=\"langName\">HTML:</span><br /><div>\n<div class=\"html\"><ol><li><p><span>&lt;</span>div id=\"slide-1\"<span>&gt;</span></p></li>\n<li><p>     <span>&lt;</span>p<span>&gt;</span>First Slide<span>&lt;</span>/p<span>&gt;</span></p></li>\n<li><p><span>&lt;</span>/div<span>&gt;</span></p></li>\n<li><p><span>&lt;</span>div id=\"slide-2\" class=\"dormant-class\"<span>&gt;</span></p></li>\n<li><p>     <span>&lt;</span>p<span>&gt;</span>Second Slide<span>&lt;</span>/p<span>&gt;</span></p></li>\n<li><p><span>&lt;</span>/div<span>&gt;</span></p></li>\n</ol></div>\n</div></div><br /> \n\nAdd these lines to your CSS, and make sure that every slide except the first one is given the class \"dormant-class\", like in the example above, so that they are initially hidden.\n\n \n\n<div class=\"syntax_hilite\"><span class=\"langName\">CSS:</span><br /><div>\n<div class=\"css\"><ol><li><p>.dormant-class<span>{</span></p></li>\n<li><p>     <span>display</span><span>:</span> <span>none</span><span>;</span></p></li>\n<li><p><span>}</span></p></li>\n<li></li>\n<li><p>.active-class<span>{</span></p></li>\n<li><p>     <span>display</span><span>:</span> <span>block</span><span>;</span></p></li>\n<li><p><span>}</span></p></li>\n</ol></div>\n</div></div><br /> \n\nHere\'s where the jQuery comes in. When the trigger (#arrow) is clicked, we\'re going to use jQuery to add the class \"dormant class\" to the first slide, and remove the class \"dormant-class\" while adding the class\"active-class\" to the second slide.\n\n \n\n<div class=\"syntax_hilite\"><span class=\"langName\">JavaScript:</span><br /><div>\n<div class=\"javascript\"><ol><li><div>$<span>(</span><span>\'#arrow\'</span><span>)</span>.<a href=\"http://www.learningjquery.com/wp-content/themes/ljq/docs-1.7.php?fn=click\"><span>click</span></a><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span></div></li>\n<li></li>\n<li><div>   $<span>(</span><span>\'#slide-1\'</span><span>)</span>.<a href=\"http://www.learningjquery.com/wp-content/themes/ljq/docs-1.7.php?fn=addClass\"><span>addClass</span></a><span>(</span><span>\'dormant-class\'</span><span>)</span>;</div></li>\n<li></li>\n<li></li>\n<li></li>\n<li><p><span>}</span><span>)</span></p></li>\n</ol></div>\n</div></div><br /> \n\nThe first slide will disappear as the second slide is displayed. To switch back to the first slide, the #slide-2 will have its own trigger (#arrow2), which will remove \"active-class\" and add \"dormant-class\" to the second slide, and remove \"dormant class\" from the first slide, making it active and visible once again.\n\n \n\n<div class=\"syntax_hilite\"><span class=\"langName\">JavaScript:</span><br /><div>\n<div class=\"javascript\"><ol><li><div>$<span>(</span><span>\'arrow2\'</span><span>)</span>.<a href=\"http://www.learningjquery.com/wp-content/themes/ljq/docs-1.7.php?fn=click\"><span>click</span></a><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span></div></li>\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n<li><p><span>}</span><span>)</span></p></li>\n</ol></div>\n</div></div><br /> \n<div>\n\n\n\n\n<a href=\"http://ads.egrappler.com/www/delivery/ck.php?n=a57f4556&amp;cb=INSERT_RANDOM_NUMBER_HERE\"><img src=\"http://ads.egrappler.com/www/delivery/avw.php?zoneid=68&amp;cb=INSERT_RANDOM_NUMBER_HERE&amp;n=a57f4556\" border=\"0\" alt=\"\" /></a>\n</div>\n\n\n<br />',1),(143,'jwagner/smartcrop.js','https://github.com/jwagner/smartcrop.js/',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Smartcrop.js implements an algorithm to find good crops for images.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/1086f55f4396e6c34f076b8f4a43c083fc5253d1/687474703a2f2f3239612e63682f73616e64626f782f323031342f736d61727463726f702f6578616d706c652e6a7067\"><img src=\"https://camo.githubusercontent.com/1086f55f4396e6c34f076b8f4a43c083fc5253d1/687474703a2f2f3239612e63682f73616e64626f782f323031342f736d61727463726f702f6578616d706c652e6a7067\" alt=\"Example\" /></a>\nImage: <a href=\"https://www.flickr.com/photos/endogamia/5682480447\">https://www.flickr.com/photos/endogamia/5682480447/</a> by N. Feans</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#demos\"><span class=\"octicon octicon-link\"></span></a>Demos</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#algorithm-overview\"><span class=\"octicon octicon-link\"></span></a>Algorithm Overview</h2>\n\n<p>Smartcrop.js works using fairly dumb image processing. In short:</p>\n\n<ol><li>Find edges using laplace</li>\n<li>Find regions with a color like skin</li>\n<li>Find regions high in saturation</li>\n<li>Generate a set of candidate crops using a sliding window</li>\n<li>Rank them using a importance function to focus the detail in the center\nand avoid it in the edges. </li>\n<li>Output the candidate crop with the highest rank</li>\n</ol><h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#simple-example\"><span class=\"octicon octicon-link\"></span></a>Simple Example</h2>\n\n<div class=\"highlight highlight-source-js\"><pre>SmartCrop.crop(image, {width<span class=\"pl-k\">:</span> <span class=\"pl-c1\">100</span>, height<span class=\"pl-k\">:</span> <span class=\"pl-c1\">100</span>}, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">result</span>){<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(result);});\n<span class=\"pl-c\">// {topCrop: {x: 300, y: 200, height: 200, width: 200}}</span></pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#download-installation\"><span class=\"octicon octicon-link\"></span></a>Download/ Installation</h2>\n\n<p><code>npm install smartcrop</code>\nor\n<code>bower install smartcrop</code>\nor just download <a href=\"https://raw.githubusercontent.com/jwagner/smartcrop.js/master/smartcrop.js\">smartcrop.js</a> from the git repo.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#cli--nodejs\"><span class=\"octicon octicon-link\"></span></a>CLI / Node.js</h2>\n\n<p>The <a href=\"https://github.com/jwagner/smartcrop-cli\">smartcrop-cli</a> offers command line interface to smartcrop.js. It is based on node.js and node-canvas. You can also view it as an example on how to use smartcrop.js from a node.js app.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#module-formats\"><span class=\"octicon octicon-link\"></span></a>Module Formats</h2>\n\n<p>Supported:</p>\n\n<ul><li>common js</li>\n<li>amd</li>\n<li>global export / window</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#supported-browsers\"><span class=\"octicon octicon-link\"></span></a>Supported Browsers</h2>\n\n<p>See <a href=\"http://caniuse.com/canvas\">caniuse.com/canvas</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#api\"><span class=\"octicon octicon-link\"></span></a>API</h2>\n\n<p>The API is not yet finalized. Look at the code for details and expect changes.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#smartcropcropimage-options-callback\"><span class=\"octicon octicon-link\"></span></a>SmartCrop.crop(image, options, callback)</h3>\n\n<p>Crop image using options and call callback(result) when done.</p>\n\n<p><strong>image:</strong> anything ctx.drawImage() accepts, usually HTMLImageElement, HTMLCanvasElement or HTMLVideoElement</p>\n\n<p><strong>options:</strong> see cropOptions</p>\n\n<p><strong>callback:</strong> function(cropResult)</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#cropoptions\"><span class=\"octicon octicon-link\"></span></a>cropOptions</h3>\n\n<p><strong>debug:</strong> if true, cropResults will contain a debugCanvas</p>\n\n<p><strong>minScale:</strong> minimal scale of the crop rect, set to 1.0 to prevent smaller than necessary crops (lowers the risk of chopping things off).</p>\n\n<p><strong>width:</strong> width of the crop you want to use. </p>\n\n<p><strong>height:</strong> height of the crop you want to use.</p>\n\n<p>There are many more (for now undocumented) options available. Check the <a href=\"https://github.com/jwagner/smartcrop.js/blob/master/smartcrop.js#L32\">source</a> and know that they might change in the future.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#cropresult\"><span class=\"octicon octicon-link\"></span></a>cropResult</h3>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n  topCrop<span class=\"pl-k\">:</span> crop,\n  crops<span class=\"pl-k\">:</span> [crop]\n}</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#crop\"><span class=\"octicon octicon-link\"></span></a>crop</h3>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n  x<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n  y<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n  width<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n  height<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>\n}</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#tests\"><span class=\"octicon octicon-link\"></span></a>Tests</h2>\n\n<p>You can run the tests using grunt test. Alternatively you can also just run grunt (the default task) and open http://localhost:8000/test/. \nThe test coverage for smartcrop.js is very limited at the moment. I expect to improve this as the code matures and the concepts solidify.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#benchmark\"><span class=\"octicon octicon-link\"></span></a>Benchmark</h2>\n\n<p>There are benchmarks for both the browser (test/benchmark.html) and node (node test/benchmark-node.js [requires node-canvas])\nboth powered by <a href=\"http://benchmarkjs.com\">benchmark.js</a>.</p>\n\n<p>If you just want some rough numbers: It takes <strong>&lt; 100 ms</strong> to find a <strong>square crop</strong> of a <strong>640x427px</strong> picture on an i7.\nIn other words, it\'s fine to run it on one image, it\'s not cool to run it on an entire gallery on page load.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#contributors\"><span class=\"octicon octicon-link\"></span></a>Contributors</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#ports-alternatives\"><span class=\"octicon octicon-link\"></span></a>Ports, Alternatives</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/jwagner/smartcrop.js/#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>Copyright (c) 2014 Jonas Wanger, licensed under the MIT License (enclosed)</p>\n',1),(144,'Jack000/Expose','https://github.com/Jack000/Expose',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      readme.md\n    </h3>\n\n    <h2><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#expos%C3%A9\"><span class=\"octicon octicon-link\"></span></a>Exposé</h2>\n\n<p>A simple static site generator for photoessays</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#intro\"><span class=\"octicon octicon-link\"></span></a>Intro</h3>\n\n<p>If you\'re into photography, you probably have folders of images and videos like this:</p>\n\n<p><a href=\"https://camo.githubusercontent.com/0c5919bdc927809f9c538a25f6434c381c3f1cc0/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f666f6c6465722e6a7067\"><img src=\"https://camo.githubusercontent.com/0c5919bdc927809f9c538a25f6434c381c3f1cc0/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f666f6c6465722e6a7067\" alt=\"a bunch of images\" /></a></p>\n\n<p>Expose is a Bash script that turns those images <em>and videos</em> into a photoessay similar to <a href=\"http://jack.ventures\">jack.ventures</a> or <a href=\"http://jack.works\">jack.works</a> (my personal blogs)</p>\n\n<p>If you\'re not a fan of that look, a <a href=\"http://jack.ventures/sample/inner-mongolia\">Medium-style theme</a> is included</p>\n\n<p>tested on Windows/Cygwin, OSX, and should be fine on Linux</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h3>\n\n<p>The only dependency is Imagemagick. For videos FFmpeg is also required.</p>\n\n<p>download the repo and alias the script</p>\n\n<pre><code>alias expose=/script/location/expose.sh\n</code></pre>\n\n<p>for permanent use add this line to your ~/.profiles, ~/.bashrc etc depending on system</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#basic-usage\"><span class=\"octicon octicon-link\"></span></a>Basic usage</h3>\n\n<pre><code>cd ~/folderofimages\nexpose\n</code></pre>\n\n<p>The script operates on your current working directory, and outputs a _site directory.\nConfiguration and settings can be edited in the expose.sh file itself</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#flags\"><span class=\"octicon octicon-link\"></span></a>Flags</h3>\n\n<pre><code>expose -d\n</code></pre>\n\n<p>The -d flag enables draft mode, where only a single low resolution is encoded. This can be used for a quick preview or for layout purposes.</p>\n\n<p>Generated images and videos are not overwritten, to do a completely clean build delete the existing _site directory first.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#adding-text\"><span class=\"octicon octicon-link\"></span></a>Adding text</h3>\n\n<p>The text associated with each image is read from any text file with the same filename as the image, eg:</p>\n\n<p><a href=\"https://camo.githubusercontent.com/59c1bd2d9b24b44f2b051756c864e56aec4e777b/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f696d61676574657874322e6a7067\"><img src=\"https://camo.githubusercontent.com/59c1bd2d9b24b44f2b051756c864e56aec4e777b/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f696d61676574657874322e6a7067\" alt=\"images and text files\" /></a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#sorting\"><span class=\"octicon octicon-link\"></span></a>Sorting</h3>\n\n<p>Images are sorted by alphabetical order. To arbitrarily order images, add a numerical prefix</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#organization\"><span class=\"octicon octicon-link\"></span></a>Organization</h3>\n\n<p>You can put images in folders to organize them. The folders can be nested any number of times, and are also sorted alphabetically. The folder structure is used to generate a nested html menu.</p>\n\n<p>To arbitrarily order folders, add a numerical prefix to the folder name. Any numerical prefixes are stripped from the url.</p>\n\n<p>Any folders, images or videos with an \"_\" prefix are ignored and excluded from the build.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/40aea267d55a3a0eb1101c8428922b27ac0fa795/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f666f6c646572732e6a7067\"><img src=\"https://camo.githubusercontent.com/40aea267d55a3a0eb1101c8428922b27ac0fa795/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f666f6c646572732e6a7067\" alt=\"folders\" /></a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#text-metadata\"><span class=\"octicon octicon-link\"></span></a>Text metadata</h3>\n\n<p>YAML in the text file is read and made available to the theme. The variables depend on the theme used.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#theme-1-specific-options\"><span class=\"octicon octicon-link\"></span></a>Theme-1 specific options</h3>\n\n<pre><code>---\ntop: 30\nleft: 5\nwidth: 30\nheight: 20\ntextcolor: #ffffff\n---\n</code></pre>\n\n<p><a href=\"https://camo.githubusercontent.com/e546f55a30927f88cda5779086fcb3b04ed2a944/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f64696d656e73696f6e7661726961626c65732e6a7067\"><img src=\"https://camo.githubusercontent.com/e546f55a30927f88cda5779086fcb3b04ed2a944/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f64696d656e73696f6e7661726961626c65732e6a7067\" alt=\"content dimensions\" /></a></p>\n\n<p>The units are in percentages</p>\n\n<pre><code>---\ntop: 12\nleft: 50\nwidth: 40\nheight: 50\npolygon:[{\"x\":5, \"y\":0},{\"x\":100, \"y\":0},{\"x\":100, \"y\":100},{\"x\":7, \"y\":55}, {\"x\":0, \"y\":16}]\ntextcolor: #ff9518\n---\n</code></pre>\n\n<p>Use a polygon to wrap text around shapes. The polygon is defined by 3 or more points in a JSON blob. Units are again in percentages.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/fc5efd36466185d1a53b9db22bf1623d5714f73e/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f706f6c79676f6e322e6a7067\"><img src=\"https://camo.githubusercontent.com/fc5efd36466185d1a53b9db22bf1623d5714f73e/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f706f6c79676f6e322e6a7067\" alt=\"content polygon\" /></a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#theme-2-specific-options\"><span class=\"octicon octicon-link\"></span></a>Theme-2 specific options</h3>\n\n<pre><code>---\nwidth: 32.5\n---\n</code></pre>\n\n<p>In theme-2 the width variable acts on the image rather than the content. You can use this to tile images in a row:</p>\n\n<p><a href=\"https://camo.githubusercontent.com/919fd7aead88c860c1f981c91c69ccbf12e2b54b/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f77696474686f7074696f6e2e6a7067\"><img src=\"https://camo.githubusercontent.com/919fd7aead88c860c1f981c91c69ccbf12e2b54b/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f77696474686f7074696f6e2e6a7067\" alt=\"image row\" /></a></p>\n\n<p>Clicking on each image shows it in full screen mode.</p>\n\n<p>Note that in this theme the text goes above its associated image, except the first image which is used as a masthead.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#metadata-file\"><span class=\"octicon octicon-link\"></span></a>Metadata file</h3>\n\n<p>If you want certain variables to apply to an entire gallery, place a metadata.txt (this is configurable) file in the gallery directory. eg. in metadata.txt:</p>\n\n<pre><code>width: 19   \n</code></pre>\n\n<p><a href=\"https://camo.githubusercontent.com/40035fba51571381b0637cb8237552385b4e165a/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f677269642e6a7067\"><img src=\"https://camo.githubusercontent.com/40035fba51571381b0637cb8237552385b4e165a/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f677269642e6a7067\" alt=\"image grid\" /></a></p>\n\n<p>This sets all image widths to form a grid. Metadata file parameters are overriden by metadata in individual posts.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#advanced-usage\"><span class=\"octicon octicon-link\"></span></a>Advanced usage</h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#video-options\"><span class=\"octicon octicon-link\"></span></a>Video options</h3>\n\n<p>Since we\'re using FFMpeg for video, we can leverage its filter framework for quick effects. This also saves a re-encode from a video editor workflow. Not all the FFmpeg options are applicable, but here are a few I found useful:</p>\n\n<pre><code>---\nvideo-options: -ss 10 -t 5\n---\n</code></pre>\n\n<p>This will cut the video 10 seconds from the start, with a duration of 5 seconds.</p>\n\n<pre><code>---\nvideo-filters: lut3d=file=fuji3510.cube\n---\n</code></pre>\n\n<p>If you\'re like me and shoot video in log profile, doing post work can be a pain. I like to globally apply a <a href=\"http://juanmelara.com.au/print-film-emulation-luts-for-download/\">film print emulation LUT</a> for a consistent look. Note that FFmpeg will look for the LUT file in the working directory you started the script in.\nFFmpeg does not support .look LUTs, so you\'ll have to convert them to one of .cube .3dl .dat or .m3d</p>\n\n<p><a href=\"https://camo.githubusercontent.com/47db3a017b300824804a24829b8d5b683651bbc7/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f6c757433642e706e67\"><img src=\"https://camo.githubusercontent.com/47db3a017b300824804a24829b8d5b683651bbc7/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f6c757433642e706e67\" alt=\"3d LUT\" /></a></p>\n\n<p>Here I use a nice low-contrast LUT I <a href=\"http://caseywilsondp.com/2015/03/25/a7s-slog2-rec709-lut/\">found online</a> with excellent highlight rolloff for a cinematic look.</p>\n\n<pre><code>---\nvideo-filters: deshake,unsharp=6:6:3,lutyuv=\"u=128:v=128\"\n---\n</code></pre>\n\n<p>Applies stabilization to the video and a slight sharpen filter, then converts to grayscale. Separate filters with commas.</p>\n\n<p>A full list of FFmpeg filters can be <a href=\"https://ffmpeg.org/ffmpeg-filters.html#Video-Filters\">found here</a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#image-options\"><span class=\"octicon octicon-link\"></span></a>Image options</h3>\n\n<p>Similar to videos, we can leverage the image editing features of Imagemagick.</p>\n\n<p>Things like cropping and color correction are very visual operations that are hard to do in command line. Most people would shoot in RAW and export as jpeg anyways, so a lot of ImageMagick\'s CLI options won\'t be very useful. However, it is very handy for non-destructively applying effects across an entire gallery, eg:</p>\n\n<pre><code>---\nimage-options: watermark.png -gravity SouthEast -geometry +50+50 -composite \n---\n</code></pre>\n\n<p>You can use this to apply a watermark on the bottom right corner, with a 50 pixel margin from the edge.</p>\n\n<pre><code>---\nimage-options: -sharpen 0x1.5\n---\n</code></pre>\n\n<p>Sharpens the image with a 1.5 pixel radius</p>\n\n<pre><code>---\nimage-options: -hald-clut transform.png\n---\n</code></pre>\n\n<p>Imagemagick does not read LUTs natively, but will accept a Hald color lookup image. This image can be created in photoshop or other graphics package by applying your LUT to the <a href=\"http://www.quelsolaar.com/technology/clut.html\">Hald identity CLUT image</a></p>\n\n<pre><code>---\nimage-options: -colorspace Gray -sigmoidal-contrast 5,50%\n---\n</code></pre>\n\n<p>Convert to a black-and-white image. Typically you would want to enhance contrast as well, which can be done by the sigmoidal contrast modifier. The first number controls contrast intensity.</p>\n\n<p>A full list of Imagemagick options can be <a href=\"http://www.imagemagick.org/script/command-line-options.php\">found here</a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#image-sequences\"><span class=\"octicon octicon-link\"></span></a>Image sequences</h3>\n\n<p>Timelapse and stop-motion are a great way to add motion to a scene. If your folder contains the key word \"imagesequence\" (this is configurable), the images in the folder will be converted to a video. Video options and filters may be applied to image sequences.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/93ac68246214694fbcf483c731788635e85c5cda/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f696d61676573657175656e63652e676966\"><img src=\"https://camo.githubusercontent.com/93ac68246214694fbcf483c731788635e85c5cda/687474703a2f2f6a61636b2e776f726b732f6578706f7365696d616765732f696d61676573657175656e63652e676966\" alt=\"Image sequence\" /></a></p>\n\n<p>By default the video is encoded at 24fps.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#templating\"><span class=\"octicon octicon-link\"></span></a>Templating</h3>\n\n<p>If the two built-in themes aren\'t your thing, you can create a new theme. There are only two template files in a theme:</p>\n\n<p><strong>template.html</strong> contains the global html for your page. It has access to the following built-in variables:</p>\n\n<ul><li>{{ basepath }} - a path to the top level directory of the generated site with trailing slash, relative to the current html file</li>\n<li>{{ resourcepath }} - a path to the gallery resource directory, relative to the current html file. This will be mostly empty (since the html page is in the resource directory), except for the top level index.html file, which necessarily draws resources from a subdirectory</li>\n<li>{{ resolution }} - a list of horizontal resolutions, as specified in the config. This is a single string with space-delimited values</li>\n<li>{{ videoformats }} - a list of video codecs that are generated, as defined in the config. This is also a single string with space-delimited values</li>\n<li>{{ content }} - where the text/images will go</li>\n<li>{{ sitetitle }} - a global title for your site, as specified in the config</li>\n<li>{{ gallerytitle }} - the title of the current gallery. This is just taken from the folder name</li>\n<li>{{ navigation }} - a nested html menu generated from the folder structure. Does not include wrapping ul tag so you can use your own id</li>\n<li>{{ disqus_shortname }} - your disqus shortname, as specified in the config</li>\n<li>{{ disqus_identifier }} - the disqus_identifier, which is just the relative path of the current gallery</li>\n</ul><p><strong>post-template.html</strong> contains the html fragment for each individual image. It has access to the following built-in variables:</p>\n\n<ul><li>{{ imageurl }} - url of the <em>directory</em> which contains the image/video resources, relative to the current html file.\n\n<ul><li>For images, this folder will contain all the scaled versions of the images, where the file name is simply the width of the image - eg. 640.jpg</li>\n<li>For videos, this folder will contain scaled videos for each resolution <em>and</em> video codec. The naming convention here is size-codec.extension - eg. 640-h264.mp4</li>\n<li>For videos, this folder will additionally contain scaled images in the same nomenclature (eg. 640.jpg) to be used as posters prior to video load</li>\n</ul></li>\n<li>{{ imagewidth }} - maximum width that the source image can be downscaled to</li>\n<li>{{ imageheight }} - maximum height, based on aspect ratio and max width</li>\n<li>{{ type }} - the type of media to display, this is a string that can either be \"image\" or \"video\"</li>\n<li>{{ textcolor }} - color of the text, either extracted from the source image or specified in config</li>\n<li>{{ backgroundcolor }} - background color, either extracted from the source image or specified in config</li>\n</ul><p>in addition to these, any variables specified in the YAML metadata of the post will also be available to the post template, eg:</p>\n\n<pre><code>---\nmycustomvar: foo\n---\n</code></pre>\n\n<p>this will cause {{ mycustomvar }} to be replaced by \"foo\", in this particular post</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/Jack000/Expose#additional-notes\"><span class=\"octicon octicon-link\"></span></a>Additional notes:</h4>\n\n<p>Specify default values, in case of unset template variables in the form {{foo:bar}} eg:</p>\n\n<pre><code>{{width:50}}\n</code></pre>\n\n<p>will set width to 50 if no specific value has been assigned to it by the time page generation has finished.</p>\n\n<p>Any unused {{ xxx }} variables that did not have defaults are removed from the generated page.</p>\n\n<p>Any non-template files (css, images, javascript) in the theme directory are simply copied into the _site directory.</p>\n\n<p>To avoid additional dependencies, the YAML parser and template engine is simply a sed regex. This means that YAML metadata must take the form of simple key:value pairs, and more complex liquid template syntax are not available.</p>\n',1),(147,'Quench: The Gulp file generator.','http://quenchjs.com/',1,0,'\n			<p class=\"disclaimer\">All the information on this website is published in good faith and for general information purpose only. We do not make any warranties about the completeness, reliability and accuracy of this information. Any action you take upon the information on our website is strictly at your own risk. and we will not be liable for any losses and damages in connection with the use of our website.</p>\n		',1),(148,'How to split large audio files on Linux','https://www.howtoforge.com/tutorial/how-to-split-large-audio-files-on-linux/',0,0,'\n\n\n<p>It is often the case that we want to split an “one-piece” audio recording into smaller files. A live concert could be broken down into songs so that you can burn it on a CD, or an interview can be separated into thematic sections. Whatever the case, here are four different ways to do it:</p>\n\n<h2>Brasero</h2>\n<p>Brasero which is present in most Linux distributions that use the GNOME desktop environment is able to do the job just fine. I am using the latest podcast from Resident Advisor to demonstrate the splitting of an audio file that exceed one hour in length. You can add the file on the “new audio disk project” screen and then select it. After having done that, you may press the “cutter” icon located on the top.</p>\n<p><a class=\"fancybox\" href=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/big/pic_1.png\"><img src=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/pic_1.png\" alt=\"pic_1.png\" /></a></p>\n<p>The slicer that opens up offers a set of options for the audio file splitting. You may use the playback feature to listen to the file and decide the slice points yourself, split tracks on a fixed number of length, split the file on a fixed number of parts, and finally let Brasero detect silence and auto-split the file (this may not work well in live recordings or DJ sessions where no silence is contained). You may toggle between those options by choosing them through the “Method” options menu.</p>\n<p><a class=\"fancybox\" href=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/big/pic_2.png\"><img src=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/pic_2.png\" alt=\"pic_2.png\" /></a></p>\n<p>If you\'re a KDE kind of guy, K3b offers a similar set of options for splitting audio files.</p>\n\n<h2>Mp3splt</h2>\n<p>If Brasero\'s options aren\'t enough to achieve a good splitting, you can use Mp3splt which is a tool that offers a set of more advanced splitting options. Here are some examples on how to use Mp3splt meaningfully:</p>\n<p>a.) If there are silence points in your audio file, but there is just too much noise for Brasero to detect them, you can hop onto the “Type of Split” tab of Mp3splt and set the Threshold level at a higher point. This will render silence points recognizable by the software.</p>\n<p><a class=\"fancybox\" href=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/big/pic_3.png\"><img src=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/pic_3.png\" alt=\"pic_3.png\" /></a></p>\n<p>b.) Renaming every split file can be overwhelming, especially if the number of the resulting files is high. Mp3splt offers batch file naming with a good depth of options. These options can be found in the “Preferences &gt; Tags” tab. I used the source file as the basis and set options in regards to the upper and lower-case letters for each element of the name. Through the same menu, a genre tag can be defined which is important for the identification of audio in large collections.</p>\n<p><a class=\"fancybox\" href=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/big/pic_4.png\"><img src=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/pic_4.png\" alt=\"pic_4.png\" /></a></p>\n<p>c.) If you are using Audacity to locate the silence points through the waveform, you can save the labels and import them to Mp3splt as splitting points by pressing “Ctrl+I”. The tool can also use the popular .cue and .cddb playlist files to import splitting points.</p>\n\n<h2>Audacity</h2>\n<p>When it comes to audio files, there\'s (almost) nothing that you can\'t do with Audacity and splitting an audio file isn\'t an exception to this. Start by marking the different parts of the recording and adding labels to them. You can do this by choosing “Tracks &gt; Add Label at Selection” on the top panel menu.</p>\n<p><a class=\"fancybox\" href=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/big/pic_5.png\"><img src=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/pic_5.png\" alt=\"pic_5.png\" /></a></p>\n<p>If you want some help into locating the end/start of songs, Audacity offers the ability to detect silence points as well. You may find this option on “Analyze &gt; Silence Finder”. The tool offers good setup options such as the volume threshold and duration.</p>\n<p><a class=\"fancybox\" href=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/big/pic_6.png\"><img src=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/pic_6.png\" alt=\"pic_6.png\" /></a></p>\n<p>The final step is to export the individual files. Click on “File &gt; Export Multiple” This will open up a new window from where you can choose the exported file format, location, labels type etc. After setting everything, press the “Export” button and you\'re done!</p>\n<p><a class=\"fancybox\" href=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/big/pic_7.png\"><img src=\"https://www.howtoforge.com/images/how-to-split-large-audio-files-on-linux/pic_7.png\" alt=\"pic_7.png\" /></a></p>\n\n<div>\n<p><b>Share this page:</b></p>\n\n\n\n</div>\n',1),(149,'Setting up Master-Master Replication with MySQL on Debian 8 (Jessie)','https://www.howtoforge.com/tutorial/mysql-master_master-replication-on-debian-jessie/',1,0,'\n\n\n<p>This tutorial describes a replicated MySQL setup (Mater/Master replication) with 2 nodes where data can be read and written to both nodes at the same time. MySQL takes care to replicate the data to the other node and ensures that primary auto increment keys don\'t collide.</p>\n<p>Since version 5, MySQL comes with built-in support for master-master replication, solving the problem that can happen with self-generated keys. In former MySQL versions, the problem with master-master replication was that conflicts arose immediately if node A and node B both inserted an auto-incrementing key on the same table. The advantages of master-master replication over the traditional master-slave replication are that you don\'t have to modify your applications to make write accesses only to the master, and that it is easier to provide high-availability because if the master fails, you still have the other master.</p>\n\n<h2>1 Preliminary Note</h2>\n<p>In this tutorial I will show how to replicate the database <span class=\"system\">exampledb</span> from the server <span class=\"system\">server1.example.com</span> with the IP address <span class=\"system\">192.168.1.101</span> to the server <span class=\"system\">server2.example.com</span> with the IP address <span class=\"system\">192.168.1.102</span> and vice versa. Each system is the slave of the other master and the master of the other slave at the same time. Both systems are running Debian 8; however, the configuration should apply to almost all distributions with little or no modifications.</p>\n\n<h2>2 Installing MySQL 5.5</h2>\n<p>If MySQL isn\'t already installed on <span class=\"system\">server1</span> and <span class=\"system\">server2</span>, install it now:</p>\n<p class=\"highlight\">server1/server2:</p>\n<p class=\"command\">apt-get -y install mysql-server-5.5 mysql-client-5.5</p>\n<p>To make sure that the replication can work, we must make MySQL listen on all interfaces, therefore we comment out the line <span class=\"system\">bind-address = 127.0.0.1</span> in <span class=\"system\">/etc/mysql/my.cnf</span>:</p>\n<p><span class=\"highlight\">server1/server2:</span></p>\n<p class=\"command\">nano /etc/mysql/my.cnf</p>\n<pre>[...]\r\n# Instead of skip-networking the default is now to listen only on\r\n# localhost which is more compatible and is not less secure.\r\n#bind-address           = 127.0.0.1\r\n[...]</pre>\n<p>Restart MySQL afterwards:</p>\n<p><span class=\"highlight\">server1/server2:</span></p>\n<p class=\"command\">service mysql restart</p>\n<p>Then check with</p>\n<p><span class=\"highlight\">server1/server2:</span></p>\n<p class=\"command\">netstat -tap | grep mysql</p>\n<p>that MySQL is really listening on all interfaces:</p>\n<p class=\"system\">netstat -tap | grep mysql<br />tcp 0 0 *:mysql *:* LISTEN 15437/mysqld<br />server1:~#</p>\n<p>Now we set up a replication user <span class=\"system\">slave2_user</span> that can be used by <span class=\"system\">server2</span> to access the MySQL database on <span class=\"system\">server1.</span></p>\n<p><span class=\"highlight\">server1:</span></p>\n<p>Login to the MySQL shell:</p>\n\n<p class=\"command\">mysql --defaults-file=/etc/mysql/debian.cnf</p>\n<p>On the MySQL shell, run the following commands:</p>\n<p><span class=\"highlight\">server1: </span></p>\n<p class=\"command\">GRANT REPLICATION SLAVE ON *.* TO repl@\'%\' IDENTIFIED BY \'secretpassword\';<br />FLUSH PRIVILEGES;<br />quit;</p>\n<p>Replace the word \"<em>secretpassword</em>\" with a secure password of your choice. Now we do the last two steps again on <span class=\"system\">server2</span>:</p>\n<p class=\"highlight\">server2:</p>\n<p class=\"command\">mysql --defaults-file=/etc/mysql/debian.cnf</p>\n<p class=\"command\"><span>GRANT REPLICATION SLAVE ON *.* TO repl@\'%\' IDENTIFIED BY \'</span><span>secretpassword</span><span>\';</span><br />FLUSH PRIVILEGES;<br />quit;</p>\n<p><span>Replace the word \"</span><em>secretpassword</em><span>\" with a secure password here as well. Note down the passwords as we need them later.</span> </p>\n\n<h2>3 Some Notes</h2>\n<p>In the following I will assume that both MySQL servers are empty (don\'t contain any database yet except of the \'mysql\' database).</p>\n<p>If that\'s not the case on your server, then you have to lock and dump the databases on the first server and import them on the second one before you continue. Don\'t unlock the databases before the replication is setup. Below a few commands that show how to copy over all databases to a new server in case you don\'t start with a \"clean\" MySQL setup.</p>\n<p>Example on how to lock all database tables in a MySQL database.</p>\n<pre>FLUSH TABLES WITH READ LOCK;<br />SET GLOBAL read_only = ON;</pre>\n<p> Example on how to dump all databases into a file all_databases.sql.</p>\n<p class=\"command\">mysqldump --defaults-file=/etc/mysql/debian.cnf -cCeQ --hex-blob --quote-names --routines --events --triggers --all-databases -r all_databases.sql</p>\n<p>Example on how to import all tables on the second server from file all_databses.sql.</p>\n<p class=\"command\">mysql --defaults-file=/etc/mysql/debian.cnf &lt; all_databases.sql</p>\n\n<h2>4 Setting Up Replication</h2>\n<p>Now we set up master-master replication in <span class=\"system\">/etc/mysql/my.cnf</span>. The crucial configuration options for master-master replication are <span class=\"system\">auto_increment_increment</span> and <span class=\"system\">auto_increment_offset</span>:</p>\n<ul><li><span class=\"system\">auto_increment_increment</span> controls the increment between successive AUTO_INCREMENT values.</li>\n<li><span class=\"system\">auto_increment_offset</span> determines the starting point for AUTO_INCREMENT column values.</li>\n</ul><p>Let\'s assume we have N MySQL nodes (N=2 in this example), then <span class=\"system\">auto_increment_increment</span> has the value N on all nodes, and each node must have a different value for <span class=\"system\">auto_increment_offset</span> (1, 2, ..., N).</p>\n<p>Now let\'s configure our two MySQL nodes:</p>\n<p class=\"highlight\">server1:</p>\n<p class=\"command\">nano /etc/mysql/my.cnf</p>\n<p>Search for the section that starts with <span class=\"system\">[mysqld]</span>, and put the following options into it (commenting out all existing <b>conflicting</b> options):</p>\n<pre>[...]\r\n[mysqld]\r\n<br /># Unique Server ID<br />server-id = 1</pre><p># Do not replicate the following databases<br />binlog-ignore-db = mysql<br />replicate-ignore-db = mysql</p><p># Auto increment offset<br />auto-increment-increment = 2</p><p># Do not replicate sql queries for the local server ID<br />replicate-same-server-id = 0</p><p># Beginne automatisch inkrementelle Werte mit 1<br />auto-increment-offset = 1</p><p># Delete binlog data after 10 days<br />expire_logs_days = 10</p><p># Max binlog size<br />max_binlog_size = 500M</p><p># Binlog file path<br />log_bin = /var/log/mysql/mysql-bin.log</p><p>[...]</p>\n<p>Then restart MySQL:</p>\n<p><span class=\"highlight\">server1:</span></p>\n<p class=\"command\">service mysql restart</p>\n<p>Now do the same on <span class=\"system\">server2</span>:</p>\n<p class=\"highlight\">server2:</p>\n<p class=\"command\">nano /etc/mysql/my.cnf</p>\n<pre>[...]</pre><p># Unique Server ID<br />server-id = 2</p><p># Do not replicate the following databases<br />binlog-ignore-db = mysql<br />replicate-ignore-db = mysql</p><p># Auto increment offset<br />auto-increment-increment = 2</p><p># Do not replicate sql queries for the local server ID<br />replicate-same-server-id = 0</p><p># Beginne automatisch inkrementelle Werte mit 1<br />auto-increment-offset = 2</p><p># Delete binlog data after 10 days<br />expire_logs_days = 10</p><p># Max binlog size<br />max_binlog_size = 500M</p><p># Binlog file path<br />log_bin = /var/log/mysql/mysql-bin.log</p><p>[...]</p>\n<p><span class=\"highlight\">server2:</span></p>\n<p class=\"command\">service mysql restart</p>\n<p>Next we lock the <span class=\"system\">exampledb</span> database on <span class=\"system\">server1</span>, find out about the master status of <span class=\"system\">server1</span>, create an SQL dump of <span class=\"system\">exampledb</span> (that we will import into <span class=\"system\">exampledb</span> on <span class=\"system\">server2</span> so that both databases contain the same data), and unlock the database so that it can be used again:</p>\n<p class=\"highlight\">server2:</p>\n<p>Now we start the replication on Server 2. Open the MySQL shell:</p>\n<p class=\"command\"><span>mysql --defaults-file=/etc/mysql/debian.cnf</span></p>\n<p><span>And execute the following SQL command to activate the replication from server1 to server2:</span></p>\n<pre><span>CHANGE MASTER TO MASTER_HOST=\'192.168.1.101\', MASTER_USER=\'repl\', MASTER_PASSWORD=\'secretpassword\';</span></pre>\n<p>Replace <em>secretpassword</em> with the password for the <em>repl</em> MySQL user that you have set in chapter 2.</p>\n<p>Now check the slave status by executing the command \"show slave status\\G\" in the MySQL shell.</p>\n<p class=\"command\">show slave status\\G</p>\n<p>The output will be similar to this:</p>\n<pre>mysql&gt; show slave status\\G<br />*************************** 1. row ***************************<br />Slave_IO_State:<br />Master_Host: 192.168.1.101<br />Master_User: repl<br />Master_Port: 3306<br />Connect_Retry: 60<br />Master_Log_File: mysql-bin.000001<br />Read_Master_Log_Pos: 107<br />Relay_Log_File: mysqld-relay-bin.000003<br />Relay_Log_Pos: 253<br />Relay_Master_Log_File: mysql-bin.000001<br />Slave_IO_Running: No<br />Slave_SQL_Running: No<br />Replicate_Do_DB:<br />Replicate_Ignore_DB: mysql<br />Replicate_Do_Table:<br />Replicate_Ignore_Table:<br />Replicate_Wild_Do_Table:<br />Replicate_Wild_Ignore_Table:<br />Last_Errno: 0<br />Last_Error:<br />Skip_Counter: 0<br />Exec_Master_Log_Pos: 107<br />Relay_Log_Space: 410<br />Until_Condition: None<br />Until_Log_File:<br />Until_Log_Pos: 0<br />Master_SSL_Allowed: No<br />Master_SSL_CA_File:<br />Master_SSL_CA_Path:<br />Master_SSL_Cert:<br />Master_SSL_Cipher:<br />Master_SSL_Key:<br />Seconds_Behind_Master: NULL<br />Master_SSL_Verify_Server_Cert: No<br />Last_IO_Errno: 0<br />Last_IO_Error:<br />Last_SQL_Errno: 0<br />Last_SQL_Error:<br />Replicate_Ignore_Server_Ids:<br />Master_Server_Id: 1<br />1 row in set (0.00 sec)</pre>\n<p>The Lines that you should check are these:</p>\n<pre>Master_Host: 192.168.1.101<br />Master_User: repl<br />Master_Port: 3306<br />Master_Log_File: mysql-bin.000001<br />Relay_Log_File: mysqld-relay-bin.000003<br />Slave_IO_Running: No<br />Slave_SQL_Running: No</pre>\n<p>Now start the replication with this command on the MySQL shell:</p>\n<p class=\"command\">start slave;</p>\n<p>and then check the slave status again:</p>\n<p class=\"command\"><span>show slave status\\G</span></p>\n<p>The following two lines should show \"yes\" now:</p>\n<pre>Slave_IO_Running: Yes<br />Slave_SQL_Running: Yes<br />Seconds_Behind_Master: 0</pre>\n<p>If \"Seconds_Behind_Master\" is not 0, then wait a few seconds and check the status again. This field shows if master and slave are in sync.</p>\n<p>For the next step, we need to know the values of \"Master_Log_File\" and \"Read_Master_Log_Pos\" the \"<span>show slave status\\G\" command. In my case these are:</span></p>\n<pre><span>Master_Log_File: mysql-bin.000001<br />Read_Master_Log_Pos: 107<br /></span></pre>\n<p>Write down the values that you get on your server, we need it for the next step on server 1.</p>\n<p>Afterward you can leave the MySQL shell:</p>\n<p class=\"command\">quit</p>\n\n<p><span class=\"highlight\">server1:</span></p>\n<p>We continue on the first server, open the MySQL shell on server1:</p>\n<p class=\"command\"><span>mysql --defaults-file=/etc/mysql/debian.cnf</span></p>\n<p>And execute the following MySQL command:</p>\n<pre>CHANGE MASTER TO MASTER_HOST=\'192.168.1.102\', MASTER_USER=\'repl\', MASTER_PASSWORD=\'secretpassword\', MASTER_LOG_FILE=\'mysql-bin.000001\', MASTER_LOG_POS=107;</pre>\n<p>You have to replace a few things in the above command:</p>\n<ol><li>The IP address has to be the IP of your second MySQL server.</li>\n<li>The password \"secretpassword\" has to be the one that you have choosen in chapter 2 for the user repl.</li>\n<li>The MASTER_LOG_FILE and MASTER_LOG_POS have to be the values that we have written down in the last step.</li>\n</ol><p>Now check with:</p>\n<p class=\"command\"><span>show slave status\\G</span></p>\n<p>on the MySQL shell if there are no errors.</p>\n<pre>mysql&gt; show slave status\\G<br />*************************** 1. row ***************************<br />Slave_IO_State:<br />Master_Host: 192.168.1.102<br />Master_User: repl<br />Master_Port: 3306<br />Connect_Retry: 60<br />Master_Log_File: mysql-bin.000001<br />Read_Master_Log_Pos: 107<br />Relay_Log_File: mysqld-relay-bin.000001<br />Relay_Log_Pos: 4<br />Relay_Master_Log_File: mysql-bin.000001<br />Slave_IO_Running: No<br />Slave_SQL_Running: No<br />Replicate_Do_DB:<br />Replicate_Ignore_DB: mysql<br />Replicate_Do_Table:<br />Replicate_Ignore_Table:<br />Replicate_Wild_Do_Table:<br />Replicate_Wild_Ignore_Table:<br />Last_Errno: 0<br />Last_Error:<br />Skip_Counter: 0<br />Exec_Master_Log_Pos: 107<br />Relay_Log_Space: 107<br />Until_Condition: None<br />Until_Log_File:<br />Until_Log_Pos: 0<br />Master_SSL_Allowed: No<br />Master_SSL_CA_File:<br />Master_SSL_CA_Path:<br />Master_SSL_Cert:<br />Master_SSL_Cipher:<br />Master_SSL_Key:<br />Seconds_Behind_Master: NULL<br />Master_SSL_Verify_Server_Cert: No<br />Last_IO_Errno: 0<br />Last_IO_Error:<br />Last_SQL_Errno: 0<br />Last_SQL_Error:<br />Replicate_Ignore_Server_Ids:<br />Master_Server_Id: 0<br />1 row in set (0.00 sec)</pre>\n<p>And start the slave.</p>\n<p class=\"command\"><span>start slave;</span></p>\n<p>Check the slave status again:</p>\n<p class=\"command\"><span>show slave status\\G</span></p>\n<p>The following two lines should show \"yes\" now:</p>\n<pre>Slave_IO_Running: Yes<br />Slave_SQL_Running: Yes</pre>\n<p>Afterward you can leave the MySQL shell:</p>\n<p class=\"command\">quit</p>\n<p>If nothing went wrong, MySQL master-master replication should now be working. If it isn\'t, please check <span class=\"system\">/var/log/syslog</span> for MySQL errors on <span class=\"system\">server1</span> and <span class=\"system\">server2</span>.</p>\n\n<h2>5 Test the Replication</h2>\n<p> Now it\'s time to test our replication setup. I will create a database <span>exampledb1 on server1 and then check on server2 if the database has been replicated to the second server:</span></p>\n<p class=\"highlight\">server1:</p>\n<p><span>Login to the MySQL console on server1 and create the database:</span></p>\n<p class=\"command\"><span>mysql --defaults-file=/etc/mysql/debian.cnf</span></p>\n<pre>CREATE DATABASE exampledb1;</pre>\n<p><span class=\"highlight\">server2</span></p>\n<p>Now login to the MySQL console on server2 and check if exampledb1 exists there now:</p>\n<p class=\"command\"><span>mysql --defaults-file=/etc/mysql/debian.cnf</span></p>\n<pre>show databases;</pre>\n<p>As we can see, the new database shows up on server2 as well.</p>\n<pre>mysql&gt; show databases;<br />+--------------------+<br />| Database |<br />+--------------------+<br />| information_schema |<br />| exampledb1 |<br />| mysql |<br />| performance_schema |<br />+--------------------+<br />4 rows in set (0.00 sec)</pre>\n<p>Next I\'ll test if the replication works in the other direction as well. We are still logged in on server2 and create there a database exampledb2:</p>\n<pre>CREATE DATABASE exampledb2;</pre>\n<p>Now go back to server1 and run \"show databases\" in the MySQL console:</p>\n<p><span class=\"highlight\">server1</span></p>\n<pre>show databases;</pre>\n<p>The result shows our new database exampledb2, so the replication is working in both directions.</p>\n<pre>mysql&gt; show databases;<br />+--------------------+<br />| Database |<br />+--------------------+<br />| information_schema |<br />| exampledb1 |<br />| exampledb2 |<br />| mysql |<br />| performance_schema |<br />+--------------------+<br />5 rows in set (0.01 sec)</pre>\n\n<h2>6 Links</h2>\n\n<div>\n<p><b>Share this page:</b></p>\n\n\n\n</div>\n',1),(150,'How to Convert Videos in Linux Using the Command Line','http://www.linux.com/learn/tutorials/857788-how-to-convert-videos-in-linux-using-the-command-line',0,0,'\n\n<p><img src=\"http://www.linux.com/images/stories/66866/Swapnil-cli-presets.jpg\" width=\"550\" height=\"369\" alt=\"Swapnil-cli-presets\" title=\"Figure 1: Handbrake presets.\" class=\"caption\" />Linux users don\'t need to transcode video files, because they have VLC and many other apps at their disposal that can play almost any media format out there. However, if you want to play videos on mobile devices such as your iPhone or iPad, or if you run streaming servers, then transcoding your videos into supported formats becomes essential.</p>\n<p>In a previous <a href=\"http://www.linux.com/learn/tutorials/852760-how-to-convert-multimedia-in-linux\">article</a>, I wrote about some GUI tools that can transcode videos with ease. There was a demand for CLI (command-line interface) tools for the same job. I confess that even if I ran a headless file server at home, I never really bothered to do it via an SSH session. I would mount the removable drive on my desktop and convert files using GUI tools. It\'s never late to do it differently.</p>\n<p dir=\"ltr\">In this article, I will share how I transcode video in Linux using CLI tools. Just keep one point in mind: this is just one of the “many” ways you can do it in Linux. There are dozens of such tools out there, and I am covering the one that I frequently use, because it’s easy and I’ve been using it for a long time. Some of the popular tools include ffmpeg, mencoder, and my favorite Handbrake. In this article, I will show how to use Handbrake to convert video files.</p>\n<h3 dir=\"ltr\">Using Handbrake to Transcode</h3>\n<p dir=\"ltr\">First you need to install the “Handbrake CLI” packages on your system. Most major distributions such as openSUSE, Arch, Fedora, and Ubuntu have this in their main repositories. If not, then you can enable the necessary third-party repo and install the software.</p>\n<p dir=\"ltr\">Now that Handbrake is installed, let’s take a closer look. First, open the terminal. This is the command you will need to convert any file:</p>\n<pre dir=\"ltr\">HandBrakeCLI - i PATH-OF-SOURCE-FILE -o NAME-OF-OUTPUT-FILE --\"preset-name\"</pre>\n<p dir=\"ltr\">Ok, this is not the only command you can use; there are different ways of doing it. For example, you can give Handbrake detailed instructions on how it should deal with audio, video, what bitrate it should use, and what codec it should deploy, but that would become intimidating for a new user, and I like to keep things simple. So, I use the above pattern.</p>\n<p dir=\"ltr\">In the above command “i” stands for input and “o” stands for output here. It\'s self-explanatory that you have to provide the path of the source file and the destination where you want to save the converted file. If you want to keep the transcoded file in the same folder, then just give the name of the file. Keep in mind that you do have to give the name and extension of the output file.</p>\n<p dir=\"ltr\">The \"Preset Name\" option is the reason I use Handbrake over others. If you have used the GUI version of Handbrake (as you can see in this <a href=\"http://www.linux.com/learn/tutorials/852760-how-to-convert-multimedia-in-linux\">article</a>), it comes with different presets so you can transcode your video for the targeted devices. If you don\'t use the preset (and I am not sure why you should not), then you will have to specify every single thing as I explained above and that, in my opinion, is overkill.</p>\n<p dir=\"ltr\">If you want to use the presets, it\'s extremely easy to find what you need, just run this command:</p>\n<pre dir=\"ltr\">[<a href=\"mailto:swapnil@arch%20~\">swapnil@arch ~</a>]$ HandBrakeCLI --preset-list</pre>\n<p>This will give a long and detailed output of all the available presets (see Figure 1 above).</p>\n<p dir=\"ltr\">You will notice presets for iPhone, iPod, iPad, Apple TV, and other such devices. I use the last preset -- \"High Profile” -- for two reasons: 1) In my experience, it offers the best quality; 2) It will work across devices -- from mobile to HDTV. If you run Kodi instead of Plex server, then I suggest this profile, because Kodi doesn\'t transcode videos on the server side.</p>\n<h3 dir=\"ltr\">Let\'s Do It</h3>\n<p dir=\"ltr\">I downloaded the “flv” format of a Linux Foundation video called<em> Distributed Genius</em> and wanted to transcode it into .mp4 format, which is the format that plays everywhere -- from Mac OS X to iPad and Kodi (Linux plays everything, so I am not worried about it).</p>\n<p dir=\"ltr\"><img src=\"http://www.linux.com/images/stories/66866/swapnil-encoding-crop.jpg\" width=\"550\" height=\"378\" alt=\"swapnil-encoding-crop\" title=\"Figure 2: Handbrake in action.\" class=\"caption\" />The file was downloaded to the Downloads folder in my home directory, and I wanted to save the transcoded file in the Videos folder, so this is the command I ran:</p>\n<pre dir=\"ltr\">[<a href=\"mailto:swapnil@arch%20~\">swapnil@arch ~</a>]$ HandBrakeCLI -i /home/swapnil/The\\ Distributed \\ Genius.flv -o /home/swapnil/Videos/the_dstributed_genius.mp4 --preset=\"High Profile\"</pre>\n<p dir=\"ltr\">Lo and behold, Handbrake will start transcoding your video (Figure 2). Then, HandBrake will tell you once the transcoding is finished (Figure 3).</p>\n<p dir=\"ltr\"><img src=\"http://www.linux.com/images/stories/66866/swapnil-encode-finished.jpg\" width=\"550\" height=\"389\" alt=\"swapnil-encode-finished\" title=\"Figure 3: Transcoding is complete.\" class=\"caption\" /></p>\n<p dir=\"ltr\">So, if you are planning to transcode some video, Handbrake is my easy to use, go-to solution. In the future, I will talk about other CLI tools for performing the same task. Let me know which tools you use, in the comments below.</p>',1),(151,'A CLI http client that will make you smile (by @radekpazdera)','http://radek.io/2015/10/20/httpie/',1,0,'<p>Good tools make great craftsmen. Just as a sculptor owns a range of different\nchisels and hammers to remove the precise amount of marble at a time, us\nprogrammers need a repertoire of little helpers that will take the mundane\ntasks out of the way so we can focus on our art.</p>\n\n<p>What makes a good programming tool? I say that it needs to be focused on doing\nwhatever it was designed to do <em>exceptionally well</em>. Just exactly what you\nneed, without compromises. There’s a whole lot of other things different people\nmight expect from their tools and that’s why there are so many.</p>\n\n<p>Surely, the sculptor would be able to get the statue done with just a\none-size-fits-all chisel and hammer. It might be a bit rough, but still a\nbeautiful piece. But it would probably take ages to complete, with periods of\nhorrible frustration when carving the eyelids with a clearly inadequate tool.</p>\n\n<p>If you’re doing back-end web development, <a href=\"http://httpie.org/\">httpie</a> might be\none the tools that are just right for you.</p>\n\n<h2>What is it?</h2>\n\n<p><strong>httpie</strong> is a command-line http client, much like cURL or wget. Written\nentirely in Python (using\n<a href=\"http://docs.python-requests.org/en/latest/\">requests</a> for the backend and\n<a href=\"http://pygments.org/\">pygments</a> for syntax highlighting), it’s well portable\nto many platforms, including the big three Windows, Linux and OSX.</p>\n\n<p>The first version was published by <a href=\"https://twitter.com/jkbrzt\">Jakub Roztocil</a>\nin 2012. And what really sets it apart is its user interface. It extends the\nbasic functions of curl or wget with things like pretty-printing and\nsyntax-highlighting that make all the difference. It recognises a few\nmost-commonly used formats, such as JSON and HTML and processes the output\naccordingly. All that from the comfort of your terminal.</p>\n\n<p>This is how it looks:</p>\n\n<a href=\"http://radek.io/assets/images/posts/httpie/upstream-example.png\">\n        <img src=\"http://radek.io/assets/images/posts/httpie/upstream-example.png\" alt=\"httpie vs. curl\" /></a>\n    <strong>httpie vs. curl</strong>: A comparison. (<a href=\"https://github.com/jkbrzt/httpie\">Source</a>)\n    <p><strong>httpie</strong> is open-source, distributed under the terms of the BSD licence.\nCheck out Jakub’s <a href=\"https://github.com/jkbrzt/httpie\">repository on Github</a> to\nsee the code and contribute!</p>\n\n<h2>Where do I get it?</h2>\n\n<p>The easiest way to get <strong>httpie</strong> is from <a href=\"https://pypi.python.org/pypi\">PyPI</a>\nusing the following cross-platform command:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">$ </span>pip install httpie</code></pre></div>\n\n<p>If you prefer using OS-level packaging instead, <strong>httpie</strong> is widely available\nas a package in many Linux distros and <a href=\"http://brew.sh/\">Homebrew</a> for OSX too.</p>\n\n<p>Check out all your options in the <a href=\"https://github.com/jkbrzt/httpie#installation\">project’s\nREADME</a>.</p>\n\n<h2>How it works?</h2>\n\n<p>The interface isn’t the simplest —— the http protocol has many things that need\nto be covered after all. But the design is intuitive and it <em>makes sense</em> in a\nway that you’ll remember it the first time you look at it. See the synopsis of\nthe <code>http</code> command below:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-bash\">http <span class=\"o\">[</span>OPTS<span class=\"o\">]</span> <span class=\"o\">[</span>METHOD<span class=\"o\">]</span> URL <span class=\"o\">[</span>REQUEST_ITEMS...<span class=\"o\">]</span></code></pre></div>\n\n<p>The only mandatory argument is the <strong>URL</strong>. Optionally, you can choose the\nmethod and provide several <em>request items</em> ——  additional parameters for your\nrequests. These might include extra headers, POST data, URL parameters, form\nfields and more. The <code>http</code> command also understands a variety of <code>--options</code>\nthat affect both how your request will and the response will be handled.</p>\n\n<p>The most basic usage therefore looks like this (mind you, there’s no <em>ie</em> at\nthe end of the command):</p>\n\n<div class=\"highlight\"><pre><code class=\"language-bash\">http http://radek.io/</code></pre></div>\n\n<p>The method falls back to <strong>GET</strong> by default, as you would probably expect, and\nGithub’s servers will be serving you the content of my website shortly after.\nThe headers are printed out along with the response; pretty simple.</p>\n\n<a href=\"http://radek.io/assets/images/posts/httpie/basic.png\">\n        <img src=\"http://radek.io/assets/images/posts/httpie/basic.png\" alt=\"httpie in the terminal\" /></a>\n    <strong>httpie</strong>: Downloading my homepage.\n    <h2>More examples</h2>\n\n<p>This is great, but <strong>httpie</strong> can do whole lot more. You’ll appreciate the\nconvenience particularly when sending requests slightly more elaborate than the\none above. Check out the following examples.</p>\n\n<h4>URL parameters</h4>\n\n<p>One of the things you can add to the request with <em>request items</em> are GET\nparameters. Use two <em>equals</em> signs between the name of the parameter and its\nvalue and httpie will take care of the rest.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-bash\">http https://httpbin.org/get <span class=\"nv\">foo</span><span class=\"o\">==</span>bar <span class=\"nv\">wicked</span><span class=\"o\">==</span>witch</code></pre></div>\n\n<p>The above command will produce something like this:</p>\n\n<a href=\"http://radek.io/assets/images/posts/httpie/get.png\">\n        <img src=\"http://radek.io/assets/images/posts/httpie/get.png\" alt=\"httpie GET example\" /></a>\n    <strong>Example 1</strong>: Adding GET parameters.\n    <h4>POST</h4>\n\n<p>When sending JSON data with a POST request, you can specify key-value parts of\nthe payload using a similar convention, but delimited with a single <em>equals</em>\nsign. When preceded by a colon, the value is interpreted as a non-string,\nallowing you to pass over numbers, arrays and even whole objects.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-bash\">http POST https://httpbin.org/post <span class=\"nv\">wicked</span><span class=\"o\">=</span>witch casts:<span class=\"o\">=</span><span class=\"s1\">\'[\"spells\", \"curses\"]\'</span> --json</code></pre></div>\n\n<p>Here’s the output:</p>\n\n<a href=\"http://radek.io/assets/images/posts/httpie/post.png\">\n        <img src=\"http://radek.io/assets/images/posts/httpie/post.png\" alt=\"httpie POST example\" /></a>\n    <strong>Example 2</strong>: Sending a JSON using POST.\n    <p>A colon on it’s own makes <strong>httpie</strong> interpret the particular <em>request item</em> as\nan additional header, attaching it to the request.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-bash\">http GET https://httpbin.org/headers User-Agent:<span class=\"s1\">\'Wicked Witch 1.0\'</span></code></pre></div>\n\n<p>This is what I got in my terminal:</p>\n\n<a href=\"http://radek.io/assets/images/posts/httpie/headers.png\">\n        <img src=\"http://radek.io/assets/images/posts/httpie/headers.png\" alt=\"httpie custom headers example\" /></a>\n    <strong>Example 3</strong>: Adding custom headers.\n    <h4>Authentication</h4>\n\n<p>One of the many options allows you to get past basic auth as follows:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-bash\">http GET https://httpbin.org/basic-auth/wicked/witch -a wicked:witch</code></pre></div>\n\n<p>And here’s the output:</p>\n\n<a href=\"http://radek.io/assets/images/posts/httpie/basic-auth.png\">\n        <img src=\"http://radek.io/assets/images/posts/httpie/basic-auth.png\" alt=\"httpie basic auth example\" /></a>\n    <strong>Example 4</strong>: Basic auth with httpie.\n    <p>This was of course just the tip of the iceberg. Head over to the <a href=\"https://github.com/jkbrzt/httpie/blob/master/README.rst\">project’s\nREADME</a> or the\ncommand’s <code>--help</code> for more examples and detailed explanations.</p>\n\n<h2>Summary</h2>\n\n<p>Whether you need to automate parts of your workflow with a quick bash script or\ntest something while developing an API, <strong>httpie</strong> is a great addition to your\nvirtual toolbox. It can’t really do much more than <code>curl</code> or <code>wget</code>, but it’s a\nwhole lot nicer. Don’t use a large hammer for the eyelids, give\n<a href=\"https://github.com/jkbrzt/httpie\">httpie</a> a go!</p>\n\n<p>Looking for more awesome tools? Check out my previous posts about\n<a href=\"http://radek.io/2014/08/25/ack/\">ack</a> and\n<a href=\"http://radek.io/2014/03/30/tco/\">tco</a>.</p>\n\n        ',1),(152,'The smallest PaaS implementation you\'ve ever seen','http://progrium.viewdocs.io/dokku/installation/',1,0,'\n          \n\n<h2>\n<a class=\"anchor\" href=\"http://progrium.viewdocs.io/dokku/installation/#what-is-dokku\"><span class=\"octicon octicon-link\"></span></a>What is Dokku?</h2>\n\n<p>Dokku is an extensible, open source Platform as a Service that runs on a single server of your choice.</p>\n\n<p>To start using Dokku, you\'ll need a system with that meets the following minimum requirements:</p>\n\n<ul><li>A fresh installation of <a href=\"http://www.ubuntu.com/download/\">Ubuntu 14.04 x64</a> with the FQDN set <sup>[1]</sup></li>\n<li>At least <code>1GB</code> of system memory <sup>[2]</sup></li>\n</ul><p>You can <em>optionally</em> have a domain name pointed at the host\'s IP, though this is not necessary.</p>\n\n<p>Dokku is designed for usage on a fresh installation of Ubuntu, and should install all necessary dependencies if installing via the bootstrap method.</p>\n\n<h3>\n<a class=\"anchor\" href=\"http://progrium.viewdocs.io/dokku/installation/#installing-the-latest-stable-version\"><span class=\"octicon octicon-link\"></span></a>Installing the latest stable version</h3>\n\n<p>To install the latest stable version of dokku, you can run the following shell commands:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># installs dokku via apt-get</span>\nwget https://raw.githubusercontent.com/progrium/dokku/v0.4.2/bootstrap.sh\nsudo DOKKU_TAG=v0.4.2 bash bootstrap.sh</pre></div>\n\n<p>The installation process takes about 5-10 minutes, depending upon internet connection speed.</p>\n\n<p>Once the installation is complete, you can open a browser to setup your SSH key and virtualhost settings. Open your browser of choice and navigate to the host\'s IP address - or the domain you assigned to that IP previously - and configure dokku via the web admin.</p>\n\n<p>Once you save your settings, the web admin will self-terminate and you should be able to run or deploy to the dokku installation.</p>\n\n<h3>\n<a class=\"anchor\" href=\"http://progrium.viewdocs.io/dokku/installation/#installing-via-other-methods\"><span class=\"octicon octicon-link\"></span></a>Installing via other methods</h3>\n\n<p>For various reasons, certain hosting providers may have other steps that should be preferred to the above. If hosted on any of the following popular hosts, please follow the linked to instructions:</p>\n\n<p>As well, you may wish to customize your installation in some other fashion. or experiment with vagrant. The guides below should get you started:</p>\n\n<hr /><ul><li><sup>[1]: To check whether your system has an fqdn set, run <code>sudo hostname -f</code></sup></li>\n<li><sup>[2]: If your system has less than 1GB of memory, you can use (<a href=\"http://progrium.viewdocs.io/dokku/advanced-installation\">this workaround</a>).</sup></li>\n</ul>',1),(153,'VQL - Data Analysis for Everyone','https://getvql.com/',1,0,'\n\n    <span></span>\n    \n    \n\n    \n	<span></span>\n    <div class=\"content-section-d\">\n\n        <div class=\"container\">\n            <div class=\"row\">\n\n                \n                <div class=\"col-lg-10 col-sm-12\">\n\n                    <h2 class=\"section-heading\">Every organization has data. VQL lets anyone explore their data, search, and find trends. No need to be a programmer.</h2>\n                    \n\n                </div>\n                \n\n            </div>\n\n        </div>\n        \n\n    </div>\n    \n\n    <div class=\"content-section-c\">\n\n        <div class=\"container\">\n            <div class=\"row\">\n\n                <div class=\"col-lg-6 col-sm-12\">\n\n					<div class=\"logo_holder\">\n						<div>\n							<p>SQL</p>\n							<img src=\"https://getvql.com/img/sql_logo.png\" width=\"110\" alt=\"\" /></div>\n						<div>\n							<p>CSV</p>\n							<img src=\"https://getvql.com/img/csv_logo.png\" width=\"80\" alt=\"\" /></div>\n					</div>\n\n                </div>\n                \n\n            </div>\n\n        </div>\n\n    </div>\n\n    <div class=\"content-section-a\">\n\n        <div class=\"container\">\n            <div class=\"row\">\n\n                <div class=\"col-lg-4 col-sm-6\">\n\n                    <h2 class=\"section-heading\">Instant Search</h2>\n                    <p class=\"lead\">VQL knows the types of your data so you can search text or compare numbers and dates, instantly.</p>\n                    <p><span>Let\'s explore 3 million Bike Share Rides in <br />New York City <span class=\"glyphicon glyphicon-arrow-right\"></span></span></p>\n\n                </div>\n                <div class=\"col-lg-8 col-sm-6\">\n\n                    <img class=\"img-responsive\" src=\"https://getvql.com/img/vql_search.gif\" alt=\"\" /></div>\n\n            </div>\n\n        </div>\n\n    </div>\n\n    <div class=\"content-section-b\">\n\n        <div class=\"container\">\n\n            <div class=\"row\">\n\n                <div class=\"col-lg-8 col-xs-12\">\n                    <img class=\"img-responsive\" src=\"https://getvql.com/img/hist_long_2.gif\" alt=\"\" /></div>\n\n                <div class=\"col-lg-4 col-xs-12\">\n                    <h2 class=\"section-heading\">Get the Big Picture</h2>\n                    <p class=\"lead\">Create histograms to find patterns and outliers. Where do we need to distribute more bikes? When?</p>\n                    <p>\n						<span class=\"lets_explore\">\n							<span class=\"glyphicon glyphicon-arrow-left\"></span>\n							\n							Penn Station is the most popular place to pick up a bike. Demand drops off on the weekends.\n						</span>\n					</p>\n                </div>\n\n            </div>\n\n        </div>\n\n    </div>\n\n    <div class=\"content-section-a\">\n\n        <div class=\"container\">\n            <div class=\"row\">\n\n                <div class=\"col-lg-4 col-sm-6\">\n\n                    <h2 class=\"section-heading\">Mix, Match, Plot</h2>\n                    <p class=\"lead\">Combine analyses and visualize the results to answer your questions.</p>\n                    <p>\n						<span class=\"lets_explore\">\n							What days of the week do cyclists ride around Central Park?\n							<span class=\"glyphicon glyphicon-arrow-right\"></span>\n						</span>\n					</p>\n\n                </div>\n                <div class=\"col-lg-8 col-sm-6\">\n\n                    <img class=\"img-responsive\" src=\"https://getvql.com/img/vql_match.gif\" alt=\"\" /></div>\n\n            </div>\n\n        </div>\n\n    </div>\n\n\n\n	<span></span>\n    <div class=\"banner\">\n\n        <div class=\"container\">\n\n            <div class=\"row\">\n				<p>\n					</p><h2>Get Started with VQL</h2>\n				\n                \n            </div>\n\n        </div>\n        \n\n    </div>\n    \n\n    \n    <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-lg-12\">\n                    <p class=\"copyright text-muted small\">© VQL Technologies Inc.</p>\n                </div>\n            </div>\n        </div>\n    ',1),(155,'letsencrypt/letsencrypt','https://github.com/letsencrypt/letsencrypt',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.rst\n    </h3>\n\n    <a></a>\n<h2><a class=\"anchor\" href=\"https://github.com/letsencrypt/letsencrypt#disclaimer\"><span class=\"octicon octicon-link\"></span></a>Disclaimer</h2>\n<p>This is a <strong>DEVELOPER PREVIEW</strong> intended for developers and testers only.</p>\n<p><strong>DO NOT RUN THIS CODE ON A PRODUCTION SERVER. IT WILL INSTALL CERTIFICATES\nSIGNED BY A TEST CA, AND WILL CAUSE CERT WARNINGS FOR USERS.</strong></p>\n<p>Browser-trusted certificates will be available in the coming months.</p>\n<p>For more information regarding the status of the project, please see\n<a href=\"https://letsencrypt.org\">https://letsencrypt.org</a>. Be sure to checkout the\n<a href=\"https://community.letsencrypt.org/t/frequently-asked-questions-faq/26#topic-title\">Frequently Asked Questions (FAQ)</a>.</p>\n<a></a>\n<h2><a class=\"anchor\" href=\"https://github.com/letsencrypt/letsencrypt#about-the-lets-encrypt-client\"><span class=\"octicon octicon-link\"></span></a>About the Let\'s Encrypt Client</h2>\n<p><a href=\"https://travis-ci.org/letsencrypt/letsencrypt\"><img alt=\"Travis CI status\" src=\"https://camo.githubusercontent.com/6771ad0a6b2ce5f2a9fecd78319bb7fa34d62837/68747470733a2f2f7472617669732d63692e6f72672f6c657473656e63727970742f6c657473656e63727970742e7376673f6272616e63683d6d6173746572\" /></a> <a href=\"https://coveralls.io/r/letsencrypt/letsencrypt\"><img alt=\"Coverage status\" src=\"https://camo.githubusercontent.com/596e32dbeeb6fc20f2a9ec4de0d9ca254b70be1c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6c657473656e63727970742f6c657473656e63727970742f62616467652e7376673f6272616e63683d6d6173746572\" /></a> <a href=\"https://readthedocs.org/projects/letsencrypt/\"><img alt=\"Documentation status\" src=\"https://camo.githubusercontent.com/795fd1c8e01fcec7e5c6a917fe1f853096c19fed/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c657473656e63727970742f62616467652f\" /></a> <a href=\"https://quay.io/repository/letsencrypt/letsencrypt\"><img alt=\"Docker Repository on Quay.io\" src=\"https://camo.githubusercontent.com/f753b02ce59b5d146a195a1ba2303a11d81a9721/68747470733a2f2f717561792e696f2f7265706f7369746f72792f6c657473656e63727970742f6c657473656e63727970742f737461747573\" /></a></p>\n<p>In short: getting and installing SSL/TLS certificates made easy (<a href=\"https://www.youtube.com/watch?v=Gas_sSB-5SU\">watch demo video</a>).</p>\n<p>The Let\'s Encrypt Client is a tool to automatically receive and install\nX.509 certificates to enable TLS on servers. The client will\ninteroperate with the Let\'s Encrypt CA which will be issuing browser-trusted\ncertificates for free.</p>\n<p>It\'s all automated:</p>\n<ul><li>The tool will prove domain control to the CA and submit a CSR (Certificate\nSigning Request).</li>\n<li>If domain control has been proven, a certificate will get issued and the tool\nwill automatically install it.</li>\n</ul><p>All you need to do to sign a single domain is:</p>\n<pre>user@www:~$ sudo letsencrypt -d www.example.org auth\n</pre>\n<p>For multiple domains (SAN) use:</p>\n<pre>user@www:~$ sudo letsencrypt -d www.example.org -d example.org auth\n</pre>\n<p>and if you have a compatible web server (Apache or Nginx), Let\'s Encrypt can\nnot only get a new certificate, but also deploy it and configure your\nserver automatically!:</p>\n<pre>user@www:~$ sudo letsencrypt -d www.example.org run\n</pre>\n<p><strong>Encrypt ALL the things!</strong></p>\n<a></a>\n<h3><a class=\"anchor\" href=\"https://github.com/letsencrypt/letsencrypt#current-features\"><span class=\"octicon octicon-link\"></span></a>Current Features</h3>\n<ul><li>web servers supported:<ul><li>apache/2.x (tested and working on Ubuntu Linux)</li>\n<li>nginx/0.8.48+ (under development)</li>\n<li>standalone (runs its own webserver to prove you control the domain)</li>\n</ul></li>\n<li>the private key is generated locally on your system</li>\n<li>can talk to the Let\'s Encrypt (demo) CA or optionally to other ACME\ncompliant services</li>\n<li>can get domain-validated (DV) certificates</li>\n<li>can revoke certificates</li>\n<li>adjustable RSA key bitlength (2048 (default), 4096, ...)</li>\n<li>optionally can install a http-&gt;https redirect, so your site effectively\nruns https only (Apache only)</li>\n<li>fully automated</li>\n<li>configuration changes are logged and can be reverted using the CLI</li>\n<li>text and ncurses UI</li>\n<li>Free and Open Source Software, made with Python.</li>\n</ul><a></a>\n<h3><a class=\"anchor\" href=\"https://github.com/letsencrypt/letsencrypt#installation-instructions\"><span class=\"octicon octicon-link\"></span></a>Installation Instructions</h3>\n<p>Official <strong>documentation</strong>, including <a href=\"https://letsencrypt.readthedocs.org/en/latest/using.html\">installation instructions</a>, is\navailable at <a href=\"https://letsencrypt.readthedocs.org\">https://letsencrypt.readthedocs.org</a>.</p>\n<a></a>\n<h3><a class=\"anchor\" href=\"https://github.com/letsencrypt/letsencrypt#links\"><span class=\"octicon octicon-link\"></span></a>Links</h3>\n<p>Documentation: <a href=\"https://letsencrypt.readthedocs.org\">https://letsencrypt.readthedocs.org</a></p>\n<p>Software project: <a href=\"https://github.com/letsencrypt/letsencrypt\">https://github.com/letsencrypt/letsencrypt</a></p>\n<p>Notes for developers: <a href=\"https://github.com/letsencrypt/letsencrypt/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a></p>\n<p>Main Website: <a href=\"https://letsencrypt.org/\">https://letsencrypt.org/</a></p>\n<p>IRC Channel: #letsencrypt on <a href=\"https://freenode.net\">Freenode</a></p>\n<p>Community: <a href=\"https://community.letsencrypt.org\">https://community.letsencrypt.org</a></p>\n<p>Mailing list: <a href=\"https://groups.google.com/a/letsencrypt.org/forum/#!forum/client-dev\">client-dev</a> (to subscribe without a Google account, send an\nemail to <a href=\"mailto:client-dev+subscribe@letsencrypt.org\">client-dev+subscribe@letsencrypt.org</a>)</p>\n\n',1),(156,'basecamp/trix','https://github.com/basecamp/trix',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#a-rich-text-editor-for-everyday-writing\"><span class=\"octicon octicon-link\"></span></a>A Rich Text Editor for Everyday Writing</h3>\n\n<p><strong>Compose beautifully formatted text in your web application.</strong> Trix is a WYSIWYG editor for writing messages, comments, articles, and lists—the simple documents most web apps are made of. It features a sophisticated document model, support for embedded attachments, and outputs terse and consistent HTML.</p>\n\n<p>Trix is an open-source project from <a href=\"https://basecamp.com/\">Basecamp</a>, the creators of <a href=\"http://rubyonrails.org/\">Ruby on Rails</a>. Millions of people trust their text to Basecamp, and we built Trix to give them the best possible editing experience. See Trix in action in the <a href=\"https://basecamp.com/3-is-coming\">all-new Basecamp 3</a>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#different-by-design\"><span class=\"octicon octicon-link\"></span></a>Different By Design</h3>\n\n<p>Most WYSIWYG editors are wrappers around HTML’s <code>contenteditable</code> and <code>execCommand</code> APIs, designed by Microsoft to support live editing of web pages in Internet Explorer 5.5, and <a href=\"https://blog.whatwg.org/the-road-to-html-5-contenteditable#history\">eventually reverse-engineered</a> and copied by other browsers.</p>\n\n<p>Because these APIs were never fully specified or documented, and because WYSIWYG HTML editors are enormous in scope, each browser’s implementation has its own set of bugs and quirks, and JavaScript developers are left to resolve the inconsistencies.</p>\n\n<p>Trix sidesteps these inconsistencies by treating <code>contenteditable</code> as an I/O device: when input makes its way to the editor, Trix converts that input into an editing operation on its internal document model, then re-renders that document back into the editor. This gives Trix complete control over what happens after every keystroke, and avoids the need to use <code>execCommand</code> at all.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#built-for-the-modern-web\"><span class=\"octicon octicon-link\"></span></a>Built for the Modern Web</h3>\n\n<p>Trix supports all evergreen, self-updating desktop and mobile browsers.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/c66115621bb27f1ceddff795ea11383277923514/68747470733a2f2f73617563656c6162732e636f6d2f62726f777365722d6d61747269782f6261736563616d702d747269782e7376673f617574683d3261336536396333616566393837383461383832386464643533336563303634\"><img src=\"https://camo.githubusercontent.com/c66115621bb27f1ceddff795ea11383277923514/68747470733a2f2f73617563656c6162732e636f6d2f62726f777365722d6d61747269782f6261736563616d702d747269782e7376673f617574683d3261336536396333616566393837383461383832386464643533336563303634\" alt=\"Browser Test Status\" /></a></p>\n\n<p>Trix is built with emerging web standards, notably <a href=\"http://www.w3.org/TR/custom-elements/\">Custom Elements</a>, <a href=\"https://dom.spec.whatwg.org/#mutation-observers\">Mutation Observer</a>, and <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects\">Promises</a>. Eventually we expect all browsers to implement these standards. In the meantime, Trix includes <a href=\"https://en.wikipedia.org/wiki/Polyfill\">polyfills</a> for missing functionality.</p>\n\n\n\n<p>Include the bundled <code>trix.css</code> and <code>trix.js</code> files in the <code>&lt;head&gt;</code> of your page.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">head</span>&gt;\n  …\n  &lt;<span class=\"pl-ent\">link</span> <span class=\"pl-e\">rel</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stylesheet<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/css<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>trix.css<span class=\"pl-pds\">\"</span></span>&gt;\n<span class=\"pl-s1\">  &lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/javascript<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>trix.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;</span>\n&lt;/<span class=\"pl-ent\">head</span>&gt;</pre></div>\n\n<p><code>trix.css</code> includes default styles for the Trix toolbar, editor, and attachments. Skip this file if you prefer to define these styles yourself.</p>\n\n<p>To use your own polyfills, or to target only browsers that support all of the required standards, include <code>trix-core.js</code> instead.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#creating-an-editor\"><span class=\"octicon octicon-link\"></span></a>Creating an Editor</h2>\n\n<p>Place an empty <code>&lt;trix-editor&gt;&lt;/trix-editor&gt;</code> tag on the page. Trix will automatically insert a separate <code>&lt;trix-toolbar&gt;</code> before the editor.</p>\n\n<p>Like an HTML <code>&lt;textarea&gt;</code>, <code>&lt;trix-editor&gt;</code> accepts <code>autofocus</code> and <code>placeholder</code> attributes. Unlike a <code>&lt;textarea&gt;</code>, <code>&lt;trix-editor&gt;</code> automatically expands vertically to fit its contents.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#integrating-with-forms\"><span class=\"octicon octicon-link\"></span></a>Integrating With Forms</h2>\n\n<p>To submit the contents of a <code>&lt;trix-editor&gt;</code> with a form, first define a hidden input field in the form and assign it an <code>id</code>. Then reference that <code>id</code> in the editor’s <code>input</code> attribute.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">form</span> …&gt;\n  &lt;<span class=\"pl-ent\">input</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hidden<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>content<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">trix</span><span class=\"pl-e\">-editor</span> <span class=\"pl-e\">input</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">trix</span><span class=\"pl-e\">-editor</span>&gt;\n&lt;/<span class=\"pl-ent\">form</span>&gt;</pre></div>\n\n<p>Trix will automatically update the value of the hidden input field with each change to the editor.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#populating-with-stored-content\"><span class=\"octicon octicon-link\"></span></a>Populating With Stored Content</h2>\n\n<p>To populate a <code>&lt;trix-editor&gt;</code> with stored content, include that content in the associated input element’s <code>value</code> attribute.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">form</span> …&gt;\n  &lt;<span class=\"pl-ent\">input</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">value</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Editor content goes here<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hidden<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>content<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">trix</span><span class=\"pl-e\">-editor</span> <span class=\"pl-e\">input</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">trix</span><span class=\"pl-e\">-editor</span>&gt;\n&lt;/<span class=\"pl-ent\">form</span>&gt;</pre></div>\n\n<p>Always use an associated input element to safely populate an editor. Trix won’t load any HTML content inside a <code>&lt;trix-editor&gt;…&lt;/trix-editor&gt;</code> tag.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#styling-formatted-content\"><span class=\"octicon octicon-link\"></span></a>Styling Formatted Content</h2>\n\n<p>To ensure what you see when you edit is what you see when you save, use a CSS class name to scope styles for Trix formatted content. Apply this class name to your <code>&lt;trix-editor&gt;</code> element, and to a containing element when you render stored Trix content for display in your application.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">trix</span><span class=\"pl-e\">-editor</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>trix-content<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">trix</span><span class=\"pl-e\">-editor</span>&gt;</pre></div>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>trix-content<span class=\"pl-pds\">\"</span></span>&gt;Stored content here&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<p>The default <code>trix.css</code> file includes styles for basic formatted content—including bulleted and numbered lists, code blocks, and block quotes—under the class name <code>trix-content</code>. We encourage you to use these styles as a starting point by copying them into your application’s CSS with a different class name.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#storing-attached-files\"><span class=\"octicon octicon-link\"></span></a>Storing Attached Files</h2>\n\n<p>Trix automatically accepts files dragged or pasted into an editor and inserts them as attachments in the document. Each attachment is considered <em>pending</em> until you store it remotely and provide Trix with a permanent URL.</p>\n\n<p>To store attachments, listen for the <code>trix-attachment-add</code> event. Upload the attached files with XMLHttpRequest yourself and set the attachment’s URL attribute upon completion. See the <a href=\"http://trix-editor.org/js/attachments.js\">attachment example</a> for detailed information.</p>\n\n<p>If you don’t want to accept dropped or pasted files, call <code>preventDefault()</code> on the <code>trix-file-accept</code> event, which Trix dispatches just before the <code>trix-attachment-add</code> event.</p>\n\n\n\n<p>You can manipulate a Trix editor programmatically through the <code>Trix.Editor</code> interface, available on each <code>&lt;trix-editor&gt;</code> element through its <code>editor</code> property.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> element <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.querySelector(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>trix-editor<span class=\"pl-pds\">\"</span></span>)\nelement.editor  <span class=\"pl-c\">// is a Trix.Editor instance</span></pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#understanding-the-document-model\"><span class=\"octicon octicon-link\"></span></a>Understanding the Document Model</h2>\n\n<p>The formatted content of a Trix editor is known as a <em>document</em>, and is represented as an instance of the <code>Trix.Document</code> class. To get the editor’s current document, use the <code>editor.getDocument</code> method.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.getDocument()  <span class=\"pl-c\">// is a Trix.Document instance</span></pre></div>\n\n<p>You can convert a document to an unformatted JavaScript string with the <code>document.toString</code> method.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-c1\">document</span> <span class=\"pl-k\">=</span> element.editor.getDocument()\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">toString</span>()  <span class=\"pl-c\">// is a JavaScript string</span></pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#immutability-and-equality\"><span class=\"octicon octicon-link\"></span></a>Immutability and Equality</h3>\n\n<p>Documents are immutable values. Each change you make in an editor replaces the previous document with a new document. Capturing a snapshot of the editor’s content is as simple as keeping a reference to its document, since that document will never change over time. (This is how Trix implements undo.)</p>\n\n<p>To compare two documents for equality, use the <code>document.isEqualTo</code> method.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-c1\">document</span> <span class=\"pl-k\">=</span> element.editor.getDocument()\n<span class=\"pl-c1\">document</span>.isEqualTo(element.editor.getDocument())  <span class=\"pl-c\">// true</span></pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#getting-and-setting-the-selection\"><span class=\"octicon octicon-link\"></span></a>Getting and Setting the Selection</h2>\n\n<p>Trix documents are structured as sequences of individually addressable characters. The index of one character in a document is called a <em>position</em>, and a start and end position together make up a <em>range</em>.</p>\n\n<p>To get the editor’s current selection, use the <code>editor.getSelectedRange</code> method, which returns a two-element array containing the start and end positions.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.getSelectedRange()  <span class=\"pl-c\">// [0, 0]</span></pre></div>\n\n<p>You can set the editor’s current selection by passing a range array to the <code>editor.setSelectedRange</code> method.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Select the first character in the document</span>\nelement.editor.setSelectedRange([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>])</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#collapsed-selections\"><span class=\"octicon octicon-link\"></span></a>Collapsed Selections</h3>\n\n<p>When the start and end positions of a range are equal, the range is said to be <em>collapsed</em>. In the editor, a collapsed selection appears as a blinking cursor rather than a highlighted span of text.</p>\n\n<p>For convenience, the following calls to <code>setSelectedRange</code> are equivalent when working with collapsed selections:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.setSelectedRange(<span class=\"pl-c1\">1</span>)\nelement.editor.setSelectedRange([<span class=\"pl-c1\">1</span>])\nelement.editor.setSelectedRange([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#directional-movement\"><span class=\"octicon octicon-link\"></span></a>Directional Movement</h3>\n\n<p>To programmatically move the cursor or selection through the document, call the <code>editor.moveCursorInDirection</code> or <code>editor.expandSelectionInDirection</code> methods with a <em>direction</em> argument. The direction can be either <code>\"forward\"</code> or <code>\"backward\"</code>.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Move the cursor backward one character</span>\nelement.editor.moveCursorInDirection(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>backward<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\">// Expand the end of the selection forward by one character</span>\nelement.editor.expandSelectionInDirection(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>forward<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#converting-positions-to-pixel-offsets\"><span class=\"octicon octicon-link\"></span></a>Converting Positions to Pixel Offsets</h3>\n\n<p>Sometimes you need to know the <em>x</em> and <em>y</em> coordinates of a character at a given position in the editor. For example, you might want to absolutely position a pop-up menu element below the editor’s cursor.</p>\n\n<p>Call the <code>editor.getClientRectAtPosition</code> method with a position argument to get a <a href=\"https://drafts.fxtf.org/geometry/#DOMRect\"><code>DOMRect</code></a> instance representing the left and top offsets, width, and height of the character at the given position.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rect <span class=\"pl-k\">=</span> element.editor.getClientRectAtPosition(<span class=\"pl-c1\">0</span>)\n[rect.<span class=\"pl-c1\">left</span>, rect.<span class=\"pl-c1\">top</span>]  <span class=\"pl-c\">// [17, 49]</span></pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#inserting-and-deleting-text\"><span class=\"octicon octicon-link\"></span></a>Inserting and Deleting Text</h2>\n\n<p>The editor interface provides methods for inserting, replacing, and deleting text at the current selection.</p>\n\n<p>To insert or replace text, begin by setting the selected range, then call one of the insertion methods below. Trix will first remove any selected text, then insert the new text at the start position of the selected range.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#inserting-plain-text\"><span class=\"octicon octicon-link\"></span></a>Inserting Plain Text</h3>\n\n<p>To insert unformatted text into the document, call the <code>editor.insertString</code> method.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Insert “Hello” at the beginning of the document</span>\nelement.editor.setSelectedRange([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>])\nelement.editor.insertString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#inserting-html\"><span class=\"octicon octicon-link\"></span></a>Inserting HTML</h3>\n\n<p>To insert HTML into the document, call the <code>editor.insertHTML</code> method. Trix will first convert the HTML into its internal document model. During this conversion, any formatting that cannot be represented in a Trix document will be lost.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Insert a bold “Hello” at the beginning of the document</span>\nelement.editor.setSelectedRange([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>])\nelement.editor.insertHTML(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;strong&gt;Hello&lt;/strong&gt;<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#inserting-a-file\"><span class=\"octicon octicon-link\"></span></a>Inserting a File</h3>\n\n<p>To insert a DOM <a href=\"http://www.w3.org/TR/FileAPI/#file\"><code>File</code></a> object into the document, call the <code>editor.insertFile</code> method. Trix will insert a pending attachment for the file as if you had dragged and dropped it onto the editor.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Insert the selected file from the first file input element</span>\n<span class=\"pl-k\">var</span> file <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.querySelector(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input[type=file]<span class=\"pl-pds\">\"</span></span>).file\nelement.editor.insertFile(file)</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#deleting-text\"><span class=\"octicon octicon-link\"></span></a>Deleting Text</h3>\n\n<p>If the current selection is collapsed, you can simulate deleting text before or after the cursor with the <code>editor.deleteInDirection</code> method.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// “Backspace” the first character in the document</span>\nelement.editor.setSelectedRange([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])\nelement.editor.deleteInDirection(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>backward<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\">// Delete the second character in the document</span>\nelement.editor.setSelectedRange([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])\nelement.editor.deleteInDirection(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>forward<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<p>To delete a range of text, first set the selected range, then call <code>editor.deleteInDirection</code> with either direction as the argument.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Delete the first five characters</span>\nelement.editor.setSelectedRange([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">4</span>])\nelement.editor.deleteInDirection(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>forward<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#working-with-attributes-and-indentation\"><span class=\"octicon octicon-link\"></span></a>Working With Attributes and Indentation</h2>\n\n<p>Trix represents formatting as sets of <em>attributes</em> applied across ranges of a document.</p>\n\n<p>By default, Trix supports the inline attributes <code>bold</code>, <code>italic</code>, <code>href</code>, and <code>strike</code>, and the block-level attributes <code>quote</code>, <code>code</code>, <code>bullet</code>, and <code>number</code>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#applying-formatting\"><span class=\"octicon octicon-link\"></span></a>Applying Formatting</h3>\n\n<p>To apply formatting to the current selection, use the <code>editor.activateAttribute</code> method.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.insertString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello<span class=\"pl-pds\">\"</span></span>)\nelement.editor.setSelectedRange([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">5</span>])\nelement.editor.activateAttribute(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bold<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<p>To set the <code>href</code> attribute, pass a URL as the second argument to <code>editor.activateAttribute</code>.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.insertString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Trix<span class=\"pl-pds\">\"</span></span>)\nelement.editor.setSelectedRange([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">4</span>])\nelement.editor.activateAttribute(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>href<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://trix-editor.org/<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#removing-formatting\"><span class=\"octicon octicon-link\"></span></a>Removing Formatting</h3>\n\n<p>Use the <code>editor.deactivateAttribute</code> method to remove formatting from a selection.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.setSelectedRange([<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>])\nelement.editor.deactivateAttribute(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bold<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#formatting-with-a-collapsed-selection\"><span class=\"octicon octicon-link\"></span></a>Formatting With a Collapsed Selection</h3>\n\n<p>If you activate or deactivate attributes when the selection is collapsed, your formatting changes will apply to the text inserted by any subsequent calls to <code>editor.insertString</code>.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.activateAttribute(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>italic<span class=\"pl-pds\">\"</span></span>)\nelement.editor.insertString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>This is italic<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#adjusting-the-indentation-level\"><span class=\"octicon octicon-link\"></span></a>Adjusting the Indentation Level</h3>\n\n<p>To adjust the indentation level of block-level attributes, call the <code>editor.increaseIndentationLevel</code> and <code>editor.decreaseIndentationLevel</code> methods.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.activateAttribute(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>quote<span class=\"pl-pds\">\"</span></span>)\nelement.editor.increaseIndentationLevel()\nelement.editor.decreaseIndentationLevel()</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#using-undo-and-redo\"><span class=\"octicon octicon-link\"></span></a>Using Undo and Redo</h2>\n\n<p>Trix editors support unlimited undo and redo. Successive typing and formatting changes are consolidated together at five-second intervals; all other input changes are recorded individually in undo history.</p>\n\n<p>Call the <code>editor.undo</code> and <code>editor.redo</code> methods to perform an undo or redo operation.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.undo()\nelement.editor.redo()</pre></div>\n\n<p>Changes you make through the editor interface will not automatically record undo entries. You can save your own undo entries by calling the <code>editor.recordUndoEntry</code> method with a description argument.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>element.editor.insertString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello<span class=\"pl-pds\">\"</span></span>)\nelement.editor.recordUndoEntry(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Insert Text<span class=\"pl-pds\">\"</span></span>)</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#loading-and-saving-editor-state\"><span class=\"octicon octicon-link\"></span></a>Loading and Saving Editor State</h2>\n\n<p>Serialize an editor’s state with <code>JSON.stringify</code> and restore saved state with the <code>editor.loadJSON</code> method. The serialized state includes the document and current selection, but does not include undo history.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Save editor state to local storage</span>\nlocalStorage[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>editorState<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">JSON</span>.stringify(element.editor)\n\n<span class=\"pl-c\">// Restore editor state from local storage</span>\nelement.editor.loadJSON(<span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">parse</span>(localStorage[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>editorState<span class=\"pl-pds\">\"</span></span>]))</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/basecamp/trix#observing-editor-changes\"><span class=\"octicon octicon-link\"></span></a>Observing Editor Changes</h2>\n\n<p>The <code>&lt;trix-editor&gt;</code> element emits several events which you can use to observe and respond to changes in editor state.</p>\n\n<ul><li><p><code>trix-initialize</code> fires when the <code>&lt;trix-editor&gt;</code> element is attached to the DOM and its <code>editor</code> object is ready for use.</p></li>\n<li><p><code>trix-change</code> fires whenever the editor’s contents have changed.</p></li>\n<li><p><code>trix-selection-change</code> fires any time the selected range changes in the editor.</p></li>\n<li><p><code>trix-focus</code> and <code>trix-blur</code> fire when the editor gains or loses focus, respectively.</p></li>\n<li><p><code>trix-file-accept</code> fires when a file is dropped or inserted into the editor. You can access the DOM <code>File</code> object through the <code>file</code> property on the event. Call <code>preventDefault</code> on the event to prevent attaching the file to the document.</p></li>\n<li><p><code>trix-attachment-add</code> fires after an attachment is added to the document. You can access the Trix attachment object through the <code>attachment</code> property on the event. If the <code>attachment</code> object has a <code>file</code> property, you should store this file remotely and set the attachment’s URL attribute. See the <a href=\"http://trix-editor.org/js/attachments.js\">attachment example</a> for detailed information.</p></li>\n<li><p><code>trix-attachment-remove</code> fires when an attachment is removed from the document. You can access the Trix attachment object through the <code>attachment</code> property on the event. You may wish to use this event to clean up remotely stored files.</p></li>\n</ul><p>Trix is open-source software, freely distributable under the terms of an <a href=\"https://github.com/basecamp/trix/blob/master/LICENSE\">MIT-style license</a>. The <a href=\"https://github.com/basecamp/trix\">source code is hosted on GitHub</a>.</p>\n\n<p>We welcome contributions in the form of bug reports, pull requests, or thoughtful discussions in the <a href=\"https://github.com/basecamp/trix/issues\">GitHub issue tracker</a>. Please see the <a href=\"https://github.com/basecamp/trix/blob/master/CONDUCT.md\">Code of Conduct</a> for our pledge to contributors.</p>\n\n<p>Trix was created by <a href=\"https://twitter.com/javan\">Javan Makhmali</a> and <a href=\"https://twitter.com/sstephenson\">Sam Stephenson</a>, with development sponsored by <a href=\"https://basecamp.com/\">Basecamp</a>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#building-from-source\"><span class=\"octicon octicon-link\"></span></a>Building From Source</h3>\n\n<p>Trix is written in <a href=\"https://github.com/jashkenas/coffee-script\">CoffeeScript</a> and compiled to JavaScript with <a href=\"https://github.com/javan/blade\">Blade</a>.</p>\n\n<p>To build Trix from source, you will need a recent version of Ruby. From inside a checkout of the Trix Git repository, issue the following commands to build the distributable files in <code>dist/</code>:</p>\n\n<pre><code>$ gem install bundler\n$ bundle install\n$ bin/blade build\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#developing-in-browser\"><span class=\"octicon octicon-link\"></span></a>Developing In-Browser</h3>\n\n<p>You can spawn a development web server to work on Trix in a more convenient fashion. Instead of manually rebuilding the source each time, just reload a page in your browser to see your changes.</p>\n\n<p>To develop in-browser, run the <code>bin/rackup</code> command and visit the displayed URL.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/basecamp/trix#running-tests\"><span class=\"octicon octicon-link\"></span></a>Running Tests</h3>\n\n<p>Make sure you’re set up to build from source using the instructions above. Then run <code>bin/blade</code> and visit the displayed URL to run the Trix test suite.</p>\n\n<hr /><p>© 2015 Basecamp, LLC.</p>\n',1),(157,'skavanagh/KeyBox','https://github.com/skavanagh/KeyBox',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>KeyBox is a web-based SSH console that centrally manages administrative access to systems. Web-based administration is combined with management and distribution of user\'s public SSH keys. Key management and administration is based on profiles assigned to defined users.</p>\n\n<p>Administrators can login using two-factor authentication with <a href=\"https://fedorahosted.org/freeotp\">FreeOTP</a> or <a href=\"https://github.com/google/google-authenticator\">Google Authenticator</a>. From there they can manage their public SSH keys or connect to their systems through a web-shell. Commands can be shared across shells to make patching easier and eliminate redundant command execution.</p>\n\n<p>KeyBox layers TLS/SSL on top of SSH and acts as a bastion host for administration. Protocols are stacked (TLS/SSL + SSH) so infrastructure cannot be exposed through tunneling / port forwarding. More details can be found in the following whitepaper: <a href=\"http://www.sans.org/reading-room/whitepapers/vpns/security-implications-ssh-1180\">The Security Implications of SSH</a>. Also, SSH key management is enabled by default to prevent unmanaged public keys and enforce best practices.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/afcb37ffb97f59e07f6f2ae007515c679ce1e118/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f7465726d732e706e67\"><img src=\"https://camo.githubusercontent.com/afcb37ffb97f59e07f6f2ae007515c679ce1e118/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f7465726d732e706e67\" alt=\"Terminals\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#prerequisites\"><span class=\"octicon octicon-link\"></span></a>Prerequisites</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#to-run-bundled-with-jetty\"><span class=\"octicon octicon-link\"></span></a>To Run Bundled with Jetty</h2>\n\n<p>If you\'re not big on the idea of building from source...</p>\n\n<p>Download keybox-jetty-vXX.XX.tar.gz</p>\n\n<p><a href=\"https://github.com/skavanagh/KeyBox/releases\">https://github.com/skavanagh/KeyBox/releases</a></p>\n\n<p>Export environment variables</p>\n\n<p>for Linux/Unix/OSX</p>\n\n<pre><code> export JAVA_HOME=/path/to/jdk\n export PATH=$JAVA_HOME/bin:$PATH\n</code></pre>\n\n<p>for Windows</p>\n\n<pre><code> set JAVA_HOME=C:\\path\\to\\jdk\n set PATH=%JAVA_HOME%\\bin;%PATH%\n</code></pre>\n\n<p>Start KeyBox</p>\n\n<p>for Linux/Unix/OSX</p>\n\n<pre><code>    ./startKeyBox.sh\n</code></pre>\n\n<p>for Windows</p>\n\n<pre><code>    startKeyBox.bat\n</code></pre>\n\n<p>How to Configure SSL in Jetty\n(it is a good idea to add or generate your own unique certificate)</p>\n\n<p><a href=\"http://wiki.eclipse.org/Jetty/Howto/Configure_SSL\">http://wiki.eclipse.org/Jetty/Howto/Configure_SSL</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#to-build-from-source\"><span class=\"octicon octicon-link\"></span></a>To Build from Source</h2>\n\n<p>Export environment variables</p>\n\n<pre><code>export JAVA_HOME=/path/to/jdk\nexport M2_HOME=/path/to/maven\nexport PATH=$JAVA_HOME/bin:$M2_HOME/bin:$PATH\n</code></pre>\n\n<p>In the directory that contains the pom.xml run</p>\n\n<pre><code>mvn package jetty:run\n</code></pre>\n\n<p>**Note: Doing a mvn clean will delete the H2 DB and wipe out all the data.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#managing-ssh-keys\"><span class=\"octicon octicon-link\"></span></a>Managing SSH Keys</h2>\n\n<p>By default KeyBox will overwrite all values in the specified authorized_keys file for a system.  You can disable key management by editing KeyBoxConfig.properties file and use KeyBox only as a bastion host.  This file is located in the jetty/keybox/WEB-INF/classes directory. (or the src/main/resources directory if building from source)</p>\n\n<pre><code>#enable key management  --set to false to disable\nkeyManagementEnabled=false\n</code></pre>\n\n<p>Also, the authorized_keys file is updated/refreshed periodically based on the relationships defined in the application.  If key management is enabled the refresh interval can be specified in the KeyBoxConfig.properties file.</p>\n\n<pre><code>#authorized_keys refresh interval in minutes (no refresh for &lt;=0)\nauthKeysRefreshInterval=120\n</code></pre>\n\n<p>By default KeyBox will generated and distribute the SSH keys managed by administrators while having them download the generated private. This forces admins to use strong passphrases for keys that are set on systems.  The private key is only available for download once and is not stored on the application side.  To disable and allow administrators to set any public key edit the KeyBoxConfig.properties.</p>\n\n<pre><code>#set to true to generate keys when added/managed by users and enforce strong passphrases set to false to allow users to set their own public key\nforceUserKeyGeneration=false\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#supplying-a-custom-ssh-key-pair\"><span class=\"octicon octicon-link\"></span></a>Supplying a Custom SSH Key Pair</h2>\n\n<p>KeyBox generates its own public/private SSH key upon initial startup for use when registering systems.  You can specify a custom SSH key pair in the KeyBoxConfig.properties file.</p>\n\n<p>For example:</p>\n\n<pre><code>#set to true to regenerate and import SSH keys  --set to true\nresetApplicationSSHKey=true\n\n#SSH Key Type \'dsa\' or \'rsa\'\nsshKeyType=rsa\n\n#private key  --set pvt key\nprivateKey=/Users/kavanagh/.ssh/id_rsa\n\n#public key  --set pub key\npublicKey=/Users/kavanagh/.ssh/id_rsa.pub\n\n#default passphrase  --leave blank if passphrase is empty\ndefaultSSHPassphrase=myPa$$w0rd\n</code></pre>\n\n<p>After startup and once the key has been registered it can then be removed from the system. The passphrase and the key paths will be removed from the configuration file.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#external-authentication\"><span class=\"octicon octicon-link\"></span></a>External Authentication</h2>\n\n<p>External Authentication can be enabled through the KeyBoxConfig.properties.</p>\n\n<p>For example:</p>\n\n<pre><code>#specify a external authentication module (ex: ldap-ol, ldap-ad).  Edit the jaas.conf to set connection details\njaasModule=ldap-ol\n</code></pre>\n\n<p>Connection details need to be set in the jaas.conf file</p>\n\n<pre><code>ldap-ol {\n    com.sun.security.auth.module.LdapLoginModule SUFFICIENT\n    userProvider=\"ldap://hostname:389/ou=example,dc=keybox,dc=com\"\n    userFilter=\"(&amp;(uid={USERNAME})(objectClass=inetOrgPerson))\"\n    authzIdentity=\"{cn}\"\n    useSSL=false\n    debug=false;\n};\n</code></pre>\n\n<p>Administrators will be added as they are authenticated and profiles of systems may be assigned by full-privileged users.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#auditing\"><span class=\"octicon octicon-link\"></span></a>Auditing</h2>\n\n<p>Auditing is disabled by default and is only a proof of concept.  Can be enabled in the KeyBoxConfig.properties.</p>\n\n<pre><code>#enable audit  --set to true to enable\nenableInternalAudit=true\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#using-keybox\"><span class=\"octicon octicon-link\"></span></a>Using KeyBox</h2>\n\n<p>Open browser to https://&lt;whatever ip&gt;:8443</p>\n\n<p>Login with</p>\n\n<pre><code>username:admin\npassword:changeme\n</code></pre>\n\n<p>Steps:</p>\n\n<ol><li>Create systems</li>\n<li>Create profiles</li>\n<li>Assign systems to profile</li>\n<li>Assign profiles to users</li>\n<li>Users can login to create sessions on assigned systems</li>\n<li>Start a composite SSH session or create and execute a script across multiple sessions</li>\n<li>Add additional public keys to systems</li>\n<li>Disable any administrative public key forcing key rotation.</li>\n<li>Audit session history</li>\n</ol><h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#screenshots\"><span class=\"octicon octicon-link\"></span></a>Screenshots</h2>\n\n<p><a href=\"https://camo.githubusercontent.com/29a689d3a3ef0385dd9a804e033a9b37a4aa2456/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6c6f67696e2e706e67\"><img src=\"https://camo.githubusercontent.com/29a689d3a3ef0385dd9a804e033a9b37a4aa2456/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6c6f67696e2e706e67\" alt=\"Login\" /></a></p>\n\n<p><a href=\"https://camo.githubusercontent.com/2fea6a92f5c64e1cd6ddc43e4e4c3e08c650350f/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f74776f2d666163746f722e706e67\"><img src=\"https://camo.githubusercontent.com/2fea6a92f5c64e1cd6ddc43e4e4c3e08c650350f/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f74776f2d666163746f722e706e67\" alt=\"Two-Factor\" /></a></p>\n\n<p><a href=\"https://camo.githubusercontent.com/3e36f1c623457ec02f71f9d5386f9a66c3b53c92/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6d6f72655f7465726d732e706e67\"><img src=\"https://camo.githubusercontent.com/3e36f1c623457ec02f71f9d5386f9a66c3b53c92/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6d6f72655f7465726d732e706e67\" alt=\"More Terminals\" /></a></p>\n\n<p><a href=\"https://camo.githubusercontent.com/6e146996215f2379670e41256ba907b0726f5614/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6d616e6167655f73797374656d732e706e67\"><img src=\"https://camo.githubusercontent.com/6e146996215f2379670e41256ba907b0726f5614/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6d616e6167655f73797374656d732e706e67\" alt=\"Manage Systems\" /></a></p>\n\n<p><a href=\"https://camo.githubusercontent.com/2de7542bef8baf33a9d32283aefec324cc4f508c/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6d616e6167655f75736572732e706e67\"><img src=\"https://camo.githubusercontent.com/2de7542bef8baf33a9d32283aefec324cc4f508c/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6d616e6167655f75736572732e706e67\" alt=\"Manage Users\" /></a></p>\n\n<p><a href=\"https://camo.githubusercontent.com/7afe0a6f32486674b1d3aec1d1536cd1c4444f73/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6d616e6167655f6b6579732e706e67\"><img src=\"https://camo.githubusercontent.com/7afe0a6f32486674b1d3aec1d1536cd1c4444f73/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f6d616e6167655f6b6579732e706e67\" alt=\"Define SSH Keys\" /></a></p>\n\n<p><a href=\"https://camo.githubusercontent.com/2c4f8f212cf9978b4b7c4db71d0848ac2296d699/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f64697361626c655f6b6579732e706e67\"><img src=\"https://camo.githubusercontent.com/2c4f8f212cf9978b4b7c4db71d0848ac2296d699/687474703a2f2f7373686b6579626f782e636f6d2f696d672f73637265656e73686f74732f6d656469756d2f64697361626c655f6b6579732e706e67\" alt=\"Disable SSH Keys\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#acknowledgments\"><span class=\"octicon octicon-link\"></span></a>Acknowledgments</h2>\n\n<p>Special thanks goes to these amazing projects which makes this (and other great projects) possible.</p>\n\n<p>Third-party dependencies are mentioned in the <a href=\"https://github.com/skavanagh/KeyBox/blob/master/3rdPartyLicenses.md\"><em>3rdPartyLicenses.md</em></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/skavanagh/KeyBox#author\"><span class=\"octicon octicon-link\"></span></a>Author</h2>\n\n<p><strong>Sean Kavanagh</strong></p>\n\n<p>(Follow me on twitter for release updates, but mostly nonsense)</p>\n',1),(158,'Voice Activated Light Switch | Arun Narasimhan','http://arunpn.com/projects/voice-activated-light-switch/',1,0,'\n\n            <h3>Building a Voice Activated Light Switch\r\n[Jan 25, 2015]</h3>      <hr /><p>You are in bed, warm and comfy, watching a movie. You have the covers pulled over, about to fall asleep. At that moment you realize that the lights are still on. Damn! Now you’ve got to decide whether to get up from the comfort of your bed to switch off the lights or let it stay on for the whole night and just fall asleep.</p>\n<p>I face this dilemma almost every night. Leaving the lights on causes a marked reduction in the quality of my sleep and more importantly makes me feel guilty. So I decided to fix this. The easiest way to fix it would have been to connect the lights to an extension cord and tape it to the bed frame. But where is the fun in that? <img src=\"http://arunpn.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":-)\" class=\"wp-smiley\" /> So I built a voice activated light switch. With this, all I need to do is just say “Lights off” from my bed and it turns off the lights.</p>\n<p>Here is a video of me and my friend Senthil trying it out on a lazy Sunday afternoon:</p>\n<p><iframe src=\"//www.youtube.com/embed/TbSk_V45KdU\" width=\"700\" height=\"500\" frameborder=\"0\">[embedded content]</iframe></p>\n<p>We have music running in the background to add environmental noise typical to a bedroom.</p>\n<p><span><strong>Technical details:</strong></span><br />The following diagram gives an overview of the whole thing.</p>\n<p><a href=\"http://107.170.211.19/wp-content/uploads/2015/02/LightSwitchOverview.jpg\"><img class=\"aligncenter wp-image-110 size-full\" src=\"http://107.170.211.19/wp-content/uploads/2015/02/LightSwitchOverview.jpg\" alt=\"LightSwitchOverview\" width=\"1001\" height=\"515\" /></a></p>\n<p> Components used:<br />* <a href=\"https://wit.ai/\">Wit.ai</a> (Speech Processing)<br />* <a href=\"http://amzn.to/1gWvAM2\">Raspberry Pi</a> (Compute device)<br />* <a href=\"http://amzn.to/1MuowTC\">Powerswitch Tail 2</a> (Relay Switch)</p>\n<p>A wit.ai instance is trained to understand basic voice commands and intents. This instance runs on the wit.ai cloud. Then a program is written to run on the Raspberry Pi. This program accepts voice input from the microphone and sends it to the wit.ai instance. The program then parses the response it got back from the wit.ai instance. From the intent that was identified by wit.ai, the program sends a command to the switching circuit to toggle the light switch. I have shared the source code and instructions to use here: <a href=\"https://github.com/arunpn123/VoiceActivatedLightSwitch.git\">Github repository</a></p>\n<p>Here is a picture of the whole switch setup sitting under my desk.</p>\n<p><a href=\"http://107.170.211.19/wp-content/uploads/2015/02/LightSwitchDeployment.jpg\"><img class=\"size-full wp-image-109 aligncenter\" src=\"http://107.170.211.19/wp-content/uploads/2015/02/LightSwitchDeployment.jpg\" alt=\"LightSwitchDeployment\" width=\"1000\" height=\"750\" /></a></p>\n<p><span><strong>Things that did not work:</strong></span></p>\n<p>For posterity’s sake, it is good to keep track of things that did not work. So here they are. Building a working prototype did not take more than a couple of days. But getting the speech recognition to work properly took some time.</p>\n<p>Initially, I wanted to keep the speech processing local. This would have the advantage of eliminating the latency involved in sending the voice command to an online service and getting the translation back. CMU Sphinx was the best one out there. But configuring it and training the model looked like it would take a lot of time. So I figured I would keep this as my last option.</p>\n<p>Next, I tried out Google’s speech recognition. Steven Hickson from Georgia Tech had published code that uses it [2]. This one could not understand my Indian accent properly. There were a bunch of hilarious instances. I wanted to name the device as Chitti [1]. But it identified itself several times as titty :-D. It understood my voice commands only like 30% of the time. After too many attempts trying to modulate my voice and use different sets of keywords, I chalked it up as not good for my use.</p>\n<p>Since I plan to use this device for a long time, I did not want to pass AC current through a homemade relay switch that I wire up. So I purchased the Powerswitch Tail.</p>\n<p><span><b><span>Credits:</span> </b></span><br />1. My brother Bharat with whom I bounced ideas off.<br />2. My roommates and friends Mukunthan, Senthil, Sivaguru, Shriram for testing the speech recognition.<br />3. My friend Sanjeev for recommending Wit.ai for speech recognition.</p>\n<p><span><b>References: </b></span><br />[1] Chitti is a fictional Andro-Humanoid robot in the movie <a href=\"http://en.wikipedia.org/wiki/Enthiran\">Endhiran</a>.<br />[2] <a href=\"https://github.com/StevenHickson/PiAUISuite\">https://github.com/StevenHickson/PiAUISuite</a><br />[3] <a href=\"http://computers.tutsplus.com/articles/how-to-control-a-lamp-with-voice-commands-and-a-raspberry-pi--mac-60825\">http://computers.tutsplus.com/articles/how-to-control-a-lamp-with-voice-commands-and-a-raspberry-pi–mac-60825</a></p>\n<p><strong>Source code</strong>:<br /><a href=\"https://github.com/arunpn123/VoiceActivatedLightSwitch.git\">https://github.com/arunpn123/VoiceActivatedLightSwitch.git</a></p>\n\n    ',1),(159,' Learning Golang: Build a Stock Notifier Â·  Kyle Redelinghuys','http://blog.ksred.me/post/learning-golang-stock-notifier/',1,0,'<p>I’ve been wanting to learn Golang for some while. I own the amazing, and very technical, <a href=\"http://www.amazon.com/gp/product/B007Y6KDTG?psc=1&amp;redirect=true&amp;ref_=oh_aui_search_detailpage\">Programming in Go</a> and have been making my way through it over time. I’ve found though that learning a language is much easier when you have a clear project you want to build out. I took a <a href=\"https://www.udemy.com/learn-go-the-programming-language-by-google/learn/\">short course on Udemy</a> to give me a primer on the basics of Go and then was ready to build.</p>\n\n<p>A non-trivial application I have been wanting to build for some time is a <a href=\"https://github.com/ksred/go-stock-notifier/\">stock notifier</a>.</p>\n\n<h3>The easy problem</h3>\n\n<p>I trade shares and want to keep on top of them throughout the day without manually having to check online. I want to be sent an email peridiocally, at intervals of my choosing, of a list of stocks I have chosen ordered by biggest gainers to biggest losers.</p>\n\n<h3>The slightly tougher problem</h3>\n\n<p>I want to be notified of daily trends in stocks. The trend is simple: every increasing or decreasing closing price over three days, and an increase in volume in one of the three days. I want this email to be sent to me before open or after close.</p>\n\n<hr /><p>After doing some research around data sources, I felt that a JSON API with basic information would more than suffice. Google provided some great data across all of the stocks I was interested in on the Johannesburg Stock Exchange, so I chose their officially defunct finance API. Althought it is no longer advertised, it is still available for use. One day it will be shut off, so I have made the program to be able to use a variety of APIs, with the ability to switch on the source. The idea\nwould be for the JSON to be parsed and cleaned according to the source, and for it to be stored in a suitable variable for use later.</p>\n\n<p>Go uses structs as storage for specific variables.  I wanted to make the config for the site as easy as possible, so I decided to use a JSON config file that would get read on program start up, and used throughout the lifecycle. The config file has the following format:</p>\n\n<div class=\"highlight\"><pre>{\n    <span>\"MailSMTPServer\"</span>    :   <span>\"mail.server.com\"</span>,\n    <span>\"MailSMTPPort\"</span>      :   <span>\"587\"</span>,\n    <span>\"MailUser\"</span>          :   <span>\"user@mail.com\"</span>,\n    <span>\"MailPass\"</span>          :   <span>\"plaintext_password\"</span>,\n    <span>\"MailRecipient\"</span>     :   <span>\"recipient@mail.com\"</span>,\n    <span>\"MailSender\"</span>        :   <span>\"sender@mail.com\"</span>,\n    <span>\"Symbols\"</span>           :   [<span>\"NASDAQ:GOOGL\"</span>, <span>\"NYSE:BLK\"</span>] <span>//Format: exhange:stock</span>\n    <span>\"UpdateInterval\"</span>    :   <span>\"100\"</span>, <span>// in seconds</span>\n    <span>\"TimeZone\"</span>          :   <span>\"America/New_York\"</span>,\n    <span>\"MySQLUser\"</span>         :   <span>\"mysql_user\"</span>,\n    <span>\"MySQLPass\"</span>         :   <span>\"mysql_password\"</span>,\n    <span>\"MySQLHost\"</span>         :   <span>\"mysql_ip\"</span>,\n    <span>\"MySQLPort\"</span>         :   <span>\"mysql_port\"</span> \n    <span>\"MySQLDB\"</span>           :   <span>\"mysql_database\"</span> \n}\n</pre></div>\n\n\n<p>Which is read into the the following matching struct:</p>\n\n<div class=\"highlight\"><pre><span>type</span> Configuration <span>struct</span> {\n    MailUser       <span>string</span>\n    MailPass       <span>string</span>\n    MailSMTPServer <span>string</span>\n    MailSMTPPort   <span>string</span>\n    MailRecipient  <span>string</span>\n    MailSender     <span>string</span>\n    Symbols        []<span>string</span>\n    UpdateInterval <span>string</span>\n    TimeZone       <span>string</span>\n    MySQLUser      <span>string</span>\n    MySQLPass      <span>string</span>\n    MySQLHost      <span>string</span>\n    MySQLPort      <span>string</span>\n    MySQLDB        <span>string</span>\n}\n</pre></div>\n\n\n<p>The symbols are a slice (slices in Go are equatable to arrays in other languages) and can be looped through. Go uses some pretty powerful JSON parsing built in, which maps JSON data to a struct. As such, each field in the struct has a matching field in the JSON. The config is then loaded:</p>\n\n<div class=\"highlight\"><pre>configuration <span>:=</span> Configuration{}\nloadConfig(<span>&amp;</span>configuration)\n\n<span>...</span>\n\n<span>func</span> loadConfig(configuration <span>*</span>Configuration) {\n    <span>// Get config</span>\n    file, _ <span>:=</span> os.Open(<span>\"config.json\"</span>)\n    decoder <span>:=</span> json.NewDecoder(file)\n    err <span>:=</span> decoder.Decode(<span>&amp;</span>configuration)\n    <span>if</span> err <span>!=</span> <span>nil</span> {\n    fmt.Println(<span>\"error:\"</span>, err)\n}\n</pre></div>\n\n\n<p>As every stock has certain known fields, these would be parsed into the struct objects and used as these variables for saving and data analysis. The structs were based on the Google API return values:</p>\n\n<div class=\"highlight\"><pre><span>type</span> Stock <span>struct</span> {\n    Symbol           <span>string</span> <span>`json:\"t\"`</span>\n    Exchange         <span>string</span> <span>`json:\"e\"`</span>\n    Name             <span>string</span> <span>`json:\"name\"`</span>\n    Change           <span>string</span> <span>`json:\"c\"`</span>\n    Close            <span>string</span> <span>`json:\"l\"`</span>\n    PercentageChange <span>string</span> <span>`json:\"cp\"`</span>\n    Open             <span>string</span> <span>`json:\"op\"`</span>\n    High             <span>string</span> <span>`json:\"hi\"`</span>\n    Low              <span>string</span> <span>`json:\"lo\"`</span>\n    Volume           <span>string</span> <span>`json:\"vo\"`</span>\n    AverageVolume    <span>string</span> <span>`json:\"avvo\"`</span>\n    High52           <span>string</span> <span>`json:\"hi52\"`</span>\n    Low52            <span>string</span> <span>`json:\"lo52\"`</span>\n    MarketCap        <span>string</span> <span>`json:\"mc\"`</span>\n    EPS              <span>string</span> <span>`json:\"eps\"`</span>\n    Shares           <span>string</span> <span>`json:\"shares\"`</span>\n}\n</pre></div>\n\n\n<p>Once this is parsed and everything is happy, we can move onto storage and analysis.</p>\n\n<h4>Getting the data</h4>\n\n<p>We use the config Symbols variable to form the url for data retrieval. The response is then massaged and the result set parsed. There are some sanitizing functions which I won’t go into, the most important function is the <code>parseJSONData</code>.</p>\n\n<div class=\"highlight\"><pre>symbolString <span>:=</span> convertStocksString(configuration.Symbols)\n\n<span>var</span> urlStocks <span>string</span> = <span>\"https://www.google.com/finance/info?infotype=infoquoteall&amp;q=\"</span> <span>+</span> symbolString\nbody <span>:=</span> getDataFromURL(urlStocks)\n\njsonString <span>:=</span> sanitizeBody(<span>\"google\"</span>, body)\n\nstockList <span>:=</span> <span>make</span>([]Stock, <span>0</span>)\nstockList = parseJSONData(jsonString)\n\n<span>...</span>\n\n<span>func</span> parseJSONData(jsonString []<span>byte</span>) (stockList []Stock) {\n    raw <span>:=</span> <span>make</span>([]json.RawMessage, <span>10</span>)\n    <span>if</span> err <span>:=</span> json.Unmarshal(jsonString, <span>&amp;</span>raw); err <span>!=</span> <span>nil</span> {\n        log.Fatalf(<span>\"error %v\"</span>, err)\n    }\n\n    <span>for</span> i <span>:=</span> <span>0</span>; i &lt; <span>len</span>(raw); i <span>+=</span> <span>1</span> {\n        stock <span>:=</span> Stock{}\n        <span>if</span> err <span>:=</span> json.Unmarshal(raw[i], <span>&amp;</span>stock); err <span>!=</span> <span>nil</span> {\n            fmt.Println(<span>\"error %v\"</span>, err)\n        }\n\n        stockList = <span>append</span>(stockList, stock)\n    }\n\n    <span>return</span>\n}\n</pre></div>\n\n\n<p>Now that we have the data in a usable format, the string representation of numbers is adapted into full digits: <code>M = X * 1 000 000</code>, <code>B = X * 1 000 000 000</code>. This data can now finally be stored.</p>\n\n<h4>Storage</h4>\n\n<p>I chose a relational database for the data storage, namely MySQL. It’s common and scales pretty well, and Go has really good support for it. The following code illustrates a write operation for saving the data:</p>\n\n<div class=\"highlight\"><pre><span>// Prepare statement for inserting data</span>\ninsertStatement <span>:=</span> <span>\"INSERT INTO st_data (`symbol`, `exchange`, `name`, `change`, `close`, `percentageChange`, `open`, `high`, `low`, `volume` , `avgVolume`, `high52` , `low52`, `marketCap`, `eps`, `shares`, `time`, `minute`, `hour`, `day`, `month`, `year`) \"</span>\ninsertStatement <span>+=</span> <span>\"VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )\"</span>\nstmtIns, err <span>:=</span> db.Prepare(insertStatement)\n<span>if</span> err <span>!=</span> <span>nil</span> {\n    <span>panic</span>(err.Error()) <span>// proper error handling instead of panic in your app</span>\n}\n<span>defer</span> stmtIns.Close() <span>// Close the statement when we leave main() / the program terminates</span>\n\n<span>...</span> Massage data <span>...</span>\n\n_, err = stmtIns.Exec(stock.Symbol, stock.Exchange, stock.Name, sqlChange, sqlClose,\n             sqlPercChange, sqlOpen, sqlHigh, sqlLow, sqlVolume, sqlAvgVolume,\n             sqlHigh52, sqlLow52, sqlMarketCap, sqlEps, sqlShares,\n             sqlTime, sqlMinute, sqlHour, sqlDay, sqlMonth, sqlYear)\n \n<span>if</span> err <span>!=</span> <span>nil</span> {\n    fmt.Println(<span>\"Could not save results: \"</span> <span>+</span> err.Error())\n}\n</pre></div>\n\n\n<p>At the end of this we have:</p>\n\n<ul><li>Config loaded from file</li>\n<li>Stock data being retrieved</li>\n<li>Stock data parsed and massaged</li>\n<li>Stock data saved into a database</li>\n</ul><p>We can now get onto the interesting part: <em>analysis</em>.</p>\n\n<h4>Analysis of data: Gainers and Losers</h4>\n\n<p>I wanted to receive a nice (HTML) email periodically with a list of stocks ordered by gain. This requires: an interval, a HTML parser, and an SMTP mail call.</p>\n\n<p><strong>The interval</strong></p>\n\n<p>Interval timing is relatively easy in Go:</p>\n\n<div class=\"highlight\"><pre><span>for</span> _ = <span>range</span> time.Tick(n <span>*</span> time.Second) {\n    <span>...</span>\n}\n</pre></div>\n\n\n<p>During the interval various checks are done to make sure the emails are only sent when they should be: during stock opening hours, Monday to Friday. The hours they are sent on is also harcoded, but can easily be set into the config.</p>\n\n<p><strong>The HTML parser</strong></p>\n\n<p>Go also has a great parsing library. An HTML template is injected with a variable and parsed accordingly:</p>\n\n<div class=\"highlight\"><pre>mailTpl.Title = <span>\"Stock update\"</span>\nt, err <span>:=</span> template.ParseFiles(<span>\"tpl/notification.html\"</span>)\n<span>if</span> err <span>!=</span> <span>nil</span> {\n    fmt.Println(<span>\"template parse error: \"</span>, err)\n    <span>return</span>\n}\nerr = t.Execute(<span>&amp;</span>templateString, mailTpl)\n<span>if</span> err <span>!=</span> <span>nil</span> {\n    fmt.Println(<span>\"template executing error: \"</span>, err)\n    <span>return</span>\n}\n</pre></div>\n\n\n<p>Where <code>mailTpl</code> is a struct containing stock data and some meta, such as the title above. The template contains variables to be parsed, as well as looping functions. A section:</p>\n\n<div class=\"highlight\"><pre>{{ with .Stocks }}\n    {{ range . }}\n        <span>&lt;table</span> <span>with=\"100%\"</span> <span>border=\"1px solid #ccc\"</span><span>&gt;</span>\n            <span>&lt;tr</span> <span>width=\"100%\"</span> <span>style=\"border: 1px solid #ccc\"</span><span>&gt;</span>\n                <span>&lt;td&gt;&lt;strong&gt;</span>Name<span>&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;</span>{{ .Name }}<span>&lt;/td&gt;</span>\n                <span>&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</span>\n            <span>&lt;/tr&gt;</span>\n            ...\n        <span>&lt;/table&gt;</span>\n        <span>&lt;br</span> <span>/&gt;&lt;br</span> <span>/&gt;</span>\n    {{ end }}\n{{ end }}\n</pre></div>\n\n\n<p>With the HTML, we are now ready to send the email.</p>\n\n<p><strong>Sending the formatted email</strong></p>\n\n<p>Sending SMTP mail with Go is straightforward:</p>\n\n<div class=\"highlight\"><pre><span>func</span> sendMail(configuration Configuration, notifyMail <span>string</span>) {\n    <span>// Send email</span>\n    <span>// Set up authentication information.</span>\n    auth <span>:=</span> smtp.PlainAuth(<span>\"\"</span>, configuration.MailUser, configuration.MailPass, configuration.MailSMTPServer)\n\n    <span>// Connect to the server, authenticate, set the sender and recipient,</span>\n    <span>// and send the email all in one step.</span>\n    mime <span>:=</span> <span>\"MIME-version: 1.0;\\nContent-Type: text/html; charset=\\\"UTF-8\\\";\\n\\n\"</span>\n        to <span>:=</span> []<span>string</span>{configuration.MailRecipient}\n        msg <span>:=</span> []<span>byte</span>(<span>\"To: \"</span> <span>+</span> configuration.MailRecipient <span>+</span> <span>\"\\r\\n\"</span> <span>+</span>\n        <span>\"Subject: Quote update!\\r\\n\"</span> <span>+</span>\n        mime <span>+</span> <span>\"\\r\\n\"</span> <span>+</span>\n        <span>\"\\r\\n\"</span> <span>+</span>\n        notifyMail <span>+</span>\n    <span>\"\\r\\n\"</span>)\n\n    err <span>:=</span> smtp.SendMail(configuration.MailSMTPServer<span>+</span><span>\":\"</span><span>+</span>configuration.MailSMTPPort, auth, configuration.MailSender, to, msg)\n    <span>if</span> err <span>!=</span> <span>nil</span> {\n        log.Fatal(err)\n    }\n}\n</pre></div>\n\n\n<h4>Deeper analysis: Trends</h4>\n\n<p>After we have gathered enough data (I was doing calls in 15 minute intervals), we can start doing some good analysis. My trend analysis is really simple. You take a 3 day sample of data, check for increasing (or decreasing) prices day on day, and a once-off increase in volume over the same period.</p>\n\n<div class=\"highlight\"><pre><span>if</span> closes[<span>0</span>] &gt; closes[<span>1</span>] <span>&amp;&amp;</span> closes[<span>1</span>] &gt; closes[<span>2</span>] <span>&amp;&amp;</span> (volumes[<span>0</span>] &gt; volumes[<span>2</span>] <span>||</span> volumes[<span>0</span>] &gt; volumes[<span>1</span>]) {\n    <span>return</span> <span>true</span>\n}\n</pre></div>\n\n\n<p>I then also added in a standard deviation function to get some idea of the volatility of the stock in question. The function is fairly long, but you can see the <a href=\"https://github.com/ksred/go-stock-notifier/blob/master/analysis.go#L149\">full calculation here</a>.</p>\n\n<p>The result is a separate mail, sent end of day or before market open, with the trending stocks as calculated above including an indication of volatility. This can be extended to include other more complex technical analysis, such as overlaying bollinger bands, stochastic graphs for price points, and more.</p>\n\n<h3>Conclusion</h3>\n\n<p>As my first work in Go, I am really pleased with the results. Loads of improvements can be made for sure, and I’ll be updating periodically with these as I learn more about Go and it’s deeper functionality.</p>\n\n<p>I’ve also fallen in love with Go. It is a beautiful language to code in, and I am definitely going to do more projects in it. If you find this project useful, or feel you can improve some of the functionality, feel to to submit a pull request. <a href=\"https://github.com/ksred/go-stock-notifier/\">The code to this project lives on Github</a>.</p>\n\n    ',1),(160,'SoundLogin - two-factor authentication. Install','https://www.soundlogin.com/download.html',1,0,'<p>﻿\n\n\n\n\n</p>\nSoundLogin - two-factor authentication. Install<div>\n        	<div class=\"row\">\n            	<div class=\"twelve column\">\n                    <p>\n                        <i class=\"icon-phonealt\"></i><span>+7 341 2 600526</span>\n                        <i class=\"icon-emailalt\"></i><span>info@cifrasoft.com</span>\n                    </p>\n                    <div class=\"flag-area\">\n                    	<span>Language</span>\n                        <a href=\"https://www.soundlogin.com/download-ru.html\"><img src=\"https://www.soundlogin.com/images/flags/ru.gif\" alt=\"\" /></a>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        \n        <div>\n        	<div class=\"row\">\n            	<div class=\"twelve column\">\n                    <div>\n                        \n                        <div>\n                            <a href=\"https://www.soundlogin.com/index.html\"><img src=\"https://www.soundlogin.com/images/logo.png\" alt=\"main-logo\" class=\"retina\" /></a>\n                        </div>           \n                        \n                    </div>\n                    \n            	</div>\n            </div>\n        </div>\n                \n    <div class=\"row\">   \n            <p>\n            	</p><h3>How to start using SoundLogin?</h3>\n			 \n			 \n            \n\n        </div>\n        \n          \n                 \n    <div class=\"row\">\n        	<div class=\"six column\">\n            	\n            	<p class=\"copyright\">© 2014-2015 Cifrasoft, OOO (Ltd)</p>\n                </div>\n\n            	           \n        </div>\n    ',1),(161,'F-Yeah Swift: 4 Features That Changed How I Code, with Jacob Schwartz','https://realm.io/news/jacob-schwartz-swift-features/',1,0,'\n<a class=\"btn btn-lg btn-primary\" href=\"http://eepurl.com/2mbQX\">Sign up to be notified of new videos</a>\n<small>— we won’t email you for any other reason, ever.</small>\n<hr /><div class=\"author-info\">\n<p>\nAbout the Speaker: Jacob Schwartz\n</p>\n<div class=\"author-info-bio\"><p>Jacob Schwartz is a Senior Engineer working in Swift at <a href=\"http://www.glintinc.com\">Glint</a>. In his free time he’s an active hobbyist game developer and has shipped several iOS games including <a href=\"https://itunes.apple.com/us/app/iso/id310764587?mt=8\">iso</a> and <a href=\"https://itunes.apple.com/us/app/ragdoll-boxing-match-century/id599403985?mt=8\">Ragdoll Boxing</a>. His other loves include beer, bicycling, and design. He’s a secret Canadian hiding amongst the Americans, but don’t tell anyone!</p>\n</div>\n\n</div>\n<hr /><p>I use Swift to build an app for a startup I work for, <a href=\"http://www.glintinc.com\">Glint</a>, and would like to highlight the top four features of the language that had the biggest effect on my work &amp; code compared to Objective-C or C++.</p>\n<h3>Strong Type System <a>(1:37)</a></h3>\n<p>The great type system helps reduce the cognitive load when reading code. It helps code feel more explicit. For instance, this Objective-C dictionary could contain any type of keys and values, or it could even be nil:</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">strong</span><span class=\"p\">,</span> <span class=\"n\">nonatomic</span><span class=\"p\">)</span> <span class=\"n\">NSMutableDictionary</span> <span class=\"o\">*</span><span class=\"n\">selectedFilters</span><span class=\"p\">;</span></code></pre>\n</div>\n<p>In Swift, however, the definition immediately conveys that it’s a dictionary only of strings to arrays of strings:</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">selectedFilters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]]()</span></code></pre>\n</div>\n<p>I use the type system to control logic flow throughout the app, not having to check for classes of objects.</p>\n<h3>Immutability <a>(1:51)</a></h3>\n<p>In C++, these are all equivalent definitions for an immutable ivar, with more and more const correctness. This is a huge mess and feels like a hack.</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Puter</span> <span class=\"p\">{</span>\n  <span class=\"kt\">void</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n  <span class=\"kt\">void</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Obj</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n  <span class=\"kt\">void</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">Obj</span> <span class=\"o\">*</span> <span class=\"k\">const</span> <span class=\"n\">ptr</span><span class=\"p\">);</span>\n  <span class=\"kt\">void</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Obj</span> <span class=\"o\">*</span> <span class=\"k\">const</span> <span class=\"n\">ptr</span><span class=\"p\">);</span>\n  <span class=\"kt\">void</span> <span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Obj</span> <span class=\"o\">*</span> <span class=\"k\">const</span> <span class=\"n\">ptr</span><span class=\"p\">)</span> <span class=\"k\">const</span><span class=\"p\">;</span>\n<span class=\"p\">};</span></code></pre>\n</div>\n<p>In Objective-C, it does not even feel like a hack — it is a hack; you need to manage mutable vs. immutable versions of strings, arrays, etc.</p>\n<p>With Swift, these declarations take very little effort — it simply takes choosing between <code class=\"highlighter-rouge\">var</code> or <code class=\"highlighter-rouge\">let</code> in the variable or property declaration.</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">dateString</span> <span class=\"o\">=</span> <span class=\"n\">formatter</span><span class=\"o\">.</span><span class=\"nf\">stringFromDate</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">)</span>\n<span class=\"c1\">// vs</span>\n<span class=\"k\">let</span> <span class=\"nv\">dateString</span> <span class=\"o\">=</span> <span class=\"n\">formatter</span><span class=\"o\">.</span><span class=\"nf\">stringFromDate</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">)</span></code></pre>\n</div>\n<h3>Properties <a>(3:29)</a></h3>\n<p>Although the code is messy, it properly demonstrates the power and ease of properties in Swift.</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">responseRate</span><span class=\"p\">:</span> <span class=\"kt\">Double</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n  <span class=\"k\">didSet</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">percent</span> <span class=\"o\">=</span> <span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kt\">Int</span><span class=\"p\">((</span><span class=\"n\">responseRate</span> <span class=\"p\">??</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">)))</span>\n    <span class=\"k\">let</span> <span class=\"nv\">baseString</span> <span class=\"o\">=</span> <span class=\"kt\">NSLocalizedString</span><span class=\"p\">(</span><span class=\"s\">\"$0 ResponseRate\"</span><span class=\"p\">,</span> <span class=\"nv\">comment</span><span class=\"p\">:</span> <span class=\"s\">\"PulseTabResponseRate\"</span><span class=\"p\">)</span>\n    <span class=\"k\">let</span> <span class=\"nv\">percentString</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">percent</span><span class=\"se\">)</span><span class=\"s\">%\"</span>\n    <span class=\"n\">middleLabel</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">baseString</span><span class=\"o\">.</span><span class=\"nf\">stringByReplacingOccurrencesOfString</span><span class=\"p\">(</span><span class=\"s\">\"$0\"</span><span class=\"p\">,</span> <span class=\"nv\">withString</span><span class=\"p\">:</span> <span class=\"n\">percentString</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre>\n</div>\n<p>Initially when exploring the Swift docs, I thought it was just syntactic sugar for properties. However, when writing programs, it turns out that it makes architecting your code more powerful and simple. This comes from a view controller, where I have a setter that takes a double as the response rate for some survey. Then I format the string that the user sees when the double is set. This is how I easily did data binding on this particular view controller.</p>\n\n<p>There are fantastic resources for learning and helping fix problems online, as well as Swift meetups and informative newsletters that help foster the learning environment. It makes writing code easier and more fun.</p>\n<p>Although there are still some problems with it, such as inability to support old iOS versions with new Swift versions, tool instability, and random linker errors, it’s constantly being improved upon with new releases. Working with these Swift features and more, I am able to write dense and expressive code that is actually fun to write, making me more productive compared to other languages.</p>\n\n<hr /><a class=\"btn btn-lg btn-primary\" href=\"http://eepurl.com/2mbQX\">Sign up to be notified of new videos</a>\n<small>— we won’t email you for any other reason, ever.</small>\n',1),(162,'CSS Multi-Level Accordion Menu | CodyHouse','https://codyhouse.co/gem/css-multi-level-accordion-menu/',1,0,'\n				\n\n				\n\n				<p>A simple CSS accordion menu with support for sub level items.</p>	\n\n				\n				<div class=\"post-divider\">\n\n					 \n					\n					<div class=\"browser-support\">\n						<b>Browser support</b>\n\n												<ul><li class=\"img-replace supported\">ie</li>\n							<li class=\"img-replace supported\">Chrome</li>\n							<li class=\"img-replace supported\">Firefox</li>\n							<li class=\"img-replace supported\">Safari</li>\n							<li class=\"img-replace supported\">Opera</li>\n						</ul><span class=\"ie-version-supported\">9+</span>					</div> \n\n				</div> \n\n				\n				\n\n				<p>Today’s resource is a handy accordion menu with support for groups/subitems. It works <span>with CSS only</span>, using the <code>:checked</code> pseudo-class selector on the checkboxes input elements. However we included a version with jQuery as well, in case you prefer a subtle animation compared to the instant default effect. Your call!</p>\n<p>The first user case I can think of for this resources is a “layer organizer”. Think of Sublime Text sidebar, or Photoshop layer window. Anyway, I’m sure you’ll find a use for this new snippet to store in your arsenal ;)</p>\n<p>Icons: <a href=\"https://nucleoapp.com/\">Nucleoapp.com</a></p>\n<h2>Creating the structure</h2>\n<p>The <strong>HTML structure</strong> is pretty simple: the accordion is an unordered list. If a list item contains subitems, then we insert an <code>input[type=checkbox]</code> and its label. Also, we add the <code>.has-children</code> class to the list item. All “standard” list items contain just an anchor tag.</p>\n\n		<div class=\"crayon-syntax crayon-theme-cody crayon-font-monaco crayon-os-pc print-yes notranslate\">\n		\n			\n			<div class=\"crayon-main\">\n				<table class=\"crayon-table\"><tr class=\"crayon-row\"><td class=\"crayon-nums\">\r\n					<div class=\"crayon-nums-content\"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p></div>\r\n				</td>\r\n						<td class=\"crayon-code\"><div class=\"crayon-pre\"><p><span class=\"crayon-r\">&lt;ul </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-accordion-menu\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;li </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"has-children\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">		</span><span class=\"crayon-r\">&lt;input </span><span class=\"crayon-e\">type</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"checkbox\"</span><span class=\"crayon-h\"> </span><span class=\"crayon-e\">name</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"group-1\"</span><span class=\"crayon-h\"> </span><span class=\"crayon-e\">id</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"group-1\"</span><span class=\"crayon-h\"> </span>checked<span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">		</span><span class=\"crayon-r\">&lt;label </span><span class=\"crayon-e\">for</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"group-1\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Group 1</span><span class=\"crayon-r\">&lt;/label&gt;</span></p><p><span class=\"crayon-i\">  		</span><span class=\"crayon-r\">&lt;ul&gt;</span></p><p><span class=\"crayon-i\">  			</span><span class=\"crayon-r\">&lt;li </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"has-children\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">  				</span><span class=\"crayon-r\">&lt;input </span><span class=\"crayon-e\">type</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"checkbox\"</span><span class=\"crayon-h\"> </span><span class=\"crayon-e\">name</span><span class=\"crayon-h\"> </span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"sub-group-1\"</span><span class=\"crayon-h\"> </span><span class=\"crayon-e\">id</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"sub-group-1\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">				</span><span class=\"crayon-r\">&lt;label </span><span class=\"crayon-e\">for</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"sub-group-1\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Sub Group 1</span><span class=\"crayon-r\">&lt;/label&gt;</span></p><p><span class=\"crayon-i\">				</span><span class=\"crayon-r\">&lt;ul&gt;</span></p><p><span class=\"crayon-i\">					</span><span class=\"crayon-r\">&lt;li&gt;</span><span class=\"crayon-r\">&lt;a </span><span class=\"crayon-e\">href</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"#0\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Image</span><span class=\"crayon-r\">&lt;/a&gt;</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">					</span><span class=\"crayon-r\">&lt;li&gt;</span><span class=\"crayon-r\">&lt;a </span><span class=\"crayon-e\">href</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"#0\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Image</span><span class=\"crayon-r\">&lt;/a&gt;</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">					</span><span class=\"crayon-r\">&lt;li&gt;</span><span class=\"crayon-r\">&lt;a </span><span class=\"crayon-e\">href</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"#0\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Image</span><span class=\"crayon-r\">&lt;/a&gt;</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">				</span><span class=\"crayon-r\">&lt;/ul&gt;</span></p><p><span class=\"crayon-i\">  			</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">  			</span><span class=\"crayon-r\">&lt;li&gt;</span><span class=\"crayon-r\">&lt;a </span><span class=\"crayon-e\">href</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"#0\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Image</span><span class=\"crayon-r\">&lt;/a&gt;</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">			</span><span class=\"crayon-r\">&lt;li&gt;</span><span class=\"crayon-r\">&lt;a </span><span class=\"crayon-e\">href</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"#0\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Image</span><span class=\"crayon-r\">&lt;/a&gt;</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">  		</span><span class=\"crayon-r\">&lt;/ul&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;li&gt;</span><span class=\"crayon-r\">&lt;a </span><span class=\"crayon-e\">href</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"#0\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Image</span><span class=\"crayon-r\">&lt;/a&gt;</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;li&gt;</span><span class=\"crayon-r\">&lt;a </span><span class=\"crayon-e\">href</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"#0\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Image</span><span class=\"crayon-r\">&lt;/a&gt;</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-r\">&lt;/ul&gt;</span><span class=\"crayon-i\"> </span><span class=\"crayon-c\">&lt;!-- cd-accordion-menu --&gt;</span></p></div></td>\r\n					</tr></table></div>\n		</div>\n\n\n<h2>Adding style</h2>\n<p>We use a smart (and quite standard nowadays) technique to detect the click and show sub content with CSS only: by including a checkbox input element, we can use the <code>:checked</code> pseudo-class and the adjacent sibling selector (div + div) to change the display mode of the sub <code>&lt;ul&gt;</code> element from “none” to “block”.</p>\n<p>Step by step: first of all, we have to make sure that the checkbox input element covers the entire list item that contains subitems. Put in other words: we need to create a custom checkbox. So, firstly, you need to make sure that when you click on the label, the checkbox is checked/unchecked as well. This is achieved by using the “for” attribute inside the label (label “for” attribute = input “name” and “id” attributes. See html section above). This way you can simply hide the input element and work with the label instead.</p>\n\n		<div class=\"crayon-syntax crayon-theme-cody crayon-font-monaco crayon-os-pc print-yes notranslate\">\n		\n			\n			<div class=\"crayon-main\">\n				<table class=\"crayon-table\"><tr class=\"crayon-row\"><td class=\"crayon-nums\">\r\n					<div class=\"crayon-nums-content\"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p></div>\r\n				</td>\r\n						<td class=\"crayon-code\"><div class=\"crayon-pre\"><p><span class=\"crayon-k\">.cd-accordion-menu input[type=checkbox] </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-c\">/* hide native checkbox */</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">position</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">absolute</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">opacity</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-accordion-menu label, .cd-accordion-menu a </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">position</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">relative</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">display</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">block</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">padding</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">18px</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">18px</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">18px</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">64px</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">background</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">#4d5158</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">box-shadow</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">inset</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">-1px</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">#555960</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">color</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">#ffffff</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">font-size</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">1.6rem</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p></div></td>\r\n					</tr></table></div>\n		</div>\n\n<p>Now notice in the HTML structure that input, label and the unordered list (that we make visible on click) are siblings. By using the <code>:checked</code> pseudo-class, you can set the following process in motion: when the checkbox input is checked (click on label), then take the <code>&lt;ul&gt;</code> sibling element and change its display value from “none” to “block”:</p>\n\n		<div class=\"crayon-syntax crayon-theme-cody crayon-font-monaco crayon-os-pc print-yes notranslate\">\n		\n			\n			<div class=\"crayon-main\">\n				<table class=\"crayon-table\"><tr class=\"crayon-row\"><td class=\"crayon-nums\">\r\n					<div class=\"crayon-nums-content\"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p></div>\r\n				</td>\r\n						<td class=\"crayon-code\"><div class=\"crayon-pre\"><p><span class=\"crayon-k\">.cd-accordion-menu ul </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-c\">/* by default hide all sub menus */</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">display</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">none</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-accordion-menu input[type=checkbox]:checked + label + ul,</span></p><p><span class=\"crayon-k\">.cd-accordion-menu input[type=checkbox]:checked + label:nth-of-type(n) + ul </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-c\">/* use label:nth-of-type(n) to fix a bug on safari (&lt;= 8.0.8) with multiple adjacent-sibling selectors*/</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-c\">/* show children when item is checked */</span></p><p><span class=\"crayon-h\">	</span><span class=\"crayon-e\">display</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">block</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p></div></td>\r\n					</tr></table></div>\n		</div>\n\n<p>If you want to gently animate the opening phase, then include the .js file as well. Also remember to add the <code>.animate</code> class to the main <code>.cd-accordion-menu</code> element (this will animate the arrow rotation).</p>\n\n				<div class=\"update\">\n<b>Oct 7, 2015</b>\n<ul><li>Resource released by CodyHouse</li>\r\n</ul></div>\r\n<div>\n										<img alt=\"\" src=\"https://1.gravatar.com/avatar/78209193ed087e4d5044beb9d847b4fc?s=96&amp;d=mm&amp;r=g\" class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\" /><div class=\"gem-author-info\">\n						<h3>Sebastiano Guerriero</h3>\n						<p>UI/UX designer, with a huge passion for Nutella. Co-Founder of CodyHouse. You can follow him on <a href=\"https://twitter.com/guerriero_se\">Twitter</a>  or <a href=\"https://dribbble.com/Sebastiano_Guerriero\">Dribbble</a>.</p>\n					</div> 	\n				</div> \n\n				\n\n				<div>\n		\n\n		\n		\n		<div class=\"cd-license cd-aside-block\">\n			<h5>Extended license</h5>\n			<p>Do you want to include this resource in a product offered for sale? Buy the extended license or <a href=\"http://codyhouse.co/terms/\">learn more</a> about it.</p>\n			\n		</div>\n		<div class=\"cd-newsletter cd-aside-block\">\n			<h5>Codyhouse newsletter</h5>\n			<p>Enjoying our resources? Get our recap Email once a month with all of the lastest news.</p>\n					</div>\n		<div class=\"cd-popular-resources cd-aside-block\">\n			<h5>Related resources</h5>\n							</div>\n	</div>\n',1),(163,'cmusatyalab/openface','https://github.com/cmusatyalab/openface',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"http://travis-ci.org/cmusatyalab/openface\"> <img src=\"https://camo.githubusercontent.com/ad07463ec30f66fa6d1c1a30cdb726862b001439/68747470733a2f2f7472617669732d63692e6f72672f636d7573617479616c61622f6f70656e666163652e706e673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a>\n<a href=\"https://github.com/cmusatyalab/openface/releases\"> <img src=\"https://camo.githubusercontent.com/3be66d20d03b68ed4249235a8ada1837054e08d5/687474703a2f2f696d672e736869656c64732e696f2f62616467652f72656c656173652d302e312e312d626c75652e7376673f7374796c653d666c6174\" alt=\"Release\" /></a>\n<a href=\"https://github.com/cmusatyalab/openface/blob/master/LICENSE\"> <img src=\"https://camo.githubusercontent.com/0257a158db7f15a3a2b76dfd75be916fda130867/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4170616368652d2d322d626c75652e7376673f7374796c653d666c6174\" alt=\"License\" /></a>\n<a href=\"http://dx.doi.org/10.5281/zenodo.32148\"> <img src=\"https://camo.githubusercontent.com/90982a44846ab0d7ebec58c51a13fbd4326e137f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f646f692f31302e353238312f7a656e6f646f2e33323134382e737667\" alt=\"DOI\" /></a>\n<a href=\"https://gitter.im/cmusatyalab/openface\"> <img src=\"https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Gitter\" /></a></p>\n\n<p>This is a Python and <a href=\"http://torch.ch\">Torch</a> implementation of the CVPR 2015 paper\n<a href=\"http://www.cv-foundation.org/openaccess/content_cvpr_2015/app/1A_089.pdf\">FaceNet: A Unified Embedding for Face Recognition and Clustering</a>\nby Florian Schroff, Dmitry Kalenichenko, and James Philbin at Google\nusing publicly available libraries and datasets.\nTorch allows the network to be executed on a CPU or with CUDA.</p>\n\n<p><strong>Crafted by <a href=\"http://bamos.github.io\">Brandon Amos</a> in the\n<a href=\"http://elijah.cs.cmu.edu\">Elijah</a> research group at\nCarnegie Mellon University.</strong></p>\n\n<hr /><h3><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#isnt-face-recognition-a-solved-problem\"><span class=\"octicon octicon-link\"></span></a>Isn\'t face recognition a solved problem?</h3>\n\n<p>No! Accuracies from research papers have just begun to surpass\nhuman accuracies on some benchmarks.\nThe accuracies of open source face recognition systems lag\nbehind the state-of-the-art.\nSee our accuracy comparisons on the famous LFW benchmark below.</p>\n\n<hr /><h3><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#please-use-responsibly\"><span class=\"octicon octicon-link\"></span></a>Please use responsibly!</h3>\n\n<p>We do not support the use of this project in applications\nthat violate privacy and security.\nWe are using this to help cognitively impaired users to\nsense and understand the world around them.</p>\n\n<hr /><p>The following overview shows the workflow for a single input\nimage of Sylvestor Stallone from the publicly available\n<a href=\"http://vis-www.cs.umass.edu/lfw/person/Sylvester_Stallone.html\">LFW dataset</a>.</p>\n\n<ol><li>Detect faces with a pre-trained models from\n<a href=\"http://blog.dlib.net/2014/02/dlib-186-released-make-your-own-object.html\">dlib</a>\nor\n<a href=\"http://docs.opencv.org/master/d7/d8b/tutorial_py_face_detection.html\">OpenCV</a>.</li>\n<li>Transform the face for the neural network.\nThis repository uses dlib\'s\n<a href=\"http://blog.dlib.net/2014/08/real-time-face-pose-estimation.html\">real-time pose estimation</a>\nwith OpenCV\'s\n<a href=\"http://docs.opencv.org/doc/tutorials/imgproc/imgtrans/warp_affine/warp_affine.html\">affine transformation</a>\nto try to make the eyes and nose appear in\nthe same location on each image.</li>\n<li>Use a deep neural network to represent (or embed) the face on\na 128-dimensional unit hypersphere.\nThe embedding is a generic representation for anybody\'s face.\nUnlike other face representations, this embedding has the nice property\nthat a larger distance between two face embeddings means\nthat the faces are likely not of the same person.\nThis property makes clustering, similarity detection,\nand classification tasks easier than other face recognition\ntechniques where the Euclidean distance between\nfeatures is not meaningful.</li>\n<li>Apply your favorite clustering or classification techniques\nto the features to complete your recognition task.\nSee below for our examples for classification and\nsimilarity detection, including an online web demo.</li>\n</ol><p><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/summary.jpg\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/summary.jpg\" alt=\"\" /></a></p>\n\n\n\n\n\n<p>See <a href=\"https://www.youtube.com/watch?v=LZJOTRkjZA4\">our YouTube video</a>\nof using this in a real-time web application\nfor face recognition.\nThe source is available in <a href=\"https://github.com/cmusatyalab/openface/blob/master/demos/web\">demos/web</a>.</p>\n\n<p><a href=\"https://www.youtube.com/watch?v=LZJOTRkjZA4\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/youtube-web.gif\" alt=\"youtube-web.gif\" /></a></p>\n\n<p>This demo does the full face recognition pipeline on every frame.\nIn practice, object tracking\n<a href=\"http://blog.dlib.net/2015/02/dlib-1813-released.html\">like dlib\'s</a>\nshould be used once the face recognizer has predicted a face.</p>\n\n<p>To run on your system, after following the setup directions\nbelow, install the requirements for the web demo with\n<code>./install-deps.sh</code> and <code>sudo pip install -r requirements.txt</code>\nfrom the <code>demos/web</code> directory.\nThe application is split into a processing server and static\nweb pages that communicate via web sockets.\nStart the server with <code>./demos/web/server.py</code> and\nserve the static website with <code>python2 -m SimpleHTTPServer 8000</code>\nfrom the <code>/demos/web</code> directory.\nYou should now be able to access the demo from your browser\nat <code>http://localhost:8000</code>.\nThe saved faces are only available for the browser session.</p>\n\n\n\n<p>The <a href=\"https://github.com/cmusatyalab/openface/blob/master/demos/compare.py\">comparison demo</a> outputs the predicted similarity\nscore of two faces by computing the squared L2 distance between\ntheir representations.\nA lower score indicates two faces are more likely of the same person.\nSince the representations are on the unit hypersphere, the\nscores range from 0 (the same picture) to 4.0.\nThe following distances between images of John Lennon and\nEric Clapton were generated with\n<code>./demos/compare.py images/examples/{lennon*,clapton*}</code>.</p>\n\n<table><thead><tr><th>Lennon 1</th>\n<th>Lennon 2</th>\n<th>Clapton 1</th>\n<th>Clapton 2</th>\n</tr></thead><tbody><tr><td><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/examples/lennon-1.jpg\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/examples/lennon-1.jpg\" width=\"200\" alt=\"lennon-1.jpg\" /></a></td>\n<td><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/examples/lennon-2.jpg\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/examples/lennon-2.jpg\" width=\"200\" alt=\"lennon-2.jpg\" /></a></td>\n<td><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/examples/clapton-1.jpg\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/examples/clapton-1.jpg\" width=\"200\" alt=\"clapton-1.jpg\" /></a></td>\n<td><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/examples/clapton-2.jpg\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/examples/clapton-2.jpg\" width=\"200\" alt=\"clapton-2.jpg\" /></a></td>\n</tr></tbody></table><p>The following table shows that a distance threshold of <code>0.5</code> would\ndistinguish these two people.\nIn practice, further experimentation should be done on the distance threshold.\nOn our LFW experiments, the mean threshold across multiple\nexperiments is 0.71 ± 0.027,\nsee <a href=\"https://github.com/cmusatyalab/openface/blob/master/evaluation/lfw.nn4.v1.epoch-177/accuracies.txt\">accuracies.txt</a>.</p>\n\n<table><thead><tr><th>Image 1</th>\n<th>Image 2</th>\n<th>Distance</th>\n</tr></thead><tbody><tr><td>Lennon 1</td>\n<td>Lennon 2</td>\n<td>0.310</td>\n</tr><tr><td>Lennon 1</td>\n<td>Clapton 1</td>\n<td>1.241</td>\n</tr><tr><td>Lennon 1</td>\n<td>Clapton 2</td>\n<td>1.056</td>\n</tr><tr><td>Lennon 2</td>\n<td>Clapton 1</td>\n<td>1.386</td>\n</tr><tr><td>Lennon 2</td>\n<td>Clapton 2</td>\n<td>1.073</td>\n</tr><tr><td>Clapton 1</td>\n<td>Clapton 2</td>\n<td>0.259</td>\n</tr></tbody></table><p>OpenFace\'s core provides a feature extraction method to\nobtain a low-dimensional representation of any face.\n<a href=\"https://github.com/cmusatyalab/openface/blob/master/demos/classifier.py\">demos/classifier.py</a> shows a demo of\nhow these representations can be used to create a face classifier.</p>\n\n<p>This is trained on about 6000 total images of the following people,\nwhich are the people with the most images in our dataset.\nClassifiers can be created with far less images per\nperson.</p>\n\n<ul><li>America Ferrera</li>\n<li>Amy Adams</li>\n<li>Anne Hathaway</li>\n<li>Ben Stiller</li>\n<li>Bradley Cooper</li>\n<li>David Boreanaz</li>\n<li>Emily Deschanel</li>\n<li>Eva Longoria</li>\n<li>Jon Hamm</li>\n<li>Steve Carell</li>\n</ul><p>This demo uses <a href=\"http://scikit-learn.org\">scikit-learn</a> to perform\na grid search over SVM parameters.\nFor 1000\'s of images, training the SVMs takes seconds.\nOur trained model obtains 87% accuracy on this set of data.\n<a href=\"https://github.com/cmusatyalab/openface/blob/master/models/get-models.sh\">models/get-models.sh</a>\nwill automatically download this classifier and place\nit in <code>models/openface/celeb-classifier.nn4.v1.pkl</code>.</p>\n\n<p>For an example, consider the following small set of images\nthe model has no knowledge of.\nFor an unknown person, a prediction still needs to be made, but\nthe confidence score is usually lower.</p>\n\n<p>Run the classifier on your images with:</p>\n\n<pre><code>./demos/classifier.py infer ./models/openface/celeb-classifier.nn4.v1.pkl &lt;image&gt;\n</code></pre>\n\n<table><thead><tr><th>Person</th>\n<th>Image</th>\n<th>Prediction</th>\n<th>Confidence</th>\n</tr></thead><tbody><tr><td>Carell</td>\n<td><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/examples/carell.jpg\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/examples/carell.jpg\" width=\"200\" alt=\"carell.jpg\" /></a></td>\n<td>SteveCarell</td>\n<td>0.78</td>\n</tr><tr><td>Adams</td>\n<td><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/examples/adams.jpg\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/examples/adams.jpg\" width=\"200\" alt=\"adams.jpg\" /></a></td>\n<td>AmyAdams</td>\n<td>0.87</td>\n</tr><tr><td>Lennon 1 (Unknown)</td>\n<td><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/examples/lennon-1.jpg\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/examples/lennon-1.jpg\" width=\"200\" alt=\"lennon-1.jpg\" /></a></td>\n<td>DavidBoreanaz</td>\n<td>0.28</td>\n</tr><tr><td>Lennon 2 (Unknown)</td>\n<td><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/examples/lennon-2.jpg\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/examples/lennon-2.jpg\" width=\"200\" alt=\"lennon-2.jpg\" /></a></td>\n<td>DavidBoreanaz</td>\n<td>0.56</td>\n</tr></tbody></table><p>Even though the public datasets we trained on have orders of magnitude less data\nthan private industry datasets, the accuracy is remarkably high and\noutperforms all other open-source face recognition implementations we\nare aware of on the standard\n<a href=\"http://vis-www.cs.umass.edu/lfw/results.html\">LFW</a>\nbenchmark.\nWe had to fallback to using the deep funneled versions for\n152 of 13233 images because dlib failed to detect a face or landmarks.\nWe obtain a mean accuracy of 0.8483 ± 0.0172 with an AUC of 0.923.</p>\n\n<p><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/nn4.v1.lfw.roc.png\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/nn4.v1.lfw.roc.png\" alt=\"\" /></a></p>\n\n<p>This can be generated with the following commands from the root <code>openface</code>\ndirectory, assuming you have downloaded and placed the raw and\ndeep funneled LFW data from <a href=\"http://vis-www.cs.umass.edu/lfw/\">here</a>\nin <code>./data/lfw/raw</code> and <code>./data/lfw/deepfunneled</code>.</p>\n\n<ol><li>Install prerequisites as below.</li>\n<li>Preprocess the raw <code>lfw</code> images, change <code>8</code> to however many\nseparate processes you want to run:\n<code>for N in {1..8}; do ./util/align-dlib.py data/lfw/raw align affine data/lfw/dlib-affine-sz:96 --size 96 &amp;; done</code>.\nFallback to deep funneled versions for images that dlib failed\nto align:\n<code>./util/align-dlib.py data/lfw/raw align affine data/lfw/dlib-affine-sz:96 --size 96 --fallbackLfw data/lfw/deepfunneled</code></li>\n<li>Generate representations with <code>./batch-represent/main.lua -outDir evaluation/lfw.nn4.v1.reps -model models/openface/nn4.v1.t7 -data data/lfw/dlib-affine-sz:96</code></li>\n<li>Generate the ROC curve from the <code>evaluation</code> directory with <code>./lfw-roc.py --workDir lfw.nn4.v1.reps</code>.\nThis creates <code>roc.pdf</code> in the <code>lfw.nn4.v1.reps</code> directory.</li>\n</ol><p>As the following table shows, the forefront of deep learning research\nis driven by large private datasets.\nIn face recognition, there are no open source implementations or\nmodels trained on these datasets.\nIf you have access to a large dataset, we are very interested\nin training a new OpenFace model with it.\nPlease contact Brandon Amos at <a href=\"mailto:bamos@cs.cmu.edu\">bamos@cs.cmu.edu</a>.</p>\n\n\n\n<p><a href=\"http://lvdmaaten.github.io/tsne/\">t-SNE</a> is a dimensionality\nreduction technique that can be used to visualize the\n128-dimensional features OpenFace produces.\nThe following shows the visualization of the three people\nin the training and testing dataset with the most images.</p>\n\n<p><strong>Training</strong></p>\n\n<p><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/train-tsne.png\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/train-tsne.png\" alt=\"\" /></a></p>\n\n<p><strong>Testing</strong></p>\n\n<p><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/val-tsne.png\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/val-tsne.png\" alt=\"\" /></a></p>\n\n<p>These can be generated with the following commands from the root\n<code>openface</code> directory.</p>\n\n<ol><li>Install prerequisites as below.</li>\n<li>Preprocess the raw <code>lfw</code> images, change <code>8</code> to however many\nseparate processes you want to run:\n<code>for N in {1..8}; do ./util/align-dlib.py &lt;path-to-raw-data&gt; align affine &lt;path-to-aligned-data&gt; --size 96 &amp;; done</code>.</li>\n<li>Generate representations with <code>./batch-represent/main.lua -outDir &lt;feature-directory (to be created)&gt; -model models/openface/nn4.v1.t7 -data &lt;path-to-aligned-data&gt;</code></li>\n<li>Generate t-SNE visualization with <code>./util/tsne.py &lt;feature-directory&gt; --names &lt;name 1&gt; ... &lt;name n&gt;</code>\nThis creates <code>tsne.pdf</code> in <code>&lt;feature-directory&gt;</code>.</li>\n</ol><p>Visualizing the output feature maps of each layer\nis sometimes helpful to understand what features\nthe network has learned to extract.\nWith faces, the locations of the eyes, nose, and\nmouth should play an important role.</p>\n\n<p><a href=\"https://github.com/cmusatyalab/openface/blob/master/demos/vis-outputs.lua\">demos/vis-outputs.lua</a>\noutputs the feature maps from an aligned image.\nThe following shows the first 39 filters of the\nfirst convolutional layer on two images\nof John Lennon.</p>\n\n<p><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/nn4.v1.conv1.lennon-1.png\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/nn4.v1.conv1.lennon-1.png\" alt=\"\" /></a>\n<a href=\"https://github.com/cmusatyalab/openface/blob/master/images/nn4.v1.conv1.lennon-2.png\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/nn4.v1.conv1.lennon-2.png\" alt=\"\" /></a></p>\n\n\n\n<p>Model definitions should be kept in <a href=\"https://github.com/cmusatyalab/openface/blob/master/models/openface\">models/openface</a>,\nwhere we have provided definitions of the <a href=\"https://github.com/cmusatyalab/openface/blob/master/models/openface/nn2.def.lua\">NN2</a>\nand <a href=\"https://github.com/cmusatyalab/openface/blob/master/models/openface/nn4.def.lua\">nn4</a> as described in the paper,\nbut with batch normalization and no normalization in the lower layers.\nThe inception layers are introduced  in\n<a href=\"http://arxiv.org/abs/1409.4842\">Going Deeper with Convolutions</a>\nby Christian Szegedy et al.</p>\n\n\n\n<p>Pre-trained models are versioned and should be released with\na corresponding model definition.\nWe currently only provide a pre-trained model for <code>nn4.v1</code>\nbecause we have limited access to large-scale face recognition\ndatasets.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#nn4v1\"><span class=\"octicon octicon-link\"></span></a>nn4.v1</h2>\n\n<p>This model has been trained by combining the two largest (of August 2015)\npublicly-available face recognition datasets based on names:\n<a href=\"http://vintage.winklerbros.net/facescrub.html\">FaceScrub</a>\nand <a href=\"http://arxiv.org/abs/1411.7923\">CASIA-WebFace</a>.\nThis model was trained for about 300 hours on a Tesla K40 GPU.</p>\n\n<p>The following plot shows the triplet loss on the training\nand test set.\nSemi-hard triplets are used on the training set, and\nrandom triplets are used on the testing set.\nOur <code>nn4.v1</code> model is from epoch 177.</p>\n\n<p>The LFW section above shows that this model obtains a mean\naccuracy of 0.8483 ± 0.0172 with an AUC of 0.923.</p>\n\n<p><a href=\"https://github.com/cmusatyalab/openface/blob/master/images/nn4.v1.loss.png\"><img src=\"https://github.com/cmusatyalab/openface/raw/master/images/nn4.v1.loss.png\" alt=\"\" /></a></p>\n\n\n\n<p>The processing time depends on the size of your image for\nface detection and alignment.\nThese only run on the CPU and take from 100-200ms to over\na second.\nThe neural network uses a fixed-size input and has\na more consistent runtime.\nAveraging over 500 forward passes of random input, the latency is\n77.47 ms ± 50.69 ms on our 3.70 GHz CPU and\n21.13 ms ± 6.15 ms on our Tesla K40 GPU,\nobtained with\n<a href=\"https://github.com/cmusatyalab/openface/blob/master/util/profile-network.lua\">util/profile-network.lua</a></p>\n\n\n\n<h2><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#existing-models\"><span class=\"octicon octicon-link\"></span></a>Existing Models</h2>\n\n<p>See <a href=\"https://github.com/cmusatyalab/openface/blob/master/demos/compare.py\">the image comparison demo</a> for a complete example\nwritten in Python using a naive Torch subprocess to process the faces.</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> openface\n<span class=\"pl-k\">from</span> openface.alignment <span class=\"pl-k\">import</span> NaiveDlib <span class=\"pl-c\"># Depends on dlib.</span>\n\n<span class=\"pl-c\"># `args` are parsed command-line arguments.</span>\n\nalign <span class=\"pl-k\">=</span> NaiveDlib(args.dlibFaceMean, args.dlibFacePredictor)\nnet <span class=\"pl-k\">=</span> openface.TorchWrap(args.networkModel, <span class=\"pl-smi\">imgDim</span><span class=\"pl-k\">=</span>args.imgDim, <span class=\"pl-smi\">cuda</span><span class=\"pl-k\">=</span>args.cuda)\n\n<span class=\"pl-c\"># `img` is a numpy matrix containing the RGB pixels of the image.</span>\nbb <span class=\"pl-k\">=</span> align.getLargestFaceBoundingBox(img)\nalignedFace <span class=\"pl-k\">=</span> align.alignImg(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>affine<span class=\"pl-pds\">\"</span></span>, args.imgDim, img, bb)\nrep1 <span class=\"pl-k\">=</span> net.forwardImage(alignedFace)\n\n<span class=\"pl-c\"># `rep2` obtained similarly.</span>\nd <span class=\"pl-k\">=</span> rep1 <span class=\"pl-k\">-</span> rep2\ndistance <span class=\"pl-k\">=</span> np.dot(d, d)</pre></div>\n\n\n\n<p>This repository also contains our training infrastructure to promote an\nopen ecosystem and enable quicker bootstrapping for new research and development.\nWarning: Training is computationally expensive and takes a few\nweeks on our Tesla K40 GPU.</p>\n\n<p>A rough overview of training is:</p>\n\n<ol><li><p>Create a directory for your raw images so that images from different\npeople are in different subdirectories. The names of the labels or\nimages do not matter, and each person can have a different amount of images.\nThe images should be formatted as <code>jpg</code> or <code>png</code> and have\na lowercase extension.</p>\n\n<pre><code>$ tree data/mydataset/raw\nperson-1\n├── image-1.jpg\n├── image-2.png\n...\n└── image-p.png\n\n...\n\nperson-m\n├── image-1.png\n├── image-2.jpg\n...\n└── image-q.png\n</code></pre></li>\n<li><p>Preprocess the raw images, change <code>8</code> to however many\nseparate processes you want to run:\n<code>for N in {1..8}; do ./util/align-dlib.py &lt;path-to-raw-data&gt; align affine &lt;path-to-aligned-data&gt; --size 96 &amp;; done</code>.\nPrune out directories with less than N (I use 10) images\nper class with <code>./util/prune-dataset.py &lt;path-to-aligned-data&gt; --numImagesThreshold &lt;N&gt;</code> and\nthen split the dataset into <code>train</code> and <code>val</code> subdirectories\nwith <code>./util/create-train-val-split.py &lt;path-to-aligned-data&gt; &lt;validation-ratio&gt;</code>.</p></li>\n<li>Run <a href=\"https://github.com/cmusatyalab/openface/blob/master/training/main.lua\">training/main.lua</a> to start training the model.\nEdit the dataset options in <a href=\"https://github.com/cmusatyalab/openface/blob/master/training/opts.lua\">training/opts.lua</a> or\npass them as command-line parameters.\nThis will output the loss and in-progress models to <code>training/work</code>.</li>\n<li>Visualize the loss with <a href=\"https://github.com/cmusatyalab/openface/blob/master/training/plot-loss.py\">training/plot-loss.py</a>.</li>\n</ol><p>The following instructions are for Linux and OSX only.\nPlease contribute modifications and build instructions if you\nare interested in running this on other operating systems.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#check-out-git-submodules\"><span class=\"octicon octicon-link\"></span></a>Check out git submodules</h2>\n\n<p>Clone with <code>--recursive</code> or run <code>git submodule init &amp;&amp; git submodule update</code>\nafter checking out.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#download-the-models\"><span class=\"octicon octicon-link\"></span></a>Download the models</h2>\n\n<p>Run <a href=\"https://github.com/cmusatyalab/openface/blob/master/models/get-models.sh\">models/get-models.sh</a>\nto download pre-trained OpenFace\nmodels on the combined CASIA-WebFace and FaceScrub database.\nThis also downloads dlib\'s pre-trained model for face landmark detection.\nThis will incur about 500MB of network traffic for the compressed\nmodels that will decompress to about 1GB on disk.</p>\n\n<p>Be sure the md5 checksums match the following.\nUse <code>md5sum</code> in Linux and <code>md5</code> in OSX.</p>\n\n<pre><code>openface(master)$ md5sum models/{dlib/*.dat,openface/*.{pkl,t7}}\n73fde5e05226548677a050913eed4e04  models/dlib/shape_predictor_68_face_landmarks.dat\nc0675d57dc976df601b085f4af67ecb9  models/openface/celeb-classifier.nn4.v1.pkl\na59a5ec1938370cd401b257619848960  models/openface/nn4.v1.t7\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#with-docker\"><span class=\"octicon octicon-link\"></span></a>With Docker</h2>\n\n<p>This repo can be deployed as a container with <a href=\"https://www.docker.com/\">Docker</a>\nfor CPU mode.\nBe sure you have checked out the submodules and downloaded\nthe models as described above.\nDepending on your Docker configuration, you may need to\nrun the docker commands as root.</p>\n\n<p>To use, place your images in <code>openface</code> on your host and\naccess them from the shared Docker directory.</p>\n\n<pre><code>docker build -t openface .\ndocker run -t -i -v $PWD:/openface openface /bin/bash\ncd /openface\n./demos/compare.py images/examples/{lennon*,clapton*}\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#docker-in-osx\"><span class=\"octicon octicon-link\"></span></a>Docker in OSX</h3>\n\n<p>In OSX, follow the\n<a href=\"https://docs.docker.com/installation/mac/\">Docker Mac OSX Installation Guide</a>\nand start a docker machine and connect your shell to it\nbefore trying to build the container.\nIn the simplest case, this can be done with:</p>\n\n<pre><code>docker-machine create -driver --driver virtualbox default\neval $(docker-machine env default)\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#by-hand\"><span class=\"octicon octicon-link\"></span></a>By hand</h2>\n\n<p>Be sure you have checked out the submodules and downloaded the models as\ndescribed above.\nSee the <a href=\"https://github.com/cmusatyalab/openface/blob/master/Dockerfile\">Dockerfile</a> as a reference.</p>\n\n<p>This project uses <code>python2</code> because of the <code>opencv</code>\nand <code>dlib</code> dependencies.\nInstall the packages the Dockerfile uses with your package manager.\nWith <code>pip2</code>, install <code>numpy</code>, <code>pandas</code>, <code>scipy</code>, <code>scikit-learn</code>, and <code>scikit-image</code>.</p>\n\n<p>Next, manually install the following.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#opencv\"><span class=\"octicon octicon-link\"></span></a>OpenCV</h3>\n\n<p>Download <a href=\"https://github.com/Itseez/opencv/archive/2.4.11.zip\">OpenCV 2.4.11</a>\nand follow their\n<a href=\"http://docs.opencv.org/doc/tutorials/introduction/linux_install/linux_install.html\">build instructions</a>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#dlib\"><span class=\"octicon octicon-link\"></span></a>dlib</h3>\n\n<p>dlib can alternatively by installed from <a href=\"https://pypi.python.org/pypi/dlib\">pypi</a>,\nbut might be slower than building manually because they are not\ncompiled with AVX support.</p>\n\n<p>dlib requires boost libraries to be installed.</p>\n\n<p>To build manually, start by\ndownloading\n<a href=\"https://github.com/davisking/dlib/releases/download/v18.16/dlib-18.16.tar.bz2\">dlib v18.16</a>,\nthen:</p>\n\n<pre><code>mkdir -p ~/src\ncd ~/src\ntar xf dlib-18.16.tar.bz2\ncd dlib-18.16/python_examples\nmkdir build\ncd build\ncmake ../../tools/python\ncmake --build . --config Release\ncp dlib.so ..\n</code></pre>\n\n<p>At this point, you should be able to start your <code>python2</code>\ninterpreter and successfully run <code>import cv2; import dlib</code>.</p>\n\n<p>In OSX, you may get a <code>Fatal Python error: PyThreadState_Get: no current thread</code>.\nYou may be able to resolve by rebuilding <code>python</code> and <code>boost-python</code>\nas reported in <a href=\"https://github.com/cmusatyalab/openface/issues/21\">#21</a>,\nbut please file a new issue with us or <a href=\"https://github.com/davisking/dlib\">dlib</a>\nif you are unable to resolve this.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/cmusatyalab/openface#torch\"><span class=\"octicon octicon-link\"></span></a>Torch</h3>\n\n<p>Install <a href=\"http://torch.ch\">Torch</a> from the instructions on their website\nand install the <a href=\"https://github.com/nicholas-leonard/dpnn\">dpnn</a>\nand <a href=\"https://github.com/torch/nn\">nn</a> libraries with\n<code>luarocks install dpnn</code> and <code>luarocks install nn</code>.</p>\n\n<p>If you want CUDA support, also install\n<a href=\"https://github.com/soumith/cudnn.torch\">cudnn.torch</a>.</p>\n\n<p>At this point, the command-line program <code>th</code> should\nbe available in your shell.</p>\n\n\n\n<p><a href=\"http://dx.doi.org/10.5281/zenodo.32041\"><img src=\"https://camo.githubusercontent.com/f579c9d16000174d04b351c5b3a8d3333629a745/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f646f692f31302e353238312f7a656e6f646f2e33323034312e737667\" alt=\"DOI\" /></a></p>\n\n<p>Please cite this repository if you use this in academic works.</p>\n\n<pre><code>@misc{amos2015openface,\n    author       = {Amos, Brandon and Harkes, Jan and Pillai, Padmanabhan and Elgazzar, Khalid and Satyanarayanan, Mahadev},\n    title        = {OpenFace 0.1.1: Face recognition with Google\'s FaceNet deep neural network},\n    month        = oct,\n    year         = 2015,\n    doi          = {10.5281/zenodo.32148},\n    url          = {http://dx.doi.org/10.5281/zenodo.32148}\n}\n</code></pre>\n\n\n\n\n\n<p>The source code and trained models <code>nn4.v1.t7</code> and\n<code>celeb-classifier.nn4.v1.t7</code> are copyright\nCarnegie Mellon University and licensed under the\n<a href=\"https://github.com/cmusatyalab/openface/blob/master/LICENSE\">Apache 2.0 License</a>.\nPortions from the following third party sources have\nbeen modified and are included in this repository.\nThese portions are noted in the source files and are\ncopyright their respective authors with\nthe licenses listed.</p>\n\n',1),(164,'alvarotrigo/pagePiling.js','https://github.com/alvarotrigo/pagePiling.js',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://camo.githubusercontent.com/59a2a5c011cdad9f45883bb69db13b53350a950c/68747470733a2f2f7261772e6769746875622e636f6d2f616c7661726f747269676f2f7061676550696c696e672e6a732f6d61737465722f6578616d706c65732f696d67732f7061676550696c696e672d706c7567696e2e706e67\"><img src=\"https://camo.githubusercontent.com/59a2a5c011cdad9f45883bb69db13b53350a950c/68747470733a2f2f7261772e6769746875622e636f6d2f616c7661726f747269676f2f7061676550696c696e672e6a732f6d61737465722f6578616d706c65732f696d67732f7061676550696c696e672d706c7567696e2e706e67\" alt=\"preview\" /></a>\n<a href=\"https://camo.githubusercontent.com/67c5ed7b37db9b3c14057291969b082794d1dcc8/68747470733a2f2f7261772e6769746875622e636f6d2f616c7661726f747269676f2f7061676550696c696e672e6a732f6d61737465722f6578616d706c65732f696d67732f636f6d70617469626c652e676966\"><img src=\"https://camo.githubusercontent.com/67c5ed7b37db9b3c14057291969b082794d1dcc8/68747470733a2f2f7261772e6769746875622e636f6d2f616c7661726f747269676f2f7061676550696c696e672e6a732f6d61737465722f6578616d706c65732f696d67732f636f6d70617469626c652e676966\" alt=\"compatibility\" /></a>\nPile your sections one over another and access them scrolling or by URL!</p>\n\n<p>Invite me to a coffee\n<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=BEK5JQCQMED4J&amp;lc=GB&amp;item_name=pagePiling.js&amp;currency_code=USD&amp;bn=PP-DonationsBF%3Abtn_donate_LG.gif%3ANonHosted\"><img src=\"https://camo.githubusercontent.com/24ae43518013d5c9306ddadbbc2fdea234d3522c/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f47422f692f62746e2f62746e5f646f6e61746543435f4c472e676966\" alt=\"Donate\" /></a></p>\n\n<p>Customizations of the plugin available upon request for some reasonable price. <a href=\"http://alvarotrigo.com/#contact-page\">Contact me</a>.</p>\n\n<p>Would you like to have a website using pilePage.js functionality but you don\'t know how to use it? I can do it for you for a reasonable price. <a href=\"http://alvarotrigo.com/#contact-page\">Contact me</a>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#introduction\"><span class=\"octicon octicon-link\"></span></a>Introduction</h2>\n\n<p>Suggestion are more than welcome, not only for feature requests but also for coding style improvements.\nLet\'s make this a great plugin to make people\'s lives easier!</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#compatibility\"><span class=\"octicon octicon-link\"></span></a>Compatibility</h2>\n\n<p>pagePiling.js is fully functional on all modern browsers, as well as some old ones such as Internet Explorer 8, 9, Opera 12, etc.\nIt works with browsers with CSS3 support and with the ones which don\'t have it, making it ideal for old browsers compatibility.</p>\n\n<p>It is also designed to work on touch devices such as mobile phones or tablets.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>As you can see in the example files, you will need to include the JavaScript file <code>jquery.pagepiling.js</code> (or the minified version <code>jquery.pagepiling.min.js</code>) and the css file <code>jquery.pagepiling.css</code> of the plugin, as well as <a href=\"http://jquery.com/\">jQuery</a>. Optionally, you can add the <a href=\"http://jqueryui.com/\">jQuery UI library</a> in case you want to use other easing effects apart from the ones included in the jQuery library which are the <code>linear</code> or <code>swing</code> effects.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#install-using-bower\"><span class=\"octicon octicon-link\"></span></a>Install using bower:</h3>\n\n<p>Optionally, you can install pagePiling.js with bower:\nTerminal:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>bower install pagepiling.js</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#including-files\"><span class=\"octicon octicon-link\"></span></a>Including files:</h3>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">link</span> <span class=\"pl-e\">rel</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stylesheet<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/css<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jquery.pagepiling.css<span class=\"pl-pds\">\"</span></span> /&gt;\n\n&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;\n&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/javascript<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jquery.pagepiling.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#required-html-structure\"><span class=\"octicon octicon-link\"></span></a>Required HTML structure</h3>\n\n<p>Each section will be defined with a <code>div</code> containing the <code>section</code> class.\nThe active section by default will be the first section, which is taken as the home page.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagepiling<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>section<span class=\"pl-pds\">\"</span></span>&gt;Some section&lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>section<span class=\"pl-pds\">\"</span></span>&gt;Some section&lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>section<span class=\"pl-pds\">\"</span></span>&gt;Some section&lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>section<span class=\"pl-pds\">\"</span></span>&gt;Some section&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#initialization\"><span class=\"octicon octicon-link\"></span></a>Initialization</h3>\n\n<p>All you need to do is call the plugin inside a <code>$(document).ready</code> function:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>$(<span class=\"pl-c1\">document</span>).ready(<span class=\"pl-k\">function</span>() {\n    $(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#pagepiling<span class=\"pl-pds\">\'</span></span>).pagepiling();\n});</pre></div>\n\n<p>A more complex initialization with all options set could look like this:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>$(<span class=\"pl-c1\">document</span>).ready(<span class=\"pl-k\">function</span>() {\n    $(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#pagepiling<span class=\"pl-pds\">\'</span></span>).pagepiling({\n        menu<span class=\"pl-k\">:</span> <span class=\"pl-c1\">null</span>,\n        direction<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>vertical<span class=\"pl-pds\">\'</span></span>,\n        verticalCentered<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n        sectionsColor<span class=\"pl-k\">:</span> [],\n        anchors<span class=\"pl-k\">:</span> [],\n        scrollingSpeed<span class=\"pl-k\">:</span> <span class=\"pl-c1\">700</span>,\n        easing<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>swing<span class=\"pl-pds\">\'</span></span>,\n        loopBottom<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>,\n        loopTop<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>,\n        css3<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n        navigation<span class=\"pl-k\">:</span> {\n            <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>textColor<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#000<span class=\"pl-pds\">\'</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>bulletsColor<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#000<span class=\"pl-pds\">\'</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>position<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>right<span class=\"pl-pds\">\'</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>tooltips<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>section1<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>section2<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>section3<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>section4<span class=\"pl-pds\">\'</span></span>]\n        },\n        normalScrollElements<span class=\"pl-k\">:</span> <span class=\"pl-c1\">null</span>,\n        normalScrollElementTouchThreshold<span class=\"pl-k\">:</span> <span class=\"pl-c1\">5</span>,\n        touchSensitivity<span class=\"pl-k\">:</span> <span class=\"pl-c1\">5</span>,\n        keyboardScrolling<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n        sectionSelector<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>.section<span class=\"pl-pds\">\'</span></span>,\n        animateAnchor<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>,\n\n        <span class=\"pl-c\">//events</span>\n        <span class=\"pl-en\">onLeave</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">index</span>, <span class=\"pl-smi\">nextIndex</span>, <span class=\"pl-smi\">direction</span>){},\n        <span class=\"pl-en\">afterLoad</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">anchorLink</span>, <span class=\"pl-smi\">index</span>){},\n        <span class=\"pl-en\">afterRender</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(){},\n    });\n});</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#accesing-sections\"><span class=\"octicon octicon-link\"></span></a>Accesing sections</h3>\n\n<p>In order to create links to a certain section, you can use a normal URL link  if you are using pagePiling.js with anchor links (using the <code>anchors</code> option), then you will be able to use anchor links also to navigate directly to a certain section.\nFor example: <a href=\"http://alvarotrigo.com/pagePiling/#page2\">http://alvarotrigo.com/pagePiling/#page2</a></p>\n\n<p><strong>Be careful!</strong> <code>data-anchor</code> tags can not have the same value as any ID element on the site (or NAME element for IE).</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#using-a-menu\"><span class=\"octicon octicon-link\"></span></a>Using a menu</h3>\n\n<p>To link the menu with the active section you will have to use the <code>menu</code> option and make use of anchor links (#) as explained below in the options section.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#creating-a-scrollable-section\"><span class=\"octicon octicon-link\"></span></a>Creating a scrollable section</h3>\n\n<p>In case you want to have a section with large content and therefore create an scroll bar for that section, you can do it by adding the class <code>pp-scrollable</code> to that section:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>section pp-scrollable<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#options\"><span class=\"octicon octicon-link\"></span></a>Options</h2>\n\n<ul><li><p><code>verticalCentered</code>: (default <code>true</code>) Vertically centering of the content within sections.</p></li>\n<li><p><code>scrollingSpeed</code>: (default <code>700</code>) Speed in milliseconds for the scrolling transitions.</p></li>\n<li><p><code>sectionsColor</code>:(default <code>none</code>) Define the CSS <code>background-color</code> property for each section:\nExample:</p></li>\n</ul><div class=\"highlight highlight-source-js\"><pre>$(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#pagepiling<span class=\"pl-pds\">\'</span></span>).pagepiling({\n    sectionsColor<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#f2f2f2<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#4BBFC3<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#7BAABE<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>whitesmoke<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#000<span class=\"pl-pds\">\'</span></span>],\n});</pre></div>\n\n<ul><li><code>anchors</code>: (default <code>[]</code>) Defines the anchor links (#example) to be shown on the URL for each section. Using anchors forward and backward navigation will also be possible through the browser. This option also allows users to bookmark a specific section. <strong>Be careful!</strong> if you use anchors, they can not have the same value as any ID element on the site (or NAME element for IE).</li>\n</ul><p><strong>Important</strong> It is helpful to understand that the values in the <code>anchors</code> option array correlate directly to the element with the class of <code>.section</code> by it\'s position in the markup.</p>\n\n<ul><li><p><code>easing</code>: (default <code>swing</code>) Defines the transition effect to use for the vertical scrolling.\nIt requires <a href=\"http://jqueryui.com/\">jQuery UI</a> in order to use any other transition other than <code>swing</code> and <code>linear</code>. Other libraries could be used instead.</p></li>\n<li><p><code>loopTop</code>: (default <code>false</code>) Defines whether scrolling up in the first section should scroll to the last one or not.</p></li>\n<li><p><code>loopBottom</code>: (default <code>false</code>) Defines whether scrolling down in the last section should scroll to the first one or not.</p></li>\n<li><p><code>css3</code>: (default <code>true</code>). Defines wheter to use JavaScript or CSS3 transforms to scroll within sections. Useful to speed up the movement in tablet and mobile devices with browsers supporting CSS3. If this option is set to <code>true</code> and the browser doesn\'t support CSS3, a jQuery fallback will be used instead.</p></li>\n<li><p><code>normalScrollElements</code>: (default <code>null</code>) If you want to avoid the auto scroll when scrolling over some elements, this is the option you need to use. (useful for maps, scrolling divs etc.) It requires a string with the jQuery selectors for those elements. (For example: <code>normalScrollElements: \'#element1, .element2\'</code>)</p></li>\n<li><p><code>normalScrollElementTouchThreshold</code> : (default <code>5</code>) Defines the threshold for the number of hops up the html node tree pagePiling will test to see if <code>normalScrollElements</code> is a match to allow scrolling functionality on divs on a touch device. (For example: <code>normalScrollElementTouchThreshold: 3</code>)</p></li>\n<li><p><code>keyboardScrolling</code>: (default <code>true</code>) Defines if the content can be navigated using the keyboard</p></li>\n<li><p><code>touchSensitivity</code>: (default <code>5</code>) Defines a percentage of the browsers window width/height, and how far a swipe must measure for navigating to the next section.</p></li>\n<li><p><code>animateAnchor</code>: (default <code>true</code>) Defines whether the load of the site when given an anchor (#) will scroll with animation to its destination or will directly load on the given section.</p></li>\n<li><p><code>direction</code>: (default <code>vertical</code>) Defines if the scroll is vertical or horizontal.</p></li>\n<li><p><code>menu</code>: (default <code>false</code>) A selector can be used to specify the menu to link with the sections. This way the scrolling of the sections will activate the corresponding element in the menu using the class <code>active</code>.\nThis won\'t generate a menu but will just add the <code>active</code> class to the element in the given menu with the corresponding anchor links.\nIn order to link the elements of the menu with the sections, an HTML 5 data-tag (<code>data-menuanchor</code>) will be needed to use with the same anchor links as used within the sections. Example:</p></li>\n</ul><div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>myMenu<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">data-menuanchor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>firstPage<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>active<span class=\"pl-pds\">\"</span></span>&gt;&lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#firstPage<span class=\"pl-pds\">\"</span></span>&gt;First section&lt;/<span class=\"pl-ent\">a</span>&gt;&lt;/<span class=\"pl-ent\">li</span>&gt;\n    &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">data-menuanchor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>secondPage<span class=\"pl-pds\">\"</span></span>&gt;&lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#secondPage<span class=\"pl-pds\">\"</span></span>&gt;Second section&lt;/<span class=\"pl-ent\">a</span>&gt;&lt;/<span class=\"pl-ent\">li</span>&gt;\n    &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">data-menuanchor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>thirdPage<span class=\"pl-pds\">\"</span></span>&gt;&lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#thirdPage<span class=\"pl-pds\">\"</span></span>&gt;Third section&lt;/<span class=\"pl-ent\">a</span>&gt;&lt;/<span class=\"pl-ent\">li</span>&gt;\n    &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">data-menuanchor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fourthPage<span class=\"pl-pds\">\"</span></span>&gt;&lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#fourthPage<span class=\"pl-pds\">\"</span></span>&gt;Fourth section&lt;/<span class=\"pl-ent\">a</span>&gt;&lt;/<span class=\"pl-ent\">li</span>&gt;\n&lt;/<span class=\"pl-ent\">ul</span>&gt;</pre></div>\n\n<div class=\"highlight highlight-source-js\"><pre>$(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#pagepiling<span class=\"pl-pds\">\'</span></span>).pagepiling({\n    anchors<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>firstPage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>secondPage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>thirdPage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>fourthPage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lastPage<span class=\"pl-pds\">\'</span></span>],\n    menu<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#myMenu<span class=\"pl-pds\">\'</span></span>\n});</pre></div>\n\n<p><strong>Note:</strong> the menu element should be placed outside the pagePiling wrapper in order to avoid problem when using <code>css3:true</code>. Otherwise it will be appended to the <code>body</code> by the plugin itself.</p>\n\n<ul><li><p><code>navigation</code>: (default <code>false</code>) If set to <code>true</code>, it will show a navigation bar made up of small circles.</p></li>\n<li><p><code>sectionSelector</code>: (default <code>.section</code>) Defines the jQuery selector used for the plugin sections. It might need to be changed sometimes to avoid problem with other plugins using the same selectors as pagePiling.js..</p></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#methods\"><span class=\"octicon octicon-link\"></span></a>Methods</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#movesectionup\"><span class=\"octicon octicon-link\"></span></a>moveSectionUp()</h3>\n\n<p>Scrolls one section up:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>$.fn.pagepiling.moveSectionUp();</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#movesectiondown\"><span class=\"octicon octicon-link\"></span></a>moveSectionDown()</h3>\n\n<p>Scrolls one section down:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>$.fn.pagepiling.moveSectionDown();</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#movetosection\"><span class=\"octicon octicon-link\"></span></a>moveTo(section)</h3>\n\n<p>Scrolls the page to the given section.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">/*Scrolling to the section with the anchor link `firstSection`  */</span>\n$.fn.pagepiling.<span class=\"pl-c1\">moveTo</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>firstSection<span class=\"pl-pds\">\'</span></span>);\n</pre></div>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">//Scrolling to the 3rd section in the site</span>\n$.fn.pagepiling.<span class=\"pl-c1\">moveTo</span>(<span class=\"pl-c1\">3</span>);\n\n<span class=\"pl-c\">//Which is the same as</span>\n$.fn.pagepiling.<span class=\"pl-c1\">moveTo</span>(<span class=\"pl-c1\">3</span>);</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#setallowscrollingboolean\"><span class=\"octicon octicon-link\"></span></a>setAllowScrolling(boolean)</h3>\n\n<p>Adds or remove the possibility of scrolling through sections by using the mouse wheel/trackpad or touch gestures (which is active by default).</p>\n\n<div class=\"highlight highlight-source-js\"><pre>$.fn.pagepiling.setAllowScrolling(<span class=\"pl-c1\">false</span>);</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#setkeyboardscrollingboolean\"><span class=\"octicon octicon-link\"></span></a>setKeyboardScrolling(boolean)</h3>\n\n<p>Adds or remove the possibility of scrolling through sections by using the keyboard arrow keys (which is active by default).</p>\n\n<div class=\"highlight highlight-source-js\"><pre>$.fn.pagepiling.setKeyboardScrolling(<span class=\"pl-c1\">false</span>);</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#setscrollingspeedmilliseconds\"><span class=\"octicon octicon-link\"></span></a>setScrollingSpeed(milliseconds)</h3>\n\n<p>Defines the scrolling speed in milliseconds.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>$.fn.pagepiling.setScrollingSpeed(<span class=\"pl-c1\">700</span>);</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#callbacks\"><span class=\"octicon octicon-link\"></span></a>Callbacks</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#afterload-anchorlink-index\"><span class=\"octicon octicon-link\"></span></a>afterLoad (<code>anchorLink</code>, <code>index</code>)</h3>\n\n<p>Callback fired once the sections have been loaded, after the scrolling has ended.\nParameters:</p>\n\n<ul><li><code>anchorLink</code>: anchorLink corresponding to the section.</li>\n<li><code>index</code>: index of the section. Starting from 1.</li>\n</ul><p>In case of not having anchorLinks defined in the plugin the <code>index</code> parameter would be the only one to use.</p>\n\n<p>Example:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>    $(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#pagepiling<span class=\"pl-pds\">\'</span></span>).pagepiling({\n        anchors<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>firstPage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>secondPage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>thirdPage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>fourthPage<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lastPage<span class=\"pl-pds\">\'</span></span>],\n\n        <span class=\"pl-en\">afterLoad</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">anchorLink</span>, <span class=\"pl-smi\">index</span>){\n            <span class=\"pl-c\">//using index</span>\n            <span class=\"pl-k\">if</span>(index <span class=\"pl-k\">==</span> <span class=\"pl-c1\">3</span>){\n                <span class=\"pl-c1\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Section 3 ended loading<span class=\"pl-pds\">\"</span></span>);\n            }\n\n            <span class=\"pl-c\">//using anchorLink</span>\n            <span class=\"pl-k\">if</span>(anchorLink <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>secondPage<span class=\"pl-pds\">\'</span></span>){\n                <span class=\"pl-c1\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Section 2 ended loading<span class=\"pl-pds\">\"</span></span>);\n            }\n        }\n    });</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#onleave-index-nextindex-direction\"><span class=\"octicon octicon-link\"></span></a>onLeave (<code>index</code>, <code>nextIndex</code>, <code>direction</code>)</h3>\n\n<p>This callback is fired once the user leaves a section, in the transition to the new section.</p>\n\n<p>Parameters:</p>\n\n<ul><li><code>index</code>: index of the leaving section. Starting from 1.</li>\n<li><code>nextIndex</code>: index of the destination section. Starting from 1.</li>\n<li><code>direction</code>: it will take the values <code>up</code> or <code>down</code> depending on the scrolling direction.</li>\n</ul><p>Example:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>    $(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#pagepiling<span class=\"pl-pds\">\'</span></span>).pagepiling({\n        <span class=\"pl-en\">onLeave</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">index</span>, <span class=\"pl-smi\">nextIndex</span>, <span class=\"pl-smi\">direction</span>){\n            <span class=\"pl-c\">//after leaving section 2</span>\n            <span class=\"pl-k\">if</span>(index <span class=\"pl-k\">==</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">&amp;&amp;</span> direction <span class=\"pl-k\">==</span><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>down<span class=\"pl-pds\">\'</span></span>){\n                <span class=\"pl-c1\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Going to section 3!<span class=\"pl-pds\">\"</span></span>);\n            }\n\n            <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span>(index <span class=\"pl-k\">==</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">&amp;&amp;</span> direction <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>up<span class=\"pl-pds\">\'</span></span>){\n                <span class=\"pl-c1\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Going to section 1!<span class=\"pl-pds\">\"</span></span>);\n            }\n        }\n    });</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#afterrender\"><span class=\"octicon octicon-link\"></span></a>afterRender()</h3>\n\n<p>This callback is fired just after the structure of the page is generated. This is the callback you want to use to initialize other plugins or fire any code which requires the document to be ready (as this plugin modifies the DOM to create the resulting structure).</p>\n\n<p>Example:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>    $(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#pagepiling<span class=\"pl-pds\">\'</span></span>).pagepiling({\n        <span class=\"pl-en\">afterRender</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(){\n            <span class=\"pl-c1\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The resulting DOM structure is ready<span class=\"pl-pds\">\"</span></span>);\n        }\n    });</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#resources\"><span class=\"octicon octicon-link\"></span></a>Resources</h2>\n\n<p><a href=\"http://matthewlein.com/ceaser/\">CSS Easing Animation Tool - Matthew Lein</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#who-is-using-pagepilingjs\"><span class=\"octicon octicon-link\"></span></a>Who is using pagePiling.js</h2>\n\n<p>If you want your page to be listed here. Please <a href=\"mailto:alvaro@alvarotrigo.com\">contact me</a> with the URL.</p>\n\n<p><a href=\"http://www.facebookgroups.com/\"><img src=\"https://camo.githubusercontent.com/3d77fc91a106f13b55ebb28e417245846632fa98/687474703a2f2f77616c6c7061706572732d666f722d697061642e636f6d2f66756c6c706167652f696d6773332f6c6f676f732f66616365626f6f6b2d7061676570696c696e672e676966\" alt=\"Facebook\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#donations\"><span class=\"octicon octicon-link\"></span></a>Donations</h2>\n\n<p>Donations would be more than welcome :)</p>\n\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=BEK5JQCQMED4J&amp;lc=GB&amp;item_name=pagePiling.js&amp;currency_code=USD&amp;bn=PP-DonationsBF%3Abtn_donate_LG.gif%3ANonHosted\"><img src=\"https://camo.githubusercontent.com/24ae43518013d5c9306ddadbbc2fdea234d3522c/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f47422f692f62746e2f62746e5f646f6e61746543435f4c472e676966\" alt=\"Donate\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alvarotrigo/pagePiling.js#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>(The MIT License)</p>\n\n<p>Copyright (c) 2014 Alvaro Trigo &lt;<a href=\"mailto:alvaro@alvarotrigo.com\">alvaro@alvarotrigo.com</a>&gt;</p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n',1),(165,'Simple Puppet Module Testing with Dockunit','http://www.unixdaemon.net/tools/puppet/simple-puppet-module-testing-with-dockunit.html',1,0,'\n<p>Tue, 20 Oct 2015</p>\n\n\n<p>\n\nI\'ve recently begun to look at replacing as much of my custom puppet tooling\nas possible with third-party, open source, code. As part of this I\'m\nplanning to update my old libvirt testing infrastructure with more modern tools,\nand this seems to be leading me heavily down the docker path.</p>\n\n<p>\nOne of the simpler, but less known, solutions in this space seems to be\n<a href=\"https://www.npmjs.com/package/dockunit\">Dockunit</a>, which bills\nitself as \"<cite>Containerized unit testing across any platform and\nprogramming language</cite>\" and is remarkably simple to get started\nwith. I decided to try it on a Fedora host and use it to execute\nrspec tests included in a tiny puppet module on both Centos and Ubuntu.</p>\n\n<p>\nAssuming you already have docker installed and running the addition of\ndockunit to your system is quick and easy, although dockunit is written in node so\nyou\'ll now have that run time installed too.</p>\n\n<pre>\n<code>\n# check docker is up and running\n$ systemctl status docker\n$ docker info\n\n# install npm so dockunit can run\nsudo dnf install npm\n\n# do a local install of the dockunit package\nnpm install dockunit\n</code>\n</pre>\n\n<p>\nNow dockunit and its dependencies are installed you need to add a\nDockunit.json file inside the directory containing the module. For our\nfirst test we\'ll run the specs inside a Centos container and turn the\nverbosity up so we can follow along.</p>\n\n<pre>\n<code>\n$ cd $module\n\n$ cat dockunit.json\n{\n  \"containers\": [\n    {\n      \"prettyName\": \"Centos 7\",\n      \"image\": \"centos:7\",\n      \"beforeScripts\": [\n        \"yum install -y rubygems rubygem-bundler ruby-devel make rubygem-json gcc\",\n        \"bundle install\"\n      ],\n      \"testCommand\": \"bundle exec rake spec\"\n    }\n  ]\n}\n\n# the local node install didn\'t put the binary in my path\n$ ~/node_modules/dockunit/bin/dockunit --du-verbose\n\n... snip ...\nTesting on container Centos 7\n\nPulling docker image: centos:7\n\n... snip ...\n\nRunning \"bundle exec rake spec\" on container Centos 7\n/usr/bin/ruby -I... --pattern spec/\\{classes,unit,integration\\}/\\*\\*/\\*_spec.rb --color\n\nnettools\n  should compile into a catalogue without dependency cycles\n  should contain Package[net-tools]\n\nFinished in 1.12 seconds (files took 0.74765 seconds to load)\n2 examples, 0 failures\n\n1 container(s) passed\n</code>\n</pre>\n\n<p>\nAlthough I\'ve heavily snipped dockunits output you can still get an idea of\nthe basic flow, including the results from our specs. As helper tools go\nthis one requires a very small ramp up and if you\'re looking to test basic\nmodules, gems or pip packages then dockunit might be all you need for quite\na while. Now we\'ve got our first use case running let\'s be a little more\nambitious and try to do a run on Centos as before but also add Fedora 22\nand Ubuntu 15.04.</p>\n\n<pre>\n<code>\n\n$ cat Dockunit.json \n{\n  \"containers\": [\n    { \n      \"prettyName\": \"Centos 7\",\n      \"image\": \"centos:7\",\n      \"beforeScripts\": [\n        \"yum install -y rubygems rubygem-bundler ruby-devel make rubygem-json gcc\",\n        \"bundle install\"\n      ],\n      \"testCommand\": \"bundle exec rake spec\"\n    },\n    {\n      \"prettyName\": \"Fedora 22\",\n      \"image\": \"fedora:22\",\n      \"beforeScripts\": [\n        \"dnf install -y rubygems rubygem-bundler ruby-devel make rubygem-json gcc\",\n        \"bundle install\"\n      ],\n      \"testCommand\": \"bundle exec rake spec\"\n    },\n    {\n      \"prettyName\": \"Ubuntu 15:04\",\n      \"image\": \"ubuntu:15.04\",\n      \"beforeScripts\": [\n        \"apt-get update\",\n        \"apt-get install -y bundler\",\n        \"bundle install\"\n      ],\n      \"testCommand\": \"bundle exec rake spec\"\n    }\n  ]\n}\n\n# run the tests under all containers\n$ ~/node_modules/dockunit/bin/dockunit --du-verbose\n\n# run the tests against a single container\n# --du-container is the container index, starting from Centos at 0\n$ ~/node_modules/dockunit/bin/dockunit --du-verbose --du-container=1\n\n</code>\n</pre>\n\n<p>The examples here are a little slow due to pulling in all the\ndependencies on container creation but that\'s easily fixed by creating a\nreusable image with the testing dependencies and storing it your own\ndocker repository. Running the dockunit command again will now run the\ntestes under each of the three containers, unfortunately in serial, so it\ncan take a little while. Still, dockunit is a nice, self-contained tool that\ncan be an excellent jumping in point for someone who wants to use\ncontainers for simple testing but has no supporting infrastructure and\nwants to as simply as possible.\n</p>\n<p class=\"posted\">\nPosted: 2015/10/20  18:09\n | <i><a href=\"http://www.unixdaemon.net/tools/puppet/\">/tools/puppet</a></i> |\n<a href=\"http://www.unixdaemon.net/tools/puppet/simple-puppet-module-testing-with-dockunit.html\">Permanent link to this entry</a>\n</p>\n\n<hr /><p>Copyright © 2000-2014 Dean Wilson :: \n        <a href=\"http://www.unixdaemon.net/cgi-bin/blosxom.pl/index.rss\" title=\"Unixdaemon RSS Feed\">RSS Feed</a>\n      </p>\n    ',1),(168,'wkoszek/flviz','https://github.com/wkoszek/flviz',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://ci.appveyor.com/project/wkoszek/flviz\"><img src=\"https://camo.githubusercontent.com/762bce4f21dbe6610a705da2ea8b7356954a1dcf/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f367932366c656b7933333733653671773f7376673d74727565\" alt=\"Build status\" /></a></p>\n\n<p>FLVIZ stands for \"Formal Languages Visualizer\". It is a Windows GUI program\nwhich reads a configuration file, and based on its content creates a\nvisualization of a state machine (graph), and lets you apply a stimulus\n(vocabulary) and see the state transitions happen dynamically.</p>\n\n<p><a href=\"https://github.com/wkoszek/flviz/blob/master/img/flviz_screenshot.jpg\"><img src=\"https://github.com/wkoszek/flviz/raw/master/img/flviz_screenshot.jpg\" alt=\"flviz_screenshot.jpg\" /></a></p>\n\n\n\n<p>It was originally written in 2009 during my \"Formal Languages\" class which\nwas a part of my M.Sc CS curriculum.  The biggest challenge was getting it on\ntime and making it work under Windows, since it was written in about 3 days\non FreeBSD and then quickly ported. You can see what I mean if you glance at\nthe <code>release</code> directory.</p>\n\n<p>Created for Windows XP with SP 3 and based on QT Creator and <code>QT4</code>\nlibrary, it hasn\'t been build/used since I finished the class. In 2015 I\nhave updated it: by using <a href=\"http://www.appveyor.com\">http://www.appveyor.com</a> I converted it to <code>Qt5</code>\nlibrary and made it work on Windows Server 2012.</p>\n\n<p>During \"Formal languages\" class we were provided the state machine\ninput file. The format isn\'t something I designed and is very imperfect.</p>\n\n\n\n<ul><li>Windows system. Originally XP, then ported to Windows Server 2012. I\nsuspect any decent Windows version should be fine.</li>\n<li>Qt Creator (tested with Qt 5.5)</li>\n<li>MinGW GCC (installation as a part of Qt)\n\n<ul><li>I haven\'t tested building it with Microsoft Visual C++</li>\n</ul></li>\n</ul><p>All libraries are present in the repo, so deployment straight after\ncompilation should be possible.</p>\n\n\n\n<p>For convenience, build script <code>build.bat</code> is present in the repository. To\nbuild, run:</p>\n\n<pre><code>build.bat\n</code></pre>\n\n<p>Please note this script may need to be adjusted if you end up building with\nanything else but Qt 5.5.</p>\n\n\n\n<p>If you clone the repository and also decide to use Appveyor for remote\ntesting/work, you may want to run:</p>\n\n<pre><code>gettools.bat\n</code></pre>\n\n<p>Which will install both Vim editor and ConEmu, which are convenience tools\nfor development.</p>\n\n\n\n<p>Data format was provided in a class. It\'s not great. Sample data format is\nas follows:</p>\n\n<pre><code> filename   line             data\n---------------------------------------------------------\ndata.1.txt |  1 |       5 3 2\ndata.1.txt |  2 |\ndata.1.txt |  3 |       &lt;tablica wejsciowa ASD&gt;\ndata.1.txt |  4 |       0 1 e\ndata.1.txt |  5 |       1 f f 2\ndata.1.txt |  6 |       2 3 f f\ndata.1.txt |  7 |       3 f f 2\ndata.1.txt |  8 |       4 f 5 f\ndata.1.txt |  9 |       5 f f f\ndata.1.txt | 10 |\ndata.1.txt | 11 |       &lt;tablica stanow koncowych&gt;\ndata.1.txt | 12 |       3 4\n</code></pre>\n\n<p>Empty spaces or lines don\'t matter. For convenience of discussion, I\'m\nmentioning line numbers for reference below. <code>f</code> means empty state.</p>\n\n<p>TODO: understand state indexing. My original comment stated states are\nindexed from 0, which I believe referred to the implementation.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/wkoszek/flviz#data-format-explanation\"><span class=\"octicon octicon-link\"></span></a>Data format explanation</h2>\n\n<ul><li><p>Line (1), intro:</p>\n\n<ul><li>5 states</li>\n<li>3 letters in the alphabet</li>\n<li>2 end states</li>\n</ul></li>\n<li><p>Line (3), magic pragmas:</p>\n\n<ul><li><code>&lt;tablica wejsciowa ASD&gt;</code> dla automatu ASD</li>\n<li><code>&lt;tablica wejsciowa ASN&gt;</code> dla automatu ASN</li>\n<li><strong>TODO</strong>: I don\'t remember what these were all about.</li>\n</ul></li>\n<li><p>Line (4):</p>\n\n<ul><li>Alphabet available to this program</li>\n</ul></li>\n<li><p>Lines (5--9):</p>\n\n<ul><li>first column means state name, if I\'m not mistaken</li>\n<li>consecutive columns define transitions if one of the alphabet inputs is\napplied.</li>\n<li><strong>TODO</strong>: example needed. Must confirm.</li>\n</ul></li>\n<li><p>Line (11), magic pragma:</p>\n\n<ul><li>List of end states.</li>\n</ul></li>\n</ul><p>There are some example data files in the <code>dane</code> folder.</p>\n',1),(169,'CryptDB','https://css.csail.mit.edu/cryptdb/',1,0,'\n\n\n\n<p> Online applications are vulnerable to theft of sensitive information\nbecause adversaries can exploit software bugs to gain access to private\ndata, and because curious or malicious administrators may capture and\nleak data.  CryptDB is a system that provides practical and provable\nconfidentiality in the face of these attacks for applications backed\nby SQL databases.  It works by <i>executing SQL queries over encrypted\ndata</i> using a collection of efficient SQL-aware encryption schemes.\nCryptDB can also <i>chain encryption keys to user passwords</i>, so that a\ndata item can be decrypted only by using the password of one of the users\nwith access to that data.  As a result, a database administrator never\ngets access to decrypted data, and even if all servers are compromised,\nan adversary cannot decrypt the data of any user who is not logged in.\nAn analysis of a trace of 126 million SQL queries from a production MySQL\nserver shows that CryptDB can support operations over encrypted data\nfor 99.5% of the 128,840 columns seen in the trace.  Our evaluation\nshows that CryptDB has low overhead, reducing throughput by 14.5%\nfor phpBB, a web forum application, and by 26% for queries from TPC-C,\ncompared to unmodified MySQL.  Chaining encryption keys to user passwords\nrequires 11-13 unique schema annotations to secure more than 20 sensitive\nfields and 2-7 lines of source code changes for three multi-user web\napplications.</p>\n\n<br /><div align=\"center\">\n    <img src=\"https://css.csail.mit.edu/cryptdb/cryptdbdiag.jpg\" width=\"860\" vspace=\"3\" alt=\"cryptdbdiag.jpg\" /></div>\n\n<div align=\"center\">\n  \n      <a href=\"https://css.csail.mit.edu/cryptdb/response.html\">Response</a> to incorrect claims in \"Inference attacks on property preserving encrypted databases\" [Naveed et al., 2015]\n\n</div>\n\n\n\n<hr /><a href=\"https://css.csail.mit.edu/cryptdb/#People\" class=\"subtitle\">People</a>\n<a href=\"https://css.csail.mit.edu/cryptdb/#Publications\" class=\"subtitle\">Publications</a>\n<a href=\"https://css.csail.mit.edu/cryptdb/#Software\" class=\"subtitle\">Software</a>\n<a href=\"https://css.csail.mit.edu/cryptdb/#Impact\" class=\"subtitle\">Impact</a>\n<a href=\"https://css.csail.mit.edu/cryptdb/#Press\" class=\"subtitle\">Press</a>\n \n<hr /><h3>People</h3>\n<h3>Publications</h3>\n<ul><li><p>Raluca Ada Popa, Catherine M. S. Redfield, Nickolai Zeldovich, and Hari Balakrishnan.<br /><a href=\"http://people.csail.mit.edu/nickolai/papers/raluca-cryptdb.pdf\">CryptDB: Protecting Confidentiality with Encrypted Query Processing</a>.<br />In <i>Proceedings of the 23rd ACM Symposium on Operating Systems Principles (SOSP)</i>, Cascais, Portugal, October 2011.<br /><i>(This is the main paper describing CryptDB.)</i>\n  \n  \n  </p></li><li><p>Raluca Ada Popa.<br /><a href=\"http://www.eecs.berkeley.edu/~raluca/Thesis.pdf\">Building Practical Systems that Compute on Encrypted Data</a>.<br />Ph.D. thesis, 2014. <br /><i>(This thesis elaborates on various aspects of CryptDB.)</i>\n    \n  \n  \n      </p></li><li><p>Raluca Ada Popa, Nickolai Zeldovich, and Hari Balakrishnan.<br /><a href=\"https://eprint.iacr.org/2015/979\">Guidelines for Using the CryptDB System Securely</a>.<br />In <i>Cryptology ePrint Archive</i>, Report 2015/979.\n  \n  \n  \n\n</p></li><li><p>Raluca Ada Popa, Frank H. Li, and Nickolai Zeldovich.<br /><a href=\"http://web.mit.edu/ralucap/www/mope.pdf\">An Ideal-Security Protocol for Order-Preserving Encoding</a>.<br />In <i>Proceedings of the 34th IEEE Symposium on Security and Privacy (IEEE\n      S&amp;P/Oakland)</i>, San Francisco, CA, May 2013.<br /><i>(This paper constructs the encryption scheme that computes order queries in CryptDB.)</i>\n      \n\n  </p></li><li><p>Stephen Tu, M. Frans Kaashoek, Samuel Madden, and Nickolai Zeldovich.<br /><a href=\"http://people.csail.mit.edu/nickolai/papers/tu-monomi.pdf\">Processing Analytical Queries over Encrypted Data</a>.<br />In <i>Proceedings of the 39th International Conference on Very Large Data Bases (VLDB)</i>, Riva del Garda, Italy, August 2013.<br /><i>(This paper extends CryptDB\'s basic design to complex analytical queries and large data sets.)</i>\n\n  </p></li><li><p>Raluca Ada Popa and Nickolai Zeldovich.<br /><a href=\"http://people.csail.mit.edu/nickolai/papers/popa-join-tr.pdf\">Cryptographic treatment of CryptDB\'s Adjustable Join</a>.<br />Technical Report MIT-CSAIL-TR-2012-006, Computer Science and Artificial Intelligence Laboratory, Cambridge, MA, March 2012.<br /><i>(A formal description and analysis of CryptDB\'s adjustable join cryptographic scheme.)</i>\n\n  </p></li><li><p>Carlo Curino, Evan P. C. Jones, Raluca Ada Popa, Nirmesh Malviya, Eugene Wu, Sam Madden, Hari Balakrishnan, and Nickolai Zeldovich.<br /><a href=\"http://people.csail.mit.edu/nickolai/papers/curino-relcloud-cidr.pdf\">Relational Cloud: A Database-as-a-Service for the Cloud</a>.<br />In <i>Proceedings of the 5th Biennial Conference on Innovative Data Systems Research (CIDR 2011)</i>, Pacific Grove, CA, January 2011.<br /><i>(A paper describing how CryptDB can help with hosting databases in the cloud.)</i>\n\n  </p></li><li><p>Raluca Ada Popa, Nickolai Zeldovich, and Hari Balakrishnan.<br /><a href=\"http://people.csail.mit.edu/nickolai/papers/raluca-cryptdb-tr.pdf\">CryptDB: A Practical Encrypted Relational DBMS</a>.<br />Technical Report MIT-CSAIL-TR-2011-005, Computer Science and Artificial Intelligence Laboratory, Cambridge, MA, January 2011.<br /><i>(An earlier technical report on CryptDB, which has been superseeded by the SOSP paper above.)</i>\n\n</p></li></ul><a></a>\n<h3>Software</h3>\n\nOur source code is available. The source code has not\nbeen maintained since March 2014 and hence, it has only been\ntested up to Ubuntu 13.04. We might resume maintaining\nthe source code in 2015. \nYou can access it using\n<a href=\"http://git-scm.com/\">git</a>, as follows:\n\n<blockquote>\n<pre>\ngit clone -b public git://g.csail.mit.edu/cryptdb\n</pre>\n</blockquote>\n\n<p>\nTo install, read <b>doc/README</b>.\n\n</p><p>\nWe will \nannounce any significant changes to CryptDB on the <tt>cryptdb-announce</tt>\nmailing list.\n\n</p><p>\nIf you are interested in using CryptDB\'s source code in any way or to\nreceive announcements about CryptDB, we\nencourage you to subscribe to the <tt>cryptdb-announce</tt> mailing\nlist below.\n</p><h3>Mailing lists</h3>\n<p>\nPlease subscribe to the <tt>cryptdb-announce</tt> mailing list to receive\nannouncements about updates to CryptDB.\n</p><p>\nTo subscribe, fill\nout the following form. You will be sent email requesting\nconfirmation, to prevent others from gratuitously subscribing\nyou.\n\n</p>\n\n<p>\n  We no longer maintain the mailing list <tt>cryptdb-users</tt>. The\n  list was used to ask questions\nabout CryptDB, get help, and offer any suggestions. To see the collection of\nprior postings to the list, visit the\n<a href=\"https://lists.csail.mit.edu/pipermail/cryptdb-users\">archive</a>.\n\n\n\n\n\n\n<a></a></p><h3>Impact</h3>\n\nA few companies have already started using CryptDB: <table class=\"spacing\"><tr class=\"bordertr\"><td width=\"20%\">\n            <div align=\"center\">\n                <img src=\"https://css.csail.mit.edu/cryptdb/google.jpg\" width=\"100\" align=\"middle\" alt=\"google.jpg\" /><br /><b>Encrypted BigQuery</b>\n                    </div>\n        </td>\n        \n        <td> Google recently deployed a system for performing SQL-like queries over an encrypted database following (and giving credit to) the CryptDB design. Their service uses the encryption building blocks from CryptDB (RND, DET, HOM, and SEARCH), rewrites queries and annotates\n            the schema as in CryptDB. <a href=\"http://code.google.com/p/encrypted-bigquery-client/\">Here</a> is Google\'s source code release of the <a href=\"http://code.google.com/p/encrypted-bigquery-client/\">Encrypted BigQuery client</a>; Google will make an official announcement soon.</td>\n    </tr><tr class=\"bordertr\"><td width=\"20%\"><div align=\"center\">\n            <img src=\"https://css.csail.mit.edu/cryptdb/lincoln.jpg\" width=\"60\" alt=\"lincoln.jpg\" /><br /><b>Lincoln Laboratory</b>\n                </div>\n        </td>\n        <td> Lincoln Labs added the CryptDB design on top of their D4M Accumulo no-SQL engine (using the RND, DET, OPE and HOM building blocks). </td>\n    </tr><tr class=\"bordertr\"><td width=\"20%\"> <p><b>sql.mit.edu</b></p> <br /></td>\n        <td>  <p>sql.mit.edu is a SQL server at MIT hosting many MIT-ran applications. Volunteering users of Wordpress switched to running Wordpress through CryptDB, using our source code.<br /></p>\n            <br /></td>\n        \n    </tr><tr><td width=\"20%\">  <p><b>Other companies using CryptDB\'s design</b></p> </td>\n        <td> SAP AG and a new startup are applying CryptDB\'s design to their setting.\n    </td></tr></table><a></a><h3>Press</h3>\n\n\n\n\n',1),(170,'Getting Started','http://www.metabase.com/docs/v0.12.0/getting-started.html',0,0,'\n        \n        <h6 class=\"docs-breadcrumb\">v0.12.0 / Table of Contents\n           / Getting Started </h6>\n        \n\n        \n\n<p>Metabase is a simple and powerful analytics tool which lets anyone learn and make decisions from their company\'s data. No technical knowledge required! We hope you love it.</p>\n\n<h2>Logging in</h2>\n\n<p>The way you log in to Metabase will depend on how you or your admin set it up, so if you don’t know where to go, just ask the person who sent you your Metabase invite.</p>\n\n<h2>The homepage</h2>\n\n<p>Go ahead and log in to Metabase and the first thing you\'ll see is the activity feed. Right now there’s not much there, but it’ll soon get full as you and your teammates do things in Metabase.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/ActivityFeed.png\" alt=\"Activity Feed\" /></p>\n\n<h2>Asking a new question</h2>\n\n<p>But, enough about that — let’s get to asking questions. For the next few examples, we\'ll be using the <strong>Sample Dataset</strong> that comes with Metabase.</p>\n\n<p>Go ahead and click <strong>New Question</strong> at the top of the screen. Now we’re on the new question page. The bar that you see going across the page is what you’ll use to ask your questions. The “Select a table” dropdown should already be open, showing you a list of your database(s) and the tables within them.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/QueryBuilder.png\" alt=\"Query Builder\" /></p>\n\n<h2>Our first question</h2>\n\n<p>We’re going to ask a question about the Orders table in the Sample Dataset database, so we’ll click on <strong>Orders</strong> in the dropdown. The Orders table has a bunch of fake data in it about product orders for a made up company. If you just want to see everything that’s in this table, you can click <strong>Run query</strong> and see all the raw data.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/Orders.png\" alt=\"Orders\" /></p>\n\n<p>Let\'s start with a simple question: how many orders have been placed with a subtotal (before tax) greater than $40?  More precisely, this question translates to, \"How many records (or rows) are in the table \'Orders\' with a value greater than 40 in the Subtotal column?”</p>\n\n<p>To find out, we want to <em>filter</em> the data by <strong>the field we’re interested in</strong>, which is <strong>Subtotal</strong>. Since each row in this table represents one order, counting how many rows there are after we’ve filtered them will give us the answer we want.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/Subtotal.png\" alt=\"Subtotal\" /></p>\n\n<p>So, after we select Subtotal from the Filter dropdown we’ll get some options for the filter, and we’ll choose <strong>Greater than</strong>, type the number 40 in the box, and click Add Filter.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/AddFilter.png\" alt=\"Add Filter\" /></p>\n\n<p>Next we need to tell Metabase what we want to see. Under the View dropdown, we’ll select <strong>Count</strong>, because, like we said, we want to count the total number of rows that match our filter. If we left the View set to Raw Data, that would just show us a list of all the rows, which doesn’t answer our question.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/Count.png\" alt=\"Count\" /></p>\n\n<h3>And our first answer!</h3>\n\n<p>Okay, cool — we’re ready to ask our question, so let’s click the <strong>Run query</strong> button!</p>\n\n<p>So it looks like there were 12,284 orders, each with a subtotal greater than $40. Ka-ching! Another way of saying this is that there were 12,284 <em>records</em> in the table that met the parameters we set.\n<img src=\"http://www.metabase.com/docs/v0.12.0/images/CountAnswer.png\" alt=\"Count Answer\" /></p>\n\n<h3>Tweaking our question</h3>\n\n<p>Okay, so that’s pretty useful, but it would be even <em>more</em> useful if we could know on <em>which days</em> our customers placed these big orders. That’s not hard to do at all.</p>\n\n<p>Back in the question builder box, next to <strong>Count</strong> in the View area, we’ll click on <strong>Add a grouping.</strong> This shows us a dropdown of columns that we can use to group our results by. the one we want is <strong>Created At</strong>, because this will now give us a separate total count of orders over $40 by the days the orders were placed (or “created”). So we’ll select <strong>Created At</strong> and click <strong>Run query</strong> again.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/CreatedAt.png\" alt=\"Created At\" /></p>\n\n<p>This time our result looks different: instead of one big number, now we’re looking at a table that shows us how many orders over $40 there were each day. Neat, but this isn’t really a great way of visualizing this information.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/CountByDay.png\" alt=\"Count by Day\" /></p>\n\n<h3>Changing the visualization</h3>\n\n<p>Luckily enough, Metabase can present the answers to your questions in a variety of ways. To change the visualization, just select one of the options from the <strong>Visualization</strong> dropdown menu, which is in the top-left of the screen, above the table. Let’s choose <strong>Area</strong>.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/VisualizationMenu.png\" alt=\"Visualization Dropdown Menu\" /></p>\n\n<p>Sweet! Looks like business is booming — up and to the right is always good. If you want, try playing around with other visualization options in from the dropdown.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/AreaChart.png\" alt=\"Area Chart\" /></p>\n\n<p>You’ll notice that some formats aren’t the best way to show an answer to a question. If Metabase think that\'s the case with a specific answer and visualization, the choice will appear faded in the visualization dropdown menu. For example, it wouldn\'t make sense to show the total number of orders over $40 as a single bar graph, or as a map.</p>\n\n<p>If you want, you can try playing around with your question, like changing the number 40 to a different number. Whenever you make any changes to the question, the blue \"Run query\" button will reappear. Click it to ask your new question and get your new answer.</p>\n\n<h2>Sharing answers with others</h2>\n\n<p>You can use Metabase all on your own, but it becomes even more useful when you start sharing your answers with other people on your team or in your organization. The first step is saving some of your questions.</p>\n\n<h3>Saving questions</h3>\n\n<p>Sometimes you’ll find yourself asking certain questions again and again, whether it’s running regular reports, looking up something about an important segment of users, or just answering the same question for other people in your company. To keep from repeating the same set of steps each time you want to ask the same question, you can save your questions to  use later.</p>\n\n<p>To do this, click on the <strong>SAVE</strong> button in the top-right of the question builder screen.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/SaveButton.png\" alt=\"savebutton\" /></p>\n\n<p>Metabase will take a stab at giving your question a meaningful name, but you can (and should) use your own naming convention that’ll help you and others find your questions later on, after amnesia has sunk in.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/SaveQuestionDialog.png\" alt=\"Save Question Dialog\" /></p>\n\n<p>Once you’ve saved your question, you can either go back to the home page, add your saved question to a dashboard, or keep asking questions. Let’s click <strong>Add to a dashboard</strong> and give that a try.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/SavedQuestion.png\" alt=\"Saved Question\" /></p>\n\n<h3>Creating a dashboard</h3>\n\n<p>Unless you went off and did your own thing, you shouldn’t have any dashboards yet, so you’ll see a dialog that prompts you to create a new one and give it a name and description. Name it anything you’d like. We’ll call ours “My First Dashboard.”</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/CreateDashboard.png\" alt=\"Create Dashboard\" /></p>\n\n<p>Dashboards are great when you have a set of questions and answers that you want to view together. Your saved questions will be displayed as cards on the dashboard, which you can resize and move around to your heart’s content.</p>\n\n<p>So, after you click the button to create your dashboard, you should see your fancy saved question as a little card. Ain’t he cute?</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/SavedDashboard.png\" alt=\"Saved Dashboard\" /></p>\n\n<p>If you’re feeling up to it, you can click the edit button in the top-right of the screen (the one that looks like a pencil), and that’ll let you move and resize your saved question so you can get it looking just how you want it. Just click <strong>Save</strong> in the top-right when you’re done. We’ll make ours a bit wider to let those data points breathe.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/ResizedChart.png\" alt=\"Resized Chart\" /></p>\n\n<h3>Sharing answers directly</h3>\n\n<p>One other thing: once you’ve asked a question or saved a dashboard, the URL in your browser will link directly to that question or dashboard. That means you can copy and paste that URL into an email or chat and let other people see what you’ve found. This will only work if Metabase is installed on a shared server, and will require creating Metabase accounts for the people you want to share with.</p>\n\n<p><img src=\"http://www.metabase.com/docs/v0.12.0/images/ShareableURL.png\" alt=\"shareableurl\" /></p>\n\n<hr /><h2>That’s it!</h2>\n\n<p>You’ve done really well. You now have a dashboard with your question that you can share! At this point you know enough to be dangerous.</p>\n\n<p>Want to learn more? Is your thirst for knowledge insatiable? Check out our <a href=\"http://www.metabase.com/docs/v0.12.0/users-guide/start.html\">Users Guide</a> for more in-depth explanations of the ins and outs of Metabase.</p>\n\n\n      ',1),(172,'maxogden/linux','https://github.com/maxogden/linux',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      readme.md\n    </h3>\n\n    <p><strong>beta software! proceed with caution</strong></p>\n\n<p>Download, install and run Linux on OS X in less than 60 seconds!</p>\n\n<p>npm installs <a href=\"https://github.com/maxogden/hypercore\">hypercore linux</a> (based on <a href=\"http://tinycorelinux.net/\">tiny core linux</a>) and runs it as a daemon using the new Mac OS Yosemite hypervisor (via <a href=\"https://github.com/mist64/xhyve\">xhyve</a>).</p>\n\n<p>See <a href=\"https://www.youtube.com/watch?v=esNlno79dBw\">this youtube video</a> for a demonstration with a cool soundtrack.</p>\n\n<p>This module is a low level component that is part of <a href=\"http://hyperos.io/\">HyperOS</a>, made by the team working on the <a href=\"http://dat-data.com/\">Dat</a> data version control tool. We are working on integrating the other HyperOS components to support advanced functionality like running containers, sharing filesystems etc.</p>\n\n<p>Mac OS Yosemite only for now, Windows support coming later through Hyper-V integration (see <a href=\"https://github.com/maxogden/linux/issues/4\">this issue</a> if you wanna help)</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/maxogden/linux#warning\"><span class=\"octicon octicon-link\"></span></a><strong>WARNING</strong></h2>\n\n<ul><li>xhyve is a very new project, expect bugs! You must be running OS X 10.10.3 Yosemite or later and 2010 or later Mac for this to work.</li>\n<li>if you happen to be running any version of VirtualBox prior to 4.3.30 or 5.0 then xhyve will crash your system either if VirtualBox is running or had been run previously after the last reboot (see xhyve\'s issues <a href=\"https://github.com/maxogden/linux/blob/master/mist64/xhyve#5\">#5</a> and <a href=\"https://github.com/maxogden/linux/blob/master/mist64/xhyve#9\">#9</a> for the full context). So, if you are unable to update VirtualBox to version 4.3.30 or 5, or later, and were using it in your current session please do restart your Mac before attempting to run xhyve.</li>\n<li>(these warnings were borrowed from <a href=\"https://github.com/coreos/coreos-xhyve\">coreos-xhyve</a>)</li>\n</ul><p><a href=\"https://github.com/feross/standard\"><img src=\"https://camo.githubusercontent.com/e06d9d72eecca61c1ba39fdf19868f70fcb3a9b3/68747470733a2f2f63646e2e7261776769742e636f6d2f6665726f73732f7374616e646172642f6d61737465722f62616467652e737667\" alt=\"js-standard-style\" /></a>\n<a href=\"https://travis-ci.org/maxogden/linux\"><img src=\"https://camo.githubusercontent.com/9ab9d84aaf2fc38d762363d7d72471f90642502a/68747470733a2f2f7472617669732d63692e6f72672f6d61786f6764656e2f6c696e75782e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a>\n<a href=\"http://dat-data.com/\"><img src=\"https://camo.githubusercontent.com/8b8fe502ab446008f987df676396e6d2a1e60e1f/687474703a2f2f696d672e736869656c64732e696f2f62616467652f446576656c6f706d656e7425323073706f6e736f72656425323062792d6461742d677265656e2e7376673f7374796c653d666c6174\" alt=\"dat\" /></a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/maxogden/linux#installation\"><span class=\"octicon octicon-link\"></span></a>installation</h3>\n\n<pre><code>npm install linux -g\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/maxogden/linux#usage\"><span class=\"octicon octicon-link\"></span></a>usage</h3>\n\n<p>Quickstart:</p>\n\n<ol><li>Run <code>linux init</code> in a folder where you want to store your linux runtime config</li>\n<li>Run <code>sudo linux boot</code> to start the local linux server daemon</li>\n<li>Run <code>linux ssh</code> to log in to the server daemon over ssh</li>\n<li>Run <code>linux halt</code> to stop the server daemon when you\'re done</li>\n</ol><pre><code>$ linux\nUsage:     linux &lt;command&gt; [args...]\n\nCommands:\n  init     creates a new ./linux folder in this directory to hold config\n  boot     boots up linux from config in ./linux\n  status   checks if linux is running or not\n  ssh      sshes into linux and attaches the session to your terminal\n  run      runs a single command over ssh\n  halt     runs sudo halt in linux, initiating a graceful shutdown\n  kill     immediately ungracefully kills the linux process with SIGKILL\n  pid      get the pid of the linux process\n  ps       print all linux processes running on this machine\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/maxogden/linux#example\"><span class=\"octicon octicon-link\"></span></a>example</h3>\n\n<pre><code># initialize a linux folder to hold state\n$ linux init\nCreated new config folder at /Users/max/test/linux\n\n# starts a linux daemon\n$ sudo linux boot\nLinux has booted { ip: \'192.168.64.127\',\n  hostname: \'simon-mittens-snuggles-toby\',\n  pid: 20665 }\n\n# ssh login\n$ linux ssh\nWarning: Permanently added \'192.168.64.127\' (ECDSA) to the list of known hosts.\n __    __    __\n/  \\__/  \\__/  \\__   Welcome to HyperOS Linux! (Based on TinyCore Linux)\n\\__/  \\__/  \\__/  \\        hyperos.io              tinycorelinux.net\n   \\__/  \\__/  \\__/\ntc@simon-mittens-snuggles-toby:~$ pwd\n/home/tc\ntc@simon-mittens-snuggles-toby:~$ exit\nConnection to 192.168.64.127 closed.\n\n# run a single command over ssh\n$ linux run uname -a\nLinux simon-mittens-snuggles-toby 3.16.6-tinycore64 #777 SMP Thu Oct 16 10:21:00 UTC 2014 x86_64 GNU/Linux\n\n$ linux status\nLinux is running { pid: 20665 }\n\n# gracefully shutdown\n$ linux halt\n\n$ linux status\nLinux is not running\n</code></pre>\n\n\n\n',1),(173,'Watchman | A file watching service','https://facebook.github.io/watchman/',1,0,'\n          <p>Watchman exists to watch files and record when they change.  It can\nalso trigger actions (such as rebuilding assets) when matching files change.</p>\n\n<h3>Concepts</h3>\n\n<ul><li>Watchman can recursively watch one or more directory trees\n(we call them <em>roots</em>).</li>\n<li>Watchman does not follow symlinks.  It knows they exist, but they show up\nthe same as any other file in its reporting.</li>\n<li>Watchman waits for a <em>root</em> to settle down before it will start\nto trigger notifications or command execution.</li>\n<li>Watchman is conservative, preferring to err on the side of caution;\nit considers files to be freshly changed when you start to\nwatch them or when it is unsure.</li>\n<li>You can query a root for file changes since you last checked, or the\ncurrent state of the tree</li>\n<li>You can subscribe to file changes that occur in a root</li>\n</ul><h3>Quickstart</h3>\n\n<p>These two lines establish a watch on a source directory and then set up a\ntrigger named <code>buildme</code> that will run a tool named <code>minify-css</code> whenever a CSS\nfile is changed.  The tool will be passed a list of the changed filenames.</p>\n<div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nv\">$ </span>watchman watch ~/src\n<span class=\"c\"># the single quotes around \'*.css\' are important!</span>\n<span class=\"nv\">$ </span>watchman -- trigger ~/src buildme <span class=\"s1\">\'*.css\'</span> -- minify-css\n</code></pre></div>\n<p>The output for buildme will land in the Watchman log file unless you send it\nsomewhere else.</p>\n\n        ',1),(174,'twitter-fabric/galley','https://github.com/twitter-fabric/galley',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://github.com/twitter-fabric/galley/blob/master/docs/images/galley-red.png\"><img src=\"https://github.com/twitter-fabric/galley/raw/master/docs/images/galley-red.png\" alt=\"Galley\" /></a></p>\n\n<p><a href=\"https://github.com/twitter-fabric/galley\"><img src=\"https://camo.githubusercontent.com/457f0b14286e5d5ff0445dd53a8b724580b20f34/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f727573742d6c616e672f727573742e737667\" alt=\"Travis\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#overview\"><span class=\"octicon octicon-link\"></span></a>Overview</h2>\n\n<p>Galley is a command-line tool for orchestrating <a href=\"https://www.docker.com/\">Docker</a> containers in development\nand test environments. Galley automatically starts a container’s dependencies and connects them using Docker’s\n<code>Links</code> and <code>VolumesFrom</code> mappings. Use Galley to start up a web server that connects to a database. Then, use it to\nstart up a web server, its database, an intermediate data service (and its database), some queues, worker processes, and\nthe monitoring server they all connect to.</p>\n\n<p><strong>Latest version:</strong> 1.0.0 release!</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#what-makes-galley-different\"><span class=\"octicon octicon-link\"></span></a>What makes Galley different?</h3>\n\n<p>Galley was built to support <a href=\"http://fabric.io\">Fabric</a>’s internal development process: multiple teams\nsharing a dozen or more services across a\nvariety of source code repositories. What is under active development by one team might just be a dependency to\nanother, so Galley gives engineers the flexibility to start the service or services they’re working with using\nlocal source code, while getting pre-built images for any dependencies.</p>\n\n<p>Galley keeps service dependencies in a central “Galleyfile” configuration so that you can always start up any\nservice in your system, along with any necessary transitive dependencies.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#features\"><span class=\"octicon octicon-link\"></span></a>Features</h3>\n\n<ul><li>Run Docker containers, linking them to their dependencies</li>\n<li>Dynamic mapping of local source code into containers</li>\n<li>Custom environments to easily run isolated development and test containers side-by-side</li>\n<li>“Addons” to define optional configuration for services</li>\n<li>Automatic re-use of running containers to support developing multiple services simultaneously</li>\n<li>Protected “stateful” containers (<em>e.g.</em> databases)</li>\n<li>JavaScript-based configuration for higher-order service definitions</li>\n</ul><p>Galley also has special support for running under a VM, such as when using <a href=\"https://docs.docker.com/machine/\">docker-machine</a> on Mac OS X:</p>\n\n<ul><li>Built-in <code>rsync</code> support for massively-improved disk performance with VirtualBox for local source code.</li>\n<li>Port forwarding to let other machines or mobile devices connect to containers in the VM</li>\n</ul><p>And, for continuous integration machines:</p>\n\n<ul><li>A <code>--repairSourceOwnership</code> flag keeps containers running as root from generating files that only root can delete</li>\n<li>Cleanup command to free up disk space from unused images</li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#bug-reports-and-discussion\"><span class=\"octicon octicon-link\"></span></a>Bug Reports and Discussion</h3>\n\n<p>If you find something wrong with Galley, please let us know on the\n<a href=\"https://github.com/twitter-fabric/galley/issues\">issues</a> page.</p>\n\n<p>You can also chat with us or ask for help on the\n<a href=\"https://groups.google.com/forum/#!forum/galley-discuss\">galley-discuss@googlegroups.com</a> mailing list.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#galley-concepts\"><span class=\"octicon octicon-link\"></span></a>Galley concepts</h2>\n\n<p>To use Galley you define a set of <strong>services</strong> in a central <strong>Galleyfile</strong>. These definitions specify\nDocker options for each service (image, links, volumes, <em>etc.</em>).</p>\n\n<p>When you use <code>galley run &lt;service&gt;.&lt;env&gt;</code>, you provide a <strong>primary service</strong> that you want to interact with, and the\n<strong>environment</strong> to run it in. Environments are used in service definitions to vary the configuration, for example to\nspecify different dependencies between “dev” and “test” modes.</p>\n\n<p>Environments can also have a namespace, such as <code>.dev.1</code> or <code>test.cucumber</code>. If a service does not have a\nconfiguration for a namespaced environment, the one for the base environment is used instead.</p>\n\n<p>Not all services must have environment-specific configurations. For a service with no environment configuration, the\nservices\' base environment configuration is used.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#quick-start\"><span class=\"octicon octicon-link\"></span></a>Quick start</h2>\n\n<div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\">npm install -g galley-cli</span>\n$ <span class=\"pl-s1\">git clone https://github.com/twitter-fabric/galley-template.git</span>\n$ <span class=\"pl-s1\"><span class=\"pl-c1\">cd</span> galley-template</span>\n$ <span class=\"pl-s1\">galley run demo.dev</span></pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#setting-up-galley\"><span class=\"octicon octicon-link\"></span></a>Setting up Galley</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h3>\n\n<p>Galley is distributed as a command-line tool, <code>galley</code>, and a library. Install the command-line\ntool globally from the <a href=\"https://www.npmjs.com/package/galley-cli\">galley-cli NPM package</a>:</p>\n\n<div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\">npm install -g galley-cli</span></pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#create-a-galleyfile-package\"><span class=\"octicon octicon-link\"></span></a>Create a Galleyfile package</h3>\n\n<p>Galley keeps your system’s configuration in a central Galleyfile. This file must be in a directory with\nan NPM package.json file that depends on the <a href=\"https://www.npmjs.com/package/galley\">galley NPM package</a>.\nYou will typically symlink the Galleyfile into the local directory where you keep your repositories.</p>\n\n<p>When you run the <code>galley</code> tool, it recursively walks up your directories until it finds a Galleyfile\nor a symlink to one. It then uses the galley library depended on by that package to execute your\ncommands.</p>\n\n<p>The easiest way to get started with a Galleyfile is to clone our template:</p>\n\n<div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\">git clone https://github.com/twitter-fabric/galley-template.git</span></pre></div>\n\n<p>You can also create an NPM package from scratch:</p>\n\n<div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\">npm init</span>\n$ <span class=\"pl-s1\">npm install --save galley</span>\n$ <span class=\"pl-s1\">npm shrinkwrap</span></pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#writing-a-galleyfile\"><span class=\"octicon octicon-link\"></span></a>Writing a Galleyfile</h3>\n\n<p>A Galleyfile is a JavaScript module that exports a configuration hash that defines your services and\ntheir dependencies.</p>\n\n<p>Services are expected to share a common Galleyfile that defines the dependencies among\nthem. You should put your Galleyfile in a common place, and then symlink to it from a\nparent directory for your services. The <code>galley</code> CLI tool will search for a Galleyfile recursively\nfrom the directory it’s run in.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#example\"><span class=\"octicon octicon-link\"></span></a>Example</h4>\n\n<p>The file below defines a Rails “www” service that depends on a MySQL DB in test and both a MySQL DB and a beanstalk\nqueue in development. Additionally, it expects to have a “config-files” volume mounted in. The container’s source\ncode is kept in <code>/code/www</code>, so you can use <code>galley run -s .</code> to map a local directory over it.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Example Galleyfile.js for a small Rails app.</span>\n<span class=\"pl-c1\">module</span>.exports <span class=\"pl-k\">=</span> {\n  CONFIG<span class=\"pl-k\">:</span> {\n    registry<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>docker.example.biz<span class=\"pl-pds\">\'</span></span>\n  },\n\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>config-files<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {},\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>beanstalk<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {},\n\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>www-mysql<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n    image<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>mysql<span class=\"pl-pds\">\'</span></span>,\n    stateful<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>\n  },\n\n  <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>www<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n    env<span class=\"pl-k\">:</span> {\n      RAILS_ENV<span class=\"pl-k\">:</span> {\n       <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dev<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>development<span class=\"pl-pds\">\'</span></span>,\n       <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test<span class=\"pl-pds\">\'</span></span>\n      }\n    },\n    links<span class=\"pl-k\">:</span> {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dev<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>www-mysql:mysql<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>beanstalk<span class=\"pl-pds\">\'</span></span>],\n      <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>www-mysql<span class=\"pl-pds\">\'</span></span>]\n    },\n    ports<span class=\"pl-k\">:</span> {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dev<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>3000:3000<span class=\"pl-pds\">\'</span></span>]\n    },\n    source<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>/code/www<span class=\"pl-pds\">\'</span></span>,\n    volumesFrom<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>config-files<span class=\"pl-pds\">\'</span></span>]\n  }\n};</pre></div>\n\n<p>Then, from a common parent directory of your services\' source directories:</p>\n\n<div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\">ln -s ../../path/to/Galleyfile.js <span class=\"pl-c1\">.</span></span></pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#running-galley\"><span class=\"octicon octicon-link\"></span></a>Running Galley</h3>\n\n<p>Once you’ve written a Galleyfile and symlinked it, try it out:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ galley list</pre></div>\n\n<pre><code>Galleyfile: /path/to/found/Galleyfile.js\n  beanstalk\n  config-files\n  www [.dev, .test]\n  www-mysql\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#command-reference\"><span class=\"octicon octicon-link\"></span></a>Command reference</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#run\"><span class=\"octicon octicon-link\"></span></a><code>run</code></h3>\n\n<p><strong>Examples:</strong></p>\n\n<pre><code># Starts the www service with its dev dependencies. Runs the image’s default CMD.\ngalley run www.dev\n\n# Maps the current directory in as the “source” directory, uses test dependencies, and runs “rake spec”.\ngalley run -s . www.test rake spec\n</code></pre>\n\n<p>Starts up the given service, using the environment both to name containers and to affect the service configuration.\nDependencies, either <code>links</code> or <code>volumesFrom</code>, will be started up first and recursively. Containers will be named\n<code>&lt;service&gt;.&lt;env&gt;</code>. STDOUT, STDERR, and STDIN are piped from the terminal to the container.</p>\n\n<p>When Galley exits it will remove the primary service container by default, but leave any dependencies running.</p>\n\n<p>Galley will <em>always</em> recreate the container for the named (“primary”) service. For dependencies, Galley will look\nfor existing containers that match the <code>&lt;service&gt;.&lt;env&gt;</code> naming pattern, starting them if necessary. It will\ndelete and recreate them if:</p>\n\n<ul><li>their source image doesn’t match the current image for their image name (<em>e.g.</em> if an image was built or pulled\nsince first starting the container)</li>\n<li>their current <code>Links</code> don’t include everything in the current configuration (typically because a container they\ndepend upon has been recreated, but sometimes because an addon changes the configuration)</li>\n</ul><p>If a service is configured to be “stateful” in the Galleyfile, Galley will not recreate it.\nThis is useful for development database services that would get wiped if that happened, losing hard-won state. The\n<code>--recreate</code> and  <code>--unprotectStateful</code> command line options affect these behaviors; see <code>galley run --help</code> for\nmore info.</p>\n\n<p>Similar to <code>docker run</code>, you can provide a command and arguments after the service name to run those instead\nof the image’s default CMD. In this case, Galley will let Docker name the container randomly, to avoid naming\nconflicts with any other instances of that service that are running.</p>\n\n<p>You can use the <code>-a</code> option to enable any “addons” configured for your services (primary or otherwise). Addons can\nbring in additional dependencies or modify environment variables.</p>\n\n<p>If you’ve configured a “source” directory for the primary service, then you can use the <code>-s</code> option to map a local\ndirectory to it. (This is more convenient than <code>-v</code> for the common case of regularly mapping to the same\ndestination.)</p>\n\n<p>Run also takes a number of parameters that are the equivalent to <code>docker run</code> parameters. See <code>galley run --help</code>\nfor a complete list.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#list\"><span class=\"octicon octicon-link\"></span></a><code>list</code></h3>\n\n<p><strong>Examples:</strong></p>\n\n<pre><code>galley list\n</code></pre>\n\n<p>Prints the name of each service in the Galleyfile, along with the environments it’s configured for and which\naddons affect it.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#stop-env\"><span class=\"octicon octicon-link\"></span></a><code>stop-env</code></h3>\n\n<p><strong>Examples:</strong></p>\n\n<pre><code># Stops all dev containers\ngalley stop-env dev\n</code></pre>\n\n<p>Stops all containers whose names end in <code>.&lt;env&gt;</code>. Useful for freeing up memory in your VM or as a prelude to a\n<code>galley cleanup</code> to wipe your slate.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#pull\"><span class=\"octicon octicon-link\"></span></a><code>pull</code></h3>\n\n<p><strong>Examples:</strong></p>\n\n<pre><code># Fetches the www image and its “test” environment transitive dependencies\ngalley pull www.test\n\n# Fetches “dev” images, including dependencies added by the “beta” addon\ngalley pull -a beta www.dev\n</code></pre>\n\n<p>Pulls the latest image for the given primary service and any transitive dependencies that come from its\nenvironment. Can take <code>-a</code> to include addons in the dependency tree.</p>\n\n<p><code>galley pull</code> just updates the local Docker images, it doesn’t cause any changes to running containers. A follow-up\n<code>galley run</code> will recreate any non-“stateful” containers for dependencies whose images have changed.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#cleanup\"><span class=\"octicon octicon-link\"></span></a><code>cleanup</code></h3>\n\n<p><strong>Examples:</strong></p>\n\n<pre><code>galley cleanup\n</code></pre>\n\n<p>Removes any stopped containers that match Galley’s naming conventions, provided they are not for “stateful”\nservices. Removes their volumes as well. See <code>galley cleanup --help</code> for options that affect what’s removed.</p>\n\n<p>Deletes any dangling Docker images on the machine, to free up disk space.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#galleyfile-reference\"><span class=\"octicon octicon-link\"></span></a>Galleyfile reference</h2>\n\n<p>A Galleyfile is a JavaScript or CoffeeScript module that exports a configuration hash. The keys for the hash are\nthe names of services in your system. Each service must have an entry, even if its value is just an empty hash.</p>\n\n<p>Additionally, the special <code>CONFIG</code> key labels a hash of global configuration values.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#global-config\"><span class=\"octicon octicon-link\"></span></a>Global config</h3>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">module</span>.exports <span class=\"pl-k\">=</span> {\n  CONFIG<span class=\"pl-k\">:</span> {\n    registry<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>docker.example.biz<span class=\"pl-pds\">\'</span></span>,\n    rsync<span class=\"pl-k\">:</span> {\n      image<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>docker.example.biz/rsync<span class=\"pl-pds\">\'</span></span>,\n      module<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>root<span class=\"pl-pds\">\'</span></span>\n    }\n  }\n  …\n};</pre></div>\n\n<p><strong>registry:</strong> The Docker registry to use when services have default image names.</p>\n\n<p><strong>rsync:</strong> Custom Docker image name and Rsync module name to use to make a container that runs an Rsync daemon. See\n<a href=\"https://github.com/twitter-fabric/galley#rsync-support\">rsync support</a> for more information.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#service-config\"><span class=\"octicon octicon-link\"></span></a>Service config</h3>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>www<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n  env<span class=\"pl-k\">:</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>HOST<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>localhost<span class=\"pl-pds\">\'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>PROXY_FAYE<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>1<span class=\"pl-pds\">\'</span></span>\n    }\n  },\n  ports<span class=\"pl-k\">:</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dev<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>3000:3000<span class=\"pl-pds\">\'</span></span>]\n  },\n  links<span class=\"pl-k\">:</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dev<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>mongo<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>beanstalk<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>data-service<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>redis<span class=\"pl-pds\">\'</span></span>],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>mongo<span class=\"pl-pds\">\'</span></span>],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test.cucumber<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>mongo<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>beanstalk<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>data-service<span class=\"pl-pds\">\'</span></span>],\n  },\n  source<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>/code/www<span class=\"pl-pds\">\'</span></span>,\n  volumesFrom<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>config-files<span class=\"pl-pds\">\'</span></span>]\n}</pre></div>\n\n<p><strong>addons</strong>: Hash of name to a hash of additional configuration values. Additional configuration can include\n<code>links</code>, <code>ports</code>, <code>volumesFrom</code>, and <code>env</code>. When the addon is enabled via the <code>-a</code> flag to <code>run</code> or <code>pull</code>, array\nvalues (<code>links</code>, <code>ports</code>, <code>volumesFrom</code>) are concatenated with the service’s base configuration (and any other addons). <code>env</code> values are merged, with addons taking precidence over the base values.</p>\n\n<p><strong>binds</strong>: Array of “Bind” strings to map host directories into the container. String format matches Docker:\n<code>\"host_path:container_path\"</code></p>\n\n<p><strong>command</strong>: Command to override the default from the image. Can either be a string, which Docker will run with\n<code>/bin/sh -c</code>, or an array of strings, which should be an executable and its arguments.</p>\n\n<p><strong>entrypoint</strong>: Override the default entrypoint from the image. String path for an executable in the container.</p>\n\n<p><strong>env</strong>: Hash of environment variable names and their values to set in the container. If the values are themselves\nhashes, they are assumed to be from Galley “env” to value.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>my-app<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n  env<span class=\"pl-k\">:</span> {\n    <span class=\"pl-c\">// $HOST will always be \"localhost\" in the container</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>HOST<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>localhost<span class=\"pl-pds\">\'</span></span>,\n\n    <span class=\"pl-c\">// \"galley run my-app.dev\" will set $RAILS_ENV to \"development\"</span>\n    <span class=\"pl-c\">// \"galley run my-app.test\" will set $RAILS_ENV to \"test\"</span>\n    <span class=\"pl-c\">// \"galley run my-app.test.cucumber\" will also set $RAILS_ENV to \"test\"</span>\n    <span class=\"pl-c\">// \"galley run my-app.other\" will not have $RAILS_ENV defined</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>RAILS_ENV<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dev<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>development<span class=\"pl-pds\">\'</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test<span class=\"pl-pds\">\'</span></span>\n    }\n  }\n}</pre></div>\n\n<p><strong>image</strong>: Image name to generate the container from. Defaults to the service’s name from the default registry.</p>\n\n<p><strong>links</strong>: Array of links to make to other containers. Elements are either <code>\"service_name\"</code> or\n<code>\"service_name:alias\"</code> (where “alias” is the hostname this container will see the service as). Alternately, the value\ncan be a hash of environment name to array of links.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\'</span>data-service<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n  links<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>data-service-mysql:mysql<span class=\"pl-pds\">\'</span></span>]\n},\n\n<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>my-app<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n  links<span class=\"pl-k\">:</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dev<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>my-app-mysql:mysql<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>data-service<span class=\"pl-pds\">\'</span></span>],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>my-app-mysql:mysql<span class=\"pl-pds\">\'</span></span>]\n  }\n},\n\n<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>data-service-mysql<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n  image<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>docker.example.biz/mysql<span class=\"pl-pds\">\'</span></span>\n},\n\n<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>my-app-mysql<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n  image<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>docker.example.biz/mysql<span class=\"pl-pds\">\'</span></span>\n},</pre></div>\n\n<p><strong>ports</strong>: Array of ports to publish when the service is run as the primary service. Array values are either\n<code>\"host_port:container_port\"</code> or <code>\"container_port\"</code>. If a host port is ommitted, Docker will assign a random host\nport to proxy in. Alternately, can be a hash of environment name to array of port values.</p>\n\n<p><strong>restart</strong>: Boolean. If <code>true</code>, applies a Docker <code>RestartPolicy</code> of “always” to the container. Default is <code>false</code>.</p>\n\n<p><strong>source</strong>: String path to a source code directory inside the container. If <code>-s</code> is provided to <code>galley run</code>, Galley\nwill bind that directory to the source directory in the container.</p>\n\n<p><strong>stateful</strong>: Boolean. If <code>true</code>, Galley will not remove the container in <code>galley run</code> or <code>galley cleanup</code>, even if it\nis stale or missing links. Can be overridden for a command by the <code>--unprotectStateful</code> flag. Default is <code>false</code>.</p>\n\n<p><strong>user</strong>: User to run the container as.</p>\n\n<p><strong>volumesFrom</strong>: Array of services whose containers should be volume-mounted into this service’s container.\nAlternately, can be a hash of environment name to array of service names.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#addons\"><span class=\"octicon octicon-link\"></span></a>Addons</h3>\n\n<div class=\"highlight highlight-source-js\"><pre># <span class=\"pl-c1\">EXAMPLE</span>\n<span class=\"pl-c1\">module</span>.exports <span class=\"pl-k\">=</span> {\n  …\n  ADDONS<span class=\"pl-k\">:</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>beta<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>www<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n        env<span class=\"pl-k\">:</span> {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>USE_BETA_SERVICE<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>1<span class=\"pl-pds\">\'</span></span>\n        },\n        links<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>beta<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>uploader<span class=\"pl-pds\">\'</span></span>]\n      },\n      <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>uploader<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> {\n        env<span class=\"pl-k\">:</span> {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>USE_BETA_SERVICE<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>1<span class=\"pl-pds\">\'</span></span>\n        }\n      }\n    }\n  }\n  …\n};</pre></div>\n\n<p>Addons are extra configurations that can be applied from the command line. An addon can include\nadditional <code>links</code>, <code>ports</code>, <code>volumesFrom</code>, and <code>env</code> values that are merged with a service’s\nbase configuration. Addons are defined globally because they can affect multiple services.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#galleycfg-reference\"><span class=\"octicon octicon-link\"></span></a>.galleycfg reference</h3>\n\n<p>Galley can write a .galleycfg JSON configuration file into <code>~</code> when you run <code>galley config</code>.\nCurrently, the only state read from the config file is the default value of the <code>--rsync</code> flag.</p>\n\n<p>You can write to the .galleycfg file with:</p>\n\n<p><code>galley config set key value</code></p>\n\n<p>An example .galleycfg:</p>\n\n<pre><code>{\n  \"rsync\": true\n}\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#best-practices\"><span class=\"octicon octicon-link\"></span></a>Best practices</h3>\n\n<ul><li>Mark any databases as “stateful” to keep them from being automatically recreated. This keeps your local\ndevelopment data from disappearing on you.</li>\n<li>Use addons for optional dependencies that developers don’t need all the time.</li>\n<li>Only publish ports from your “dev” environment so that they won’t conflict when you run “dev” and “test”\nsimultaneously.</li>\n<li>Use constants and loops in your Galleyfile if they’ll make your configuration clearer and easier to maintain.</li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#rsync-support\"><span class=\"octicon octicon-link\"></span></a>rsync support</h3>\n\n<p>Galley includes built-in support for using rsync to copy local source changes into a container. This provides\na significant speed boost over VirtualBox’s shared folders when working on Mac OS X with <code>docker-machine</code>.</p>\n\n<p>To use it, just add <code>--rsync</code> to your <code>galley run</code> commands when you use <code>--source</code>.</p>\n\n<p>You can turn on <code>--rsync</code> by default with:</p>\n\n<div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\">galley config <span class=\"pl-c1\">set</span> rsync <span class=\"pl-c1\">true</span></span></pre></div>\n\n<p>rsync support requires that an rsync server container be run and volume-mapped in to your service’s\ncontainer. By default, Galley downloads and uses <a href=\"https://hub.docker.com/r/galley/rsync/\">galley/rsync</a>,\nbut you can specify your own container in the <code>CONFIG</code> section of your Galleyfile.</p>\n\n<p><strong>Caveat:</strong> Galley’s rsyncing goes one way, from outside the container to inside it. Files changed or created\ninside the container are not copied back out to the local disk. In the cases where you need to have a\nbi-directional mapping, use <code>--rsync false</code> to temporarily disable rsync.</p>\n\n<p>Also note that <code>--rsync</code> only affects the <code>--source</code> mapping, not any <code>--volume</code> mappings that you specify.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#docker-defaults\"><span class=\"octicon octicon-link\"></span></a>Docker defaults</h3>\n\n<p>Galley uses a handful of defaults when working with Docker containers that we’ve found are appropriate for\ndevelopment and testing. You should be aware of these, especially if you have a lot of other Docker experience.\nIf these aren’t working out for you, let us know; we always want to learn about new use cases!</p>\n\n<p>(In these cases, the “primary service” is the one specified on the command line.)</p>\n\n<ul><li>If Galley is being run in a TTY, the primary service’s container is, too (<code>docker run -t</code>)</li>\n<li>The primary service container is always run with STDIN allocated (<code>docker run -i</code>)</li>\n<li>The primary service container is always removed when Galley stops (<code>docker run --rm</code>)</li>\n<li>Volumes are always removed when removing a container (<code>docker rm -v</code>)</li>\n<li>Containers are started with an <code>/etc/hosts</code> entry that points their service name to 127.0.0.1</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/twitter-fabric/galley#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>We welcome GitHub issues and pull requests. Please match the existing CoffeeScript style, conventions, and test\ncoverage.</p>\n\n<p>First run <code>npm install</code> to fetch dependencies.</p>\n\n<p>Galley uses <code>gulp</code> for building:</p>\n\n<pre><code>$ gulp watch        # watches the Galley directory for changes to compile\n$ gulp compile      # compile galley before running tests (if you’re not running gulp watch)\n$ gulp test         # runs mocha specs\n$ gulp acceptance   # builds the acceptance images and runs some acceptance tests\n</code></pre>\n',1),(175,'10 Things To Do After Installing Ubuntu 15.10 - OMG! Ubuntu!','http://www.omgubuntu.co.uk/2015/10/10-things-to-do-after-installing-ubuntu-15-10',1,0,'\n														<div class=\"wp-caption alignright\"><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/10/upgrade.jpg\"><img class=\"wp-image-99454\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/10/upgrade.jpg\" alt=\"upgrade ubuntu\" width=\"400\" height=\"225\" /></a><p class=\"wp-caption-text\">After you’ve transformed to a werewolf, do these things</p></div>\n<p><strong>Your Ubuntu 15.10 Wily Werewolf download has finished, and installation has begun. Now you’re wondering what to do next.</strong></p>\n<p>Well, no worries, we’re here to help.</p>\n<p>Below you’ll find our list of the<strong> top 10 things to do after installing Ubuntu</strong>.</p>\n<p>You’ll find plenty of useful tips and suggestion in this post if you’re new to Ubuntu. It’s not comprehensive though so do also check out the comments at the bottom to read other users’ advice about their post-install must-dos!</p>\n<p>Waffle served up, now for the cream.</p>\n<h3>1. Learn What’s New</h3>\n<p><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/10/ubuntu-1510-wily-werewolf.jpg\"><img class=\"aligncenter size-large wp-image-99509\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/10/ubuntu-1510-wily-werewolf-750x255.jpg\" alt=\"ubuntu-1510-wily-werewolf\" width=\"750\" height=\"255\" /></a></p>\n<p>Ubuntu 15.10 Wily Werewolf may lack the bite of its namesake but there is still some nifty new changes shipping inside it.</p>\n<p>For example, you can now create application shortcuts on the desktop by dragging apps out from the Dash. Not a ground changing feature but certainly one worth knowing about, right?</p>\n<p>It doesn’t matter if you’re a seasoned Ubuntu pro or fresh faced newbie it always helps to know what’s new and notable about the latest release.</p>\n<p>Check out our <a href=\"http://www.omgubuntu.co.uk/2015/10/ubuntu-15-10-download-review-new-features\">rundown of Ubuntu 15.10 for the full skinny on what’s new.</a></p>\n<p><a class=\"omg-button informational-link\" href=\"http://www.omgubuntu.co.uk/2015/10/ubuntu-15-10-download-review-new-features\" title=\"See What\'s New In Ubuntu 15.10\">See What’s New In Ubuntu 15.10</a></p>\n\n<h3>2. Check for Updates</h3>\n<p><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2013/04/software-updater.jpg\"><img class=\"aligncenter wp-image-76763\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2013/04/software-updater.jpg\" alt=\"software-updater\" width=\"750\" height=\"439\" /></a></p>\n<p>It might sound strange to tell you to check for updates just after you’ve installed — but you should.</p>\n<p>Why?</p>\n<p>Well, for one: you might not be reading this list on release day. In the time between Ubuntu spinning up it’s installation media and you installing it chances are a bunch of security, stability and bug fixes have accrued.</p>\n<p>After All, bugs don’t adhere to the same deadlines as developers do!</p>\n<p>Open the Software Updater tool from the Dash and click the button to <strong>check for updates. </strong></p>\n<h3>3. Install Linux Graphics Drivers</h3>\n<div class=\"wp-caption alignright\"><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2013/04/drivers.jpg\"><img src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2013/04/drivers.jpg\" alt=\"drivers\" width=\"350\" height=\"205\" /></a><p class=\"wp-caption-text\">Install GPU drivers</p></div>\n<p>You want the best performance from your device you’re going to want to install graphics drivers. These will make the Unity desktop run smoothly (it’s a composited environment) and let you get the best frame-rates from games, media content and apps.</p>\n<p>Ubuntu supports most graphics hardware out of the box using free, open-source drivers. These are getting better all the time.</p>\n<p>If you plan to <strong>play the latest Steam games on Ubuntu</strong>, watch high-definition video, or play around with GPU intensive apps like Blender and Lightworks, you will need to install the latest proprietary Linux graphics drivers available for your hardware.</p>\n<ol><li><strong>Open up the ‘Software &amp; Updates’ tool from the Unity Dash</strong></li>\n<li><strong>Click the ‘Additional Drivers’ tab</strong></li>\n<li><strong>Follow any on-screen prompts to check for, install and apply any changes </strong></li>\n</ol><p>Gamers can also use a<a href=\"http://www.omgubuntu.co.uk/2015/08/ubuntu-nvidia-graphics-drivers-ppa-is-ready-for-action\"> brand new PPA</a> that makes it easier to get the latest Nvidia Linux graphics drivers as they’re released.</p>\n<h3>4. Install Media Codecs in Ubuntu 15.10</h3>\n<div class=\"wp-caption alignright\"><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2013/10/mus.jpg\"><img class=\"wp-image-84590\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2013/10/mus.jpg\" alt=\"music player\" width=\"350\" height=\"216\" /></a><p class=\"wp-caption-text\">Want to listen to music?</p></div>\n<p>A spaghetti tangle of legal issues means Ubuntu cannot play MP3s and other popular media content ‘out of the box’. It’s an inconvenience, but one that is easily solvable.</p>\n<p>During installation you can check a ‘Enable Restricted Formats’ box to have all the required multimedia codecs pulled in and installed alongside the system.</p>\n<p>If you forgot to do that, or are upgrading from an earlier release, you can install multimedia codecs yourself straight through the Ubuntu Software Centre.</p>\n<p><a href=\"https://apps.ubuntu.com/cat/applications/ubuntu-restricted-extras/\" class=\"omg-button web-store-link\" title=\"Multimedia codecs for Ubuntu\"> Install Third-Party Codecs </a></p>\n<h3>5. Use A Better Theme</h3>\n<div class=\"wp-caption aligncenter\"><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/08/arc-theme.jpg\"><img class=\"wp-image-98681 size-large\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/08/arc-theme-750x311.jpg\" alt=\"ARC Gtk Theme\" width=\"750\" height=\"311\" /></a><p class=\"wp-caption-text\">Yes, this really is Ubuntu</p></div>\n<p>Ubuntu’s default theme is nice enough, but it is hasn’t changed much in several years. If you’re coming from a modern operating system or newish Linux distribution, Ubuntu can look a little humdrum.</p>\n<p>If you want a stylish looking Ubuntu desktop that people will swoon over, try an alternative theme. <a href=\"http://www.omgubuntu.co.uk/2015/08/an-official-arc-theme-for-firefox-is-now-available\">Our favourite right now is called Arc</a> but there are tonnes more available.</p>\n<p>The ‘<strong>Appearance</strong>‘ section of the Ubuntu System Settings app also lets you tailor other parts of the Ubuntu desktop to your tastes:</p>\n<ul><li><strong>Change the desktop wallpaper</strong></li>\n<li><strong>Change the desktop theme</strong></li>\n<li><strong>Adjust the size of the Unity launcher</strong></li>\n</ul><p>A glut of additional layout and customization options — from changing the desktop font to choosing which side window controls appear — can be toggled, tweaked and toyed with using the free <strong>Unity Tweak Tool </strong>available to install from Ubuntu Software Center.</p>\n<p><a class=\"omg-button usc-link\" title=\"Click here to grab Unity Tweak Tool\">Install Unity Tweak Tool from the Ubuntu Software Center</a></p>\n<h3>5. Adjust Menus To Suit You</h3>\n<div class=\"wp-caption alignright\"><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2014/02/Screen-Shot-2014-02-27-at-19.51.23-350x2001.png\"><img class=\"wp-image-88645 size-full\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2014/02/Screen-Shot-2014-02-27-at-19.51.23-350x2001.png\" alt=\"LIM in 14.04\" width=\"350\" height=\"200\" /></a><p class=\"wp-caption-text\">Do You Prefer App Menus To Be In-App?</p></div>\n<p>Application menus appear in Ubuntu’s top panel by default and auto-hide after a set number of seconds.</p>\n<p>A great way to save space, but also a great way to confuse. When you’re using several apps it’s often hard to know which app the ‘Files’, ‘Edit’, etc strip at the top of the screen belongs to — or where they’ve suddenly vanished to!</p>\n<p>Ubuntu provides options inside the <em>System Settings &gt;Appearance</em> pane that allow you to <strong>choose where app menus appear</strong>.</p>\n<p>If you’d rather see menus inside the window of the app they below to:</p>\n<ol><li><strong>Go to ‘System Settings &gt; Appearance’</strong></li>\n<li><strong>Select the ‘Behavior’ tab</strong></li>\n<li><strong>Find the section headed: ‘Show the Menus for a Window’</strong></li>\n<li><strong>Check (click) the circle next to ‘In the window’s title bar’</strong></li>\n</ol><p>Ubuntu also lets you set app menus to ‘Always Show’ (that is, not hide after a few seconds) but it’s not obvious how to access it.</p>\n<p>We could walk you through the recommended way, installing dconf-editor, finding the schema, manually editing, it, etc, but honestly it’s just far quicker (and somewhat safer) to paste the following command into the Terminal to set menus to always show:</p>\n<pre>gsettings set com.canonical.Unity always-show-menus true</pre>\n<p><i>To undo the change (i.e. set app menus to hide until you mouse over them) run: </i></p>\n<pre>gsettings set com.canonical.Unity always-show-menus false</pre>\n<p>Done.</p>\n<h3>6. Install Skype &amp; Other Must-Have Apps</h3>\n<p><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2013/04/apps.jpg\"><img class=\"aligncenter size-full wp-image-77212\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2013/04/apps.jpg\" alt=\"apps\" width=\"750\" height=\"355\" /></a></p>\n<p>Ubuntu offers a small but capable crop of apps by default, ranging from big names like LibreOffice and Firefox to lesser known tools like Totem and Shotwell.</p>\n<p>Great though they may be they <em>might</em> <em>not</em> be your favourites.</p>\n<p><span>The Ubuntu Software Centre offers up <strong>thousands of free applications </strong>to install, including: </span></p>\n<ul><li><strong>Steam</strong> – Game distribution platform</li>\n<li><strong>GIMP</strong> – Advanced image editor</li>\n<li><strong>VLC</strong> – Popular media player</li>\n<li><strong>Geary</strong> – Desktop email client</li>\n<li><strong>Chromium</strong> – open-source web-browser</li>\n<li><strong>Skype</strong> – VOIP service</li>\n</ul><p>You’ll also find a wealth of awesome software available <em>outside</em> the Ubuntu Software Centre. Some notable apps include:</p>\n<ul><li><strong>Google Chrome</strong> – Web-browser with built-in, up-to-date Flash for Linux</li>\n<li><strong>Spotify for Linux Preview</strong> – Official Linux app for popular streaming music service</li>\n<li><strong>Corebird</strong> – Desktop Linux Twitter client</li>\n<li><strong>Lightwork (Free) –</strong> Professional nonlinear video editor</li>\n<li><strong>Viber</strong> – Skype alternative with free mobile apps</li>\n<li><strong>Vivaldi</strong> – Developer orientated web-browser</li>\n</ul><p><a class=\"omg-button website-link\" href=\"http://www.omgubuntu.co.uk/category/app\" title=\"Apps for Ubuntu\"> View App Posts on OMG! Ubuntu! </a></p>\n<h3>7. Set Up Your Cloud Accounts</h3>\n<div class=\"wp-caption alignright\"><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2014/07/dropbox-qt-login.jpg\"><img class=\"wp-image-92853 size-thumbnail\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2014/07/dropbox-qt-login-350x200.jpg\" alt=\"Login Screen\" width=\"350\" height=\"200\" /></a><p class=\"wp-caption-text\">Dropbox for Linux Works Great</p></div>\n<p>Backing up your files and documents is, like, super important. You know that.</p>\n<p>Whether you stash your stuff in Dropbox, OneDrive or Google Drive, you’ll want to get everything in sync, soon as.</p>\n<ul><li><strong><a href=\"https://www.dropbox.com/install\">Dropbox</a></strong> provides a native Linux client that is regularly updated</li>\n<li><strong>OneDrive</strong> is accessible through <a href=\"http://www.omgubuntu.co.uk/2014/06/one-drive-ubuntu-integration\">third-party scripts</a> (i.e., be careful)</li>\n<li>Services like <strong>InSync</strong> provide Google Drive Linux support</li>\n<li>You may prefer to host your own ‘cloud’ with <strong><a href=\"https://owncloud.org/\">OwnCloud</a></strong></li>\n</ul><p>Not all of these solutions integrate with Nautilus, the file manager used in Ubuntu.</p>\n<h3>8. Sort Out Flash</h3>\n<p>Flash sucks, but there may be a few sites you like to view that require it. Adobe officially stopped supporting Flash on Linux several years back, and many web-browsers are dropping support for it’s NPAPI architecture.</p>\n<p>The best all-round solution is to download Google Chrome. It comes with an<strong> up-to-date version of the Flash plugin</strong> built in.</p>\n<p>If you want to watch Amazon Instant Video, Hulu or any other sites that uses DRM through Hal, <a href=\"http://www.omgubuntu.co.uk/2015/09/how-to-watch-hulu-on-ubuntu-1404-up\">we’ve got a guide on that.</a></p>\n<h3>9. Mind Your Privacy</h3>\n<div class=\"wp-caption alignright\"><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/04/security-and-privacy-settings-ubuntu.jpg\"><img class=\"wp-image-97510 size-thumbnail\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/04/security-and-privacy-settings-ubuntu-350x200.jpg\" alt=\"security-and-privacy-settings-ubuntu\" width=\"350\" height=\"200\" /></a><p class=\"wp-caption-text\">Security &amp; Privacy</p></div>\n<p>The Unity Dash is great for finding files, apps and snippets of online data in a pinch. Just open the Dash, type your query — be it ‘Firefox’ or ‘Weather in Townsville’ — and Ubuntu will try to return results that match.</p>\n<p>But if you don’t want to see local weather results when searching for jpgs, or wikipedia links every time you look for an album, you can turn it off.</p>\n<p>Whatever your preference head to the <em><strong>Privacy &amp; Security</strong> </em>section of <em>System Settings </em>to:</p>\n<ul><li><strong>Disable all online features in the Unity Dash</strong></li>\n<li><strong>Choose which folders and files appear in the Dash</strong></li>\n<li><strong>Turn off automatic error reporting</strong></li>\n</ul><h3>10. Tell Others About Ubuntu</h3>\n<p><a href=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/10/wily.jpg\"><img class=\"wp-image-99512 size-medium alignright\" src=\"http://www.omgubuntu.co.uk/wp-content/uploads/2015/10/wily-300x266.jpg\" alt=\"wily\" width=\"300\" height=\"266\" /></a></p>\n<p>It sounds obvious but don’t get so sucked into using Ubuntu that you forget to tell others about how awesome it is.</p>\n<p>If you try Ubuntu and like it do spread the word. How? Maybe try one of the following:</p>\n<ul><li>Burn a LiveDVD/USB for someone you know to try</li>\n<li>Share what you like about it on social media or blogs</li>\n<li>Contribute to development by reporting a bug you encounter</li>\n<li>Wear an Ubuntu t-shirt or put stickers on your device</li>\n<li>Join an Ubuntu LoCo team or Linux User Group</li>\n</ul><h2>Over To You</h2>\n<p>Those are our action items post release, but what are yours? Share your tips and tweaks in the comments section below.</p>\n<p><em><strong>A polite notice: </strong>if you don’t like the Unity desktop, don’t install Ubuntu. Several community flavors ship with other desktop environments installed and integrated by default. Save yourself the hassle of ‘uninstalling Unity’ by installing one that doesn’t include it! </em></p>\n							    																									',1),(176,'\nWhy buy an electric bike if we can transform that one we have\n','http://www.narrativetech.com/2015/10/why-buy-electric-bike-if-we-can.html',1,0,'\n<div class=\"separator\">\n<a href=\"http://3.bp.blogspot.com/--vYWMmOAjAg/ViirtF9JoUI/AAAAAAAAATM/CWqF_qN4DWI/s1600/650_1200.jpeg\"><img border=\"0\" height=\"426\" src=\"http://3.bp.blogspot.com/--vYWMmOAjAg/ViirtF9JoUI/AAAAAAAAATM/CWqF_qN4DWI/s640/650_1200.jpeg\" width=\"640\" alt=\"650_1200.jpeg\" /></a></div>\n<br /><div class=\"MsoNormal\">\nIn recent years, we have seen how the electric bikes became\npopular in the market and became a good option for reducing traffic, environmental\nprotection and helping to endure for difficult journeys as well.</div>\n\n<div class=\"MsoNormal\">\nThe main point for the electric bikes, is the price. They\nare obviously more expensive than a regular bike. But we may see developments\nfor attractive options that make any bike an electric vehicle instantly.</div>\n\n<div class=\"MsoNormal\">\nShareRoller, it is how we know this attractive project created\nin early 2014, but today, in its third version, has been perfected to the point\nof being ready to be marketed in bulk.</div>\n<div class=\"MsoNormal\">\nShareRoller is a device placed in front of any bike through\na pull-down mechanism. This small engine is capable of providing up to 750\nwatts of power, giving speeds of up to 45 km / h and an autonomy which can\nrange from 12 to 89 kilometers, depending on the battery.</div>\n\n<div class=\"separator\">\n<a href=\"http://2.bp.blogspot.com/-chaTv_1ZNFk/ViisENQbjsI/AAAAAAAAATU/cJ6jNcLpRtY/s1600/650_1200%2B%25281%2529.png\"><img border=\"0\" height=\"426\" src=\"http://2.bp.blogspot.com/-chaTv_1ZNFk/ViisENQbjsI/AAAAAAAAATU/cJ6jNcLpRtY/s640/650_1200%2B%25281%2529.png\" width=\"640\" alt=\"650_1200%2B%25281%2529.png\" /></a></div>\n\n<div class=\"MsoNormal\">\nThere are three types of batteries to choose producing 110,\n220 or 400 watts of power per hour. One of the advantages is that these small\nengines are removable, so you can enlarge or diminish the autonomy (and weight)\naccording to your needs. The battery is recharged in  from two hours to two and a half hours\ndepending from the capacity of the engine.</div>\n<div class=\"MsoNormal\">\nShareRoller also has a software that can be programmed from\nan iOS or Android smartphone via a mobile app , where we can check the autonomy\ntime and distance traveled.</div>\n<div class=\"MsoNormal\">\nAs an additional point, ShareRoller is portable , and can be\nremoved from the bike and carried in a backpack for safety. Weight depends on\nthe type of battery installed, but can range from 800 grams to almost 2\nkilograms. Finally, as part of the potability, it has a USB device port to\ncharge your mobile phone.</div>\n\n<div class=\"separator\">\n<a href=\"http://1.bp.blogspot.com/-qOFSO7iWcNE/ViisYXh5pSI/AAAAAAAAATc/XNmgz6e6Orw/s1600/1024_2000.jpeg\"><img border=\"0\" height=\"358\" src=\"http://1.bp.blogspot.com/-qOFSO7iWcNE/ViisYXh5pSI/AAAAAAAAATc/XNmgz6e6Orw/s640/1024_2000.jpeg\" width=\"640\" alt=\"1024_2000.jpeg\" /></a></div>\n<div class=\"MsoNormal\">\n<center>\n<iframe frameborder=\"0\" height=\"281\" src=\"https://player.vimeo.com/video/142904930\" width=\"500\">[embedded content]</iframe> <br /></center>\nThe entry package that includes a mini battery has a price\nof $ 649 , while the ultra battery version is available for $ 948.</div>\n\n\n',1);
INSERT INTO `entries` VALUES (177,'Unity 2D Flappy Bird Tutorial','http://noobtuts.com/unity/2d-flappy-bird-game',1,0,'\n    <p><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/unity_flappy_bird.png\" title=\"unity_flappy_bird\" alt=\"Unity 2D Flappy Bird Game\" /></p>\n\n<h2>Foreword</h2>\n\n<p>In this Tutorial we will learn how easy it is to make a game like Flappy Bird in Unity. <a href=\"http://en.wikipedia.org/wiki/Flappy_Bird\">Flappy Bird</a> was released in 2013 and became the most downloaded iOS App in January 2014.</p>\n\n<p>The gamedesign is very simple: a bird is supposed to fly horizontally between obstacles, and the player can press a button to make the bird flap and fly upwards. Simple games like that are always perfect for a Tutorial, all we need are 40 lines of code and a few sprites.</p>\n\n<p>As usual, everything will be explained as easy as possible so everyone can understand it.</p>\n\n<h2>Requirements</h2>\n\n<h3>Knowledge</h3>\n\n<p>Our Tutorial does not require any special skills. If you know your way around Unity and heard about <a href=\"http://noobtuts.com/unity/gameobjects-and-components\">GameObjects</a> and Transforms before, then you are ready to go. And if you didn\'t, don\'t worry about it too much.</p>\n\n<p>Feel free to read our easier <a href=\"http://noobtuts.com/unity\">Unity Tutorials</a> like <a href=\"http://noobtuts.com/unity/2d-pong-game\">Unity 2D Pong Game</a> to get used to the engine.</p>\n\n<h3>Unity Version</h3>\n\n<p>Our Flappy Bird Tutorial will use <strong>Unity 5.0.0f4</strong>. Newer versions should work fine as well, older versions may or may not work. The free version of Unity 5 now comes with all the engine features, which makes it the recommended version.</p>\n\n<h2>Project Setup</h2>\n\n<p>Let\'s get to it. We will start Unity and select <strong>New Project</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/new_project.png\" title=\"new_project\" alt=\"Unity New Project\" /></p>\n\n<p>We will name it <strong>flappybird</strong>, select any location like <strong>C:\\</strong>, select <strong>2D</strong> and click <strong>Create Project</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/project_wizard_create_2d.png\" title=\"project_wizard_create_2d\" alt=\"Unity Create new 2D Project\" /></p>\n\n<p>If we select the <strong>Main Camera</strong> in the <strong>Hierarchy</strong> then we can set the <strong>Background Color</strong> to a light blue <em>(R=198, G=208, B=230)</em> for the sky color and adjust the <strong>Size</strong> like shown in the following image:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/camera_properties.png\" title=\"camera_properties\" alt=\"Camera Properties\" /></p>\n\n<h2>The Background</h2>\n\n<p>We will begin by drawing a very simple sky background in our drawing tool of choice:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/background.png\" title=\"background\" alt=\"Flappy Bird Background\" /><br /><em>Note: right click on the image, select <strong>Save As...</strong>, navigate to the project\'s <strong>Assets</strong> folder and save it in a new <strong>Sprites</strong> folder.</em></p>\n\n<p>After saving it, we can select the background in the <strong>Project Area</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/background_projectarea.png\" title=\"background_projectarea\" alt=\"Background in Project Area\" /></p>\n\n<p>And then modify the <strong>Import Settings</strong> in the <strong>Inspector</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/background_importsettings.png\" title=\"background_importsettings\" alt=\"Background Import Settings\" /><br /><em>Note: a <strong>Pixels Per Unit</strong> value of <strong>16</strong> means that 16 x 16 pixels will fit into one unit in the game world. We will use this value for all our textures, because the Bird will be 16 x 16 pixels, which should end up being 1 unit in the game world.</em></p>\n\n<p>Alright so let\'s add the background to the game world by dragging it from the <strong>Project Area</strong> onto the <strong>Main Camera</strong> in the <strong>Hierarchy</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/background_to_hierarchy.png\" title=\"background_to_hierarchy\" alt=\"Background to Hierarchy\" /></p>\n\n<p>So that the background becomes a <strong>child</strong> of the <strong>Main Camera</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/background_under_camera.png\" title=\"background_under_camera\" alt=\"Background as Child of Camera\" /></p>\n\n<p>Now that the background is a child of the camera, it will always go where the camera goes. Or in other words, the player will always see the background.<br /><em>Note: we could also place several backgrounds next to each other so that there is still a background when the camera moves horizontally, but making it a child of the camera is much easier.</em></p>\n\n<p>Let\'s take a look at the <strong>Inspector</strong> and position the background one unit lower at <strong>Y=-1</strong>, just so that it fits to the rest of the game later on:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/background_position.png\" title=\"background_position\" alt=\"Background position\" /></p>\n\n<p>If we press <strong>Play</strong> then we can already see the background sky:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/background_inscene.png\" title=\"background_inscene\" alt=\"Background in Scene\" /></p>\n\n<p>There is one more adjustment to be made here. We will add the bird and some obstacles soon, so let\'s also make sure that the background is really drawn behind everything else. Unity uses the SpriteRenderer\'s <strong>Sorting Layer</strong> and <strong>Order in Layer</strong> properties to decide which parts of a game should be in front of which other parts.</p>\n\n<p>We will simply set the <strong>Order in Layer</strong> to <strong>-1</strong> so that everything else will be drawn in front of it:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/background_order_in_layer.png\" title=\"background_order_in_layer\" alt=\"Background Order in Layer\" /><br /><em>Note: the higher the order, the more it is in the foreground. The lower the order, the more it is in the background.</em></p>\n\n<h2>The Ground</h2>\n\n<p>Let\'s also draw some kind of terrain for the ground. We will make it very wide so that there is enough space for our obstacles later:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/ground.png\" title=\"ground\" alt=\"Flappy Bird Ground\" /><br /><em>Note: right click on the image, select <strong>Save As...</strong> and save it in the project\'s <strong>Assets/Sprites</strong> folder.</em></p>\n\n<p>We will select the ground in the <strong>Project Area</strong> and then assign the same <strong>Import Settings</strong> that we used before:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/ground_importsettings.png\" title=\"ground_importsettings\" alt=\"Ground Import Settings\" /></p>\n\n<p>Afterwards we will drag it from the <strong>Project Area</strong> into the <strong>Hierarchy</strong> again:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/ground_to_hierarchy.png\" title=\"ground_to_hierarchy\" alt=\"Add Ground to Hierarchy\" /><br /><em>Note: this time we won\'t make it a child of the camera.</em></p>\n\n<p>Let\'s take a look at the <strong>Inspector</strong> and position the ground at <strong>X=16</strong> <strong>Y=-6</strong>: so that it is below the background and so that most of the area is at the right of the screen:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/ground_position.png\" title=\"ground_position\" alt=\"Ground position\" /></p>\n\n<p>This time we will select a <strong>Order in Layer</strong> value of <strong>1</strong>, so that it will always be in front of the bird and the obstacles later on:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/ground_order_in_layer.png\" title=\"ground_order_in_layer\" alt=\"Ground Order in Layer\" /></p>\n\n<h3>Ground Physics</h3>\n\n<p>The ground should the part of the physics world. Right now it is really just an image in the game world, just a visual effect and nothing more. We want the ground to be like a wall that the bird can collide with, so let\'s select <strong>Add Component</strong>-&gt;<strong>Physics 2D</strong>-&gt;<strong>Box Collider 2D</strong> in the <strong>Inspector</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/ground_collider.png\" title=\"ground_collider\" alt=\"Ground Collider\" /></p>\n\n<p>Normally we would be done now, but there is one more adjustment to be made here. Later on we will add obstacles to our game <em>(like the green pipes in the original Flappy Bird game)</em>, and those obstacles will move upwards and downwards into the ground. The obstacles and the ground will both be part of the physics world, and according to the laws of physics, there can never be two objects at the same place <em>(or in our case, two Colliders)</em>.</p>\n\n<p>There are several ways to work around this. As usual we will choose the easiest way by creating a new physics <strong>Layer</strong> that we will use for the ground and the obstacles. Afterwards we will tell Unity to simply ignore collisions in-between that layer.</p>\n\n<p>We can create a new layer by selecting <strong>Add Layer</strong> in the <strong>Inspector</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/ground_add_layer.png\" title=\"ground_add_layer\" alt=\"Layer\" /></p>\n\n<p>Afterwards we will add one <strong>User Layer</strong>, let\'s call it <strong>WeirdPhysics</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/layers_weirdphysics.png\" title=\"layers_weirdphysics\" alt=\"Weird Physics Layer\" /></p>\n\n<p>Now we can select the ground in the <strong>Hierarchy</strong> again and then assign the <strong>WeirdPhysics</strong> layer:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/ground_layer_weirdphysics.png\" title=\"ground_layer_weirdphysics\" alt=\"Ground WeirdPhysics Layer\" /></p>\n\n<p>Afterwards we select <strong>Edit</strong>-&gt;<strong>Project Settings</strong>-&gt;<strong>Physics 2D</strong> from the top menu and disable the <strong>WeirdPhysics</strong> vs. <strong>WeirdPhysics</strong> collisions in the <strong>Layer Collision Matrix</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/physics_layer_ignore_weirdphysics.png\" title=\"physics_layer_ignore_weirdphysics\" alt=\"Physics ignore WeirdPhysics Layer Collisions\" /><br /><em>Note: it\'s very rare that we have to do this in Unity, but our Flappy Bird game is one of those exceptions.</em></p>\n\n<p>Now the ground will never collide with any of the obstacles.</p>\n\n<p>Also if we press <strong>Play</strong> then we can see the sky and the ground already:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/ground_inscene.png\" title=\"ground_inscene\" alt=\"Ground in Scene\" /></p>\n\n<h2>The Bird</h2>\n\n<h3>The Bird Image</h3>\n\n<p>Alright, let\'s get to the most important part of our game: the bird. We will begin by drawing a bird flying animation with 4 frames:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird.png\" title=\"bird\" alt=\"Bird Animation\" /><br /><em>Note: right click on the image, select <strong>Save As...</strong> and save it in the project\'s <strong>Assets/Sprites</strong> folder.</em></p>\n\n<p>We will use the following <strong>Import Settings</strong> for it:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_importsettings.png\" title=\"bird_importsettings\" alt=\"Bird ImportSettings\" /></p>\n\n<p>Our bird image contains several smaller images, hence it\'s important that we select <strong>Multiple</strong> as <strong>Sprite Mode</strong>. Afterwards we can click the <strong>Sprite Editor</strong> button:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_spriteeditor_button.png\" title=\"bird_spriteeditor_button\" alt=\"Bird Sprite Editor Button\" /></p>\n\n<p>In the <strong>Sprite Editor</strong> we <strong>Slice</strong> it as a <strong>16 x 16</strong> Grid:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_spriteeditor_settings.png\" title=\"bird_spriteeditor_settings\" alt=\"Bird SpriteEditor Settings\" /></p>\n\n<p>After pressing the <strong>Slice</strong> button we can close the Sprite Editor. Unity will ask us if we want to apply the <strong>Unimported Import Settings</strong>, so let\'s select <strong>Apply</strong>.</p>\n\n<p>Now we can see our 4 slices as children of the <strong>bird</strong> image in the <strong>Project Area</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_children.png\" title=\"bird_children\" alt=\"Bird Children\" /></p>\n\n<h3>The Bird Animation</h3>\n\n<p>Let\'s select all the slices and then drag them into the <strong>Hierarchy</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_slices_to_hierarchy.png\" title=\"bird_slices_to_hierarchy\" alt=\"Drag Bird Slices to Hierarchy\" /></p>\n\n<p>Unity knows that we want to create an animation from those slices, which is why it asks us where to save the animation files. We will create a new <strong>BirdAnimation</strong> folder and then save the animation as <strong>fly.anim</strong>.</p>\n\n<p>Afterwards we can see two new files in our <strong>BirdAnimation</strong> folder:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_animation_files.png\" title=\"bird_animation_files\" alt=\"Bird Animation Files\" /></p>\n\n<p>The <strong>bird_0</strong> file is the state machine that takes care of animation states and speeds. The second file is the <strong>fly</strong> animation itself. Let\'s double click the <strong>bird_0</strong> file really quick so that we can see the animation state machine:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_animator.png\" title=\"bird_animator\" alt=\"Bird in Animator\" /><br /><em>Note: we don\'t have to worry about the animation states because we only have one animation.</em></p>\n\n<p>We will click on the <strong>fly</strong> state and then simply decrease the <strong>speed</strong> to <strong>0.5</strong> in the <strong>Inspector</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_animation_fly_speed.png\" title=\"bird_animation_fly_speed\" alt=\"Bird Fly Animation Speed\" /></p>\n\n<p>And since we only have one animation, we are already done here. If we press <strong>Play</strong> then we can even see it in action:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_animated.gif\" title=\"bird_animated\" alt=\"Bird animated\" /></p>\n\n<h3>Bird Physics</h3>\n\n<p>Our bird is supposed to be part of the physics world. Let\'s begin by giving it a Collider, just like we did with the ground. We will select <strong>Add Component</strong>-&gt;<strong>Physics 2D</strong>-&gt;<strong>Circle Collider 2D</strong> in the <strong>Inspector</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_collider.png\" title=\"bird_collider\" alt=\"Bird Collider\" /></p>\n\n<p>Now everything in the physics world that is supposed to move around will also need a <strong>Rigidbody</strong>. A Rigidbody takes care of things like gravity, velocity and movement forces. We can add a Rigidbody by selecting <strong>Add Component</strong>-&gt;<strong>Physics 2D</strong>-&gt;<strong>Rigidbody 2D</strong> in the <strong>Inspector</strong>. We will also enable the <strong>Fixed Angle</strong> property so that the bird doesn\'t suddenly start rotating:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_rigidbody.png\" title=\"bird_rigidbody\" alt=\"Bird Rigidbody\" /></p>\n\n<p>If we press <strong>Play</strong> then we can already see the Rigidbody\'s gravity property in action:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_gravity.gif\" title=\"bird_gravity\" alt=\"Bird Gravity\" /></p>\n\n<h3>The Bird Movement Script</h3>\n\n<p>Our bird already looks pretty decent, but it should also fly towards the right at all times, and it should flap its wings to fly upwards if the user presses a button.</p>\n\n<p>This kind of behavior can be implemented with a Script. Let\'s select <strong>Add Component</strong>-&gt;<strong>New Script</strong> in the <strong>Inspector</strong>, name it <strong>Bird</strong> and select <strong>CSharp</strong> as the language. We will also create a new <strong>Scripts</strong> folder in our <strong>Project Area</strong> so that we can put the Bird Script into it:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_script_projectarea.png\" title=\"bird_script_projectarea\" alt=\"Bird Script in Project Area\" /></p>\n\n<p>We can double click the Script in order to open it:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>using</span> <span>UnityEngine</span><span>;</span><br /><span>using</span> <span>System.Collections</span><span>;</span></span></code></pre><p><code><span>public</span> <span>class</span> Bird <span>:</span> MonoBehaviour <span>{</span></code></p><code></code><p><code>    <span>// Use this for initialization</span><br />    <span>void</span> Start <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br />    <br />    <span>// Update is called once per frame</span><br />    <span>void</span> Update <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br /><span>}</span></code></p><code></code>\n\n<p>We can make the bird fly towards the right at all times by first adding a new <strong>speed</strong> variable and then using the Rigidbody\'s <strong>velocity</strong> property:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>using</span> <span>UnityEngine</span><span>;</span><br /><span>using</span> <span>System.Collections</span><span>;</span></span></code></pre><p><code><span>public</span> <span>class</span> Bird <span>:</span> MonoBehaviour <span>{</span><br />    <span>// Movement speed</span><br />    <span>public</span> <span>float</span> speed <span>=</span> <span>2</span><span>;</span></code></p><code></code><p><code>    <span>// Use this for initialization</span><br />    <span>void</span> Start <span>(</span><span>)</span> <span>{</span>    <br />        <span>// Fly towards the right</span><br />        GetComponent<span>&lt;</span>Rigidbody2D<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>velocity</span> <span>=</span> Vector2<span>.</span><span>right</span> <span>*</span> speed<span>;</span><br />    <span>}</span><br />    <br />    <span>// Update is called once per frame</span><br />    <span>void</span> Update <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br /><span>}</span></code></p><code></code><br /><em>Note: the velocity is exactly the movement direction multiplied by the movement speed.</em>\n\n<p>If we save the Script and press <strong>Play</strong> then we can see how the bird flies towards the right of the Screen.</p>\n\n<p>Now we create a new <strong>force</strong> variable and then use our <strong>Update</strong> function to check for key presses. If the user pressed the <strong>Space</strong> key then we will make the bird fly upwards with the <strong>force</strong>:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>using</span> <span>UnityEngine</span><span>;</span><br /><span>using</span> <span>System.Collections</span><span>;</span></span></code></pre><p><code><span>public</span> <span>class</span> Bird <span>:</span> MonoBehaviour <span>{</span><br />    <span>// Movement speed</span><br />    <span>public</span> <span>float</span> speed <span>=</span> <span>2</span><span>;</span><br />    <br />    <span>// Flap force</span><br />    <span>public</span> <span>float</span> force <span>=</span> <span>300</span><span>;</span></code></p><code></code><p><code>    <span>// Use this for initialization</span><br />    <span>void</span> Start <span>(</span><span>)</span> <span>{</span>    <br />        <span>// Fly towards the right</span><br />        GetComponent<span>&lt;</span>Rigidbody2D<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>velocity</span> <span>=</span> Vector2<span>.</span><span>right</span> <span>*</span> speed<span>;</span><br />    <span>}</span><br />    <br />    <span>// Update is called once per frame</span><br />    <span>void</span> Update <span>(</span><span>)</span> <span>{</span><br />        <span>// Flap</span><br />        <span>if</span> <span>(</span>Input<span>.</span><span>GetKeyDown</span><span>(</span>KeyCode<span>.</span><span>Space</span><span>)</span><span>)</span><br />            GetComponent<span>&lt;</span>Rigidbody2D<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>AddForce</span><span>(</span>Vector2<span>.</span><span>up</span> <span>*</span> force<span>)</span><span>;</span><br />    <span>}</span><br /><span>}</span></code></p><code></code>\n\n<p>If we press <strong>Play</strong> then we can now make the bird fly upwards:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_flapping.gif\" title=\"bird_flapping\" alt=\"Bird flapping\" /></p>\n\n<p>There is one last thing to do here. We want to restart the game as soon as the bird collided with the ground or with an obstacle. Our bird already has a <strong>Collider</strong> and a <strong>Rigidbody</strong>, which means that Unity automatically calls the <strong>OnCollisionEnter2D</strong> function. All we have to do is actually add it to our Script:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>void</span> OnCollisionEnter2D<span>(</span>Collision2D coll<span>)</span> <span>{</span><br />    <span>// Restart</span><br />    Application<span>.</span><span>LoadLevel</span><span>(</span>Application<span>.</span><span>loadedLevel</span><span>)</span><span>;</span><br /><span>}</span></span></code></pre><br /><em>Note: <strong>Application.LoadLevel</strong> can be used to load a Scene. <strong>Application.loadedLevel</strong> is the currently loaded Scene. Or in other words, we simply restart the current Scene.</em>\n\n<h2>Camera Follow</h2>\n\n<p>Right now the Camera never moves. And since the bird always flies towards the right of the screen, we won\'t be able to see it for a very long time. We will solve this problem by creating a new Script that makes the Camera follow the bird all the time.</p>\n\n<p>Let\'s select the <strong>Main Camera</strong> in the <strong>Hierarchy</strong> and then click on <strong>Add Component</strong>-&gt;<strong>New Script</strong>, name it <strong>CameraFollow</strong> and select <strong>CSharp</strong> as the language. We will also move it into our <strong>Scripts</strong> folder and then open it:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>using</span> <span>UnityEngine</span><span>;</span><br /><span>using</span> <span>System.Collections</span><span>;</span></span></code></pre><p><code><span>public</span> <span>class</span> CameraFollow <span>:</span> MonoBehaviour <span>{</span></code></p><code></code><p><code>    <span>// Use this for initialization</span><br />    <span>void</span> Start <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br />    <br />    <span>// Update is called once per frame</span><br />    <span>void</span> Update <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br /><span>}</span></code></p><code></code>\n\n<p>We won\'t need the <strong>Start</strong> function this time, so let\'s remove it:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>using</span> <span>UnityEngine</span><span>;</span><br /><span>using</span> <span>System.Collections</span><span>;</span></span></code></pre><p><code><span>public</span> <span>class</span> CameraFollow <span>:</span> MonoBehaviour <span>{</span><br />    <br />    <span>// Update is called once per frame</span><br />    <span>void</span> Update <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br /><span>}</span></code></p><code></code>\n\n<p>Let\'s add a public <strong>Transform</strong> variable to specify which target to follow:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>using</span> <span>UnityEngine</span><span>;</span><br /><span>using</span> <span>System.Collections</span><span>;</span></span></code></pre><p><code><span>public</span> <span>class</span> CameraFollow <span>:</span> MonoBehaviour <span>{</span><br />    <span>// The Target</span><br />    <span>public</span> Transform target<span>;</span><br />    <br />    <span>// Update is called once per frame</span><br />    <span>void</span> Update <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br /><span>}</span></code></p><code></code><br /><em>Note: we can set that target in the <strong>Inspector</strong> later on.</em>\n\n<p>Afterwards we will simply use the <strong>Update</strong> function to always set the Camera\'s <strong>X</strong> position to the target\'s <strong>X</strong> position:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>// Update is called once per frame</span><br /><span>void</span> Update <span>(</span><span>)</span> <span>{</span><br />    transform<span>.</span><span>position</span> <span>=</span> <span>new</span> Vector3<span>(</span>target<span>.</span><span>position</span><span>.</span><span>x</span>,<br />                                     transform<span>.</span><span>position</span><span>.</span><span>y</span>,<br />                                     transform<span>.</span><span>position</span><span>.</span><span>z</span><span>)</span><span>;</span><br /><span>}</span></span></code></pre><br /><em>Note: the <strong>X</strong> position is the horizontal position.</em>\n\n<p>Now our Script is done. However it\'s usually considered best practice to do Camera movement after everything else in the Scene was updated. We will simply change our <strong>Update</strong> function to <strong>LateUpdate</strong>, just to have it perfectly smooth:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>void</span> LateUpdate <span>(</span><span>)</span> <span>{</span><br />    transform<span>.</span><span>position</span> <span>=</span> <span>new</span> Vector3<span>(</span>target<span>.</span><span>position</span><span>.</span><span>x</span>,<br />                                     transform<span>.</span><span>position</span><span>.</span><span>y</span>,<br />                                     transform<span>.</span><span>position</span><span>.</span><span>z</span><span>)</span><span>;</span><br /><span>}</span></span></code></pre>\n\n<p>If we save the Script then we can take a look at the <strong>Inspector</strong> and drag the <strong>bird_0</strong> GameObject from the <strong>Hierarchy</strong> into the Script\'s <strong>Target</strong> slot:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/camera_follow_target.png\" title=\"camera_follow_target\" alt=\"Camera Follow Target\" /></p>\n\n<p>If we press <strong>Play</strong> then we can now see how the Camera automatically follows the bird:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/camera_following_bird.gif\" title=\"camera_following_bird\" alt=\"Camera following the Bird\" /></p>\n\n<h2>The Obstacles</h2>\n\n<h3>The Obstacle Image</h3>\n\n<p>Right now our game is not very hard. We can change that by adding some obstacles. Let\'s draw one:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle.png\" title=\"obstacle\" alt=\"Obstacle\" /><br /><em>Note: right click on the image, select <strong>Save As...</strong> and save it in the project\'s <strong>Assets/Sprites</strong> folder.</em></p>\n\n<p>We will use the following <strong>Import Settings</strong> for it:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_importsettings.png\" title=\"obstacle_importsettings\" alt=\"Obstacle ImportSettings\" /></p>\n\n<p>And then drag it from the <strong>Project Area</strong> into the <strong>Hierarchy</strong> in order to create a GameObject from it:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_in_hierarchy.png\" title=\"obstacle_in_hierarchy\" alt=\"Obstacle in Hierarchy\" /></p>\n\n<p>We will position it at <strong>X=3</strong>, <strong>Y=-5</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_position.png\" title=\"obstacle_position\" alt=\"Obstacle Position\" /></p>\n\n<p>Here is how it looks in the Scene:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_inscene.png\" title=\"obstacle_inscene\" alt=\"Obstacle in Scene\" /></p>\n\n<h3>Obstacle Physics</h3>\n\n<p>The obstacle should be part of the physics world again. The bird should be able to collide with it, so let\'s select <strong>Add Component</strong>-&gt;<strong>Physics 2D</strong>-&gt;<strong>Box Collider 2D</strong> in the <strong>Inspector</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_collider.png\" title=\"obstacle_collider\" alt=\"Obstacle Collider\" /></p>\n\n<p>We talked about how the obstacles might end up inside the ground and how we don\'t want the two to collide with each other, so let\'s make it part of our <strong>WeirdPhysics</strong> layer, too:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_layer.png\" title=\"obstacle_layer\" alt=\"Obstacle Layer\" /><br /><em>Note: since we disabled collisions in-between our WeirdPhysics layer, the ground will never collide with an obstacle. The bird can still collide with the ground and with the obstacle because it has a different layer (the default one).</em></p>\n\n<p>Alright so some of the obstacles are also supposed to move up and down. Everything in the physics world that is supposed to move will need a Rigidbody, so let\'s select <strong>Add Component</strong>-&gt;<strong>Physics 2D</strong>-&gt;<strong>Rigidbody 2D</strong> in the <strong>Inspector</strong> again. We don\'t want it to be affected by gravity, so let\'s set the <strong>Gravity Scale</strong> to <strong>0</strong>. We also don\'t want it to rotate, so let\'s also enable <strong>Fixed Angle</strong> again:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_rigidbody.png\" title=\"obstacle_rigidbody\" alt=\"Obstacle Rigidbody\" /></p>\n\n<p>If we press <strong>Play</strong> and let the bird fly against the obstacle then we can see how the level restarts:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/bird_vs_obstacle.gif\" title=\"bird_vs_obstacle\" alt=\"Bird vs Obstacle\" /></p>\n\n<h3>Obstacle Movement</h3>\n\n<p>Alright so some of the obstacles are supposed to move up and down. This kind of behavior can be implemented with a Script again. Let\'s select <strong>Add Component</strong>-&gt;<strong>New Script</strong>, name it <strong>Obstacle</strong>, move it into our <strong>Scripts</strong> folder and then open it:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>using</span> <span>UnityEngine</span><span>;</span><br /><span>using</span> <span>System.Collections</span><span>;</span></span></code></pre><p><code><span>public</span> <span>class</span> Obstacle <span>:</span> MonoBehaviour <span>{</span></code></p><code></code><p><code>    <span>// Use this for initialization</span><br />    <span>void</span> Start <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br />    <br />    <span>// Update is called once per frame</span><br />    <span>void</span> Update <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br /><span>}</span></code></p><code></code>\n\n<p>There are many different ways to make the obstacle move up and down all the time. As usual, we will use the easiest way. </p>\n\n<p>We will begin by adding a <strong>speed</strong> variable and then setting the Rigidbody\'s <strong>velocity</strong> so that the obstacles move upwards with the <strong>speed</strong>:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>using</span> <span>UnityEngine</span><span>;</span><br /><span>using</span> <span>System.Collections</span><span>;</span></span></code></pre><p><code><span>public</span> <span>class</span> Obstacle <span>:</span> MonoBehaviour <span>{</span><br />    <span>// Movement Speed (0 means don\'t move)</span><br />    <span>public</span> <span>float</span> speed <span>=</span> <span>0</span><span>;</span></code></p><code></code><p><code>    <span>// Use this for initialization</span><br />    <span>void</span> Start <span>(</span><span>)</span> <span>{</span><br />        <span>// Initial Movement Direction</span><br />        GetComponent<span>&lt;</span>Rigidbody2D<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>velocity</span> <span>=</span> Vector2<span>.</span><span>up</span> <span>*</span> speed<span>;</span>    <br />    <span>}</span><br />    <br />    <span>// Update is called once per frame</span><br />    <span>void</span> Update <span>(</span><span>)</span> <span>{</span><br />    <br />    <span>}</span><br /><span>}</span></code></p><code></code>\n\n<p>Now the trick is to use Unity\'s <a href=\"http://docs.unity3d.com/ScriptReference/MonoBehaviour.InvokeRepeating.html\">InvokeRepeating</a> function to reverse that velocity every few seconds:<br /></p><pre class=\"highlight csharp\"><code><span class=\"csharp\"><span>using</span> <span>UnityEngine</span><span>;</span><br /><span>using</span> <span>System.Collections</span><span>;</span></span></code></pre><p><code><span>public</span> <span>class</span> Obstacle <span>:</span> MonoBehaviour <span>{</span><br />    <span>// Movement Speed (0 means don\'t move)</span><br />    <span>public</span> <span>float</span> speed <span>=</span> <span>0</span><span>;</span><br />    <br />    <span>// Switch Movement Direction every x seconds</span><br />    <span>public</span> <span>float</span> switchTime <span>=</span> <span>2</span><span>;</span></code></p><code></code><p><code>    <span>void</span> Start<span>(</span><span>)</span> <span>{</span><br />        <span>// Initial Movement Direction</span><br />        GetComponent<span>&lt;</span>Rigidbody2D<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>velocity</span> <span>=</span> Vector2<span>.</span><span>up</span> <span>*</span> speed<span>;</span><br />        <br />        <span>// Switch every few seconds</span><br />        InvokeRepeating<span>(</span><span>\"Switch\"</span>, <span>0</span>, switchTime<span>)</span><span>;</span><br />    <span>}</span><br />    <br />    <span>void</span> <span>Switch</span><span>(</span><span>)</span> <span>{</span><br />        GetComponent<span>&lt;</span>Rigidbody2D<span>&gt;</span><span>(</span><span>)</span><span>.</span><span>velocity</span> <span>*=</span> <span>-</span><span>1</span><span>;</span><br />    <span>}</span><br /><span>}</span></code></p><code></code><br /><em>Note: the Switch function simply reverses the Rigidbody\'s velocity. We then use <strong>InvokeRepeating</strong> to tell Unity to call that function every few seconds. We also added a <strong>switchTime</strong> variable to specify the time in which <strong>Switch</strong> should be called.</em>\n\n<p>Let\'s save the Script and set the obstacle\'s <strong>Speed</strong> to <strong>1</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_script_inspector.png\" title=\"obstacle_script_inspector\" alt=\"Obstacle Script in Inspector\" /><br /><em>Note: if we don\'t want an obstacle to move then we can either set it\'s <strong>Speed</strong> to <strong>0</strong> or disable the Script.</em></p>\n\n<p>If we press <strong>Play</strong> then we can see our obstacle moving up- and downwards:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_moving.gif\" title=\"obstacle_moving\" alt=\"Obstacle moving\" /></p>\n\n<h3>Adding more Obstacles</h3>\n\n<p>Let\'s right click the obstacle in the <strong>Hierarchy</strong>, select <strong>Duplicate</strong> and move it a bit further towards the right:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_duplicated.png\" title=\"obstacle_duplicated\" alt=\"Duplicated Obstacle\" /></p>\n\n<p>We will also duplicate one and then set the <strong>Scale.Y</strong> property to <strong>-1</strong>:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_scale_y-1.png\" title=\"obstacle_scale_y-1\" alt=\"Obstacle Scale Y-1\" /></p>\n\n<p>This way it looks properly when positioning it upside-down:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/obstacle_upsidedown.png\" title=\"obstacle_upsidedown\" alt=\"Obstacle upside-down\" /></p>\n\n<p>We can add as many obstacles with as many different <strong>speed</strong> and <strong>switchTime</strong> properties as we want:<br /><img src=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/unity_flappy_bird.png\" title=\"unity_flappy_bird\" alt=\"Unity 2D Flappy Bird Game\" /></p>\n\n<h2>Summary</h2>\n\n<p>We just learned how incredibly easy it is to make a Flappy Bird game in Unity. We used some very powerful Unity features like Physics, Mecanim <em>(for the animation)</em>, Layers, the Sprite Editor and Scripting. As usual now it\'s up to the reader to make the game fun and more difficult.</p>\n\n<p>The Project Files can be download <a href=\"http://noobtuts.com/content/unity/2d-flappy-bird-game/source.zip\">here</a>.</p>\n\n    \n      ',1),(178,'A Beginner\'s Guide to the Synth','http://20khz.gizmodo.com/a-beginners-guide-to-the-synth-1736978695',0,0,'<p class=\"has-media media-large has-image\"><span class=\"lightBoxWrapper\"><span class=\"img-border lazy-image lazy-gif\"><img src=\"http://i.kinja-img.com/gawker-media/image/upload/s--v1p9IEYn--/c_fit,fl_progressive,q_80,w_636/1485400206289950502.jpg\" width=\"800\" height=\"450\" alt=\"A Beginner\'s Guide to the Synth\" /></span><span class=\"magnifier lightBox hide\"><span class=\"icon icon-white icon-search-plus\"></span></span></span></p>\n\n\n\n\n\n\n\n\n<p class=\"first-text\">You know the sound. Listen to Devo’s <a href=\"https://www.youtube.com/watch?v=j_QLzthSkfM\">“Whip It”</a> or Parliament’s <a href=\"https://www.youtube.com/watch?v=6F7xbF7OnxU\">“Flash Light.”</a> Like countless modern pop songs, they’re full of sounds that aren’t made by acoustic instruments; the sound is pure synthetic. You’re listening to electricity manipulated by a machine.</p>\n\n\n\n\n\n\n\n\n<p>The machine of course is the synthesizer, and it’s been one of the most crucial building blocks of contemporary music. And yet, how many of us know how a synth <em>works</em>? How do a bunch of wonky tones coming out of a box covered in knobs and buttons translate to the memorable sounds of disco, or synthpop, or house or electro or EDM or Taylor Swift?<br /></p>\n\n\n\n\n\n\n\n\n<p>This guide is an attempt to demystify the ubiquitous sonic gadget—not for audiophiles or synth nerds, but for anyone that listens to music in the 21st century and is curious about how it’s made.</p><div class=\"js_ad-mobile-waypoint\">\n	<div class=\"ad-unit js_ad-unit hide-contents ad-mobile js_ad-mobile\">\n		<div class=\"ad-mobile-inner\">\n			<p class=\"ad-label proxima\"><small class=\"proxima\">Advertisement</small></p>\n			\n			</div>\n		</div>\n	</div>\n\n\n\n\n\n\n\n\n\n<h3>Creating Sound From Scratch</h3>\n\n\n\n\n\n\n\n\n<p>Let’s start at the beginning, 50 years ago, when an electrician (not a musician!) <a href=\"http://www.moogmusic.com/legacy/bob-moog-timeline\">named Robert Moog</a> devised a new way to make sound: using an electrical signal.</p>\n\n\n\n\n\n\n\n\n<p>On the heels of the invention of the transistor, Moog (rhymes with “vogue”) made a machine that could break sound down into its most fundamental properties and control every aspect of it with voltage—essentially building sound from scratch.</p>\n\n\n\n\n\n\n\n\n\n<p>Which is why to really understand anything about synths, you have to have a basic grasp of acoustic theory. So let’s go back to physics class a second.</p>\n\n\n\n\n\n\n\n\n<p>In a nutshell, sound is caused by a vibrating object creating changes in air pressure, which vibrates our eardrum, and which we in turn perceive as sound. A synthesizer basically mimics this natural acoustic process. So instead of a plucked, vibrating guitar string, the vibration — called “oscillation” in synthspeak — comes from an electrical signal generated by rapidly changing voltages in a circuit.<br /></p>\n\n\n\n\n\n\n\n\n<p>Those oscillations repeat periodically, in patterns called waveforms. And every aspect of a waveform — its size, speed, structure — can be further shaped by the synth’s controls to carve out a sound’s pitch, timbre, tone and more. Then eventually, the electrical signal is amplified and sent through a speaker to convert it back to sound the human ear understands.</p>\n\n\n\n\n\n\n\n\n<p>Now in the beginning, synths weren’t musical in the traditional sense—they were pretty much crap at emulating acoustic instruments in any realistic way, because the waveforms produced by organic sounds are <em>much</em> more complex and harmonically rich (more on this later) than the precise mathematical waves generated by electricity. But synths were very good at spitting out trippy, otherworldly sounds that don’t exist in nature at all<em>, </em>which is why they found a perfect early home in 60s psychedelia and scifi films.</p>\n\n\n\n\n\n\n\n\n<p>But how does an electrical signal go from sounding like the robotic fart sound of speaker feedback into something resembling music? Here’s where all those knobs come in.</p>\n\n\n\n\n\n\n\n\n<h2><strong>How a Synthesizer Works</strong></h2>\n\n\n\n\n\n\n\n\n<p class=\"has-media media-large has-image\"><span class=\"lightBoxWrapper\"><span class=\"img-border\"><img src=\"http://i.kinja-img.com/gawker-media/image/upload/s--hSD9qzWv--/c_scale,fl_progressive,q_80,w_800/1485400206460432422.jpg\" width=\"800\" height=\"252\" alt=\"A Beginner\'s Guide to the Synth\" /></span><span class=\"magnifier lightBox hide\"><span class=\"icon icon-white icon-search-plus\"></span></span></span></p>\n\n\n\n\n\n\n\n\n<p><em><small>The control panel on the Minimoog synthesizer </small></em></p>\n\n\n\n\n\n\n\n\n<p>All synths have a few <a href=\"http://synthesizeracademy.com/category/lessons/page/2/\">basic components</a> that work together to forge a sound: an oscillator that generates the waveform and changes its pitch, a filter that carves out certain frequencies in the wave to change the timbre, an amplifier that controls the signal volume, and modulation to create effects. Let’s break those down a bit.</p>\n\n\n\n\n\n\n\n\n<h4>Oscillator</h4>\n\n\n\n\n\n\n\n\n<p>The oscillator is the initial source of the sound — like the guitar string pluck. Voltage from a power source oscillates electrons which generates a waveform, and most synths let you select from various types of waves because different patterns have different sounds. The most common types are:</p>\n\n\n\n\n\n\n\n\n<p class=\"has-media media-large has-image\"><span class=\"lightBoxWrapper\"><span class=\"img-border\"><img src=\"http://i.kinja-img.com/gawker-media/image/upload/s--WQret7d5--/1485400206575735846.jpg\" width=\"800\" height=\"254\" alt=\"A Beginner\'s Guide to the Synth\" /></span><span class=\"magnifier lightBox hide\"><span class=\"icon icon-white icon-search-plus\"></span></span></span></p>\n\n\n\n\n\n\n\n\n<p><em><small>Fundamentals of synthesis poster via <a href=\"http://moogfoundation.org/learning-synthesis/synthesis-fundamentals/\">Moog Foundation</a> </small></em></p>\n\n\n\n\n\n\n\n\n<p>Hear the difference in their sounds:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>The synth’s oscillator section also controls pitch, or in physics-speak, frequency. Frequency is the speed of the vibration (the <em>frequency</em> with which a waveform completes one cycle of its pattern). It’s measured in cycles per second, or Hertz. The faster the frequency, the higher the pitch—double the frequency and the pitch goes up an octave.</p>\n\n\n\n\n\n\n\n\n<p>So to put it in musical terms, a 440 Hz tone is an A note, and 880 Hz is an A an octave up. 260 Hz is middle C <a href=\"http://www.phy.mtu.edu/~suits/notefreqs.html\">and so on</a>. Math! (The human ear can hear as low as 20 Hz and up to 20 kHz, which you might notice is the name of this here blog.)</p>\n\n\n\n\n\n\n\n\n<h4>Filter</h4>\n\n\n\n\n\n\n\n\n<p>So that’s how you get different notes to play a melody. But a trumpet and piano sound very different even when played at the same pitch, because of the sound’s <em>timbre.</em> This is where the synth starts messing around with harmonics.<br /></p>\n\n\n\n\n\n\n\n\n<p>A sine wave is just one single frequency, but all other sounds are made up of several frequencies that combine to form the dominant pitch that you hear. It’s why a C chord on the guitar sounds like a C even though E and G notes are also played. These are called harmonics; they aren’t heard as discrete pitches, but rather overtones that gives a sound its unique character or timbre.</p>\n\n\n\n\n\n\n\n\n<p>The filter section of a synthesizer modifies timbre by blocking certain frequencies in the waveform and letting others through. Turning the filter knob from top to bottom gives you this recognizable sound:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>The Moog synthesizer in particular is famous for its rich filter sounds (and even <a href=\"http://www.moogmusic.com/news/patent-no-3475623-moog-ladder-filter\">patented</a> one of them). You can actually hear that classic Moog analog filter in the <a href=\"https://soundcloud.com/lawrence-crenshaw/kanye-west-daft-punk-on-sight\">opening track of Kanye West’s Yeezus</a>, a track produced by Daft Punk:<br /></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4>Amplifier and Envelope Generator</h4>\n\n\n\n\n\n\n\n\n<p>Beyond speed, a synth can also manipulate the signal’s size, and here’s where the amplifier comes in. As you know the amp controls volume by making a signal bigger and thus louder. But it can also modify the amplitude of the signal <em>over time</em> — how quickly it reaches peak loudness, and how long it sustains that volume. Think about the difference between the staccato sound you get from banging a piano key versus the gradual lead-up of the sound of a violin string.</p>\n\n\n\n\n\n\n\n\n<p>This loudness contour can be controlled by a synth’s “envelope generator.” The most common is called ADSR, for attack (the onset of the sound), decay (when it starts to fade), sustain (how long the sound holds), and release (when it ends). Adjusting this contour can significantly change the character of a sound.</p>\n\n\n\n\n\n\n\n\n<h4>Modulation</h4>\n\n\n\n\n\n\n\n\n<p>There are <em>many</em> other modulators that further mess with these sonic properties. One standby is the<strong> low-frequency oscillator or LFO</strong>. It oscillates a signal at very low frequencies, lower than the ear can hear, so it’s not used to create sound but to modulate <em>other</em> parts of the synth for effects like a wah pedal. When applied to the oscillator, it wiggles the pitch to create <a href=\"https://en.wikipedia.org/wiki/File:Lfo-cutoff-frequency-ripple.ogg\">vibrato</a>. Applied to the amplitude makes the volume go up and down creating <a href=\"https://en.wikipedia.org/wiki/File:LFOtoVolume-Tremolo.ogg\">tremolo</a>. Appying it to the filter is how you get the signature dubstep <a href=\"https://en.wikipedia.org/wiki/File:Lfo-cutoff-frequency-wobble-bass.ogg\">wobble bass</a>:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>A <strong>ring modulator</strong> is another popular effect that works by combining two signal inputs to get brand new frequencies. It makes a wobbly metallic sound — the effect behind the classic eerie synth sound behind the <em>Doctor Who</em><a href=\"https://www.youtube.com/watch?v=v2oCK89xxNQ\"> soundtrack </a>and <a href=\"http://webaudio.prototyping.bbc.co.uk/ring-modulator/\">the voices of the Daleks</a>. <em><a href=\"http://open.spotify.com/track/6mrXIrATdygxl39P337sLj\">Exterminate</a></em>.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>The most common form of synthesis—the kind Dr. Moog pio is called <a href=\"http://synthesizeracademy.com/subtractive-synthesis/\">subtractive synthesis</a> — it starts with a harmonically rich waveform and filters out certain frequencies to carve out a sound. (Ali Jamieson’s blog post <a href=\"http://alijamieson.co.uk/2015/04/forgive-me-lord-for-i-have-synth-a-guide-to-subtractive-synthesis/\">“Forgive me Lord for I Have Synth”</a> is a great guide).</p>\n\n\n\n\n\n\n\n\n<p>But as synths advanced, they starting using other kinds of audio synthesis that could <em><a href=\"http://www.soundonsound.com/sos/jun00/articles/synthsec.htm\">add</a></em> or <a href=\"http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm\">multiply</a> waves together, and the range of possible sounds exploded. Synths got much better at mimicking traditional instruments including percussive sounds like bells and drums, which led to the eruption of dance music.</p>\n\n\n\n\n\n\n\n\n<p>Synths went from being a novelty effect used to spice up rock songs to the primary ingredient in a track, eventually replacing traditional instruments altogether. Let’s take a quick little tour through history.</p>\n\n\n\n\n\n\n\n\n<h2><strong><strong>Evolution of the Synth</strong></strong></h2>\n\n\n\n\n\n\n\n\n<p class=\"has-media media-large has-image\"><span class=\"lightBoxWrapper\"><span class=\"img-border\"><img src=\"http://i.kinja-img.com/gawker-media/image/upload/s--5SsDdT-8--/1485400206668292390.png\" width=\"800\" height=\"264\" alt=\"A Beginner\'s Guide to the Synth\" /></span><span class=\"magnifier lightBox hide\"><span class=\"icon icon-white icon-search-plus\"></span></span></span></p>\n\n\n\n\n\n\n\n\n<p><em><small>The legendary Yamaha DX7, the sound of plasticky 80s synthpop</small></em></p>\n\n\n\n\n\n\n\n\n<p>As the technology behind synths matured, it took popular culture right along with it. Think about the music that defined the last five centuries and you can basically hear the <a href=\"http://www.thevinylfactory.com/vinyl-factory-releases/the-14-synthesizers-that-shaped-modern-music/\">machine evolve</a>. Through the 70s and 80s, a new model design or the latest high-tech feature opened up the potential for sounds that had never been created before — you could build a song around these novel sounds (<a href=\"http://www.synthmania.com/Famous%20Sounds.htm\">Synthtopia has a fun list</a> of famous synth sounds). Some even spawned entire musical subgenres.</p>\n\n\n\n\n\n\n\n\n<p>The first synths were called modular synthesizers, because each component — oscillator, filter, etc — were separate modules that you had to manually connect by plugging wires (called patch cables) in and out of different parts of the machine. They were massive, cumbersome, and expensive as fuck, and mostly relegated to university sound labs.</p>\n\n\n\n\n\n\n\n\n<p>But some successful artists could afford to experiment with the cutting-edge machines, namely pop stars like the Monkees, on “<a href=\"https://www.youtube.com/watch?v=SCWRjWOowkc\">Daily Nightly”</a> in 1967; four tracks of the Beatles’ <em>Abbey Road</em> including<em> “</em><a href=\"https://www.youtube.com/watch?v=qpCV2wgoxC8\">Maxwell’s Silver Hammer</a>,” (0:58) and <a href=\"https://www.youtube.com/watch?v=Y6GNEEi7x4c\">“Here Comes The Sun”</a> (1:40); and prog rocker Keith Emerson who’s famous for dragging his massive modular onto the stage to show it off.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><small><em>Keith Emerson’s </em></small><em><small>1970 single “Lucky Man” is considered the first ever synth solo</small></em></p>\n\n\n\n\n\n\n\n\n<p>But the watershed moment for early modular synths was Donna Summer’s disco hit “I Feel Love,” produced in 1977 by Georgio Moroder, who as the <a href=\"http://www.theguardian.com/music/2010/aug/02/moog-synthesisers\">Guardian describes it</a> “pulled the voice of God from the void. Everything that isn’t the kick drum or Donna Summer are the big-brained dreams of a Moog modular.”</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>(I’d be remiss not to mention that while Moog mainstreamed the instrument, Don Buchla invented his modular synth at the same time on the West Coast, where the sound was more avant-garde.<em> <a href=\"https://www.youtube.com/watch?v=EelvKqhu1M4\">Silver Apples of the Moon</a></em>, composed by Morton Subotnick on the Buchla, was the first electronic music sold by a record company.)</p>\n\n\n\n\n\n\n\n\n<p>The synth <em>really</em> took off in the early 70s when the tech got more compact, and portable all-in-one synths like the Minimoog came out. These fancy new synths were internally hardwired—no messy patch chords—and musicians could take them on tour and play them on stage.</p>\n\n\n\n\n\n\n\n\n<p class=\"has-media media-small has-image\"><span class=\"lightBoxWrapper\"><span class=\"img-border\"><img src=\"http://i.kinja-img.com/gawker-media/image/upload/s--XzT6jaQ3--/1485400206749503782.jpg\" width=\"350\" height=\"261\" alt=\"A Beginner\'s Guide to the Synth\" /></span><span class=\"magnifier lightBox hide\"><span class=\"icon icon-white icon-search-plus\"></span></span></span></p>\n\n\n\n\n\n\n\n\n<p><em>Everyone</em> started incorporating synths into their music; you can hear it in 70s songs across genres: <a href=\"https://www.youtube.com/watch?v=w5lVUaLeD14\">pop</a>, <a href=\"https://www.youtube.com/watch?v=UbkqE4fpvdI\">funk</a>, <a href=\"https://www.youtube.com/watch?v=SYgVORvXGAs\">glam rock</a>, <a href=\"https://www.youtube.com/watch?v=y5sOzbD29GQ\">reggae</a>, <a href=\"https://www.youtube.com/watch?v=n3sT5Ucyw_0\">jazz</a>, <a href=\"https://www.youtube.com/watch?v=Ldyx3KHOFXw\">new wave</a> and most notoriously <a href=\"https://www.youtube.com/watch?v=--qa4oHG-S4\">prog rockers in sequenced capes</a>. “When you think of how an analogue synthesizer is supposed to sound, you’re probably thinking of a Minimoog,” <a href=\"http://www.thevinylfactory.com/vinyl-factory-releases/the-14-synthesizers-that-shaped-modern-music/\">The Vinyl Factory wrote</a>. “The thick, bassy throbs that have come to characterize the instrument over the last four-and-a-half decades.”</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>And electronic music became popular as its own genre. Pioneer synth composer <a href=\"http://www.amazon.com/Switched-On-Bach-Johann-Sebastian/dp/B00005ORCV?tag=kinja-20&amp;ascsubtag=%5Bb%7C20khz%5Bp%7C1736978695%5Ba%7CB00005ORCV%5Bau%7C1626442437\">Wendy Carlos’s record </a><em>Switched-on Bach</em> sold half a million copies and won three Grammys in 1968, and six years later, the German band Kraftwerk came out with <em>Autobahn, </em>the record generally credited with spawning electronic pop, and making machine music cool in its own right.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3>The Rise of Digital </h3>\n\n\n\n\n\n\n\n\n<p>At the very end of the 70s, <a href=\"https://www.soundonsound.com/sos/1997_articles/sep97/synthschool3.html\">digital synthesizers</a> came along and revolutionized music. Replacing circuits with algorithms meant you could program waveforms stacked together in any combination to recreate almost any sound. Synths got (relatively) good at emulating organic instruments, and suddenly you could press a button and get “piano” or “bass” without any traditional musical skill.</p>\n\n\n\n\n\n\n\n\n<p>And this is what the 80s sounded like.</p>\n\n\n\n\n\n\n\n\n<p>Artists increasingly relied on the <a href=\"http://www.synthmania.com/Famous%20Sounds.htm\">preset sounds</a> (also called “voices” or “patches” after the patch cables on modular synths) that came factory ready, which is why so many 80s pop songs sound the same — no one (except for Brian Eno, of course) bothered to program their own sounds from scratch.</p>\n\n\n\n\n\n\n\n\n<p>Those cheesy, plasticky <a href=\"http://www.synthmania.com/dx7.htm\">patches on the legendary Yamaha DX7</a> — the first commercially available, mass-produced digital synth — are <em>ubiquitous</em> in 80s synthpop ballads. You surely know the sound well:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>The Marimba patch was common in new wave — it’s the synthetic bass in A-Ha’s “Take on Me.” The flute, electric piano, and even harmonica solo on Tina Turner’s <a href=\"https://www.youtube.com/watch?v=oGpFcHTxjZs\">“What’s Love Got to Do With It”</a> are made with <a href=\"http://www.synthmania.com/dx7.htm\">DX7 patches</a>, a trifecta of cheese salvaged only by Turner’s incredible voice.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>The <a href=\"http://www.korg.com/us/products/software/korg_legacy_collection/page_4.php\">Korg M1</a> synth came out not long after the DX7 and sold millions. You can’t listen to 90s music without recognizing the <a href=\"http://www.synthmania.com/m1.htm\">M1’s iconic voices</a> — the slap bass voice in the <em>Seinfeld</em> theme, or the piano and organ presets that defined 90s house music, starting with Madonna’s “Vogue.”</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Speaking of dance, the genesis of acid house is a fun example of the effect the evolving synth had on music. The now-famous Roland TB-303, which was actually one of the last analog synths but had a simple intuitive sequencer great for four-on-the-floor beats, basically singlehandedly created the acid sound, on accident.</p>\n\n\n\n\n\n\n\n\n<p>The 303 was designed to replace the bass player in a rock band but was too unpredictable and hard to program (it didn’t come with directions) so it sucked at it and flopped, causing young producers in Chicago’s underground house scene to pick up the discounted secondhand synths and started messing around. The squrity squelchy bass sound that came out of the erratic 303s <em>was</em> the sound of acid house. (Fatboy Slim’s track <a href=\"https://www.youtube.com/watch?v=o6eIBE7Bo3U\">“Everybody Needs a 303”</a> wasn’t hyperbole.)<br /></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3>Analog Resurgence</h3>\n\n\n\n\n\n\n\n\n<p>But popular music follows a predictable cycle, always rebelling against the sound that came before it, causing a sonic 180. Just as punk almost killed synth music after disco (until new wave melded the punk ethos with the electronic sound), a backlash against the robotic plasticky homogenous sounds of 80s pop led to a trend toward “real” sounds in the mid-90s — most obviously with grunge, but also a return of analog synths, heard in ambient music pioneered by Brian Eno, and 90s electronica like Prodigy, Chemical Brothers, and Aphex Twin.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>The pendulum swung back again when the rise of super affordable software synths (“softsyths”) meant anyone with a laptop could be a producer or pump out EDM to dance floors at da club. And now, it’s swinging back <em>again. </em>Analog synths are <a href=\"http://www.soundonsound.com/sos/mar14/articles/spotlight-0314.htm\">back in vogue</a> — major brands like Moog, Roland, and Korg are capitalizing on nostalgia by putting out revivals of vintage icons (“vintage” in synthspeak is anything before the 90s) like the <a href=\"http://www.korg.com/us/news/2015/012103/\">ARP Odyssey</a> and <a href=\"http://20khz.gizmodo.com/mini-versions-of-classic-roland-synths-let-you-recaptur-1734254763\">Roland Jupiter 8</a>.</p>\n\n\n\n\n\n\n\n\n<p>Analog’s cool is only partly due to the sound — yeah, we tend to find the warm imperfection of analog machinery more pleasing than the robotic precision of digital technology. But today the are “analog modeling” digital synths that are good enough at mimicking the character of old-school imperfection the average ear probably can’t discern the origin of the sound.</p>\n\n\n\n\n\n\n\n\n<p>The backlash against push-button laptop jockeys may be less about sound and more about creativity—the lack of inspiration you tend to get when choosing from a infinite library of packaged sounds that soft synths and so-called <a href=\"http://electronicmusic.wikia.com/wiki/Rompler\">romplers</a> cram inside a virtual box. People like hardware that you can pick up and play like an instrument, and there’s an enthusiastic subculture of indie <a href=\"http://gizmodo.com/inside-the-small-brooklyn-studio-making-the-wackiest-sy-1692188992\">boutique manufacturers</a> designing unique and wacky hardware synths and modules.</p>\n\n\n\n\n\n\n\n\n<p class=\"has-media media-large has-image\"><span class=\"lightBoxWrapper\"><span class=\"img-border\"><img src=\"http://i.kinja-img.com/gawker-media/image/upload/s--MzyGRq2J--/c_scale,fl_progressive,q_80,w_800/1485400206857464870.png\" width=\"800\" height=\"478\" alt=\"A Beginner\'s Guide to the Synth\" /></span><span class=\"magnifier lightBox hide\"><span class=\"icon icon-white icon-search-plus\"></span></span></span></p>\n\n\n\n\n\n\n\n\n<p><small><em>A modular synth, via <a href=\"https://vimeo.com/119810764\">Richard Devine/Vimeo</a></em></small></p>\n\n\n\n\n\n\n\n\n<p>Modular synths are also undergoing an undeniable resurgence (which the excellent documentary <em><a href=\"http://www.idreamofwires.org/\">I Dream of Wires</a></em> describes in detail). Purists love modulars because it forces you to think about the aspects of sound and not rely on presets, opening up the possibility of serendipitous sonic discoveries. Moving a cable or adding a new module to your rig can change the entire sound of the machine — so the possibilities are quite literally infinite, limited “only by your imagination,” the mantra goes.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Growing consensus is that this pivot back to modular synthesizers isn’t nostalgia, but more that we never actually explored the full sonic potential of these walls of colorful wires and blinking lights in the first place — that we tossed them aside too soon to jump on the high-tech bandwagon. The next chapter in the evolution of the synth could be to go back where it started. Maybe the golden era of of synthetic sound is actually ahead of us.</p>\n\n\n\n\n\n\n\n\n<p>[Sources: <a href=\"http://synthesizeracademy.com/category/lessons/\">Synthesizer Academy</a> | <a href=\"http://moogfoundation.org/moog-a-history-in-recordings-by-thom-holmes-part-two/\">Moog Foundation</a> | <a href=\"https://www.youtube.com/watch?v=atvtBE6t48M\">Dean Friedman</a> | <a href=\"http://alijamieson.co.uk/2015/04/forgive-me-lord-for-i-have-synth-a-guide-to-subtractive-synthesis/\">Ali Jamieson</a> | <a href=\"http://www.thevinylfactory.com/vinyl-factory-releases/the-14-synthesizers-that-shaped-modern-music/\">The Vinyl Factory</a>; <a href=\"http://www.theguardian.com/music/series/hey-whats-that-sound\"> Guardian</a> | <a href=\"https://en.wikibooks.org/wiki/Sound_Synthesis_Theory/Subtractive_Synthesis\">Wikibooks</a> | <a href=\"http://www.synthmania.com/Famous%20Sounds.htm\">Synthmania</a> | <a href=\"http://www.factmag.com/2014/02/28/the-14-synthesizers-that-shaped-modern-music/2/\">FACT</a> |<a href=\"http://www.soundonsound.com/sos/allsynthsecrets.htm\"> Sound on Sound</a> | <a href=\"http://www.idreamofwires.org/\">I Dream of Wires</a>]</p>\n\n\n\n\n\n\n\n\n<p> <a href=\"http://20khz.gizmodo.com/\"><strong><em>20kHz</em></strong></a> <strong><em>is a new blog exploring how technology, science, and culture influence music and sound. </em></strong></p>\n\n\n\n\n\n\n\n\n<hr /><p><em>Top illustration by Sam Woolley</em><br /></p>',1),(179,'Nightwatch.js','http://nightwatchjs.org/',1,0,'\n      <div class=\"row\">\n      \n  \n      <div class=\"col-md-9\">\n        <div class=\"docs-section\">\n          \n      \n    <h3>What is Nightwatch?</h3>\n<p>Nightwatch.js is an automated testing framework for web applications and websites, written in <a href=\"http://nodejs.org/\">Node.js</a> and using the <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">Selenium WebDriver API</a>.</p>\n<p>It is a complete browser automation (<em>End-to-End</em>) solution which aims to simplify the process of setting up <strong>Continuous Integration</strong> and writing of automated tests.</p>\n<blockquote>\n<p>Nightwatch got its name from the famous painting <a href=\"http://en.wikipedia.org/wiki/The_Night_Watch\">The Night Watch</a> by Dutch painter <a href=\"http://en.wikipedia.org/wiki/Rembrandt_Harmenszoon_van_Rijn\">Rembrandt van Rijn</a>. The masterpiece is prominently displayed in the Rijksmuseum, in Amsterdam - The Netherlands.</p>\n</blockquote>\n\n    <h3>Overview of Selenium</h3>\n<p>Selenium is a very popular and comprehensive set of tools for browser automation, initially written for Java but now with support for most programming languages.</p>\n<p>Selenium\'s main projects are:</p>\n<p>Nightwatch uses the Selenium WebDriver, specifically the <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">WebDriver Wire Protocol</a> to perform the browser automation related tasks.</p>\n\n    <h3>Theory of Operation</h3>\n<p>Nightwatch works by sending HTTP requests to the Selenium server with the right parameters and interpreting the response. The restful API protocol is defined by the <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session\">Selenium JsonWireProtocol</a>. See below for an example workflow for browser initialization.</p>\n<p><img src=\"http://nightwatchjs.org/img/operation.png\" alt=\"Theory of Operation\" /></p>\n<p>Most of the times, Nightwatch needs to send at least 2 requests to the Selenium server in order to perform a command or assetion, the first one being the request to locate an element given a CSS selector (or Xpath expression) and the next to perform the actual command/assertion on the given element.</p>\n\n        </div>\n  \n  <div class=\"docs-section\">\n    \n\n    <h3>Install Node.js</h3>\n<p>From <a href=\"http://nodejs.org/\">nodejs.org</a>:</p>\n<blockquote>\n<p>\"Node.js is a platform built on Chrome\'s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.\"</p>\n</blockquote>\n<p>There are installation packages and instructions for most major Operating systems on its website <a href=\"http://nodejs.org/\">nodejs.org</a>. Remember to install also the <strong>npm</strong> tool, which is the node package manager and is distributed with the Node.js installer.</p>\n\n    <h3>Install Nightwatch</h3>\n<p>To install the latest version using the npm command line tool, run the following:</p>\n<pre><code class=\"language-bash\">$ npm install nightwatch</code></pre>\n\n<p>To make <code>nightwatch</code> runner available globally in your system, add the <strong><code>-g</code></strong> option after <code>npm install</code> and <code>sudo</code> if you\'re on Mac OS X / Linux or other Unix based OS.</p>\n\n    <h3>Running the Selenium Server</h3>\n<p>The Selenium WebDriver server is simply a Java servlet which runs separately on the machine with the browser you want to test.</p>\n<h4>Download Selenium</h4>\n<p>Download the latest version of the <code>selenium-server-standalone-{VERSION}.jar</code> file from the <a href=\"http://selenium-release.storage.googleapis.com/index.html\">Selenium downloads page</a> and place it on the computer with the browser you want to test.\nIn most cases this will be on your local machine and typically inside your project\'s source folder. </p>\n<p>A good practice is to create a separate subfolder (e.g. <code>bin</code>) and place it there as you might have to download other driver binaries if you want to test multiple browsers.  </p>\n<h4>Running Selenium Automatically</h4>\n<p>If the server is on the same machine where Nightwatch is running, it can be started/stopped directly by the <a href=\"http://nightwatchjs.org/#test-runner\">Nightwatch Test Runner</a>.</p>\n<h4>Running Selenium Manually</h4>\n<p>To run the selenium server manually, from the directory with the jar run the following:</p>\n<pre><code class=\"language-bash\">$ java -jar selenium-server-standalone-{VERSION}.jar</code></pre>\n\n<p>More info about running the Selenium server can be found here:<br /><a href=\"http://code.google.com/p/selenium/wiki/RemoteWebDriverServer\">http://code.google.com/p/selenium/wiki/RemoteWebDriverServer</a></p>\n<p>For viewing all the run-time options, run the previous command adding the <code>-help</code>:</p>\n<pre><code class=\"language-bash\">$ java -jar selenium-server-standalone-{VERSION}.jar -help</code></pre>\n    </div>\n\n  <div class=\"docs-section\">\n    \n    <p>The test runner expects a configuration file to be passed, using by default a <code>nightwatch.json</code> file from the current directory, if present. Let\'s create one in the project\'s root folder.</p>\n<p>The <code>nightwatch.json</code> file will look like this:</p>\n<pre><code class=\"language-javascript\">{\n  <strong>\"src_folders\"</strong> : [\"tests\"],\n  <strong>\"output_folder\"</strong> : \"reports\",\n  <strong>\"custom_commands_path\"</strong> : \"\",\n  <strong>\"custom_assertions_path\"</strong> : \"\",\n  <strong>\"page_objects_path\"</strong> : \"\",\n  <strong>\"globals_path\"</strong> : \"\",\n\n  <strong>\"selenium\"</strong> : {\n    \"start_process\" : false,\n    \"server_path\" : \"\",\n    \"log_path\" : \"\",\n    \"host\" : \"127.0.0.1\",\n    \"port\" : 4444,\n    \"cli_args\" : {\n      \"webdriver.chrome.driver\" : \"\",\n      \"webdriver.ie.driver\" : \"\"\n    }\n  },\n\n  <strong>\"test_settings\"</strong> : {\n    \"default\" : {\n      \"launch_url\" : \"http://localhost\",\n      \"selenium_port\"  : 4444,\n      \"selenium_host\"  : \"localhost\",\n      \"silent\": true,\n      \"screenshots\" : {\n        \"enabled\" : false,\n        \"path\" : \"\"\n      },\n      \"desiredCapabilities\": {\n        \"browserName\": \"firefox\",\n        \"javascriptEnabled\": true,\n        \"acceptSslCerts\": true\n      }\n    },\n\n    \"chrome\" : {\n      \"desiredCapabilities\": {\n        \"browserName\": \"chrome\",\n        \"javascriptEnabled\": true,\n        \"acceptSslCerts\": true\n      }\n    }\n  }\n}</code></pre>\n    <h3>Basic settings</h3>\n<table class=\"table table-bordered table-striped\"><thead><tr><th>Name</th>\n     <th>type</th>\n     <th>default</th>\n     <th>description</th>\n   </tr></thead><tbody><tr><td>src_folders</td>\n     <td>string|array</td>\n     <td>none</td>\n     <td>An array of folders (excluding subfolders) where the tests are located.</td>\n   </tr><tr><td>output_folder <br /><span class=\"optional\">Optional</span></td>\n     <td>string</td>\n     <td>tests_output</td>\n     <td>The location where the JUnit XML report files will be saved.</td>\n   </tr><tr><td>custom_commands_path <span class=\"optional\">Optional</span></td>\n     <td>string|array</td>\n     <td>none</td>\n     <td>Location(s) where custom commands will be loaded from.</td>\n   </tr><tr><td>custom_assertions_path <span class=\"optional\">Optional</span></td>\n     <td>string|array</td>\n     <td>none</td>\n     <td>Location(s) where custom assertions will be loaded from.</td>\n   </tr><tr><td>page_objects_path <br /><span class=\"optional\">Optional</span> <span class=\"optional\">since v6.0.1</span></td>\n    <td>string|array</td>\n    <td>none</td>\n    <td>Location(s) where page object files will be loaded from.</td>\n  </tr><tr><td>globals_path <br /><span class=\"optional\">Optional</span> <span class=\"optional\">since v0.4.8</span></td>\n     <td>string</td>\n     <td>none</td>\n     <td>Location of an external globals module which will be loaded and made available to the test as a property <code>globals</code> on the main client instance. <p>Globals can also be defined/overwritten inside a <code>test_settings</code> environment.</p></td>\n   </tr><tr><td>selenium <br /><span class=\"optional\">Optional</span></td>\n     <td>object</td>\n     <td></td>\n     <td>An object containing Selenium Server related configuration options. See below for details.</td>\n   </tr><tr><td>test_settings</td>\n     <td>object</td>\n     <td></td>\n     <td>This object contains all the test related options. See below for details.</td>\n   </tr><tr><td>live_output <br /><span class=\"optional\">Optional</span></td>\n     <td>boolean</td>\n     <td>false</td>\n     <td>Whether or not to buffer the output in case of parallel running. See below for details.</td>\n   </tr><tr><td>disable_colors <br /><span class=\"optional\">Optional</span></td>\n     <td>boolean</td>\n     <td>false</td>\n     <td>Controls whether or not to disable coloring of the cli output globally.</td>\n   </tr><tr><td>parallel_process_delay <br /><span class=\"optional\">Optional</span></td>\n     <td>integer</td>\n     <td>10</td>\n     <td>Specifies the delay(in milliseconds) between starting the child processes when running in parallel mode.</td>\n   </tr><tr><td>test_workers <br /><span class=\"optional\">Optional</span> <span class=\"optional\">since v0.7.0</span></td>\n     <td>boolean|object</td>\n     <td>false</td>\n     <td>Whether or not to run individual test files in parallel. If set to <code>true</code>, runs the tests in parallel and determines the number of workers automatically. <br />If set to an object, can specify specify the number of workers as <code>\"auto\"</code> or a <code>number</code>.\n       <p>Example: <code>\"test_workers\" : {\"enabled\" : true, \"workers\" : \"auto\"}</code></p></td>\n   </tr><tr><td>test_runner <br /><span class=\"optional\">Optional</span> <span class=\"optional\">since v0.8.0</span></td>\n    <td>string|object</td>\n    <td>\"default\"</td>\n    <td>Specifies which test runner to use when running the tests. Values can be either <code>default</code> (built in nightwatch runner) or <code>mocha</code>.<p>Example: <code>\"test_runner\" : {\"type\" : \"mocha\", \"options\" : {\"ui\" : \"tdd\"}}</code></p></td>\n    </tr></tbody></table><h3>Selenium settings</h3>\n<p>Below are a number of options for the selenium server process. Nightwatch can start and stop the Selenium process automatically which is very convenient as you don\'t have to manage this yourself and focus only on the tests.</p>\n<p>If you\'d like to enable this, set <code>start_process</code> to <code>true</code> and specify the location of the <code>jar</code> file inside <code>server_path</code>.</p>\n<table class=\"table table-bordered table-striped\"><thead><tr><th>Name</th>\n   <th>type</th>\n   <th>default</th>\n   <th>description</th>\n </tr></thead><tbody><tr><td>start_process</td>\n   <td>boolean</td>\n   <td>false</td>\n   <td>Whether or not to manage the selenium process automatically.</td>\n </tr><tr><td>start_session<br /><span class=\"optional\">since v0.6.1</span></td>\n  <td>boolean</td>\n  <td>true</td>\n  <td>Whether or not to automatically start the Selenium session.</td>\n </tr><tr><td>server_path</td>\n   <td>string</td>\n   <td>none</td>\n   <td>The location of the selenium <code>jar</code> file. This needs to be specified if <code>start_process</code> is enabled.<br />E.g.: <code>lib/selenium-server-standalone-2.43.0.jar</code></td>\n </tr><tr><td>log_path</td>\n   <td>string|boolean</td>\n   <td>none</td>\n   <td>The location where the selenium <code>output.log</code> file will be placed. Defaults to current directory.<br />To disable Selenium logging, set this to <code>false</code></td>\n </tr><tr><td>host</td>\n   <td>string</td>\n   <td>127.0.0.1</td>\n   <td>Usually not required and only used if <code>start_process</code> is <code>true</code>. Specify the IP address you wish Selenium to listen on.</td>\n </tr><tr><td>port</td>\n   <td>integer</td>\n   <td>4444</td>\n   <td>The port number Selenium will listen on.</td>\n </tr><tr><td>cli_args<br /><span class=\"optional\">since v0.5.1</span></td>\n   <td>object</td>\n   <td>none</td>\n   <td>List of cli arguments to be passed to the Selenium process. Here you can set various options for browser drivers, such as:<ul><li>\n         <code>webdriver.firefox.profile</code>: Selenium will be default create a new Firefox profile for each session. If you wish to use an existing Firefox profile you can specify its name here.<br />Complete list of Firefox Driver arguments available <a href=\"https://code.google.com/p/selenium/wiki/FirefoxDriver\">here</a>.\n       </li>\n       <li>\n         <code>webdriver.chrome.driver</code>: Nightwatch can run the tests using <strong>Chrome</strong> browser also. To enable this you have to download the <a href=\"http://chromedriver.storage.googleapis.com/index.html\">ChromeDriver binary</a> and specify it\'s location here.\n     Also don\'t forget to specify chrome as the browser name in the <code>desiredCapabilities</code> object.<br />More information can be found on the <a href=\"https://sites.google.com/a/chromium.org/chromedriver/\">ChromeDriver website</a>.<br /></li>\n       <li>\n         <code>webdriver.ie.driver</code>:\n         Nightwatch has support for <strong>Internet Explorer</strong> also. To enable this you have to download the <a href=\"https://code.google.com/p/selenium/wiki/InternetExplorerDriver\">IE Driver binary</a> and specify it\'s location here.\n     Also don\'t forget to specify \"internet explorer\" as the browser name in the <code>desiredCapabilities</code> object.\n       </li>\n     </ul></td>\n </tr></tbody></table><h3>Test settings</h3>\n<p>Below are a number of options that will be passed to the Nightwatch instance. You can specify multiple groups of options so you could have different values per environment:</p>\n<pre><code class=\"language-bash\">{\n  ...\n  <strong>\"test_settings\"</strong> : {\n    \"default\" : {\n      ...\n    },\n    \"integration\" : {\n      ...\n    }\n  }\n}</code></pre>\n\n<p class=\"alert alert-info\">A \"default\" environment is required. All the other environments are derived from default and their settings can be overridden as needed.</p>\n\n<p>The key of the settings group can be passed then to the runner as the <code>--env</code> argument to use the specified settings, like so:</p>\n<pre><code class=\"language-bash\">$ nightwatch --env integration</code></pre>\n\n<p>This can be useful if you need to have different settings for your local machine and the Continuous Integration server.</p>\n<table class=\"table table-bordered table-striped\"><thead><tr><th>Name</th>\n     <th>type</th>\n     <th>default</th>\n     <th>description</th>\n   </tr></thead><tbody><tr><td>launch_url</td>\n     <td>string</td>\n     <td>none</td>\n     <td>A url which can be used later in the tests as the main url to load. Can be useful if your tests will run on different environments, each one with a different url.</td>\n   </tr><tr><td>selenium_host</td>\n     <td>string</td>\n     <td>localhost</td>\n     <td>The hostname/IP on which the selenium server is accepting connections.</td>\n   </tr><tr><td>selenium_port</td>\n     <td>integer</td>\n     <td>4444</td>\n     <td>The port number on which the selenium server is accepting connections.</td>\n   </tr><tr><td>silent</td>\n     <td>boolean</td>\n     <td>true</td>\n     <td>Whether to show extended Selenium command logs.</td>\n   </tr><tr><td>output</td>\n     <td>boolean</td>\n     <td>true</td>\n     <td>Use to disable terminal output completely.</td>\n   </tr><tr><td>disable_colors<br /><span class=\"optional\">since v0.4.13</span></td>\n     <td>boolean</td>\n     <td>false</td>\n     <td>Use to disable colored output in the terminal.</td>\n   </tr><tr><td>firefox_profile<br /><span class=\"optional\">deprecated</span></td>\n     <td>string|boolean</td>\n     <td>none</td>\n     <td>\n       <i>This options has been deprecated in favor of the <code>cli_args</code> object on the <code>selenium</code> settings object.</i>\n     </td>\n   </tr><tr><td>chrome_driver<br /><span class=\"optional\">deprecated</span></td>\n     <td>string</td>\n     <td>none</td>\n     <td>\n       <i>This options has been deprecated in favor of the <code>cli_args</code> object on the <code>selenium</code> settings object.</i>\n     </td>\n   </tr><tr><td>ie_driver<br /><span class=\"optional\">deprecated</span></td>\n     <td>string</td>\n     <td>none</td>\n     <td>\n       <i>This options has been deprecated in favor of the <code>cli_args</code> object on the <code>selenium</code> settings object.</i>\n     </td>\n   </tr><tr><td>screenshots</td>\n     <td>object</td>\n     <td>none</td>\n     <td>Selenium generates screenshots when command errors occur. With <code>on_failure</code> set to true, also generates screenshots for failing or erroring tests. These are saved on the disk. <p>Since <code>v0.7.5</code> you can disable screenshots for command errors by setting <code>\"on_error\"</code> to <code>false</code>.\n    </p><p>Example:</p><p><code>\"screenshots\" : {<br />  \"enabled\" : true,<br />  \"on_failure\" : true,<br />  \"on_error\" : false,<br />  \"path\" : \"\"<br />}</code></p></td>\n   </tr><tr><td>username</td>\n     <td>string</td>\n     <td>none</td>\n     <td>In case the selenium server requires credentials this username will be used to compute the <code>Authorization</code> header. <p>The value can be also an environment variable, in which case it will look like this:<br /><code>\"username\" : \"${SAUCE_USERNAME}\"</code>\n     </p></td>\n   </tr><tr><td>access_key</td>\n     <td>string</td>\n     <td>none</td>\n     <td>This field will be used together with <code>username</code> to compute the <code>Authorization</code> header. <p>Like <code>username</code>, the value can be also an environment variable:<br /><code>\"access_key\" : \"${SAUCE_ACCESS_KEY}\"</code>\n     </p></td>\n   </tr><tr><td>proxy<br /><span class=\"optional\">since v0.8.6</span></td>\n     <td>string</td>\n     <td>none</td>\n     <td>Proxy requests to the selenium server. http, https, socks(v5), socks5, sock4, and pac are accepted. Uses <a href=\"https://github.com/TooTallNate/node-proxy-agent\">node-proxy-agent</a>.<p>Example: <code><a href=\"http://host\">http://user:pass@host:port</a></code></p></td>\n   </tr><tr><td>desiredCapabilities</td>\n     <td>object</td>\n     <td></td>\n     <td>An object which will be passed to the Selenium WebDriver when a new session will be created. You can specify browser name for instance along with other capabilities.\n       <br />Example:<p><code>\"desiredCapabilities\" : {<br />  \"browserName\" : \"firefox\", <br />  \"acceptSslCerts\" : true<br />}</code><br />You can view the complete list of capabilities <a href=\"https://code.google.com/p/selenium/wiki/DesiredCapabilities\">here</a>.\n     </p></td>\n   </tr><tr><td>globals<br /><span class=\"optional\">since v0.4.8</span></td>\n     <td>object</td>\n     <td></td>\n     <td>An object which will be made available within the test and can be overwritten per environment. Example:<p><code>\"globals\" : {<br />  \"myGlobal\" : \"some_global\"<br />}</code>\n     </p></td>\n   </tr><tr><td>exclude<br /><span class=\"optional\">since v0.4.9</span></td>\n     <td>array</td>\n     <td></td>\n     <td>An array of folders or file patterns to be skipped (relative to the main source folder).<br />Example:<p><code>\"exclude\" : [\"excluded-folder\"]</code><br />or:<br /><code>\"exclude\" : [\"test-folder/*-smoke.js\"]</code><br /></p></td>\n   </tr><tr><td>filter<br /><span class=\"optional\">since v0.5.1</span></td>\n     <td>string</td>\n     <td></td>\n     <td>Folder or file pattern to be used when loading the tests. Files that don\'t match this patter will be ignored.<br />Example:<p><code>\"filter\" : \"tests/*-smoke.js\"</code><br /></p></td>\n   </tr><tr><td>log_screenshot_data</td>\n      <td>boolean</td>\n      <td>false</td>\n      <td>Do not show the Base64 image data in the (verbose) log when taking screenshots.</td>\n   </tr><tr><td>use_xpath<br /><span class=\"optional\">since v0.5.1</span></td>\n     <td>boolean</td>\n     <td>false</td>\n     <td>Use xpath as the default locator strategy</td>\n   </tr><tr><td>cli_args<br /><span class=\"optional\">since v0.6.1</span></td>\n     <td>object</td>\n     <td>none</td>\n     <td>Same as Selenium settings <code>cli_args</code>. You can override the global <code>cli_args</code> on a per-environment basis.</td>\n   </tr><tr><td>end_session_on_fail<br /><span class=\"optional\">since v0.6.5</span></td>\n     <td>boolean</td>\n     <td>true</td>\n     <td>End the session automatically when the test is being terminated, usually after a failed assertion.</td>\n  </tr><tr><td>skip_testcases_on_fail<br /><span class=\"optional\">since v0.7.0</span></td>\n     <td>boolean</td>\n     <td>true</td>\n     <td>Skip the rest of testcases (if any) when one testcase fails..</td>\n  </tr></tbody></table></div>\n\n\n  <div class=\"docs-section\">\n    \n\n<h3>Writing Tests</h3>\n<p>Using the preferred CSS selector model to locate elements on a page, Nightwatch makes it very easy to write automated End-to-End tests.</p>\n<p>Create a separate folder for tests in your project, e.g.: <code>tests</code>. Each file inside it will be loaded as a test by the Nightwatch test runner. A basic test will look like this:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'Demo test Google\' : function (browser) {\n    browser\n      .url(\'<a href=\"http://www.google.com\">http://www.google.com</a>\')\n      .waitForElementVisible(\'body\', 1000)\n      .setValue(\'input[type=text]\', \'nightwatch\')\n      .waitForElementVisible(\'button[name=btnG]\', 1000)\n      .click(\'button[name=btnG]\')\n      .pause(1000)\n      .assert.containsText(\'#main\', \'Night Watch\')\n      .end();\n  }\n};</code></pre>\n</div>\n<p class=\"alert alert-warning\">\nRemember <strong>always</strong> to call the <code>.end()</code> method when you want to close your test, in order for the Selenium session to be properly closed.\n</p>\n\nA test can have multiple steps, if needed:\n\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'step one\' : function (browser) {\n    browser\n      .url(\'<a href=\"http://www.google.com\">http://www.google.com</a>\')\n      .waitForElementVisible(\'body\', 1000)\n      .setValue(\'input[type=text]\', \'nightwatch\')\n      .waitForElementVisible(\'button[name=btnG]\', 1000)\n  },\n\n  \'step two\' : function (browser) {\n    browser\n      .click(\'button[name=btnG]\')\n      .pause(1000)\n      .assert.containsText(\'#main\', \'Night Watch\')\n      .end();\n  }\n};</code></pre></div>\n\n<p>Tests can also be written in this format:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nthis.demoTestGoogle = function (browser) {\n  browser\n    .url(\'<a href=\"http://www.google.com\">http://www.google.com</a>\')\n    .waitForElementVisible(\'body\', 1000)\n    .setValue(\'input[type=text]\', \'nightwatch\')\n    .waitForElementVisible(\'button[name=btnG]\', 1000)\n    .click(\'button[name=btnG]\')\n    .pause(1000)\n    .assert.containsText(\'#main\', \'The Night Watch\')\n    .end();\n};</code></pre>\n</div>\n\n<h3>Using XPath selectors</h3>\n<p>Nightwatch supports xpath selectors also. To switch to xpath instead of css selectors as the locate strategy, in your test call the method <code>useXpath()</code>, as seen in the example below. To switch back to CSS, call <code>useCss()</code>.</p>\n<p>To always use xpath by default set the property <code>\"use_xpath\": true</code> in your test settings.</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nthis.demoTestGoogle = function (browser) {\n  browser\n    .useXpath() // every selector now must be xpath\n    .click(\"//tr[@data-recordid]/span[text()=\'Search Text\']\")\n    .useCss() // we\'re back to CSS now\n    .setValue(\'input[type=text]\', \'nightwatch\')\n};</code></pre>\n</div>\n<h3>BDD Expect Assertions</h3>\n<p>Nightwatch introduces starting with version <code>v0.7</code> a new BDD-style assertion library which greatly improves the flexibility as well as readability of the assertions.</p>\n<p>The <code>expect</code> assertions use a subset of the <code>Expect</code> api from the <a href=\"http://chaijs.com/api/bdd/\">Chai framework</a> and are available for elements only at this point. Here\'s an example:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'Demo test Google\' : function (client) {\n    client\n      .url(\'<a href=\"http://google.no\">http://google.no</a>\')\n      .pause(1000);\n\n    // expect element  to be present in 1000ms\n    client.expect.element(\'body\').to.be.present.before(1000);\n\n    // expect element &lt;#lst-ib&gt; to have css property \'display\'\n    client.expect.element(\'#lst-ib\').to.have.css(\'display\');\n\n    // expect element  to have attribute \'class\' which contains text \'vasq\'\n    client.expect.element(\'body\').to.have.attribute(\'class\').which.contains(\'vasq\');\n\n    // expect element &lt;#lst-ib&gt; to be an input tag\n    client.expect.element(\'#lst-ib\').to.be.an(\'input\');\n\n    // expect element &lt;#lst-ib&gt; to be visible\n    client.expect.element(\'#lst-ib\').to.be.visible;\n\n    client.end();\n  }\n};\n</code></pre>\n</div>\n\n<p><br />The <code>expect</code> interface provides a much more flexible and fluid language for defining assertions, significantly improved over the existing <code>assert</code> interface. The only downside is that it\'s not possible to chain assertions anymore and at this point custom message aren\'t yet supported.</p>\n<p><br />For a complete list of available <code>expect</code> assertions, refer to the <a href=\"http://nightwatchjs.org/api/#expect\">API docs</a>.</p>\n\n<h3>Using before[Each] and after[Each] hooks</h3>\n<p>Nightwatch provides the standard <code>before</code>/<code>after</code> and <code>beforeEach</code>/<code>afterEach</code> hooks to be used in the tests.</p>\n<p>The <code>before</code> and <code>after</code> will run before and after the execution of the test suite respectively, while <code>beforeEach</code> and <code>afterEach</code> are ran before and after each testcase (test step).</p>\n<p>All methods have the Nightwatch instance passed as argument.</p>\n<h4>Example:</h4>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  before : function(browser) {\n    console.log(\'Setting up...\');\n  },\n\n  after : function(browser) {\n    console.log(\'Closing down...\');\n  },\n\n  beforeEach : function(browser) {\n\n  },\n\n  afterEach : function(browser) {\n\n  },\n\n  \"step one\" : function (browser) {\n    browser\n     // ...\n  },\n\n  \"step two\" : function (browser) {\n    browser\n    // ...\n      .end();\n  }\n};</code></pre>\n</div>\n\n<p>In the example above the sequence of method calls will be as follows: <code>before(), beforeEach(), \"step one\", afterEach(), beforeEach(), \"step two\", afterEach(), after()</code></p>\n\n<h3>Asynchronous before[Each] and after[Each]</h3>\n<p>All the <code>before[Each]</code> and <code>after[Each]</code> methods can also perform asynchronous operations, in which case they will require the <code>callback</code> passed as the second argument.</p>\n<p>\nThe <code>done</code> function <strong>must be called</strong> as the last step when the async operation completes. Not calling it will hang the test runner.\n</p>\n\n<h4>Example with beforeEach &amp; afterEach:</h4>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  beforeEach: function(browser, done) {\n    // performing an async operation\n    setTimeout(function() {\n      // finished async duties\n      done();\n    }, 100);\n  },\n\n  afterEach: function(browser, done) {\n    // performing an async operation\n    setTimeout(function() {\n      // finished async duties\n      done();\n    }, 200);\n  }\n};</code></pre>\n</div>\n\n<h3>External Globals</h3>\n<p>In addition to having globals defined in your <code>nightwatch.json</code>, sometimes it\'s useful to have also an external globals file, specified in the <code>globals_path</code> property.</p>\n<p>You can overwrite globals per environment as needed. Say you have your tests running locally and also against a remote cloud selenium server. Most of the times you will need some different setting up.</p>\n<h4>Example:</h4>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'local-env\' : {\n    isLocal : true,\n  },\n\n  \'remote-env\' : {\n    isLocal : false\n  },\n\n  before: function(done) {\n    // run this only for the local-env\n    if (this.isLocal) {\n      // start the local server\n      App.startServer(function() {\n        // server listening\n        done();\n      });\n    } else {\n      done();\n    }\n  },\n\n  after: function(done) {\n    // run this only for the local-env\n    if (this.isLocal) {\n      // start the local server\n      App.stopServer(function() {\n        // shutting down\n        done();\n      });\n    } else {\n      done();\n    }\n  },\n\n  // This will be run before each test suite is started\n  beforeEach: function(browser, done) {\n    // getting the session info\n    browser.status(function(result) {\n      console.log(result.value);\n      done();\n    });\n  },\n\n  // This will be run after each test suite is finished\n  afterEach: function(browser, done) {\n    console.log(browser.currentTest);\n    done();\n  }\n};</code></pre>\n</div>\n\n<p>You can refer to the provided <a href=\"https://github.com/beatfactor/nightwatch/blob/master/examples/globalsModule.js\">globalsModule.js</a> for an example.</p>\n\n</div>\n\n<div class=\"docs-section\">\n  \n\n  <h3>Test Runner</h3>\n<p>Nightwatch includes a command-line test runner which makes it easy to run tests and generate useful output.</p>\n<h4>Example usage:</h4>\n<pre><code class=\"language-bash\">$ ./nightwatch --test tests/demotest.js</code></pre>\n\n<p>If you have installed <code>nightwatch</code> with<code>-g</code> (global) option you can skip this.</p>\n<p>To use the test runner in your project simply create a new file called <code>nightwatch</code> and add the following:</p>\n<h5>For Linux and MacOSX:</h5>\n<pre><code class=\"language-bash\">#!/usr/bin/env node\nrequire(\'nightwatch/bin/runner.js\');\n</code></pre>\n\n<p>Then set the permissions:</p>\n<pre><code class=\"language-bash\">$ chmod a+x nightwatch</code></pre>\n\n<h5>For Windows:</h5>\n<p>Name the file <code>nightwatch.js</code> and add the following line:</p>\n<pre><code class=\"language-bash\">require(\'nightwatch/bin/runner.js\');</code></pre>\n\n<p>Then run as follows:</p>\n<pre><code class=\"language-bash\">C:\\workspace\\project&gt; node nightwatch.js</code></pre>\n  <h3>Command-line Options</h3>\n<p>The test runner supports a number of run-time options to be passed at. To view all, run the following:</p>\n<pre><code class=\"language-bash\">$ ./nightwatch --help</code></pre>\n\n<div class=\"table-responsive\">\n\n<div class=\"table-responsive\">\n  <table class=\"table table-bordered table-striped\"><thead><tr><th>Name</th>\n       <th>Shortname</th>\n       <th>default</th>\n       <th>description</th>\n     </tr></thead><tbody><tr><td><code>--config</code></td>\n       <td><code>-c</code></td>\n       <td><code>./nightwatch.json</code></td>\n       <td>The location of the <code>nightwatch.json</code> file - the configuration file which the runner uses and which also includes the Selenium WebDriver options.</td>\n     </tr><tr><td><code>--output</code></td>\n       <td><code>-o</code></td>\n       <td><code>tests_output</code></td>\n       <td>The location where the JUnit XML reports will be saved.</td>\n     </tr><tr><td><code>--reporter</code></td>\n        <td><code>-r</code></td>\n        <td><code>junit</code></td>\n        <td>Name of a predefined reporter (e.g. junit) or path to a custom reporter file to use.</td>\n     </tr><tr><td><code>--env</code></td>\n       <td><code>-e</code></td>\n       <td><code>default</code></td>\n       <td>Which testing environment to use - defined in <code>nightwatch.json</code></td>\n     </tr><tr><td><code>--verbose</code></td>\n       <td><code></code></td>\n       <td></td>\n       <td>Shows extended selenium command logging during the session</td>\n     </tr><tr><td><code>--version</code></td>\n       <td><code>-v</code></td>\n       <td></td>\n       <td>Shows the version number</td>\n     </tr><tr><td><code>--test</code></td>\n       <td><code>-t</code></td>\n       <td></td>\n       <td>Runs only the specified test. By default it will attempt to run all tests in the folder and its subfolders.</td>\n     </tr><tr><td><code>--testcase</code></td>\n       <td></td>\n       <td></td>\n       <td>Used only together with <code>--test</code>. Runs the specified testcase from the current suite/module.</td>\n     </tr><tr><td><code>--group</code></td>\n       <td><code>-g</code></td>\n       <td></td>\n       <td>Runs only the specified group of tests (subfolder). Tests are grouped by being placed in the same subfolder.</td>\n     </tr><tr><td><code>--skipgroup</code></td>\n       <td><code>-s</code></td>\n       <td></td>\n       <td>Skip one or several (comma separated) group of tests.</td>\n     </tr><tr><td><code>--filter</code></td>\n       <td><code>-f</code></td>\n       <td></td>\n       <td>Specify a filter (glob expression) as the file name format to use when loading the test files.</td>\n     </tr><tr><td><code>--tag</code></td>\n       <td><code>-a</code></td>\n       <td></td>\n       <td>Filter test modules by tags. Only tests that have the specified tags will be loaded.</td>\n     </tr><tr><td><code>--skiptags</code></td>\n        <td></td>\n        <td></td>\n        <td>Skips tests that have the specified tag or tags (comma separated).</td>\n      </tr><tr><td><code>--retries</code></td>\n        <td></td>\n        <td></td>\n        <td>Retries failed or errored testcases up to the specified number of times. Retrying a testcase will also retry the <code>beforeEach</code> and <code>afterEach</code> hooks, if any.</td>\n      </tr><tr><td><code>--suiteRetries</code></td>\n       <td></td>\n       <td></td>\n       <td>Retries failed or errored testsuites (test modules) up to the specified number of times. Retrying a testsuite will also retry the <code>before</code> and <code>after</code> hooks (in addition to the global beforeEach and afterEach respectively), if any are defined on the testsuite.</td>\n     </tr></tbody></table></div>\n\n  <h3>Test Groups</h3>\n<p>Nightwatch makes it possible to organize your test scripts into groups and run them as needed. To group tests together just place them in the same sub-folder. The folder name is the name of the group.</p>\n<h4>Example:</h4>\n<pre>\nlib/\n  ├── selenium-server-standalone.jar\ncustom-commands/\n  ├── loginUser.js\n  ├── attachPicture.js\ntests/\n  ├── logingroup\n  |   ├── login_test.js\n  |   └── otherlogin_test.js\n  ├── addressbook\n  |   ├── addressbook_test.js\n  |   └── contact_test.js\n  ├── chat\n  |   ├── chatwindow_test.js\n  |   ├── chatmessage_test.js\n  |   └── otherchat_test.js\n  └── smoketests\n      ├── smoke_test.js\n      └── othersmoke_test.js\n</pre>\n\n<p>To run only the <code>smoketests</code> group you would do the following:</p>\n<pre><code class=\"language-bash\">$ nightwatch --group smoketests</code></pre>\n\n<p>Also, if you would want to skip running the <code>smoketests</code> group you would do the following:</p>\n<pre><code class=\"language-bash\">$ nightwatch --skipgroup smoketests</code></pre>\n\n<p>To skip multiple groups, just add them as comma-separated:</p>\n<pre><code class=\"language-bash\">$ nightwatch --skipgroup addressbook,chat</code></pre>\n  <h3>Test Tags</h3>\n<p>You can also selectively target tests to run based on tags, such that a test may be belong to multiple tags. For example, you might have a login test that belongs to a login suite as well as a sanity suite.</p>\n<p>The tagging can be accomplished by adding the <code>@tags</code> property to a test module:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'@tags\': [\'login\', \'sanity\'],\n  \'demo login test\': function (client) {\n     // test code\n  }\n};</code></pre>\n</div>\n\n<p>To select which tags to run, use the <code>--tag</code> command line flag:</p>\n<pre><code class=\"language-bash\">$ nightwatch --tag login</code></pre>\n\n<p>Specify multiple tags as:</p>\n<pre><code class=\"language-bash\">$ nightwatch --tag login --tag something_else</code></pre>\n\n<p><br />To skip running tests with a specific tag, use the <code>--skiptags</code> flag:</p>\n<pre><code class=\"language-bash\">$ nightwatch --skiptags login</code></pre>\n\n<p>Or to skip multiple tags, add each tag you want to skip as comma-separated:</p>\n<pre><code class=\"language-bash\">$ nightwatch --skiptags login,something_else</code></pre>\n\n  <h3>Disabling Tests</h3>\n<p>To prevent a test module from running, simply set the <code>disabled</code> attribute in that module to <code>true</code>, like so:</p>\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'@disabled\': true, // This will prevent the test module from running.\n\n  \'sample test\': function (client) {\n    // test code\n  }\n};\n</code></pre>\n\n<p>This can be useful if you don\'t want to run certain tests that are known to be failing.</p>\n\n  <h3>Parallel Running</h3>\n<p>Starting with <code>v0.5</code> Nightwatch supports the tests to be run in parallel. This works by specifying multiple environments in the command line, separated by comma. E.g.:</p>\n<pre><code class=\"language-bash\">$ nightwatch -e default,chrome</code></pre>\n\n<p>The above will run two environments named <code>default</code> and <code>chrome</code> in parallel.</p>\n<h4>Terminal Output</h4>\n<p>Each environment will be run as a separate <a href=\"http://nodejs.org/api/child_process.html\"><code>child_process</code></a> and the output will be sent to the main process.</p>\n<p>To make the output easier to read, Nightwatch by default buffers the output from each child process and displays everything at the end, grouped by environment.</p>\n<p>\n  If you\'d like to disable the output buffering and see the output from each child process as it is sent to stdout, simply set the property <code>\"live_output\" : true</code> on the top level in your <code>nightwatch.json</code> (e.g. after <code>selenium</code>).\n</p>\n\n<p>\n  You can create a separate environment per browser (by chaining <code>desiredCapabilities</code>) and then run them in parallel. In addition, using the <code>filter</code> and <code>exclude</code> options tests can be split per environment in order to be ran in parallel.\n</p>\n\n<h4>Via Workers</h4>\n<p>Version <code>v0.7</code> introduces a new feature which allows the tests to be run in parallel. When this is enabled the test runner will launch a configurable number of child processes and then distribute the loaded tests over to be ran in parallel.</p>\n<p>To enable test workers, set the <code>test_workers</code> top-level property, like so:</p>\n<pre><code class=\"language-javascript\">\n\"test_workers\": {\n  \"enabled\": true,\n  \"workers\": \"auto\"\n}   \n</code></pre>\n\n<p>or, simply:</p>\n<pre><code class=\"language-javascript\">\n\"test_workers\": true \n</code></pre>\n<br />The <code>workers</code> option configures how many child processes can run concurrently.\n<ul><li><code>\"auto\"</code> - determined by number of CPUs e.g. 4 CPUs means 4 workers</li>\n<li><code>{number}</code> - specifies an exact number of workers</li>\n</ul><p>Test concurrency is done at the file level. Each test file will fill a test worker slot. Individual tests/steps in a test file will not run concurrently.</p>\n<p>\nCurrently test output is not aggregated and may be difficult to follow; this feature would be most useful in a CI environment where stdout matters less. Another limitation is this feature won\'t work as desired when using Nightwatch for running unit tests.<br /></p>\n  <h3>Using Grunt</h3>\n<p><a href=\"http://gruntjs.com/\">Grunt</a> is a popular JavaScript task runner. Starting with version <code>0.6</code> Nightwatch is bundled with \nan easy to use Grunt task which can be used in your existing Grunt-based build configuration for running the tests.</p>\n<h4>Usage</h4>\n<p>First, load the Nightwatch grunt task at the top in your <code>Gruntfile.js</code>. </p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = function(grunt) {\n  var nightwatch = require(\'nightwatch\');\n  nightwatch.initGrunt(grunt);\n\n  // ...\n\n};\n</code></pre>\n</div>\n\n<h4>Task Configuration and Targets</h4>\n<p>The Nightwatch task will have one more more targets which can be used in various ways, one way being to map them to environments. Available settings are:</p>\n<ul><li><code>options</code> - the only available option so far is <code>cwd</code> - current working directory</li>\n<li><code>argv</code> - command-line arguments that would normally be passed to the Nightwatch runner (e.g.: <code>env</code>);</li>\n<li><code>settings</code> - the test settings specified to a single Nightwatch environment.</li>\n</ul><h4>Example</h4>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\ngrunt.initConfig({\n  nightwatch: {\n    options: {\n      cwd: \'./\'\n    },\n\n    \'default\' : {},\n\n    browserstack: {\n      argv: {\n        env: \'browserstack\'\n      },\n      settings: {\n        silent: true\n      }\n    },\n\n    \'all\' : {\n      argv: {\n        env: \'default,browserstack\'\n      }\n    },\n  }\n});\n</code></pre>\n</div>\n\n\n<p>Run the task as follows:</p>\n<pre><code class=\"language-bash\">$ grunt nightwatch:default</code></pre> \nor \n\n<pre><code class=\"language-bash\">$ grunt nightwatch:browserstack</code></pre>\n\n\n<p>There are also a few third-party Grunt plugins for Nightwatch which can be used instead, if you prefer. The most popular one is <a href=\"https://github.com/gextech/grunt-nightwatch\">grunt-nightwatch</a>. </p>\n\n  <h3>Using Mocha</h3>\n<p>Starting with version <code>0.8</code> Nightwatch is bundled with a custom version of the popular Mocha test runner which allows running tests using Mocha, thus<br />taking advantage of its interfaces and reporters.</p>\n<h4>Usage</h4>\n<p>There are two main ways in which you can use Mocha with Nightwatch. </p>\n<h4>From Nightwatch</h4>\n<p>Mocha is used as an alternative test runner to the built-in one. This is done by specifying the <code>\"test_runner\"</code> option in the <code>nightwatch.json</code> configuration file.</p>\n<p>Custom options can also be specified for Mocha:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\n{\n  ...\n  \"test_runner\" : {\n    \"type\" : \"mocha\",\n    \"options\" : {\n      \"ui\" : \"tdd\",\n      \"reporter\" : \"list\"\n    }\n  }\n  ...\n}\n</code></pre>\n</div>\n\n<p>or simply:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\n{\n  ...\n  \"test_runner\" : \"mocha\"\n  ...\n}\n</code></pre>\n</div>\n\n<p>A complete list of Mocha options that are supported can be found <a href=\"https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically#set-options\">here</a>.</p>\n<p>The <code>test_runner</code> option can also be specified at test environment level:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\n{\n  \"test_settings\" : {\n    \"mocha_tests\" : {\n      \"test_runner\" : {\n        \"type\" : \"mocha\",\n        \"options\" : {\n          \"ui\" : \"tdd\",\n          \"reporter\" : \"list\"\n        }\n      }\n    }\n  }\n  ...\n}\n</code></pre>\n</div>\n\n<h4>Example</h4>\n<p>Writing a test in Mocha is the same as writing it in Nightwatch. Each testcase receives the <code>client</code> object, <code>hooks</code> also receiving a <code>done</code> callback for async operations. </p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\ndescribe(\'Google demo test for Mocha\', function() {\n\n  describe(\'with Nightwatch\', function() {\n\n    before(function(client, done) {\n      done();\n    });\n\n    after(function(client, done) {\n      client.end(function() {\n        done();\n      });\n    });\n\n    afterEach(function(client, done) {\n      done();\n    });\n\n    beforeEach(function(client, done) {\n      done();\n    });\n\n    it(\'uses BDD to run the Google simple test\', function(client) {\n      client\n        .url(\'<a href=\"http://google.com\">http://google.com</a>\')\n        .expect.element(\'body\').to.be.present.before(1000);\n\n      client.setValue(\'input[type=text]\', [\'nightwatch\', client.Keys.ENTER])\n        .pause(1000)\n        .assert.containsText(\'#main\', \'Night Watch\');\n    });\n  });\n});\n</code></pre>\n</div>\n\n<p class=\"alert alert-warning\">When using the mocha test runner from Nightwatch some cli options are not available, like <code>--retries</code>, <code>--suiteRetries</code>, <code>--reporter</code>.</p>\n\n<h4>Using the standard Mocha</h4>\n<p>Running Nightwatch tests with the standard Mocha it\'s also possible, though a bit more boilerplate code is involved and you need to manage the selenium server.</p>\n<h4>Example</h4>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nvar nightwatch = require(\'nightwatch\');\n\ndescribe(\'Github\', function() {\n  var client = nightwatch.initClient({\n    silent : true\n  });\n\n  var browser = client.api();\n\n  this.timeout(99999999);\n\n  before(function() {\n\n    browser.perform(function() {\n      console.log(\'beforeAll\')\n    });\n\n  });\n\n  beforeEach(function(done) {\n    browser.perform(function() {\n      console.log(\'beforeEach\')\n    });\n\n    client.start(done);\n  });\n\n\n  it(\'Demo test GitHub\', function (done) {\n    browser\n      .url(\'<a href=\"https://github.com/nightwatchjs/nightwatch\">https://github.com/nightwatchjs/nightwatch</a>\')\n      .waitForElementVisible(\'body\', 5000)\n      .assert.title(\'nightwatchjs/nightwatch · GitHub\')\n      .waitForElementVisible(\'body\', 1000)\n      .assert.visible(\'.container .breadcrumb a span\')\n      .assert.containsText(\'.container .breadcrumb a span\', \'nightwatch\', \'Checking project title is set to nightwatch\');\n\n    client.start(done);\n  });\n\n  afterEach(function() {\n    browser.perform(function() {\n      console.log(\'afterEach\')\n    });\n  });\n\n  after(function(done) {\n    browser.end(function() {\n      console.log(\'afterAll\')\n    });\n\n    client.start(done);\n  });\n\n});\n\n</code></pre>\n</div>\n</div>\n\n<div class=\"docs-section\">\n  \n\n  <h3>Using Page Objects</h3>\n<p>The Page Objects methodology is a popular pattern to write end-to-end tests by wrapping the pages or page fragments of a web app into objects.\nThe purpose of a page object is to allow a software client to do anything and see anything that a human can by abstracting away the underlying html actions needed to access and manipulate the page.</p>\n<p>A comprehensive introduction to Page Objects can be found in <a href=\"http://martinfowler.com/bliki/PageObject.html\">this article</a>.</p>\n<p>\nAs of version <code>0.7</code> Nightwatch provides an enhanced and more powerful interface for creating page objects, significantly improved over the previous support. Page objects created prior to <code>v0.7</code> will still continue to work however we recommend upgrading to the new version.\n</p>\n\n\n<h4>Configuring Page Objects</h4>\n<p>To create a page object simply create an object with properties that describe the page. Each page object should be located in a separate file, located in a designated folder. Nightwatch reads the page objects from the folder (or folders) specified in the <code>page_objects_path</code> configuration property.</p>\n<p>The <code>page_objects_path</code> property can also be an array of folders, allowing you thus to logically split the page objects into smaller groups.</p>\n<h4>The Url property</h4>\n<p>You can optionally add a <code>url</code> property that designates the page\'s URL. To navigate to the page, you can call the <code>navigate</code> method on the page object.</p>\n<p>The URL will usually be defined as a string:</p>\n\n\n<p>It can also be a function in case the URL is dynamic. One use case for this is to support different test environments. You can create a function that gets called in the context of the page, thus allowing you to do:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  url: function() { \n    return this.api.launchUrl + \'/login\'; \n  }\n};\n</code></pre>\n</div>\n\n\n  <h3>Defining Elements</h3>\n<p>Most of the time, you will want to define elements on your page that your tests will interact with through commands and assertions. This is made simple using the <code>elements</code> property so that all your elements are defined in a single place. Especially in larger integration tests, using <code>elements</code> will go a long way to keep test code DRY.</p>\n<p>Switching between css and xpath locate strategies is handled internally so you don\'t need to call <code>useXpath</code> and <code>useCss</code> in your tests. The default <code>locateStrategy</code> is css but you can also specify xpath:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  elements: {\n    searchBar: { \n      selector: \'input[type=text]\' \n    },\n    submit: { \n      selector: \'//[@name=\"q\"]\', \n      locateStrategy: \'xpath\' \n    }\n  }\n};\n</code></pre>\n</div>\n\n<p><br />Or if you\'re creating elements with the same locate strategy as is default, you can use the shorthand:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  elements: {\n    searchBar: \'input[type=text]\'\n  }\n};\n</code></pre>\n</div>\n\n<p><br />Using the <code>elements</code> property allows you to refer to the element by its name with an <em>\"@\" prefix</em>, rather than selector, when calling element commands and assertions (<code>click</code>, etc).</p>\n<p>Putting <code>elements</code> and <code>url</code> together, say you have the following defined above saved as a <code>google.js</code> file:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  url: \'<a href=\"http://google.com\">http://google.com</a>\',\n  elements: {\n    searchBar: { \n      selector: \'input[type=text]\' \n    },\n    submit: { \n      selector: \'//[@name=\"q\"]\', \n      locateStrategy: \'xpath\' \n    }\n  }\n};\n</code></pre>\n</div>\n\n<p><br />In your tests you will use it as follows:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'Test\': function (client) {\n    var google = client.page.google();\n\n    google.navigate()\n      .assert.title(\'Google\')\n      .assert.visible(\'@searchBar\')\n      .setValue(\'@searchBar\', \'nightwatch\')\n      .click(\'@submit\');\n\n    client.end();\n  }\n};\n</code></pre>\n</div>\n  <h3>Defining Sections</h3>\n<p>Sometimes it is useful to define sections of a page. Sections do 2 things:</p>\n<ul><li>Provide a level of namespacing under the page</li>\n<li>Provide element-level nesting so that any element defined within a section is a descendant of its parent section in the DOM</li>\n</ul><p>You can create sections using the <code>sections</code> property:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  sections: {\n    menu: {\n      selector: \'#gb\',\n      elements: {\n        mail: { \n          selector: \'a[href<em>=\"mail\"]\'\n        },\n        images: {\n          selector: \'a[href</em>=\"imghp\"]\'\n        }\n      }\n    }\n  }\n};\n</code></pre>\n</div>\n\n<p><br />Your tests would use it as follows:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'Test\': function (client) {\n    var google = client.page.google();\n    google.expect.section(\'@menu\').to.be.visible;\n\n    var menuSection = google.section.menu;\n    menuSection.expect.element(\'@mail\').to.be.visible;\n    menuSection.expect.element(\'@images\').to.be.visible;\n\n    menuSection.click(\'@mail\');\n\n    client.end();\n  }\n};\n</code></pre>\n</div>\n\n\n<p>\nNote that every command and assertion on a section (other than <code>expect</code> assertions) returns that section for chaining. If desired, you can nest sections under other sections for complex DOM structures.\n</p>\n\n  <h3>Writing Commands</h3>\n<p>You can add commands to your page object using the <code>commands</code> property. This is a useful way to encapsulate logic about the page that would otherwise live in a test, or multiple tests.</p>\n<p>Nightwatch will call the command on the context of the page or section. Client commands like <code>pause</code> are available via <code>this.api</code>. For chaining, each function should return the page object or section.</p>\n<p>In this case, a command is used to encapsulate logic for clicking the submit button:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nvar googleCommands = {\n  submit: function() {\n    this.api.pause(1000);\n    return this.waitForElementVisible(\'@submitButton\', 1000)\n      .click(\'@submitButton\')\n      .waitForElementNotPresent(\'@submitButton\');\n  }\n};\n\nmodule.exports = {\n  commands: [googleCommands],\n  elements: {\n    searchBar: {\n      selector: \'input[type=text]\'\n    },\n    submitButton: {\n      selector: \'button[name=btnG]\'\n    }\n  }\n};\n</code></pre>\n</div>\n\n<p><br />Then the test is simply:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'Test\': function (client) {\n    var google = client.page.google();\n    google.setValue(\'@searchBar\', \'nightwatch\')\n      .submit();\n\n    client.end();\n  }\n};\n</code></pre>\n</div>\n\n</div>\n\n<div class=\"docs-section\">\n  \n<h3>Writing Custom Commands</h3>\n<p>Most of the time you will need to extend the Nightwatch commands to suit your own application needs. Doing that is only a matter of creating a separate folder and defining your commands in that folder, each one inside its own file.</p>\n<p>Then specify the path to that folder inside the <code>nightwatch.json</code> file, as the <code>custom_commands_path</code> property. The command name is the name of the file itself, and it needs to follow the following pattern:</p>\n<div class=\"sample-test\">\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\nexports.command = function(file, callback) {\n  var self = this, imageData, fs = require(\'fs\');\n\n  try {\n    var originalData = fs.readFileSync(file);\n    var base64Image = new Buffer(originalData, \'binary\')\n      .toString(\'base64\');\n    imageData = \'data:image/jpeg;base64,\' + base64Image;\n  } catch (err) {\n    console.log(err);\n    throw \"Unable to open file: \" + file;\n  }\n\n  this.execute(\n    function(data) { // execute application specific code\n      App.resizePicture(data);\n      return true;\n    },\n\n    [imageData], // arguments array to be passed\n\n    function(result) {\n      if (typeof callback === \"function\") {\n        callback.call(self, result);\n      }\n    }\n  );\n\n  return this; // allows the command to be chained.\n};\n</code>\n</pre>\n</div>\n\n<p>The example below defines a command (e.g. resizePicture.js) which loads an image file as <code>data-URI</code> and calls a method named <code>resizePicture</code> defined inside the application.</p>\n<p>With this command, the test will look something like:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \"testing resize picture\" : function (browser) {\n    browser\n      .url(\"<a href=\"http://app.host\">http://app.host</a>\")\n      .waitForElementVisible(\"body\")\n      .resizePicture(\"/var/www/pics/moon.jpg\")\n      .assert.element(\".container .picture-large\")\n      .end();\n  }\n};</code></pre>\n</div>\n<h3>Writing Custom Assertions</h3>\n<p>Nightwatch allows you to even define your own assertions, extending the available <code>.assert</code> and <code>.verify</code> namespaces.</p>\n<p>Beginning with v0.4 assertions have a very simple interface which is shared between built-in assertions and custom ones. Therefore, custom assertions must implement the following interface:</p>\n<div class=\"sample-test\">\n\n<pre><code class=\"language-javascript\">\nexports.assertion = function() {\n\n  /**\n   * The message which will be used in the test output and\n   * inside the XML reports\n   * @type {string}\n   */\n  this.message;\n\n  /**\n   * A value to perform the assertion on. If a function is\n   * defined, its result will be used.\n   * @type {function|*}\n   */\n  this.expected;\n\n  /**\n   * The method which performs the actual assertion. It is\n   * called with the result of the value method as the argument.\n   * @type {function}\n   */\n  this.pass = function(value) {\n\n  };\n\n  /**\n   * The method which returns the value to be used on the\n   * assertion. It is called with the result of the command\'s\n   * callback as argument.\n   * @type {function}\n   */\n  this.value = function(result) {\n\n  };\n\n  /**\n   * Performs a protocol command/action and its result is\n   * passed to the value method via the callback argument.\n   * @type {function}\n   */\n  this.command = function(callback) {\n\n    return this;\n  };\n\n};</code></pre>\n\n</div>\n\n<p class=\"alert alert-success\">Both custom assertions and custom commands inherit from <a href=\"http://nodejs.org/api/events.html\">EventEmitter</a> if defined in the form above.<br />If, however, your command/assertion is defined in the constructor style, then you must inherit manually, similarly to the <a href=\"https://github.com/beatfactor/nightwatch/blob/master/lib/api/client-commands/pause.js\">pause command</a>.</p>\n\n<p class=\"alert alert-info\">To see some examples, check the assertions module source-code on Github:<br /><a href=\"https://github.com/beatfactor/nightwatch/tree/master/lib/api/assertions\">/nightwatch/tree/master/lib/selenium/assertions</a></p>\n\n<h3>Custom Reporter</h3>\n<p>If you\'d like to define your own reporter in addition to the built-in ones (stdout and junit-xml) you can do so in two ways:</p>\n<h4>The <code>--reporter</code> command-line argument</h4>\n<h5>Interface:</h5>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  write : function(results, options, done) {\n    done();\n  }\n};</code></pre>\n</div>\n\n<h4>The <code>reporter</code> method in your external <code>globals</code> file.</h4>\n<p>See the provided <a href=\"https://github.com/beatfactor/nightwatch/blob/master/examples/globalsModule.js\">globalsModule.js</a> for an example.</p>\n<h4>Example:</h4>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  reporter : function(results, done) {\n    console.log(results);\n    done();\n  }\n};</code></pre>\n</div>\n\n</div>\n\n<div class=\"docs-section\">\n  \n\n  <h3>Writing Unit Tests</h3>\n<p>Since version <code>0.6</code> it\'s possible to also write unit or integration tests in Nightwatch for Node.js applications and APIs. \nThis concept is still very new to Nightwatch so bear in mind this feature is not yet as stable or as feature-rich as a mature unit testing framework.</p>\n<h4>Disabling automatic selenium session</h4>\n<p>Nightwatch automatically attempts to connect to the specified selenium server and create a session. \nWhen running unit tests this needs to be disabled by setting the <code>start_session</code> property to <code>false</code> inside the <code>selenium</code> settings group either on the root level or inside a specific environment.</p>\n<h4>Assertion framework</h4>\n<p>The <code>client</code> object bundles the <a href=\"https://nodejs.org/api/assert.html\">Node.js Assert</a> module, same way as for end-to-end testing.\nCustom commands and assertions are also loaded and made available, together with globals.</p>\n<h4>Example</h4>\n<p>Below there\'s a unit test for the <code>utils.js</code> Nightwatch module:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nvar Utils = require(\'lib/util/utils.js\');\nmodule.exports = {\n  testFormatElapsedTime : function(client) {\n    var test = client.assert;\n\n    var resultMs = Utils.formatElapsedTime(999);\n    var resultSec = Utils.formatElapsedTime(1999);\n    var resultMin = Utils.formatElapsedTime(122299, true);\n\n    test.equal(resultMs, \'999ms\');\n    test.equal(resultSec, \'1.999s\');\n    test.equal(resultMin, \'2m 2s / 122299ms\');\n  },\n\n  testMakeFnAsync : function(client) {\n    function asynFn(done) {\n      done();\n    }\n\n    function syncFn() {}\n\n    var test = client.assert;\n\n    test.equal(Utils.makeFnAsync(1, asynFn), asynFn);\n\n    var convertedFn = Utils.makeFnAsync(1, syncFn);\n    convertedFn(function() {\n      test.ok(\'converted fn called\');\n    });\n  }\n};\n</code></pre>\n</div>\n\n  <h3>Asynchronous Unit Tests</h3>\n<p>The second argument to a test function, if provided, is the <code>done</code> callback which signals the test is complete.\nIf present, the callback must be called when the async operation finishes.</p>\n<h4>Example</h4>\n<p>Below there\'s a unit test for the <code>utils.js</code> Nightwatch module:</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n  \'demo UnitTest\' : function (client, done) {\n    client.assert.ok(\'TEST\');\n\n    setTimeout(function() {\n      done();\n    }, 500);\n  }\n};\n</code></pre>\n</div>\n  <h3>Using Third-party Assertion Frameworks</h3>\n<p>It\'s also possible to use a third-party assertion framework for writing tests. The example below uses <a href=\"http://chaijs.com/\">Chai</a>.</p>\n<div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nvar Utils = require(\'lib/util/utils.js\');\nvar expect = require(\'chai\').expect;\n\nmodule.exports = {\n  testFormatElapsedTime : function(client) {\n    var resultMs = Utils.formatElapsedTime(999);\n    var resultSec = Utils.formatElapsedTime(1999);\n    var resultMin = Utils.formatElapsedTime(122299, true);\n\n    expect(resultMs).to.equal(\'999ms\');\n    expect(resultSec).to.equal(\'1.999s\');\n    expect(resultMin).to.equal(\'2m 2s / 122299ms\');\n  }\n};\n</code></pre>\n</div>\n  <h3>Using a Combined Configuration</h3>\n<p>Below it\'s an example of how you can combine end-to-end tests and unit tests in the same <code>nightwatch.json</code> configuration file.\nNotice the usage of <code>exclude</code> and <code>filter</code> properties.</p>\n<p>An empty <code>exclude</code> means we want to reset its value and rely only on <code>filter</code>.</p>\n<pre><code class=\"language-javascript\">{\n  <strong>\"src_folders\"</strong> : [\"./examples/tests\", \"./examples/unittests\"],\n  <strong>\"output_folder\"</strong> : \"./examples/reports\",\n\n  <strong>\"selenium\"</strong> : {\n    \"start_process\" : true,\n    \"server_path\" : \"./bin/selenium-server-standalone.jar\",\n    \"log_path\" : \"\",\n    \"host\" : \"127.0.0.1\",\n    \"port\" : 4444,\n    \"cli_args\" : {\n      \"webdriver.chrome.driver\" : \"\",\n      \"webdriver.ie.driver\" : \"\"\n    }\n  },\n\n  <strong>\"test_settings\"</strong> : {\n    \"default\" : {\n      \"launch_url\" : \"http://localhost\",\n      \"selenium_port\"  : 4444,\n      \"selenium_host\"  : \"localhost\",\n      \"silent\": true,\n      \"screenshots\" : {\n        \"enabled\" : false,\n        \"path\" : \"\"\n      },\n      \"desiredCapabilities\": {\n        \"browserName\": \"firefox\",\n        \"javascriptEnabled\": true,\n        \"acceptSslCerts\": true\n      },\n      \"exclude\" : \"./examples/unittests/*\"\n    },\n\n    \"unittests\" : {\n      \"selenium\" : {\n        \"start_process\" : false,\n        \"start_session\" : false\n      },\n      \"filter\" : \"./examples/unittests/*\",\n      \"exclude\" : \"\"\n    }\n  }\n}</code></pre>\n</div>\n      </div>\n  </div>    \n  </div>\n    <p>\n  \n  </p><div class=\"container bs-docs-container\">\n  <div class=\"row\">\n  \n  \n<div class=\"col-md-9\">\n  <div class=\"docs-section\">\n    \n    <p>Nightwatch introduces in version <code>0.7</code> a new BDD-style interface for performing assertions on elements, defined on the <code>expect</code> namespace on the main Nightwatch instance. It is based on the <a href=\"http://chaijs.com/api/bdd/\">Chai Expect</a> assertion library and provides a greater level of flexibility and adds new capabilities over the classic <code>assert</code> interface.</p>\n    <p>It uses a chainable language to construct assertions given an element specified by a css/xpath selector. A simple example looks like the following:</p>\n\n    <div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nthis.demoTest = function (browser) {\n  // start with identifying the element\n  // and then assert the element is present\n  browser.expect.element(\'#main\').to.be.present;\n\n  // or assert the element is visible\n  browser.expect.element(\'#main\').to.be.visible;\n};</code></pre>\n    </div>\n\n\n    <div class=\"apimethod\">\n      <h3><code>Language Chains</code></h3>\n      <p>The following are provided as chainable getters to improve the readability of your assertions. They do not provide testing capabilities and the order is not important.</p>\n      <ul><li>to</li>\n        <li>be</li>\n        <li>been</li>\n        <li>is</li>\n        <li>that</li>\n        <li>which</li>\n        <li>and</li>\n        <li>has</li>\n        <li>have</li>\n        <li>with</li>\n        <li>at</li>\n        <li>does</li>\n        <li>of</li>\n      </ul></div>\n\n    <div class=\"apimethod\">\n      <h3><code>.equal(value)/.contain(value)/.match(regex)</code></h3>\n      <p>These methods will perform assertions on the specified target on the current element. The targets can be an attribute value, the element\'s inner text and a css property.</p>\n      <div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nthis.demoTest = function (browser) {\n  browser.expect.element(\'#main\').text.to.equal(\'The Night Watch\');\n\n  browser.expect.element(\'#main\').text.to.contain(\'The Night Watch\');\n\n  browser.expect.element(\'#main\').to.have.css(\'display\').which.equals(\'block\');\n};</code></pre>\n      </div>\n\n    </div>\n\n    <div class=\"apimethod\">\n      <h3><code>.not</code></h3>\n      <p>Negates any of assertions following in the chain.</p>\n      <div class=\"sample-test\">\n<pre><code class=\"language-javascript\">\nthis.demoTest = function (browser) {\n  browser.expect.element(\'#main\').text.to.not.equal(\'The Night Watch\');\n\n  browser.expect.element(\'#main\').text.to.not.contain(\'The Night Watch\');\n',1),(180,'Kairos by rodrigogs','http://rodrigogs.github.io/kairos/',1,0,'\n\n<p><a href=\"https://travis-ci.org/rodrigogs/kairos\"><img src=\"https://travis-ci.org/rodrigogs/kairos.svg?branch=master\" alt=\"Build Status\" /></a>\n<a href=\"https://codeclimate.com/github/rodrigogs/kairos\"><img src=\"https://codeclimate.com/github/rodrigogs/kairos/badges/gpa.svg\" alt=\"Code Climate\" /></a>\n<a href=\"https://codeclimate.com/github/rodrigogs/kairos/coverage\"><img src=\"https://codeclimate.com/github/rodrigogs/kairos/badges/coverage.svg\" alt=\"Test Coverage\" /></a>\n<a href=\"https://david-dm.org/rodrigogs/kairos#info=devDependencies\"><img src=\"https://david-dm.org/rodrigogs/kairos/dev-status.svg\" alt=\"devDependency Status\" /></a>\n<a href=\"https://www.npmjs.com/package/kairos\"><img src=\"https://img.shields.io/npm/dt/kairos.svg\" alt=\"npm\" /></a>\n<a href=\"https://badge.fury.io/js/kairos\"><img src=\"https://badge.fury.io/js/kairos.svg\" alt=\"npm version\" /></a>\n<a href=\"https://badge.fury.io/bo/kairos\"><img src=\"https://badge.fury.io/bo/kairos.svg\" alt=\"Bower version\" /></a></p>\n\n<p><em>Kairós(καιρός) is a greek word that means \"the right moment\". Also, in the greek mithology Kairós is the son of the personification of time itself, Chronos.</em></p>\n\n<p>Now talking about the library, Kairos is being developed to be a non date-based time calculator. The aim is to use time expressions along with math expressions to have human time products, and also to have various representations of a time expression using the engine Gnomon(<em>references the first solar clock ever made</em>).</p>\n\n<h2>\n<a class=\"anchor\" href=\"http://rodrigogs.github.io/kairos/#install\"><span class=\"octicon octicon-link\"></span></a>Install</h2>\n\n<h4>\n<a class=\"anchor\" href=\"http://rodrigogs.github.io/kairos/#nodejs\"><span class=\"octicon octicon-link\"></span></a>Node.js</h4>\n\n<blockquote>\n<p>npm install kairos</p>\n</blockquote>\n\n<h4>\n<a class=\"anchor\" href=\"http://rodrigogs.github.io/kairos/#bower\"><span class=\"octicon octicon-link\"></span></a>Bower</h4>\n\n<blockquote>\n<p>bower install kairos</p>\n</blockquote>\n\n<h2>\n<a class=\"anchor\" href=\"http://rodrigogs.github.io/kairos/#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<h4>\n<a class=\"anchor\" href=\"http://rodrigogs.github.io/kairos/#using-kairos\"><span class=\"octicon octicon-link\"></span></a>Using Kairos</h4>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> time <span class=\"pl-k\">=</span> Kairos.plus(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>10:10<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>05:20<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time); <span class=\"pl-c\">// 15:30</span>\n\ntime <span class=\"pl-k\">=</span> Kairos.minus(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>10:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>05:00<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time); <span class=\"pl-c\">// 05:00</span>\n\ntime <span class=\"pl-k\">=</span> Kairos.multiply(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-c1\">20</span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time); <span class=\"pl-c\">// 20:00</span>\n\ntime <span class=\"pl-k\">=</span> Kairos.divide(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>03:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-c1\">2</span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time); <span class=\"pl-c\">// 01:30</span>\n\n<span class=\"pl-k\">var</span> milliseconds <span class=\"pl-k\">=</span> Kairos.toMilliseconds(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>00:01<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(milliseconds); <span class=\"pl-c\">// 60000</span>\n\n<span class=\"pl-k\">var</span> seconds <span class=\"pl-k\">=</span> Kairos.toSeconds(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>00:01<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(seconds); <span class=\"pl-c\">// 60</span>\n\n<span class=\"pl-k\">var</span> minutes <span class=\"pl-k\">=</span> Kairos.toMinutes(time);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(minutes); <span class=\"pl-c\">// 90</span>\n\n<span class=\"pl-k\">var</span> hours <span class=\"pl-k\">=</span> Kairos.toHours(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>10:30<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(hours); <span class=\"pl-c\">// 10.5</span>\n\n<span class=\"pl-k\">var</span> fraction <span class=\"pl-k\">=</span> Kairos.getFraction(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(fraction); <span class=\"pl-c\">// 00:40</span>\n\n<span class=\"pl-k\">var</span> interval <span class=\"pl-k\">=</span> Kairos.getInterval(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>03:00<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(interval); <span class=\"pl-c\">// 02:00</span>\n\n<span class=\"pl-k\">var</span> compare <span class=\"pl-k\">=</span> Kairos.compareTo(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>03:00<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(compare); <span class=\"pl-c\">// -1</span>\ncompare <span class=\"pl-k\">=</span> Kairos.compareTo(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>03:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>03:00<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(compare); <span class=\"pl-c\">// 0</span>\ncompare <span class=\"pl-k\">=</span> Kairos.compareTo(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>03:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:00<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(compare); <span class=\"pl-c\">// 1</span>\n\n<span class=\"pl-k\">var</span> min <span class=\"pl-k\">=</span> Kairos.<span class=\"pl-c1\">min</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>05:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>00:30<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(min); <span class=\"pl-c\">// 00:30</span>\n\n<span class=\"pl-k\">var</span> max <span class=\"pl-k\">=</span> Kairos.<span class=\"pl-c1\">max</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>05:00<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>00:30<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(max); <span class=\"pl-c\">// 05:00</span></pre></div>\n\n<h4>\n<a class=\"anchor\" href=\"http://rodrigogs.github.io/kairos/#using-gnomon\"><span class=\"octicon octicon-link\"></span></a>Using Gnomon</h4>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> time <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Kairos.Gnomon</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:10:20<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time.<span class=\"pl-c1\">getMilliseconds</span>()); <span class=\"pl-c\">// 0</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time.<span class=\"pl-c1\">getSeconds</span>()); <span class=\"pl-c\">// 20</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time.<span class=\"pl-c1\">getMinutes</span>()); <span class=\"pl-c\">// 10</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time.<span class=\"pl-c1\">getHours</span>()); <span class=\"pl-c\">// 1</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time.toMilliseconds()); <span class=\"pl-c\">// 4220000</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time.toSeconds()); <span class=\"pl-c\">// 4220</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time.toMinutes()); <span class=\"pl-c\">// 70.333333333333</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time.toHours()); <span class=\"pl-c\">// 1.172222222222</span>\n\ntime <span class=\"pl-k\">=</span> time.plus(<span class=\"pl-k\">new</span> <span class=\"pl-en\">Kairos.Gnomon</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:00<span class=\"pl-pds\">\'</span></span>));\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(time.<span class=\"pl-c1\">getHours</span>()); <span class=\"pl-c\">// 2</span>\n\n<span class=\"pl-k\">var</span> compare <span class=\"pl-k\">=</span> time.comparteTo(<span class=\"pl-k\">new</span> <span class=\"pl-en\">Kairos.Gnomon</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>03:00<span class=\"pl-pds\">\'</span></span>));\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(compare); <span class=\"pl-c\">// -1</span>\ncompare <span class=\"pl-k\">=</span> time.comparteTo(<span class=\"pl-k\">new</span> <span class=\"pl-en\">Kairos.Gnomon</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>02:10:20<span class=\"pl-pds\">\'</span></span>));\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(compare); <span class=\"pl-c\">// 0</span>\ncompare <span class=\"pl-k\">=</span> time.comparteTo(<span class=\"pl-k\">new</span> <span class=\"pl-en\">Kairos.Gnomon</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>01:00<span class=\"pl-pds\">\'</span></span>));\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(compare); <span class=\"pl-c\">// 1</span></pre></div>\n\n<p><strong>Help and ideas are FREAKING welcome. Feel free to open issues, fork and contribute! ;)</strong></p>\n      ',1),(182,'Brunch - ultra-fast HTML5 build tool','http://brunch.io/skeletons.html',1,0,'<a href=\"https://github.com/Anonyfox/node-webkit-hipster-seed\">Node-Webkit Hipster Seed</a> 1,170 ★<code>gh:Anonyfox/node-webkit-hipster-seed</code>Node-Webkit, Grunt building, brunch-angular-seed (Jade, Less, Coffeescript, Angular, Bootstrap)Ready to Use Skeleton to build Desktop Applications with all the Web goodies of today.<a href=\"https://github.com/paulmillr/brunch-with-chaplin\">Brunch with Chaplin</a> 252 ★<code>gh:paulmillr/brunch-with-chaplin</code>CoffeeScript, Stylus, HandlebarsChaplin, Backbone, HTML5 Boilerplate, jQuery. Perfect for big applications<a href=\"https://github.com/scotch/angular-brunch-seed\">Brunch with AngularJS</a> 206 ★<code>gh:scotch/angular-brunch-seed</code>Coffeescript, Less, JadeTwitter Bootstrap with themes,<a href=\"https://github.com/vojtajina/testacular\">Testacular</a>for unit tests<a href=\"https://github.com/icholy/ember-brunch\">Brunch with Ember</a> 92 ★<code>gh:icholy/ember-brunch</code>JavaScript, CSS, HandlebarsTwitter Bootstrap, jQuery<a href=\"https://github.com/elving/brunch-with-hipsters\">Brunch with Hipsters</a> 98 ★<code>gh:elving/brunch-with-hipsters</code>CoffeeScript, Stylus, HandlebarsSwag, Lodash, Font Awesome, Normalize.css, HTML5 Boilerplate CSS Helpers, Brunch Auto-Reload, coffeelint-brunch and imageoptmizer-brunch. Works with Bower, includes generators and testing with Karma-Runner.<a href=\"https://github.com/nezoomie/brunch-eggs-and-bacon\">Brunch with eggs and bacon</a> 42 ★<code>gh:nezoomie/brunch-eggs-and-bacon</code>JavaScript, Sass, LESS, HandlebarsTwitter Bootstrap, Mediator<a href=\"https://github.com/gcollazo/brunch-with-ember-reloaded\">Brunch with Ember Reloaded</a> 65 ★<code>gh:gcollazo/brunch-with-ember-reloaded</code>CoffeeScript, Stylus, HandlebarsHTML5 Boilerplate, jQuery and Auto Reload<a href=\"https://github.com/mutewinter/tapas-with-ember\">Tapas with Ember</a> 118 ★<code>gh:mutewinter/tapas-with-ember</code>CoffeeScript, Stylus, Handlebars, Ember Data, Ember ModelA skeleton for rapid Ember development. Including automated Ember installation scripts, environment-specific JS builds, generators, and Ember.vim support.<a href=\"https://github.com/brunch/simple-coffee-skeleton\">Brunch with Coffee</a> 27 ★<code>gh:brunch/simple-coffee-skeleton</code>CoffeeScript, Stylus, HandlebarsHTML5 Boilerplate, jQuery. It was the default skeleton in brunch 1.1. Unsupported but still working.<a href=\"https://github.com/Anaphase/brunch-banana-pancakes\">Brunch with Banana Pancakes</a> 29 ★<code>gh:Anaphase/brunch-banana-pancakes</code>JavaScript, Sass, LESS, HandlebarsTwitter Bootstrap, Mediator. Essentially the same as<a href=\"https://github.com/nezoomie/brunch-eggs-and-bacon\">Brunch with Eggs and Bacon</a>, but constantly updated to the latest library versions.<a href=\"https://github.com/brunch/simple-js-skeleton\">Brunch with JS</a> 24 ★<code>gh:brunch/simple-js-skeleton</code>JavaScript, Stylus, HandlebarsHTML5 Boilerplate, jQuery. Unsupported but still working.<a href=\"https://github.com/exlee/brunch-on-asteroids\">Brunch On Asteroids</a> 24 ★<code>gh:exlee/brunch-on-asteroids</code>Jade, Sass, CoffeeScript/LiveScriptBrunch with Twitter Bootstrap 2.3 extended by Bootswatch themes, Angular.JS, optional LiveScript or CoffeeScript and some extra libraries preconfigured and included such as D3.js, AngularUI, jQuery UI.<a href=\"https://github.com/jerfowler/ExpressBrunchJade\">Express Brunch with Jade</a> 31 ★<code>gh:jerfowler/ExpressBrunchJade</code>CoffeeScript, Stylus, JadeCustom server.coffee that watches your Express server files and restarts on hot code changes. Uses Jade for client and server side templates. Includes express framework generators and Mocha/Chai/Sinon for testacular testing. Everything hipsters has, and more...<a href=\"https://github.com/clkao/angular-brunch-seed-livescript\">Brunch with AngularJS in LiveScript</a> 19 ★<code>gh:clkao/angular-brunch-seed-livescript</code>LiveScript, Sass, JadeTwitter Bootstrap in Sass, LiveScript<a href=\"https://github.com/SimbCo/brunch-with-marionette\">Brunch with MarionetteJS</a> 22 ★<code>gh:SimbCo/brunch-with-marionette</code>CoffeeScript, Stylus, HandlebarsBased on the template we have been using for our MarionetteJS projects. Includes Twitter Bootstrap.<a href=\"https://github.com/damassi/Javascript-App-Skeleton\">JavaScript App Skeleton</a> 18 ★<code>gh:damassi/Javascript-App-Skeleton</code>JavaScript, SASS, HandlebarsLiveReload, Backbone.Mediator, Mocha, Advanced Structure<a href=\"https://github.com/scoarescoare/angular-brunch-true-north\">Brunch Facing True North</a> 21 ★<code>gh:scoarescoare/angular-brunch-true-north</code>Coffeescript, Compass, Sass, Jade, InitializrBuilt on the amazing<a href=\"https://github.com/scotch/angular-brunch-seed\">Brunch with Angular skeleton</a>with a few tweaks including: Compass, Bootstrap SASS, HTML5BP<a href=\"https://github.com/monokrome/brunch-with-brunch\">Brunch with brunch</a> 17 ★<code>gh:monokrome/brunch-with-brunch</code>—As minimal as possible for building your own toolchain on top of.<a href=\"https://github.com/wordofchristian/brunch-with-hampsters\">Brunch with Hampsters</a> 12 ★<code>gh:wordofchristian/brunch-with-hampsters</code>CoffeeScript, Stylus,<a href=\"http://emblemjs.com/\">Emblem.js</a>Also useful for rapid prototyping. Includes html5 boilerplate, Modernizer, and Twitter Bootstrap.<a href=\"https://github.com/jokull/brunch-template\">@jokull\'s skeleton</a> 12 ★<code>gh:jokull/brunch-template</code>CoffeeScript, Stylus, HandlebarsZepto, Stylus responsive grid, Modernizr, Facebook login, slideshow<a href=\"https://github.com/pheuter/brunch-socket-soup\">Brunch with SocketSoup</a> 10 ★<code>gh:pheuter/brunch-socket-soup</code>Coffeescript, Stylus, HandlebarsHTML5 Boilerplate, Twitter Bootstrap, Express, Socket.io<a href=\"https://github.com/damiencaselli/spine-on-brunch\">Spine on Brunch</a> 11 ★<code>gh:damiencaselli/spine-on-brunch</code>CoffeeScript, CSS, HandlebarsHTML5 Boilerplate, jQuery<a href=\"https://github.com/jupl/btc-chaplin\">BTC-Chaplin</a> 14 ★<code>gh:jupl/btc-chaplin</code>CoffeeScript, LESS, ecojQuery, Clearless, Twitter Bootstrap, Font Awesome, Backbone.stickit, Underscore.string. Cake tasks included. There\'s also a<a href=\"https://github.com/jupl/btc-chaplin/tree/cordova\">variant with Cordova.</a><a href=\"https://github.com/jupl/btc-ember\">BTC-Ember</a>19 ★<code>gh:jupl/btc-ember</code>CoffeeScript, Handlebars, LESSClearless, Twitter Bootstrap, Font Awesome. Require statements are not need for Ember modules. Cake tasks included. There\'s also a<a href=\"https://github.com/jupl/cinder-brunch/tree/cordova\">variant with Cordova.</a><a href=\"https://github.com/jupl/btc-cordova\">BTC-Cordova</a>21 ★<code>gh:jupl/btc-cordova</code>—Bare skeleton that includes support for building apps using Apache Cordova.<a href=\"https://github.com/trunkclub/brunch-with-panache\">Brunch with Panache</a> 16 ★<code>gh:trunkclub/brunch-with-panache</code>CoffeeScript, Sass, HandlebarsBTC-Chaplin fork with Swag, Hapi, Browser Sync and Cordova. Provides file fingerprinting and accepts environment variables. Testing with Karma, PhantomJS, Mocha, Sinon and Chai. Jake for Rails-like CLI.<a href=\"https://github.com/eriwen/brunch-jade-bootstrap-and-coffee\">Brunch with Bootstrap, Sass, and Coffee</a> 10 ★<code>gh:eriwen/brunch-jade-bootstrap-and-coffee</code>CoffeeScript, Sass, JadeTwitter Bootstrap, Bootstrap-Sass, Mediator, jQuery<a href=\"https://github.com/gkz/brunch-bare-livescript\">Brunch with bare livescript</a> 10 ★<code>gh:gkz/brunch-bare-livescript</code>LiveScript, LessExtremely simple skeleton without any frameworks<a href=\"https://github.com/bc-luke/sassy-brunch\">Sassy Brunch</a> 10 ★<code>gh:bc-luke/sassy-brunch</code>CoffeeScript,<a href=\"https://sass-lang.org\">Sass</a>, HandlebarsJust like Brunch with Chaplin, but replaces Stylus with Sass<a href=\"https://github.com/damassi/Coffeescript-App-Skeleton\">CoffeeScript App Skeleton</a> 7 ★<code>gh:damassi/Coffeescript-App-Skeleton</code>CoffeeScript, Stylus, HandlebarsHTML5 Boilerplate, jQuery, Mediator, advanced structure<a href=\"https://github.com/edgycircle/cinder-plate\">Cinder Plate</a> 8 ★<code>gh:edgycircle/cinder-plate</code>CoffeeScript, SASS, HandlebarsCoffeeScript, SASS, Handlebars template pre-compilation, production and development builds with appropriate Ember.js version (debug or production).<a href=\"https://github.com/Nami-Doc/brunch-with-ketchup\">Brunch With Ketchup</a> 7 ★<code>gh:Nami-Doc/brunch-with-ketchup</code>LiveScript, Stylus, JadeMeant for large applications. Includes express-resource.<a href=\"https://github.com/eliellis/brunch-bacon-pancakes/\">Brunch with Bacon Pancakes</a> 11 ★<code>gh:eliellis/brunch-bacon-pancakes</code>JavaScript, Sass, LESS, HandlebarsCreated with<a href=\"https://github.com/Anaphase/brunch-banana-pancakes\">Brunch with Banana Pancakes</a>as a base, Brunch with Bacon Pancakes includes Twitter Bootstrap with FontAwesome as style boilerplate.<a href=\"https://github.com/vip32/brunch-with-chaplin-and-bootstrap\">Brunch with Chaplin and Bootstrap</a> 8 ★<code>gh:vip32/brunch-with-chaplin-and-bootstrap</code>CoffeeScript, Stylus, HandlebarsHTML5 Boilerplate, Bootstrap, jQuery<a href=\"https://github.com/tricinel/brunch-ember-sassy\">Sassy Brunch with Ember and CoffeeSoup</a> 4 ★<code>gh:tricinel/brunch-ember-sassy</code>CoffeeScript, Sass, HandlebarsHTML5 Boilerplate, Twitter Bootstrap (Compass), jQuery<a href=\"https://github.com/EnosFeedler/brunch-dutch-baby\">Brunch Dutch Baby</a> 8 ★<code>gh:EnosFeedler/brunch-dutch-baby</code>Coffeescript, Stylus, JadeBackbone.js, Bootstrap 3, Karma Test Runner<a href=\"https://github.com/ocombe/angular-brunch-seed-no-fuss\">Angular &amp; Brunch - No fuss</a> 20 ★<code>gh:ocombe/angular-brunch-seed-no-fuss</code>Angular, SASS-Bootstrap 3 &amp; BourbonBrunch with an Angular seed featuring SASS-Bootstrap 3. No ruby (using Node-SASS &amp; Bourbon), no Jade, no Coffeescript. Unit tests with karma &amp; e2e tests with protractor.<a href=\"https://github.com/connorblack/brunch-with-moby\">Brunch with Moby</a> 6 ★<code>gh:connorblack/brunch-with-moby</code><a href=\"http://phonegap.com/\">PhoneGap (Cordova)</a>,<a href=\"http://lungo.tapquo.com/\">Lungo.js</a>Simple skeleton optimized for PhoneGap and integrated with Lungo.js for sexy prototyping. Easily create native-like mobile apps!<a href=\"https://github.com/meleyal/brunch-crumbs\">Brunch Crumbs</a> 4 ★<code>gh:meleyal/brunch-crumbs</code>CoffeeScript, jQuery, Sass, EcoMinimal structure based on H5BP, testing via Karma/Jasmine, Docs via Docco, deployment via Heroku.<a href=\"https://github.com/tUrG0n/brunch-chrunb\">Brunch chrunb</a> 4 ★<code>gh:tUrG0n/brunch-chrunb</code>CoffeeScript, Stylus, JadeTwitter Bootstrap, jQuery<a href=\"https://github.com/brunch/dead-simple\">Dead-simple brunch</a> 10 ★<code>gh:brunch/dead-simple</code>—Dead-simple brunch skeleton. No opinions, just empty dirs and minimal configs.<a href=\"https://github.com/DallanQ/brunch-with-chaplin-and-initializr\">Brunch with Chaplin and Initializr</a> 3 ★<code>gh:DallanQ/brunch-with-chaplin-and-initializr</code>CoffeeScript, Stylus, LESS, HandlebarsHTML5 Boilerplate, Bootstrap, jQuery, Modernizr — includes individual bootstrap style files and javascript plugins so you can omit or modify them<a href=\"https://github.com/cbosco/coffee-purist-brunch\">Coffee purist brunch</a> 4 ★<code>gh:cbosco/coffee-purist-brunch</code>CoffeeScript, LESS, eco templatesjQuery, Mocha. Tests run with no need to build into public/ directory or duplicate test/vendor libraries. For those who want to bundle libs specifically made for CoffeeScript.<a href=\"https://github.com/Anaphase/cinnamon-toast-brunch\">Cinnamon Toast Brunch</a> 4 ★<code>gh:Anaphase/cinnamon-toast-brunch</code>CoffeeScript, Stylus, &amp; SIMLNever write a semicolon again! Cinnamon Toast Brunch focuses on concise and clean code.<a href=\"https://github.com/aheuermann/Ultimate-Omelette-Brunch\">Ultimate Omelette Brunch</a> 3 ★<code>gh:aheuermann/Ultimate-Omelette-Brunch</code>CoffeeScript, Less, JadeCoffeeScript, Less, Jade, Bootstrap (<a href=\"http://bootswatch.com/flatly/\">Flatly Theme</a>),<a href=\"http://angular-ui.github.io/bootstrap/\">Angular UI-Bootstrap</a><a href=\"https://github.com/thomdixon/brunch-chicken-and-waffles\">Brunch with chicken and waffles</a> 9 ★<code>gh:thomdixon/brunch-chicken-and-waffles</code>CoffeeScriptAngular, AngularUI, and Bootstrap 3<a href=\"https://github.com/codevinsky/brunch-with-edge-benedict\">Brunch with Edge Benedict</a> 6 ★<code>gh:codevinsky/brunch-with-edge-benedict</code>Coffeescript, Less, JadeAlways kept up-to-date with the newest libraries: AngularJS 1.2.0-rc.3, Bootstrap 3, jQuery 2.0.3, Sling UI 0.2.3<a href=\"https://github.com/Nami-Doc/sticky-brunch\">Sticky Brunch</a> 1 ★<code>gh:Nami-Doc/sticky-brunch</code>LiveScript, Stylus, JadeIncludes<a href=\"http://nytimes.github.com/backbone.stickit/\">Stickit</a>for MVVM-like behavior. No CSS framework included.<a href=\"https://github.com/felipesabino/brunch-with-sass-and-jade\">Brunch With Sass and Jade</a> 3 ★<code>gh:felipesabino/brunch-with-sass-and-jade</code>CoffeeScript,<a href=\"https://sass-lang.org\">Sass</a>,<a href=\"http://jade-lang.com\">Jade</a>Brunch with Chaplin, Sass, Jade, jQuery and Underscore<a href=\"https://github.com/sandy98/brunch-with-puppets\">Brunch with Puppets</a> 5 ★<code>gh:sandy98/brunch-with-puppets</code>CoffeeScript, StylusMarionetteJS - Twitter Bootstrap based skeleton with expanded, login prepared menu and some other goodies<a href=\"https://github.com/KyleAMathews/simple-brunch\">Simple Brunch</a> 1 ★<code>gh:KyleAMathews/simple-brunch</code>CoffeeScript,<a href=\"https://sass-lang.org\">Sass</a>/<a href=\"http://compass-style.org\">Compass</a>, EcoIncludes some nice typography defaults and<a href=\"http://susy.oddbird.net/\">Susy</a>, a responsive grid system.<a href=\"https://github.com/smazurov/brunch-marcos\">Brunch Marcos</a> 2 ★<code>gh:smazurov/brunch-marcos</code>JavaScript,<a href=\"http://learnboost.github.com/stylus/\">Stylus</a>/<a href=\"http://handlebarsjs.com\">Handlebars</a><a href=\"http://layoutmanager.org/\">LayoutManager</a>,<b>Tests</b>, Sensible structure to write large maintainable apps.<a href=\"https://github.com/sjlu/brunch-time\">Brunch Time</a> 3 ★<code>gh:sjlu/brunch-time</code>Javascript, LESS, HandlebarsBower, Backbone.js, Normalize.css, lesshat<a href=\"https://github.com/clonn/angular-express\">Brunch with Angular-Express</a> 4 ★<code>gh:clonn/angular-express</code>Coffeescript, Stylus, Angular, ExpressHTML5 Boilerplate, Angular.js, Express<a href=\"https://github.com/vip32/brunch-with-marionette\">Brunch with MarionetteJS</a> 3 ★<code>gh:vip32/brunch-with-marionette</code>CoffeeScript, Stylus, Handlebars, Bootstrap 3Copy of SimbCo/brunch-with-marionette which has specific implementation of routes/views<a href=\"https://github.com/talentriot/brunch-foundation\">Brunch Foundation</a> 2 ★<code>gh:talentriot/brunch-foundation</code>JavaScript, SASS/<a href=\"http://handlebarsjs.com\">Handlebars</a>Foundation CSS framework,<a href=\"http://layoutmanager.org/\">LayoutManager</a>,<b>Tests</b>, Sensible structure to write large maintainable apps. Intended for mobile-first<a href=\"https://github.com/ksnyde/brunch-with-ember-sideloaded\">Brunch with Ember Sideloaded</a>6 ★<code>gh:ksnyde/brunch-with-ember-sideloaded</code>Javascript, LESS, HandlebarsBootstrap 3, MomentJS, HTML5 Boilerplate, jQuery and Auto Reload<a href=\"https://github.com/stefanvermaas/brunch-with-sass\">Brunch with SASS</a>1 ★<code>gh:stefanvermaas/brunch-with-sass</code>CoffeeScript, Sass, HandlebarsBrunch with SASS provides a working Brunch with Chaplin skeleton with SASS enabled instead of Stylus<a href=\"https://github.com/monokrome/brunch-with-grits\">Brunch with Grits</a>3 ★Backbone,<a href=\"https://github.com/marionettejs/backbone.marionette\">Marionette</a>CoffeeScript, StylusBrunch with CoffeeScript, Stylus, Backbone, Marrionette, and jQuery.<a href=\"https://github.com/pkmishra/Dhancha\">Brunch with Coffee &amp; Dust</a>8 ★CoffeeScript, LESS, Dust.jsTwitter Bootstrap and Aura based skeleton.<a href=\"https://github.com/timebox-designs/pineapple-in-a-can\">Pineapple in a Can</a>2 ★<code>gh:timebox-designs/pineapple-in-a-can</code>JavaScript, StylusBackbone, bootstrap, font awesome, handlebars, jQuery, marionette, swag and underscore. Chock full of yummy goodness!<a href=\"https://github.com/timebox-designs/canned-coral\">Canned Coral</a><code>gh:timebox-designs/canned-coral</code>JavaScript, StylusA copy of Pineapple in a Can with a reverse proxy.<a href=\"https://github.com/davidfregoli/brunch-with-underscore-js-less\">Brunch with Underscore, LESS and JS</a>2 ★<code>gh:davidfregoli/brunch-with-underscore-js-less</code>Underscore templates, LESS styles, plain JSMinimal Brunch Skeleton with Underscore templates, LESS styles and vanilla JS<a href=\"https://github.com/askalyuk/brunch-fruits\">Brunch with Fruits</a>2 ★<code>gh:askalyuk/brunch-fruits</code>JavaScript, Handlebars, LESS/SASSBootstrap, Mocha/Chai. It has example of deployed full-stack application.<a href=\"https://github.com/morriswchris/brunch-with-backbacon\">Brunch with barebone AMD backbone, twtr bs, JST, _ and FA</a>1 ★<code>gh:morriswchris/brunch-with-backbacon</code>Underscore templates (JST), LESS styles, Bootstrap, Font Awesome, plain JSMinimal Brunch Skeleton with Underscore templates precompiled to JST, LESS styles including bootstrap and font awesome and vanilla JS<a href=\"https://github.com/huafu/brunch-with-ember-and-bootstrap\">Brunch with Ember and Bootstrap</a>8 ★<code>gh:huafu/brunch-with-ember-and-bootstrap</code>CoffeeScript, Ember, Ember data, Stylus and HandlebarsHTML5 Boilerplate, Twitter Bootstrap (Stylus version), jQuery, Keyword, Ember Bootstrap and Auto Reload<a href=\"https://github.com/abronte/brunch-on-fire\">Brunch on fire</a>1 ★<code>gh:abronte/brunch-on-fire</code>CoffeeScript, SASS, HandlebarsStraightforward ember bundle. Includes jQuery and tests are setup using mocha + chai.<a href=\"https://github.com/markmarijnissen/spine-livescript-brunch-skeleton\">Spine.js with Bootstrap OR jQuery Mobile</a>8 ★<code>gh:markmarijnissen/spine-livescript-brunch-skeleton</code>LiveScript, Less, JadejQuery<br />optionally add Twitter Bootstrap (LESS code!) or jQuery Mobile using generators. Also includes an Android Eclipse project using PhoneGap!<a href=\"https://github.com/MaggieCabrera/vegan-brunch\">Vegan Brunch</a><code>gh:MaggieCabrera/vegan-brunch</code>Javascript, Sass, CompassSimple brunch skeleton to support foundation 4 and compass<a href=\"https://github.com/ashleydavis/AngularJS-Skeleton\">Simple Brunch with AngularJS</a><code>gh:ashleydavis/AngularJS-Skeleton</code>AngularJS v1.1.4 and jQuery v2.0.2<a href=\"https://github.com/monokrome/brunch-for-libs\">Brunch for libs</a>3 ★<code>gh:monokrome/brunch-for-libs</code>A super minimal brunch configuration for building Javascript libraries on top of.<a href=\"https://github.com/sandy98/brunch-with-wisp\">Brunch with Wisp</a>1 ★<code>gh:sandy98/brunch-with-wisp</code><a href=\"https://github.com/Gozala/wisp\">Wisp</a>Tiny skeleton meant to be a proof of concept for the use of Wisp, the Clojure-like Lisp dialect with Brunch.<a href=\"https://github.com/GulinSS/brunch-bower-site\">Brunch with CoffeeScript, Jade, Less, Bower</a>1 ★<code>gh:GulinSS/brunch-bower-site</code>CoffeeScript, Jade, Less, BowerMinimal skeleton for modern Client-Side development based on stack.<a href=\"https://github.com/TessaHarmon/brunch-jade-stylus\">Brunch with Jade and Stylus</a>5 ★<code>gh:TessaHarmon/brunch-jade-stylus</code>Jade, StylusMinimal skeleton based on brunch-with-brunch for jade/stylus lovers.<a href=\"https://github.com/warrenseine/brunch-react-less\">Brunch with React and Less</a>1 ★<code>gh:warrenseine/brunch-react-less</code>Javascript, React, Less, Bower, VagrantSkeleton for cross-platform rapid development with React and Less. Just run <code>vagrant up</code> and edit the code.<a href=\"https://github.com/DimensionSoftware/brunch-with-pb\">Brunch with LiveScript, Stylus, React</a>7 ★<code>gh:DimensionSoftware/brunch-with-pb</code>LiveScript, React, Stylus, ExpressThis is a skeleton for a React-based single-page application that can also do server-side rendering.<a href=\"https://github.com/jhabdas/brunch-with-emmett\">Brunch with Emmett</a><code>gh:jhabdas/brunch-with-emmett</code>CoffeeScript, Exim (React + Flux), React Router, no-JSXBuilds on top of Exim. Puts on Topcoat for CSS. Sings with Bluebird.<a href=\"https://github.com/hyyan/brunch-with-hyyan\">Brunch With Hyyan</a><code>gh:hyyan/brunch-with-hyyan</code>Bower, Bootstrap Sass, Bootstrap RTL And jQueryThis is a skeleton for building new sass projects with Bootstrap Sass and jQuery, it can be used with wordpress themes easily<a href=\"https://github.com/dobromir-hristov/brunch-with-whey-protein\">Brunch with Whey Protein</a><code>gh:dobromir-hristov/brunch-with-whey-protein</code>SASS, FoundationThis skeleton is based on the Foundation framework. It a basic website kick starter. Includes Foundation, SASS, jQuery, Bourbon.<a href=\"https://github.com/smokku/brunch-with-dragons\">Brunch with Dragons</a><code>gh:smokku/brunch-with-dragons</code>LESS, Jade, Bootstrap, FontAwesome, AngularJS, AngularUI, Bower, Brunch, Karma, Mocha, Chai, Sinon, Protractor, LiveScriptFrontend (API based) application with streamlined workflow explained by many examples.<a href=\"https://github.com/morriswchris/brunch-with-jarvis\">Brunch with Jarvis</a><code>gh:morriswchris/brunch-with-jarvis</code>Literally Nothing! .. oh wait I left a sample css and index fileCopies everything form app/assets to build. Makes for an awesome static site server<a href=\"https://github.com/borisschapira/brunch-with-a-sassy-zigzag\">Brunch with a Sassy Zigzag</a><code>gh:borisschapira/brunch-with-a-sassy-zigzag</code>AngularJS (route, directive, filter, template compilation), JSHint, Sass, Karma + JasmineAn angular setup with Sass<a href=\"https://github.com/lnikell/brunch-gentleman-set\">Brunch gentleman set</a>3 ★<code>gh:lnikell/brunch-gentleman-set</code>Stylus, Coffeescript, Backbone, Jade, jQuery, UnderscoreBackbone.LayoutManager, Autoprefixer, HTML5 template. All what you need to fast start.  <a href=\"https://github.com/hyyan/brunch-with-ionic\">Brunch With Ionic</a><code>gh:hyyan/brunch-with-ionic</code>Bower, Ionic Sass, AngularJS, CordovaHTML5 mobile application skeleton with Brunch, Ionic Framework And AngularJS<a href=\"https://github.com/hyyan/brunch-with-onsenui\">Brunch With OnsenUI</a><code>gh:hyyan/brunch-with-onsenui</code>Bower, OnsenUI, Stylus, AngularJS, CordovaHTML5 mobile application skeleton with Brunch,  Onsenui Framework And AngularJS<a href=\"https://github.com/row1/brunch-materialistic-arrogantular\">Brunch Materialistic and Arrogantular</a><code>gh:row1/brunch-materialistic-arrogantular</code>AngularJS, Angular Material, SASS, UI-RouterAngularJS skeleton using Google Material Design and following John Papa\'s AngularJS style guide.',1),(183,'Project Cards Template in CSS and jQuery','https://codyhouse.co/gem/project-cards-template/',1,0,'\n				\n\n				\n\n				<p>A portfolio template with expandable projects and a full-page navigation inspired by Primer app.</p>	\n\n				\n				<div class=\"post-divider\">\n\n					 \n					\n					<div class=\"browser-support\">\n						<b>Browser support</b>\n\n												<ul><li class=\"img-replace supported\">ie</li>\n							<li class=\"img-replace supported\">Chrome</li>\n							<li class=\"img-replace supported\">Firefox</li>\n							<li class=\"img-replace supported\">Safari</li>\n							<li class=\"img-replace supported\">Opera</li>\n						</ul><span class=\"ie-version-supported\">9+</span>					</div> \n\n				</div> \n\n				\n				\n\n				<p>Today’s resource is inspired by the <a href=\"https://www.yourprimer.com/\">Primer app</a>, which makes a great use of cards and motion throughout their design. We applied similar effects to a portfolio template, with expandable items and a bold, full-page navigation.</p>\n<p>Images: <a href=\"https://unsplash.com/\">Unsplash</a></p>\n<h2>Creating the structure</h2>\n<p>The <strong>HTML structure</strong> is composed by 3 main elements: a <code>.cd-nav-trigger</code> for the menu icon, a <code>nav.cd-primary-nav</code> for the main navigation, and a <code>.cd-projects-container</code> wrapping the unordered list of projects.<br />Each project contains a <code>div.cd-title</code> with the project title and a <code>div.cd-project-info</code> with project description. The project image is set as background-image of the <code>.cd-title::before</code> pseudo-element.</p>\n\n		<div class=\"crayon-syntax crayon-theme-cody crayon-font-monaco crayon-os-mac print-yes notranslate\">\n		\n			\n			<div class=\"crayon-main\">\n				<table class=\"crayon-table\"><tr class=\"crayon-row\"><td class=\"crayon-nums\">\r\n					<div class=\"crayon-nums-content\"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p></div>\r\n				</td>\r\n						<td class=\"crayon-code\"><div class=\"crayon-pre\"><p><span class=\"crayon-r\">&lt;header&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;a </span><span class=\"crayon-e\">href</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"#0\"</span><span class=\"crayon-h\"> </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-logo\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-r\">&lt;img </span><span class=\"crayon-e\">src</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"img/cd-logo.svg\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-r\">&lt;/a&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;button </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-nav-trigger\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Menu</span><span class=\"crayon-r\">&lt;span </span><span class=\"crayon-e\">aria-hidden</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"true\"</span><span class=\"crayon-h\"> </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-icon\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-r\">&lt;/span&gt;</span><span class=\"crayon-r\">&lt;/button&gt;</span></p><p><span class=\"crayon-r\">&lt;/header&gt;</span></p><p><span class=\"crayon-r\">&lt;nav </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-primary-nav\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;ul&gt;</span></p><p><span class=\"crayon-i\">		</span><span class=\"crayon-r\">&lt;li </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-label\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Navigation</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">		</span><span class=\"crayon-r\">&lt;li&gt;</span><span class=\"crayon-r\">&lt;a </span><span class=\"crayon-e\">href</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"#0\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">The team</span><span class=\"crayon-r\">&lt;/a&gt;</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">		</span><span class=\"crayon-c\">&lt;!-- other navigation items here --&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;/ul&gt;</span></p><p><span class=\"crayon-r\">&lt;/nav&gt;</span><span class=\"crayon-i\"> </span><span class=\"crayon-c\">&lt;!-- .cd-primary-nav --&gt;</span></p><p><span class=\"crayon-r\">&lt;div </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-projects-container\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;ul&gt;</span></p><p><span class=\"crayon-i\">		</span><span class=\"crayon-r\">&lt;li </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"single-project\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">			</span><span class=\"crayon-r\">&lt;div </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-title\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">				</span><span class=\"crayon-r\">&lt;h2&gt;</span><span class=\"crayon-i\">Project 1</span><span class=\"crayon-r\">&lt;/h2&gt;</span></p><p><span class=\"crayon-i\">			</span><span class=\"crayon-r\">&lt;/div&gt;</span><span class=\"crayon-i\"> </span><span class=\"crayon-c\">&lt;!-- .cd-title --&gt;</span></p><p><span class=\"crayon-i\">			</span><span class=\"crayon-r\">&lt;div </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-project-info\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">				</span><span class=\"crayon-r\">&lt;button </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"cd-scroll\"</span><span class=\"crayon-r\">&gt;</span><span class=\"crayon-i\">Scroll down</span><span class=\"crayon-r\">&lt;/button&gt;</span></p><p><span class=\"crayon-i\">				</span><span class=\"crayon-r\">&lt;div </span><span class=\"crayon-e\">class</span><span class=\"crayon-o\">=</span><span class=\"crayon-s\">\"content-wrapper\"</span><span class=\"crayon-r\">&gt;</span></p><p><span class=\"crayon-i\">					</span><span class=\"crayon-r\">&lt;p&gt;</span></p><p><span class=\"crayon-i\">						Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quisquam molestias suscipit mollitia vitae ea non ex, dignissimos aperiam minus magni totam sint culpa vel voluptate ipsa sunt repellendus. Ab, magni!</span></p><p><span class=\"crayon-i\">					</span><span class=\"crayon-r\">&lt;/p&gt;</span></p><p><span class=\"crayon-i\">					</span><span class=\"crayon-c\">&lt;!-- additional project info here --&gt;</span></p><p><span class=\"crayon-i\">				</span><span class=\"crayon-r\">&lt;/div&gt;</span></p><p><span class=\"crayon-i\">			</span><span class=\"crayon-r\">&lt;/div&gt;</span><span class=\"crayon-i\"> </span><span class=\"crayon-c\">&lt;!-- .cd-project-info --&gt;</span></p><p><span class=\"crayon-i\">		</span><span class=\"crayon-r\">&lt;/li&gt;</span></p><p><span class=\"crayon-i\">		</span><span class=\"crayon-c\">&lt;!-- other projects here --&gt;</span></p><p><span class=\"crayon-i\">	</span><span class=\"crayon-r\">&lt;/ul&gt;</span></p><p><span class=\"crayon-r\">&lt;/div&gt;</span><span class=\"crayon-i\"> </span><span class=\"crayon-c\">&lt;!-- .cd-projects-container --&gt;</span></p></div></td>\r\n					</tr></table></div>\n		</div>\n\n\n<h2>Adding style</h2>\n<p>The <code>div.cd-project-info</code> has a height of 100% and a relative position. The single projects are in absolute position, have a height of 100% and are placed one on top of the others in the top left corner of their wrapper <code>.cd-project-info</code>.<br />The second and third projects are then translated along the Y axis of, respectively, one-third and two-thirds of the <code>.cd-project-info</code> height. This way, only one-third of the viewport height is visible for each project.</p>\n\n		<div class=\"crayon-syntax crayon-theme-cody crayon-font-monaco crayon-os-mac print-yes notranslate\">\n		\n			\n			<div class=\"crayon-main\">\n				<table class=\"crayon-table\"><tr class=\"crayon-row\"><td class=\"crayon-nums\">\r\n					<div class=\"crayon-nums-content\"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p></div>\r\n				</td>\r\n						<td class=\"crayon-code\"><div class=\"crayon-pre\"><p><span class=\"crayon-k\">.cd-projects-container </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">height</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">position</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">relative</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">overflow</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">hidden</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-projects-container .single-project </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">position</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">absolute</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">top</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0px</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">left</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0px</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">height</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">width</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transition</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">transform</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0.4s</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-projects-container .single-project:nth-of-type(2) </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transform</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">translateY</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">33.3333333333%</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-projects-container .single-project:nth-of-type(3) </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transform</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">translateY</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">66.6666666667%</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p></div></td>\r\n					</tr></table></div>\n		</div>\n\n<p>Here’s a quick animation that explains the cards positioning:</p>\n<p><img class=\"alignnone wp-image-1460 size-full\" src=\"https://0bf196087c14ed19d1f11cf1-ambercreativelab.netdna-ssl.com/wp-content/uploads/2015/10/projects-template-explained.gif\" alt=\"projects-template-explained\" width=\"800\" height=\"600\" /></p>\n<p>We then set a height of 33.33% to the <code>.cd-title</code> (one-third of the viewport height ), and a height: 300% to the <code>.cd-title::before</code> pseudo-element (equal to the viewport height).</p>\n\n		<div class=\"crayon-syntax crayon-theme-cody crayon-font-monaco crayon-os-mac print-yes notranslate\">\n		\n			\n			<div class=\"crayon-main\">\n				<table class=\"crayon-table\"><tr class=\"crayon-row\"><td class=\"crayon-nums\">\r\n					<div class=\"crayon-nums-content\"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p></div>\r\n				</td>\r\n						<td class=\"crayon-code\"><div class=\"crayon-pre\"><p><span class=\"crayon-k\">.cd-title </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">height</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">33.3333333333%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-title::before </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-c\">/* background image */</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">content</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-s\">\'\'</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">position</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">absolute</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">top</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">left</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">height</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">300%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">width</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">background-position</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">center</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">center</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">background-repeat</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">no-repeat</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">background-size</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">cover</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.single-project:nth-of-type(1) .cd-title::before </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">background-image</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">url</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">../img/img-1.jpg</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p></div></td>\r\n					</tr></table></div>\n		</div>\n\n<p>When a project is selected, we use the <code>.selected</code> class to assign a translateY(0) to the selected project, while we translate its project siblings to the bottom (translateY(100%)) so that the whole project image is revealed.</p>\n\n		<div class=\"crayon-syntax crayon-theme-cody crayon-font-monaco crayon-os-mac print-yes notranslate\">\n		\n			\n			<div class=\"crayon-main\">\n				<table class=\"crayon-table\"><tr class=\"crayon-row\"><td class=\"crayon-nums\">\r\n					\r\n				</td>\r\n						<td class=\"crayon-code\"><div class=\"crayon-pre\"><p><span class=\"crayon-k\">.cd-projects-container .single-project.selected </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-c\">/* selected project */</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transform</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">translateY</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-projects-container .single-project.selected ~ li </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-c\">/* hide siblings projects */</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transform</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">translateY</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p></div></td>\r\n					</tr></table></div>\n		</div>\n\n<p>As for the <code>.cd-project-info</code>, it has a height of 100%, an overflow: auto (to be able to scroll it) and is placed in the top-left corner of its <code>.single-project</code> parent. Its <code>::before</code> pseudo-element is then used to push the <code>div.content-wrapper</code> below the project image.</p>\n\n		<div class=\"crayon-syntax crayon-theme-cody crayon-font-monaco crayon-os-mac print-yes notranslate\">\n		\n			\n			<div class=\"crayon-main\">\n				<table class=\"crayon-table\"><tr class=\"crayon-row\"><td class=\"crayon-nums\">\r\n					<div class=\"crayon-nums-content\"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p></div>\r\n				</td>\r\n						<td class=\"crayon-code\"><div class=\"crayon-pre\"><p><span class=\"crayon-k\">.cd-project-info </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">position</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">absolute</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">top</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">left</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">width</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">height</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">overflow</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">auto</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">opacity</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">visibility</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">hidden</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transition</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">opacity</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0.4s,</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">visibility</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0.4s</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-project-info::before </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-c\">/* use to push the .content-wrapper below the intro project image */</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">content</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-s\">\'\'</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">display</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">block</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">height</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">width</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">pointer-events</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">none</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-project-info .content-wrapper </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">position</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">relative</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">z-index</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">2</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">padding</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">2em</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">3em</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">background-color</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">#FFFFFF</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.selected .cd-project-info </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">opacity</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">1</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">visibility</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">visible</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transition</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">opacity</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0s,</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">visibility</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0s</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p></div></td>\r\n					</tr></table></div>\n		</div>\n\n<p>As for the full-page navigation, the <code>.cd-primary-nav</code> is placed below the <code>.cd-projects-container</code>; when the user clicks the <code>.cd-nav-trigger</code>, the single projects are translated to the bottom to reveal the navigation.</p>\n\n		<div class=\"crayon-syntax crayon-theme-cody crayon-font-monaco crayon-os-mac print-yes notranslate\">\n		\n			\n			<div class=\"crayon-main\">\n				<table class=\"crayon-table\"><tr class=\"crayon-row\"><td class=\"crayon-nums\">\r\n					<div class=\"crayon-nums-content\"><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p></div>\r\n				</td>\r\n						<td class=\"crayon-code\"><div class=\"crayon-pre\"><p><span class=\"crayon-k\">.cd-primary-nav </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">position</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">absolute</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">top</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">left</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-c\">/* height = (100% - 9%) - 9% is the space taken by the projects when the navigation is open */</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">height</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">91%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">width</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">100%</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">overflow</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">auto</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">opacity</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-primary-nav ul </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transform</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">translateY</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">50px</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transition</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">transform</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0.4s</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-primary-nav.nav-open </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">opacity</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">1</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-primary-nav.nav-open ul </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transform</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">translateY</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">0</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-projects-container.nav-open .single-project </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">box-shadow</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">30px</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">rgba</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">0,</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0,</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0,</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">0.5</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transform</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">translateY</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">91%</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-projects-container.nav-open .single-project:nth-of-type(2) </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transform</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">translateY</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">94%</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p><p><span class=\"crayon-k\">.cd-projects-container.nav-open .single-project:nth-of-type(3) </span><span class=\"crayon-sy\">{</span></p><p><span class=\"crayon-h\">  </span><span class=\"crayon-e\">transform</span><span class=\"crayon-sy\">:</span><span class=\"crayon-h\"> </span><span class=\"crayon-i\">translateY</span><span class=\"crayon-sy\">(</span><span class=\"crayon-i\">97%</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span></p><p><span class=\"crayon-sy\">}</span></p></div></td>\r\n					</tr></table></div>\n		</div>\n\n\n<h2>Events handling</h2>\n<p>We used jQuery to listen to the click events on the <code>.cd-nav-trigger</code> and <code>.single-project</code> and to add/remove classes accordingly.</p>\n\n				<div class=\"update\">\n<b>Oct 20, 2015</b>\n<ul><li>Resource released by CodyHouse</li>\r\n</ul></div>\r\n<div>\n										<img alt=\"\" src=\"https://1.gravatar.com/avatar/4744bb78986596baa5e911e008fa83f8?s=96&amp;d=mm&amp;r=g\" class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\" /><div class=\"gem-author-info\">\n						<h3>Claudia Romano</h3>\n						<p>Web developer, fan of The Big Bang Theory and good food. Co-founder of CodyHouse and <a href=\"https://nucleoapp.com/\">Nucleo</a>. You can follow her on <a href=\"https://twitter.com/romano_cla\">Twitter</a>.</p>\n					</div> 	\n				</div> \n\n				\n\n				<div>\n		\n\n		\n		\n		<div class=\"cd-license cd-aside-block\">\n			<h5>Extended license</h5>\n			<p>Do you want to include this resource in a product offered for sale? Buy the extended license or <a href=\"http://codyhouse.co/terms/\">learn more</a> about it.</p>\n			\n		</div>\n		<div class=\"cd-newsletter cd-aside-block\">\n			<h5>Codyhouse newsletter</h5>\n			<p>Enjoying our resources? Get our recap Email once a month with all of the lastest news.</p>\n					</div>\n		<div class=\"cd-popular-resources cd-aside-block\">\n			<h5>Related resources</h5>\n							</div>\n	</div>\n',1),(184,'How to use an Xbox 360 controller with OS X Yosemite','http://www.jacobtomlinson.co.uk/2014/10/17/use-xbox-360-pad-with-yosemite/',0,0,'<div>\n<span></span><h3>Introduction</h3>\n<p>Want to use an Xbox 360 controller to play games on Mac OS X 10.10 Yosemite? Here are\nsimple instructions to get you started in no time.</p>\n<h2>Driver</h2>\n<p>To get your Xbox 360 pad working you\'ll need to install a driver. Drivers for OS X\nare known as kexts and Apple provide a standard set to support all sorts of third\nparty hardware. But if you haven\'t guessed already they don\'t provide one for\nthe Xbox 360 controller so we\'ll have to look elsewhere.</p>\n<p>Colin Munro at tattiebogle.net created a driver for the Xbox 360 controller,\nhowever this hasn\'t been updated since Snow Leopard and it won\'t work with\nOS X Yosemite. Luckily for us someone else has updated the code and <a href=\"https://github.com/d235j/360Controller/releases\">posted it on\nGitHub</a>.</p>\n<p>To install it just download the .dmg file from the GitHub repository, open it\nand run the installer.</p>\n<p>You\'ll need to reboot once it\'s done for your Mac to recognise the controller.</p>\n<h2>Configuration</h2>\n<p>This is enough to get your controller working in most situations but if you\nwant to change the configuration of your controller (e.g invert the axis) then\nyou just need to head to your \"System Preferences\" and you\'ll find a new option\ncalled \"Xbox 360 Controllers\".</p>\n<p>From this menu you\'ll be able to test your controller is working as well as\nmake changes to the config.</p>\n<p><img src=\"http://i.imgur.com/ikYGruw.png\" alt=\"Imgur\" /></p>\n<h3>Updates</h3>\n<ul><li>Add disable kext sign check</li>\n<li>Removed disable kext sign check, not needed as of v0.14</li>\n</ul>\n\n<p><small>\n<i class=\"fa fa-tags\"></i>\nxbox 360 controller, yosemite, OS X, gaming\n</small></p>\n\n</div><div>\nI <i class=\"fa fa-heart\"></i> feedback.<br />Let me know what you think of this article on twitter <a href=\"http://www.twitter.com/_jacobtomlinson\">@_jacobtomlinson</a> or leave a comment below!\n</div>',1),(185,'ConnorAtherton/walkway','https://github.com/ConnorAtherton/walkway',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>I loved the animations <a href=\"http://www.polygon.com/a/ps4-review\">for the polygon ps4 review</a> a few months back\nand decided to create a small library to re-create them (<a href=\"http://htmlpreview.github.io/?https://github.com/ConnorAtherton/walkway/blob/master/example/index.html\">simple demo</a>).</p>\n\n<p>It supports <code>path</code>, <code>line</code> and <code>polyline</code> elements.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/ConnorAtherton/walkway#download\"><span class=\"octicon octicon-link\"></span></a>Download</h2>\n\n<h4><a class=\"anchor\" href=\"https://github.com/ConnorAtherton/walkway#bower\"><span class=\"octicon octicon-link\"></span></a>Bower</h4>\n\n<pre><code>bower install walkway.js\n</code></pre>\n\n<h4><a class=\"anchor\" href=\"https://github.com/ConnorAtherton/walkway#npm\"><span class=\"octicon octicon-link\"></span></a>npm</h4>\n\n<pre><code>npm install walkway.js\n</code></pre>\n\n<h4><a class=\"anchor\" href=\"https://github.com/ConnorAtherton/walkway#cdn\"><span class=\"octicon octicon-link\"></span></a>CDN</h4>\n\n<pre><code>http://cdn.jsdelivr.net/walkway/0.0.1/walkway.min.js\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/ConnorAtherton/walkway#how-to-use\"><span class=\"octicon octicon-link\"></span></a>How to use</h2>\n\n<p>Create a new <code>Walkway</code> instance with a supplied options object.\nWhen you want to start animating call <code>.draw</code> on the returned instance\nproviding an optional callback that will be called when drawing is complete.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// Create a new instance</span>\n<span class=\"pl-k\">var</span> svg <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Walkway</span>(options);\n<span class=\"pl-c\">// Draw when ready, providing an optional callback</span>\nsvg.draw(callback);\n\n<span class=\"pl-c\">// Options passed in as an object, see options below.</span>\n<span class=\"pl-k\">var</span> svg <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Walkway</span>({ selector<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#test<span class=\"pl-pds\">\'</span></span>});\n\n<span class=\"pl-c\">// Overwriting defaults</span>\n<span class=\"pl-k\">var</span> svg <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Walkway</span>({\n  selector<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#test<span class=\"pl-pds\">\'</span></span>,\n  duration<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>2000<span class=\"pl-pds\">\'</span></span>,\n  <span class=\"pl-c\">// can pass in a function or a string like \'easeOutQuint\'</span>\n  <span class=\"pl-en\">easing</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">t</span>) {\n    <span class=\"pl-k\">return</span> t <span class=\"pl-k\">*</span> t;\n  }\n});\n\nsvg.draw();\n\n<span class=\"pl-c\">// If you don\'t want to change the default options you can</span>\n<span class=\"pl-c\">// also supply the constructor with a selector string.</span>\n<span class=\"pl-k\">var</span> svg <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Walkway</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#test<span class=\"pl-pds\">\'</span></span>);\n\nsvg.draw(<span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Animation finished<span class=\"pl-pds\">\'</span></span>);\n});</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/ConnorAtherton/walkway#options\"><span class=\"octicon octicon-link\"></span></a>Options</h3>\n\n<ul><li><strong>selector</strong> (<em>mandatory</em>) - The selector of the parent element (usually will be a specific svg element)</li>\n<li><strong>duration</strong> - Time the animation should run for, in ms. Default is 400.</li>\n<li><strong>easing</strong> - Name of the easing function used for drawing. Default is \'easeInOutCubic\'. You can also supply your own function that will be passed the progress and should return a value in the range of [0, 1];</li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/ConnorAtherton/walkway#easing\"><span class=\"octicon octicon-link\"></span></a>Easing</h3>\n\n<p>All credit for the built-in easing functions go to <a href=\"https://github.com/gre\">gre</a> from <a href=\"https://gist.github.com/gre/1650294\">this gist</a>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/ConnorAtherton/walkway#gotchas\"><span class=\"octicon octicon-link\"></span></a>Gotchas</h3>\n\n<p>Sometimes when exporting from a program like Illustrator elements have no stroke style attached to them. This results in confusion when\nWalkway starts the animation and nothing shows up. Just be sure to add base styles that can be overwritten if required.</p>\n\n<div class=\"highlight highlight-source-sass\"><pre>svg {\n  path, <span class=\"pl-c1\">line</span>, polyline {\n    <span class=\"pl-c1\">stroke</span>: <span class=\"pl-c1\">#fff</span>\n    <span class=\"pl-c1\">stroke-width</span>:<span class=\"pl-c1\"> 2</span><span class=\"pl-k\">px</span>\n  }\n\n  path {\n    <span class=\"pl-c1\">fill</span>: <span class=\"pl-c1\">transparent</span>\n  }\n}</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/ConnorAtherton/walkway#demo\"><span class=\"octicon octicon-link\"></span></a>Demo</h3>\n\n<p>View the example link provided near the top of this README or see it in action on my\n<a href=\"http://www.connoratherton.com/walkway\">website</a>.</p>\n',1),(186,'Animate.css','https://daneden.github.io/animate.css/',1,0,'<div class=\"wrap\">\n    \n      Animate it\n    \n    <hr /><p class=\"meta\"><a href=\"https://raw.github.com/daneden/animate.css/master/animate.css\">Download Animate.css</a> or <a href=\"https://github.com/daneden/animate.css\">View on GitHub</a></p>\n    <p><small>Another thing from <a href=\"https://daneden.me/\">Daniel Eden</a>.</small></p>\n  </div>\n',1),(187,'jamesob/desk','https://github.com/jamesob/desk',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://travis-ci.org/jamesob/desk\"><img src=\"https://camo.githubusercontent.com/fda7a265f498cc24f80594a639b15b224a8fefbb/68747470733a2f2f6170692e7472617669732d63692e6f72672f6a616d65736f622f6465736b2e737667\" alt=\"build\" /></a></p>\n\n<p>Lightweight workspace manager for the shell. </p>\n\n<p>Desk makes it easy to flip back and forth between different project contexts in\nyour favorite shell. </p>\n\n<p>Instead of relying on <code>CTRL-R</code> to execute and recall (\"that command\'s gotta\nbe here somewhere...\"), desk helps shorten and document those actions with\nshell aliases and functions, which are then namespaced under a particular\ndesk.</p>\n\n<p>I have a hard time calling this a \"workspace manager\" with a straight\nface -- it\'s basically just a shell script that sources another shell script in a new shell.\nBut I often find myself working in multiple different code trees simulataneously:\nthe quick context switches and namespaced commands that desk facilitates \nhave proven useful.</p>\n\n<p>There are no dependencies other than some kind of Unix shell.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>◲  desk 0.1.1\n\nUsage:\n\n    desk\n        List the current desk and any associated aliases. If no desk \n        is being used, display available desks.\n    desk init\n        Initialize desk configuration.\n    desk (list<span class=\"pl-k\">|</span>ls)\n        List all desks along with a description.\n    desk (.<span class=\"pl-k\">|</span>go) desk-name\n        Activate a desk.\n    desk <span class=\"pl-c1\">help</span>\n        Show this text.\n    desk version\n        Show version information.\n\nSince desk spawns a shell, to deactivate and <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pop<span class=\"pl-pds\">\"</span></span> out a desk, you\nsimply need to <span class=\"pl-c1\">exit</span> or otherwise end the current shell process.</pre></div>\n\n<p><a href=\"https://github.com/jamesob/desk/blob/master/screencap.gif\"><img src=\"https://github.com/jamesob/desk/raw/master/screencap.gif\" width=\"700\" alt=\"screencap.gif\" /></a></p>\n\n<p>For example, given this deskfile</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># tf.sh</span>\n<span class=\"pl-c\"># </span>\n<span class=\"pl-c\"># Description: desk for doing work on a terraform-based repository</span>\n<span class=\"pl-c\">#</span>\n\n<span class=\"pl-c1\">cd</span> <span class=\"pl-k\">~</span>/terraform-repo\n\n<span class=\"pl-c\"># Set up AWS env variables: &lt;key id&gt; &lt;secret&gt;</span>\n<span class=\"pl-en\">set_aws_env</span>() {\n  <span class=\"pl-k\">export</span> AWS_ACCESS_KEY_ID=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$1</span><span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-k\">export</span> AWS_SECRET_ACCESS_KEY=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$2</span><span class=\"pl-pds\">\"</span></span>\n}\n\n<span class=\"pl-c\"># Run `terraform plan` with proper AWS var config</span>\n<span class=\"pl-en\">plan</span>() {\n  terraform plan -module-depth=-1 \\\n    -var <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>access_key=<span class=\"pl-smi\">${AWS_ACCESS_KEY_ID}</span><span class=\"pl-pds\">\"</span></span> \\\n    -var <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>secret_key=<span class=\"pl-smi\">${AWS_SECRET_ACCESS_KEY}</span><span class=\"pl-pds\">\"</span></span>\n}\n\n<span class=\"pl-c\"># Run `terraform apply` with proper AWS var config</span>\n<span class=\"pl-c1\">alias</span> apply=<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>terraform apply<span class=\"pl-pds\">\'</span></span></pre></div>\n\n<p>we\'d get </p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ desk <span class=\"pl-c1\">.</span> tf\n$ desk\n\ntf\ndesk <span class=\"pl-k\">for</span> <span class=\"pl-smi\">doing</span> work on a terraform repo\n\n  set_aws_env - Set up AWS env variables: <span class=\"pl-k\">&lt;</span>key id<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">&lt;</span>secret<span class=\"pl-k\">&gt;</span>\n  plan - Run <span class=\"pl-s\"><span class=\"pl-pds\">`</span>terraform plan<span class=\"pl-pds\">`</span></span> with proper AWS var config\n  apply - Run <span class=\"pl-s\"><span class=\"pl-pds\">`</span>terraform apply<span class=\"pl-pds\">`</span></span> with proper AWS var config</pre></div>\n\n<p>Basically, desk just associates a shell script (<code>name.sh</code>) with a name. When\nyou call <code>desk . name</code>, desk drops you into a shell where <code>name.sh</code> has been\nexecuted, and then desk extracts out certain comments in <code>name.sh</code> for useful\nrendering.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/jamesob/desk#installing\"><span class=\"octicon octicon-link\"></span></a>Installing</h3>\n\n<ol><li><code>git clone &lt;this repo&gt;</code></li>\n<li><code>sudo make install</code> or <code>cp desk/desk ~/bin/desk</code></li>\n<li><code>desk init</code></li>\n</ol><h3><a class=\"anchor\" href=\"https://github.com/jamesob/desk#deskfile-rules\"><span class=\"octicon octicon-link\"></span></a>Deskfile rules</h3>\n\n<p>Deskfiles are just shell scripts, nothing more. Desk does pay attention \nto certain kinds of comments, though.</p>\n\n<ul><li><p><em>description</em>: you can describe a deskfile by including <code># Description: ...</code>\nsomewhere in the file.</p></li>\n<li><p><em>alias and function docs</em>: if the line above an alias or function is a \ncomment, it will be used as documentation.</p></li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/jamesob/desk#sharing-deskfiles-across-computers\"><span class=\"octicon octicon-link\"></span></a>Sharing deskfiles across computers</h3>\n\n<p>Of course, the desk config directory (by default <code>~/.desks</code>) can be a symlink\nso that deskfiles can be stored in some centralized place, like Dropbox,\nand so shared across many computers.</p>\n',1),(188,'Pattern Lab | Build Atomic Design Systems','http://patternlab.io/',1,0,'\n\n      <ol class=\"atomic-design\"><li>\n            <a href=\"http://patternlab.io/about.html#atoms\">\n              <img src=\"http://patternlab.io/assets/icon-atom.svg\" alt=\"Atom\" /></a><h4 class=\"atomic-label\"><a href=\"http://patternlab.io/about.html#atoms\">Atoms</a></h4><a href=\"http://patternlab.io/about.html#atoms\">\n            </a>\n          </li>\n          <li>\n            <a href=\"http://patternlab.io/about.html#molecules\">\n              <img src=\"http://patternlab.io/assets/icon-molecule.svg\" alt=\"Molecule\" /></a><h4 class=\"atomic-label\"><a href=\"http://patternlab.io/about.html#molecules\">Molecules</a></h4><a href=\"http://patternlab.io/about.html#molecules\">\n            </a>\n          </li>\n          <li>\n            <a href=\"http://patternlab.io/about.html#organisms\">\n              <img src=\"http://patternlab.io/assets/icon-organism.svg\" alt=\"Organism\" /></a><h4 class=\"atomic-label\"><a href=\"http://patternlab.io/about.html#organisms\">Organisms</a></h4><a href=\"http://patternlab.io/about.html#organisms\">\n            </a>\n          </li>\n          <li>\n            <a href=\"http://patternlab.io/about.html#templates\">\n              <img src=\"http://patternlab.io/assets/icon-template.svg\" alt=\"Template\" /></a><h4 class=\"atomic-label\"><a href=\"http://patternlab.io/about.html#templates\">Templates</a></h4><a href=\"http://patternlab.io/about.html#templates\">\n            </a>\n          </li>\n          <li>\n            <a href=\"http://patternlab.io/about.html#pages\">\n              <img src=\"http://patternlab.io/assets/icon-page.svg\" alt=\"Page\" /></a><h4 class=\"atomic-label\"><a href=\"http://patternlab.io/about.html#pages\">Pages</a></h4><a href=\"http://patternlab.io/about.html#pages\">\n            </a>\n          </li>\n        </ol><h2 class=\"section-title\">What It Is</h2>\n        <p class=\"intro\">Pattern Lab is a collection of tools to help you create atomic design systems.</p>\n        <ul class=\"g g-4up\"><li class=\"gi\">\n            <h3>Static site generator</h3> \n            <p>At its core, Pattern Lab is a custom static site generator that constructs an interface by stitching atoms, molecules, and organisms together to form templates and pages.</p>\n          </li>\n          <li class=\"gi\">\n            <h3>component library</h3>\n            <p>Pattern Lab serves as your project\'s pattern library and frontend style guide, but you\'re simultaneously able to see components abstractly and in context.</p>\n          </li>\n          <li class=\"gi\">\n            <h3>Pattern starter kit</h3>\n             <p>Pattern Lab provides a whole slew of patterns just to get you started. <em>Don\'t use them all.</em> You should use Pattern Lab to create your own atoms, molecules, organisms, templates, and pages. </p>\n          </li>\n          <li class=\"gi\">\n            <h3>Viewport Resizer</h3>\n            <p>It\'s our job to make sure our designs look and function beautifully across a whole slew of Web-enabled devices. Pattern Lab provides a robust viewport resizing tool to help you create great designs across all screens.</p>\n          </li>\n          <li class=\"gi\">\n            <h3>Annotation Tool</h3>\n            <p>Pattern Lab provides a way to annotate your interface to better communicate design and development decisions to clients and team members.</p>\n          </li>\n          <li class=\"gi\">\n            <h3>Auto Refresh Tool</h3>\n            <p>Pattern Lab can reload your browser automatically whenever you save changes to patterns, images, CSS or anything in your project. Make a change and see the results instantly.</p>\n          </li>\n          <li class=\"gi\">\n            <h3>Page Follow Tool</h3>\n            <p>Testing across multiple browsers and devices is tedious. Page Follow streamlines the development process by syncing navigation from one browser with any other browser connected to the same Pattern Lab site. </p>\n          </li>\n\n        </ul><h2 class=\"section-title\">What It Ain\'t</h2>\n        <p class=\"intro\">Pattern Lab doesn\'t give you all the answers.</p>\n\n        <ul class=\"g g-3up\"><li class=\"gi\">\n            <h3>A UI framework</h3>\n            <p>Pattern Lab isn\'t <a href=\"http://getbootstrap.com/\">Bootstrap</a>. It\'s not <a href=\"http://foundation.zurb.com/\">Foundation</a>. It\'s not flat. It\'s not skeuomorphic. We\'ve got nothing against UI frameworks, but that\'s not what Pattern Lab does. How it looks and how it\'s coded is entirely up to you.</p>\n           </li>\n          <li class=\"gi\">\n            <h3>Language-dependent</h3>\n            <p>Like Sass? Great! Go nuts. Use Less instead? That\'s cool too. Don\'t like preprocessors? Totally fine. Gotta have jQuery, or wouldn\'t touch it with a 10 foot pole? Pattern Lab lets you write HTML, CSS and JavaScript however you want. Write code as awesome or as crappy as you like.</p>\n           </li>\n          <li class=\"gi\">\n            <h3>Incredibly Rigid</h3>\n            <p>Pattern Lab is designed to be flexible with regards to naming and structure. There\'s really no One Right Way to do this, and we think that\'s just fine. Name things as you please, and we\'ll leave the hair-splitting out of things.</p>\n           </li>\n        </ul><h2 class=\"section-title\">Why</h2>\n        <p class=\"intro\">Build systems, not pages.</p>\n        <div class=\"g g-3up\">\n          <div class=\"gi\">\n            <h3>The need for modularity</h3>\n            <p>Component-driven design has been around for a long while now, but it\'s become imperative to think now that the Web landscape is so much more complex. It\'s essential to consider how every thing you include in an interface looks and functions across a whole slew of browsers, devices, and environments.</p>\n          </div>\n          <div class=\"gi\">\n            <h3>A better workflow</h3>\n            <p><a href=\"http://24ways.org/2011/front-end-style-guides/\">Anna Debenham explains</a> how pattern libraries create a shared vocabulary between disciplines, make testing easier,  and builds a canonical reference to keep coming back to.</p>\n          </div>\n          <div class=\"gi\">\n            <h3>Tiny Bootstraps, for Every Client</h3>\n            <p>In this responsive age, our <a href=\"http://daverupert.com/2013/04/responsive-deliverables/\">responsive deliverables</a> need to be more than an ad hoc collection of pages. Give clients a custom design system with which they can modify, extend, and grow with into the future.</p>\n          </div>\n        </div>\n      <h2 class=\"section-title\">How</h2>\n        <p class=\"intro\"><a href=\"http://patternlab.io/docs/index.html\">View Pattern Lab\'s documentation.</a></p>\n        <h2 class=\"section-title\">Who</h2>\n        <p class=\"intro\">Pattern Lab serves as a hub for your web project.</p>\n        <ul class=\"g g-4up\"><li class=\"gi\">\n            <h3>Information Designers</h3>\n            <p>Pattern Lab helps integrate modular thinking into the design process right out of the gate, and helps demonstrate responsive patterns to create.</p>\n          </li>\n          <li class=\"gi\">\n            <h3>Visual Designers</h3>\n            <p>Visual designers can use Pattern Lab as a way to see how each module works in a responsive environment and also to keep track of all the design\'s raw materials.</p>\n          </li>\n          <li class=\"gi\">\n            <h3>Developers</h3>\n            <p>Pattern Lab provides developers with an efficient system for quickly developing prototypes and production-ready front-end code.</p>\n          </li>\n          <li class=\"gi\">\n            <h3>Clients and managers</h3>\n            <p>Everyone, not just designers and developers, needs to understand the benefits of crafting a design system. Clients and managers can view the project in the browser, as a review, and as a reference.</p>\n          </li>\n        </ul><h2 class=\"section-title\">Where</h2>\n        <div class=\"g g-2up\">\n          <div class=\"gi\">\n            <h3>One URL to Rule Them All</h3>\n            <p>Pattern Lab should live in an environment accessible via a URL where everyone involved with your project can view the design system. Pattern Lab can serve as a hub for your project, so make sure it\'s accessible.</p>\n          </div>\n          <div class=\"gi\">\n            <h3>Share Your Results</h3>\n            <p>Optionally (and ideally) your Pattern Lab can be published publicly like other style guides created by <a href=\"http://www.starbucks.com/static/reference/styleguide/\">Starbucks</a>, <a href=\"http://www.bbc.co.uk/gel/mobile/device-considerations/philosophy\">The BBC</a>, and <a href=\"http://pasteup.guim.co.uk/index.html\">The Guardian</a>. This project wouldn\'t exist if these organizations didn\'t share their knowledge and approach. Help makes things better by sharing your Pattern Lab.</p>\n          </div>\n        </div>\n         \n      <h2 class=\"section-title\">Created By</h2>\n        ',1),(189,'Untitled','https://webdesign.tutsplus.com/tutorials/timelinemax-a-primer--cms-23064',1,0,'[unable to retrieve full-text content]',1),(190,'Untitled','http://tridiv.com/',1,0,'[unable to retrieve full-text content]',1),(191,'NATS by Apcera - NATS by Apcera','https://nats.io/',1,0,'\n            <p>Copyright (c) 2012–2014 Apcera Inc.</p>\n            <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n            <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n            <p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n          ',1),(192,'Hacking GSM Signals with an RTL-SDR and Topguw - rtl-sdr.com','http://www.rtl-sdr.com/hacking-gsm-signals-with-an-rtl-sdr-and-topguw/',0,0,'\n				\n\n\n<p>The ability to hack some GSM signals has been around for some time now, but the steps to reproduce the hack have been long and difficult to set up. Recently RTL-SDR.com reader Bastien wrote into us to let us know about his <a href=\"https://github.com/bastienjalbert/topguw\">recently released project called Topguw</a>. Bastien’s Topguw is a Linux based program that helps piece together all the steps required in the GSM hacking process. Although the steps are simplified, you will still need some knowledge of how GSM works, have installed Airprobe and Kraken, and you’ll also need a 2TB rainbow table which keeps the barrier to this hack still quite high. Bastien writes about his software:</p>\n<blockquote>\r\n<div>\n<div><span>So like I said my software can “crack” SMS and call over GSM network. </span></div>\n<span><b>How ?</b></span></div>\r\n<p><span>I put <span lang=\"en\" xml:lang=\"en\">quotation marks in crack because my software is not enough to deciphered GSM itself.</span> My software can make some steps of the known-plaintext attack, introduce by Karsten Nohl, and by the way, increase the time to decipher an SMS or call. I’ll not explain here all the steps because they are long and tedious, but there is a lot of work done behind the Gui.</span></p>\r\n<p><span>Actually my software can extract Keystream (or try to find some of them) from a capture file of GSM, or by sniffing GSM with a rtl-sdr device. Then you just have to use Kraken to crack the key and you’re able to decipher sms or call.</span></p>\r\n<p><span><strong>Why ?</strong></span></p>\r\n<p><span>This hack is very interesting! With only a little receiver (rtl-sdr) and some hard-disk capacity (2Tb), everyone can try to hack the GSM. It’s very low cost compare to other hack vector. Moreover the success rate is really great if you guess the Keystream correctly. So when I started to done this with my hands I though -&gt; why don’t try to make something to do this automatically. </span><br /><span>This is how Topguw was born.</span></p>\r\n<p><span>Topguw, I hope, will sensitize people about risk they take by calling or sending sms with GSM.</span></p>\r\n<p><span>My software is currently in beta version but I did run several time and I got good results. Maybe better than something done by hand. But Topguw is made to help people who want to learn the hack. This is why several files are made to help GSM reverse-engineering.</span></p>\r\n</blockquote>\n<p>Topguw can be downloaded from GitHub at <a href=\"https://github.com/bastienjalbert/topguw\">https://github.com/bastienjalbert/topguw</a>. Bastien has also uploaded a video showing his software in action. If you’re interested in Bastiens YouTube channel as he plans to upload another video soon where he shows himself hacking his own GSM sms/call signals.</p>\n\n\n\n<p>Of course remember that hacking into GSM signals is very illegal and if you do this then you must check the legality of doing so in your country and only receive your own messages or messages that are intended for you.</p>\n\n\n\n\n					\n					\n			',1),(193,'Gobot 0.10 - Less Is More','http://gobot.io/blog/2015/10/27/gobot-0.10-less-is-more/',0,0,'\n            <p>We\'ve just released the new 0.10 version of Gobot, our open source robotics and Internet of Things (IoT) framework written in the Go programming language.\n            This new version incorporates many changes and community contributions to make Gobot much faster, leaner. And of course, add lots more hardware support.</p>\n            \n            <p>We\'ve got a list of the new changes below, but if you want to see the gory details, please check out the compare view on <a href=\"https://github.com/hybridgroup/gobot/compare/0.8.0...0.10\">GitHub</a>.</p>\n            \n            <h2>What Happened To The 0.9 Release?</h2>\n            \n            <p>There were so many important changes, especially ones worked on by the amazing participants at the \"sold-out\" <a href=\"http://www.gophercon.com/\">Gophercon</a> <a href=\"https://www.eventbrite.com/e/gophercon-gobot-hardware-hackday-tickets-17696426488\">hardware hackday</a>, that we decided to hold off on that version, and instead go right on to this new 0.10 release.</p>\n            \n            <h2>Changelog</h2>\n            \n            <ul><li><strong>Refactor core to cleanup robot initialization and shutdown</strong></li>\n              <li><strong>Remove unnecessary goroutines spawned by NewEvent</strong></li>\n              <li>\n<strong>api</strong>\n                <ul><li>Update Robeaux to v0.5.0</li>\n                </ul></li>\n              <li>\n<strong>bebop</strong>\n                <ul><li>Add support for the Parrot Bebop drone</li>\n                </ul></li>\n              <li>\n<strong>keyboard</strong>\n                <ul><li>Add support for keyboard control</li>\n                </ul></li>\n              <li>\n<strong>gpio</strong>\n                <ul><li>Support added for 10 new Grove GPIO devices:\n                    <ul><li>Grove Touch Sensor</li>\n                      <li>Grove Sound Sensor</li>\n                      <li>Grove Button</li>\n                      <li>Grove Buzzer</li>\n                      <li>Grove Led</li>\n                      <li>Grove Light Sensor</li>\n                      <li>Grove Vibration Sensor</li>\n                      <li>Grove Rotary</li>\n                      <li>Grove Relay</li>\n                      <li>Grove Temperature Sensor</li>\n                    </ul></li>\n                </ul></li>\n              <li>\n<strong>i2c</strong>\n                <ul><li>Support added for 2 new Grove i2c devices:\n                    <ul><li>Grove Accelerometer</li>\n                      <li>Grove LCD with RGB backlit display</li>\n                    </ul></li>\n                </ul></li>\n              <li>\n<strong>gort</strong>\n                <ul><li>Update <code>bluetooth</code> Linux support for BlueZ 5.x</li>\n                  <li>Bugfixes</li>\n                </ul></li>\n              <li>\n<strong>docs</strong>\n                <ul><li>Many useful fixes and updates for docs, mostly contributed by our wonderful community.</li>\n                </ul></li>\n            </ul><h2>Contributors</h2>\n            \n            <p>So many people helped with this release, both formally via code or documentation contributions, as well as helpful feedback, comments, and hallway chats. Gobot could not be what it is without all of us in this community working together. We really appreciate it!</p>\n            \n            <h2>Issues</h2>\n            \n            <p>As always, if you find any issues with the new Gobot release, please let us know by entering a <a href=\"https://github.com/hybridgroup/gobot/issues\">GitHub issue</a> and we\'ll get back to you as soon as possible. We\'re also around on IRC (#gobotio on freenode) as much as we can be.</p>\n            \n            <h2>Keep Informed</h2>\n            \n            <p>To stay informed on our rapid progress, please follow us on Twitter at <a href=\"http://twitter.com/gobotio\">@gobotio</a>, as our team and contributors continue our work together.</p>\n            \n          ',1),(194,'The HTTP/2 Web Server Made for Humans','https://caddyserver.com/',0,0,'\n\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-rocket\"></i> HTTP/2</h3>\n						<p>\n							It\'s time for a faster web. Caddy supports HTTP/2 right out of the box. No thought required.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-lock\"></i> TLS 1.2</h3>\n						<p>\n							Direct integration with <a href=\"https://letsencrypt.org/\">Let\'s Encrypt</a> is on its way, or use your own certs and keys. Supports <a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\" title=\"Server Name Indication\">SNI</a>.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-cloud-upload\"></i> Easy Deployment</h3>\n						<p>\n							Caddy is a single executable with no dependencies. Any platform.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-tachometer\"></i> Multi-core</h3>\n						<p>\n							When the going gets tough, Caddy gets going on more CPUs.\n						</p>\n					</div>\n\n					\n\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-cogs\"></i> WebSockets</h3>\n						<p>\n							Caddy can pipe stdin and stdout from any program to WebSocket clients.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-file-text\"></i> Markdown</h3>\n						<p>\n							Serve Markdown documents rendered on-the-fly as HTML.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-globe\"></i> IPv6</h3>\n						<p>\n							Runs full well in an IPv6 environment.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-edit\"></i> Logging</h3>\n						<p>\n							Caddy takes copious notes according to your favorite log format.\n						</p>\n					</div>\n\n					\n\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-server\"></i> FastCGI</h3>\n						<p>\n							Serve PHP by proxying requests to FastCGI servers like php-fpm.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-tags\"></i> Headers</h3>\n						<p>\n							Send custom response headers just by adding a line to your <a href=\"https://caddyserver.com/docs/caddyfile\">Caddyfile</a>.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-exchange\"></i> Reverse Proxy</h3>\n						<p>\n							Forward requests to other endpoints with reverse proxy and load balancing.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-random\"></i> Rewrites &amp; Redirects</h3>\n						<p>\n							Rewrite requests internally or configure HTTP redirects.\n						</p>\n					</div>\n\n					\n\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-sun-o\"></i> Clean URLs</h3>\n						<p>\n							Elegantly serve files without needing the extension in the URL.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-file-zip-o\"></i> Gzip</h3>\n						<p>\n							Compress responses to save bandwidth.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-folder-o\"></i> Directory Browsing</h3>\n						<p>\n							List the contents of folders according to your own template.\n						</p>\n					</div>\n					<div class=\"grid-25\">\n						<h3><i class=\"fa fa-sitemap\"></i> Virtual Hosts</h3>\n						<p>\n							Serve multiple sites from the same address with a single <a href=\"https://caddyserver.com/docs/caddyfile\">Caddyfile</a>.\n						</p>\n					</div>\n\n					\n				',1),(195,'Fuzzing with american fuzzy lop [LWN.net]','http://lwn.net/Articles/657959/',0,0,'\n<div class=\"GAByline\">\n           <p>September 22, 2015</p>\n           <p>This article was contributed by Hanno Böck</p>\n           </div>\n<p>In September 2014 a <a href=\"http://lwn.net/Articles/614218/\">serious security\nvulnerability</a> that became known as Shellshock was found in Bash, which\nis the default shell in most Linux distributions. But it quickly turned out\nthat the initial fix for Shellshock was incomplete. Various other related\nbugs were \nfound only days after the publication, amongst them <a href=\"http://lcamtuf.blogspot.dk/2014/10/bash-bug-how-we-finally-cracked.html\">two\nsevere vulnerabilities discovered by Michał Zalewski</a> from the Google\nsecurity team. In the blog post, Zalewski mentioned that he had found these\nbugs with a fuzzing tool that he wrote, which almost nobody knew back then: <a href=\"http://lcamtuf.coredump.cx/afl/\">american fuzzy lop (afl)</a>. It was the beginning of a remarkable success story.</p>\n\n<p>Fuzzing is an old technique to find bugs in software. The basic idea is\nsimple: just feed an application lots of input data with randomly\nintroduced errors in it and see if anything happens that would indicate a\nbug. The easiest thing to watch for is a crash. If an application crashes\nfrom invalid input, it is often a sign of an invalid memory access—a <a href=\"https://en.wikipedia.org/wiki/Buffer_overflow\">buffer overflow</a>,\nfor example. And these often are security vulnerabilities.</p>\n\n<h4>Between dumb and template-based fuzzers</h4>\n\n<p>In the past, most fuzzing tools fell into two categories: \"dumb\" fuzzers\nthat take a valid input and only modify it randomly, and template-based\nfuzzing tools that are specific to a certain input data format. Both have\ntheir limitations. While dumb fuzzers can still be surprisingly successful,\nthey will only find the most obvious bugs because they have no knowledge\nabout the underlying data format. Template-based fuzzers can find more\nbugs, but creating them is a lot of work. They have to be adapted for every\nkind of input data they are applied to.</p> \n\n<p>American fuzzy lop tries a new strategy. To use it, the first step is to\nrecompile an application with a special compiler wrapper that adds\nassembly instrumentation code to the binary. Both Clang and GCC are supported. This instrumentation allows the fuzzer itself (<tt>afl-fuzz</tt>) to observe\nthe code paths that a certain input file will trigger. If <tt>afl-fuzz</tt>\nfinds an \ninput sample that triggers a new code path, it uses that sample as a\nstarting point for further fuzzing.</p> \n\n<p>This strategy causes <tt>afl-fuzz</tt> to reach a high level of code coverage for its testing. At some point, the fuzzing process may transform an input file into one that has a certain rarely used feature enabled. The fuzzer will detect that a new code path has been triggered and the fuzzing process will create further input files that use that code path and may find bugs there. The big advantage is that the person using the fuzzing tool doesn\'t need to have any knowledge about this rarely used feature. The fuzzer will just find that out for itself.</p>\n\n<h4>Magically creating JPEG headers</h4>\n\n<p>An experiment by Zalewski shows how remarkably successful this strategy\ncan be. He used a bogus file to start the fuzzing process on the <tt>djpeg</tt>\ntool that comes with <a href=\"http://libjpeg.sourceforge.net/\">libjpeg</a>. After a while the <a href=\"http://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html\">fuzzer\nautomatically created input files</a> that contained a valid JPEG\nheader. This does not mean that it\'s advisable to start a fuzzing\nprocess with bogus files. It saves time to start the fuzzing process with a\nvalid input file. In addition, this will likely not work in all situations. For\nexample, the fuzzer is unable to create large string sequences by\nchance.</p> \n\n<p>American fuzzy lop has been responsible for the discovery of bugs and\nsecurity vulnerabilities in many important free software package, including\nsecurity-sensitive software like OpenSSL, GnuPG, and OpenSSH. Some of the\nvulnerabilities in the Android media framework, Stagefright, that were\nrecently <a href=\"https://www.blackhat.com/docs/us-15/materials/us-15-Drake-Stagefright-Scary-Code-In-The-Heart-Of-Android.pdf\">discovered\nby Joshua Drake [PDF]</a> were attributed to it. In order to do this, Drake\nhad to port Stagefright to Linux, since it was designed to only run on\nAndroid. More recently, two denial-of-service issues (<a href=\"https://kb.isc.org/article/AA-01287\">CVE-2015-5722</a> and\n<a href=\"https://kb.isc.org/article/AA-01272/0/CVE-2015-5477%3A-An-error-in-handling-TKEY-queries-can-cause-named-to-exit-with-a-REQUIRE-assertion-failure.html\">CVE-2015-5477</a>), which would allow attackers to remotely crash DNS servers using BIND, were also found by american fuzzy lop.</p>\n\n<p>Apart from finding new bugs, some people have experimented to see if\namerican fuzzy lop would have been able to find certain already known bugs\nthat were believed to be hard to discover. I was able to <a href=\"https://blog.hboeck.de/archives/868-How-Heartbleed-couldve-been-found.html\">rediscover\nthe Heartbleed bug</a> by fuzzing the handshake of an old, vulnerable\nversion of OpenSSL. One notable aspect of the bug was that it\ninvolved the heartbeat extension of TLS, which is a feature that almost nobody\nknew about \nbefore Heartbleed hit the news. Codenomicon, the company that found\nHeartbleed, also used a fuzzing tool, but their fuzzer had prior knowledge\nof the heartbeat extension and specifically targeted it with bogus\ninputs. In my experiment, I used no knowledge about this specific\nextension. American fuzzy lop was able to generate the correct handshake\npacket that would contain the extension, together with the data that would\ntrigger Heartbleed, within six hours.</p> \n\n<p>Another example of a hindsight finding was a <a href=\"https://www.openssl.org/news/secadv/20150108.txt\">bug in the OpenSSL\nfunction <tt>BN_sqr()</tt></a>, which is used to square large numbers\n(bignums). With \nsome inputs, it would produce wrong results due to an error in the carry\npropagation. These inputs were rare corner cases—only one out of 2^128\ninput numbers would trigger that bug. Testing with random inputs would\nnever have led to the discovery of such a bug. However, Ralf-Philipp\nWeinmann was able to rediscover this bug with the help of american fuzzy\nlop. In a <a href=\"https://www.blackhat.com/us-15/briefings.html#assessing-and-exploiting-bignum-vulnerabilities\">talk\ngiven at the Black Hat conference</a> in Las Vegas, he presented a small\ntesting application that would compare the output of the squaring with the\nresult of multiplying a number by itself. By definition these two\ncalculations should produce the same output, so the application would give\nan assertion error if the results differed. Using that test program to\nrecognize when <tt>BN_sqr()</tt> failed, american fuzzy\nlop was able to find an input that triggered the bug within an hour.</p> \n\n<p>Although interesting, these results should be interpreted with caution. It is obviously easy to find a bug if one knows where to look. But they still indicate that even bugs that seem hard to find without code analysis may be susceptible to fuzz testing.</p>\n\n<h4>Easy to use and free software</h4>\n\n<p>Its novel fuzzing strategy is not the only reason for the success of\namerican fuzzy lop. Two factors that likely play a major role are that the\ncode is openly available under a free license—it uses the Apache 2\nlicense—and that the tool is relatively easy to use. This separates it from\nmany other tools in the security area. Lots of commercial tools only target a limited audience, because they are expensive or not available to the public at all. And IT security tools from the academic world often have the reputation of being hard to install and even harder to use without a background in the corresponding field.</p>\n\n<p>Zalewski puts a high value on the usability of his tool and often implements recommendations from its users. While the first versions were very cumbersome to use, this has changed dramatically. Also, by now packages for it are available for most Linux distributions and BSD systems. A package for Mac OS X is also available. Currently, there is no version of american fuzzy lop for Windows or for Android.</p>\n\n<p>To use american fuzzy lop, one first needs to recompile an application\nwith the compiler wrapper shipped with afl (afl-gcc/afl-g++ or\nafl-clang/afl-clang++). The fuzzer needs a command-line tool that takes an\ninput file. In most cases, libraries ship some small tools that allow\nparsing input files and should be suitable.\n\n</p><p>\nWhen compiling libraries, it\'s often advisable to statically link the\nlibrary against the shipped tools, which will avoid having to do library\npreloading when running the executable. With software using the GNU\nautotools, this can usually be achieved with the <tt>configure</tt>\nparameter <tt>--disable-shared</tt>. Therefore the <tt>configure</tt> call\nshould look something like this:</p>\n\n<pre>\n    ./configure --disable-shared CC=afl-gcc CXX=afl-g++\n</pre>\n\n<p>Next, the user needs one or more sample input files. It is usually\nadvisable to create small input files; if possible, they shouldn\'t be\nlarger than a few kilobytes. These need to be put into a directory. Then\nstart the fuzzing:</p>  \n\n<pre>\n    afl-fuzz -i [input_directory] -o [output_directory] ./[executable_to_fuzz] @@\n</pre>\n\n<p>The command <tt>afl-fuzz</tt> will replace <tt>@@</tt> with the fuzzed\ninputs. If there is no <tt>@@</tt> in the command line, the input will be\npassed via the standard input (stdin).</p>\n\n<h4>AddressSanitizer finds more memory access bugs</h4>\n\n<p>There are many more options and variants in how to use afl. One notable\nfeature is the ability to combine the fuzzing with the use of a compiler\nfeature called <a href=\"https://en.wikipedia.org/wiki/AddressSanitizer\">AddressSanitizer</a>\n(ASan), which is part of the GCC and Clang compilers and can be enabled\nwith the parameter <tt>-fsanitize=address</tt>. It adds detection code for\ninvalid memory accesses to an executable. Many memory access bugs, such as out-of-bounds reads or use-after-free errors, often don\'t cause an application to crash. With normal fuzzing, they would pass by unnoticed. AddressSanitizer changes that and stops the application execution on every read or write to an invalid memory location. In american fuzzy lop, the use of AddressSanitizer can be enabled by setting the <tt>AFL_USE_ASAN</tt> environment variable to 1.</p>\n\n<p>There are, however, some caveats. While AddressSanitizer is remarkably\nfast compared to other similar tools like Valgrind, it still slows down the\nexecution significantly. It is therefore sometimes suggested to run the\nfuzzing process without it. The queue directory generated by\n<tt>afl-fuzz</tt> contains all the input samples it considered interesting\nbecause they triggered new code paths. These can then be manually tested\nwith an ASan-compiled version of the software.\n\n</p><p>\nAddressSanitizer allocates a huge amount of virtual memory—on 64-bit\nsystems, several terabytes. As it is only virtual memory and only small\nparts of it are actually used, this doesn\'t stop it from working. But\namerican fuzzy lop limits the memory for its tested applications. One easy\nway to work around this is to disable the memory limit of <tt>afl-fuzz</tt>\n(using the parameter <tt>-m none</tt>). In rare cases, this could lead\nto system instabilities because some inputs may cause an application to use\nlarge amounts of memory. American fuzzy lop also ships a more elegant\nsolution that limits the memory via control groups (cgroups).</p> \n\n<h4>Network fuzzing is a challenge</h4>\n\n<p>The biggest limitation of american fuzzy lop is that it only supports\nfile inputs. In many cases, the most interesting pieces of code from a\nsecurity perspective are the parsers for networking functions. Sometimes\nthis limitation can be worked around. In the Heartbleed experiment mentioned earlier, it was possible to create a small <a href=\"https://github.com/hannob/selftls\">tool for the OpenSSL handshake</a> that would take a raw network packet on the command line and swap it with parts of the real handshake. This was possible because the OpenSSL API allows doing a handshake, without any real network connection, just by passing buffers between different contexts. But in many other situations it is not that easy.</p>\n\n<p>Some attempts have been made to intercept networking functions by preloading a library with <tt>LD_PRELOAD</tt> that would then use a file input and pass it as networking input to an application. One such attempt, called <a href=\"https://github.com/zardus/preeny\">Preeny</a>, is publicly available. However, these attempts turned out to be relatively fragile and only work on a small fraction of real-world applications. Combining american fuzzy lop with network fuzzing in a way that works on a wide variety of applications is still an open challenge.</p>\n\n<p>An active community has built a number of <a href=\"https://github.com/mirrorer/afl/blob/master/docs/sister_projects.txt\">extensions\nand additional tools</a> that can be used alongside american fuzzy\nlop. There are variants for Python, Rust, and Go, a special QEMU mode that\nallows fuzzing binary applications on Linux without having access to the\nsource code, and many more. The developers of the LLVM compiler framework\nhave implemented a <a href=\"http://blog.llvm.org/2015/04/fuzz-all-clangs.html\">special fuzzing\nmode for libraries</a> that borrows several ideas from american fuzzy\nlop.</p>\n\n<p>\nThe origin of the name american fuzzy lop—a rabbit breed—can be traced\nback to an earlier tool Zalewski wrote: <a href=\"http://code.google.com/p/bunny-the-fuzzer/\">Bunny the\nFuzzer</a>. \"<span>Bunny wasn\'t particularly great, but when I decided to\nrevisit \nthe idea many years later, I felt that it\'s appropriate to allude to that\nin some way</span>\", Zalewski <a href=\"https://groups.google.com/forum/#!topic/afl-users/wRoLaG73rG4\">wrote</a>\nin a post to the afl-users mailing list. \n\n</p><p>American fuzzy lop has helped redefine and revive the technique of\nfuzzing. In combination with AddressSanitizer, it is a powerful method to\nimprove the quality of software and to find a lot of hidden and otherwise\nhard-to-find bugs. It has its limitations, but the biggest limitation is\nprobably that it is not used widely enough yet. Almost every piece of\nsoftware written in C or C++ that takes input from potentially dangerous\nsources can and should be tested using american fuzzy lop.</p>\n\n<p>[The author started <a href=\"https://fuzzing-project.org/\">The Fuzzing\nProject</a> last year, in an effort to fuzz as many free software applications as possible. His work for The Fuzzing Project is supported by the Linux Foundation\'s <a href=\"https://www.coreinfrastructure.org/\">Core Infrastructure Initiative</a>.]</p><hr width=\"60%\" align=\"left\" />\n           (<a href=\"https://lwn.net/login?target=/Articles/657959/\">Log in</a> to post comments)\n           ',1),(196,'Khan/KaTeX','https://github.com/Khan/KaTeX',1,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://gitter.im/Khan/KaTeX?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Join the chat at https://gitter.im/Khan/KaTeX\" /></a></p>\n\n<p>KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.</p>\n\n<ul><li><strong>Fast:</strong> KaTeX renders its math synchronously and doesn\'t need to reflow the page. See how it compares to a competitor in <a href=\"http://jsperf.com/katex-vs-mathjax/\">this speed test</a>.</li>\n<li><strong>Print quality:</strong> KaTeX’s layout is based on Donald Knuth’s TeX, the gold standard for math typesetting.</li>\n<li><strong>Self contained:</strong> KaTeX has no dependencies and can easily be bundled with your website resources.</li>\n<li><strong>Server side rendering:</strong> KaTeX produces the same output regardless of browser or environment, so you can pre-render expressions using Node.js and send them as plain HTML.</li>\n</ul><p>KaTeX supports all major browsers, including Chrome, Safari, Firefox, Opera, and IE 8 - IE 11.  A list of supported  commands can be on the <a href=\"https://github.com/Khan/KaTeX/wiki/Function-Support-in-KaTeX\">wiki</a>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Khan/KaTeX#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>You can <a href=\"https://github.com/khan/katex/releases\">download KaTeX</a> and host it on your server or include the <code>katex.min.js</code> and <code>katex.min.css</code> files on your page directly from a CDN:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">link</span> <span class=\"pl-e\">rel</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stylesheet<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min.css<span class=\"pl-pds\">\"</span></span>&gt;\n&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/Khan/KaTeX#in-browser-rendering\"><span class=\"octicon octicon-link\"></span></a>In-browser rendering</h4>\n\n<p>Call <code>katex.render</code> with a TeX expression and a DOM element to render into:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>katex.render(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c = <span class=\"pl-cce\">\\\\</span>pm<span class=\"pl-cce\">\\\\</span>sqrt{a^2 + b^2}<span class=\"pl-pds\">\"</span></span>, element);</pre></div>\n\n<p>If KaTeX can\'t parse the expression, it throws a <code>katex.ParseError</code> error.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/Khan/KaTeX#server-side-rendering-or-rendering-to-a-string\"><span class=\"octicon octicon-link\"></span></a>Server side rendering or rendering to a string</h4>\n\n<p>To generate HTML on the server or to generate an HTML string of the rendered math, you can use <code>katex.renderToString</code>:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> html <span class=\"pl-k\">=</span> katex.renderToString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c = <span class=\"pl-cce\">\\\\</span>pm<span class=\"pl-cce\">\\\\</span>sqrt{a^2 + b^2}<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-c\">// \'&lt;span class=\"katex\"&gt;...&lt;/span&gt;\'</span></pre></div>\n\n<p>Make sure to include the CSS and font files, but there is no need to include the JavaScript. Like <code>render</code>, <code>renderToString</code> throws if it can\'t parse the expression.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/Khan/KaTeX#rendering-options\"><span class=\"octicon octicon-link\"></span></a>Rendering options</h4>\n\n<p>You can provide an object of options as the last argument to <code>katex.render</code> and <code>katex.renderToString</code>. Available options are:</p>\n\n<ul><li><code>displayMode</code>: <code>boolean</code>. If <code>true</code> the math will be rendered in display mode, which will put the math in display style (so <code>\\int</code> and <code>\\sum</code> are large, for example), and will center the math on the page on its own line. If <code>false</code> the math will be rendered in inline mode. (default: <code>false</code>)</li>\n<li><code>throwOnError</code>: <code>boolean</code>. If <code>true</code>, KaTeX will throw a <code>ParseError</code> when it encounters an unsupported command. If <code>false</code>, KaTeX will render the unsupported command as text in the color given by <code>errorColor</code>. (default: <code>true</code>)</li>\n<li><code>errorColor</code>: <code>string</code>. A color string given in the format <code>\"#XXX\"</code> or <code>\"#XXXXXX\"</code>. This option determines the color which unsupported commands are rendered in. (default: <code>#cc0000</code>)</li>\n</ul><p>For example:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>katex.render(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c = <span class=\"pl-cce\">\\\\</span>pm<span class=\"pl-cce\">\\\\</span>sqrt{a^2 + b^2}<span class=\"pl-pds\">\"</span></span>, element, { displayMode<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span> });</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/Khan/KaTeX#automatic-rendering-of-math-on-a-page\"><span class=\"octicon octicon-link\"></span></a>Automatic rendering of math on a page</h4>\n\n<p>Math on the page can be automatically rendered using the auto-render extension. See <a href=\"https://github.com/Khan/KaTeX/blob/master/contrib/auto-render/README.md\">the Auto-render README</a> for more information.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Khan/KaTeX#contributing\"><span class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>See <a href=\"https://github.com/Khan/KaTeX/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Khan/KaTeX#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>KaTeX is licensed under the <a href=\"http://opensource.org/licenses/MIT\">MIT License</a>.</p>\n',1),(197,'iiSeymour/chromote','https://github.com/iiSeymour/chromote',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Simple wrapper to drive Google Chrome from Python using the Remote Debugging Protocol 1.1 API</p>\n\n<p><a href=\"https://developer.chrome.com/devtools/docs/protocol/1.1/index\">https://developer.chrome.com/devtools/docs/protocol/1.1/index</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/iiSeymour/chromote#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<pre><code>$ pip install chromote\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/iiSeymour/chromote#api\"><span class=\"octicon octicon-link\"></span></a>API</h2>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;&gt;</span> <span class=\"pl-k\">from</span> chromote <span class=\"pl-k\">import</span> Chromote\n<span class=\"pl-k\">&gt;&gt;&gt;</span> chrome <span class=\"pl-k\">=</span> Chromote()\n<span class=\"pl-k\">&gt;&gt;&gt;</span> chrome\nChromote(<span class=\"pl-smi\">host</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>localhost<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">port</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">9222</span>)\n<span class=\"pl-k\">&gt;&gt;&gt;</span> <span class=\"pl-k\">print</span> chrome\n[Chromote(<span class=\"pl-smi\">tabs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)]\n<span class=\"pl-k\">&gt;&gt;&gt;</span> tab <span class=\"pl-k\">=</span> chrome.tabs[<span class=\"pl-c1\">0</span>]\n<span class=\"pl-k\">&gt;&gt;&gt;</span> <span class=\"pl-k\">print</span> tab\nGoogle <span class=\"pl-k\">-</span> https:<span class=\"pl-k\">//</span>www.google.co.uk<span class=\"pl-k\">/</span>\n<span class=\"pl-k\">&gt;&gt;&gt;</span> <span class=\"pl-k\">print</span> tab.url\nhttps:<span class=\"pl-k\">//</span>www.google.co.uk<span class=\"pl-k\">/</span>\n<span class=\"pl-k\">&gt;&gt;&gt;</span> tab.reload()\n<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>{\"result\":<span class=\"pl-c1\">{}</span>,\"id\":1}<span class=\"pl-pds\">\'</span></span>\n<span class=\"pl-k\">&gt;&gt;&gt;</span> tab.set_url(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>https://github.com/chromote<span class=\"pl-pds\">\'</span></span>)\n<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>{\"id\":2,\"result\":<span class=\"pl-c1\">{}</span>}<span class=\"pl-pds\">\'</span></span>\n<span class=\"pl-k\">&gt;&gt;&gt;</span> tab.set_zoom(<span class=\"pl-c1\">1.2</span>)\n<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>{\"id\":1,\"result\":{\"result\":{\"type\":\"number\",\"value\":1.2,\"description\":\"1.2\"},\"wasThrown\":false}}<span class=\"pl-pds\">\'</span></span>\n<span class=\"pl-k\">&gt;&gt;&gt;</span> tab.evaluate(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>alert(\"Remotey\");<span class=\"pl-pds\">\'</span></span>)</pre></div>\n\n<p>Note: Google Chrome needs starting with the <code>-remote-debugging-port=&lt;PORT&gt;</code> option to be controlled remotely.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/iiSeymour/chromote#remote-browser-control\"><span class=\"octicon octicon-link\"></span></a>Remote Browser Control</h2>\n\n<p>The remote debugging port binds to localhost only so using chromote with a remote\nmachine like a dashboard/kiosk setup will require tunneling to the machine first.</p>\n\n<p>On the remote machine start Google Chrome:</p>\n\n<pre><code>$ chromium-browser &lt;URL&gt; --incognito --kiosk -remote-debugging-port=9222\n</code></pre>\n\n<p>On the local machine set up a tunnel to map the remote debugging port to 9222 on localhost:</p>\n\n<pre><code>$ ssh remote-machine -L 9222:localhost:9222\n</code></pre>\n\n<p>You can then drive your dashboard/kiosk machine remotely to display the content you want.</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> time <span class=\"pl-k\">import</span> sleep\n<span class=\"pl-k\">from</span> chromote <span class=\"pl-k\">import</span> Chromote\n\nchrome <span class=\"pl-k\">=</span> Chromote()\ntab <span class=\"pl-k\">=</span> chrome.tabs[<span class=\"pl-c1\">0</span>]\n\nsites <span class=\"pl-k\">=</span> [\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>https://github.com<span class=\"pl-pds\">\'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>http://stackoverflow.com<span class=\"pl-pds\">\'</span></span>,\n]\n\n<span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n    <span class=\"pl-k\">for</span> site <span class=\"pl-k\">in</span> sites:\n        tab.set_url(site)\n        sleep(<span class=\"pl-c1\">30</span>)</pre></div>\n',1),(198,'Untitled','https://code.tutsplus.com/tutorials/monitor-and-control-applications-using-supervisor-part-2--cms-24236',0,0,'[unable to retrieve full-text content]',1),(199,'Adonis Js - NodeJs MVC framework','http://adonisjs.com/',0,0,'\n<pre><code class=\"line-numbers language-javascript\">\n/**\n * define controller using ES6 class\n */\nclass HomeController{\n\n  *index(request,response){\n      return \"Everything has beauty , but not everyone sees it\"\n  }\n\n}\n\n/**\n * bind controller method as strings\n */\nRoute.get(\'/\',\'HomeController.index\')\n</code></pre>\n				',1),(200,'Looking at open source PaaS technologies','https://gdstechnology.blog.gov.uk/2015/10/27/looking-at-open-source-paas-technologies/',0,0,'\n      <p>I’ve been working on a prototype of what a Platform as a Service (PaaS) for government might look like, as we wrote about in <a href=\"https://gds.blog.gov.uk/2015/09/08/building-a-platform-to-host-digital-services/\">a previous post</a>. <span></span> One of the first things we did was look at the open source PaaS options that were available. This post is about how we did that and what we learned.</p>\n<p><img src=\"https://gdstechnology.blog.gov.uk/wp-content/uploads/sites/31/2015/10/comparison_of_PAASes-1024x614.jpg\" alt=\"Comparison table of PaaS\" width=\"620\" height=\"372\" class=\"alignnone size-large wp-image-1258\" /></p>\n<h2>The open source options we considered</h2>\n<p>We looked at a range of proprietary and open source options. In this post, I am focusing on open source. This is because much of the information we learned about the proprietary options was shared in commercial confidence. I’ll talk more about the proprietary options we considered and how we compared them in a later post.</p>\n<h2>Exploring the options</h2>\n<p>PaaS is a very fast-moving field at the moment and there are a lot of options. The first thing we did was take some time individually within the team to identify which options were worth investigating. We based that on previous experience, things we’d read about, and further research online. We were around eight people on the team, so we had a lot to draw on.</p>\n<p>It’s not always the case that you are comparing like-for-like with PaaS technologies. For example, <a href=\"https://www.cloudfoundry.org/\">Cloud Foundry</a> is a fully-featured PaaS, whereas <a href=\"http://mesos.apache.org/\">Mesos</a> is a cluster-management system. While Mesos on its own has a number of PaaS features, it didn’t meet a combination of the criteria \"developer self-service\" and \"multi-tenancy\" (e.g. no authentication, access control).</p>\n<p>I wanted to investigate Mesos as it’s an interesting technology, so we looked at ways to combine it with other technologies who offer those features. We chose combinations of technologies based on what we found to be common combinations. In this example, you can see we looked at both <a href=\"http://mesos.apache.org/\">Mesos</a> + <a href=\"http://aurora.apache.org/\">Aurora</a>, and <a href=\"http://mesos.apache.org/\">Mesos</a> + <a href=\"https://mesosphere.github.io/marathon/\">Marathon</a> + <a href=\"https://mesos.github.io/chronos/\">Chronos</a> (Mesosphere). </p>\n<p>At this stage, we ruled out things that we didn’t think were worth investigating further (for example, they were nowhere near production-ready) and worked out some combinations that made sense to look more into. </p>\n<p>The longlist of technologies we investigated is:</p>\n<h2>Our selection criteria</h2>\n<p>In our previous post I outlined the four main criteria we’d identified from our user research: a PaaS would have to be multi-tenant, self-service, allow application developer support and be able to run on multiple public clouds. This had already allowed us to rule out some technologies (for example, a number of PaaS technologies only run on AWS). We also had some further must-have criteria. The complete list of our selection criteria is below:</p>\n<p><em>Must haves:</em></p>\n<ul><li>Multi-vendor capabilities</li>\n<li>Developer self-service model</li>\n<li>Support for scaling application instances with ease (elastic scaling, manual, self serve)</li>\n<li>Support for Linux</li>\n<li>Ability to choose application language</li>\n<li>Ability to recover from failure of all hosts</li>\n<li>Ability to maximise the application availability during underlying host failure</li>\n<li>Zero downtime deploys</li>\n<li>Some multi-tenancy capabilities</li>\n<li>Access to raw stdout / stderr logs</li>\n</ul><p><em>Investigation points</em></p>\n<ul><li>What is involved in deploying applications to this PaaS?</li>\n<li>How easy is the maintenance/operation for the team maintaining the platform?</li>\n<li>Is there a hosted option available?</li>\n<li>Could the unit of deployment be used without the PaaS?</li>\n<li>How well documented is the PaaS? Do they keep their documentation up to date?</li>\n<li>What type of multi-tenancy support is offered?</li>\n<li>Is there commercial support/consulting available?</li>\n<li>What different levels of access permissions does the PaaS support?</li>\n<li>Is it open source?</li>\n<li>Does the PaaS provide any database service?</li>\n<li>What is the language/tech?</li>\n<li>What APIs are available to enable application developers to manage their own applications?</li>\n<li>Is this technology production-ready now?</li>\n<li>Is there a cost associated with this and what is it?</li>\n<li>How do we get data on which application is using which resources?</li>\n<li>Is it possible to back up data from the PaaS itself?</li>\n</ul><p><a href=\"https://twitter.com/pbansley\">Brett Ansley</a>, our business analyst, wrote these up very clearly and with acceptance criteria to clarify what we were looking for. For example, for zero downtime deploys:</p>\n<p>Given: an application that is receiving requests<br />When: a new version of the application is deployed<br />Then: there is no downtime of the application.</p>\n<h2>Comparing against our selection criteria</h2>\n<p>We then split into pairs and each pair took a technology in turn to evaluate it. <a href=\"https://twitter.com/dancarley\">Dan Carley</a>, our tech lead, outlined some consistent steps to take in each investigation so that we could be sure each pair was investigating in the same way. For example, to investigate high availability:</p>\n<ul><li>High availability (if self-hosted)</li>\n<li>Kill one of the hosts (if self-hosted)</li>\n<li>Repeat HTTPS requests to application endpoints</li>\n<li>Confirm that we have the same number of workers</li>\n<li>Restore host</li>\n</ul><p>Each pair spun up the technology they were using and investigated it. As they found the answer to each of the selection criteria, they marked it on the whiteboard (main photograph) so we (and any passers-by) could clearly see how we were progressing and which technologies had what. If any technology failed a must-have, the investigation would stop; otherwise it was time-boxed to two days.</p>\n<h2>Multi-tenancy</h2>\n<p>The overview of what we learned about each can be seen from the photograph of the whiteboard above, and is summarised in <a href=\"https://gdstechnology.blog.gov.uk/wp-content/uploads/sites/31/2015/10/Consolidated-evalution-of-PaaS-Technologies-Sheet1-1.csv\">this spreadsheet</a>. It’s worth noting that the spreadsheet is slightly more up-to-date than the photograph of the board; for example Rancher and Tsuru were late entries, and some answers were updated with more information that we learned later.</p>\n<p>One thing that I found particularly interesting was that multi-tenancy is not a feature of many of these technologies. For example, Kubernetes and Mesos, two widely used and interesting technologies, do not support multi-tenancy. There’s no way to ensure that a team of developers can administer only their application and not the applications of another team. This meant that they were not suitable for our purposes.</p>\n<h2>The tech that meets our needs</h2>\n<p>After going through this process of looking at and comparing a number of open source PaaS solutions, the clear front-runners were Deis, Tsuru, and Cloud Foundry. The next stage was to investigate these three technologies more and choose one to build a prototype. This has helped us with user research, which we\'ll share more on later. In the meantime, we hope sharing what we’ve learnt about these technologies is useful to you, and do let us know your thoughts in the comments below.</p>\n<p>You can <a href=\"https://twitter.com/annashipman\">follow Anna on Twitter</a>, <a href=\"https://public.govdelivery.com/accounts/UKGOVUK/subscriber/new?topic_id=UKGOVUK_7538\">sign up now for email updates from this blog</a> or <a href=\"https://gdstechnology.blog.gov.uk/feed/atom/\">subscribe to the feed</a>.</p>\n<blockquote class=\"noquotes\"><p>If this sounds like a good place to work, take a look at <a href=\"https://gds.blog.gov.uk/working-for-gds/\">Working for GDS</a> - we\'re usually in search of talented people to come and join the team.</p></blockquote>\n    ',1),(201,'teslajs.com','http://teslajs.com/',0,0,'<h3><a href=\"http://teslajs.com/#features\">Features</a></h3>\n    <h3><a href=\"http://teslajs.com/#installation\">Installation</a></h3>\n\n        <h4><a href=\"http://teslajs.com/#prerequisites\">Prerequisites</a></h4>\n        <h4><a href=\"http://teslajs.com/#installing-tesla\">Installing Tesla</a></h4>\n\n    <h3><a href=\"http://teslajs.com/#quick-start\">Quick Start</a></h3>\n\n    <h3><a href=\"http://teslajs.com/#setup-options\">Setup Options</a></h3>\n        <h4><a href=\"http://teslajs.com/#basic-settings\">Basic Settings</a></h4>\n            <h5><a href=\"http://teslajs.com/#mvc-scaffolding\">MVC Scaffolding</a></h5>\n            <h5><a href=\"http://teslajs.com/#html-templating-engines\">HTML Templating Engines</a></h5>\n            <h5><a href=\"http://teslajs.com/#css-pre-processors\">CSS Pre-Processors</a></h5>\n\n        <h4><a href=\"http://teslajs.com/#front-end-tools\">Front-End Tools</a></h4>\n            <h5><a href=\"http://teslajs.com/#javascript-application-frameworks\">JavaScript Application Frameworks</a></h5>\n            <h5><a href=\"http://teslajs.com/#javascript-libraries\">JavaScript Libraries</a></h5>\n            <h5><a href=\"http://teslajs.com/#css-frameworks\">CSS Frameworks</a></h5>\n\n        <h4><a href=\"http://teslajs.com/#real-world-examples\">Real World Examples</a></h4>\n\n        <h4><a href=\"http://teslajs.com/#all-tesla-cli-options\">All Tesla CLI Options</a></h4>\n\n    <h3><a href=\"http://teslajs.com/#configuration\">Configuration</a></h3>\n        <h4><a href=\"http://teslajs.com/#default-config-file\">Default Config File</a></h4>\n        <h4><a href=\"http://teslajs.com/#environmental-settings\">Environmental Settings</a></h4>\n        <h4><a href=\"http://teslajs.com/#development-environment-example\">Dev Environment Example</a></h4>\n\n\n    <h3><a href=\"http://teslajs.com/#routing\">Routing</a></h3>\n\n    <h3><a href=\"http://teslajs.com/#working-with-data\">Working with Data</a></h3>\n        <h4><a href=\"http://teslajs.com/#models\">Models</a></h4>\n        <h4><a href=\"http://teslajs.com/#controllers\">Controllers</a></h4>\n\n    <h3><a href=\"http://teslajs.com/#views\">Views</a></h3>\n\n    <h3><a href=\"http://teslajs.com/#troubleshooting\">Troubleshooting</a></h3>\n        <h4><a href=\"http://teslajs.com/#updatenpm-bower-or-gulp\">Update NPM, Bower or Gulp</a></h4>\n        <h4><a href=\"http://teslajs.com/#cleaning-npm-and-bower-cache\">Cleaning NPM &amp; Bower cache</a></h4>\n\n    <h3><a href=\"http://teslajs.com/#deployment-section\">Deploying</a></h3>\n        <h4><a href=\"http://teslajs.com/#heroku-quick-deployment\">Heroku</a></h4>\n    <h3><a href=\"http://teslajs.com/#credits\">Credits</a></h3>\n\n<p>Tesla is a modern MVC style framework built on top of <a href=\"http://nodejs.org/\">Node.js</a> and <a href=\"http://expressjs.com/\">Express</a>. It\'s built to be fast, simple and easy to configure, with sane defaults and flexible boilerplates to get you up and running as quickly as possible.</p>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n    <h2>Features</h2>\n\n    <h4>MVC</h4>\n        <p>Simple but useful MVC structure with optional scaffolding that can auto-create models, controllers &amp; even a simple JSON API for you. Models use Node-ORM so you’re not tied to a specific database.</p>\n    <h4>Auto-routing</h4>\n        <p>If your url’s follow a domain.com/controller/action/:id or domain.com/view/index format, there’s no need to create any custom routing. Tesla will attempt to automatically load the controller/view if it can find it, and throw a 404 if it’s not.</p>\n    <h4>Flexible Templates</h4>\n        <p>You can choose from EJS, Handlebars, Hogan, Jade or Mustache for templates. Less, Sass &amp; Stylus are available for css pre-processors.</p>\n    <h4>Boilerplates</h4>\n        <p>Tesla uses a combination of npm and bower to help create some useful boilerplates when setting up a new app. You can choose to have Tesla add things like jQuery, AngularJS, Foundation, etc. to your view templates automatically when it creates the project.</p>\n    <h4>Auto-watch &amp; LiveReload</h4>\n        <p>Tesla utilizes the Gulp task runner to watch for file changes, restarting the server when necessary. It also comes with LiveReload out of the box to auto refresh your browser when files change.</p>\n    <h4>Socket.io</h4>\n        <p>Tesla has Socket.io built right in, so if you need to work with Websockets there\'s no setup or configuration needed, it just works!</p>\n    <h4>Easy Configuration</h4>\n        <p>Almost all of the server settings (port number, database settings, etc.) can be easily updated in the config file.</p>\n    <a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h2>Installation</h2>\n\n\n<h4>Prerequisites:</h4>\n\n<p><a href=\"http://nodejs.org/\">Node.js</a> &amp; <a href=\"https://npmjs.org/\">NPM</a> are the only absolute requirements, but it\'s highly recommended that you install <a href=\"http://gulpjs.com/\">Gulp</a> as well:</p>\n\n<pre class=\"code\"><code>$ npm install gulp  -g\n</code></pre>\n\n<p>While it\'s not required, Tesla is configured to use Gulp for the majority of it\'s tasks. If you have any trouble installing it, refer to the <a href=\"https://github.com/gulpjs/gulp/blob/master/README.md#gulp---\">Gulp documentation</a> for help.</p>\n\n<h4>Install Tesla</h4>\n\n<p>Once you have NPM up &amp; running, getting Tesla installed is pretty painless:</p>\n\n<pre class=\"code\"><code>$ npm install tesla-cli -g\n</code></pre>\n\n\n<h4>Update Tesla</h4>\n<code class=\"code-inline\">$ npm update tesla-cli -g</code>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h2>Quick Start</h2>\n\n\n<p>Now that you have the command-line tool installed, you can create your first app:</p>\n\n<pre class=\"code\"><code>$ tesla mysite\n</code></pre>\n\n<p>This will create a new barebones site with the name \"mysite\". Next, install dependencies:</p>\n\n<pre class=\"code\"><code>$ cd mysite &amp;&amp; npm install\n</code></pre>\n\n<p>Start the server:</p>\n\n<pre class=\"code\"><code>$ gulp\n</code></pre>\n\n<p>Once the server has started, simply point your browser to: <a href=\"http://localhost:1856\">http://localhost:1856</a></p>\n\n<p>If you choose not to use Gulp, you can start the server by running <code class=\"code-inline\">node server.js</code>. But using Gulp gives you some extras such as livereload, and watching for changes your files &amp; restarting the server whenever necesary.</p>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h2>Setup Options</h2>\n\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h3>Basic Settings</h3>\n\n<p>As you\'ve seen, firing up a basic barebones site is pretty easy, but it\'s also a bit boring. Tesla is a lot more powerful than that, and it comes with a number of options that lets you create a boilerplate site with much more useful features</p>\n\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h5>MVC Scaffolding</h5>\n\n<p>Tesla includes a generator that will do the dirty work of creting &amp; linking controllers, models &amp; views for you. Let\'s say you have a databse of users that you want to interact with:</p>\n\n<pre class=\"code\"><code>$ tesla generate user\n</code></pre>\n\n<p>This one command will give you basic CRUD functionality via a very simple JSON api. See the <a href=\"http://teslajs.com/#working-with-data\">working with data</a> section for more info on scaffolding as well as working with models, controllers &amp; views.</p>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h5>HTML templating engines</h5>\n\n<p>By default, Tesla use Jade for HTML templates, but it supports 5 different templating languages: </p>\n\n<p>Options:</p>\n\n<p>Example:</p>\n\n<pre class=\"code\"><code>$ tesla myapp --html handlebars\n</code></pre>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h5>CSS pre-processors</h5>\n\n<p>The default setting will just use plain ol\' regular CSS. But if you want to use a css preprocessor, you have three options:</p>\n\n<p><strong>Options:</strong></p>\n\n<p><strong>Example:</strong></p>\n\n<pre class=\"code\"><code>$ tesla myapp --css stylus\n</code></pre>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h5>CSS helper libraries</h5>\n\n<p><strong>Options:</strong></p>\n\n<h5>NOTE: These helper libraries aren\'t fully tested yet, so please report any bugs you may find.</h5>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h3>Front-End Tools</h3>\n\n<p>Tesla utilizes Bower to let you quickly add many of your favorite front-end tools such as jQuery, Angular or Bootstrap. If you select any of these options, the package(s) will be added to your bower file, and any javascript or css dependencies will automatically added to the default views.</p>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h5>JavaScript Application Frameworks</h5>\n\n<p><strong>Options:</strong></p>\n\n<p><strong>Example:</strong></p>\n\n<pre class=\"code\"><code>$ tesla myapp --backbone\n</code></pre>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h5>JavaScript Libraries</h5>\n\n<p><strong>Options:</strong></p>\n\n<p><strong>Example:</strong></p>\n\n<pre class=\"code\"><code>$ tesla myapp --zepto\n</code></pre>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h5>CSS Frameworks</h5>\n\n<p><strong>Options:</strong></p>\n\n<p><strong>Example:</strong></p>\n\n<pre class=\"code\"><code>$ tesla myapp --gumby\n</code></pre>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h3>Real World Examples:</h3>\n\n<p>You can combine any number of the above options to customize your application to your liking:</p>\n\n<p><strong>Example 01: Create an app called foobar that uses EJS, Sass, AngularJS, &amp; jQuery</strong></p>\n\n<pre class=\"code\"><code>$ tesla foobar --html ejs --css sass --angular --jquery\n</code></pre>\n\n<p><strong>Example 02: Create an app called coil using Handlebars, Stylus, Axis, Foundation, Ember &amp; jQuery</strong></p>\n\n<pre class=\"code\"><code>$ tesla coil --html handlebars --css stylus --axis --foundation --ember --jquery\n</code></pre>\n\n<h4>All Tesla CLI Options:</h4>\n\n<p>Below is a reference listing all of the available options for the command-line tool:</p>\n\n<pre class=\"code\">Usage: tesla [options]\n\nOptions:\n\n// BASIC SETTINGS\n-H, --html &lt;engine&gt;  templating engine: (ejs|handlebars|hogan|jade|mustache) (defaults to Jade)\n-C, --css &lt;engine&gt;   add stylesheet support (less|sass|stylus) (defaults to vanilla css)\n-V, --version        output the version number\n-F, --force          force on non-empty directory\n\n// PRE-PROCESSOR LIBRARIES\n--axis               add Axis support for Stylus\n--bourbon            add Bourbon support for Sass\n--nib                add Nib support for Stylus\n\n// FE FRAMEWORKS\n--angular            add support for AngularJS\n--backbone           add support for BACKBONE.JS\n--ember              add support for Ember.js\n\n// JS LIBRARIES\n--jquery             add support for jQuery\n--modernizr           add support for Modernizr\n--zepto              add support for Zepto.js\n\n// CSS FRAMEWORKS\n--bootstrap          add support for Bootstrap\n--foundation         add support for Foundation\n--gumby              add support for Gumby\n--skeleton           add support for Skeleton\n\n// OTHER SETTINGS\ngenerate &lt;name&gt;      generate new model + controller with basic CRUD functionality\nstart                start the web server (still a bit buggy, best just just run \"gulp\" for now)\n</pre>\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h2>Configuration</h2>\n\n\n<p>All configuration for Tesla is specified in the <a href=\"http://teslajs.com/config/\">config</a> folder, particularly the <a href=\"http://teslajs.com/config/_settigs.js\">config.js</a> file and the <a href=\"http://teslajs.com/config/environment/\">env</a> files. This is where you will need to specify your application name, database connection, and any other settings you would like to customize.</p>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h5>Default config file: <a href=\"http://teslajs.com/config/_settigs.js\">config.js</a></h5>\n\n<p>Most default settings can be set &amp; updated here:</p>\n\n<pre class=\"code\"><code>app.site = {\n    name : \"tesla.js\", // the name of your app\n}\n\napp.config = app.site = {\n    name : \"tesla-js\", // the name of you app\n}\n\napp.config = {\n    port : 1856, // port to run the server on\n\n    prettify : {\n        html : true, // whether to pretify html\n        css : true, // whether to pretify css\n        js : true // whether to pretify js\n    },\n\n    cache : false, // whether to use caching\n\n    api : {\n        enabled : true,\n        format : \'json\',\n        access : \'*\'\n    },\n\n    engines : {\n        html: \"hbs\", // options: [jade|ejs|haml|hjs|jshtml]\n        css: \"stylus\", // options: [stylus|sass|less]\n        cssLibrary: false, // options: [nib|axis]\n    },\n    root : rootPath,\n\n    db : {\n        url : \"mongodb://:@mongohq.com:10074/dbname\", // url to database\n        driver: \"mongodb\"\n    },\n\n    jsonp : true, // allow jsonp requests\n    secret : \'MYAPPSECRET\',\n    protocol : \'http://\',\n    autoLoad : true, // whether to attempt autoload controllers\n    publicDir : \'./public\',\n\n    logging : {\n        console: true, // whether to allow tesla to log messages to the node console\n        files: false // this doesn\'t do anything yet\n    }\n}\n}\n</code></pre>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h3>Environmental Settings</h3>\n\n<p>To run with a different environment, just specify NODE_ENV as you call gulp:</p>\n\n<pre class=\"code\"><code>$ NODE_ENV=test gulp\n</code></pre>\n\n<p>If you are using node instead of gulp, it is very similar:</p>\n\n<pre class=\"code\"><code>$ NODE_ENV=test node server\n</code></pre>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h5>Example config file for \"development\" environment: <a href=\"http://teslajs.com/config/environment/development.js\">config/environment/development.js</a></h5>\n\n<pre class=\"code\"><code>// GET IP / DOMAIN\nvar interfaces = os.networkInterfaces();\nvar addresses = [];\nfor (k in interfaces) {\n    for (k2 in interfaces[k]) {\n        var address = interfaces[k][k2];\n        if (address.family == \'IPv4\' &amp;&amp; !address.internal) {\n            addresses.push(address.address)\n        }\n    }\n}\n\nvar tesla = require(\'../../lib/tesla\')(app);\n\n// global settings\napp.site.domain = addresses[0];\napp.site.environment = \"development\";\napp.site.url = app.config.protocol + app.site.domain + \':\'  + app.config.port + \'/\'; // base url\n\n// directories\napp.site.dir = {\n    css : app.site.url + \"css/\",\n    img : app.site.url + \"img/\",\n    lib : app.site.url + \"lib/\",\n    js : app.site.url + \"js/\"\n};\n</code></pre>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h2>Routing</h2>\n\n\n<p>Tesla comes with an automatic routing system which should save you the trouble of manually creating routes for your site 99% of the time. The routing is based on the following URI structure:</p>\n\n<pre class=\"code\"><code>http://localhost:1856/controller/action/:id\n</code></pre>\n\n<p>Let\'s say you called the following url:</p>\n\n<pre class=\"code\"><code>http://localhost:1856/foo/bar\n</code></pre>\n\n<p>The router will attempt to find a matching controller in this order:</p>\n\n<ol><li>app/controllers/fooController.js</li>\n<li>app/controllers/foo/indexController.js</li>\n<li>app/controllers/foo/barController.js </li>\n</ol><p>If it does not find a matching controller, it will use <em>app/controllers/autoController.js</em> and attempt to load one of the following views as a last resort:</p>\n\n<ol><li>app/views/foo.js</li>\n<li>app/views/foo/index.js</li>\n<li>app/views/foo/bar.js </li>\n<li>app/views/foo/bar/index.js </li>\n</ol><p>If it\'s unable to find a matching controller or view, the router will throw a 404 error.</p>\n\n\n<h3>Custom Routes</h3>\n<p>If the default url scheme doesn\'t work for your site, you can easily create your own custom routes.</p>\n\n<p>Routes are configured in the <em>app/routes</em> directory. The default router as well as a few sample routes can be found in: <a href=\"http://teslajs.com/app/routes/_setup.js\">app/routes/_setup.js</a></p>\n\n<h4>HELLO WORLD</h4>\n\n<p>This is one of thie simplest routes. If you receive a request to domain.com/hello/world, it will load <a href=\"http://teslajs.com/app/controllers/hello/worldController.js\">app/controllers/hello/worldController</a>.</p>\n\n<pre class=\"code\"><code>app.get(\"/hello/world\", function(req, res) {\n    require(controllers + \'hello/worldController\')(app, res, res);\n});\n</code></pre>\n\n\n<h4>FOO BAR</h4>\n\n<p>This example loads the controller directly, and lets it handle its own routing. Take a look at  <a href=\"http://teslajs.com/app/controllers/fooController.js\">app/controllers/fooController</a> if you\'re curious how it works.</p>\n\n<pre class=\"code\"><code>require(controllers + \'fooController\')(app);</code></pre>\n\n\n<h4>DYNAMIC ROUTING</h4>\n\n<p>This example shows how you can use dynamic routing to create RESTful CRUD style urls:</p>\n\n<pre class=\"code\"><code>// EXAMPLE OF CRUD STYLE ROUTER &amp; CONTROLLER\napp.get(\"/:controller/:action/:id?\", function(req, res) {\n    require(controllers + req.params.controller + \'Controller\')[req.params.action](app, req, res);\n});</code></pre>\n\n<p>If you have Tesla running, try hitting the following URL\'s in your browser:</p>\n\n<p>Have a look at <a href=\"http://teslajs.com/app/controllers/crudController.js\">app/controllers/crudController</a> if you\'re curious how it works.</p>\n\n\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h2>Working with data</h2>\n\n\n<p>Working with data &amp; creating models in Tesla is super easy. It takes only 2 steps:</p>\n\n<p><strong>1. Add your database:</strong><br />To work with data make sure you set the URL for your database (config.db.url) in the <a href=\"https://github.com/teslajs/tesla.js/blob/master/config/_settigs.js\">config file</a>.</p>\n\n<p><strong>2. Generate a new model:</strong><br />let\'s say you have a collection called \"user\" you want to use with your app, all you need to do is run the following command:</p>\n\n<pre class=\"code\"><code>$ tesla generate user</code></pre>\n\n<p>This will create 2 new files for you:\n</p><ul><li>app/models/userModel.js</li>\n<li>app/controllers/userController.js</li>\n</ul><br /><h4>Models</h4>\n\n<p>As long as your databse URL is set properly, this is all you need to do. However, you will almost certainly want to open up your new model and define the schema for your database table/collection.</p>\n\n<p>In this file, you will see a block that looks something like this:</p>\n\n<pre class=\"code\"><code>var Model = db.define(\"user\", {\n    created    : { type: \"date\", time: true },\n    updated    : { type: \"date\", time: true }\n    // _id     : { type: \"text\" },\n    // name    : { type: \"text\", required: true },\n    // isAdmin : { type: \"boolean\", defaultValue: false },\n}, {\n    validations: {\n        // EXAMPLE VALIDATIONS\n        // password: orm.enforce.security.password(\'luns5\', \'Passowrd does not meet min security requirements.\'),\n        // email: orm.enforce.patterns.email(\'Please enter a valid email address.\')\n        // More Options : https://github.com/dresende/node-enforce\n    }\n});\n</code></pre>\n\n<p>This is wehere you will define what fields you want to be able to access. In the example above, this model only has access to \"created\" and \"updated\" fields. But it\'s almost certain that you will need to add more fields than this. There are a few commented out examples included to get you started.</p>\n\n<p>Tesla uses <a href=\"https://github.com/dresende/node-orm2\">Node-ORM</a> to provide basic ORM functionality &amp; databse abstraction. For more info on definifing models &amp; validations, <a href=\"https://github.com/dresende/node-orm2/wiki\">have a look at the ORM wiki</a>.</p>\n\n<p>Once you have your schema setup, that should be about all you need to do with the model in most cases. But feel free to muck about further down in the file if you need to do some more customization.</p>\n\n<h4>Controllers</h4>\n\n<p>By default, Tesla will serve up your data via a RESTful JSON api. If this is the result you want, you shouldn\'t need to make any changes to the generated controller. You get the following URI scheme by default:</p>\n\n<pre class=\"code\"><code>http://localhost:1856/user/all                            // retrieve all records\nhttp://localhost:1856/user/create?data&amp;goes&amp;here          // create a new record\nhttp://localhost:1856/user/delete/:id                     // delete a record\nhttp://localhost:1856/user/find?query&amp;terms&amp;here          // search for matching records\nhttp://localhost:1856/user/update/:id                     // update a record\n</code></pre>\n\n<p>It\'s worth noting that <strong>delete</strong> &amp; <strong>update</strong> require you to pass the databse ID as a url segment, while <strong>create</strong> &amp; <strong>find</strong> accept arguments via GET parameters. <strong>Create</strong> maps each GET parameter to a field in the databse (POST &amp; PUT support will come in the next iteration). For example, if you want to add the following data to your collection/table:</p>\n\n<pre class=\"code\"><code>name: Bob\nemail: bob@marley.com\n</code></pre>\n\n<p>Assuming you\'ve added the fields the the schema in your model, you would simple enter this into the browser:</p>\n\n<pre class=\"code\"><code>http://localhost:1856/user/create?name=Bob&amp;email=bob@marley.com\n</code></pre>\n\n<p>Similarly, if you want to retrieve all the records of people named Bob, you would build a request like this:</p>\n\n<pre class=\"code\"><code>http://localhost:1856/user/find?name=Bob</code></pre>\n\n<p>And you will get back a JSON view similar to this:</p>\n\n<pre class=\"code\"><code>[\n    {\n        name: \"Bob\"\n        email: \"bob@marley.com\"\n    },\n    {\n        name: \"Bob\"\n        email: \"bob@dylan.com\"\n    }\n]\n</code></pre>\n\n<p>This is the default behavior, but if you would rather serve up a standard html, it\'s a simple change. Simply open up your <a href=\"https://github.com/teslajs/tesla.js/blob/master/config/_settigs.js\">config file</a> and set \"config.api.enabled\" to \"false\". Now it will map the request to the appropriate view (assuming it exists). By default, you get 5 methods (all, create, delete, find, update). Continuing with our user example, you will get the following url &gt; view mapping:</p>\n\n<pre class=\"code\"><code>http://localhost:1856/user/all  &gt;  app/views/user/all\nhttp://localhost:1856/user/create?data&amp;goes&amp;here  &gt;  app/views/user/create\nhttp://localhost:1856/user/delete/:id  &gt;  app/views/user/delete\nhttp://localhost:1856/user/find?query&amp;terms&amp;here  &gt;  app/views/user/find\nhttp://localhost:1856/user/update/:id  &gt;  app/views/user/update\n</code></pre>\n\n<p>These are all setup in the controller, however you will need to create the appropriate view files or you will get a 404 error. The data from each request (which was previously spit out as a JSON view) will be sent to the view as an object called \"data\".</p>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h2>Views</h2>\n\n\n<p>Views can use <a href=\"http://embeddedjs.com/\">EJS</a>, <a href=\"http://handlebarsjs.com/\">Handlebars</a>, <a href=\"http://twitter.github.io/hogan.js/\">Hogan.js</a>, <a href=\"http://jade-lang.com/\">Jade</a> (default) or <a href=\"http://mustache.github.io/\">Mustache</a> templates. See the appropriate documentation for your chosen templating language for more info on how to use it.</p>\n\n\n\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h2>Troubleshooting</h2>\n\n\n<p>If you experience any issues during installation, here\'s a few tips that may help solve many common problems. If none of the below solve your problems, feel free to file a bug in the <a href=\"https://github.com/teslajs/tesla.js/issues\">Github issue tracker</a>.</p>\n\n<h4>Update NPM, Bower or Gulp</h4>\n\n<p>Sometimes you may find there is a weird error during install like npm\'s <em>Error: ENOENT</em>, usually updating those tools to the latest version solves the issue.</p>\n\n<h5>Updating NPM:</h5>\n\n<pre class=\"code\"><code>$ npm update -g npm\n</code></pre>\n\n<h5>Updating Gulp:</h5>\n\n<pre class=\"code\"><code>$ npm update -g gulp\n</code></pre>\n\n<h5>Updating Bower:</h5>\n\n<pre class=\"code\"><code>$ npm update -g bower\n</code></pre>\n\n<h4>Cleaning NPM and Bower cache</h4>\n\n<p>NPM and Bower have a caching system for holding packages that you already installed. Cleaeing the cache often solves created by caching.</p>\n\n<h5>NPM Clean Cache:</h5>\n<pre class=\"code\"><code>$ npm cache clean\n</code></pre>\n\n<h5>Bower Clean Cache:</h5>\n\n<pre class=\"code\"><code>$ bower cache clean\n</code></pre>\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n  <h2>Heroku Quick Deployment</h2>\n\n<p>\nTesla is configured to work with Heroku out of the box. To delpoy, just open a terminal window and follow these commands (be sure to replace {app_name} with the name of your app):\n</p>\n\n<p>Before you start, make sure you have <a href=\"https://toolbelt.heroku.com/\">Heroku toolbelt</a> installed.</p>\n\n<pre class=\"code\"><code class=\"bash\">heroku login // LOGIN\nheroku apps:create {app_name} // CREATE APP\nheroku config:add NODE_ENV=production --remote heroku --app {app_name} // SET ENVIRONMENT\nheroku labs:enable websockets // ENABLE WEB SOCKETS IF DESIRED\ngit push heroku master // PUSH TO HEROKU\n</code></pre>\n\n<a class=\"top-link\" href=\"http://teslajs.com/#home\">back to top</a>\n<h2>Credits</h2>\n\n\n<strong>Developed by:</strong> <a href=\"http://github.com/jesseweed\">Jesse Weed</a>\n\n<br /><strong>Inspired by:</strong> <a href=\"https://github.com/visionmedia/express\">Express</a>, <a href=\"http://sailsjs.org\">Sails.js</a> and <a href=\"https://github.com/linnovate/mean\">MEAN</a>.\n\n',1),(202,'3D collision detection â˜… Mozilla Hacks â€“ the Web developer blog','https://hacks.mozilla.org/2015/10/html-5-games-3d-collision-detection/',0,0,'<p>Last week we took a look at <a href=\"https://hacks.mozilla.org/2015/10/html-5-games-tilemaps/\">Tilemaps</a>, and I shared some new articles that I’d written on MDN. This week I’m back to introduce <strong>3D collision detection</strong>, an essential technique for almost any kind of 3D game. I’ll also point you to some more new articles about <a href=\"https://developer.mozilla.org/en/docs/Games\">game development</a> on MDN! Hope they inspire you to stretch your skills. </p>\n<p>In 3D game development, <strong>bounding volumes</strong> provide one of the most widely used techniques for determining whether two virtual objects will collide (i.e., intersect with each other) during game play. The technique of bounding volumes consists of wrapping game objects with some virtual volumes, and applying intersection algorithms to describe the movement and interaction of these volumes. You can think of this approach as a shortcut: it is easier and faster than detecting intersections between arbitrary, complex shapes.</p>\n<p>In terms of bounding volumes, the use of <strong>axis-aligned bounding boxes</strong> (AABB) is a popular option. Depending on the game, sometimes spheres are used as well. Here’s an image of some 3D objects wrapped with AABB:</p>\n<p><img class=\"aligncenter size-full wp-image-29406\" src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/10/Screen-Shot-2015-10-16-at-15.11.21.png\" alt=\"Screen Shot 2015-10-16 at 15.11.21\" width=\"432\" height=\"275\" /></p>\n<p>The new MDN article on <a href=\"https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection\">3D collision detection</a> describes how to use  generic algorithms to perform 3D collision detection with AABB and spheres. This article should be useful regardless of the game engine or programming language you are using to develop your game.</p>\n<p>We also published an article about doing <a href=\"https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">collision detection with bounding volumes using three.js</a>, a popular 3D library for JavaScript. (Learn more about <a href=\"http://threejs.org/\">three.js</a>.) </p>\n<p>Check out the <a href=\"http://mozdevs.github.io/gamedev-js-3d-aabb/\">live demos</a> and peek at <a href=\"https://github.com/mozdevs/gamedev-js-3d-aabb\">their source code</a>. One of the demos uses a <a href=\"https://en.wikipedia.org/wiki/Physics_engine\">physics engine</a> (in this case, <a href=\"http://www.cannonjs.org/\">Cannon.js</a>) to perform collision detection. Embedded below you can find another demo that shows how to use Three.js to detect collisions:</p>\n\n<p>Hope you enjoy the demos and find them useful. If there’s a particular topic in HTML5 game development you’d like to learn more about, please drop a comment here and let us know! We’ll try to get it covered for you.</p>    <p>Belén is an engineer and game developer working at Mozilla Developer Relations. She cares about web standards, high-quality code, accesibility and game development.</p>\n                    <p><a class=\"url\" href=\"https://hacks.mozilla.org/author/balbezamozilla-com/\">More articles by Belén Albeza…</a></p>\n                  <hr class=\"dino\" />',1),(203,'New visual editing and memory management tools â˜… Mozilla Hacks â€“ the Web developer blog','https://hacks.mozilla.org/2015/11/developer-edition-44-creative-tools-and-more/',0,0,'<p>This month marks the one-year anniversary of Firefox Developer Edition. To celebrate, we’re excited to show you some new tools – and some improvements to existing tools – that let you work with the Web in a visual and intuitive way.</p>\n\n<p>As the Web becomes a more dynamic, interactive and mobile experience, visual designers are more than ever experimenting with animation – and the latest Firefox Developer Edition has tools to make working with animations faster and easier. Firefox Developer Edition now gives visual designers and animators a set of visual editing tools that work like they do. We are addressing the technically challenging aspects of animation with a set of visceral, powerful, interactive tools that are comfortable for designers to use. Visual editing tools should appeal to animators, not just to programmers.</p>\n<h2>DevTools Challenger</h2>\n<p>Reading about our new tools is great, but trying them out yourself is even better! To help you get started, we partnered with acclaimed Web animation engineer and advocate <a href=\"http://rachelnabors.com/\">Rachel Nabors</a> to create <a href=\"http://devtoolschallenger.com/\">DevTools Challenger</a>. Check out DevTools Challenger for hands-on exercises with all of our new visual design tools. Remember to keep scrolling until you get to the ocean floor!</p>\n<p><a href=\"http://devtoolschallenger.com\"><img class=\"aligncenter wp-image-29433 size-large\" src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/challenger-500x409.png\" alt=\"Screenshot of the Devtools Challenger demo website\" width=\"500\" height=\"409\" /></a></p>\n<h2>Animation &amp; CSS Filter Tools</h2>\n<p>The Page Inspector’s animation panel makes it easy to scrub, pause, and visualize each animation on a webpage. Thanks to its tight integration in the DOM inspector, you can switch between a global view of every animation, or drill down to just a few nodes.</p>\n<p><a href=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/animationtools.png\"><img class=\"aligncenter size-full wp-image-29431\" src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/animationtools.png\" alt=\"animationtools\" width=\"1200\" height=\"1200\" /></a></p>\n<p>Once you’ve found the animation you want, our visual cubic-bezier editor is just a click away. Packed with useful presets, the editor will ensure your animation moves perfectly.</p>\n<p><a href=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/cubicbezier-cropped.png\"><img class=\"aligncenter wp-image-29427 size-large\" src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/cubicbezier-cropped-500x447.png\" alt=\"Screenshot of the visual cubic-bezier curve editor\" width=\"500\" height=\"447\" /></a></p>\n<p>We’ve also built a similar editor for CSS filters, allowing you to visually add, remove, re-order, and adjust filters with live feedback from the page.</p>\n<p><a href=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/filtereditor-cropped.png\"><img class=\"aligncenter wp-image-29428 size-large\" src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/filtereditor-cropped-500x266.png\" alt=\"filtereditor-cropped\" width=\"500\" height=\"266\" /></a></p>\n<h2>Measurements &amp; Colors</h2>\n<p>Firefox Developer Edition also features two brand new tools for fine-tuning layout: you can now enable pixel rulers along the page margins, or use our new measurement tool to drag-and-measure arbitrary regions of the page.</p>\n<p><a href=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/measuretools1.png\"><img class=\"aligncenter wp-image-29432 size-large\" src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/measuretools1-500x344.png\" alt=\"\" width=\"500\" height=\"344\" /></a></p>\n<p>The Inspector now defaults to displaying CSS colors “as authored,” and shift-clicking on a color swatch cycles between authored styles and equivalent hex, rgb, and hsl values. There’s even an eyedropper tool to pick colors right from the page.</p>\n<h2>Memory Snapshots</h2>\n<p>The new Memory tool helps front-end engineers better understand and optimize the way pages allocate and retain memory. The tool works by taking a snapshot of the heap, then allows you to drill down by retained object type, allocation stack, or internal representation. We think you’ll like it, and we’ve got many more features and enhancements in the works!</p>\n<p><a href=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/nyanparticles.png\"><img class=\"aligncenter wp-image-29449 size-large\" src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/nyanparticles-500x304.png\" alt=\"Screenshot of the DevTools memory panel\" width=\"500\" height=\"304\" /></a></p>\n<h2>WebSocket Debugging API</h2>\n<p>Lastly, we’re extremely excited to announce that Firefox now exposes an API for monitoring WebSocket frames (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1203802\">Bug 1203802</a>), which is the first step on the path to a full-fledged WebSocket inspection tool. Developer Tools engineer Jan Odvarko has built <a href=\"https://github.com/firebug/websocket-monitor/wiki\">an experimental add-on</a> for inspecting WebSocket traffic. Install the add-on and give it a try, we’d love your feedback.</p>\n<p><a href=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/websocket-demo.png\"><img class=\"aligncenter size-large wp-image-29450\" src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/websocket-demo-500x202.png\" alt=\"Screenshot of the experimental WebSocket Debugger add-on\" width=\"500\" height=\"202\" /></a></p>\n<p>Firefox Developer Edition is available at <a href=\"https://firefox.com/developer\">firefox.com/developer</a>. Let us know what you think about these features by commenting below or following <a href=\"https://twitter.com/FirefoxDevTools\">@FirefoxDevTools</a> on Twitter!</p>    <p>Dave Camp is Director of Engineering for Firefox at Mozilla.</p>\n                    <p><a class=\"url\" href=\"https://hacks.mozilla.org/author/dcampmozilla-com/\">More articles by Dave Camp…</a></p>\n                  <p>Engineer with Mozilla Developer Relations, former Mozilla Persona developer.</p>\n                    <p><a class=\"url\" href=\"https://hacks.mozilla.org/author/dcallahanmozilla-com/\">More articles by Dan Callahan…</a></p>\n                  ',1),(204,'Raathigesh/SemanticEdit','https://github.com/Raathigesh/SemanticEdit',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://raw.githubusercontent.com/Raathigesh/SemanticEdit/master/assets/SemanticEditLogo.png\"><img src=\"https://raw.githubusercontent.com/Raathigesh/SemanticEdit/master/assets/SemanticEditLogo.png\" alt=\"Logo\" /></a></p>\n\n\n\n<p>Real-time Preview Enabled <a href=\"http://semantic-ui.com/\">Semantic UI</a> Composer</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Raathigesh/SemanticEdit#how\"><span class=\"octicon octicon-link\"></span></a>How?</h2>\n\n<p>Copy the following Semantic-UI markup to <a href=\"http://semanticedit.meteor.com/\">Semantic Edit</a> editor.</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ui card<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>image<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">img</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://semantic-ui.com/images/avatar2/large/kristy.png<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;/<span class=\"pl-ent\">div</span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>content<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>header<span class=\"pl-pds\">\"</span></span>&gt;Kristy&lt;/<span class=\"pl-ent\">a</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>meta<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">span</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>date<span class=\"pl-pds\">\"</span></span>&gt;Joined in 2013&lt;/<span class=\"pl-ent\">span</span>&gt;\n    &lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>description<span class=\"pl-pds\">\"</span></span>&gt;\n      Kristy is an art director living in New York.\n    &lt;/<span class=\"pl-ent\">div</span>&gt;\n  &lt;/<span class=\"pl-ent\">div</span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>extra content<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span>&gt;\n      &lt;<span class=\"pl-ent\">i</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user icon<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">i</span>&gt;\n      22 Friends\n    &lt;/<span class=\"pl-ent\">a</span>&gt;\n  &lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n\n<p>You could copy and paste any <a href=\"http://semantic-ui.com/elements/button.html\">Semantic UI components</a>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Raathigesh/SemanticEdit#but-why\"><span class=\"octicon octicon-link\"></span></a>But Why?</h2>\n\n<p><a href=\"http://semantic-ui.com\">Semantic UI</a> is an awesome library with excellent components that you can use to quickly\nbuild web interfaces. But I felt like it would be nicer if we can compose bunch of elements and see in realtime how they\nfit together. That\'s why Semantic Edit.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Raathigesh/SemanticEdit#whats-under-the-hood\"><span class=\"octicon octicon-link\"></span></a>What\'s Under the Hood?</h2>\n\n<p>JavaScript! </p>\n\n<p>SemanticEdit uses the following</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/Raathigesh/SemanticEdit#thats-it\"><span class=\"octicon octicon-link\"></span></a>That\'s It?</h2>\n\n<p>I\'m hoping to add features as I move along. Got a feature suggestion? Would love to hear about it. Please create a new issues. </p>\n',1),(205,'Anyone Can Learn To Code an LSTM-RNN in Python (Part 1: RNN)','http://iamtrask.github.io/2015/11/15/anyone-can-code-lstm/',0,0,'\n\n				<p><b>Summary:</b> I learn best with toy code that I can play with. This tutorial teaches Recurrent Neural Networks via a very simple toy example, a short python implementation.</p>\n\n<p>I\'ll tweet out <b>(Part 2: LSTM)</b> when it\'s complete at <a href=\"https://twitter.com/iamtrask\">@iamtrask</a>. Feel free to follow if you\'d be interested in reading it and thanks for all the feedback!\n</p>\n<h3>Just Give Me The Code:</h3>\n<pre class=\"brush: python\">\nimport copy, numpy as np\nnp.random.seed(0)\n\n# compute sigmoid nonlinearity\ndef sigmoid(x):\n    output = 1/(1+np.exp(-x))\n    return output\n\n# convert output of sigmoid function to its derivative\ndef sigmoid_output_to_derivative(output):\n    return output*(1-output)\n\n\n# training dataset generation\nint2binary = {}\nbinary_dim = 8\n\nlargest_number = pow(2,binary_dim)\nbinary = np.unpackbits(\n    np.array([range(largest_number)],dtype=np.uint8).T,axis=1)\nfor i in range(largest_number):\n    int2binary[i] = binary[i]\n\n\n# input variables\nalpha = 0.1\ninput_dim = 2\nhidden_dim = 16\noutput_dim = 1\n\n\n# initialize neural network weights\nsynapse_0 = 2*np.random.random((input_dim,hidden_dim)) - 1\nsynapse_1 = 2*np.random.random((hidden_dim,output_dim)) - 1\nsynapse_h = 2*np.random.random((hidden_dim,hidden_dim)) - 1\n\nsynapse_0_update = np.zeros_like(synapse_0)\nsynapse_1_update = np.zeros_like(synapse_1)\nsynapse_h_update = np.zeros_like(synapse_h)\n\n# training logic\nfor j in range(10000):\n    \n    # generate a simple addition problem (a + b = c)\n    a_int = np.random.randint(largest_number/2) # int version\n    a = int2binary[a_int] # binary encoding\n\n    b_int = np.random.randint(largest_number/2) # int version\n    b = int2binary[b_int] # binary encoding\n\n    # true answer\n    c_int = a_int + b_int\n    c = int2binary[c_int]\n    \n    # where we\'ll store our best guess (binary encoded)\n    d = np.zeros_like(c)\n\n    overallError = 0\n    \n    layer_2_deltas = list()\n    layer_1_values = list()\n    layer_1_values.append(np.zeros(hidden_dim))\n    \n    # moving along the positions in the binary encoding\n    for position in range(binary_dim):\n        \n        # generate input and output\n        X = np.array([[a[binary_dim - position - 1],b[binary_dim - position - 1]]])\n        y = np.array([[c[binary_dim - position - 1]]]).T\n\n        # hidden layer (input ~+ prev_hidden)\n        layer_1 = sigmoid(np.dot(X,synapse_0) + np.dot(layer_1_values[-1],synapse_h))\n\n        # output layer (new binary representation)\n        layer_2 = sigmoid(np.dot(layer_1,synapse_1))\n\n        # did we miss?... if so by how much?\n        layer_2_error = y - layer_2\n        layer_2_deltas.append((layer_2_error)*sigmoid_output_to_derivative(layer_2))\n        overallError += np.abs(layer_2_error[0])\n    \n        # decode estimate so we can print it out\n        d[binary_dim - position - 1] = np.round(layer_2[0][0])\n        \n        # store hidden layer so we can use it in the next timestep\n        layer_1_values.append(copy.deepcopy(layer_1))\n    \n    future_layer_1_delta = np.zeros(hidden_dim)\n    \n    for position in range(binary_dim):\n        \n        X = np.array([[a[position],b[position]]])\n        layer_1 = layer_1_values[-position-1]\n        prev_layer_1 = layer_1_values[-position-2]\n        \n        # error at output layer\n        layer_2_delta = layer_2_deltas[-position-1]\n        # error at hidden layer\n        layer_1_delta = (future_layer_1_delta.dot(synapse_h.T) + layer_2_delta.dot(synapse_1.T)) * sigmoid_output_to_derivative(layer_1)\n\n        # let\'s update all our weights so we can try again\n        synapse_1_update += np.atleast_2d(layer_1).T.dot(layer_2_delta)\n        synapse_h_update += np.atleast_2d(prev_layer_1).T.dot(layer_1_delta)\n        synapse_0_update += X.T.dot(layer_1_delta)\n        \n        future_layer_1_delta = layer_1_delta\n    \n\n    synapse_0 += synapse_0_update * alpha\n    synapse_1 += synapse_1_update * alpha\n    synapse_h += synapse_h_update * alpha    \n\n    synapse_0_update *= 0\n    synapse_1_update *= 0\n    synapse_h_update *= 0\n    \n    # print out progress\n    if(j % 1000 == 0):\n        print \"Error:\" + str(overallError)\n        print \"Pred:\" + str(d)\n        print \"True:\" + str(c)\n        out = 0\n        for index,x in enumerate(reversed(d)):\n            out += x*pow(2,index)\n        print str(a_int) + \" + \" + str(b_int) + \" = \" + str(out)\n        print \"------------\"\n\n        \n</pre>\n<h3>Runtime Output:</h3>\n<pre>\nError:[ 3.45638663]\nPred:[0 0 0 0 0 0 0 1]\nTrue:[0 1 0 0 0 1 0 1]\n9 + 60 = 1\n------------\nError:[ 3.63389116]\nPred:[1 1 1 1 1 1 1 1]\nTrue:[0 0 1 1 1 1 1 1]\n28 + 35 = 255\n------------\nError:[ 3.91366595]\nPred:[0 1 0 0 1 0 0 0]\nTrue:[1 0 1 0 0 0 0 0]\n116 + 44 = 72\n------------\nError:[ 3.72191702]\nPred:[1 1 0 1 1 1 1 1]\nTrue:[0 1 0 0 1 1 0 1]\n4 + 73 = 223\n------------\nError:[ 3.5852713]\nPred:[0 0 0 0 1 0 0 0]\nTrue:[0 1 0 1 0 0 1 0]\n71 + 11 = 8\n------------\nError:[ 2.53352328]\nPred:[1 0 1 0 0 0 1 0]\nTrue:[1 1 0 0 0 0 1 0]\n81 + 113 = 162\n------------\nError:[ 0.57691441]\nPred:[0 1 0 1 0 0 0 1]\nTrue:[0 1 0 1 0 0 0 1]\n81 + 0 = 81\n------------\nError:[ 1.42589952]\nPred:[1 0 0 0 0 0 0 1]\nTrue:[1 0 0 0 0 0 0 1]\n4 + 125 = 129\n------------\nError:[ 0.47477457]\nPred:[0 0 1 1 1 0 0 0]\nTrue:[0 0 1 1 1 0 0 0]\n39 + 17 = 56\n------------\nError:[ 0.21595037]\nPred:[0 0 0 0 1 1 1 0]\nTrue:[0 0 0 0 1 1 1 0]\n11 + 3 = 14\n------------\n</pre>\n\n<hr /><hr /><h2 class=\"section-heading\">Part 1: What is Neural Memory?</h2>\n\n<p>List the alphabet forward.... you can do it, yes?</p>\n<p>List the alphabet backward.... hmmm... perhaps a bit tougher.</p>\n<p>Try with the lyrics of a song you know?.... Why is it easier to recall forward than it is to recall backward? Can you jump into the middle of the second verse?... hmm... also difficult. Why?</p>\n<p>There\'s a very logical reason for this....you haven\'t learned the letters of the alphabet or the lyrics of a song like a computer storing them as a set on a hard drive. You learned them as a <b>sequence</b>. You are really good at indexing from one letter to the next. It\'s a kind of conditional memory... you only have it when you very recently had the previous memory. It\'s also a lot like a <b>linked list</b> if you\'re familiar with that.</p>\n\n<p>However, it\'s not that you <i>don\'t</i> have the song in your memory except when you\'re singing it. Instead, when you try to jump straight to the middle of the song, you simply have a hard time finding that representation in your brain (perhaps that set of neurons). It starts searching all over looking for the middle of the song, but it hasn\'t tried to look for it this way before, so it doesn\'t have a map to the location of the middle of the second verse. It\'s a lot like living in a neighborhood with lots of coves/cul-de-sacs. It\'s much easier to picture how to get to someone\'s house by following all the windy roads because you\'ve done it many times, but knowing exactly where to cut straight across someone\'s backyard is really difficult. Your brain instead uses the \"directions\" that it knows... through the neurons at the beginning of a song. (for more on brain stuff, click <a href=\"http://www.human-memory.net/processes_recall.html\">here</a>)</p>\n\n<p>Much like a linked list, storing memory like this is very efficient. We will find that similar properties/advantages exist in giving our neural networks this type of memory as well. Some processes/problems/representations/searches are far more efficient if modeled as a sequence with a short term / pseudo conditional memory.</p>\n\n<p>Memory matters when your data is a <b>sequence</b> of some kind. (It means you have something to remember!) Imagine having a video of a bouncing ball. (here... i\'ll help this time)</p><center><iframe width=\"700\" height=\"525\" src=\"https://www.youtube.com/embed/UL0ZOgN2SqY?loop=1&amp;autoplay=0\" frameborder=\"0\">[embedded content]</iframe></center><br />Each data point is a frame of your video. If you wanted to train a neural network to predict where the ball would be in the next frame, it would be really helpful to know where the ball was in the last frame! Sequential data like this is why we build recurrent neural networks. So, how does a neural network remember what it saw in previous time steps?\n\n<p>Neural networks have hidden layers. Normally, the state of your hidden layer is <b>based ONLY on your input data</b>. So, normally a neural network\'s information flow would look like this:<br /></p><center><b>input -&gt; hidden -&gt; output</b></center>\n<p>This is straightforward. Certain types of input create certain types of hidden layers. Certain types of hidden layers create certain types of output layers. It\'s kindof a closed system. Memory changes this. Memory means that the hidden layer is a combination of your input data at the current timestep <b>and the hidden layer of the previous timestep</b>.</p>\n\n<center><b>(input + prev_hidden) -&gt; hidden -&gt; output</b></center>\n<p>\nWhy the hidden layer? Well, we could technically do this.\n</p>\n<center><b>(input + prev_input) -&gt; hidden -&gt; output</b></center>\n\n<p>However, we\'d be missing out. I encourage you to sit and consider the difference between these two information flows. For a little helpful hint, consider how this plays out. Here, we have 4 timesteps of a recurrent neural network pulling information from the previous hidden layer.</p>\n\n<center><b>(input + empty_hidden) -&gt; hidden -&gt; output</b></center>\n<center><b>(input + prev_hidden) -&gt; hidden -&gt; output</b></center>\n<center><b>(input + prev_hidden) -&gt; hidden -&gt; output</b></center>\n<center><b>(input + prev_hidden) -&gt; hidden -&gt; output</b></center>\n\n<p>And here, we have 4 timesteps of a recurrent neural network pulling information from the previous input layer</p>\n\n<center><b>(input + empty_input) -&gt; hidden -&gt; output</b></center>\n<center><b>(input + prev_input) -&gt; hidden -&gt; output</b></center>\n<center><b>(input + prev_input) -&gt; hidden -&gt; output</b></center>\n<center><b>(input + prev_input) -&gt; hidden -&gt; output</b></center>\n\n<p>Maybe, if I colored things a bit, it would become more clear. Again, 4 timesteps with <b>hidden layer recurrence</b>:</p>\n\n<center><b>(<span>input</span> + empty_hidden) -&gt; <span>hidden</span> -&gt; output</b></center>\n<center><b>(<span>input</span> + prev_<span>hidden</span>) -&gt; <span>hid</span><span>den</span> -&gt; output</b></center>\n<center><b>(<span>input</span> + prev_<span>hid</span><span>den</span>) -&gt; <span>hi</span><span>dd</span><span>en</span> -&gt; output</b></center>\n<center><b>(<span>input</span> + prev_<span>hi</span><span>dd</span><span>en</span> ) -&gt; <span>hi</span><span>d</span><span>de</span><span>n</span> -&gt; output</b></center>\n\n<p>.... and 4 timesteps with <b>input layer recurrence</b>....</p>\n\n<center><b>(<span>input</span> + empty_input) -&gt; <span>hidden</span> -&gt; output</b></center>\n<center><b>(<span>input</span> + prev_<span>input</span>) -&gt; <span>hid</span><span>den</span> -&gt; output</b></center>\n<center><b>(<span>input</span> + prev_<span>input</span>) -&gt; <span>hid</span><span>den</span> -&gt; output</b></center>\n<center><b>(<span>input</span> + prev_<span>input</span>) -&gt; <span>hid</span><span>den</span> -&gt; output</b></center>\n\n<p>Focus on the last hidden layer (4th line). In the hidden layer recurrence, we see a presence of every input seen so far. In the input layer recurrence, it\'s exclusively defined by the current and previous inputs. This is why we model hidden recurrence. Hidden recurrence <b>learns what to remember</b> whereas input recurrence is hard wired to just remember the immediately previous datapoint. </p>\n\n<p>Now compare and contrast these two approaches with the backwards alphabet and middle-of-song exercises. The hidden layer is constantly changing as it gets more inputs. Furthermore, the only way that we could reach these hidden states is with the correct <b>sequence</b> of inputs. Now the money statement, the output is deterministic given the hidden layer, and the hidden layer is only reachable with the right <b>sequence</b> of inputs. Sound familiar?</p>\n\n<p>What\'s the practical difference? Let\'s say we were trying to predict the next word in a song given the previous. The \"input layer recurrence\" would break down if the song accidentally had the same sequence of two words in multiple places. Think about it, if the song had the statements \"I love you\", and \"I love carrots\", and the network was trying to predict the next word, how would it know what follows \"I love\"? It could be carrots. It could be you. The network REALLY needs to know more about what part of the song its in. However, the \"hidden layer recurrence\" doesn\'t break down in this way. It subtely remembers everything it saw (with memories becoming more subtle as it they fade into the past). To see this in action, check out <a href=\"http://karpathy.github.io/2015/05/21/rnn-effectiveness/\"> this</a>. \n\n</p><center><b>stop and make sure this feels comfortable in your mind</b></center><br /><hr /><ins class=\"adsbygoogle\"></ins>\n<hr /><h2 class=\"section-heading\">Part 2: RNN - Neural Network Memory</h2>\n\n<p>Now that we have the intuition, let\'s dive down a layer (ba dum bump...). As described in the <a href=\"http://iamtrask.github.io/2015/07/12/basic-python-network/\"><u>backpropagation post</u></a>, our input layer to the neural network is determined by our input dataset. Each row of input data is used to generate the hidden layer (via forward propagation). Each hidden layer is then used to populate the output layer (assuming only 1 hidden layer). As we just saw, memory means that the hidden layer is a combination of the input data and the previous hidden layer. How is this done? Well, much like every other propagation in neural networks, it\'s done with a matrix. This matrix defines the relationship between the previous hidden layer and the current one.</p>\n\n<img class=\"img-responsive\" src=\"http://iamtrask.github.io/img/basic_recurrence_singleton.png\" alt=\"\" /><p>Big thing to take from this picture, there are only three weight matrices. Two of them should be very familiar (same names too). SYNAPSE_0 propagates the input data to the hidden layer. SYNAPSE_1 propagates the hidden layer to the output data. The new matrix (SYNAPSE_h....the recurrent one), propagates from the hidden layer (layer_1) to the hidden layer at the next timestep (still layer_1).\n\n</p><center><b>stop and make sure this feels comfortable in your mind</b></center><br /><img class=\"img-responsive\" src=\"http://iamtrask.github.io/img/recurrence_gif.gif\" alt=\"\" /><p>The gif above reflects the magic of recurrent networks, and several very, very important properties. It depicts 4 timesteps. The first is exclusively influenced by the input data. The second one is a mixture of the first and second inputs. This continues on. You should recognize that, in some way, network 4 is \"full\". Presumably, timestep 5 would have to choose which memories to keep and which ones to overwrite. This is very real. It\'s the notion of memory \"capacity\". As you might expect, bigger layers can hold more memories for a longer period of time. Also, this is when the network learns to <b>forget irrelevant memories</b> and <b>remember important memories</b>. What significant thing do you notice in timestep 3? Why is there more <span>green</span> in the hidden layer than the other colors?</p>\n\n<p>Also notice that the hidden layer is the barrier between the input and the output. In reality, the output is no longer a pure function of the input. The input is just changing what\'s in the memory, and the output is exclusively based on the memory. Another interesting takeaway. If there was not input at timesteps 2,3,and 4, the hidden layer would still change from timestep to timestep.</p>\n\n<center><b>i know i\'ve been stopping... but really make sure you got that last bit</b></center><br /><h2 class=\"section-heading\">Part 3: Backpropagation Through Time:</h2>\n\n<p>So, how do recurrent neural networks learn? Check out this graphic. Black is the prediction, errors are bright yellow, derivatives are mustard colored.</p>\n\n<img class=\"img-responsive\" src=\"http://iamtrask.github.io/img/backprop_through_time.gif\" alt=\"\" /><p>They learn by fully propagating forward from 1 to 4 (through an entire sequence of arbitrary length), and then backpropagating all the derivatives from 4 back to 1. You can also pretend that it\'s just a funny shaped normal neural network, except that we\'re re-using the same weights (synapses 0,1,and h) in their respective places. Other than that, it\'s normal backpropagation.\n\n</p><hr /><ins class=\"adsbygoogle\"></ins>\n<hr /><h2 class=\"section-heading\">Part 4: Our Toy Code</h2>\n\n<p>We\'re going to be using a recurrent neural network to model <b>binary addition</b>. Do you see the sequence below? What do the colored ones in squares at the top signify?</p>\n\n<img class=\"img-responsive\" src=\"http://iamtrask.github.io/img/binary_addition.GIF\" alt=\"\" /><span>source: angelfire.com</span>\n\n<p>The colorful 1s in boxes at the top signify the \"carry bit\". They \"carry the one\" when the sum overfows at each place. This is the tiny bit of memory that we\'re going to teach our neural network how to model. It\'s going to \"carry the one\" when the sum requires it. (click <a href=\"https://www.youtube.com/watch?v=jB_sRh5yoZk\">here</a> to learn about when this happens)</p>\n\n<p>So, binary addition moves from right to left, where we try to predict the number beneath the line given the numbers above the line. We want the neural network to move along the binary sequences and remember when it has carred the 1 and when it hasn\'t, so that it can make the correct prediction. Don\'t get too caught up in the problem. The network actually doesn\'t care too much. Just recognize that we\'re going to have two inputs at each time step, (either a one or a zero from each number begin added). These two inputs will be propagated to the hidden layer, which will have to remember whether or not we carry. The prediction will take all of this information into account to predict the correct bit at the given position (time step).</p>\n\n<center><i>At this point, I recommend opening this page in two windows so that you can follow along with the line numbers in the code example at the top. That\'s how I wrote it.</i></center>\n\n<p><b>Lines 0-2:</b> Importing our dependencies and seeding the random number generator. We will only use numpy and copy. Numpy is for matrix algebra. Copy is to copy things.</p>\n\n<p><b>Lines 4-11:</b> Our nonlinearity and derivative. For details, please read this <a href=\"http://iamtrask.github.io/2015/07/12/basic-python-network/\"> Neural Network Tutorial</a></p>\n\n<p><b>Line 15:</b> We\'re going to create a lookup table that maps from an integer to its binary representation. The binary representations will be our input and output data for each math probelm we try to get the network to solve. This lookup table will be very helpful in converting from integers to bit strings.</p>\n\n<p><b>Line 16:</b> This is where I set the maximum length of the binary numbers we\'ll be adding. If I\'ve done everything right, you can adjust this to add potentially very large numbers.</p>\n\n<p><b>Line 18:</b> This computs the largest number that is possible to represent with the binary length we chose</p>\n\n<p><b>Line 19:</b> This is a lookup table that maps from an integer to its binary representation. We copy it into the int2binary. This is kindof un-ncessary but I thought it made things more obvious looking.</p>\n\n<p><b>Line 26:</b> This is our learning rate.</p>\n\n<p><b>Line 27:</b> We are adding two numbers together, so we\'ll be feeding in two bit strings one character at a time each. Thus, we need to have two inputs to the network (each for one of the numbers being added).</p>\n\n<p><b>Line 28:</b> This is the size of the hidden layer that will be storing our carry bit. Notice that it is way larger than it theoretically needs to be. Play with this and see how it affects the speed of convergence. Do larger hidden dimensions make things train faster or slower? More iterations or fewer?</p>\n\n<p><b>Line 29:</b> Well, we\'re only predicting the sum, which is one number. Thus, we only need one output</p>\n\n<p><b>Line 33:</b> This is the matrix of weights that connects our input layer and our hidden layer. Thus, it has \"input_dim\" rows and \"hidden_dim\" columns. (2 x 16 unless you change it). If you forgot what it does, look for it in the pictures in Part 2 of this blogpost.</p>\n\n<p><b>Line 34:</b> This is the matrix of weights that connects the hidden layer to the output layer Thus, it has \"hidden_dim\" rows and \"output_dim\" columns. (16 x 1 unless you change it). If you forgot what it does, look for it in the pictures in Part 2 of this blogpost.</p>\n\n<p><b>Line 35:</b> This is the matrix of weights that connects the hidden layer in the previous time-step to the hidden layer in the current timestep. It also connects the hidden layer in the current timestep to the hidden layer in the next timestep (we keep using it). Thus, it has the dimensoinality of \"hidden_dim\" rows and \"hidden_dim\" columns. (16 x 16 unless you change it). If you forgot what it does, look for it in the pictures in Part 2 of this blogpost.</p>\n\n<p><b>Line 37 - 39:</b> These store the weight updates that we would like to make for each of the weight matrices. After we\'ve accumulated several weight updates, we\'ll actually update the matrices. More on this later.</p>\n\n<p><b>Line 42:</b> We\'re iterating over 100,000 training examples</p>\n\n<p><b>Line 45:</b> We\'re going to generate a random addition problem. So, we\'re initializing an integer randomly between 0 and half of the largest value we can represent. If we allowed the network to represent more than this, than adding two number could theoretically overflow (be a bigger number than we have bits to represent). Thus, we only add numbers that are less than half of the largest number we can represent.</p>\n\n<p><b>Line 46:</b> We lookup the binary form for \"a_int\" and store it in \"a\"</p>\n\n<p><b>Line 48:</b> Same thing as line 45, just getting another random number.</p>\n\n<p><b>Line 49:</b> Same thing as line 46, looking up the binary representation.</p>\n\n<p><b>Line 52:</b> We\'re computing what the correct answer should be for this addition</p>\n\n<p><b>Line 53:</b> Converting the true answer to its binary representation</p>\n\n<p><b>Line 56:</b> Initializing an empty binary array where we\'ll store the neural network\'s predictions (so we can see it at the end). You could get around doing this if you want...but i thought it made things more intuitive</p>\n\n<p><b>Line 58:</b> Resetting the error measure (which we use as a means to track convergence... see my tutorial on backpropagation and gradient descent to learn more about this)</p>\n\n<p><b>Lines 60-61:</b> These two lists will keep track of the layer 2 derivatives and layer 1 values at each time step.</p>\n\n<p><b>Line 62:</b> Time step zero has no previous hidden layer, so we initialize one that\'s off.</p>\n\n<p><b>Line 65:</b> This for loop iterates through the binary representation</p>\n\n<p><b>Line 68:</b>X is the same as \"layer_0\" in the pictures. X is a list of 2 numbers, one from a and one from b. It\'s indexed according to the \"position\" variable, but we index it in such a way that it goes from right to left. So, when position == 0, this is the farhest bit to the right in \"a\" and the farthest bit to the right in \"b\". When position equals 1, this shifts to the left one bit.\n</p>\n\n<p><b>Line 69:</b> Same indexing as line 62, but instead it\'s the value of the correct answer (either a 1 or a 0)</p>\n\n<p><b>Line 72:</b> This is the magic!!! Make sure you understand this line!!! To construct the hidden layer, we first do two things. First, we propagate from the input to the hidden layer (np.dot(X,synapse_0)). Then, we propagate from the previous hidden layer to the current hidden layer (np.dot(prev_layer_1, synapse_h)). Then WE SUM THESE TWO VECTORS!!!!... and pass through the sigmoid function.</p>\n\n<p>So, how do we combine the information from the previous hidden layer and the input? After each has been propagated through its various matrices (read: interpretations), we sum the information. </p>\n\n<p><b>Line 75:</b> This should look very familiar. It\'s the same as previous tutorials. It propagates the hidden layer to the output to make a prediction</p>\n\n<p><b>Line 78:</b> Compute how much the prediction missed</p>\n\n<p><b>Line 79:</b> We\'re going to store the derivative (mustard orange in the graphic above) in a list, holding the derivative at each timestep.</p>\n\n<p><b>Line 80:</b> Calculate the sum of the absolute errors so that we have a scalar error (to track propagation). We\'ll end up with a sum of the error at each binary position.</p>\n\n<p><b>Line 83</b> Copies the layer_1 value into an array so that at the next time step we can apply the hidden layer at the current one.</p>\n\n<p><b>Line 90:</b> So, we\'ve done all the forward propagating for all the time steps, and we\'ve computed the derivatives at the output layers and stored them in a list. Now we need to backpropagate, starting with the last timestep, backpropagating to the first</p>\n\n<p><b>Line 92:</b> Indexing the input data like we did before</p>\n<p><b>Line 93:</b> Selecting the current hidden layer from the list.</p>\n<p><b>Line 94:</b> Selecting the previous hidden layer from the list</p>\n<p><b>Line 97:</b> Selecting the current output error from the list</p>\n<p><b>Line 99:</b> this computes the current hidden layer error given the error at the hidden layer from the future and the error at the current output layer.</p>\n<p><b>Line 102-104:</b> Now that we have the derivatives backpropagated at this current time step, we can construct our weight updates (but not actually update the weights just yet). We don\'t actually update our weight matrices until after we\'ve fully backpropagated everything. Why? Well, we use the weight matrices for the backpropagation. Thus, we don\'t want to go changing them yet until the actual backprop is done. See the <a href=\"http://iamtrask.github.io/2015/07/12/basic-python-network/\">backprop blog post</a> for more details.</p>\n\n<p><b>Line 109 - 115</b> Now that we\'ve backpropped everything and created our weight updates. It\'s time to update our weights (and empty the update variables).</p>\n\n<p><b>Line 118 - end</b> Just some nice logging to show progress</p>\n\n<h2 class=\"section-heading\">Part 5: Questions / Comments</h2>\n\nIf you have questions or comments, tweet <a href=\"https://twitter.com/iamtrask\"><b>@iamtrask</b></a> and I\'ll be happy to help.\n\n<hr />',1),(206,'Metadata Investigation : Inside Hacking Team','http://labs.rs/en/metadata/',0,0,'\n		<p><span class=\"stag-dropcap stag-dropcap--normal\">O</span>nce online, our every movement, every click, sent or received email, our every activity produces a vast amount of invisible traces. These traces, once collected, put together and analysed, can reveal our behavioral patterns, location, contacts, habits and most intimate interests. They often reveal much more than we feel comfortable sharing.<br />Most of those traces are hidden in <strong>metadata</strong>, i.e. tiny pieces of information stored in IP packets, headers of your emails or files that you are creating.</p>\n<h3>There is an ongoing debate over the significance of metadata. We wanted to question а somewhat heretical argument that bulk metadata contain sensitive information about private life of internet users and confront it with a ruling opinion that such statement is overrated. We have therefore undertaken the following social and scientific experiment using different methodologies. The purpose of this research is to investigate and consequently inform the scientific and popular audience about the real importance of metadata for our privacy.</h3>\n<p>In our previous research we explained how metadata is being collected and accessed by numerous actors – <a href=\"http://labs.rs/en/invisible-infrastructures-surveillance-achitecture/\">government agencies</a>, <a href=\"http://labs.rs/en/as/\">Internet service providers</a>, <a href=\"http://labs.rs/en/invisible-infrastructures-online-trackers/\">Internet companies</a> such as Google or Facebook, data dealers or producers of <a href=\"http://labs.rs/en/invisible-infrastructures-mobile-permissions/\">mobile phone applications</a>. We explained the invisible infrastructure behind data flow, but we never had a chance to investigate what these actors can really do when they have access to a vast amount of metadata about you. This data investigation is exactly about that.</p>\n\n\n<h2>Our little “Big Data”</h2>\n<div class=\"stag-column stag-two-third\">On July 5, 2015, one of the World’s biggest cyber weapon manufacturers and dealers – an Italian based company, <a href=\"http://www.hackingteam.it/\">Hacking Team</a>, faced a leak of their internal email database. The <a href=\"https://twitter.com/hackingteam\">twitter account</a> of the company was compromised by an unknown individual who published an announcement of a data breach and provided links to over 400 gigabytes of data, internal emails, invoices, and source code.\n<p>In the next few days <a href=\"https://wikileaks.org/hackingteam/emails/\">Wikileaks</a> and <a href=\"https://transparencytoolkit.org/project/hacking-team-archive/\">Transparency Toolkit</a> published a <a href=\"http://ht.transparencytoolkit.org/\">searchable database</a> of Hacking Team’s emails revealing details of their operation, contacts and communication <a href=\"http://labs.rs/en/hacking-team-the-italian-job-of-serbian-security-services/\">with government agencies</a>, companies and individuals around the globe as well as the functionalities of their cyber surveillance weapons.</p></div> <h6></h6><div class=\"stag-column stag-one-third stag-column-last\">Hacking Team designed a modular, multifunctional and cross platform surveillance solution, RCS (Remote Control System). The solution gives the operator a full and uninterrupted access to and control over the infected device, the privileges of the operator of the software are limitless, they can send email or SMS and make phone calls, listen in on the user’s phone calls and read encrypted communication. The access is not limited exclusively to the software, the operator can also manipulate with the hardware on the infected device, i.e. activate the microphone or the camera and record audio and video or take photos. The software is designed in such a manner that its operation goes undetected by any anti-malware or anti-spyware scanner, its traffic is well blended in with the user’s legitimate Internet traffic.</div> <hr class=\"stag-section stag-divider stag-divider--plain\" />\n<h3>We were given this pile of data and soon we REALIZED there was another gem hidden in it. We were able to extract a substantial amount of metadata – headers from hundreds of thousands emails from their database. We got our own little portion of Big data and that is where our research began.<br /></h3>\n<h2>Do It Yourself Metadata Investigation</h2>\n<p>The concept behind data-mining and analysis operation performed by the government agencies around the world is that metadata can be analysed to reveal connections between people, and these links can generate significant investigative leads.</p>\n<p>This is not exclusively done by government agencies, our metadata is constantly collected and examined by major Internet companies such as Google and Facebook, but for the purpose of profiling of users and transforming our behavior into profit, which reaches tens of billions US dollars per annum.</p>\n<p>Thanks to Edward Snowden’s <a href=\"https://search.edwardsnowden.com/\">revelations</a> in June 2013 we got insight into the NSA Stellar Wind, Boundless Informant, PRISM and XKeyscore programs. One of the scopes of those programs was collecting and analysing large amount of email metadata. Analysis involve operations such as contact chaining, building a network graph that models the communication (e-mail, telephony, etc.) patterns of targeted entities (people, organisations, etc) and their associates from the communications sent or received by the targets.<img class=\"aligncenter wp-image-575 size-full\" src=\"http://labs.rs/wp-content/uploads/2015/10/StellarWind.jpg\" alt=\"StellarWind\" width=\"970\" height=\"213\" /></p>\n<h6 class=\"firstHeading\" lang=\"en\" xml:lang=\"en\"><a href=\"https://en.wikipedia.org/wiki/File:Nsa-ig-draft-report.pdf\">NSA IG-DRAFT REPORT</a></h6>\n\n<div class=\"stag-column stag-two-third\">To make a pint of just how intrusive metadata analysis can be, we used this substantial amount of metadata we were able to extract from the HT’s published email database, along with publicly available knowledge and a number of free or trial versions of tools available online, to conduct our own investigation.</div> <h6></h6><div class=\"stag-column stag-one-third stag-column-last\">“Metadata is extraordinarily intrusive. As an analyst, I would prefer to be looking at metadata than looking at content, because it’s quicker and easier, and it doesn’t lie.”<br />Edward Snowden</div> \n<h3>In some kind of reverse engineering process we explored the possibility of using their own methodology for an independent data investigation of the Hacking Team, one of the <a href=\"http://surveillance.rsf.org/en/category/corporate-enemies/\">“CORPORATE ENEMIES OF THE INTERNET”</a>.</h3>\n\n<h2>Email Metadata : Building blocks for our investigation</h2>\n<p>Let’s begin with a short explanation of our little treasure – email headers. Every email consists of three components: the envelope, the header, and the body of the message. The envelope is a part of the internal process by which an email is routed, the body is the actual content of the message and the header, the third component of an email, is the point of interest of our research.</p>\n\n\n<p><img class=\"aligncenter wp-image-551 size-full\" src=\"http://labs.rs/wp-content/uploads/2015/10/Headers.jpg\" alt=\"Headers\" width=\"1200\" height=\"786\" /></p>\n<p>Headers identify particular routing information of the message, including the sender, recipient, date and subject, sending and receiving time stamps. In some cases email headers also contain the IP address of the sender and information on the route an email takes as it is transferred from one computer to another.</p>\n<h6><a href=\"http://labs.rs/wp-content/uploads/2015/10/database.jpg\"><br /><img class=\"aligncenter wp-image-568 size-full\" src=\"http://labs.rs/wp-content/uploads/2015/10/database.jpg\" alt=\"database\" width=\"970\" height=\"280\" /></a>Tools : Export from MS Outlook <a href=\"http://www.codetwo.com/downloads/freeware/?sts=4310&amp;gclid=COHh3NO0g8kCFcHGGwodtcgGpg\">Code Two Outlook Export</a> &gt; <span class=\"mw-headline\">Data processing <a href=\"https://products.office.com/en/excel\">MS Excel</a> </span></h6>\n<p>After extracting data from around 60 accounts and hundreds of thousands emails of Hacking Team employees, we got a database we could work with.</p><hr class=\"stag-section stag-divider stag-divider--plain\" /><h2>Needles in a haystack</h2>\n<p>The first step we took in exploring this pile of data was to perform a<a href=\"https://en.wikipedia.org/wiki/Social_network_analysis\"> Social Network Analysis</a>, a strategy for investigating social structures based on network and graph theories. It characterises networked structures in terms of nodes (individual actors, people) and ties or edges (relationships or interactions) that connect them. In our case, the network graph represents an analysis of all email headers exchanged between Hacking Team employees and their contacts between 2012 and 2015. Even at this very begining of the investigation we were able to detect the main internal and external actors and ties, more precisely by the amount of exchanged emails between them.<br />By selecting the individual nodes, we are able to explore their individual social ties and contacts.</p>\n<h6>Social network Analysis of hacking team email database ( period 2013-2015 )<br /><br />Tools : Social Network analysis with <a href=\"http://gephi.github.io/\">Gephy</a> exported with Sigma.js by <a href=\"http://blogs.oii.ox.ac.uk/vis/\">Oxford Internet Institute</a></h6>\n<p>By filtering out the nodes with less than a 100 exchanged emails, we isolate the internal Hacking Team communication and get a closer look at their internal structure based solely on it.</p>\n<h6>Social network analysis of nodes with +100 exchanged emails<br /><br />TOOLS : SOCIAL NETWORK ANALYSIS WITH <a href=\"http://gephi.github.io/\">GEPHY</a> EXPORTED WITH SIGMA.JS BY <a href=\"http://blogs.oii.ox.ac.uk/vis/\">OXFORD INTERNET INSTITUTE</a></h6>\n<p>Giving that this was somewhat a learning process of our own, while exploring the metadata we came to notice that our understanding of data and leads we got from it highly depended on the type of visualisation we applied to the data set. Sometimes ties between different actors were more successfully, more clearly revealed by using different visualisations. Like in this example, where we see the same data set as the one presented above, but this time in the form of a heat map.</p>\n<h6>Heat-map of internal communication<br /><img class=\"aligncenter wp-image-656 size-full\" src=\"http://labs.rs/wp-content/uploads/2015/10/Heatmap-01-01.jpg\" alt=\"\" width=\"961\" height=\"895\" /></h6>\n<p>By spotting the darker squares we can explore individual ties between different employees within organisation. D. Vincenzetti is clearly the main actor in this graph, but we can also notice a few other strong relations across this heatmap, that can help us get a better insight into their organisational structure.</p>\n<p>Finally, using the insights from both visualisation methods, we are able to shape a communication chart that might represent a credible representation of the organisational structure. It probably doesn’t display relations that are in accordance with what is written on their business cards, but on the other hand it probably represents real relations between people within the organisation better.</p>\n<h6>Potential organisational structure based on the level and direction of communication <a href=\"http://labs.rs/wp-content/uploads/2015/10/structure.jpg\"><br /></a><a href=\"http://labs.rs/wp-content/uploads/2015/10/orgstructure.jpg\"><img class=\"aligncenter size-full wp-image-650\" src=\"http://labs.rs/wp-content/uploads/2015/10/orgstructure.jpg\" alt=\"orgstructure\" width=\"970\" height=\"693\" /></a><a href=\"http://labs.rs/wp-content/uploads/2015/10/structure.jpg\"><br /></a></h6>\n<p>Setting aside the organisational structure, if we were to add another interesting piece of information retrieved from metadata – the time component, we would be able to track the activity of every individual employee in time, based on the number of sent messages from each one of them. Having done this, we created the following activity chart. With this kind of analysis you could, for example, speculate or determine which part of the year is the busiest for the organisation or, combined with other information inputs, when certain employees went on vacation or took a leave of absence.</p>\n<h6>Number of sent emails per HT employee in time (2014)<br /><a href=\"http://labs.rs/wp-content/uploads/2015/10/Heatmap-01-01.jpg\"><img class=\"aligncenter size-full wp-image-657\" src=\"http://labs.rs/wp-content/uploads/2015/10/HT-internal-timeline-01.jpg\" alt=\"HT internal timeline-01\" width=\"947\" height=\"1052\" /></a></h6>\n<h2>Exploring External Contacts</h2>\n<p>Even more interesting, or relevant for investigative data journalism and our effort to understand the nature of the organisation that we are investigating, are probably the external contacts.<br />In our set of data that means around 4600 different individuals that exchanged emails with Hacking Team employees in the course of 2 years.</p>\n<p>If we exclude all the @hackingteam.com adresses and rank results by the number of records we are going straight to the point. This is the list of Hacking Team contacts with more than 50 emails exchanged.</p>\n<h6>External contacts with more than 50 emails exchanged with HT Employees ( 2014-2015 )<br /><img class=\"aligncenter size-full wp-image-658\" src=\"http://labs.rs/wp-content/uploads/2015/10/contacts-01.jpg\" alt=\"contacts-01\" width=\"961\" height=\"719\" /></h6>\n<p>If we add the Hacking Team employees on the other axis, we will get information who in the  team communicated with external contacts and how frequent and strong the communication was.</p>\n<h6>Number of emails exchanged (&gt;30) between HT employees and external contacts ( 2014-2015 )<br /><img class=\"aligncenter size-full wp-image-664\" src=\"http://labs.rs/wp-content/uploads/2015/10/contacts-and-inter-01.jpg\" alt=\"contacts and inter-01\" width=\"960\" height=\"349\" /></h6>\n<p>Additionally, if we add the time component, we have a complete overview of who communicated with whom and when.</p>\n<h6>Timeline of individual communication of  external contacts and ht employees  ( 2014-2015 )<br /><img class=\"aligncenter size-full wp-image-666\" src=\"http://labs.rs/wp-content/uploads/2015/10/contacts-in-time-01.jpg\" alt=\"contacts in time-01\" width=\"960\" height=\"747\" /></h6>\n<p>We grouped the emails by domain, and after some research about the companies behind the domain names, we classified them by the type of service they officially provide.</p>\n<h6>external contacts grouped by the domain name based on the d.vincenzetti emails<br /><img class=\"aligncenter size-full wp-image-669\" src=\"http://labs.rs/wp-content/uploads/2015/10/domains-01.jpg\" alt=\"domains-01\" width=\"960\" height=\"683\" /></h6>\n<p>According to this treemap the biggest group of organisations collaborating with HT are from the “digital security” sector, followed by individual contacts, i.e. “consultants” and venture capital companies.</p>\n<p>We can explore the relation between selected companies and Hacking Team in time.</p>\n<h6>Timeline of selected companies email communication with ht employees (2014)<br /><a href=\"http://labs.rs/wp-content/uploads/2015/10/4-companies-01.jpg\"><img class=\"aligncenter size-full wp-image-671\" src=\"http://labs.rs/wp-content/uploads/2015/10/4-companies-01.jpg\" alt=\"4 companies-01\" width=\"961\" height=\"624\" /></a></h6>\n<div class=\"stag-column stag-two-third\">Different colours represent different people within an organisation. We can notice that, for example in the case of <a href=\"http://www.nice.com/\">Nice Solutions</a>, the biggest partner of Hacking Team according to the examined metadata, the connections between Hacking Team and Nice are really tight and there is a constant communication between the two companies including a lot of different employees on all levels (number of different colours on the graph). We can also track how different actors are taking communication in different times.</div> <h6></h6><div class=\"stag-column stag-one-third stag-column-last\">According to their official <a href=\"http://www.nice.com/about-nice/company-overview\">STATEMENT</a> “NICE solutions empower organisations to capture, analyse, and apply, in real time, insights from both structured and unstructured Big Data. This data comes from multiple sources, including phone calls, mobile apps, emails, chat, social media, video, and transactions. NICE solutions are used by over 25,000 organisations in more than 150 countries, including over 80 of the Fortune 100 companies”. Looking at the data we analysed we can probably conclude that the same expertise and tools for collecting data and analysis is shared and being sold on different markets and to different target groups, Hacking Team for government agencies and Nice Solutions for companies and law enforcement agencies.</div> <br /><hr class=\"stag-section stag-divider stag-divider--plain\" />\n<h2>Pattern of life</h2>\n<p>Humans are amazing pattern-recognition machines. We are constantly analysing complex sets of inputs, and making decisions based on facts we previously encountered or learned. But in <a href=\"http://www.forbes.com/sites/lisabrownlee/2015/07/10/the-11-trillion-internet-of-things-big-data-and-pattern-of-life-pol-analytics/\">recent years</a>, we are not the only ones who analyse patterns around us, we are becoming more and more the object of analysis, mostly performed by machines and algorithms.</p>\n<h3>The unique way we interact with the technology we use, the unique set of contacts we have or our unique behavioral patterns define our metadata signature, our fingerprint. In the eyes of the algorithmic analysis every single person is unique.</h3>\n<p>Pattern-of-life analysis is a method of surveillance specifically used for documenting or understanding subject’s habits. It is a computerised data collection and analysis method used to establish the subject’s past behavior, determine its current behavior, and predict its future behavior. This form of analysis is generally done without your consent, and it’s applied not just in the security field, but it is a core activity and business model of many of the biggest Internet companies. More commonly, pattern of life analysis is called profiling. Inputs for this analysis are in most of the cases our metadata collected from emails, IP traffic or data from mobile phones and other technology we use.</p><hr class=\"stag-section stag-divider stag-divider--plain\" /><p>Even though we are just limited to email metadata in our research , we will try to perform pattern of life analysis on one key figure from Hacking Team and try to see what we can get.</p>\n<p>According to the previous phases of our metadata investigation, an obvious choice of a node (person) with the biggest amount of internal and external contacts and communication is d.vincenzetti@hackingteam.com. We will call him Mr.D.</p>\n<p>We are trying to understand 3 main things here:</p>\n<p>What is the behavioural pattern of Mr.D ?<br />What are the anomalies in this pattern?<br />How different the behavioural pattern of Mr.D is in comparison to his social/professional circle?</p>\n<h6>pattern RECOGNITION : sum of Mr.d sent and received emails per hour during the day (2014)<br /><img class=\"aligncenter size-full wp-image-673\" src=\"http://labs.rs/wp-content/uploads/2015/10/sent-vs-received-01-01.jpg\" alt=\"sent vs received-01-01\" width=\"960\" height=\"401\" /></h6>\n<p>Sent emails represent the behaviour of the person that we are examining and received emails represent the overall behavioural pattern of his social or professional environment.</p>\n<p>Mr.D is not the same as other people.<br />He starts his activities quite early in the morning. Almost every day around 4 a.m. is his time of concentration, the moment when he sends the biggest amount of emails during the day. If we are comparing the number of sent and received emails we can see that Mr.D has different habits than most of his contacts. His social and professional circles are most productive around 10 a.m., most of them have a lunch break around 1 p.m. and their productivity rapidly declines from 4 p.m. On the other hand, Mr.D doesn’t have a big swings of productivity during the day. His peak during working hours is at noon. It looks like he doesn’t have a regular lunch break and when his co-workers and external contacts start to lose concentration in the afternoon, he has another peak of activity around 5 p.m.. Additionally, Mr. D seldom sends any emails after 8 p.m.</p>\n<h6>PATTERN RECOGNITION : SUM OF MR.D SENT AND RECEIVED EMAILS PER week days and months (2014)<br /><img class=\"aligncenter size-full wp-image-675\" src=\"http://labs.rs/wp-content/uploads/2015/10/weekmonth-01-01.jpg\" alt=\"weekmonth-01-01\" width=\"961\" height=\"500\" /></h6>\n<p>If we are analysing Mr.D’s behavioral patterns on a week’s scale we can find out that he is even working much more than his professional circles during the weekend as well. It looks like his only time out of emails is every saturday during lunch time around noon.</p>\n<p>That is Mr.D’s average behavior, but what is even more important to our analysis are the anomalies in his behavior. Anomalies can point to many things. People are changing their behaviour when depressed, sick, working under pressure, when there are some deadlines or important events, when they are traveling or when they fall in love, for example.</p>\n<h6>ANOMALY detection : number of MR.D sent emails per hour (2014)<br /><img class=\"aligncenter size-full wp-image-677\" src=\"http://labs.rs/wp-content/uploads/2015/10/anomaly-01.jpg\" alt=\"anomaly-01\" width=\"960\" height=\"401\" /></h6>\n<p>On this graph we can see some spikes that represent anomalies in Mr.D’s productivity.<br />For example, on the 11th of December at 7 p.m., he sent 19 emails during one hour compared to average 2.7 emails that he usually sends.</p>\n<p>The following heatmap is probably most effective for spotting anomalies.</p>\n<h6>pattern RECOGNITION and ANOMALY DETECTION : heat-map of mr.d sent emails per hour (2014)<br /><img class=\"aligncenter size-full wp-image-680\" src=\"http://labs.rs/wp-content/uploads/2015/10/anomalybig-01-01.jpg\" alt=\"anomalybig-01-01\" width=\"961\" height=\"999\" /></h6>\n<p>Looking at the heatmap, you can spot an interesting anomaly in September. On the 20th in the afternoon we see a really low level of activity, which is unusual for Mr.D, giving that we already know that his daily productive peak is around noon.<br />Further, on September 21st from 4 a.m, when he generally wakes up and starts work, there is no activity until the day after at 7 a.m.<br />In the next few days we see that the pattern is uncommon. It looks as if Mr.D sleeps in the afternoon and works intensively during the night. On September 27th, we can see again a lack of communication and then in the following days, Mr. D’s pattern is back to normal. Based on the other metadata inputs that we will explain later in our research, we found out that Mr.D was traveling to Singapore between the 21st and the 27th of September. With that we can easily conclude that a change in the time zone influences Mr.D’s email pattern.</p>\n<p><a href=\"http://labs.rs/wp-content/uploads/2015/10/anomalies.jpg\"><img class=\"aligncenter size-full wp-image-579\" src=\"http://labs.rs/wp-content/uploads/2015/10/anomalies.jpg\" alt=\"anomalies\" width=\"970\" height=\"259\" /></a></p>\n<p>We can find another anomaly in the pattern from October 5th to October 12th, but this pattern looks a bit different, it swings in another direction. On this occasion Mr.D went to the USA and it showed us how different time zones leave different footprints in his pattern.</p>\n<p>There is also one really interesting pattern anomaly on June the 24th and the following day (you can see darker squares and an increased level of communication). On that day, researchers from Citizens Lab published analysis <a href=\"https://citizenlab.org/2014/06/backdoor-hacking-teams-tradecraft-android-implant/\">“Police Story: Hacking Team’s Government Surveillance Malware”</a> exposing the functionality and architecture of Hacking Team’s Remote Control System (RCS) in a never-before published detail. This report had a great media coverage, including media such as <a href=\"http://www.economist.com/blogs/pomegranate/2014/07/internet-monitoring-gulf\">The Economist,</a> <a href=\"https://news.yahoo.com/eyes-experts-reveal-police-hacking-methods-155417984--finance.html%22\">Associated Press</a>, <a href=\"http://www.wired.com/2014/06/remote-control-system-phone-surveillance/\">Wired</a>, <a href=\"http://motherboard.vice.com/read/police-grade-mobile-spyware-is-spreading-through-saudi-arabia-and-beyond\">VICE</a>, <a href=\"http://www.ibtimes.co.uk/hacking-team-tools-allow-governments-take-full-control-your-smartphone-1453987\">International Business Times</a>, <a href=\"http://www.forbes.com/sites/emmawoollacott/2014/06/25/how-governments-including-the-us-use-targets-phones-to-spy-on-them/\">Forbes</a> and others. We can see how this stressful event for Hacking Team reflects on the pattern of Mr.D’s emails.</p>\n<h2>Mysteries of the Subject</h2>\n<p>Aside from the defined activity patterns and discovered anomalies, email subjects also reveal a very detailed overview of Mr.D’s communication with other employees of Hacking Team.</p>\n<h6>timeline of emails sent from mr.d to individual ht EMPLOYEES in 2014 ( hover on graph for subject line )<br /><br />TOOL : <a href=\"http://www.tableau.com/\">TABLEAU</a></h6>\n<p>Just to make a short but interesting digression: while creating this graph of email subjects we stumbled upon the moment A.Pelliccione <a href=\"http://motherboard.vice.com/read/the-hacking-team-defectors\">left</a> Hacking Team in March 2014. At this moment his communication with Mr. D stops. Based on the IP location data that we will present later, we also found out that he moved to Malta and started communicating through a different email address – <a href=\"https://reaqta.com/\">reaqta.com</a>.</p>\n<p>We can argue whether the email subject should be considered metadata or not. However, looking from a technical point of view, the subject is a part of the header in the same way as other types of information (From, To, Date, etc.). Basically, it’s just a matter of choice of the person who is to analyse the metadata. For the intents and purposes of our research, we will consider the subject a legitimate source for metadata analysis.</p>\n<h6>timeline of subject lines ( 2014 )<br /><br />TOOL : <a href=\"http://www.tableau.com/\">TABLEAU</a></h6>\n<p>Getting back to email subjects, they can sometimes give us some really amusing information. For instance, many companies such as Amazon, list the ordered items in the subject of a Confirmation email you receive after your payment has been processed.</p>\n<p>By extracting the emails sent by Amazon to Hacking Team employees, we were able to get an insight into their purchases.</p>\n<h6>timeline of emails with subjects from amazon.it<br /><img class=\"aligncenter size-full wp-image-682\" src=\"http://labs.rs/wp-content/uploads/2015/10/amazon-01.jpg\" alt=\"amazon-01\" width=\"961\" height=\"1200\" /></h6>\n<p>But there are some more extreme examples.</p>\n<p>If we look at the treemap of Hacking Team partners, there is a company called Carlson Wagonit Travel. According to the company’s <a href=\"http://www.carlsonwagonlit.com/en/global/our_company/\">website</a>, they deliver solutions for business travel, meetings and events management. For HT they arrange and buy plane tickets, book hotels and provide travel assistance. They have one bad habit (which is quite common for many booking agencies), every time an airplane ticket is booked, the agency would send an email with name and airport codes, contained in the subject line, to the prospective passenger. Extracting that information from the subject and cross-referencing with the date the email was sent, we are able to get an approximate information about the journeys of HT employees.</p>\n<p>The list of Hacking Team frequent flyers and locations they visit looks like this.</p>\n<h6>map of ht employees flights based on cwt emails subject lines<br /><br />TOOL : <a href=\"http://www.tableau.com/\">TABLEAU</a><span><br /></span></h6>\n<p>These data give some interesting information related to our assumption of how the organisational structure of Hacking Team looks like. If we go back to our organisational structure graph based on social network analysis and compare with this list of frequent flyers, we can see that the most frequent flyers are not very high in the hierarchy according to our network graph. However, if we group the flights by passenger’s name, we realise that each of the most frequent flyers is based in a certain place, and covers a certain region/market, such as SE Asia, Middle East, South America etc. Conclusion that we can get from this is that those employees are responsible for certain markets or regional Hacking team offices around the world.</p>\n<h6>individual ht employees flights map based ON CWT EMAILS SUBJECT LINES<br /><img class=\"aligncenter size-full wp-image-683\" src=\"http://labs.rs/wp-content/uploads/2015/10/traveling-maps.jpg\" alt=\"traveling maps\" width=\"1105\" height=\"1200\" /></h6>\n<p>If we regroup the same set of data, by location, we can see at which point in time and where two or more Hacking Team employees have met or have traveled together. This implies potential business meetings, sales of surveillance tools, establishing new relations with international customers and government agencies around the globe.</p>\n<h6>timeline of INDIVIDUAL HT EMPLOYEES FLIGHTS to different countries  BASED ON CWT EMAILS SUBJECT LINES<br /><img class=\"aligncenter size-full wp-image-685\" src=\"http://labs.rs/wp-content/uploads/2015/10/meetings-01.jpg\" alt=\"meetings-01\" width=\"961\" height=\"1200\" /><br />TOOL : <a href=\"http://www.tableau.com/\">TABLEAU</a></h6>\n<h2>Homing pigeon</h2>\n<p>The email header hides one even more precise location information. In some cases, the email headers reveal the IP address of the sender. The IP address can then be geolocated, using some publicly available tools, to the level of a city or individual router. In the context of our investigation, this allows us to trace every one of Mr.D’s contacts. Every time someone sends an email to Mr.D, that person basically reveals their location to us. Just by analysing the metadata of Mr.D’s received emails we can get information where the senders are located, when they changed city or country.</p>\n<p>This allowed us to locate even more precisely in time all employees of Hacking Team.</p>\n<h6>timeline of hT employees ip locations based on emails received by mr.d (2014-2015)<br /><span><img class=\"alignnone wp-image-690 size-full\" src=\"http://labs.rs/wp-content/uploads/2015/10/IP-cities1.jpg\" alt=\"IP cities\" width=\"1200\" height=\"501\" /><br /></span></h6>\n<p>We can see for example, that most of the employees are located in Italy, but there are some of them being situated in different places around the world.</p>\n<p><strong>D.Maglietta</strong> is for example head of their office in Singapore but he spends Christmas in Spain. <strong>E.Pardo</strong> is in Bogota, Colombia most of the time and he had a visit from another HT employee <strong>A.Scarafile</strong> on January 14th. We can see how <strong>E.Shehata</strong> jumps around the Middle East visiting Qatar, Lebanon, United Arab Emirates, Egypt and Jordan. <strong>E. Rabe</strong> is situated in Ardmore, PA, USA but moved on February 14th to another suburb of Philadelphia. And finally, even though HT claims to have an office in Washington DC, based on metadata we didn’t find any evidence that would support that.</p>\n<p>On a World map, the distribution of their locations looks like this.</p>\n<h6>map OF HT EMPLOYEES IP LOCATIONS BASED ON EMAILS RECEIVED BY MR.D (2014-2015)<br /><br />TOOL : <a href=\"http://www.tableau.com/\">TABLEAU</a></h6>\n<p>Locations of the external contacts of Mr.D give us a real insight into their global operations.</p>\n<h6>MAP OF external contacts IP LOCATIONS BASED ON EMAILS RECEIVED BY MR.D (2014-2015)<br />TOOL : <a href=\"http://www.tableau.com/\">TABLEAU</a></h6>\n<p>This tiny piece of information allows us to explore individual contacts in each country, to find their main partners, even to track locations of their contacts in time.</p>\n<h6>MAP OF EXTERNAL CONTACTS IP LOCATIONS ( ZOOM  or move map to explore other regions )<br />TOOL : <a href=\"http://www.tableau.com/\">TABLEAU</a></h6>\n<h2>It’s Just Metadata</h2>\n<p>More often than not, the power of metadata is being taken naively or its potential usage is being oversimplified in comparison with the content of our communication. But we see that even our not very sophisticated, DIY methods, enabled us to create a deep and clear image of someone’s habits and activities, using information extracted from ‘only’ email metadata. Although our investigation primarily discovered relations, patterns and anomalies of someone’s work life, it still gave us an insight into that person’s habits that border with private life. In the end, metadata scans someone’s behaviors on a much deeper level than traditional surveillance practice related to content could ever do.</p>\n<p>At moments, while conducting this investigation, it certainly felt as if we were peeking into the deepest corners of someone’s life. What felt even more disturbing is the idea that our subjects of analysis are probably less aware of their behavioral patterns that we are. It’s just metadata, and in our case just one little segment of it. This is why our research provoked an internal debate within our team on the ethical issues of this kind of practice and on the form in which the findings of this research should be published. On numerous occasions, supporters of NSA surveillance programs, claimed that collecting and analysis of metadata is not surveillance. According to our data exploration, we can claim that it can be even more intrusive than regular content surveillance.</p>\n<h2>Who has access to metadata?</h2>\n<p>Understanding who has access to metadata and the possibility to analyse it will give us an answer to the question of the new power structures and distribution of wealth in the information society.</p>\n<h6></h6><div class=\"stag-column stag-one-third\">Companies<br />The first and obvious group are the companies that provide services such as Google or Facebook. They don’t just have access to the metadata, they have actual data and content on their servers. Quality, variety and amount of metadata that for example Google owns about every user of his services, stored in gigantic datacentres are unprecedented <a href=\"https://www.academia.edu/10369819/Anomaly_Detection_The_Mathematization_of_the_Abnormal_in_the_Metadata_Society\">MONOPOLIES OF COLLECTIVE DATA</a>. Through their core business models they are pioneers of metadata exploitation. It could even be said that the first data centre setup by Google in 1998 can be considered the milestone of the birth of the metadata society.</div> \n<h6></h6><div class=\"stag-column stag-one-third\">INFRASTRUCTURE<br />The second group with access to metadata is related to the the internet’s infrastructure. Those are Internet service providers, mobile service providers, Internet exchange points and submarine optic cables and they can access data when it flows through their cables, routers and servers. The quality of metadata that they can collect depends on the endpoints attached to the infrastructure, but in any case they have access to the basic metadata of the internet packets. Even though the content of, say, emails, is supposedly encrypted (at least when using these mainstream services), the metadata is not, because the email architecture simply has to rely on metadata that are readable, as explained before.</div> \n<h6></h6><div class=\"stag-column stag-one-third stag-column-last\">GOVERNMENT<br />National Laws in most cases give the Government or some of the Agencies thereof a legitimate access to users’ data, including email and other metadata. Internet infrastructure owners or companies that provide services are obliged to cooperate with Governments whose jurisdiction they are under. They often comply with Government requests and have different forms of technical cooperations. However, in many countries Government agencies have invested in developing programs for mass surveillance of citizens based on collecting metadata. These programs often rely on software that creates and exploits backdoors (as is Hacking Team’s case) or use some other creative way to get access to metadata.</div> \n<p>Those are the hunters, hoarders and scavengers in the ecosystem of the metadata society, but there are some smaller species worth mentioning as well. Metadata is often a resource for different businesses based on data collection and analysis in the field of digital marketing, business analytics or scientific research. You can even be a subject of surveillance in your work environment. The company you work for could perform metadata analysis of your productivity, anomalies in your behavior during work time and analysis of your contacts. To name an example, this kind of internal company surveillance <a href=\"http://www.niceactimize.com/solution-demos-and-videos\">service</a> is provided by one of the Hacking Team main partners – Nice, mentioned earlier in this text.</p>\n<hr class=\"stag-section stag-divider stag-divider--plain\" />Understanding the power of metadata brings us closer to understanding the algorithmic governmentality as a concept and practice. The quality of metadata is that it is really easy to process and it can be done by machines and algorithms. In the eye of the algorithm, we are observed through our profiles, sets of behavioral patterns and anomalies extracted from our metadata. Automatic processing and algorithmic analysis of those data in real time leads to the world in which algorithms can decide whether we are terrorists or regular citizens, are we suitable for a <a href=\"http://www.forbes.com/sites/parmyolson/2011/03/15/the-algorithm-that-beats-your-bank-manager/\">loan in the bank</a>, an <a href=\"http://www.insurancecompanies.com/insider-information-how-insurance-companies-measure-risk/\">insurance policy</a>, or who is going to appear in our <a href=\"https://www.facebook.com/\">social stream</a>. Algorithms can eventually predict our future behaviour based on our past metadata, bringing us closer to the concept of <a href=\"http://www.theguardian.com/cities/2014/jun/25/predicting-crime-lapd-los-angeles-police-data-analysis-algorithm-minority-report\">pre-crime</a>, the tendency in criminal justice systems to focus on crimes not yet committed.\n<h3>We are not going to conclude anything about Hacking Team’s activities, because that was never the goal of our research. We wanted to understand, hands-on, through research and practice how metadata analysis can be performed and what we can learn from it. We hope that researchers and investigative journalists can use our data and exploration for their own research and that they will be able to find new connections and leads based on metadata.</h3>\n<hr class=\"stag-section stag-divider stag-divider--plain\" />Contributors\n<h5><strong>Vladan Joler</strong> – concept, research, data analysis, data visualization, text<br />Andrej Petrovski – data mining and processing, text<br />Nikola Kotur – data processing and development<br />Tamara Pavlovic – editing and proofreading<br />Jan Krasni – peer review<b></b></h5>\n<h5>More about Share Lab you can find <a href=\"http://labs.rs/en/about/\">here </a><br />For any question, raw data for research, or anything else, please contact us  on info.at.shareconference.net</h5>\n\n	',1),(207,'Cryptographic Module Standards at a Crossroads after Snowdenâ€™s Revelations','http://pomcor.com/2015/11/12/cryptographic-module-standards-at-a-crossroads-after-snowdens-revelations/',0,0,'\n						<p>\r\nLast week I participated in the\r\n<a href=\"http://icmconference.org/\">third International Cryptographic\r\nModule Conference (ICMC)</a>, organized by the Cryptographic Module\r\nUser Forum (CMUF), and concerned with the validation of cryptographic\r\nmodules against government and international standards.  You may think\r\nof cryptographic module validation as a dry topic, but it was quite an\r\nexciting conference, full of technical and political controversy.  The\r\ntechnical controversy resulted from the fact that the standards are\r\nout of sync with current technology and it is not at all clear how\r\nthey can be fixed.  The political controversy resulted from the fact\r\nthat, after Snowden’s revelations, it is not at all clear who should\r\ntry to fix them.  The organizers signalled that they were not afraid\r\nof controversy by inviting as keynote speakers both Phil Zimmerman,\r\ncreator of PGP and co-founder of Silent Circle, and Marianne Bailey,\r\nDeputy CIO for Cybersecurity at the US Department of Defense, besides\r\nwell known expert Paul Kocher of SSL fame.  I enjoyed an exchange\r\nbetween Zimmerman and Bailey on the imbalance between defense and\r\noffense at the NSA and its impact on cybersecurity. <span></span>\r\n</p>\r\n\r\n<p>\r\nBesides the excitement, I liked the technical depth of the conference,\r\nand was pleasantly surprised by the gender and ethnic diversity, which\r\nwas striking by contrast with Silicon Valley.  The next ICMC will take\r\nplace earlier in the year, May 18-20, 2016, in Ottawa, and the\r\n<a href=\"http://icmconference.org/?page_id=24\">call for papers</a> is\r\nalready out.\r\n</p>\r\n\r\n<h2>Background</h2>\r\n\r\n<p>\r\nThe conference was concerned with the design, implementation and\r\nvalidation of cryptographic modules that conform with the \r\n<a href=\"http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf\">FIPS 140-2</a>\r\nand ISO 19790:2012 standards.  FIPS 140-2 is a Federal Information\r\nProcessing Standard issued by the US National Institute of Standards\r\nand Technology (NIST).  ISO 19790:2012 is an international standard\r\nderived from FIPS 140-2, much of which is word-by-word identical to\r\nFIPS 140-2.  Cryptographic modules are validated as conforming to FIPS\r\n140-2 by the\r\n<a href=\"http://csrc.nist.gov/groups/STM/cmvp/\">Cryptographic Module\r\nValidation Program (CMVP)</a>, which is jointly managed by NIST and\r\nthe Communications Security Establishment Canada (CSEC) and relies on\r\nan international network of Cryptography and Security Testing (CST)\r\nlabs spanning four continents.  There is also a\r\n<a href=\"http://csrc.nist.gov/groups/STM/cavp/\">Cryptographic\r\nAlgorithm Validation Program (CAVP)</a> for the validation of\r\nalgorithms rather than modules.\r\n</p>\r\n\r\n<p>\r\nHistorically, NIST has been an internationally acknowledged leader in\r\ncryptographic engineering.  It organized international cryptographic\r\ncompetitions that resulted in the specification of AES as the\r\nworldwide de facto standard for symmetric encryption and SHA-3 as an\r\nalternative to the NSA-designed family of hash functions SHA-2.  CMVP\r\nhas been one of the successes of NIST in cryptographic leadership.\r\nCMVP certification is widely sought after, not only for modules used\r\nby Federal Agencies in the US and Canada, but also for modules used by\r\nother governments and modules used for commercial purposes unrelated\r\nto any government.\r\n</p>\r\n\r\n\r\nBut the Snowden revelations regarding Dual EC DRBG, which Zimmerman\r\nreferred to in his keynote as having “humiliated” NIST,\r\nhave had an impact on the trust that the international cryptographic\r\ncommunity places in NIST, and given impetus to the development of\r\nnational cryptographic standards by countries other than the United\r\nStates.  It will be difficult for NIST in the future to specify\r\ncryptographic standards that are accepted worldwide.  Hence the\r\nquestion of who should fix the cryptographic module standards, which\r\nare now widely seen as obsolete.\r\n\r\n\r\n<h2>An obsolete standard</h2>\r\n\r\n<p>\r\nFIPS 140-2 is a revision of FIPS 140-1, which is itself a successor of\r\n<a href=\"http://everyspec.com/FED-STD/FED-STD-1027_4688/\">FED-STD-1027</a>, dated April 1982.  FED-STD-1027 was renamed FIPS PUB 140\r\nbefore being revised and issued in January 1994 as FIPS 140-1.\r\nFederal Information Processing Standards (FIPS) are usually revised\r\nevery five years.  FIPS 140-1 was issued in May 2001, with minor\r\nchanges over FIPS 140-2; but an attempt at making more radical changes\r\nin FIPS 140-3 was abandoned after drafts in 2007 and 2009.\r\n</p>\r\n\r\n<p>\r\nBesides being old, FIPS 140-2 is technically obsolete.\r\n</p>\r\n\r\n<p>\r\nIn the eighties, cryptography had to be implemented in hardware,\r\nbecause software was too slow.  FED-STD-1027 was only concerned with\r\nhardware implementations.  FIPS 140-1 and 140-2 allow software\r\nimplementations but only as an afterthought.  They require a\r\ncryptographic module to be contained within a <i>physical\r\nboundary</i>, defined in FIPS 140-2 as <i>an explicitly defined\r\ncontinuous perimeter that establishes the physical bounds of a\r\ncryptographic module and contains all the hardware, software, and/or\r\nfirmware components of a cryptographic module</i>.  Two sentences\r\nattempt to reconcile the concept of a physical boundary with the\r\nconcept of a software cryptographic module in FIPS 140-2, but come up\r\nshort:\r\n</p> \r\n\r\n<i>\r\n</i><blockquote><i>\r\n</i><p><i>\r\nIf a cryptographic module consists of software or firmware\r\ncomponents, the cryptographic boundary shall contain the processor(s)\r\nand other hardware components that store and protect the software and\r\nfirmware components. Hardware, software, and firmware components of a\r\ncryptographic module can be excluded from the requirements of this\r\nstandard if shown that these components do not affect the security of\r\nthe module.\r\n</i></p><i>\r\n</i></blockquote><i>\r\n</i>\r\n\r\n<p>\r\nThe concept of a cryptographic boundary is ill-defined for a software\r\nmodule, and this is a source of insecurity in validated products.  In\r\nhis presentation, Ashit Vora said that the cryptographic boundary may\r\nbe shrunk to exclude key management from validation, or to claim\r\ncompliance of OpenSSL with FIPS 140-2 even though the implementation\r\nof TLS by OpenSSL has not been validated.  I repeatedly heard\r\nconference attendees refer to applying FIPS 140-2 to a software module\r\nas “<i>fitting a square peg into a round hole</i>”.\r\n</p>\r\n\r\n<p>\r\nYet the first cryptographic module certified by CMVP was a software\r\nmodule (the Entrust Cryptographic Kernel, V1.9, “For use in\r\nPCs”, certified on October 12, 1995).  FIPS 140-1 was already\r\nobsolete in 1995, and FIPS 140-2, which made only minor changes, did\r\nnot bring it up to date.\r\n</p>\r\n\r\n<p>\r\nSince then, the standard has become more and more out of sync with\r\ntechnology, in spite of efforts to keep it up to date by issuing\r\n<a href=\"http://csrc.nist.gov/groups/STM/cmvp/documents/fips140-2/FIPS1402IG.pdf\">implementation\r\nguidance</a>.  Here are some examples.  JavaScript programs are\r\ninterpreted by a web browser and run on any processor and operating\r\nsystem on which the browser runs, yet an algorithm or module\r\nimplemented in JavaScript can only be certified for a specific\r\nprocessor and operating system.  Similarly, as pointed out by Apostol\r\nVassilev of NIST in response to a question after his presentation, a\r\ncryptographic module implemented by software running on a virtual\r\nserver can only be certified for a particular version of the\r\nhypervisor and a specific physical processor on which the hypervisor\r\nruns.  Mobile devices rely on encryption for protection of data and\r\nkeys, yet FIPS 140-2 does not allow encryption to be relied upon to\r\nincrease the security level.  Mobile devices derive encryption keys\r\nfrom a hardware root of trust or a cloud root of trust, but FIPS 140-2\r\nonly provides the option of deriving encryption keys from a password.\r\n</p>\r\n\r\n<p>\r\nAlso, the module validation process has not kept up with the\r\naccelerating pace of technology evolution.  As pointed out by Vassilev\r\nin his presentation, certification review cycles are now much longer\r\nthan product cycles.\r\n</p>\r\n\r\n<h2>Benefits are not real</h2>\r\n\r\n<p>\r\nNIST speakers at the conference made it clear that they want to\r\nreplace FIPS 140-2 with ISO 19790 as the standard against which CMVP\r\nvalidates cryptographic modules used by US Federal Agencies.  Michael\r\nCooper of NIST, during his joint presentation with other NIST\r\nspeakers, said that NIST expects to submit a recommendation to that\r\neffect to the Commerce Secretary as early as next month, after\r\nfinishing a review of comments on a Federal Register Notice proposing\r\nthe change.\r\n</p>\r\n\r\n<p>\r\nAt first glance, replacing FIPS 140-2 with ISO 19790 seems to be a\r\ngood solution to the problems facing cryptographic module validation.\r\nIt appears to provide two benefits:\r\n</p>\r\n\r\n<ol><li>\r\nISO 19790 is much more recent than FIPS 140-2, its second edition being dated\r\n2012-08-15.  (The Federal Register Notice refers to 19790:2014 but\r\nthere is no such thing.  There is a 19790:2006, a.k.a. 19790 1st\r\nEdition, a 19790:2012, a.k.a. 19790 2nd Edition, and a\r\n<a href=\"https://webstore.iec.ch/publication/23401\">Technical\r\nCorrigendum</a> to 1790:2012 dated 2015-09-25.)  Hence replacing FIPS\r\n140-2 with ISO 19790 would appear to bring up to date the standard\r\nused by CMVP.\r\n</li>\r\n\r\n<li>\r\nISO 19790 is an international standard.  Hence using it in the CMVP\r\nprogram would appear to solve the problem that will be faced by\r\nvendors of cryptographic modules and testing laboratories as national\r\ncryptographic standards proliferate.\r\n</li>\r\n\r\n</ol><p>\r\nBut neither benefit is real:\r\n</p>\r\n\r\n<ol><li>\r\nAlthough the second edition of ISO 19790 is dated 2012, it only makes\r\nminor modifications to FIPS 140-2 (which itself only made minor\r\nmodifications to the 1994 FIPS 140-1 standard, itself derived from the\r\n1982 FED-STD-1027).  ISO 19790 is as out of sync with current technology\r\nas FIPS 140-2.\r\n</li>\r\n\r\n<li>\r\nAlthough ISO 19790 is an international standard, NIST speakers said\r\nthat NIST intends to specify its own cryptographic algorithms in US\r\nannexes, and issue its own implementation guidance, expecting other\r\ncountries to do the same.  This will negate the benefits of ISO 19790\r\nbeing an international standard for vendors and labs.\r\n</li>\r\n\r\n</ol><p>\r\nAnd while the benefits are not real, ISO 19790 has real disadvantages:\r\nit is bad policy, and it repeats a mistake that has been blamed for\r\nthe inclusion of Dual EC DRBG in SP 800-90A.\r\n</p>\r\n\r\n<h2>Bad policy</h2>\r\n\r\n<p>\r\nISO charges a fee for downloading standards.  Each document costs\r\nhundreds of dollars, and each standard includes many ancillary\r\ndocuments.  In his presentation, Randall Easter, who holds positions\r\nboth at NIST and ISO, went over the ancillary documents related to ISO\r\n19790; they include: ISO 17825, 18367, 19896-1, 19896-2, 20085-1,\r\n20085-2, 20540, 20543, 2479 and 30104.  In a comment after the talk,\r\nan attendee estimated that his organization would have to spend\r\nthousands of dollars on the documents.  If ISO 19790 replaces FIPS\r\n140-2, testing labs and vendors of cryptographic modules would have to\r\npay collectively millions of dollars to ISO.  But development of the\r\nISO standard has been paid for with US taxpayer money, since much of\r\nit is word-by-word identical to FIPS 140-2, and where the two\r\nstandards differ the changes have been made with NIST participation.\r\nSo US taxpayers would end up paying twice for the ISO standard, first\r\nby financing the work of NIST on FIPS 140-2 and ISO 19790, and then by\r\nbearing the cost of the documents, which labs and vendors will pass\r\nalong to US Federal Agencies that buy cryptographic modules conforming\r\nto the standard.\r\n</p>\r\n\r\n<h2>Repeating the Dual EC DRBG mistake</h2>\r\n\r\n<p>\r\nNIST included a deterministic random bit generator (DRBG) known as\r\nDual EC DRBG, invented by the NSA, in the original version of\r\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf\">SP\r\n800-90A</a>,\r\nand removed it after stories in\r\n<a href=\"http://www.nytimes.com/2013/09/06/us/nsa-foils-much-internet-encryption.html\">The\r\nNew York Times</a>,\r\n<a href=\"http://www.propublica.org/article/the-nsas-secret-campaign-to-crack-undermine-internet-encryption\">ProPublica</a>,\r\nand\r\n<a href=\"http://www.theguardian.com/world/2013/sep/05/nsa-gchq-encryption-codes-security\">The\r\nGuardian</a>, referring to internal NSA memos leaked by Edward\r\nSnowden, suggested that the NSA had planted a back door in the\r\nalgorithm.\r\n</p>\r\n\r\n<p>\r\nDual EC DRBG is a very simple algorithm, and the method for planting a\r\nback door inside it is also very simple.  They are described by\r\ndiagrams in slides 6 and 9 of a\r\n<a href=\"http://csrc.nist.gov/groups/SMA/ispab/documents/minutes/2013-12/nist_cryptography_800-90.pdf\">presentation</a>\r\nby John Kelsey of NIST.  <i>P</i> and <i>Q</i> being points of an\r\nelliptic curve, pseudorandom bits are derived from <i>sQ</i>,\r\nwhere <i>s</i> starts out as the seed and is replaced with <i>sP</i>\r\neach time the DRBG is used.  If <i>P</i> and <i>Q</i> are supplied by\r\nan adversary instead of being random, the adversary can plant a back\r\ndoor by letting <i>P</i> be <i>aQ</i>, where <i>a</i> is the back door\r\nknown to the adversary.  The adversary can later compute the new\r\nvalue <i>sP</i> assigned to <i>s</i> from <i>sQ</i>, since <i>sP</i>\r\n= <i>s(aQ)</i> = <i>a(sQ)</i>.  The adversary will not be able to\r\nsimply observe <i>sQ</i> as the algorithm is used, because the\r\nalgorithm only outputs a subset of the bits of the binary\r\nrepresentation of the abscissa of the point <i>sQ</i>.  But only 16 of\r\nthe bits are not included in the subset, and the adversary can find\r\ntheir values by making up to 2<sup>16</sup> guesses.  To test a guess,\r\nthe adversary combines the guessed bits with the output bits to obtain\r\nthe abscissa of a point <i>R</i> of the curve, computes the ordinate\r\nusing the curve equation, computes <i>S</i> = <i>aR</i>, drops 16 bits\r\nfrom the abscissa of <i>S</i>, and checks if the remaining bits agree\r\nwith the next output of the algorithm.\r\n</p>\r\n\r\n<p>\r\nThe back door <i>a</i> is a secret known only to the adversary.  It is\r\nunfeasible to compute the scalar <i>a</i> such that <i>P</i>\r\n= <i>aQ</i> even though <i>P</i> and <i>Q</i> are public parameters\r\nbecause discrete logarithms are supposed to be hard to compute in the\r\nfield of points of the elliptic curve.  (If you are wondering what\r\ndiscrete logarithms have to do with this, if the group operation were\r\nmetaphorically called multiplication instead of addition, <i>aQ</i>\r\nwould be written <i>Q<sup>a</sup></i> and called exponentiation\r\ninstead of scalar multiplication.  With the multiplicative\r\nnotation, when <i>P</i> = <i>Q<sup>a</sup></i>, the exponent <i>a</i>\r\nis said to be the logarithm of <i>P</i> in base <i>Q</i>,\r\n“discrete” because the group is finite.)\r\n</p>\r\n\r\n<p>\r\nHow could such a simple back door make its way to SP 800-90A?  It’s a\r\nlong story with many twists and turns.  An insider account can be\r\nfound in\r\n<a href=\"http://csrc.nist.gov/groups/ST/crypto-review/documents/dualec_in_X982_and_sp800-90.pdf\">another\r\npresentation</a> by John Kelsey.  Additional information can be found,\r\namong other places,\r\nin a\r\n<a href=\"http://blog.cryptographyengineering.com/2013/12/a-few-more-notes-on-nsa-random-number.html\">blog\r\npost</a> by cryptographer Matthew Green, in this\r\n<a href=\"https://projectbullrun.org/dual-ec/\">web site dedicated\r\nto Dual EC DRBG</a>, and in this\r\n<a href=\"https://en.wikipedia.org/wiki/Dual_EC_DRBG\">Wikipedia\r\npage</a>.\r\n</p>\r\n\r\n<p>\r\nBut the root cause is clear.  Dual EC DRBG was originally standardized\r\nas part of the X9.82 standard developed by working group X9F1 of X9\r\nwith NIST participation.  X9 is an ANSI-accredited organization that\r\ndevelops financial services standards in the US and submits them to\r\nISO for international standardization.  (X9.82 eventually became ISO\r\n18031.)  Like ISO and other ANSI-accredited standards organizations,\r\nX9 is financed by membership fees and the sale of standards documents.\r\nConsequently, its working groups work behind closed doors, and its\r\nresulting standards receive little public scrutiny.  This business\r\nmodel for standards development works well for most kinds of business\r\nand technical standards, but it does not work well for cryptography.\r\nCryptography requires transparency and extensive public scrutiny to\r\navoid the intentional or unintentional introduction of weaknesses in\r\nstandards.  The international cryptographic competitions organized by\r\nNIST to specify AES and SHA-3 are good examples of cryptographic\r\nstandards development with transparency and public scrutiny.\r\n</p>\r\n\r\n<p>\r\nHere is what John Kelsey had to say about the development of the Dual\r\nEC DRBG standard within X9, in slide 15 of his\r\n<a href=\"http://csrc.nist.gov/groups/ST/crypto-review/documents/dualec_in_X982_and_sp800-90.pdf\">insider\r\naccount</a>:\r\n</p>\r\n\r\n<i>\r\n</i><i>Doing standard in X9 made it harder to get feedback\r\n</i><i>Copies not available for review except by paying\r\nFew universities are X9 members, so academic cryptographers usually can’t be involved\r\nLimited number of members with the right background (e.g., RNGs)\r\n</i><i>Public review not very public\r\n</i>\r\n\r\n<p>\r\nNIST made a mistake by adopting a standard that was developed in a\r\nmanner open to manipulation.  John Kelsey adds in slide 46:\r\n</p>\r\n\r\n<i>\r\n</i><i>Many reasons why Dual EC DRBG should not have been in standard…\r\n</i><i>Performance, Bias, Potential Trapdoor\r\n…but it had a champion on X9.82 editing committee\r\n</i><i>Common way for weak algorithms to get into standards.\r\n</i>\r\n\r\n<p>\r\nTransferring responsibility for the cryptographic module standard to\r\nISO would mean repeating the mistake.\r\n</p>\r\n\r\n<h2>Towards a solution with real benefits</h2>\r\n\r\n<p>\r\nThat the ISO business model is not suitable for the development of\r\ncryptographic standards does not mean that we should give up on an\r\ninternational solution.  An international cryptographic module\r\nstandard would be very beneficial to vendors, labs and government\r\nagencies.  Algorithms and implementation guidance should be part of\r\nthe standard and the same for all countries that accept the standard.\r\nInternational cryptographic harmonization will be difficult to\r\nachieve, but it should be a goal.\r\n</p>\r\n\r\n<p>\r\nAnother difficult goal to achieve will be to bring the cryptographic\r\nmodule standard up to date, when we do not even have a clear concept\r\nof what a software cryptographic module is.  In his talk, Apostol\r\nVassilev said that NIST intends to create a working group with\r\nrepresentatives from government, industry, laboratories and academia.\r\nThat would be a good step towards that goal.\r\n</p>\r\n<strong>Share this:</strong><br /><a class=\"synved-social-button synved-social-button-share synved-social-size-48 synved-social-resolution-single synved-social-provider-facebook nolightbox\" title=\"Share on Facebook\" href=\"http://www.facebook.com/sharer.php?u=http%3A%2F%2Fpomcor.com%2F2015%2F11%2F12%2Fcryptographic-module-standards-at-a-crossroads-after-snowdens-revelations%2F&amp;t=Cryptographic%20Module%20Standards%20at%20a%20Crossroads%20after%20Snowden%E2%80%99s%20Revelations&amp;s=100&amp;p%5Burl%5D=http%3A%2F%2Fpomcor.com%2F2015%2F11%2F12%2Fcryptographic-module-standards-at-a-crossroads-after-snowdens-revelations%2F&amp;p%5Bimages%5D%5B0%5D=&amp;p%5Btitle%5D=Cryptographic%20Module%20Standards%20at%20a%20Crossroads%20after%20Snowden%E2%80%99s%20Revelations\"><img alt=\"facebook\" title=\"Share on Facebook\" class=\"synved-share-image synved-social-image synved-social-image-share\" width=\"48\" height=\"48\" src=\"http://pomcor.com/wp-content/plugins/social-media-feather/synved-social/image/social/regular/96x96/facebook.png\" /></a><a class=\"synved-social-button synved-social-button-share synved-social-size-48 synved-social-resolution-single synved-social-provider-twitter nolightbox\" title=\"Share on Twitter\" href=\"http://twitter.com/share?url=http%3A%2F%2Fpomcor.com%2F2015%2F11%2F12%2Fcryptographic-module-standards-at-a-crossroads-after-snowdens-revelations%2F&amp;text=Check%20this%20out\"><img alt=\"twitter\" title=\"Share on Twitter\" class=\"synved-share-image synved-social-image synved-social-image-share\" width=\"48\" height=\"48\" src=\"http://pomcor.com/wp-content/plugins/social-media-feather/synved-social/image/social/regular/96x96/twitter.png\" /></a><a class=\"synved-social-button synved-social-button-share synved-social-size-48 synved-social-resolution-single synved-social-provider-google_plus nolightbox\" title=\"Share on Google+\" href=\"https://plus.google.com/share?url=http%3A%2F%2Fpomcor.com%2F2015%2F11%2F12%2Fcryptographic-module-standards-at-a-crossroads-after-snowdens-revelations%2F\"><img alt=\"google_plus\" title=\"Share on Google+\" class=\"synved-share-image synved-social-image synved-social-image-share\" width=\"48\" height=\"48\" src=\"http://pomcor.com/wp-content/plugins/social-media-feather/synved-social/image/social/regular/96x96/google_plus.png\" /></a><a class=\"synved-social-button synved-social-button-share synved-social-size-48 synved-social-resolution-single synved-social-provider-reddit nolightbox\" title=\"Share on Reddit\" href=\"http://www.reddit.com/submit?url=http%3A%2F%2Fpomcor.com%2F2015%2F11%2F12%2Fcryptographic-module-standards-at-a-crossroads-after-snowdens-revelations%2F&amp;title=Cryptographic%20Module%20Standards%20at%20a%20Crossroads%20after%20Snowden%E2%80%99s%20Revelations\"><img alt=\"reddit\" title=\"Share on Reddit\" class=\"synved-share-image synved-social-image synved-social-image-share\" width=\"48\" height=\"48\" src=\"http://pomcor.com/wp-content/plugins/social-media-feather/synved-social/image/social/regular/96x96/reddit.png\" /></a><a class=\"synved-social-button synved-social-button-share synved-social-size-48 synved-social-resolution-single synved-social-provider-linkedin nolightbox\" title=\"Share on Linkedin\" href=\"http://www.linkedin.com/shareArticle?mini=true&amp;url=http%3A%2F%2Fpomcor.com%2F2015%2F11%2F12%2Fcryptographic-module-standards-at-a-crossroads-after-snowdens-revelations%2F&amp;title=Cryptographic%20Module%20Standards%20at%20a%20Crossroads%20after%20Snowden%E2%80%99s%20Revelations\"><img alt=\"linkedin\" title=\"Share on Linkedin\" class=\"synved-share-image synved-social-image synved-social-image-share\" width=\"48\" height=\"48\" src=\"http://pomcor.com/wp-content/plugins/social-media-feather/synved-social/image/social/regular/96x96/linkedin.png\" /></a><a class=\"synved-social-button synved-social-button-share synved-social-size-48 synved-social-resolution-single synved-social-provider-tumblr nolightbox\" title=\"Share on tumblr\" href=\"http://tumblr.com/share?s=&amp;v=3&amp;t=Cryptographic%20Module%20Standards%20at%20a%20Crossroads%20after%20Snowden%E2%80%99s%20Revelations&amp;u=http%3A%2F%2Fpomcor.com%2F2015%2F11%2F12%2Fcryptographic-module-standards-at-a-crossroads-after-snowdens-revelations%2F\"><img alt=\"tumblr\" title=\"Share on tumblr\" class=\"synved-share-image synved-social-image synved-social-image-share\" width=\"48\" height=\"48\" src=\"http://pomcor.com/wp-content/plugins/social-media-feather/synved-social/image/social/regular/96x96/tumblr.png\" /></a><a class=\"synved-social-button synved-social-button-share synved-social-size-48 synved-social-resolution-single synved-social-provider-mail nolightbox\" title=\"Share by email\" href=\"mailto:?subject=Cryptographic%20Module%20Standards%20at%20a%20Crossroads%20after%20Snowden%E2%80%99s%20Revelations&amp;body=Check%20this%20out:%20http%3A%2F%2Fpomcor.com%2F2015%2F11%2F12%2Fcryptographic-module-standards-at-a-crossroads-after-snowdens-revelations%2F\"><img alt=\"mail\" title=\"Share by email\" class=\"synved-share-image synved-social-image synved-social-image-share\" width=\"48\" height=\"48\" src=\"http://pomcor.com/wp-content/plugins/social-media-feather/synved-social/image/social/regular/96x96/mail.png\" /></a><br />',1),(208,'bndw/pick','https://github.com/bndw/pick',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>A tiny password manager for OS X and Linux.</p>\n\n<p><a href=\"https://github.com/bndw/pick/raw/master/demo.gif\"><img src=\"https://github.com/bndw/pick/raw/master/demo.gif\" alt=\"demo\" /></a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/bndw/pick#features\"><span class=\"octicon octicon-link\"></span></a>Features</h2>\n\n<ul><li>JSON formatted data</li>\n<li>Environment Variable configuration</li>\n<li>GPG for encryption</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/bndw/pick#dependencies\"><span class=\"octicon octicon-link\"></span></a>Dependencies</h2>\n\n<ul><li><p>GPG</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># OS X</span>\nbrew install gpg</pre></div>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># Linux</span>\nsudo apt-get install gnupg</pre></div></li>\n<li><p>xclip (Linux only)</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># Linux</span>\nsudo apt-get install xclip</pre></div></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/bndw/pick#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<ol><li><p>Clone the repository</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>git clone https://github.com/bndw/pick.git <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">cd</span> pick</pre></div></li>\n<li><p>Copy the <code>pick</code> executable into your PATH</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>cp pick /usr/local/bin</pre></div></li>\n<li><p>Initialize pick</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>pick --init</pre></div></li>\n</ol><h2><a class=\"anchor\" href=\"https://github.com/bndw/pick#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<ul><li><p>Write a password (interactive)</p>\n\n</li>\n<li><p>Read a password by alias</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>pick github</pre></div></li>\n<li><p>Read all passwords</p>\n\n</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/bndw/pick#advanced\"><span class=\"octicon octicon-link\"></span></a>Advanced</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/bndw/pick#environment-variables\"><span class=\"octicon octicon-link\"></span></a>Environment Variables</h3>\n\n<ul><li><p>Don\'t want to type in the password everytime?</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-k\">export</span> PICK_TOKEN=<span class=\"pl-k\">&lt;</span>PASSWORD HERE<span class=\"pl-k\">&gt;</span></pre></div></li>\n<li><p>Don\'t ever want your passwords printed to stdout?</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-k\">export</span> PICK_CONFIG=<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>{\"silent\":true}<span class=\"pl-pds\">\'</span></span></pre></div></li>\n<li><p>Want to print additonal metadata along with passwords?</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-k\">export</span> PICK_CONFIG=<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>{\"verbose\":true}<span class=\"pl-pds\">\'</span></span></pre></div></li>\n</ul>',1),(209,'Untitled','http://www.tensorflow.org/tutorials',0,0,'[unable to retrieve full-text content]',1),(210,'Now Available for Download: Processing - Raspberry Pi','https://www.raspberrypi.org/blog/now-available-for-download-processing/',0,0,'\n    <p>I’m a long-time fan of <a href=\"https://processing.org/\">Processing</a>, a free open source programming language and development environment focused on teaching coding in the context of visual arts. It’s why I’m so excited that the latest version, Processing 3.0.1, now officially supports Raspberry Pi. Just as Sonic Pi lets you make your first sound in just one line of code, Processing lets you draw on screen with just one line of code. It’s that easy to get started. But don’t let that fool you, it’s a very powerful and flexible language and development environment.</p>\n<p><img class=\"aligncenter wp-image-17351 size-large\" src=\"https://www.raspberrypi.org/wp-content/uploads/2015/11/processing-screen-shot-500x344.png\" alt=\"Screenshot of Processing development environment\" width=\"500\" height=\"344\" /></p>\n<p>We owe a huge thank you to <a href=\"http://cargocollective.com/gott/\">Gottfried Haider</a>, who did the heavy lifting to get Processing running smoothly on the Raspberry Pi and create <a href=\"https://processing.org/reference/libraries/io/index.html\">a hardware input/output library</a>. That’s right, this version of Processing <a href=\"https://github.com/processing/processing/wiki/Raspberry-Pi\">works with the GPIO pins</a> right out of the box. Gottfried says:</p>\n<blockquote><p>I’m excited about having Processing on the Raspberry Pi and other low-cost desktop machines. In the last few years we’ve seen a shift away from easily accessible environments, towards concepts such as mobile platforms, specialized internet-of-things devices and cloud computing. As someone who got into programming by tinkering around with the open and readily available platforms of the time, I believe it’s important to have initiatives such Raspberry Pi and Processing, to promote software literacy and to encourage a future where computers remain a read/write medium.</p></blockquote>\n<p>If you’re new to Processing, please take a look at our newest resource, <a href=\"https://www.raspberrypi.org/learning/introduction-to-processing/\">Introduction to Processing</a>. Not only does it get you started programming with Processing on the Raspberry Pi, but it also covers basic hardware input/output. As with all of our free resources, we welcome you to contribute enhancements and fixes. For those of you who prefer something more in-depth, Processing co-founders Ben Fry and Casey Reas recently released a second edition of their book <em><a href=\"http://shop.oreilly.com/product/0636920031406.do\">Getting Started with Processing</a></em>, published by Maker Media.</p>\n<p>If you want to jump right in, you can download and install Processing from the terminal with this command:</p>\n<p><code>curl https://processing.org/download/install-arm.sh | sudo sh</code></p>\n<p>Or go to <a href=\"https://processing.org/download/\">Processing’s downloads page</a> to download and install it on your own.</p>\n',1),(211,'RichardKnop/go-oauth2-server','https://github.com/RichardKnop/go-oauth2-server',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://travis-ci.org/RichardKnop/go-oauth2-server\"><img src=\"https://camo.githubusercontent.com/90026677c99785e2b5c5d4962e79629d901a5601/68747470733a2f2f7472617669732d63692e6f72672f526963686172644b6e6f702f676f2d6f61757468322d7365727665722e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" title=\"Build Status\" /></a></p>\n\n\n\n<p>This service implements <a href=\"http://tools.ietf.org/html/rfc6749#section-4.3\">OAuth 2.0 specification</a>. Excerpts from the specification are included in this README file to describe different grant types. Please read the full spec for more detailed information.</p>\n\n\n\n\n\n<h2><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#oauth-20\"><span class=\"octicon octicon-link\"></span></a>OAuth 2.0</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#client-authentication\"><span class=\"octicon octicon-link\"></span></a>Client Authentication</h3>\n\n<p><a href=\"http://tools.ietf.org/html/rfc6749#section-3.2.1\">http://tools.ietf.org/html/rfc6749#section-3.2.1</a></p>\n\n<p>Clients must authenticate with client credentials (client ID and secret) when issuing requests to <code>/oauth/api/v1/tokens</code> endpoint. Basic HTTP authentication should be used.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#grant-types\"><span class=\"octicon octicon-link\"></span></a>Grant Types</h3>\n\n<h4><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#authorization-code\"><span class=\"octicon octicon-link\"></span></a>Authorization Code</h4>\n\n<p><a href=\"http://tools.ietf.org/html/rfc6749#section-4.1\">http://tools.ietf.org/html/rfc6749#section-4.1</a></p>\n\n<p>The authorization code grant type is used to obtain both access tokens and refresh tokens and is optimized for confidential clients. Since this is a redirection-based flow, the client must be capable of interacting with the resource owner\'s user-agent (typically a web browser) and capable of receiving incoming requests (via redirection) from the authorization server.</p>\n\n<pre><code>+----------+\n| Resource |\n|   Owner  |\n|          |\n+----------+\n     ^\n     |\n    (B)\n+----|-----+          Client Identifier      +---------------+\n|         -+----(A)-- &amp; Redirection URI ----&gt;|               |\n|  User-   |                                 | Authorization |\n|  Agent  -+----(B)-- User authenticates ---&gt;|     Server    |\n|          |                                 |               |\n|         -+----(C)-- Authorization Code ---&lt;|               |\n+-|----|---+                                 +---------------+\n  |    |                                         ^      v\n (A)  (C)                                        |      |\n  |    |                                         |      |\n  ^    v                                         |      |\n+---------+                                      |      |\n|         |&gt;---(D)-- Authorization Code ---------\'      |\n|  Client |          &amp; Redirection URI                  |\n|         |                                             |\n|         |&lt;---(E)----- Access Token -------------------\'\n+---------+       (w/ Optional Refresh Token)\n</code></pre>\n\n<p>The client initiates the flow by directing the resource owner\'s user-agent to the authorization endpoint. The client includes its client identifier, requested scope, local state, and a redirection URI to which the authorization server will send the user-agent back once access is granted (or denied).</p>\n\n<pre><code>http://localhost:8080/web/authorize?client_id=test_client&amp;redirect_uri=https%3A%2F%2Fwww.example.com&amp;response_type=code&amp;state=somestate\n</code></pre>\n\n<p>The authorization server authenticates the resource owner (via the user-agent).</p>\n\n<p><a href=\"https://raw.githubusercontent.com/RichardKnop/assets/master/go-oauth2-server/login_screenshot.png\"><img src=\"https://raw.githubusercontent.com/RichardKnop/assets/master/go-oauth2-server/login_screenshot.png\" alt=\"Log In page screenshot\" /></a></p>\n\n<p>The authorization server then establishes whether the resource owner grants or denies the client\'s access request.</p>\n\n<p><a href=\"https://raw.githubusercontent.com/RichardKnop/assets/master/go-oauth2-server/authorize_screenshot.png\"><img src=\"https://raw.githubusercontent.com/RichardKnop/assets/master/go-oauth2-server/authorize_screenshot.png\" alt=\"Authorize page screenshot\" /></a></p>\n\n<p>If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid, the authorization server SHOULD inform the resource owner of the error and MUST NOT automatically redirect the user-agent to the invalid redirection URI.</p>\n\n<p>If the resource owner denies the access request or if the request fails for reasons other than a missing or invalid redirection URI, the authorization server informs the client by adding the error parameter to the query component of the redirection URI.</p>\n\n<pre><code>https://www.example.com/?error=access_denied&amp;state=somestate\n</code></pre>\n\n<p>Assuming the resource owner grants access, the authorization server redirects the user-agent back to the client using the redirection URI provided earlier (in the request or during client registration). The redirection URI includes an authorization code and any local state provided by the client earlier.</p>\n\n<pre><code>https://www.example.com/?code=7afb1c55-76e4-4c76-adb7-9d657cb47a27&amp;state=somestate\n</code></pre>\n\n<p>The client requests an access token from the authorization server\'s token endpoint by including the authorization code received in the previous step. When making the request, the client authenticates with the authorization server. The client includes the redirection URI used to obtain the authorization code for verification.</p>\n\n<pre><code>$ curl -v localhost:8080/oauth/api/v1/tokens \\\n  -u test_client:test_secret \\\n  -d \"grant_type=authorization_code\" \\\n  -d \"code=7afb1c55-76e4-4c76-adb7-9d657cb47a27\"\n</code></pre>\n\n<p>The authorization server authenticates the client, validates the authorization code, and ensures that the redirection URI received matches the URI used to redirect the client before. If valid, the authorization server responds back with an access token and, optionally, a refresh token.</p>\n\n<div class=\"highlight highlight-source-json\"><pre>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">1</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>access_token<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>00ccd40e-72ca-4e79-a4b6-67c95e2e3f1c<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>expires_in<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">3600</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>token_type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bearer<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scope<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo bar<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refresh_token<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>6fd8d272-375a-4d8a-8d0f-43367dc8b791<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#implicit\"><span class=\"octicon octicon-link\"></span></a>Implicit</h4>\n\n<p><a href=\"http://tools.ietf.org/html/rfc6749#section-4.2\">http://tools.ietf.org/html/rfc6749#section-4.2</a></p>\n\n<p>The implicit grant type is used to obtain access tokens (it does not support the issuance of refresh tokens) and is optimized for public clients known to operate a particular redirection URI. These clients are typically implemented in a browser using a scripting language such as JavaScript.</p>\n\n<p>Since this is a redirection-based flow, the client must be capable of interacting with the resource owner\'s user-agent (typically a web browser) and capable of receiving incoming requests (via redirection) from the authorization server.</p>\n\n<p>Unlike the authorization code grant type, in which the client makes separate requests for authorization and for an access token, the client receives the access token as the result of the authorization request.</p>\n\n<p>The implicit grant type does not include client authentication, and relies on the presence of the resource owner and the registration of the redirection URI.  Because the access token is encoded into the redirection URI, it may be exposed to the resource owner and other applications residing on the same device.</p>\n\n<pre><code>+----------+\n| Resource |\n|  Owner   |\n|          |\n+----------+\n     ^\n     |\n    (B)\n+----|-----+          Client Identifier     +---------------+\n|         -+----(A)-- &amp; Redirection URI ---&gt;|               |\n|  User-   |                                | Authorization |\n|  Agent  -|----(B)-- User authenticates --&gt;|     Server    |\n|          |                                |               |\n|          |&lt;---(C)--- Redirection URI ----&lt;|               |\n|          |          with Access Token     +---------------+\n|          |            in Fragment\n|          |                                +---------------+\n|          |----(D)--- Redirection URI ----&gt;|   Web-Hosted  |\n|          |          without Fragment      |     Client    |\n|          |                                |    Resource   |\n|     (F)  |&lt;---(E)------- Script ---------&lt;|               |\n|          |                                +---------------+\n+-|--------+\n  |    |\n (A)  (G) Access Token\n  |    |\n  ^    v\n+---------+\n|         |\n|  Client |\n|         |\n+---------+\n</code></pre>\n\n<p>The client initiates the flow by directing the resource owner\'s user-agent to the authorization endpoint. The client includes its client identifier, requested scope, local state, and a redirection URI to which the authorization server will send the user-agent back once access is granted (or denied).</p>\n\n<pre><code>http://localhost:8080/web/authorize?client_id=test_client&amp;redirect_uri=https%3A%2F%2Fwww.example.com&amp;response_type=token&amp;state=somestate\n</code></pre>\n\n<p>The authorization server authenticates the resource owner (via the user-agent).</p>\n\n<p><a href=\"https://raw.githubusercontent.com/RichardKnop/assets/master/go-oauth2-server/login_screenshot.png\"><img src=\"https://raw.githubusercontent.com/RichardKnop/assets/master/go-oauth2-server/login_screenshot.png\" alt=\"Log In page screenshot\" /></a></p>\n\n<p>The authorization server then establishes whether the resource owner grants or denies the client\'s access request.</p>\n\n<p><a href=\"https://raw.githubusercontent.com/RichardKnop/assets/master/go-oauth2-server/authorize_screenshot.png\"><img src=\"https://raw.githubusercontent.com/RichardKnop/assets/master/go-oauth2-server/authorize_screenshot.png\" alt=\"Authorize page screenshot\" /></a></p>\n\n<p>If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid, the authorization server SHOULD inform the resource owner of the error and MUST NOT automatically redirect the user-agent to the invalid redirection URI.</p>\n\n<p>If the resource owner denies the access request or if the request fails for reasons other than a missing or invalid redirection URI, the authorization server informs the client by adding the following parameters to the fragment component of the redirection URI.</p>\n\n<pre><code>https://www.example.com/#error=access_denied&amp;state=somestate\n</code></pre>\n\n<p>Assuming the resource owner grants access, the authorization server redirects the user-agent back to the client using the redirection URI provided earlier.  The redirection URI includes he access token in the URI fragment.</p>\n\n<pre><code>https://www.example.com/#access_token=087902d5-29e7-417b-a339-b57a60d6742a&amp;expires_in=3600&amp;state=somestate&amp;token_type=Bearer\n</code></pre>\n\n<p>The user-agent follows the redirection instructions by making a request to the web-hosted client resource (which does not include the fragment per [RFC2616]).  The user-agent retains the fragment information locally.</p>\n\n<p>The web-hosted client resource returns a web page (typically an HTML document with an embedded script) capable of accessing the full redirection URI including the fragment retained by the user-agent, and extracting the access token (and other parameters) contained in the fragment.</p>\n\n<p>The user-agent executes the script provided by the web-hosted client resource locally, which extracts the access token.</p>\n\n<p>The user-agent passes the access token to the client.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#resource-owner-password-credentials\"><span class=\"octicon octicon-link\"></span></a>Resource Owner Password Credentials</h4>\n\n<p><a href=\"http://tools.ietf.org/html/rfc6749#section-4.3\">http://tools.ietf.org/html/rfc6749#section-4.3</a></p>\n\n<p>The resource owner password credentials grant type is suitable in cases where the resource owner has a trust relationship with the client, such as the device operating system or a highly privileged application. The authorization server should take special care when enabling this grant type and only allow it when other flows are not viable.</p>\n\n<p>This grant type is suitable for clients capable of obtaining the resource owner\'s credentials (username and password, typically using an interactive form). It is also used to migrate existing clients using direct authentication schemes such as HTTP Basic or Digest authentication to OAuth by converting the stored credentials to an access token.</p>\n\n<pre><code>+----------+\n| Resource |\n|  Owner   |\n|          |\n+----------+\n     v\n     |    Resource Owner\n     (A) Password Credentials\n     |\n     v\n+---------+                                  +---------------+\n|         |&gt;--(B)---- Resource Owner -------&gt;|               |\n|         |         Password Credentials     | Authorization |\n| Client  |                                  |     Server    |\n|         |&lt;--(C)---- Access Token ---------&lt;|               |\n|         |    (w/ Optional Refresh Token)   |               |\n+---------+                                  +---------------+\n\n</code></pre>\n\n<p>The resource owner provides the client with its username and password.</p>\n\n<p>The client requests an access token from the authorization server\'s token endpoint by including the credentials received from the resource owner. When making the request, the client authenticates with the authorization server.</p>\n\n<pre><code>$ curl -v localhost:8080/oauth/api/v1/tokens \\\n  -u test_client:test_secret \\\n  -d \"grant_type=password\" \\\n  -d \"username=test@username\" \\\n  -d \"password=test_password\" \\\n  -d \"scope=read_write\"\n</code></pre>\n\n<p>The authorization server authenticates the client and validates the resource owner credentials, and if valid, issues an access token.</p>\n\n<div class=\"highlight highlight-source-json\"><pre>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">1</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>access_token<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>00ccd40e-72ca-4e79-a4b6-67c95e2e3f1c<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>expires_in<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">3600</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>token_type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bearer<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scope<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo bar<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refresh_token<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>6fd8d272-375a-4d8a-8d0f-43367dc8b791<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#client-credentials\"><span class=\"octicon octicon-link\"></span></a>Client Credentials</h4>\n\n<p><a href=\"http://tools.ietf.org/html/rfc6749#section-4.4\">http://tools.ietf.org/html/rfc6749#section-4.4</a></p>\n\n<p>The client can request an access token using only its client credentials (or other supported means of authentication) when the client is requesting access to the protected resources under its control, or those of another resource owner that have been previously arranged with the authorization server (the method of which is beyond the scope of this specification).</p>\n\n<p>The client credentials grant type MUST only be used by confidential clients.</p>\n\n<pre><code>+---------+                                  +---------------+\n|         |                                  |               |\n|         |&gt;--(A)- Client Authentication ---&gt;| Authorization |\n| Client  |                                  |     Server    |\n|         |&lt;--(B)---- Access Token ---------&lt;|               |\n|         |                                  |               |\n+---------+                                  +---------------+\n</code></pre>\n\n<p>The client authenticates with the authorization server and requests an access token from the token endpoint.</p>\n\n<pre><code>$ curl -v localhost:8080/oauth/api/v1/tokens \\\n  -u test_client:test_secret \\\n  -d \"grant_type=client_credentials\" \\\n  -d \"scope=read_write\"\n</code></pre>\n\n<p>The authorization server authenticates the client, and if valid, issues an access token.</p>\n\n<div class=\"highlight highlight-source-json\"><pre>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">1</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>access_token<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>00ccd40e-72ca-4e79-a4b6-67c95e2e3f1c<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>expires_in<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">3600</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>token_type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bearer<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scope<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo bar<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refresh_token<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>6fd8d272-375a-4d8a-8d0f-43367dc8b791<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#refreshing-an-access-token\"><span class=\"octicon octicon-link\"></span></a>Refreshing An Access Token</h3>\n\n<p><a href=\"http://tools.ietf.org/html/rfc6749#section-6\">http://tools.ietf.org/html/rfc6749#section-6</a></p>\n\n<p>If the authorization server issued a refresh token to the client, the client can make a refresh request to the token endpoint in order to refresh the access token.</p>\n\n<pre><code>$ curl -v localhost:8080/oauth/api/v1/tokens \\\n  -u test_client:test_secret \\\n  -d \"grant_type=refresh_token\" \\\n  -d \"refresh_token=6fd8d272-375a-4d8a-8d0f-43367dc8b791\"\n</code></pre>\n\n<p>The authorization server MUST:</p>\n\n<ul><li><p>require client authentication for confidential clients or for any client that was issued client credentials (or with other authentication requirements),</p></li>\n<li><p>authenticate the client if client authentication is included and ensure that the refresh token was issued to the authenticated client, and</p></li>\n<li><p>validate the refresh token.</p></li>\n</ul><p>If valid and authorized, the authorization server issues an access token.</p>\n\n<div class=\"highlight highlight-source-json\"><pre>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">1</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>access_token<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1f962bd5-7890-435d-b619-584b6aa32e6c<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>expires_in<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">3600</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>token_type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bearer<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scope<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo bar<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refresh_token<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>3a6b45b8-9d29-4cba-8a1b-0093e8a2b933<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n\n<p>The authorization server MAY issue a new refresh token, in which case the client MUST discard the old refresh token and replace it with the new refresh token.  The authorization server MAY revoke the old refresh token after issuing a new refresh token to the client.  If a new refresh token is issued, the refresh token scope MUST be identical to that of the refresh token included by the client in the request.</p>\n\n\n\n<h2><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#dependencies\"><span class=\"octicon octicon-link\"></span></a>Dependencies</h2>\n\n<p>According to <a href=\"https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo\">Go 1.5 Vendor experiment</a>, all dependencies are stored in a vendor directory. This approach is called \"vendoring\" and is the best practice for Go projects to lock versions of dependencies in order to achieve reproducible builds.</p>\n\n<p>To update dependencies during development:</p>\n\n<pre><code>$ make update-deps\n</code></pre>\n\n<p>To install dependencies:</p>\n\n<pre><code>$ make install-deps\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#setup\"><span class=\"octicon octicon-link\"></span></a>Setup</h2>\n\n<p>If you are developing on OSX, install <code>etcd</code>, <code>Postgres</code>:</p>\n\n<pre><code>$ brew install etcd\n$ brew install postgres\n</code></pre>\n\n<p>You might want to create a <code>Postgres</code> database:</p>\n\n<pre><code>$ createuser --createdb go_oauth2_server\n$ createdb -U go_microservice_example go_oauth2_server\n</code></pre>\n\n<p>Load a configuration into <code>etcd</code>:</p>\n\n<pre><code>$ curl -L http://127.0.0.1:4001/v2/keys/config/go_oauth2_server.json -XPUT -d value=\'{\n  \"Database\": {\n    \"Type\": \"postgres\",\n    \"Host\": \"127.0.0.1\",\n    \"Port\": 5432,\n    \"User\": \"go_oauth2_server\",\n    \"Password\": \"\",\n    \"DatabaseName\": \"go_oauth2_server\"\n  },\n  \"Oauth\": {\n    \"AccessTokenLifetime\": 3600,\n    \"RefreshTokenLifetime\": 1209600,\n    \"AuthCodeLifetime\": 3600  \n  },\n  \"Session\": {\n    \"Secret\": \"test_secret\",\n    \"Path\": \"/\",\n    \"MaxAge\": 604800,\n    \"HTTPOnly\": true\n  },\n  \"TrustedClient\": {\n    \"ClientID\": \"test_client\",\n    \"Secret\": \"test_secret\"\n  }\n}\'\n</code></pre>\n\n<p>Run migrations:</p>\n\n<pre><code>$ go run main.go migrate\n</code></pre>\n\n<p>And finally, run the app:</p>\n\n<pre><code>$ go run main.go runserver\n</code></pre>\n\n<h2><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#test-data\"><span class=\"octicon octicon-link\"></span></a>Test Data</h2>\n\n<p>You might want to insert some test data if you are testing locally using curl:</p>\n\n<div class=\"highlight highlight-source-sql\"><pre><span class=\"pl-k\">insert into</span> scopes(scope, is_default) <span class=\"pl-k\">values</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>read<span class=\"pl-pds\">\'</span></span>, true);\n<span class=\"pl-k\">insert into</span> scopes(scope, is_default) <span class=\"pl-k\">values</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>read_write<span class=\"pl-pds\">\'</span></span>, false);\n\n<span class=\"pl-k\">insert into</span> clients(client_id, secret) <span class=\"pl-k\">values</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test_client<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>$2a$10$CUoGytf1pR7CC6Y043gt/.vFJUV4IRqvH5R6F0VfITP8s2TqrQ.4e<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">insert into</span> users(username, password) <span class=\"pl-k\">values</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>test@username<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>$2a$10$4J4t9xuWhOKhfjN0bOKNReS9sL3BVSN9zxIr2.VaWWQfRBWh1dQIS<span class=\"pl-pds\">\'</span></span>);</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/RichardKnop/go-oauth2-server#testing\"><span class=\"octicon octicon-link\"></span></a>Testing</h2>\n\n<p>Some of the tests are functional. You need to have <code>sqlite</code> and <code>etcd</code> installed and running in order to run the tests.</p>\n\n<p>To run tests:</p>\n\n<pre><code>make test\n</code></pre>\n',1),(212,'Simplify Your Life With an SSH Config File Â· Nerderati','http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/',0,0,'\n  \n    \n  <p>If you\'re anything like me, you probably log in and out of a half dozen remote servers (or these days, local virtual machines)\non a daily basis. And if you\'re even <em>more</em> like me, you have trouble remembering all of the various usernames, remote\naddresses and command line options for things like specifying a non-standard connection port or forwarding local ports to the remote machine.</p>\n\n<h3>Shell Aliases</h3>\n\n<p>Let\'s say that you have a remote server named <code>dev.example.com</code>, which has <em>not</em> been set up with public/private keys\nfor password-less logins. The username to the remote account is <em>fooey</em>, and to reduce the number of scripted login attempts,\nyou\'ve decided to change the default SSH port to <code>2200</code> from the normal default of <code>22</code>. This means that a typical command would look like:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"nv\">$ </span>ssh fooey@dev.example.com -p 22000\npassword: *************</code></pre></div>\n\n<p>Not too bad.</p>\n\n<p>We can make things simpler and more secure by using a public/private key pair; I highly recommend using <a href=\"http://linux.die.net/man/1/ssh-copy-id\">ssh-copy-id</a>\nfor moving your public keys around. It will save you quite a few folder/file permission headaches.</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"nv\">$ </span>ssh fooey@dev.example.com -p 22000\n<span class=\"c\"># Assuming your keys are properly setup…</span></code></pre></div>\n\n<p>Now this doesn\'t seem all that bad. To cut down on the verbosity you could create a simple alias in your shell as well:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"nv\">$ </span><span class=\"nb\">alias </span><span class=\"nv\">dev</span><span class=\"o\">=</span><span class=\"s1\">\'ssh fooey@dev.example.com -p 22000\'</span>\n<span class=\"nv\">$ </span>dev <span class=\"c\"># To connect</span></code></pre></div>\n\n<p>This works surprisingly well: Every new server you need to connect to, just add an alias to your\n<code>.bashrc</code> (or <code>.zshrc</code> if you hang with the cool kids), and voilà.</p>\n\n<h3>~/.ssh/config</h3>\n\n<p>However, there\'s a much more elegant and flexible solution to this problem. Enter the SSH config file:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"c\"># contents of $HOME/.ssh/config</span>\nHost dev\n    HostName dev.example.com\n    Port 22000\n    User fooey</code></pre></div>\n\n<p>This means that I can simply <code>$ ssh dev</code>, and the options will be read from the configuration file. Easy peasy.\nLet\'s see what else we can do with just a few simple configuration directives.</p>\n\n<p>Personally, I use quite a few public/private keypairs for the various servers and services that I use, to ensure\nthat in the event of having one of my keys compromised the damage is as restricted as possible. For example,\nI have a key that I use uniquely for my <a href=\"https://github.com/jperras\">Github</a> account. Let\'s set it up so that\nthat particular private key is used for all my github-related operations:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\">Host dev\n    HostName dev.example.com\n    Port 22000\n    User fooey&lt;/p&gt;\nHost github.com\n    IdentityFile ~/.ssh/github.key</code></pre></div>\n\n<p>The use of <code>IdentityFile</code> allows me to specify exactly which private key I wish to use for authentification with\nthe given host. You can, of course, simply specify this as a command line option for \"normal\" connections:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"nv\">$ </span>ssh -i ~/.ssh/blah.key username@host.com</code></pre></div>\n\n<p>but the use of a config file with <code>IdentityFile</code> is <a href=\"https://git.wiki.kernel.org/index.php/GitTips#How_to_pass_ssh_options_in_git.3F\">pretty much your only option</a>\nif you want to specify which identity to use for any git commands. This also opens up the very interesting concept of further\nsegmenting your github keys on something like a per-project or per-organization basis:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\">Host github-project1\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/github.project1.key&lt;/p&gt;\nHost github-org\n    User git\n    HostName github.com\n    IdentityFile ~/.ssh/github.org.key&lt;/p&gt;\nHost github.com\n    User git\n    IdentityFile ~/.ssh/github.key</code></pre></div>\n\n<p>Which means that if I want to clone a repository using my organization credentials, I would use the following:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"nv\">$ </span>git clone git@github-org:orgname/some_repository.git</code></pre></div>\n\n<h3>Going further</h3>\n\n<p>As any security-conscious developer would do, I set up firewalls on all of my servers and make them as restrictive\nas possible; in many cases, this means that the only ports that I leave open are <code>80/443</code> (for webservers), and port\n<code>22</code> for SSH (or whatever I might have remapped it to for obfuscation purposes). On the surface, this seems to prevent\nme from using things like a desktop MySQL GUI client, which expect port <code>3306</code> to be open and accessible on the remote\nserver in question. The informed reader will note, however, that a simple local port forward can save you:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"nv\">$ </span>ssh -f -N -L 9906:127.0.0.1:3306 coolio@database.example.com\n<span class=\"c\"># -f puts ssh in background</span>\n<span class=\"c\"># -N makes it not execute a remote command</span></code></pre></div>\n\n<p>This will forward all local port <code>9906</code> traffic to port <code>3306</code> on the remote <code>dev.example.com</code> server, letting me\npoint my desktop GUI to localhost (<code>127.0.0.1:9906</code>) and have it behave exactly as if I had exposed port\n<code>3306</code> on the remote server and connected directly to it.</p>\n\n<p>Now I don\'t know about you, but remembering that sequence of flags and options for <a href=\"http://linux.die.net/man/1/ssh\">SSH</a> can be\na complete pain. Luckily, our config file can help alleviate that:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\">Host tunnel\n    HostName database.example.com\n    IdentityFile ~/.ssh/coolio.example.key\n    LocalForward 9906 127.0.0.1:3306\n    User coolio</code></pre></div>\n\n<p>Which means I can simply do:</p>\n\n<div class=\"highlight\"><pre><code class=\"bash\"><span class=\"nv\">$ </span>ssh -f -N tunnel</code></pre></div>\n\n<p>And my local port forwarding will be enabled using all of the configuration directives I set up for the tunnel host. Slick.</p>\n\n<h3>Homework</h3>\n\n<p>There are quite a few configuration options that you can specify in <code>~/.ssh/config</code>, and I highly suggest consulting\nthe online <a href=\"http://linux.die.net/man/5/ssh_config\">documentation</a> or the <strong>ssh_config</strong> man page. Some interesting/useful\nthings that you can do include: change the default number of connection attempts, specify local environment variables to be\npassed to the remote server upon connection, and even the use of * and ? wildcards for matching hosts.</p>\n\n<p>I hope that some of this is useful to a few of you. Leave a note in the comments if you have any cool tricks for the\nSSH config file; I\'m always on the lookout for fun hacks.</p>\n\n',1),(213,'Tutorials | botwiki.org','https://botwiki.org/tutorials/',0,0,'\n<p class=\"last-updated\">\nLast updated:\nJuly 24, 2015\n</p>\n<h2>Tutorials</h2>\n<p>To make good bots, you need a <strong>little bit of software</strong> (preferably free and <a href=\"https://en.wikipedia.org/wiki/Open-source_software\">open source</a>), <a href=\"https://botwiki.org/resources\"><strong>some useful data</strong></a> to connect the bot to, and <strong>tutorials and <a href=\"https://botwiki.org/articles\">articles</a></strong> to explain how to connect it all together.</p>\n<p>Many people provide these resources <strong>for free</strong> -- and <strong>Botwiki.org</strong> collects them. If you find anything useful, be sure to thank the person through their website, an email or social media site of their choice :-)</p>\n<p>Oh and if you have any questions, try asking in our community for botmakers and bot enthusiasts -- you can join us at <a href=\"https://botmakers.org/\">botmakers.org</a>. </p>\n<h3><a href=\"https://botwiki.org/tutorials/#network-specific-tutorials\" class=\"pilcrow\">¶</a> Network-specific tutorials</h3>\n<p><img src=\"https://botwiki.org/content/images/illustrations/man-reading-mail-768.jpg\" alt=\"Man, presumably reading a Twitterbot tutorial\" class=\"float-right\" /></p>\n<h3><a href=\"https://botwiki.org/tutorials/#bot-hosting\" class=\"pilcrow\">¶</a> Bot hosting</h3>\n<p>You have quite a few options when it comes to hosting your bots.</p>\n<p>Specifically for Twitter bots, you can try:</p>\n<p><strong>Note: </strong> <a href=\"https://twitter.com/beaugunderson\">@beaugunderson</a> is offering to let people host bots on his <a href=\"https://www.linode.com/\">Linode</a> account.</p>\n<p>Common ways to manage multiple bots on the same network are:</p>\n<ul><li>running each bot as a separate app/process with its own API keys</li>\n<li>running all of your bots in one app, using the same set of API keys</li>\n<li>or as a variation, you can create multiple apps, but still use the same API keys</li>\n</ul><p>These are also common ways to solve the need for a phone number verification when creating apps (bots) on Twitter. Also see <a href=\"http://blog.mollywhite.net/twitter-bots-pt2/#createthetwitterapp\">Molly White\'s tutorial</a> that explains how to transfer your Twitter app to another account, which helps solve this problem. One more solution is to remove the phone number from your account and associate it with a new one.</p>\n<p>For more general tutorials on hosting bots, see articles below. (Some network specific tutorials <a href=\"https://botwiki.org/tutorials/#network-specific-tutorials\">below</a> include a step explaining how to host your bot.)</p>\n<h3><a href=\"https://botwiki.org/tutorials/#web-apis\" class=\"pilcrow\">¶</a> Learn to work with web APIs</h3>\n<h3><a href=\"https://botwiki.org/tutorials/#other\" class=\"pilcrow\">¶</a> Other</h3>\n<h3><a href=\"https://botwiki.org/tutorials/#general-essays\" class=\"pilcrow\">¶</a> General, essays</h3>\n<p>Also check out <a href=\"https://botwiki.org/tag/opensource\">the opensourced bots</a>.</p>\n\n\n<div class=\"statcounter\"><a title=\"hit counter\" href=\"http://statcounter.com/\"><img class=\"statcounter\" src=\"http://c.statcounter.com/10530872/0/b852d106/1/\" alt=\"hit counter\" /></a></div> ',1),(214,'Untitled','http://readtext.org/',0,0,'[unable to retrieve full-text content]',1),(215,'HTTP Live Streaming In Javascript','https://blog.peer5.com/http-live-streaming-in-javascript/',0,0,'<blockquote>\n  <p><a href=\"http://www.streaminglearningcenter.com/blogs/dash-the-most-popular-format-(almost)-no-one-is-using-.html\">A flashocalypse is approaching </a> - paraphrasing John Luther, <a href=\"https://blog.peer5.com/http-live-streaming-in-javascript/jwplayer.com\">JW Player</a></p>\n</blockquote>\n\n<p>(TL;DR) <br />We can finally play HLS using only javascript. It works faster than <a href=\"http://www.adobe.com/products/flashplayer.html\">Flash</a>, unlocking the potential to stream live in 4k and 60fps.</p>\n\n<h4>What is HLS?</h4>\n\n<p>HLS, which stands for HTTP Live Streaming, is a video format invented by Apple for live streaming. It’s file based, meaning you can serve it over an HTTP connection on the web.</p>\n\n<p>In its simplest form, you have a manifest file, a.k.a playlist, that is the ‘main’ file for a stream. This file contains metadata about the stream and a list of URIs for the video segments of the stream. When a player requests this playlist, a server responds with an updated manifest file that specifies segments that have recently been added to the stream. <br /><img src=\"https://blog.peer5.com/content/images/2015/11/hls-manifest.jpg\" alt=\"HLS Manifest - HLS Live Streaming With Peer5\" />\nThis file format has many advantages over alternatives like RTP or RTMP in terms of device support, ease of deployment, and scalability. As a result, it has become a mainstream technology for live streaming, and is widely used for VoD as well.</p>\n\n<h4>HLS On All Platforms</h4>\n\n<p>If you’re familiar with HLS you might be thinking, “isn’t HLS already supported by HTML?” The answer: sort of! When Apple invented HLS, they also implemented a ‘player’ mechanism inside of their browser. This meant that in Safari you could add a line of HTML to the page, for example, <code>&lt;video src=’path/to/playlist.m3u8’&gt;&lt;/video&gt;</code>, and voila, you’d have a working HLS player! </p>\n\n<p>But, for various reasons, other browsers didn’t implement this, meaning that systems needed to be designed to stream differently depending on which device and browser a user was operating on. A stream might use HLS on Safari or iOS and RTMP or HDS on desktop. Eventually Chrome and Firefox implemented an HLS player for their mobile versions, but Chrome, Firefox, and IE  still don’t use this technology on their desktop versions. A technology for desktop browsers was needed to stream HLS on all devices. Eventually, a few great libraries were released to solve this problem. <a href=\"http://www.flashls.org/\">Flashls</a>, which is open source, and <a href=\"http://osmfhls.kutu.ru/\">osmfhls</a>, which is proprietary, are two Flash plugin libraries for players that enable HLS on desktop.</p>\n\n<h4>Playing HLS Without Flash</h4>\n\n<p>HLS experienced mainstream adoption, but Flash was still a requirement. Flash is heavy, slow, and <a href=\"http://www.computerworld.com/article/2971721/security/stop-the-flash-madness-5-bugs-a-week.html\">full of security flaws</a>. Experts have been predicting Flash’s demise for a while <a href=\"http://www.wsj.com/articles/tech-world-prepares-obituary-for-adobe-flash-1437341315\">now</a>, and an alternative is needed. To add some context, we’ll have to take a quick detour to another video format, or rather a standard, MPEG-DASH. Dash basically takes all of the good stuff from HLS and gets rid of the bad pieces. Like HLS, it’s also file based, however, in order to support this new format in the browser <a href=\"https://blog.peer5.com/http-live-streaming-in-javascript/www.w3.org\">W3C</a> decided to create new HTML5 API’s called Media Source Extensions (MSE) and Encrypted Media Extensions (EME). MSE give developers an API to control the video tag’s video buffer and inject data into it. EME is an API that provides DRM support. As a result, it\'s become possible to inject data into the browser’s video player and use it to implement HLS.</p>\n\n<p>Technically, this requires HLS playback logic that requests HLS files from a server, transmuxes them into the correct mp4 format in javascript, and injects them into the video tag using MSE. There are a few FOSS libraries that do just that, including: <a href=\"https://github.com/dailymotion/hls.js\">hlsjs</a>, videojs’s <a href=\"https://github.com/videojs/videojs-contrib-hls\">videojs-contrib-hls</a>, and <a href=\"https://github.com/Orange-OpenSource/hasplayer.js/tree/master\">hasplayer</a>. Now we have HLS in the desktop browser, with only javascript, no Flash necessary. It’s supported in Chrome, Firefox 42+, IE11+, Edge, and Opera.</p>\n\n<h4>Performance</h4>\n\n<p>It’s time for comparisons, performance, and analysis. In this section, I will show the results for tests run on videojs5 (with videojs-contrib-hls v1.0), its flash predecessor videojs4, hls.js, and its flash predecessor flashls. I’ll focus on CPU performance testing. </p>\n\n<p>For each player I used Chrome\'s Timeline pane to track the browser\'s fps, Profile pane to record how much CPU time was utilized, and task manager to monitor the overall CPU usage.</p>\n\n<h5>Hlsjs</h5>\n\n<p><img src=\"https://blog.peer5.com/content/images/2015/11/hlsjs-timeline.jpg\" alt=\"HLSJS Timeline - HLS Video Streaming Test\" />\nThe main thread held 60fps, except for the timestamps around 4,000ms and 14,000ms (each 10 seconds) where it dropped to 30fps. This can probably be traced to the handling of the segment.</p>\n\n<p><img src=\"https://blog.peer5.com/content/images/2015/11/hlsjs-profile.jpg\" alt=\"HLSJS Profile - HLS Video Streaming Test\" />\nI also ran CPU profiling for 20,098 ms. The total CPU time while profiling was 729.6ms (3.6% of the experiment length), 74% of which was Chrome’s program thread.</p>\n\n<p>Examining the Chrome task manager, CPU usage was mostly 0-2%, with 4% peaks.</p>\n\n<h5>Videojs5</h5>\n\n<p><img src=\"https://blog.peer5.com/content/images/2015/11/videojs5-timeline.jpg\" alt=\"VideoJS5 Timeline - HLS Video Streaming Test\" />\nThe main thread was a constant 60fps.</p>\n\n<p><img src=\"https://blog.peer5.com/content/images/2015/11/videojs5-profile.jpg\" alt=\"VideoJS5 Profile - HLS Video Streaming Test\" />\nA CPU profiling test of 20,143ms showed that the total CPU run time was 794.83ms (3.9%), of which 77.8% was Chrome’s program thread.</p>\n\n<p>Examining the Chrome task manager, CPU usage was mostly 0-1%, with 5% peaks.</p>\n\n<h5>Videojs4</h5>\n\n<p><img src=\"https://blog.peer5.com/content/images/2015/11/videojs4-timeline.jpg\" alt=\"VideoJS4 Timeline - HLS Video Streaming Test\" />\nHere we saw a big impact on fps, which decreased to 6 frames per second. This stalled the main thread for up to 160ms at a time.</p>\n\n<p><img src=\"https://blog.peer5.com/content/images/2015/11/videojs4-profile.jpg\" alt=\"VideoJS4 Profile - HLS Video Streaming Test\" />\nCPU profiling for 20,084ms showed that the total CPU run time was 5,385.9ms (26.8%) and only 27.8% was Chrome’s program thread.</p>\n\n<p>Examining the Chrome task manager, CPU usage was 16% on average, with peaks of 24% of CPU (divided between flash - 20% and page - 4%)</p>\n\n<h5>Chromeless Flashls</h5>\n\n<p><img src=\"https://blog.peer5.com/content/images/2015/11/flashls-timeline.jpg\" alt=\"Flashls Timeline - HLS Video Streaming Test\" />\nThe main thread held 60 fps, and dropped to 30 fps every 10 seconds.</p>\n\n<p><img src=\"https://blog.peer5.com/content/images/2015/11/flashls-profile.jpg\" alt=\"Flashls Profile - HLS Video Streaming Test\" />\nCPU profiling of 20,092ms showed that CPU was active for 1,311.6ms (6.5%), 92.8% of which was Chrome’s program thread.</p>\n\n<p>Examining the Chrome task manager, CPU usage was mostly 3-5%, with peaks of 8% (3% flash, 3% flash gpu, 3% page)</p>\n\n<h5>Conclusion</h5>\n\n<p>Both videojs5 and hlsjs performed very well. They easily played 30fps HD videos without setting back the main thread. Videojs5 showed superb performance with 60fps videos as well and didn\'t drop any frames. Hlsjs dropped frames when processing new segments.</p>\n\n<p>Ranking the libraries cpu performance, I would suggest:</p>\n\n<ol><li>videojs5  </li>\n<li>hlsjs  </li>\n<li>flashls,  </li>\n<li>videojs4</li>\n</ol><p>The comparison isn’t shown here, but both javascript players started faster than their Flash counterparts did due to Flash’s asynchronous load requirements for the .swf file and the crossdomain file.</p>\n\n<p>It\'s important to mention that the libraries used are still very young and videojs still hasn’t released javascript HLS support. We will likely see improvements in all of the libraries. These innovations, as well as others, will likely drive higher quality video and create better viewing experiences on the web.</p>\n\n<p>Peer5 is a peer-to-peer CDN that improves content delivery for live and on-demand video streams. Want to try Flashless HLS? Sign up for your free trial <a href=\"https://app.peer5.com/register\">here</a>. <br />After registering, select JW7 and check the \"Play HLS in Javascript\" checkbox.</p>\n\n<h5>Notes</h5>\n\n<ol><li>Further tests need to be done with 4k videos.  </li>\n<li>All tests were done on <em>Intel Corei7-4810MQ machine</em>. <br />The stream tested is <a href=\"http://www.streambox.fr/playlists/x36xhzz/url_9/193039199_mp4_h264_aac_fhd_7.m3u8\">60fps-HD video</a>: <br /><em>Average segment duration: 9.92 seconds <br />Segment bitrate: Average:  6.31 Mbits/sec, Max: 10.83 Mbits/sec <br />Average segment structural overhead: 193.93 kbits/sec (3.07 %) <br />Track ID: 1 <br />Audio Codec: AAC-LC <br />Audio sample rate: 44100 Hz <br />ACL: Stereo (L R) <br />Track ID: 2 <br />Video Codec: avc1 <br />H.264 profile: High <br />H.264 level: 4.0 <br />Video resolution: 1920x1080 pixels <br />Video average IDR interval: 3.706 seconds, Standard deviation: 2.775 <br />Video frame rate: 60.000 fps <br />Average video bitrate:  5.96 Mbits/sec <br />Average audio bitrate: 151.79 kbits/sec</em></li>\n</ol>',1),(216,'rain1017/memdb','https://github.com/rain1017/memdb',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://travis-ci.org/rain1017/memdb\"><img src=\"https://camo.githubusercontent.com/5d068172d62c72be479c17afe6109f2ef8a6c013/68747470733a2f2f7472617669732d63692e6f72672f7261696e313031372f6d656d64622e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a>\n<a href=\"https://david-dm.org/rain1017/memdb\"><img src=\"https://camo.githubusercontent.com/d8779f2f233789556abba00d9568a4308139850c/68747470733a2f2f64617669642d646d2e6f72672f7261696e313031372f6d656d64622e737667\" alt=\"Dependencies Status\" /></a></p>\n\n<p><strong>Distributed Transactional In-Memory Database</strong></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#performance-and-scalable\"><span class=\"octicon octicon-link\"></span></a>Performance and Scalable</h3>\n\n<ul><li>Fast in memory data access, up to 25,000 ops (single doc read/write) per shard (each shard take one CPU core).</li>\n<li>System capacity is horizontally scalable, performance grows linearly by adding more shards.</li>\n<li>No single point bottleneck, all part of system is scalable, unlimited capability potential.</li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#true-distributed-acid-transaction\"><span class=\"octicon octicon-link\"></span></a>True Distributed ACID Transaction</h3>\n\n<ul><li>True <a href=\"https://en.wikipedia.org/wiki/ACID\">ACID</a> (Stands for Atomicity, Consistency, Isolation, Durability) transaction support on distributed environment.</li>\n<li>MemDB brings ACID transaction support for MongoDB, on distributed environment! You can get full transaction support of traditional SQL database (like MySQL), while not losing the scalability of NoSQL database (like MongoDB).</li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#mongodb-and-mongoose-compatible\"><span class=\"octicon octicon-link\"></span></a>MongoDB and Mongoose Compatible</h3>\n\n<ul><li>It\'s just a \'MongoDB\' with a cache layer which support distributed transaction.</li>\n<li>Directly use of MongoDB\'s query API.</li>\n<li>Built-in Mongoose support, easy to port existing Mongoose project to MemDB.</li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#high-availability\"><span class=\"octicon octicon-link\"></span></a>High Availability</h3>\n\n<ul><li>Each shard is backed by one or more slaves, no single point of failure.</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#links\"><span class=\"octicon octicon-link\"></span></a>Links</h2>\n\n<h2><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#quick-start\"><span class=\"octicon octicon-link\"></span></a>Quick Start</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#install-dependencies\"><span class=\"octicon octicon-link\"></span></a>Install Dependencies</h3>\n\n<p>Make sure Redis and MongoDB has started</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#install-memdb\"><span class=\"octicon octicon-link\"></span></a>Install MemDB</h3>\n\n<ul><li>MemDB should be installed globally</li>\n</ul><pre><code>sudo npm install -g memdb-server\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#configure-memdb\"><span class=\"octicon octicon-link\"></span></a>Configure MemDB</h3>\n\n<p>Copy default config file from <code>node_modules/memdb-server/memdb.conf.js</code> to <code>~/.memdb/</code> (mkdir if not exist), and modify it on your need. \nPlease read comments carefully.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#start-memdb\"><span class=\"octicon octicon-link\"></span></a>Start MemDB</h3>\n\n<p>Use <code>memdbcluster</code> to control lifecycle of memdb server cluster</p>\n\n<pre><code>memdbcluster [start | stop | status] [--conf=memdb.conf.js] [--shard=shardId]\n</code></pre>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#play-with-memdb-shell\"><span class=\"octicon octicon-link\"></span></a>Play with memdb shell</h3>\n\n<p>See the video bellow, note how ACID transaction work cross multiple shards.\n<a href=\"https://github.com/rain1017/memdb/wiki/images/memdbshell.gif\"><img src=\"https://github.com/rain1017/memdb/wiki/images/memdbshell.gif\" alt=\"memdbshell.gif\" /></a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#mdbgoose\"><span class=\"octicon octicon-link\"></span></a>Mdbgoose</h3>\n\n<p>Mdbgoose is a modified <strong><a href=\"http://mongoosejs.com\">Mongoose</a></strong> version that work for memdb</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> memdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>memdb-client<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> P <span class=\"pl-k\">=</span> memdb.Promise;\n<span class=\"pl-k\">var</span> mdbgoose <span class=\"pl-k\">=</span> memdb.goose;\n\n<span class=\"pl-c\">// Define player schema</span>\n<span class=\"pl-k\">var</span> playerSchema <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">mdbgoose.Schema</span>({\n    _id <span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span>,\n    name <span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span>,\n    areaId <span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>,\n    deviceType <span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>,\n    deviceId <span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span>,\n    items <span class=\"pl-k\">:</span> [mdbgoose.SchemaTypes.Mixed],\n}, {collection <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>player<span class=\"pl-pds\">\'</span></span>});\n<span class=\"pl-c\">// Define player model</span>\n<span class=\"pl-k\">var</span> Player <span class=\"pl-k\">=</span> mdbgoose.model(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>player<span class=\"pl-pds\">\'</span></span>, playerSchema);\n\n<span class=\"pl-k\">var</span> main <span class=\"pl-k\">=</span> P.coroutine(<span class=\"pl-k\">function*</span>(){\n    <span class=\"pl-c\">// Connect to memdb</span>\n    <span class=\"pl-k\">yield</span> mdbgoose.connectAsync({\n        shards <span class=\"pl-k\">:</span> { <span class=\"pl-c\">// specify all shards here</span>\n            s1 <span class=\"pl-k\">:</span> {host <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>127.0.0.1<span class=\"pl-pds\">\'</span></span>, port<span class=\"pl-k\">:</span> <span class=\"pl-c1\">31017</span>},\n            s2 <span class=\"pl-k\">:</span> {host <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>127.0.0.1<span class=\"pl-pds\">\'</span></span>, port<span class=\"pl-k\">:</span> <span class=\"pl-c1\">31018</span>},\n        }\n    });\n\n    <span class=\"pl-c\">// Make a transaction in s1</span>\n    <span class=\"pl-k\">yield</span> mdbgoose.transactionAsync(P.coroutine(<span class=\"pl-k\">function*</span>(){\n\n        <span class=\"pl-k\">var</span> player <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Player</span>({\n            _id <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>p1<span class=\"pl-pds\">\'</span></span>,\n            name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rain<span class=\"pl-pds\">\'</span></span>,\n            areaId <span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n            deviceType <span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n            deviceId <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id1<span class=\"pl-pds\">\'</span></span>,\n            items <span class=\"pl-k\">:</span> [],\n        });\n\n        <span class=\"pl-c\">// insert a player</span>\n        <span class=\"pl-k\">yield</span> player.saveAsync();\n\n        <span class=\"pl-c\">// find player by id</span>\n        <span class=\"pl-k\">var</span> doc <span class=\"pl-k\">=</span> <span class=\"pl-k\">yield</span> Player.findByIdAsync(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>p1<span class=\"pl-pds\">\'</span></span>);\n        <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>%j<span class=\"pl-pds\">\'</span></span>, doc);\n\n        <span class=\"pl-c\">// find player by areaId, return array of players</span>\n        <span class=\"pl-k\">var</span> docs <span class=\"pl-k\">=</span> <span class=\"pl-k\">yield</span> Player.findAsync({areaId <span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>});\n        <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>%j<span class=\"pl-pds\">\'</span></span>, docs);\n\n        <span class=\"pl-c\">// find player by deviceType and deviceId</span>\n        player <span class=\"pl-k\">=</span> <span class=\"pl-k\">yield</span> Player.findOneAsync({deviceType <span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>, deviceId <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id1<span class=\"pl-pds\">\'</span></span>});\n\n        <span class=\"pl-c\">// update player</span>\n        player.areaId <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>;\n        <span class=\"pl-k\">yield</span> player.saveAsync();\n\n        <span class=\"pl-c\">// remove the player</span>\n        <span class=\"pl-k\">yield</span> player.removeAsync();\n\n    }), <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>s1<span class=\"pl-pds\">\'</span></span>);\n});\n\n<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">require</span>.main <span class=\"pl-k\">===</span> <span class=\"pl-c1\">module</span>) {\n    main().finally(<span class=\"pl-c1\">process</span>.exit);\n}</pre></div>\n\n<p>To run the sample above:</p>\n\n<ul><li>Add the following index config in memdb.conf.js</li>\n</ul><pre><code>collections : {\n    player : {\n        indexes : [\n            {\n                keys : [\'areaId\'],\n            },\n            {\n                keys : [\'deviceType\', \'deviceId\'],\n                unique : true,\n            },\n        ]\n    }\n}\n</code></pre>\n\n<ul><li>restart memdb cluster</li>\n</ul><pre><code>memdbcluster stop\nmemdbcluster start\n</code></pre>\n\n<ul><li>Make sure you have started shard \'s1\' on localhost:31017</li>\n<li>Install npm dependencies</li>\n</ul><pre><code>npm install memdb-client\n</code></pre>\n\n<ul><li>Run with node &gt;= 0.12 (should add --harmony option on node 0.12.x)</li>\n</ul><pre><code>node --harmony sample.js\n</code></pre>\n\n<p><strong>Check <a href=\"https://github.com/rain1017/memdb/wiki/API-Reference#mdbgoose\">here</a> to see how to port your Mongoose project to Mdbgoose</strong></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#architecture\"><span class=\"octicon octicon-link\"></span></a>Architecture</h3>\n\n<p><a href=\"https://github.com/rain1017/memdb/wiki/images/architecture.png\"><img src=\"https://github.com/rain1017/memdb/wiki/images/architecture.png\" alt=\"architecture.png\" /></a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#relationship-between-memdb-and-mongodb\"><span class=\"octicon octicon-link\"></span></a>Relationship between MemDB and MongoDB</h3>\n\n<p>MemDB is like a \'cache layer\' built up on MongoDB which support distributed ACID transaction. </p>\n\n<p>MemDB has its own API which similar to MongoDB, however, you can still use MongoDB\'s native query API by directly access backend storage, here are the guidelines:</p>\n\n<ul><li>Do simple query and update through MemDB API, which is ACID transaction safe.</li>\n<li>Do complex query through backend MongoDB, the read is not transaction safe.</li>\n<li>Do complex update through backend MongoDB <strong>offline</strong> (All MemDB shards are shutdown).</li>\n</ul><p>Here are some basic rules for memdb:</p>\n\n<ul><li>Data is not bind to specified shard, you can access any data from any shard.</li>\n<li>All operations inside a single transaction must be executed on one single shard.</li>\n<li>Access the same data from the same shard if possible, which will maximize performance.</li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#further-read\"><span class=\"octicon octicon-link\"></span></a>Further read</h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#quick-pomelo\"><span class=\"octicon octicon-link\"></span></a>Quick Pomelo</h3>\n\n<p><a href=\"https://github.com/rain1017/quick-pomelo\">Quick Pomelo</a> is a Scalable, Transactional and Reliable Game Server Framework based on Pomelo and MemDB</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/rain1017/memdb#license\"><span class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>Copyright 2015 rain1017.</p>\n\n<p>Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n\n<pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre>\n\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License. See the AUTHORS file\nfor names of contributors.</p>\n',1),(217,'SQL vs NoSQL: you do want to have a relational storage by default - Enterprise Craftsmanship','http://enterprisecraftsmanship.com/2015/11/06/sql-vs-nosql-you-do-want-to-have-a-relational-storage-by-default/',0,0,'\r\n			<p>The concept of NoSQL databases has been around for a while, but there still are quite a few misunderstandings regarding the topic of relational SQL vs NoSQL databases. In this post, I’d like to clarify the most common misconceptions and discuss the primary use cases for each of them.</p>\n\n<h2>Are NoSQL databases really schemaless?</h2>\n<p>A quick note before we start: the notion of NoSQL refers to 4 different types of databases: Document-Oriented, Column-Oriented, Key-Value stores, and Graph DBs. In this post, I talk about Document-Oriented databases primarily. I refer to them as NoSQL for the sake of brevity but keep in mind the term itself has a more broad scope.</p>\n<p>Alright, so are NoSQL databases really schemaless? Let’s take an example. Let’s say we have a document collection named Customers with the following data inside:</p>\n<p class=\"MsoNormal\"><span>{ </span><span>Id</span><span>: 1, </span><span>Name</span><span>: </span><span>“John Doe”</span><span> },</span></p>\n<p class=\"MsoNormal\"><span>{ </span><span>Id</span><span>: 2, </span><span>Name</span><span>: </span><span>“Bob Smith”</span><span> }</span></p>\n<p>Because of the collection’s schemaless nature, nothing prevents us from adding another document, like this:</p>\n<p class=\"MsoNormal\"><span>{ </span><span>Id</span><span>: 1, </span><span>Name</span><span>: </span><span>“John Doe”</span><span> },</span></p>\n<p class=\"MsoNormal\"><span></span><span>{ </span><span>Id</span><span>: 2, </span><span>Name</span><span>: </span><span>“Bob Smith”</span><span> },</span></p>\n<p class=\"MsoNormal\"><span>{ </span><span>Id</span><span>: 3, </span><span>FirstName</span><span>: </span><span>“Alice”<span>, </span><span>LastName</span><span>: </span><span>“Christopher”</span></span><span> }</span></p>\n<p class=\"MsoNormal\">Now, let’s say we have a method that looks for customers given a particular name:</p>\n<p class=\"MsoNormal\"><span>public</span> <span>class</span> <span>CustomerRepository</span></p>\n<p class=\"MsoNormal\"><span>{</span></p>\n<p class=\"MsoNormal\"><span><span> </span><span>   </span></span><span>public</span> <span>IReadOnlyList</span><span>&lt;</span><span>Customer</span><span>&gt; </span><span>Find</span><span>(</span><span>string</span><span> name)</span></p>\n<p class=\"MsoNormal\"><span><span>    </span>{</span></p>\n<p class=\"MsoNormal\"><span><span>        </span></span><span>return</span> <span>_collection</span><span>.</span><span>Find</span><span>(x =&gt; x.</span><span>Name</span><span> == name).</span><span>ToList</span><span>();</span></p>\n<p class=\"MsoNormal\"><span><span>    </span>}</span></p>\n<p class=\"MsoNormal\"><span>}</span></p>\n<p>What would happen if we add Alice Christopher to the collection the way we did previously? Would the Find method find her? Surely, not. The repository class implicitly relies on the collection schema and require all customers to have the Name property in order to be detected. In this scenario, we have to adjust the Find method so that it would start looking at both Name and FirstName/LastName properties.</p>\n<p>While NoSQL databases are technically schemaless meaning that they allow us to store documents in any shape we want, the notion of schema itself doesn’t vanish from our domain model. <strong>Schemaless databases just shift the responsibility to maintain the schema to us, developers</strong>.</p>\n<p>The use of a NoSQL storage means a move from explicitly defined data structures to implicit ones. And that is a huge step back from what we have in relational databases, because, as we know, we should always try to <a href=\"http://enterprisecraftsmanship.com/2015/10/05/making-implicit-assumptions-explicit/\">make implicit assumptions in our code explicit</a>.</p>\n<p>And of course, the notion of schemaless data doesn’t belong to NoSQL databases exclusively. We can do the same in traditional relational databases. For example, one could serialize the whole customer object to an XML or JSON document and put it to an MSSQL/Oracle/MySQL table. This would make the customer storage schemaless as well.</p>\n<p>As you might guess, such design decisions are frowned upon in the world of relational databases because of the lack of explicitness. Explicit schema SQL storages introduce is a great assistant when it comes to defining data structures. It helps developers make sure the shape of the data they work with is consistent across the whole database.</p>\n<h2>Are schema migrations easier with NoSQL databases?</h2>\n<p>Another broadly accepted statement is that schema migrations are easier with NoSQL databases. Are they?</p>\n<p>In the example above, how would we handle the two editions of the customer data? We would need to introduce schema versioning:</p>\n<p class=\"MsoNormal\"><span>{ </span><span>Id</span><span>: 1, </span><span>Name</span><span>: </span><span>“John Doe”<span>, </span><span>Version</span><span>: 1</span></span><span> },</span></p>\n<p class=\"MsoNormal\"><span></span><span>{ </span><span>Id</span><span>: 2, </span><span>Name</span><span>: </span><span>“Bob Smith”<span>, </span><span>Version</span><span>: 1</span></span><span> },</span></p>\n<p class=\"MsoNormal\"><span>{ </span><span>Id</span><span>: 3, </span><span>FirstName</span><span>: </span><span>“Alice”<span>, </span><span>LastName</span><span>: </span><span>“Christopher”<span>, </span><span>Version</span><span>: 2</span></span></span><span> }</span></p>\n<p class=\"MsoNormal\">It means that in any given time there exist at least 2 versions of the Customer class and we have to handle both of them in our domain model manually:</p>\n<p class=\"MsoNormal\"><span>public</span> <span>class</span> <span>Customer</span></p>\n<p class=\"MsoNormal\"><span>{</span></p>\n<p class=\"MsoNormal\"><span><span>    </span></span><span>public</span> <span>int</span> <span>Id</span><span> { </span><span>get</span><span>; </span><span>private</span> <span>set</span><span>; }</span></p>\n<p class=\"MsoNormal\"><span><span>    </span></span><span>public</span> <span>string</span> <span>Name</span><span> { </span><span>get</span><span>; </span><span>private</span> <span>set</span><span>; }</span></p>\n<p class=\"MsoNormal\"><span><span>    </span></span><span>public</span> <span>string</span> <span>FirstName</span><span> { </span><span>get</span><span>; </span><span>private</span> <span>set</span><span>; }</span></p>\n<p class=\"MsoNormal\"><span><span>    </span></span><span>public</span> <span>string</span> <span>LastName</span><span> { </span><span>get</span><span>; </span><span>private</span> <span>set</span><span>; }</span></p>\n<p class=\"MsoNormal\"><span><span>    </span></span><span>public</span> <span>int</span> <span>Version</span><span> { </span><span>get</span><span>; </span><span>private</span> <span>set</span><span>; }</span></p>\n<p class=\"MsoNormal\"><span> </span></p>\n<p class=\"MsoNormal\"><span><span> </span><span>   </span></span><span>/* Other members */</span></p>\n<p class=\"MsoNormal\"><span>}</span></p>\n<p class=\"MsoNormal\"><span> </span></p>\n<p class=\"MsoNormal\"><span>public</span> <span>class</span> <span>CustomerProcessor</span></p>\n<p class=\"MsoNormal\"><span>{</span></p>\n<p class=\"MsoNormal\"><span><span>    </span></span><span>public</span> <span>void</span> <span>Process</span><span>(</span><span>Customer</span><span> customer)</span></p>\n<p class=\"MsoNormal\"><span><span>    </span>{</span></p>\n<p class=\"MsoNormal\"><span><span>        </span></span><span>string</span><span> lastName;</span></p>\n<p class=\"MsoNormal\"><span><span>        </span></span><span>if</span><span> (customer.</span><span>Version</span><span> == 1)</span></p>\n<p class=\"MsoNormal\"><span><span>        </span>{</span></p>\n<p class=\"MsoNormal\"><span><span>            </span>lastName = </span><span>/* Get the last name out of customer.Name somehow */</span><span>;</span></p>\n<p class=\"MsoNormal\"><span><span>        </span>}</span></p>\n<p class=\"MsoNormal\"><span><span>        </span></span><span>else</span> <span>if</span><span> (customer.</span><span>Version</span><span> == 2)</span></p>\n<p class=\"MsoNormal\"><span><span>        </span>{</span></p>\n<p class=\"MsoNormal\"><span><span>            </span>lastName = customer.</span><span>LastName</span><span>;</span></p>\n<p class=\"MsoNormal\"><span><span>        </span>}</span></p>\n<p class=\"MsoNormal\"><span><span>        </span></span><span>else</span></p>\n<p class=\"MsoNormal\"><span><span>        </span>{</span></p>\n<p class=\"MsoNormal\"><span><span>            </span></span><span>throw</span> <span>new</span> <span>InvalidOperationException</span><span>();</span></p>\n<p class=\"MsoNormal\"><span><span>        </span>}</span></p>\n<p class=\"MsoNormal\"><span>        /* Work with lastName here */</span></p>\n<p class=\"MsoNormal\"><span><span>    </span>}</span></p>\n<p class=\"MsoNormal\"><span>}</span></p>\n<p>The situation here is essentially the same. NoSQL databases don’t help us with the schema migrations, <strong>they transfer the obligation to perform it to us, developers</strong>. With a non-relational storage, we have to do the following:</p>\n<ul><li>Change our code so that it handles both versions of the schema (see the CustomerProcessor.Process method).</li>\n<li>Create a background job which searches for documents of the old versions and transforms them into the new version, one by one.</li>\n</ul><p>Now, compare this to the explicit “fire-and-forget” migrations we can employ in an SQL database. All we have to do there is write a single script that would <a href=\"http://enterprisecraftsmanship.com/2015/08/10/database-versioning-best-practices/\">handle all data migrations at once</a>. The migration logic in relational storages tends not to infiltrate to the domain model which helps keep the latter clean and simple.</p>\n<p>Schema migrations in NoSQL databases are not easier. Contrarily, they are more difficult to implement and maintain comparing to SQL storages.</p>\n<h2>Other benefits of traditional SQL databases</h2>\n<p>There are two more benefits traditional SQL databases provide us out of the box. There’re no analogues for them in most Document-Oriented DBs.</p>\n<p>The first one is data (referential) integrity. This feature helps us verify we don’t reference non-existing rows and thus keep the data consistent in the first place. For example, we can create a foreign key constraint in our customers table and thereby make sure all our customers belong to one of the predefined countries:</p>\n<div class=\"wp-caption aligncenter\"><img src=\"http://i0.wp.com/i.imgur.com/Pmb1CDw.png?resize=429%2C251\" alt=\"SQL vs NoSQL: data integrity in action\" /><p class=\"wp-caption-text\">Data integrity in action</p></div>\n<p>A relational database acts here as the last stand guardian, so to speak. It means that we still need to employ proper validation in the application code ourselves but if we miss something, that wouldn’t lead to data corruption. The database would inform us about the inconsistency by rejecting the incorrect transaction.</p>\n<p>In NoSQL storages, we have to – once again – handle such situations manually. It’s a common practice to create a background job to reveal inconsistent data and try to settle the conflicts after they took place.</p>\n<p>Atomic transactions across different tables and/or rows is the other benefit. It’s not as important as those we discussed previously because a well-designed NoSQL storage rarely requires the change of multiple documents at once. But still, it’s a nice-to-have feature in many cases. NoSQL databases usually support atomic operations within a single document only.</p>\n<h2>So why ever bother choosing a NoSQL data storage?</h2>\n<p>Despite all the merits relational databases have, they lack two important ones: scalability and performance. And this is the only reasons why one should ever consider choosing NoSQL. Not because NoSQL database are schemaless (they are not, essentially), nor because they make schema migrations easier (they don’t). Scalability. And performance.</p>\n<p>Relational databases are Jacks of all trades. They provide rich functionality out of the box. They also do pretty well with any kind of software. The only problem with SQL storages is that when your data outgrows a single database instance, you no longer can rely on the relational model.</p>\n<p>If that is the case, you have to revisit your application and try to accommodate a NoSQL storage – one that fits the needs of your software the most:</p>\n<div class=\"wp-caption aligncenter\"><img src=\"http://i1.wp.com/i.imgur.com/pYGGCKY.png?resize=482%2C312\" alt=\"SQL vs NoSQL: Choosing a specialized data storage based on your application\'s needs\" /><p class=\"wp-caption-text\">Choosing a specialized data storage based on your application’s needs</p></div>\n<p>But even in this case, it doesn’t mean you should forgo the SQL database completely. You can employ a NoSQL storage for the part of your system that doesn’t fit the relational model and keep the rest in place. This practice is called <a href=\"http://martinfowler.com/bliki/PolyglotPersistence.html\">Polyglot Persistence</a>.</p>\n<p>All said above doesn’t mean you can’t scale a relational DB. You can (to some extent). But this means you will need to give up on the benefits it provides, such as data integrity. Also, SQL databases don’t provide such functionality out of the box, so it often becomes a pain to do that. In most cases, you are better off just choosing a NoSQL DB for scalability purposes.</p>\n<h2>SQL vs NoSQL: Conclusion</h2>\n<p>In most cases, NoSQL is a forced choice. It’s a tool the use of which you want to postpone as much as possible as it shifts too much of burden to you as a programmer. Relational databases are more friendly, they provide rich capabilities out of the box:</p>\n<ul><li>Explicit schema</li>\n<li>The ease of migrations</li>\n<li>Data integrity</li>\n<li>Atomic transactions across several tables/rows</li>\n</ul><p>If your application is not expecting outstanding scalability requirements in any near future, you are almost always better off choosing a relational storage. The reason is that non-relational databases require constant (and quite big) maintenance overhead comparing to relational ones.</p>\n<p>Only if you are sure your system will contain more than tens or hundreds of millions rows in a single table, should you consider using NoSQL. And even in this case, try to extract to the non-relational storage only the parts that don’t fit the relational DB. That would help reduce the overall maintenance overhead.</p>\n<h2>Related articles</h2>\n					',1),(218,'Hacksboard â€” Your Pull Request tracking tool','https://hacksboard.com/',0,0,'<div><div class=\"rst-borderdashed\"><i><img src=\"https://hacksboard.com/landing/images/submit.svg\" alt=\"Submit your pull request\" title=\"Submit your pull request\" /></i></div><h3>Submit your pull request</h3><p>Submit your pull request like you use to do, whenever you want. No more chat begging asking for review.</p></div><div><div class=\"rst-borderdashed\"><i><img src=\"https://hacksboard.com/landing/images/appears.svg\" alt=\"Your request appears at Hacksboard\" title=\"Your request appears at Hacksboard\" /></i></div><h3>Your request appears at Hacksboard</h3><p>Your pull request is displayed at your office TV using Hacksboard so everyone gets noticed. No asks for review, no lost pull requests.</p></div><div><div class=\"rst-borderdashed\"><i><img src=\"https://hacksboard.com/landing/images/reviewed.svg\" alt=\"You get reviewed\" title=\"You get reviewed\" /></i></div><h3>You get reviewed</h3><p>Your pull request is reviewed by someone else in your team so you can merge or rework on the issue as soon as possible.</p></div>',1),(219,'Nanobox','https://desktop.nanobox.io/',0,0,'<div class=\"section\"><div class=\"manifesto\"><div class=\"point\"><div class=\"svg-holder\"></div><p>Parity between development and production</p></div><div class=\"point config\"><div class=\"svg-holder\"></div><p>Automated environment configuration</p></div><div class=\"point clean\"><div class=\"svg-holder\"></div><p>Keep your local machine clean via virtualization</p></div></div></div><p></p><h2>Your app is launched in a lightweight VM that is consistent across local and production machines</h2><div class=\"overview\"><div class=\"info\"><div class=\"blurb src-code\"><h2><span>1</span>App Source Code</h2><p>Focus on coding rather than configuring a local dev environment</p></div><div class=\"blurb engine\"><h2><span>2</span>Language Engine</h2><p>The Engine detects your app type and specifies what services your app needs (ruby, mongo, etc) and how they should be configured.</p></div><div class=\"blurb docker\"><h2><span>3</span>Docker Containers</h2><p>Containers are configured and initialized. Your code is then built and installed.</p></div><div class=\"blurb vagrant\"><h2><span>4</span>Vagrant / Virtual Box</h2><p>Your services run in an ultra lightweight linux virtual machine (30mb RAM). Requests to localhost are proxied to your app</p></div></div><div class=\"graphic\"></div><a href=\"https://desktop.nanobox.io/how-nanobox-works/\" class=\"jumper\"></a><p><a href=\"https://desktop.nanobox.io/how-nanobox-works/\" class=\"jumper\">How it works</a></p><a href=\"https://desktop.nanobox.io/how-nanobox-works/\" class=\"jumper\"></a></div><p></p><h2>Nanobox detects your app type and automatically configures the environment and installs everything your app needs to run</h2><div class=\"mini-overview\"><div class=\"mini\"><div class=\"script\"><pre><code class=\"language-nanobox\">$ nanobox run \nLaunching Vagrant Virtual Machine\nDetecting app type\nInstalling runtimes in VM\netc..</code></pre></div></div><div class=\"mini\"><div class=\"script\"><pre><code class=\"language-nanobox\">$ nanobox dev \nEntering virtual machine context:\n$ rails s # development server </code></pre></div></div></div>',1),(220,'linto:spreadjs package | Atmosphere','https://atmospherejs.com/linto/spreadjs',0,0,'\n\n\n\n\n\n  <div class=\"applicationLayout\">\n    \n    \n\n    \n    <div class=\"content\">\n      \n      <a class=\"logo\" href=\"https://atmospherejs.com/\">Atmosphere</a>\n\n    \n  <div class=\"packagesShow page\">\n    <div class=\"center-wrapper\">\n        \n\n        <div class=\"secondary\">\n          \n          <div class=\"contributors\">\n            <p>Contrib­utors</p>\n            \n          </div>\n        </div>\n\n      </div>\n    <div class=\"center-wrapper\">\n        \n\n        \n        <div class=\"secondary\">\n          \n            \n          \n          <div class=\"content-block\">\n            <p>History</p>\n            <div class=\"timeline list-expandable no-milestones\">\n\n              \n                <div>\n                  \n                    \n                    <span class=\"icon-circle-hollow\"></span>\n                    <span class=\"meta\"><span class=\"version\">4.0.2</span> <span class=\"date\">Nov 6, 2014</span></span>\n                  \n\n                </div>\n              \n                <div>\n                  \n                    \n                    <span class=\"icon-circle-hollow\"></span>\n                    <span class=\"meta\"><span class=\"version\">4.0.1</span> <span class=\"date\">Nov 6, 2014</span></span>\n                  \n\n                </div>\n              \n                <div>\n                  \n                    \n                    <span class=\"icon-circle-hollow\"></span>\n                    <span class=\"meta\"><span class=\"version\">4.0.0</span> <span class=\"date\">Nov 6, 2014</span></span>\n                  \n\n                </div>\n              \n                <div>\n                  \n                    \n                    <span class=\"icon-circle-hollow\"></span>\n                    <span class=\"meta\"><span class=\"version\">3.20142.16</span> <span class=\"date\">Nov 6, 2014</span></span>\n                  \n\n                </div>\n              \n                <div>\n                  \n                    \n                    <span class=\"icon-circle-hollow\"></span>\n                    <span class=\"meta\"><span class=\"version\">3.20142.15</span> <span class=\"date\">Nov 6, 2014</span></span>\n                  \n\n                </div>\n              \n                <div>\n                  \n                    \n                    <span class=\"icon-circle-hollow\"></span>\n                    <span class=\"meta\"><span class=\"version\">3.20142.14</span> <span class=\"date\">Nov 6, 2014</span></span>\n                  \n\n                </div>\n              \n                <div>\n                  \n                    \n                    <span class=\"icon-circle-hollow\"></span>\n                    <span class=\"meta\"><span class=\"version\">3.20142.13</span> <span class=\"date\">Nov 5, 2014</span></span>\n                  \n\n                </div>\n              \n                <div>\n                  \n                    \n                    <span class=\"icon-circle-hollow\"></span>\n                    <span class=\"meta\"><span class=\"version\">1.0.1</span> <span class=\"date\">Oct 4, 2014</span></span>\n                  \n\n                </div>\n              \n                <div>\n                  \n                    \n                    <span class=\"icon-circle-hollow\"></span>\n                    <span class=\"meta\"><span class=\"version\">1.0.0</span> <span class=\"date\">Oct 3, 2014</span></span>\n                  \n\n                </div>\n              \n              <p>\n                <span class=\"highlight-wrapper\"></span>\n                <span class=\"icon-arrow-down\"></span>\n                <span class=\"meta\">See More</span>\n              </p>\n            </div>\n          </div>\n\n          \n\n          \n            <div class=\"content-block\">\n              <p>Depend­encies</p>\n              \n            </div>\n          \n        </div>\n\n      </div>\n    <div class=\"searches-wrapper\">\n      <p>\n        </p><h2 class=\"section-title\">Top Searches</h2>\n        <span class=\"a-select nochrome small\">\n          </span>\n      \n\n      \n    </div>\n  </div>\n      </div>\n  </div><span></span>\n  \n',1),(221,'CoreOS','https://coreos.com/blog/cluster-osi-model/',0,0,'\n\n<p><em>“What makes a cluster a cluster?”</em> - Ask that question of 10 different engineers and you’ll get 10 different answers. Some look at it from a hardware perspective, some see it as a particular set of cloud technologies, and some say it’s the protocols exchanging information on the network.</p>\n<p>With this ever-growing field of distributed systems technologies, it is helpful to compare the goals, roles and differences of some of these new projects based on their functionality. In this post we propose a conceptual description of the cluster at large, while showing some examples of emerging distributed systems technologies. </p>\n<h2>Layers of abstraction</h2>\n<p>The tech community has long agreed on what a network looks like. We’ve largely come to agree, in principle, on the <a href=\"http://en.wikipedia.org/wiki/OSI_model\">OSI (Open Systems Interconnection) model</a> (and in practice, on its close cousin, the <a href=\"http://en.wikipedia.org/wiki/Internet_protocol_suite#Comparison_of_TCP.2FIP_and_OSI_layering\">TCP/IP model</a>).</p>\n<p>A key aspect of this model is the separation of concerns, with well-defined responsibilities and dependence between components: every layer depends on the layer below it and provides useful network functionality (connection, retry, packetization) to the layer above it. At the top, finally, are web sessions and applications of all sorts running and abstracting communication.</p>\n<p>So, as an exercise to try to answer “What makes a cluster a cluster?” let’s apply the same sort of thinking to layers of abstraction in terms of execution of code on a group of machines, instead of communication between these machines.</p>\n<p>Here’s a snapshot of the OSI model, applied to containers and clustering: </p>\n<p><img src=\"https://coreos.com/assets/images/media/osi-model-clustering.svg\" alt=\"OSI Applied to Clustering\" /></p>\n<p>Let’s take a look from the bottom up.</p>\n<h2>Level 1, Hardware</h2>\n<p>The hardware layer is where it all begins. In a modern environment, this may mean physical (bare metal) or virtualized hardware – abstraction knows no bounds – but for our purposes, we define hardware as the CPU, RAM, disk and network equipment that is rented or bought in discrete units.</p>\n<p><em>Examples: bare metal, virtual machines, cloud</em></p>\n<h2>Level 2, OS/Machine ABI</h2>\n<p>The OS layer is where we define how software executes on the hardware: the OS gives us the Application Binary Interface (ABI) by which we agree on a common language that our userland applications speak to the OS (system calls, device drivers, and so on). We also set up a network stack so that these machines can communicate amongst each other. This layer therefore provides our lowest level complete execution environment for applications. </p>\n<p>Now, traditionally, we stop here, and run our final application on top of this as a third pseudo-layer of the OS and various user-space packages. We provision individual machines with slightly different software stacks (a database server, an app server) and there’s our server rack. </p>\n<p>Over the lifetime of servers and software, however, the permutations and histories of individual machine configurations start to become unwieldy. As an industry, we are learning that managing this complexity becomes costly or infeasible over time, even at moderate scale (e.g. 3+ machines). </p>\n<p>This is often where people start to talk about containers, as containers treat the entire OS userland as one hermetic application package that can be managed as an independent unit. Because of this abstraction, we can conceptually shift containers up the stack, as long as they’re above layer 2. We’ll revisit containers in layer 6.</p>\n<p><em>Examples: kernel + {systemd, cgroups/namespaces, jails, zones}</em></p>\n<h2>Level 3, Cluster Consensus</h2>\n<p>To begin to mitigate the complexity of managing individual servers, we need to start thinking about machines in some greater, collective sense: this is our first notion of a <em>cluster</em>. We want to write software that scales across these individual servers and shares work effortlessly.</p>\n<p>However, as we add more servers to the picture, we now introduce many more points of failure: networks partition, machines crash and disks fail. How can we build systems in the face of greater uncertainty? What we’d like is some way of creating a uniform set of data and data primitives, as needed by distributed systems. Much like in multiprocessor programming, we need the equivalent of locks, message passing, shared memory and atomicity across this group of machines.</p>\n<p>This is an interesting and vibrant field of algorithmic research: a first stop for the curious reader should be the <a href=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/pubs.html\">works of Leslie Lamport</a>, particularly his earlier writing on ordering and reliability of distributed systems. His later work describes Paxos, the preeminent <a href=\"http://en.wikipedia.org/wiki/Consensus_%28computer_science%29\">consensus protocol</a>; the other major protocol, as provided by many projects in this category, is <a href=\"https://raftconsensus.github.io/\">Raft</a>.</p>\n<p>Why is this called consensus? The machines need to ‘agree’ on the same history and order of events in order to make the guarantees we’d like for the primitives described. Locks cannot be taken twice, for example, even if some subset of messages disappears or arrives out of order, or member machines crash for unknown reasons. </p>\n<p>These algorithms build data structures to form a coherent, consistent, and fault-tolerant whole.</p>\n<p><em>Examples: etcd, ZooKeeper, consul</em></p>\n<h2>Level 4, Cluster Resources</h2>\n<p>With this perspective of a unified cluster, we can now talk about cluster resources. Having abstracted the primitives of individual machines, we use this higher level view to create and interact with the complete set of resources that we have at our disposal. Thus we can consider in aggregate the CPUs, RAM, disk and networking as available to any process in the cluster, as provided by the physical layers underneath.</p>\n<p>Viewing the cluster as one large machine, all devices (CPU, RAM, disk, networking) become abstract. This is a benefit already being used by containers. Containers depend on these things being abstracted on their behalf; for example, network bridges. This is so they can use these abstractions at a level higher in the stack while running on any of the underlying hardware.</p>\n<p>In some sense, this layer is the equivalent of the hardware layer of the now-primordial notion of the cluster. It may not be as celebrated as the layers above it, but this layer is where some important innovation takes place. Showing a cool auto-scaling webapp demo is nice, but requires things like carving up cluster IP space or where a block device is attached to a host.</p>\n<p><em>Examples: flannel, remote block storage, weave</em></p>\n<h2>Level 5, Cluster Orchestration and Scheduling</h2>\n<p>Cluster orchestration, then, starts to look a lot like an OS kernel atop these cluster-level resources and the tools given by consistency – symmetry with the layers below again. It’s the purview of the orchestration platform to divide and share cluster resources, schedule applications to run, manage permissions, set up interfaces into and out of the cluster, and at the end of the day, find an ABI-compatible environment for the userland. With increased scale comes new challenges: from finding the right machines to providing the best experience to users of the cluster. </p>\n<p>Any software that will run on the cluster must ultimately execute on a physical CPU on a particular server. How the application code gets there and what abstractions it sees is controlled by the orchestration layer. This is similar to how WiFi simulates a copper wire to existing network stacks, with a controllable abstraction through access points, signal strength, meshes, encryption and more.</p>\n<p><em>Examples: fleet, Mesos, Kubernetes</em></p>\n<h2>Level 6, Containers</h2>\n<p>This brings us back to containers, which, as described earlier, the entire userland is bundled together and treated as a single application unit. </p>\n<p>If you’ve followed the whole stack up to this point, you’ll see why containers sit at level 6, instead of at level 2 or 3. It’s because the layers of abstraction below this point all depend on each other to build up to the point where a single-serving userland can safely abstract whether it’s running as one process on a local machine or as something scheduled on the cluster as a whole. </p>\n<p>Containers are actually simple that way; they depend on everything else to provide the appropriate execution environment. They carry userland data and expect specific OS details to be presented to them. </p>\n<p><em>Examples: Rocket, Docker, systemd-nspawn</em></p>\n<h2>Level 7, Application</h2>\n<p>Containers are currently getting a lot of attention in the industry because they can separate the OS and software dependencies from the hardware. By abstracting these details, we can create consistent execution environments across a fleet of machines and let the traditional POSIX userland continue to work, fairly seamlessly, no matter where you take it. If the intention is to share the containers, then choice is important, as is agreeing upon a sharable standard. Containers are exciting; it starts us down the road of a lot of open source work in the realm of true distributed systems, backwards-compatible with the code we already write – our <strong>Application</strong>.</p>\n<h2>Closing Thoughts</h2>\n<p>For any of the layers of the cluster, there are (and will continue to be) multiple implementations. Some will combine layers, some will break them into sub-pieces – but this was true of networking in the past as well (do you remember <a href=\"http://en.wikipedia.org/wiki/Internetwork_Packet_Exchange\">IPX</a>? Or <a href=\"http://en.wikipedia.org/wiki/AppleTalk\">AppleTalk</a>?). </p>\n<p>As we continue to work deeply on the internals of every layer, we also sometimes want to take a step back to look at the overall picture and consider the greater audience of people who are interested and starting to work on clusters of their own. We want to introduce this concept as a guideline, with a symmetric way of thinking about a cluster and its components. We’d love your thoughts on what defines a cluster as more than a mass of hardware. </p>\n \n',1),(222,'Untitled','http://www.codingmath.com/',0,0,'[unable to retrieve full-text content]',1),(223,'altitude/login-with-ssh','https://github.com/altitude/login-with-ssh',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"http://demo-ssh.32b6.com\">Demo here</a></p>\n\n<p>This is a simple experiment to authenticate web sessions with SSH. Doing so gives you a fully decentralized, passwordless authentication for free!</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/altitude/login-with-ssh#how-it-works\"><span class=\"octicon octicon-link\"></span></a>How it works</h2>\n\n<p>A custom SSH server listens for connections. Instead of providing a shell or any other service, it only validates the public key you offer. Then, a callback is made to a web application with a payload containing the validated public key along with the login token used.</p>\n\n<p>In practise, you would have first hit a \"login with SSH button\" on the web app. It would have generated a session that resolves into a valid one with a callback handing the proper key / token combination.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/altitude/login-with-ssh#disclaimer\"><span class=\"octicon octicon-link\"></span></a>Disclaimer</h2>\n\n<p>The code here is not intendend to be used beyond the context of this experiment (read: don\'t use this in production!). A proper implementation would probably have to use a better SSH library like <a href=\"https://www.libssh.org/\">libssh</a>.<br />Anyway, have fun!</p>\n',1),(224,'Instant Loading Web Apps With An Application Shell Architecture â€” Google Developers','https://medium.com/@addyosmani/instant-loading-web-apps-with-an-application-shell-architecture-7c0c2f10c73#.90pmxfhj9',0,0,'<div class=\"section-inner layoutSingleColumn\"><h3 class=\"graf--h3 graf--first\">Instant Loading Web Apps With An Application Shell Architecture</h3><p class=\"graf--p graf-after--h3\"><em class=\"markup--em markup--p-em\">By Addy Osmani &amp; Matt Gaunt</em></p><p class=\"graf--p graf-after--p\"><a href=\"https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/\" class=\"markup--anchor markup--p-anchor\">Progressive Web Apps</a> (PWAs) describe how a web app can <em class=\"markup--em markup--p-em\">progressively</em> change with use and user consent to give the user a more native-app-like experience with offline support, push notifications and being installable to the <a href=\"https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android\" class=\"markup--anchor markup--p-anchor\">home-screen</a>. They can also gain<strong class=\"markup--strong markup--p-strong\"> substantial </strong>performance benefits thanks to intelligent <a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">service worker</strong></a><strong class=\"markup--strong markup--p-strong\"> caching of your UI shell</strong> for repeat visits.</p><p class=\"graf--p graf-after--p\">This allows you to focus on <strong class=\"markup--strong markup--p-strong\">speed</strong>, giving your web apps the same <strong class=\"markup--strong markup--p-strong\">instant loading</strong> and regular updates you’re used to seeing in <strong class=\"markup--strong markup--p-strong\">native applications</strong>. It’s all possible using an <strong class=\"markup--strong markup--p-strong\">Application Shell architecture</strong> — a companion to this new way of thinking. Any site can take advantage of <a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\" class=\"markup--anchor markup--p-anchor\">service workers</a>, but PWAs must have them so it’s a natural fit.</p></div><div class=\"section-inner sectionLayout--outsetColumn\"><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1200/1*6BUS9ahijjPrr4BfV0Oq8g.jpeg\" alt=\"1*6BUS9ahijjPrr4BfV0Oq8g.jpeg\" /></div></div><div class=\"section-inner layoutSingleColumn\"><p class=\"graf--p graf-after--figure\">When we talk about an app’s shell, we mean the minimal HTML, CSS and JavaScript powering the user interface. <strong class=\"markup--strong markup--p-strong\">This should load fast, be cached and once loaded, dynamic content can populate your view</strong>. It’s the secret to reliably good performance.</p><p class=\"graf--p graf-after--p\">Think of your app’s shell like the bundle of code you’d publish to an app store if building a native app — it’s the load needed to get off the ground, but might not be the whole story. Keep your UI local and pull in content dynamically through an API.</p><p class=\"graf--p graf-after--p\">Let’s dive into how to structure your app using a<strong class=\"markup--strong markup--p-strong\"> service worker augmented Application Shell architecture</strong>. We’ll look at both the client and server-side rendering involved and share an end-to-end sample you can try out today.</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*5YMGg10WMLUbx1wav7aZYQ.png\" alt=\"1*5YMGg10WMLUbx1wav7aZYQ.png\" /></div><p class=\"graf--p graf-after--figure\">Our application has loaded for the first time and displays an ‘App is ready for offline use’ toast. If an update to the shell becomes available later, we can inform the user to refresh for the new version.</p><h3 class=\"graf--h3 graf-after--p\"><strong class=\"markup--strong markup--h3-strong\">What are Service Workers, again?</strong></h3><p class=\"graf--p graf-after--h3\">A service worker is a script that<strong class=\"markup--strong markup--p-strong\"> runs in the background,</strong> separate from your web page.. It responds to events, including network requests made from pages it serves. A service worker has an intentionally short lifetime. It wakes up when it gets an event and runs only as long as it needs to process it.</p><p class=\"graf--p graf-after--p\">Service workers also have a limited set of APIs when compared to JavaScript run from the context of a normal page. This is standard for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" class=\"markup--anchor markup--p-anchor\">workers</a> on the web. A Service worker can’t access the DOM but access things like the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Cache\" class=\"markup--anchor markup--p-anchor\">Cache Storage API</a>, and they can make network requests using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" class=\"markup--anchor markup--p-anchor\">Fetch API</a>. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\" class=\"markup--anchor markup--p-anchor\">IndexedDB API</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" class=\"markup--anchor markup--p-anchor\">postMessage()</a> are also available to use for data persistence and messaging between the service worker and pages it controls.</p><p class=\"graf--p graf-after--p\">A service worker can intercept network requests made from a page (which triggers a fetch event on the service worker) and return a response retrieved from the network, or retrieved from a local cache, or even constructed programmatically. Effectively, it’s an <strong class=\"markup--strong markup--p-strong\">efficient background event handler </strong>in the browser. The neat part is that, regardless of where the response comes from, it looks to the web page as though there were no service worker involvement.</p><p class=\"graf--p graf-after--p\">To learn more about service workers in depth, read an <a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\" class=\"markup--anchor markup--p-anchor\">Introduction to Service Workers</a>.</p><h3 class=\"graf--h3 graf-after--p\"><strong class=\"markup--strong markup--h3-strong\">Application Shell Architecture</strong></h3><p class=\"graf--p graf-after--h3\">Service workers are powerful for offline caching but they also offer significant performance wins in the form of<strong class=\"markup--strong markup--p-strong\"> instant loading</strong> for repeat visits to your site or web app. You can cache your application shell so it works offline and populate its content using JavaScript.</p><p class=\"graf--p graf-after--p\">On repeat visits, this allows you to get <strong class=\"markup--strong markup--p-strong\">meaningful pixels</strong> on the screen without the network, even if your content eventually comes from there. Think of it as displaying regions of the screen where toolbars and cards will eventually be populated very quickly and then loading in the rest of the content <strong class=\"markup--strong markup--p-strong\">progressively</strong>.</p><h4 class=\"graf--h4 graf-after--p\"><strong class=\"markup--strong markup--h4-strong\">What is the performance impact of this architecture?</strong></h4><p class=\"graf--p graf-after--h4\">To test this architecture on real devices, we’ve run our <a href=\"https://github.com/GoogleChrome/application-shell/\" class=\"markup--anchor markup--p-anchor\">application shell sample</a> on <a href=\"http://www.webpagetest.org/\" class=\"markup--anchor markup--p-anchor\">WebPageTest.org</a> and shown the results below.</p><p class=\"graf--p graf-after--p\"><a href=\"http://www.webpagetest.org/result/151113_8S_G68/\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Testing on Cable with a Nexus 5 using Chrome Dev</strong></a></p><p class=\"graf--p graf-after--p\">The first view of the app has to fetch all the resources from the network and doesn’t achieve a meaningful paint until <strong class=\"markup--strong markup--p-strong\">1.2 seconds </strong>in. Thanks to service worker caching, our repeat visit achieves meaningful paint and fully finishes loading in <strong class=\"markup--strong markup--p-strong\">0.5 seconds.</strong></p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*V0e9LSWBPFJzDTb1XPDx1g.png\" alt=\"1*V0e9LSWBPFJzDTb1XPDx1g.png\" /></div><p class=\"graf--p graf-after--figure\"><a href=\"https://youtu.be/bsAefxnSRZU\" class=\"markup--anchor markup--p-anchor\">Video</a></p><p class=\"graf--p graf-after--p\"><a href=\"http://www.webpagetest.org/result/151112_8R_YQN/\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\">Testing on 3G with a Nexus 5 using Chrome Dev</strong></a></p><p class=\"graf--p graf-after--p\">We can also test our sample with a slightly slower 3G connection. This time it takes <strong class=\"markup--strong markup--p-strong\">2.5 seconds</strong> on first visit for our first meaningful paint. It takes<a href=\"http://www.webpagetest.org/video/view.php?id=151112_8R_YQN.3.0\" class=\"markup--anchor markup--p-anchor\"><strong class=\"markup--strong markup--p-strong\"> 7.1 seconds</strong></a><strong class=\"markup--strong markup--p-strong\"> to fully load the page. With service worker caching, our repeat visit achieves meaningful paint and fully finishes loading in </strong><a href=\"http://www.webpagetest.org/video/view.php?id=151112_8R_YQN.3.1\" class=\"markup--anchor markup--p-anchor\">0.8 seconds</a>.</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*k_Ajk7e0ntOGdLpENgBrCQ.png\" alt=\"1*k_Ajk7e0ntOGdLpENgBrCQ.png\" /></div><p class=\"graf--p graf-after--figure\"><a href=\"https://youtu.be/488XbwCKf5g\" class=\"markup--anchor markup--p-anchor\">Video</a></p><p class=\"graf--p graf-after--p\"><a href=\"http://www.webpagetest.org/result/151112_HH_11D0/\" class=\"markup--anchor markup--p-anchor\">Other views</a> tell a similar story.. Compare the <strong class=\"markup--strong markup--p-strong\">3 seconds</strong> it takes to achieve first meaningful paint for our first view of another URL in the application-shell:</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*fuXA7JGKlx3IKUrTQ_1ikw.png\" alt=\"1*fuXA7JGKlx3IKUrTQ_1ikw.png\" /></div><p class=\"graf--p graf-after--figure\">to the<strong class=\"markup--strong markup--p-strong\"> 0.9 seconds </strong>it takes when loaded from our service worker cache. Over 2 seconds of time is saved for our end users.</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*EaYEd9V2lbuSzEb9I6Z4LA.png\" alt=\"1*EaYEd9V2lbuSzEb9I6Z4LA.png\" /></div><p class=\"graf--p graf-after--figure\">Similar and reliable performance wins are possible for your own applications using the Application Shell architecture.</p><h4 class=\"graf--h4 graf-after--p\"><strong class=\"markup--strong markup--h4-strong\">Does service worker require us to rethink how we structure apps?</strong></h4><p class=\"graf--p graf-after--h4\">Service workers imply some subtle changes in application architecture. Rather than squashing all of your application into an HTML string, it can be beneficial to do things <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\" class=\"markup--anchor markup--p-anchor\">XHR</a>-style. This is where you have a shell (always cached and can always boot up without the network) and content which is refreshed regularly and managed separately.</p><p class=\"graf--p graf-after--p\">The implications of this split are large. On the first visit you can render content on the server and install the service worker on the client. On subsequent visits you need only request data.</p><h4 class=\"graf--h4 graf-after--p\"><strong class=\"markup--strong markup--h4-strong\">What about Progressive Enhancement?</strong></h4><p class=\"graf--p graf-after--h4\">While service worker isn’t currently supported by all browsers, the application content shell architecture uses <a href=\"https://en.wikipedia.org/wiki/Progressive_enhancement\" class=\"markup--anchor markup--p-anchor\">progressive enhancement</a> to ensure everyone can access the content. For example, take our sample project.</p><p class=\"graf--p graf-after--p\">Below you can see the full version rendered in Chrome, Firefox Nightly and Safari. On the very left you can see the Safari version where the content is rendered on the server <em class=\"markup--em markup--p-em\">without</em> a service worker. On the right we see the Chrome and Firefox Nightly versions powered by service worker.</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*_3CWMs-v8WpHnfN1t_-Q5A.jpeg\" alt=\"1*_3CWMs-v8WpHnfN1t_-Q5A.jpeg\" /></div><h4 class=\"graf--h4 graf-after--figure\"><strong class=\"markup--strong markup--h4-strong\">When does it make sense to use this architecture?</strong></h4><p class=\"graf--p graf-after--h4\">The Application Shell architecture makes the most sense for apps and sites that are <strong class=\"markup--strong markup--p-strong\">dynamic</strong>. A number of modern JavaScript frameworks and libraries (already encourage splitting your application logic from the content, making this pattern more straight-forward to apply.</p><p class=\"graf--p graf-after--p\">If you’re a very small static site, you probably don’t need an application shell and can simply cache the whole site in a service worker `oninstall` step. Use the approach that makes the most sense for your project.</p><h4 class=\"graf--h4 graf-after--p\"><strong class=\"markup--strong markup--h4-strong\">Production apps using this pattern already?</strong></h4><p class=\"graf--p graf-after--h4\">The application shell architecture is possible with just a few changes to your overall application’s UI and has worked well for large-scale sites such as Google’s <a href=\"https://developers.google.com/web/showcase/case-study/service-workers-iowa\" class=\"markup--anchor markup--p-anchor\">I/O 2015 Progressive Web App</a> and Google’s <a href=\"http://inbox.google.com\" class=\"markup--anchor markup--p-anchor\">Inbox</a>.</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*G_mS2lPczXcWCUjScXctVQ.png\" alt=\"1*G_mS2lPczXcWCUjScXctVQ.png\" /></div><p class=\"graf--p graf-after--figure\">Offline application shells are a major performance win and are also demonstrated well in Jake Archibald’s <a href=\"https://wiki-offline.jakearchibald.com/wiki/Rick_and_Morty\" class=\"markup--anchor markup--p-anchor\">offline Wikipedia app</a>, <a href=\"http://tech-blog.flipkart.net/2015/11/progressive-web-app/\" class=\"markup--anchor markup--p-anchor\">Flipkart Lite</a>’s Progressive web app or <a href=\"https://github.com/googlechrome/voice-memos\" class=\"markup--anchor markup--p-anchor\">Voice Memos</a> by Paul Lewis.</p></div><div class=\"section-inner sectionLayout--outsetColumn\"><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/1200/1*ggPaaogmGO_AavHDZPkGiw.jpeg\" alt=\"1*ggPaaogmGO_AavHDZPkGiw.jpeg\" /></div>For more details on how simple changes to Service Worker can improve startup and load performance, see Jake Archibald’s excellent <a href=\"https://www.youtube.com/watch?v=d5_6yHixpsQ\" class=\"markup--anchor markup--figure-anchor\">Supercharging page load</a> video.</div><div class=\"section-inner layoutSingleColumn\"><h3 class=\"graf--h3 graf-after--figure\"><strong class=\"markup--strong markup--h3-strong\">Explaining the Application shell architecture</strong></h3><p class=\"graf--p graf-after--h3\">During the first load experience, your goal is to get meaningful content to the user’s screen as quickly as possible.</p><p class=\"graf--p graf-after--p\"><strong class=\"markup--strong markup--p-strong\">First Load and Loading Other Pages</strong></p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*lIOjh8H7wlsCwOJmUivBMA.png\" alt=\"1*lIOjh8H7wlsCwOJmUivBMA.png\" /></div><p class=\"graf--p graf-after--figure\"><strong class=\"markup--strong markup--p-strong\">In general the application shell architecture will:</strong></p><ul class=\"postList\"><li class=\"graf--li graf-after--p\">Prioritise the initial load, but let service worker cache the application shell so repeat visits do not require the shell to be re-fetched from the network.</li><li class=\"graf--li graf-after--li\">Lazy-load or background load everything else. One good option is to use <a href=\"https://googlechrome.github.io/samples/service-worker/read-through-caching/\" class=\"markup--anchor markup--li-anchor\">read-through caching</a> for dynamic content.</li><li class=\"graf--li graf-after--li\">Use service worker tools (sw-precache) for reliable caching and updating of service worker to automatically manage the caching of static content.</li></ul><p class=\"graf--p graf-after--li\"><strong class=\"markup--strong markup--p-strong\">To achieve this:</strong></p><ul class=\"postList\"><li class=\"graf--li graf-after--p\"><strong class=\"markup--strong markup--li-strong\">Server</strong> will send down HTML content the client can render and will use far-future HTTP cache expiration headers to account for browsers without service worker support. It will serve filenames using hashes to enable ‘versioning’ and easy updates for later in the application lifecycle.</li><li class=\"graf--li graf-after--li\"><strong class=\"markup--strong markup--li-strong\">Page(s) </strong>will include inline CSS styles in a &lt;style&gt; tag within the document &lt;head&gt; to provide a fast first paint of the application shell. Each page will asynchronously load the JavaScript necessary for the current view. As we all know, CSS cannot yet be asynchronously loaded.. Instead, we can request styles using JavaScript as it IS asynchronous rather than parser-driven and synchronous. We can also take advantage of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\" class=\"markup--anchor markup--li-anchor\">requestAnimationFrame</a> to avoid cases where we might get a fast cache hit and end up with styles accidentally becoming part of the critical rendering path. requestAnimationFrame forces the first frame to be painted and then the styles to get loaded. Another option is to use projects such as Filament Group’s <a href=\"https://github.com/filamentgroup/loadCSS\" class=\"markup--anchor markup--li-anchor\">loadCSS</a> to request CSS async using JavaScript.</li><li class=\"graf--li graf-after--li\"><strong class=\"markup--strong markup--li-strong\">Service worker </strong>will store a cached entry of the application shell so that on repeat visits, the shell can be loaded entirely from the service worker cache unless an update is available on the network.</li></ul><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*f8je16MDSCGbzs4Ckb1qNQ.jpeg\" alt=\"1*f8je16MDSCGbzs4Ckb1qNQ.jpeg\" /></div><h3 class=\"graf--h3 graf-after--figure\"><strong class=\"markup--strong markup--h3-strong\">A practical implementation</strong></h3><p class=\"graf--p graf-after--h3\">We’ve written a fully working <a href=\"https://github.com/GoogleChrome/application-shell\" class=\"markup--anchor markup--p-anchor\">sample</a> using the Application Shell architecture using vanilla ES2015 JavaScript for the client and <a href=\"http://expressjs.com/\" class=\"markup--anchor markup--p-anchor\">Express.js</a> for the server. There is course nothing stopping you from using your <strong class=\"markup--strong markup--p-strong\">own stack </strong>for either the client or the server portions (e.g PHP, Ruby, Python). We found using JS all the way through relatively painless for this example.</p><h4 class=\"graf--h4 graf-after--p\"><strong class=\"markup--strong markup--h4-strong\">Service Worker Lifecycle</strong></h4><p class=\"graf--p graf-after--h4\">For our application-shell project, we use <a href=\"https://github.com/GoogleChrome/sw-precache/\" class=\"markup--anchor markup--p-anchor\">sw-precache</a> which generates our service worker script and <a href=\"https://github.com/GoogleChrome/sw-toolbox\" class=\"markup--anchor markup--p-anchor\">sw-toolbox</a> which handles runtime caching. Together they offer the following service worker lifecycle:</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*mlR_s0HbEg7VZmJSf-rFhQ.png\" alt=\"1*mlR_s0HbEg7VZmJSf-rFhQ.png\" /></div><h4 class=\"graf--h4 graf-after--figure\"><strong class=\"markup--strong markup--h4-strong\">Server bits</strong></h4><p class=\"graf--p graf-after--h4\">In the architecture, a server side component should be able to treat the content separate from how it’s presented. Content could be added to a HTML layout that results in a static render of the page, or it could be served up on it’s own to dynamically pulled in.</p><p class=\"graf--p graf-after--p\">Understandably, your server-side setup may drastically differ from the one we use for our demo app, but this pattern of web apps is achievable by most server setups, it <strong class=\"markup--strong markup--p-strong\">does</strong> require some re-architecting. We’ve found that the following model works quite well:</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*xbR8pdsz-lHRiw4z5CDryQ.png\" alt=\"1*xbR8pdsz-lHRiw4z5CDryQ.png\" /></div><ul class=\"postList\"><li class=\"graf--li graf-after--figure\">Routes are defined for three parts of your application: the user facing URL’s (index/wildcard), your HTML partials of just content and the application shell itself.</li><li class=\"graf--li graf-after--li\">Each route has a controller which pulls in a handlebars layout which in turn can pull in handlebar partials and views. Simply put, partials are views are chunks of HTML that are copied into the final page. Note: JavaScript frameworks that do more advanced data synchronisation are often way easier to port to an Application shell architecture. They tend to use data-binding and sync rather than partials.</li><li class=\"graf--li graf-after--li\">The user is initially served a static page with content. This page registers a service worker if it’s supported which caches the application shell and everything it depends on (CSS, JS etc).</li><li class=\"graf--li graf-after--li\">The app-shell will then act as a single page web app, using javascript to XHR in the content for a specific URL. The XHR calls are made to a /partials/ endpoint which returns the small chunk of HTML, CSS and JS needed to display that content. Note: there’s a many variants on how this can be approached and the above XHR one is just one of them. Some applications will inline their data (maybe using JSON) for initial render and therefore aren’t “static” in the flattened HTML sense.</li><li class=\"graf--li graf-after--li\">Browsers <strong class=\"markup--strong markup--li-strong\">without</strong> service worker support should always be served a fall-back experience. In our demo, we fall back to basic static server-side rendering, but this is only one of many options. The service worker aspect provides you with new opportunities for enhancing the performance of your Single-page Application style app using the cached application shell.</li></ul><h4 class=\"graf--h4 graf-after--li\"><strong class=\"markup--strong markup--h4-strong\">File versioning</strong></h4><p class=\"graf--p graf-after--h4\">One question that arises is how exactly should file versioning/updates be handled. This is application specific and the options are:</p><ul class=\"postList\"><li class=\"graf--li graf-after--p\">Network first and use the cached version otherwise</li><li class=\"graf--li graf-after--li\">Network only and fail if offline</li><li class=\"graf--li graf-after--li\">Cache the old version and update later</li></ul><p class=\"graf--p graf-after--li\"><strong class=\"markup--strong markup--p-strong\">For the application shell itself, a cache-first approach should be taken for your service worker setup. If you aren’t caching the application shell, you haven’t properly adopted the architecture</strong>.</p><p class=\"graf--p graf-after--p\"><em class=\"markup--em markup--p-em\">Note: The application-shell sample does not (at the time of writing) use file versioning</em><strong class=\"markup--strong markup--p-strong\"><em class=\"markup--em markup--p-em\"> for the assets referenced in the static render, often used for cache busting</em></strong><em class=\"markup--em markup--p-em\">. We hope to add this in the near future. The service worker is otherwise versioned by sw-precache (covered in the ‘Tooling’ section).</em></p><h4 class=\"graf--h4 graf-after--p\"><strong class=\"markup--strong markup--h4-strong\">Tooling</strong></h4><p class=\"graf--p graf-after--h4\">We maintain a number of different <a href=\"https://developers.google.com/web/tools/service-worker-libraries/?hl=en\" class=\"markup--anchor markup--p-anchor\">service worker helper libraries</a> that make the process of precaching your application’s shell or handling common caching patterns more straight-forward to setup.</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*ACE3yLzbAze9M1qCAg81lg.png\" alt=\"1*ACE3yLzbAze9M1qCAg81lg.png\" /></div><p class=\"graf--p graf-after--figure\"><strong class=\"markup--strong markup--p-strong\">Use sw-precache for your application shell</strong></p><p class=\"graf--p graf-after--p\">Using <a href=\"https://github.com/GoogleChrome/sw-precache\" class=\"markup--anchor markup--p-anchor\">sw-precache</a> to cache the application shell should handle the concerns around file revisions, the install/activate questions, and the fetch scenario for the app shell. You can drop sw-precache into your application’s build process and can use configurable wildcards to pick up your static resources. Rather than manually hand-crafting your service worker script, it generates one for you to take care of cache management in a way that is safe and has an efficient, cache-first fetch handler.</p><p class=\"graf--p graf-after--p\">Initial visits to your app trigger pre-caching of the complete set of needed resources. This is very similar to the experience of installing a native app from an app store. <strong class=\"markup--strong markup--p-strong\">When users return to your app, only updated resources are downloaded.</strong> In our demo app, we display an “App updated. Refresh for the new version” message to inform users that a new version of the application shell is available.</p><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*mWzNNP0ARzZKK-9jjP9O9Q.jpeg\" alt=\"1*mWzNNP0ARzZKK-9jjP9O9Q.jpeg\" /></div><p class=\"graf--p graf-after--figure\">This pattern is a low-friction way of letting users know they can refresh for the latest version.</p><p class=\"graf--p graf-after--p\"><strong class=\"markup--strong markup--p-strong\">Use sw-toolbox for runtime caching</strong></p><p class=\"graf--p graf-after--p\">Use <a href=\"https://github.com/GoogleChrome/sw-toolbox\" class=\"markup--anchor markup--p-anchor\">sw-toolbox</a> for runtime caching with varying strategies depending on the resource:</p><ul class=\"postList\"><li class=\"graf--li graf-after--p\"><a href=\"https://github.com/GoogleChrome/sw-toolbox#toolboxcachefirst\" class=\"markup--anchor markup--li-anchor\">cacheFirst</a> for images, along with a dedicated named cache that has a custom expiration policy of N maxEntries.</li><li class=\"graf--li graf-after--li\"><a href=\"https://github.com/GoogleChrome/sw-toolbox#toolboxnetworkfirst\" class=\"markup--anchor markup--li-anchor\">networkFirst</a> or fastest for API requests, depending on the desired content freshness. Fastest might be fine, but if there’s a specific API feed that’s updated frequently, use networkFirst.</li></ul><h3 class=\"graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Conclusions</strong></h3><p class=\"graf--p graf-after--h3\">Application shell architectures comes with several benefits but may only make sense for certain classes of application. The model is still young and it will be worth evaluating how much effort and overall performance benefits you might gain from using this architecture.</p><p class=\"graf--p graf-after--p\">In our experiments, we took advantage of template sharing between the client and server to minimise the work of building two application layers. This ensures progressive enhancement is still a first-class citizen.</p><p class=\"graf--p graf-after--p\"><strong class=\"markup--strong markup--p-strong\">If you’re already considering using service workers in your app, take a look at the architecture and evaluate if it makes sense for your own projects. We welcome any and all feedback on the ideas outlined in this post. Thanks!</strong></p><p class=\"graf--p graf-after--p\"><em class=\"markup--em markup--p-em\">With thanks to our reviewers: Jeff Posnick, Alex Russell, Paul Lewis, Seth Thompson, Rob Dodson, Taylor Savage, Peter Beverloo and Joe Medley.</em></p><h3 class=\"graf--h3 graf-after--p\">Related reading &amp; viewing</h3>Instant Loading with Service Workers (Chrome DevSummit talk)<p class=\"graf--p graf-after--li graf--last\"><em class=\"markup--em markup--p-em\">Cross-posted from </em><a href=\"https://developers.google.com/web/updates/2015/11/app-shell?hl=en\" class=\"markup--anchor markup--p-anchor\"><em class=\"markup--em markup--p-em\">Web Fundamentals</em></a></p></div>',1),(225,'meltingice/psd.js','https://github.com/meltingice/psd.js',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://travis-ci.org/meltingice/psd.js\"><img src=\"https://camo.githubusercontent.com/7e46e31c8b54789594a31ba020e697957642d78b/68747470733a2f2f7472617669732d63692e6f72672f6d656c74696e676963652f7073642e6a732e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" /></a></p>\n\n<p>A general purpose PSD parser written in Coffeescript. Based off of <a href=\"https://github.com/layervault/psd.rb\">PSD.rb</a>. It allows you to work with a Photoshop document in a manageable tree structure and find out important data such as:</p>\n\n<ul><li>Document structure</li>\n<li>Document size</li>\n<li>Layer/folder size + positioning</li>\n<li>Layer/folder names</li>\n<li>Layer/folder visibility and opacity</li>\n<li>Font data (via <a href=\"https://github.com/layervault/psd-enginedata\">psd-enginedata</a>)\n\n<ul><li>Text area contents</li>\n<li>Font names, sizes, and colors</li>\n</ul></li>\n<li>Color mode and bit-depth</li>\n<li>Vector mask data</li>\n<li>Flattened image data</li>\n<li>Layer comps</li>\n</ul><p>Runs in both NodeJS and the browser (using browserify). There are still some pieces missing that are present in PSD.rb, such as layer comp filtering, a built-in renderer, and many layer info blocks. The eventual goal is full feature parity with PSD.rb.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/meltingice/psd.js#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<p>PSD.js has no native dependencies. Simply add <code>psd</code> to your package.json or run <code>npm install psd</code>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/meltingice/psd.js#documentation\"><span class=\"octicon octicon-link\"></span></a>Documentation</h2>\n\n<p><strong>Note: work in progress</strong></p>\n\n<p>Annotated source code documentation is available <a href=\"http://meltingice.github.io/psd.js/docs/\">here</a>. PROTIP: if you\'re wondering how to access various metadata from a layer, you\'ll want to see this <a href=\"http://meltingice.github.io/psd.js/docs/lib/psd/layer/info.coffee.html\">file</a>.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/meltingice/psd.js#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>PSD.js works almost exactly the same in the browser and NodeJS.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/meltingice/psd.js#nodejs-example\"><span class=\"octicon octicon-link\"></span></a>NodeJS Example</h3>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-c1\">PSD</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>psd<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> psd <span class=\"pl-k\">=</span> <span class=\"pl-smi\">PSD</span>.<span class=\"pl-en\">fromFile</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path/to/file.psd<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-smi\">psd</span>.<span class=\"pl-c1\">parse</span>();\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">psd</span>.<span class=\"pl-en\">tree</span>().<span class=\"pl-en\">export</span>());\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">psd</span>.<span class=\"pl-en\">tree</span>().<span class=\"pl-en\">childrenAtPath</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>A/B/C<span class=\"pl-pds\">\'</span></span>)[<span class=\"pl-c1\">0</span>].<span class=\"pl-en\">export</span>());\n\n<span class=\"pl-c\">// You can also use promises syntax for opening and parsing</span>\n<span class=\"pl-smi\">PSD</span>.<span class=\"pl-c1\">open</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path/to/file.psd<span class=\"pl-pds\">\"</span></span>).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">psd</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">psd</span>.<span class=\"pl-smi\">image</span>.<span class=\"pl-en\">saveAsPng</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>./output.png<span class=\"pl-pds\">\'</span></span>);\n}).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span> () {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Finished!<span class=\"pl-pds\">\"</span></span>);\n});\n</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/meltingice/psd.js#browser-example\"><span class=\"octicon octicon-link\"></span></a>Browser Example</h3>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-c1\">PSD</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>psd<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-c\">// Load from URL</span>\n<span class=\"pl-smi\">PSD</span>.<span class=\"pl-en\">fromURL</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/path/to/file.psd<span class=\"pl-pds\">\"</span></span>).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">psd</span>) {\n  <span class=\"pl-smi\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>ImageContainer<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-c1\">appendChild</span>(<span class=\"pl-smi\">psd</span>.<span class=\"pl-smi\">image</span>.<span class=\"pl-en\">toPng</span>());\n});\n\n<span class=\"pl-c\">// Load from event, e.g. drag &amp; drop</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onDrop</span>(<span class=\"pl-smi\">evt</span>) {\n  <span class=\"pl-smi\">PSD</span>.<span class=\"pl-en\">fromEvent</span>(evt).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">psd</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">psd</span>.<span class=\"pl-en\">tree</span>().<span class=\"pl-en\">export</span>());\n  }); \n}</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/meltingice/psd.js#traversing-the-document\"><span class=\"octicon octicon-link\"></span></a>Traversing the Document</h3>\n\n<p>To access the document as a tree structure, use <code>psd.tree()</code> to get the root node. From there, work with the tree using any of these methods:</p>\n\n<ul><li><code>root()</code>: get the root node from anywhere in the tree</li>\n<li><code>isRoot()</code>: is this the root node?</li>\n<li><code>children()</code>: get all immediate children of the node</li>\n<li><code>hasChildren()</code>: does this node have any children?</li>\n<li><code>childless()</code>: opposite of <code>hasChildren()</code></li>\n<li><code>ancestors()</code>: get all ancestors in the path of this node (excluding the root)</li>\n<li><code>siblings()</code>: get all sibling tree nodes including the current one (e.g. all layers in a folder)</li>\n<li><code>nextSibling()</code>: gets the sibling immediately following the current node</li>\n<li><code>prevSibling()</code>: gets the sibling immediately before the current node</li>\n<li><code>hasSiblings()</code>: does this node have any siblings?</li>\n<li><code>onlyChild()</code>: opposite of <code>hasSiblings()</code></li>\n<li><code>descendants()</code>: get all descendant nodes not including the current one</li>\n<li><code>subtree()</code>: same as descendants but starts with the current node</li>\n<li><code>depth()</code>: calculate the depth of the current node (root node is 0)</li>\n<li><code>path()</code>: gets the path to the current node</li>\n</ul><p>If you know the path to a group or layer within the tree, you can search by that path. Note that this always returns an Array because layer/group names do not have to be unique. The search is always scoped to the descendants of the current node, as well.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">psd</span>.<span class=\"pl-en\">tree</span>().<span class=\"pl-en\">childrenAtPath</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Version A/Matte<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">psd</span>.<span class=\"pl-en\">tree</span>().<span class=\"pl-en\">childrenAtPath</span>([<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Version A<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Matte<span class=\"pl-pds\">\'</span></span>]);</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/meltingice/psd.js#accessing-layer-data\"><span class=\"octicon octicon-link\"></span></a>Accessing Layer Data</h3>\n\n<p>To get data such as the name or dimensions of a layer:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>node <span class=\"pl-k\">=</span> <span class=\"pl-smi\">psd</span>.<span class=\"pl-en\">tree</span>().<span class=\"pl-en\">descendants</span>()[<span class=\"pl-c1\">0</span>];\n<span class=\"pl-smi\">node</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>name<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">node</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>width<span class=\"pl-pds\">\'</span></span>);</pre></div>\n\n<p>PSD files also store various pieces of information in \"layer info\" blocks. See <a href=\"https://github.com/meltingice/psd.js/blob/master/lib/psd/layer/info.coffee\">this file</a> for all of the possible layer info blocks that PSD.js parses (in <code>LAYER_INFO</code>). Which blocks a layer has varies from layer-to-layer, but to access them you can do:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>node <span class=\"pl-k\">=</span> <span class=\"pl-smi\">psd</span>.<span class=\"pl-en\">tree</span>().<span class=\"pl-en\">descendants</span>()[<span class=\"pl-c1\">0</span>]\n<span class=\"pl-smi\">node</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>typeTool<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">export</span>()\n<span class=\"pl-smi\">node</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>vectorMask<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">export</span>()</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/meltingice/psd.js#exporting-data\"><span class=\"octicon octicon-link\"></span></a>Exporting Data</h3>\n\n<p>When working with the tree structure, you can recursively export any node to an object. This does not dump <em>everything</em>, but it does include the most commonly accessed information.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">psd</span>.<span class=\"pl-en\">tree</span>().<span class=\"pl-en\">export</span>());</pre></div>\n\n<p>Which produces something like:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>{ children<span class=\"pl-k\">:</span> \n   [ { type<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>group<span class=\"pl-pds\">\'</span></span>,\n       visible<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>,\n       opacity<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n       blendingMode<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>normal<span class=\"pl-pds\">\'</span></span>,\n       name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Version D<span class=\"pl-pds\">\'</span></span>,\n       left<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n       right<span class=\"pl-k\">:</span> <span class=\"pl-c1\">900</span>,\n       top<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n       bottom<span class=\"pl-k\">:</span> <span class=\"pl-c1\">600</span>,\n       height<span class=\"pl-k\">:</span> <span class=\"pl-c1\">600</span>,\n       width<span class=\"pl-k\">:</span> <span class=\"pl-c1\">900</span>,\n       children<span class=\"pl-k\">:</span> \n        [ { type<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>layer<span class=\"pl-pds\">\'</span></span>,\n            visible<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n            opacity<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n            blendingMode<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>normal<span class=\"pl-pds\">\'</span></span>,\n            name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Make a change and save.<span class=\"pl-pds\">\'</span></span>,\n            left<span class=\"pl-k\">:</span> <span class=\"pl-c1\">275</span>,\n            right<span class=\"pl-k\">:</span> <span class=\"pl-c1\">636</span>,\n            top<span class=\"pl-k\">:</span> <span class=\"pl-c1\">435</span>,\n            bottom<span class=\"pl-k\">:</span> <span class=\"pl-c1\">466</span>,\n            height<span class=\"pl-k\">:</span> <span class=\"pl-c1\">31</span>,\n            width<span class=\"pl-k\">:</span> <span class=\"pl-c1\">361</span>,\n            mask<span class=\"pl-k\">:</span> {},\n            text<span class=\"pl-k\">:</span> \n             { value<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Make a change and save.<span class=\"pl-pds\">\'</span></span>,\n               font<span class=\"pl-k\">:</span> \n                { name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>HelveticaNeue-Light<span class=\"pl-pds\">\'</span></span>,\n                  sizes<span class=\"pl-k\">:</span> [ <span class=\"pl-c1\">33</span> ],\n                  colors<span class=\"pl-k\">:</span> [ [ <span class=\"pl-c1\">85</span>, <span class=\"pl-c1\">96</span>, <span class=\"pl-c1\">110</span>, <span class=\"pl-c1\">255</span> ] ],\n                  alignment<span class=\"pl-k\">:</span> [ <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>center<span class=\"pl-pds\">\'</span></span> ] },\n               left<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n               top<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n               right<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n               bottom<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n               transform<span class=\"pl-k\">:</span> { xx<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>, xy<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>, yx<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>, yy<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>, tx<span class=\"pl-k\">:</span> <span class=\"pl-c1\">456</span>, ty<span class=\"pl-k\">:</span> <span class=\"pl-c1\">459</span> } },\n            image<span class=\"pl-k\">:</span> {} } ] } ],\n    <span class=\"pl-c1\">document</span><span class=\"pl-k\">:</span> \n       { width<span class=\"pl-k\">:</span> <span class=\"pl-c1\">900</span>,\n         height<span class=\"pl-k\">:</span> <span class=\"pl-c1\">600</span>,\n         resources<span class=\"pl-k\">:</span> \n          { layerComps<span class=\"pl-k\">:</span> \n             [ { id<span class=\"pl-k\">:</span> <span class=\"pl-c1\">692243163</span>, name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Version A<span class=\"pl-pds\">\'</span></span>, capturedInfo<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span> },\n               { id<span class=\"pl-k\">:</span> <span class=\"pl-c1\">725235304</span>, name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Version B<span class=\"pl-pds\">\'</span></span>, capturedInfo<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span> },\n               { id<span class=\"pl-k\">:</span> <span class=\"pl-c1\">730932877</span>, name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Version C<span class=\"pl-pds\">\'</span></span>, capturedInfo<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span> } ],\n            guides<span class=\"pl-k\">:</span> [],\n            slices<span class=\"pl-k\">:</span> [] } } }</pre></div>\n\n<p>You can also export the PSD to a flattened image. Please note that, at this time, not all image modes + depths are supported.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>png <span class=\"pl-k\">=</span> <span class=\"pl-smi\">psd</span>.<span class=\"pl-smi\">image</span>.<span class=\"pl-en\">toPng</span>(); <span class=\"pl-c\">// get PNG object</span>\n<span class=\"pl-smi\">psd</span>.<span class=\"pl-smi\">image</span>.<span class=\"pl-en\">saveAsPng</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>path/to/output.png<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span> () {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Exported!<span class=\"pl-pds\">\'</span></span>);\n});</pre></div>\n\n<p>This uses the full rasterized preview provided by Photoshop. If the file was not saved with Compatibility Mode enabled, this will return an empty image.</p>\n',1),(226,'Offline Web Apps on GitHub Pages â˜… Mozilla Hacks â€“ the Web developer blog','https://hacks.mozilla.org/2015/11/offline-web-apps-on-github-pages/',0,0,'<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\">Service Workers</a> are a response to the <a href=\"http://alistapart.com/article/application-cache-is-a-douchebag\">problems of Application Cache</a>, and they’re a powerful and elegant way to offline your web app. But they’re also more complex to implement and maintain.</p>\n<p>Meanwhile, <a href=\"https://pages.github.com/\">GitHub Pages</a> is a great, simple static host for <a href=\"http://offlinefirst.org/\">offline-first apps</a>. But deploying apps to GitHub Pages requires manual configuration, especially if you develop with a team, utilize some variant of the <a href=\"https://guides.github.com/introduction/flow/\">GitHub Flow</a>, and want to set up continuous deployment.</p>\n<p><a href=\"https://github.com/mozilla/oghliner\">Oghliner</a> is an <a href=\"https://www.npmjs.com/\">npm</a> package that simplifies both offlining an app with Service Workers and deploying the app to GitHub Pages (including continuous deployment using <a href=\"https://travis-ci.org/\">Travis CI</a>). Oghliner’s goal is to make it as simple as possible to offline and deploy a web app.</p>\n\n<p>To start using Oghliner, install it globally:</p>\n<pre>&gt; npm install --global oghliner\r\n</pre>\n<p>If you have an existing app in a GitHub repository, invoke the <strong>integrate</strong> command to configure it. That command copies an offline-manager.js script (which registers the service worker) into your app and reminds you to load that script in your app’s page(s)/template(s) (one of the few steps that Oghliner doesn’t yet automate).</p>\n<pre>&gt; oghliner integrate\r\nIntegrating Oghliner into the app in the current directory…\r\n\r\n<span>✓</span> Copying offline-manager.js to ./… done!\r\n\r\nOghliner has been integrated into the app!\r\n\r\nThe app needs to load the script offline-manager.js in order to register\r\nthe service worker that offlines the app. To load the script, add this line to \r\nthe app\'s HTML page(s)/template(s):\r\n\r\n<span>&lt;script src=\"offline-manager.js\"&gt;&lt;/script&gt;</span>\r\n\r\nAnd commit the changes and push the commit to the origin/master branch:\r\n\r\n<span>git commit -m\"integrate Oghliner\" --all\r\ngit push origin master</span>\r\n\r\nThen you can offline and deploy the app using the offline and deploy commands.\r\n\r\n<span>ℹ For more information about offlining and deployment, see:\r\n    https://mozilla.github.io/oghliner/</span>\r\n</pre>\n<p>If you don’t yet have an existing app, start a new app by <a href=\"https://github.com/new\">creating a new repository</a> on GitHub, cloning it to your local machine, and invoking the <strong>bootstrap</strong> command from its working directory.</p>\n<pre>&gt; git clone git@github.com:mykmelez/offline-app.git\r\nCloning into \'offline-app\'...\r\n…\r\n&gt; cd offline-app/\r\n&gt; oghliner bootstrap\r\nBootstrapping current directory as Oghliner app…\r\n\r\nYour app\'s configuration is:\r\n\r\nName: offline-app\r\nRepository: git@github.com:mykmelez/offline-app.git\r\nDescription: A template app bootstrapped with oghliner.\r\nLicense: Apache-2.0\r\n\r\nWould you like to change its configuration (y/N)? \r\n\r\nCreating files…\r\n<span>✓</span> Creating README.md\r\n<span>✓</span> Creating .gitignore\r\n<span>✓</span> Creating gulpfile.js\r\n<span>✓</span> Creating package.json\r\n<span>✓</span> Creating app/favicon.ico\r\n<span>✓</span> Creating app/fonts\r\n<span>✓</span> Creating app/index.html\r\n<span>✓</span> Creating app/robots.txt\r\n<span>✓</span> Creating app/images/apple-touch-icon-114x114.png\r\n<span>✓</span> Creating app/images/apple-touch-icon-120x120.png\r\n<span>✓</span> Creating app/images/apple-touch-icon-144x144.png\r\n<span>✓</span> Creating app/images/apple-touch-icon-152x152.png\r\n<span>✓</span> Creating app/images/apple-touch-icon-57x57.png\r\n<span>✓</span> Creating app/images/apple-touch-icon-60x60.png\r\n<span>✓</span> Creating app/images/apple-touch-icon-72x72.png\r\n<span>✓</span> Creating app/images/apple-touch-icon-76x76.png\r\n<span>✓</span> Creating app/images/favicon-128x128.png\r\n<span>✓</span> Creating app/images/favicon-16x16.png\r\n<span>✓</span> Creating app/images/favicon-196x196.png\r\n<span>✓</span> Creating app/images/favicon-32x32.png\r\n<span>✓</span> Creating app/images/favicon-96x96.png\r\n<span>✓</span> Creating app/images/mstile-144x144.png\r\n<span>✓</span> Creating app/images/mstile-150x150.png\r\n<span>✓</span> Creating app/images/mstile-310x150.png\r\n<span>✓</span> Creating app/images/mstile-310x310.png\r\n<span>✓</span> Creating app/images/mstile-70x70.png\r\n<span>✓</span> Creating app/scripts/main.js\r\n<span>✓</span> Creating app/scripts/offline-manager.js\r\n<span>✓</span> Creating app/styles/stylesheet.css\r\n\r\n<span>✓</span> Creating files… done!\r\n<span>✓</span> Installing npm dependencies… done!\r\n\r\nYour app has been bootstrapped! Just commit the changes and push the commit\r\nto the origin/master branch:\r\n\r\n<span>git add --all &amp;&amp; git commit -m\"initial version of Oghliner app\"\r\ngit push origin master</span>\r\n\r\nThen you can build, offline, and deploy the app using gulp commands.\r\n\r\n<span>ℹ For more information about building, offlining and deployment, see:\r\n    https://mozilla.github.io/oghliner/</span>\r\n</pre>\n<p>Finally, commit the changes to complete the configuration.</p>\n<pre>&gt; git add --all &amp;&amp; git commit -m\"initial version of Oghliner app\"\r\n</pre>\n<p>Now that your app is configured, you can build, offline, and deploy it. Bootstrapped apps include a gulpfile.js build script. To build them, install Gulp globally:</p>\n<pre>&gt; npm install --global gulp\r\n</pre>\n<p>Then simply invoke gulp:</p>\n<pre>&gt; gulp\r\n</pre>\n<p>To offline your app, invoke the <strong>offline</strong> command to generate the service worker that offlines your app, specifying the directory containing the files to offline.</p>\n<pre>&gt; oghliner offline dist/\r\nOfflining dist/ to dist/offline-worker.js…\r\n\r\n<span>✓</span> Caching \"dist/favicon.ico\" (384 B)\r\n<span>✓</span> Caching \"dist/images/apple-touch-icon-114x114.png\" (278 B)\r\n<span>✓</span> Caching \"dist/images/apple-touch-icon-120x120.png\" (285 B)\r\n<span>✓</span> Caching \"dist/images/apple-touch-icon-144x144.png\" (321 B)\r\n<span>✓</span> Caching \"dist/images/apple-touch-icon-152x152.png\" (320 B)\r\n<span>✓</span> Caching \"dist/images/apple-touch-icon-57x57.png\" (242 B)\r\n<span>✓</span> Caching \"dist/images/apple-touch-icon-60x60.png\" (242 B)\r\n<span>✓</span> Caching \"dist/images/apple-touch-icon-72x72.png\" (247 B)\r\n<span>✓</span> Caching \"dist/images/apple-touch-icon-76x76.png\" (247 B)\r\n<span>✓</span> Caching \"dist/images/favicon-128x128.png\" (298 B)\r\n<span>✓</span> Caching \"dist/images/favicon-16x16.png\" (216 B)\r\n<span>✓</span> Caching \"dist/images/favicon-196x196.png\" (380 B)\r\n<span>✓</span> Caching \"dist/images/favicon-32x32.png\" (232 B)\r\n<span>✓</span> Caching \"dist/images/favicon-96x96.png\" (269 B)\r\n<span>✓</span> Caching \"dist/images/mstile-144x144.png\" (323 B)\r\n<span>✓</span> Caching \"dist/images/mstile-150x150.png\" (316 B)\r\n<span>✓</span> Caching \"dist/images/mstile-310x150.png\" (411 B)\r\n<span>✓</span> Caching \"dist/images/mstile-310x310.png\" (610 B)\r\n<span>✓</span> Caching \"dist/images/mstile-70x70.png\" (246 B)\r\n<span>✓</span> Caching \"dist/index.html\" (3.08 kB)\r\n<span>✓</span> Caching \"dist/robots.txt\" (102 B)\r\n<span>✓</span> Caching \"dist/scripts/main.js\" (151 B)\r\n<span>✓</span> Caching \"dist/scripts/offline-manager.js\" (1.1 kB)\r\n<span>✓</span> Caching \"dist/styles/stylesheet.css\" (107 B)\r\nTotal precache size is about 10.41 kB for 24 resources.\r\n</pre>\n<p>To deploy the app (including the service worker) to GitHub Pages, invoke the <strong>deploy</strong> command, again specifying the directory containing your app’s files.</p>\n<pre>&gt; oghliner deploy dist/\r\nDeploying \"initial version of Oghliner app\" to GitHub Pages…\r\n\r\n<span>✓</span> Cloning git@github.com:mykmelez/offline-app.git into .gh-pages-cache… done!\r\n<span>✓</span> Cleaning… done!\r\n<span>✓</span> Fetching origin… done!\r\n<span>✓</span> Checking out origin/gh-pages… done!\r\n<span>✓</span> Removing files… done!\r\n<span>✓</span> Copying files… done!\r\n<span>✓</span> Adding all… done!\r\n<span>✓</span> Committing… done!\r\n<span>✓</span> Pushing… done!\r\n</pre>\n<p>All Oghliner commands are also available via a module interface, so you can integrate them into your Node-based build scripts using tools like Grunt and Gulp. If you bootstrapped your app using Oghliner, its gulpfile.js already has <strong>offline</strong> and <strong>deploy</strong> tasks (which you can also use as an alternative to the previous commands).</p>\n<p>Finally, invoke the <strong>configure</strong> command to configure an app to automatically deploy to GitHub Pages using Travis CI whenever you merge a change into your app’s master branch (provided the build completes successfully and tests pass, of course!).</p>\n<pre>&gt; oghliner configure\r\n\r\nConfiguring Travis to auto-deploy to GitHub Pages…\r\n\r\nYour repository has a single remote, origin.\r\nOk, I\'ll configure Travis to auto-deploy the origin remote (mykmelez/offline-app).\r\n\r\nTo check the status of your repository in Travis and authorize Travis to push\r\nto it, I\'ll create GitHub personal access tokens, for which I need your GitHub\r\nusername and password (and two-factor authentication code, if appropriate).\r\n\r\n<span>ℹ For more information about GitHub personal access tokens, see:\r\n    https://github.com/settings/tokens</span>\r\n\r\nUsername: mykmelez\r\nPassword: \r\n\r\n<span>×</span> Checking credentials… error!\r\n\r\nYou\'re using two-factor authentication with GitHub.\r\nPlease enter the code provided by your authentication software.\r\n\r\nAuth Code: 123456\r\n\r\n<span>✓</span> Checking credentials… done!\r\n<span>✓</span> Creating temporary GitHub token for getting Travis token… done!\r\n<span>✓</span> Getting Travis token… done!\r\n<span>✓</span> Deleting temporary GitHub token for getting Travis token… done!\r\n  Creating permanent GitHub token for Travis to push to the repository…\r\n<span>✓</span> Creating permanent GitHub token for Travis to push to the repository… done!\r\n\r\n<span>ℹ You had an existing token for this app, so we deleted and recreated it.</span>\r\n\r\n<span>✓</span> Checking the status of your repository in Travis… done!\r\n\r\nGood news, your repository is active in Travis!\r\n\r\n<span>✓</span> Encrypting permanent GitHub token… done!\r\n<span>✓</span> Writing configuration to .travis.yml file… done!\r\n\r\n<span>⚠ You didn\'t already have a .travis.yml file, so I created one for you.\r\n  For more information about the file, see:\r\n    http://docs.travis-ci.com/user/customizing-the-build/</span>\r\n\r\nYou\'re ready to auto-deploy using Travis!  Just commit the changes\r\nin .travis.yml and push the commit to the origin/master branch:\r\n\r\n<span>git add .travis.yml\r\ngit commit -m\"configure Travis to auto-deploy to GitHub Pages\" .travis.yml\r\ngit push origin master</span>\r\n\r\nThen visit https://travis-ci.org/mykmelez/offline-app/builds to see the build status.\r\n</pre>\n<p>Travis will then deploy successful builds (on the master branch):</p>\n<p><a href=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/Screen-Shot-2015-11-16-at-16.34.53.png\"><img class=\"alignnone wp-image-29503 size-large\" src=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/11/Screen-Shot-2015-11-16-at-16.34.53-500x110.png\" alt=\"Travis auto-deploys to GitHub Pages\" width=\"500\" height=\"110\" /></a></p>\n<p>A few caveats to note:</p>\n<ul><li>Deployments sometimes take a few minutes to show up on GitHub Pages.</li>\n<li>Service Workers require that you load the app over an encrypted (HTTPS) connection. All GitHub Pages can be loaded over such a connection, even though GitHub does not officially support it.</li>\n<li>Service Workers are available in Chrome, Opera, and the Developer Edition of Firefox. They’ll ship in Firefox 44.</li>\n</ul><p>Mozilla’s <a href=\"https://wiki.mozilla.org/Apps#Web_App_Developer_Initiative\">Web App Developer Initiative</a> engineering team built Oghliner because we think Service Workers are a great way to offline web apps, and GitHub Pages are a great way to deploy them, so we wanted to see how much better the combination could be.</p>\n<p>We’ve used Oghliner in our own projects, like <a href=\"https://mykmelez.github.io/offline-web-apps-on-github-pages/\">this presentation</a> and <a href=\"https://github.com/mozilla/platatus\">Platatus</a>, and we hope you find it delightful. So <a href=\"https://www.npmjs.com/package/oghliner\">learn more about it</a>, try it out, and let us know how it works for you!</p>    <p>Myk is a Principal Software Architect and in-house entrepreneur at Mozilla, where he nurtures nascent initiatives and bridges the gap between promising experiments and shipping products. He\'s been a Mozillian since 1999 and has contributed to PluotSorbet, Open Web Apps, Firefox OS Simulator, Jetpack, Raindrop, Snowl, Personas, Firefox, Thunderbird, and Bugzilla. He\'s just a cook. He\'s all out of bubblegum.</p>\n                    <p><a class=\"url\" href=\"https://hacks.mozilla.org/author/mykmozilla-com/\">More articles by Myk Melez…</a></p>\n                  <p><a class=\"url\" href=\"https://hacks.mozilla.org/author/mcastellucciomozilla-com/\">More articles by Marco Castelluccio…</a></p>\n                  ',1),(227,'Scholarly HTML â€” Markedly Smart','http://scholarly.vernacular.io/',0,0,'<div><h2>Motivation</h2>\n        <p>\n            <strong>New</strong>: you can now join the\n            <a href=\"https://www.w3.org/community/scholarlyhtml/\">Scholarly HTML Community Group</a>\n            to help make this a standard.\n          </p>\n          <p>\n            This document is an early-stage release. While the underlying format is relatively\n            mature and actually implemented, details are still in flux and the format can still be\n            changed. The quality of this document is also being gradually improved. If you’re\n            interested in this project, come join\n            <a href=\"https://github.com/scienceai/scholarly.vernacular.io/\">the party on GitHub</a>\n            or talk to either <a href=\"https://twitter.com/sciencedotai\">@sciencedotai</a> or\n            <a href=\"https://twitter.com/robinberjon\">@robinberjon</a> in Twitter.\n          </p>\n        <p>\n          Scholarly articles are still primarily encoded as unstructured graphics formats in which\n          most of the information initially created by research, or even just in the text, is lost.\n          This was an acceptable, if deplorable, condition when viable alternatives did not seem\n          possible, but document technology has today reached a level of maturity and universality\n          that makes this situation no longer tenable. Information cannot be disseminated if it is\n          destroyed before even having left its creator’s laptop.\n        </p>\n        <p>\n          According to the New York Times, adding structured information to their recipes (instead\n          of exposing simply as plain text) improved their discoverability to the point of producing\n          an immediate rise of 52 percent in traffic (<a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#ref-nyt\">NYT, 2014</a>). At this point in time, cupcake recipes are\n          reaping greater benefits from modern data format practices than the whole scientific\n          endeavour.\n        </p>\n        <p>\n          This is not solely a loss for the high principles of knowledge sharing in science, it also\n          has very immediate pragmatic consequences. Any tool, any service that tries to integrate\n          with scholarly publishing has to spend the brunt of its complexity (or budget) extracting\n          data the author would have willingly shared out of antiquated formats. This places\n          stringent limits on the improvement of the scholarly toolbox, on the discoverability of\n          scientific knowledge, and particularly on processes of meta-analysis.\n        </p>\n        <p>\n          To address these issues, we have followed an approach rooted in established best practices\n          for the reuse of open, standard formats. The «HTML Vernacular» body of practice provides\n          guidelines for the creation of domain-specific data formats that make use of HTML’s\n          inherent extensibility (<a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#ref-vernacular\">Science.AI,\n          2015b</a>). Using the vernacular foundation overlaid with «schema.org» metadata we have\n          produced a format for the interchange of scholarly articles built on open standards, ready\n          for all to use.\n        </p>\n        <p>\n          Our high-level goals were:\n        </p>\n        <ul><li>\n            Uncompromisingly enabling structured metadata, accessibility, and internationalisation.\n          </li>\n          <li>\n            Pragmatically working in Web browsers, even if it occasionally incurs some markup\n            overhead.\n          </li>\n          <li>\n            Powerfully customisable for inclusion in arbitrary Web sites, while remaining easy to\n            process and interoperable.\n          </li>\n          <li>\n            Entirely built on top of open, royalty-free standards.\n          </li>\n          <li>\n            Long-term viability as a data format.\n          </li>\n        </ul><p>\n          Additionally, in view of the specific problem we addressed, in the creation of this\n          vernacular we have favoured the reliability of interchange over ease of authoring; but\n          have nevertheless attempted to cater to the latter as much as possible. A decent\n          boilerplate template file can certainly make authoring relatively simple, but not as\n          radically simple as it can be. For such use cases, Scholarly HTML provides a great output\n          target and overview of the data model required to support scholarly publishing at the\n          document level.\n        </p>\n        <p>\n          An example of an authoring format that was designed to target Scholarly HTML as an\n          output is the <a href=\"http://scienceai.github.io/docx-standard-scientific-style\">DOCX\n          Standard Scientific Style</a> which enables authors who are comfortable with Microsoft\n          Word to author documents that have a direct upgrade path to semantic, standard content.\n        </p>\n        <p>\n          Where semantic modelling is concerned, our approach is to stick as much as possible to\n          <a href=\"http://schema.org/\">schema.org</a>. Beyond the obvious advantages there are in\n          reusing a vocabulary that is supported by all the major search engines and is actively\n          being developed towards enabling a shared understanding of many useful concepts, it also\n          provides a protection against «<em>ontological drift</em>» whereby a new vocabulary is\n          defined by a small group with insufficient input from a broader community of practice.\n          A language that solely a single participant understands is of limited value.\n        </p>\n        <p>\n          In a small, circumscribed number of cases we have had to depart from\n          <a href=\"http://schema.org\">schema.org</a>, using the <code>https://ns.science.ai/</code>\n          (prefixed with <code>sa:</code>) vocabulary instead\n          (<a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#ref-sa-ontology\">Science.AI, 2015a</a>). Our goal is\n          to work with <a href=\"http://schema.org\">schema.org</a> in order to extend their\n          vocabulary, and we will align our usage with the outcome of these discussions.\n        </p>\n      </div><div><h2>Definition</h2>\n        <p>\n          A <dfn>Scholarly HTML document</dfn> is a valid HTML document that\n          follows some additional rules to specialised its meaning and make it predictable to\n          processors wishing to produce or consume scholarly articles. These rules are outlined in\n          the following sections.\n        </p>\n        <p>\n          Please note that in its current state this specification is often informal in the manner\n          in which it describes its constraints. This is to facilitate review by people unfamiliar\n          with formal specification writing. As the format solidifies, it will be made more formal\n          progressively (but attempt to remain readable).\n        </p>\n        <h3>Article Structure</h3>\n          <p>\n            The article content is everything that is contained inside the first\n            <code>article</code> element in document order that has a\n            <code>typeof=\"schema:ScholarlyArticle\"</code>. Everything part of the <code>body</code>\n            outside of that subtree is ignored. This enables publishers to surround the article\n            content with any amount of supporting markup, for instance for headers, footers,\n            or navigation, as well as to wrap the article inside arbitrary markup that may be\n            needed for stylistic reasons.\n          </p>\n          <p>\n            The <code>article</code> element should have\n            a <code>resource</code> attribute, usually with a value\n            of <code>#</code>. The reason for that is to grant it a\n            URL that can be targeted by other properties. The\n            <code>resource</code> attribute can take any value, but it\n            must then be matched by the\n            <code>about</code> attributes of the properties targeting\n            it. If <code>resource</code> is omitted, the only way in\n            which those properties can target it is by knowing the URL\n            from which the document was retrieved.\n          </p>\n          <p>\n            The first element child of the <code>article</code> element must be an <code>h1</code>\n            heading that serves as the primary title for the document. It may itself contain markup.\n            The white-space-normalised text value of the <code>h1</code> must appear as a substring\n            of the white-space-normalised text value of the <code>title</code> element. This ensures\n            semantic alignment between the two, while enabling publishers to add their name to the\n            <code>title</code> so as to identify themselves there alongside the content.\n          </p>\n          <p>\n            Any children of <code>article</code> that are not <code>section</code> elements are\n            ignored.\n          </p>\n          <p>\n            The first <code>section</code> child element of the <code>article</code> must be the\n            <a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#authors\">Authors and Affiliations</a> section. It has no <code>typeof</code>\n            and its specific rules are outlined in its own chapter below.\n          </p>\n          <p>\n            The <code>section</code> elements can be nested arbitrarily deep. Each\n            <code>section</code> element must have as its first element child an <code>hX</code>\n            heading element the numeric part of which must be the number of <code>section</code>\n            ancestor elements that heading elements has up to the <code>article</code> element, plus\n            one. If the numeric part is greater than 6, then <code>h6</code> must be used but an\n            <code>aria-level</code> attribute must be added that reflects the accurate depth.\n            (The <code>aria-level</code> attribute can be used at lower depths but is not required\n            there.)\n          </p>\n          <p>\n            Each <code>section</code> element may contain an arbitrary number of\n            <a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#hunk-elements\">hunk elements</a>, followed by an arbitrary number of\n            <code>section</code> elements being subsections. Note that\n            <a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#hunk-elements\">hunk elements</a> must imperatively appear <em>before</em> the\n            subsections.\n          </p>\n          <p>\n            Sections are expected to be typed using the <code>typeof</code> attribute. The following\n            <code>typeof</code> values are currently understood:\n          </p>\n          <ul><li><code>sa:Funding</code> (which has its <a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#funding\">specific structure</a>)</li>\n            <li><code>sa:Abstract</code></li>\n            <li><code>sa:MaterialsAndMethods</code></li>\n            <li><code>sa:Results</code></li>\n            <li><code>sa:Conclusion</code></li>\n            <li><code>sa:Acknowledgements</code></li>\n            <li><code>sa:ReferenceList</code></li>\n          </ul><p>\n            Hopefully these types are largely self-documenting, they are described further in the\n            Scholarly Article ontology\n            (<a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#ref-sa-ontology\">Science.AI, 2015a</a>).\n          </p>\n          <p>\n            The section typed <code>sa:ReferenceList</code> has special processing rules described\n            in the <a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#references-section\">References section</a>.\n          </p>\n        <h3>Hunk Elements</h3>\n          <p>\n            <dfn>Hunk elements</dfn> are the meaningful blocks from which sections are built. They\n            contain text and <a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#inline-element\">inline elements</a>. There are several\n            types of hunk elements.\n          </p>\n          <p>\n            The most common hunk element is <code>p</code>, which is used to capture paragraphs. It\n            requires no special processing.\n          </p>\n          <p>\n            The <code>blockquote</code>, <code>ul</code>, <code>ol</code>, and <code>dl</code>\n            elements can be used as they typically would and require no special treatment.\n          </p>\n          <p>\n            The <code>aside</code> hunk element is used to capture text boxes. If it contains an\n            <code>hX</code> heading element, that element must be its first element child and its\n            numeric part must reflect its depth, making use of <code>aria-level</code> according to\n            the same rules as apply for <code>section</code>. The other children of\n            <code>aside</code> must all be hunk elements.\n          </p>\n          <p>\n            The <code>figure</code> element is a general container for content units that are\n            embedded inside the main body of the text. It can come in several flavours that are\n            dictated by its <code>typeof</code> attribute.\n          </p>\n          <p>\n            If <code>figure</code> has <code>typeof=\"sa:Image\"</code> then it is an image container.\n            It must contain an <code>img</code> child element and should contain a\n            <code>figcaption</code> labelling that image. An example of an image figure would be:\n          </p>\n          <img src=\"http://scholarly.vernacular.io/hop-less.png\" width=\"880\" height=\"655\" alt=\"hop-less.png\" />\n              Reconstruction of Sthenurus stirlingi, by Brian Regal; in\n              «<cite><a href=\"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0109888\">Locomotion\n              in Extinct Giant Kangaroos: Were Sthenurines Hop-Less Monsters?</a></cite>», by\n              Christine M. Janis, Karalyn Buttrill, Borja Figueirido.\n            <p>\n            If <code>figure</code> has <code>typeof=\"sa:Table\"</code> then it is a table container.\n            It must contain nothing other than a <code>table</code> element. If a caption is\n            available, it should be included using the <code>caption</code> child element of the\n            <code>table</code>, and not the <code>figcaption</code> child of the\n            <code>figure</code>.\n          </p>\n          <p>\n            If <code>figure</code> has <code>typeof=\"sa:Formula\"</code> then it is a formula\n            container. It must contain a <code>math</code> element and optionally a\n            <code>figcaption</code> describing the formula. The <code>math</code> element must be\n            valid MathML 3. Additionally, given the dismal state of support for MathML in Web\n            browser the <code>math</code> element must contain an <code>annotation</code>\n            descendant with the TeX equivalent of the formula.\n          </p>\n          <p>\n            If <code>figure</code> has <code>typeof=\"schema:SoftwareSourceCode\"</code>\n            then it is a code container. It must contain a <code>pre</code> element\n            and optionally a <code>figcaption</code>. The <code>pre</code> element must contain as\n            its only child a <code>code</code> element.\n          </p>\n          <p>\n            If you wish to specify the type of the language used in the code, the\n            <code>figure</code> needs to have a <code>schema:programmingLanguage</code> property\n            containing a type <code>schema:Language</code>, itself with a <code>schema:name</code>\n            containing the the lowercase name of one of the languages from the\n            <a href=\"https://github.com/scienceai/list-of-programming-languages/blob/master/data/data.jsonld\">list\n            of programming languages</a>. Canonically, this would look like the following source:\n          </p>\n          <pre><code class=\"language-html\">\n&lt;figure typeof=\"schema:SoftwareSourceCode\"&gt;\n  &lt;pre property=\"schema:programmingLanguage\" typeof=\"schema:Language\"&gt;\n    &lt;meta property=\"schema:name\" content=\"python\"&gt;\n    &lt;code&gt;import foo&lt;/code&gt;\n  &lt;/pre&gt;\n  &lt;figcaption&gt;\n    How to import foo.\n  &lt;/figcaption&gt;\n&lt;/figure&gt;\n            </code></pre>\n            \n              An example of HTML capturing some complex Python code\n            <h3>Inline Elements</h3>\n          <p>\n            <dfn>Inline elements</dfn> essentially decorate, describe, and enrich text. Inside of\n            <a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#hunk-elements\">hunk elements</a>, of heading elements, and of captioning\n            elements (<code>caption</code> and <code>figcaption</code>) the following inline\n            elements can be used (and where applicable they can nest within one another):\n          </p>\n          <ul><li><code>a</code></li>\n            <li><code>abbr</code></li>\n            <li><code>bdi</code></li>\n            <li><code>bdo</code></li>\n            <li><code>cite</code></li>\n            <li><code>code</code></li>\n            <li><code>data</code></li>\n            <li><code>del</code></li>\n            <li><code>dfn</code></li>\n            <li><code>em</code></li>\n            <li><code>img</code> (for small, contextual images that should not be figures)</li>\n            <li><code>ins</code></li>\n            <li><code>kbd</code></li>\n            <li><code>mark</code></li>\n            <li><code>math</code> (for inline equations that should not be figures; they must also\n                contain a TeX annotation)</li>\n            <li><code>meter</code></li>\n            <li><code>q</code></li>\n            <li><code>ruby</code> (with embedded <code>rb</code>, <code>rt</code>, <code>rtc</code>,\n                and <code>rp</code>)</li>\n            <li><code>samp</code></li>\n            <li><code>span</code></li>\n            <li><code>strong</code></li>\n            <li><code>sub</code></li>\n            <li><code>sup</code></li>\n            <li><code>svg</code> (for small, contextual images that should not be figures)</li>\n            <li><code>time</code></li>\n            <li><code>var</code></li>\n            <li><code>wbr</code></li>\n          </ul><p>\n            If an <code>a</code> element is linking to a citation, then it must have\n            <code>property=\"schema:citation\"</code>; if it is linking\n            to a figure or another creative work, it must\n            have <code>property=\"schema:hasPart\"</code>\n            or <code>property=\"schema:isBasedOnUrl\"</code>. These are\n            known as <dfn>flavoured links</dfn>, they can be used to\n            enhance the user experience by treating their behaviour\n            differently from regular links.\n          </p>\n        <h3>The References Section</h3>\n          <p>\n            The references section is a special type of <code>section</code> element with\n            <code>typeof=\"sa:ReferenceList\"</code>.\n          </p>\n          <p>\n            Apart from its heading element, it must contain nothing other than an <code>ol</code>\n            or a <code>dl</code> element.\n          </p>\n          <p>\n            If using a <code>dl</code> element, its content must be exclusively a strictly\n            alternating sequence of <code>dt</code> then <code>dd</code> elements, with the latter\n            being the citation-bearing element. The <code>dt</code> is used as a label in some\n            citation formats.\n          </p>\n          <p>\n            If using an <code>ol</code>, then its content is only <code>li</code> elements that are\n            the citation-bearing elements.\n          </p>\n          <p>\n            The citation-bearing element will have an <code>id</code> and be\n            <code>schema:Book</code> for books or\n            <code>typeof=\"schema:ScholarlyArticle\"</code> (or its subclass\n            <code>schema:MedicalScholarlyArticle</code>, with probably more to come). Its\n            content follows the «flexcite» format (being defined as part of this document, see\n            <a href=\"https://github.com/scienceai/scholarly.vernacular.io/issues/4\">#4</a>). The\n            references section of this document is an example.\n          </p>\n\n          <pre><code class=\"language-html\">\n&lt;li id=\"ref-something\" typeof=\"schema:ScholarlyArticle\"\n       resource=\"http://dx.doi.org/10.1000/182\"&gt;\n  &lt;span property=\"schema:author\" typeof=\"schema:Person\"&gt;\n    &lt;span property=\"schema:familyName\"&gt;Jones&lt;/span&gt;\n    &lt;span property=\"schema:givenName\"&gt;K&lt;/span&gt;&lt;span\n             property=\"schema:additionalName\"&gt;E&lt;/span&gt;\n  &lt;/span&gt;,\n  &lt;span property=\"schema:author\" typeof=\"schema:Person\"&gt;\n    &lt;span property=\"schema:familyName\"&gt;Patel&lt;/span&gt;\n    &lt;span property=\"schema:givenName\"&gt;N&lt;/span&gt;\n  &lt;/span&gt;.\n  &lt;cite property=\"schema:name\"&gt;Global trends in emerging infectious diseases.&lt;/cite&gt;\n  &lt;span property=\"schema:isPartOf\" typeof=\"schema:PublicationVolume\"&gt;\n    &lt;span property=\"schema:isPartOf\" typeof=\"schema:Periodical\"&gt;\n      &lt;span property=\"schema:name\"&gt;Nature.&lt;/span&gt;\n    &lt;/span&gt;\n    &lt;time about=\"http://dx.doi.org/10.1000/182\" property=\"schema:datePublished\"\n             datetime=\"2008-01\" datatype=\"xsd:gYearMonth\"&gt;2008 Jan&lt;/time&gt;;\n    &lt;span property=\"schema:volumeNumber\"&gt;451&lt;/span&gt;\n  &lt;/span&gt;:&lt;span property=\"schema:pageStart\"&gt;990&lt;/span&gt;-&lt;span\n                      property=\"schema:pageEnd\"&gt;4&lt;/span&gt;\n&lt;/li&gt;\n            </code></pre>\n            \n              A citation (not yet in Flexcite format).\n            <p>\n            At the semantics level, a citation is a <code>schema:ScholarlyArticle</code> (or subtype)\n            with an <code>id</code> to reference it internally in the document and a\n            <code>resource</code> that is a URL identifying it (its DOI for instance, preferable in\n            HTTP-retrievable form).\n          </p>\n          <p>\n            That <code>schema:ScholarlyArticle</code> has any number of <code>schema:author</code>\n            which are <code>schema:Person</code> (with the usual <code>schema:givenName</code>,\n            <code>schema:familyName</code>, etc.). A child <code>cite</code> element, with\n            <code>property=\"schema:name\"</code> (and optionally a link child) provides the title\n            of the article.\n          </p>\n          <p>\n            The publisher is described using a nested <code>schema:isPartOf</code> structure of\n            <code>schema:PublicationIssue</code>, <code>schema:PublicationVolume</code>,\n            and <code>schema:Periodical</code> (with only those that are known being used). Both\n            <code>schema:volumeNumber</code> and <code>schema:issueNumber</code> may be used on the\n            volume and issue.\n          </p>\n          <p>\n            A <code>time</code> element with <code>property=\"schema:datePublished\"</code> provides\n            the publication date, which is expressed in text in human-readable form and in the\n            <code>datetime</code> attribute in standard form. A <code>datatype</code> attribute\n            matching the date format must be provided.\n          </p>\n          <p>\n            Both <code>schema:pageStart</code> and <code>schema:pageEnd</code> may be provided.\n          </p>\n          <p>\n            Beyond the semantics, a more specific serialisation known a «Flexcite» is in the works\n            and will be added here soon. Its properties are simple: when unstyled it reads linearly\n            in a human-friendly manner (so as to be accessible), and it can be styled with CSS to be\n            turned into arbitrary citation style preferences.\n          </p>\n        <h3>The Authors &amp; Affiliations Section</h3>\n          <p>\n            Capturing authors, the affiliations and their relationship to the article is the most\n            intricate part of Scholarly HTML. Care was taken to avoid repetition and to keep the\n            markup density as reasonable as possible, but the data to content ratio remains\n            relatively high.\n          </p>\n          <p>\n            It is probably best to start from an example and then to explain it:\n          </p>\n\n          <pre><code class=\"language-html\">\n&lt;!-- The author and contributor list --&gt;\n&lt;article resource=\"#\"&gt;\n  …\n  &lt;section&gt;\n    &lt;ol&gt;\n      &lt;!-- The first author, Robin Berjon --&gt;\n      &lt;li property=\"schema:author\" typeof=\"sa:ContributorRole\"&gt;\n        &lt;a property=\"schema:author\" href=\"http://berjon.com/\" typeof=\"schema:Person\"&gt;\n          &lt;span property=\"schema:givenName\"&gt;Robin&lt;/span&gt;\n          &lt;span property=\"schema:familyName\"&gt;Berjon&lt;/span&gt;\n        &lt;/a&gt;\n        &lt;a href=\"#scienceai\" property=\"sa:roleAffiliation\" resource=\"http://science.ai/\"&gt;a&lt;/a&gt;\n        &lt;sup property=\"sa:roleContactPoint\" typeof=\"schema:ContactPoint\"&gt;\n          &lt;a property=\"schema:email\" href=\"mailto:robin@berjon.com\" title=\"corresponding author\"&gt;✉&lt;/a&gt;\n        &lt;/sup&gt;\n      &lt;/li&gt;\n      &lt;!-- A contributor, Sebastien Ballesteros --&gt;\n      &lt;li property=\"schema:contributor\" typeof=\"sa:ContributorRole\"&gt;\n        &lt;a property=\"schema:contributor\" href=\"https://github.com/sballesteros\" typeof=\"schema:Person\"&gt;\n          &lt;span property=\"schema:givenName\"&gt;Sebastien&lt;/span&gt;\n          &lt;span property=\"schema:familyName\"&gt;Ballesteros&lt;/span&gt;\n        &lt;/a&gt;\n        &lt;a href=\"#scienceai\" property=\"sa:roleAffiliation\" resource=\"http://science.ai/\"&gt;a&lt;/a&gt;\n      &lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;!-- The affiliation list --&gt;\n    &lt;ol&gt;\n      &lt;li id=\"scienceai\"&gt;\n        &lt;a href=\"http://science.ai/\" typeof=\"schema:Corporation\"&gt;\n          &lt;span property=\"schema:name\"&gt;science.ai&lt;/span&gt;\n        &lt;/a&gt;\n      &lt;/li&gt;\n    &lt;/ol&gt;\n  &lt;/section&gt;\n  …\n&lt;/article&gt;\n            </code></pre>\n            \n              The authors and affiliations section for this document.\n            <p>\n            The markup is relatively convoluted, but the data model is rich:\n          </p>\n          <img src=\"http://scholarly.vernacular.io/affiliations.png\" width=\"976\" height=\"452\" alt=\"affiliations.png\" />\n              The data model that matches the code\n            <p>\n            This <code>section</code> has no <code>typeof</code> and\n            no heading element. It contains a first <code>ol</code>\n            which lists authors, and optionally a\n            second <code>ol</code> to list affiliations.\n          </p>\n          <p>\n            Each <code>li</code> in the authors <code>ol</code> has\n            <code>property=\"schema:author\"</code> or <code>property=\"schema:contributor\"</code> and a\n            <code>typeof=\"sa:ContributorRole\"</code>.\n          </p>\n          <p>\n            A <code>sa:ContributorRole</code> type (following the\n            semantic of\n            schema.org <a href=\"http://schema.org/Role\">Role</a>) is\n            used so that affiliations or contact informations (email\n            address, etc.) relevant to this specific scholarly article\n            (and this specific scholarly article only) can be\n            specified. This is important as authors may have different\n            affiliations and contact points at the time they are\n            publishing a scholarly article but may want to specify\n            only a subset of those. Readers not familiar with the\n            semantic of schema.org Role can consult\n            the <a href=\"http://blog.schema.org/2014/06/introducing-role.html\">introductory\n            blog post</a>.\n          </p>\n          <p>\n            Inside of that <code>li</code>, arbitrary properties\n            of <code>schema:Person</code>, filling\n            the <code>schema:author</code> property of\n            the <code>sa:ContributorRole</code> can be specified, but\n            providing at least <code>schema:givenName</code> and\n            <code>schema:familyName</code>. It is recommended that\n            these properties are wrapped into an hyperlink\n            identifying the person with a URL to their home page,\n            their <a href=\"http://orcid.org/\">ORCID</a>, or an email\n            address.\n          </p>\n          <p>\n            If there is an affiliations <code>ol</code> and a given\n            author is affiliated, there must be an <code>a</code>\n            element with its <code>href</code> pointing to that\n            affiliation, a <code>resource</code> matching the URL\n            identifying the affiliation,\n            and <code>property=\"schema:roleAffiliation\"</code>. The\n            content of that <code>a</code> element must be a string\n            that matches the one that will be generated by CSS to\n            label the affiliation; Latin lowercase being\n            recommended. (This is a hack, but we can only do so much\n            within the limits of CSS — better <code>counter</code>\n            would be needed.)\n          </p>\n          <p>\n            If an author (or contributor) is a corresponding author, a\n            last <code>sup</code> element needs to be added to\n            its <code>li</code>\n            with <code>property=\"sa:roleContactPoint\"</code>, <code>typeof=\"schema:ContactPoint\"</code>\n            (or subclass). Inside the <code>sup</code> element, there\n            must be at least a link to the contributor email address\n            (<code>mailto:</code>). More contact information such a as\n            properties of <code>schema:PostalAddress</code> may be\n            added using <code>meta</code> tags.\n          </p>\n          <p>\n            If there is an affiliations <code>ol</code>, each <code>li</code> in it must have an\n            <code>id</code> which the authors link to. In turn it contains an <code>a</code>\n            element linking to the affiliation with <code>typeof</code> set to either\n            <code>schema:Organization</code> or <a href=\"http://schema.org/Organization\">one of its\n            subtypes</a>. Inside the <code>a</code> needs to sit a <code>span</code> (or any\n            acceptable element, really) with <code>property=\"schema:name\"</code>, containing the\n            name.\n          </p>\n        <h3>The Funding Section</h3>\n          <p>\n            The funding information attached to an article involves a list of sponsors each of which\n            offers a list of funding sources. Again, an example probably makes the idea clearer:\n          </p>\n          <pre><code class=\"language-html\">\n&lt;article resource=\"#\"&gt;\n  &lt;!-- This work was sponsored by the Child Detection Agency (CDA) under the grant grantId --&gt;\n  &lt;section typeof=\"sa:Funding\"&gt;\n    &lt;h2&gt;Funding&lt;/h2&gt;\n    &lt;p about=\"#\" rel=\"schema:sponsor\"&gt;\n      &lt;span typeof=\"sa:SponsorRole\"&gt;\n        This work was sponsored by the\n        &lt;a\n         property=\"schema:sponsor\"\n         href=\"http://pixar.wikia.com/wiki/CDA\"\n         typeof=\"schema:Organization\"\n        &gt;\n          &lt;span property=\"schema:name\"&gt;Child Detection Agency&lt;/span&gt;\n          (&lt;span property=\"schema:alternateName\"&gt;CDA&lt;/span&gt;)\n        &lt;/a&gt; under the grant\n        &lt;a\n         property=\"sa:roleOffer\"\n         typeof=\"sa:FundingSource\"\n         href=\"http://pixar.wikia.com/wiki/CDA#grantId\"\n        &gt;\n          &lt;span property=\"schema:serialNumber\"&gt;grantId&lt;/span&gt;\n        &lt;/a&gt;\n      &lt;/span&gt;\n    &lt;/p&gt;\n  &lt;/section&gt;\n&lt;/article&gt;\n            </code></pre>\n            \n              The markup for a complete funding section.\n            <p>\n            The section has <code>typeof=\"sa:Funding\"</code> and an arbitrary heading title, like\n            other sections.\n          </p>\n          <p>\n            It contains a series of <a href=\"http://scholarly.vernacular.io/?utm_source=html5weekly&amp;utm_medium=email#hunk-elements\">hunks</a> that are\n            <code>rel=\"schema:sponsor\"</code> (there can also be other content, it is ignored for\n            our purposes). The example above uses a <code>p</code> and a narrative style for its\n            content, but you have freedom to use other encodings.\n          </p>\n          <p>\n            As for contributor affiliations, source of fundings are\n            expressed using a subclass of <code>schema:Role</code> (<code>sa:SponsorRole</code>).\n            The usage of schema.org <code>Role</code> type is needed\n            to describe the source of fundings specific to a scholarly\n            article as opposed to all the source of funding of an\n            organization (relevant or not to our scholarly article of\n            interest).\n          </p>\n          <p>\n            The funder will be <code>typeof=\"schema:Organization\"</code> (or a subtype thereof), as the object of a\n            <code>schema:sponsor</code> property on the <code>sa:SponsorRole</code>. It\n            will be identified through its URL (as in the <code>a</code> above), and will typically\n            have <code>schema:name</code> and often <code>schema:alternateName</code>.\n          </p>\n          <p>\n            The specific source of funding is of type <code>sa:FundingSource</code>, as the object of a\n            <code>sa:roleOffer</code> property on the <code>sa:SponsorRole</code>. It\n            should have a URL identifying it and a <code>schema:serialNumber</code> that is its\n            labeled identity.\n          </p>\n        <h3>Data rich scholarly articles</h3>\n          <p>\n            Scholarly Articles are often part of a larger network of\n            creative works containing dataset, code, additional\n            figures, tables or media (audio, video). Even within a\n            scholarly article, some creative works can be encoded in\n            different ways (for instance, figures typically comes in\n            different resolutions). Scholarly HTML aims to formally\n            describe (and help archive) this larger context.\n          </p>\n          <p>\n            Further data about a scholarly graph can be exposed within\n            the article in RDFa or as\n            <a href=\"http://json-ld.org\">JSON-LD</a> islands. When\n            JSON-LD is used, it is recommended not to duplicate the\n            data already serialized in RDFa. JSON-LD should be\n            reserved to expose data not directly present in the HTML\n            markup.\n          </p>\n          <pre><code class=\"language-jsonld\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@id\": \"http://example.com/graph\",\n  \"@graph\": [\n    {\n      \"@id\": \"http://example.com/article\",\n      \"@type\": \"ScholarlyArticle\",\n      \"isPartOf\": \"http://example.com/graph\",\n      \"isBasedOnUrl\": [\"http://example.com/code\"],\n      \"hasPart\": {\n        \"@id\": \"http://example.com/image\",\n        \"@type\": \"Image\",\n        \"encoding\": [\n          {\n            \"@id\": \"http://example.com/encodingsmall\",\n            \"@type\": \"ImageObject\",\n            \"contentUrl\": \"http://example.com/small\"\n            \"height\": \"400px\",\n            \"width\": \"400px\",\n            \"isBasedOnUrl\": [\"http://example.com/encodinglarge\"]\n          },\n          {\n            \"@id\": \"http://example.com/encodinglarge\",\n            \"@type\": \"ImageObject\",\n            \"contentUrl\": \"http://example.com/large\",\n            \"height\": \"1200px\",\n            \"width\": \"1200px\"\n          }\n        ]\n      }\n    },\n    {\n      \"@id\": \"http://example.com/code\",\n      \"@type\": \"SoftwareSourceCode\",\n      \"codeRepository\": \"http://example.com/repository\",\n      \"isPartOf\": \"http://example.com/graph\"\n    }\n  ]\n}\n            </code></pre>\n            <p>\n                A scholarly graph, detailing the context of a\n                scholarly article in JSON-LD. Here, the scholarly\n                article contains a figure available in 2 sizes and is\n                based on software source code available in a code\n                repository. The <code>schemaIsBasedOnUrl</code>\n                property also indicates that the small image was\n                derived from the large one.\n              </p>\n              \n                To maintain good compatibility with schema.org, each\n                creative work is marked as being part of the named\n                graph with <code>schema:isPartOf</code>.\n              <p>\n            A scholarly graph provides a manifest for a scholarly\n            article listing all the creative works, their encodings\n            and the relationship between these objects (expressed\n            with <code>schema:hasPart</code>\n            and <code>schema:isBasedOnUrl</code>).\n          </p>\n          <table><caption>\n              Subclass of <code>schema:CreativeWork</code> commonly\n              associated with a Scholarly Article.\n            </caption>\n            <thead><tr><td>Creative Work</td>\n                <td>Property</td>\n                <td>Encoding</td>\n              </tr></thead><tbody><tr><td><code>schema:ScholarlyArticle</code></td>\n                <td><code>schema:encoding</code></td>\n                <td><code>sa:DocumentObject</code></td>\n              </tr><tr><td><code>sa:Image</code></td>\n                <td><code>schema:encoding</code></td>\n                <td><code>schema:ImageObject</code></td>\n              </tr><tr><td><code>sa:Audio</code></td>\n                <td><code>schema:encoding</code></td>\n                <td><code>schema:AudioObject</code></td>\n              </tr><tr><td><code>sa:Video</code></td>\n                <td><code>schema:encoding</code></td>\n                <td><code>schema:VideoObject</code></td>\n              </tr><tr><td><code>schema:Dataset</code></td>\n                <td><code>schema:distribution</code></td>\n                <td><code>schema:DataDownload</code></td>\n              </tr><tr><td><code>schema:Table</code></td>\n                <td><code>schema:encoding</code></td>\n                <td><code>sa:TableObject</code></td>\n              </tr><tr><td><code>schema:SoftwareSourceCode</code></td>\n                <td><code>schema:encoding</code></td>\n                <td><code>schema:MediaObject</code></td>\n              </tr></tbody></table><h3>Semantic context of a scholarly article</h3>\n          <p>\n            Scholarly Articles (and their associated resources) are\n            frequently tagged to improve their discoverability. For\n            instance,\n            the <a href=\"https://en.wikipedia.org/wiki/United_States_National_Library_of_Medicine\">National\n            Library of Medicine</a> uses\n            the <a href=\"https://en.wikipedia.org/wiki/Medical_Subject_Headings\">Medical\n            Subject Headings</a> (MeSH) controlled vocabulary to index\n            journal articles in the life sciences. Scholarly HTML\n            leverages schema.org and the <code>schema:about</code>\n            property to efficiently expose this information to search\n            engines. When possible,\n            schema.org <a href=\"http://schema.org/MedicalEntity\">MedicalEntity</a>\n            (and subclasses) should be used to describe biomedical\n            concepts.\n          </p>\n          <pre><code class=\"language-jsonld\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@id\": \"http://example.com/article\",\n  \"@type\": \"ScholarlyArticle\",\n  \"about\": {\n    \"@id\": \"http://id.nlm.nih.gov/mesh/D007251\",\n    \"@type\": \"InfectiousDisease\",\n    \"name\": \"Influenza, Human\",\n    \"description\": \"An acute viral infection in humans involving the respiratory tract. It is marked by inflammation of the NASAL MUCOSA; the PHARYNX; and conjunctiva, and by headache and severe, often generalized, myalgia.\",\n    \"code\": {\n      \"@type\": \"MedicalCode\",\n      \"codeValue\": \"D007251\",\n      \"codingSystem\": \"MeSH\"\n    },\n    \"mainEntityOfPage\": {\n      \"@id\": \"#Discussion\",\n    }\n  }\n}\n            </code></pre>\n            \n              Leveraging the <code>schema:about</code> property to\n              expose concepts about a scholarly article. Note that\n              the <code>schema:mainEntityOfPage</code> property is\n              used to specify the part of the article where the\n              concept is relevant.\n            <h3>Hypermedia controls</h3>\n          <p>\n            A Scholarly Article (or any resource part of a scholarly\n            graph) can be made actionable with the addition of\n            hypermedia controls provided\n            through <a href=\"http://schema.org/Action\">schema.org\n            actions</a>. Readers not familiar with schema.org Actions\n            should refer to\n            the <a href=\"http://schema.org/docs/actions.html\">actions\n            overview document</a> for a quick introduction.\n          </p>\n          <pre><code class=\"language-jsonld\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@id\": \"http://example.com/article\",\n  \"@type\": \"ScholarlyArticle\",\n  \"potentialAction\": {\n    \"@type\": \"ReviewAction\",\n    \"agent-input\": {\n      \"@type\": \"PropertyValueSpecification\",\n      \"valueRequired\": true\n    },\n    \"resultReview-input\": {\n      \"@type\": \"PropertyValueSpecification\",\n      \"valueRequired\": true\n    },\n    \"target\": {\n      \"@type\": \"EntryPoint\",\n      \"httpMethod\": \"PUT\",\n      \"urlTemplate\": \"http://example.com/review\"\n    }\n  }\n}\n            </code></pre>\n            \n              Hypermedia controls indicating how to submit a review\n              about the scholarly article.\n            </div>',1),(228,'Creating Fun and Immersive Audio Experiences with Web Audio','http://www.sitepoint.com/creating-fun-immersive-audio-experiences-web-audio/',0,0,'\n    <p><em>This article is part of a web development series from Microsoft. Thank you for supporting the partners who make SitePoint possible.</em></p>\n<p>Today, thanks to the power of the <a href=\"https://dev.windows.com/en-us/microsoft-edge/platform/status/?utm_source=SitePoint&amp;utm_medium=article66&amp;utm_campaign=SitePoint/webaudioapi?filter=f3f0000bf&amp;search=web%20audio\"><strong>Web Audio</strong> API</a>, you can create <strong>immersive audio experiences</strong> directly in the browser – there’s <strong>no need for any plug-ins</strong> here. Today I’d like to share with you what I’ve learned while building the audio engine of our <a href=\"http://www.babylonjs.com/?WT.mc_id=16530-DEV-sitepoint-article66\">Babylon.js</a> open-source gaming engine.</p>\n<p>By the end of this article, you’ll know how to build <a href=\"https://dev.windows.com/en-us/microsoft-edge/testdrive/demos/musiclounge/?utm_source=SitePoint&amp;utm_medium=article66&amp;utm_campaign=SitePoint\">this kind of experience</a>:</p>\n<p><img class=\"aligncenter size-full wp-image-119121\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591174web-audio-api-immersive-audio01-cubes.png\" alt=\"Cubes\" width=\"400\" height=\"241\" /></p>\n<p><strong>Usage:</strong> move the cubes with your mouse or touch near the center of the white circle to mix <a href=\"https://soundcloud.com/david-rousset/coding4fun-ms-techdays-2015\">my music</a> in this 3D experience using WebGL&amp; Web Audio. View the <a href=\"https://github.com/MicrosoftEdge/Demos/tree/master/musiclounge\">source code</a>.</p>\n<h2>Web Audio in a nutshell</h2>\n<p>Web Audio is the most advanced audio stack for the web.</p>\n<div class=\"ArticleBox u-inline\"><h3 class=\"ArticleBox_header t-bg\">\n                    <span class=\"ArticleBox_icon fa fa-pencil\"></span> More from this author\n                 </h3><div class=\"ArticleBox_content\"><ul class=\"ArticleBox_list t-list\"><li><a href=\"http://www.sitepoint.com/pointer-events-will-make-cross-browsers-touch-support-easy/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=developer-center&amp;utm_campaign=relatedauthor\">How Pointer Events Will Make Cross-Browser Touch Support Easy</a></li><li><a href=\"http://www.sitepoint.com/debug-webgl-html5-mobile-experiences-visual-studio-emulators/?utm_source=sitepoint&amp;utm_medium=relatedinline&amp;utm_term=developer-center&amp;utm_campaign=relatedauthor\">Debug WebGL and HTML5 Mobile Experiences with Visual Studio Emulators</a></li></ul></div></div>\n<p><img class=\"aligncenter size-full wp-image-119122\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591180web-audio-api-immersive-audio02-audio-stack.png\" alt=\"Web Audio Stack\" width=\"640\" height=\"327\" /></p>\n<p>From <a href=\"http://www.devbattles.com/en/sand/post-69-Learn+Web+Audio+API\">Learn Web Audio API</a></p>\n<p>If you ever tried to do something else than streaming some sounds or music using the <a href=\"http://www.w3.org/TR/html5/embedded-content-0.html#the-audio-element\">HTML5 audio element</a>, you know how limited it was. Web Audio allows you to break all the barriers and provides you <strong>access to the complete stream and audio pipeline</strong> like in any modern native application. It works thanks to an <strong>audio routing graph made of audio nodes</strong>. This gives you <strong>precise control over time, filters, gains, analyzer, convolver and 3D spatialization</strong>.</p>\n<p>It’s being <a href=\"https://dev.windows.com/en-us/microsoft-edge/platform/status/webaudioapi?utm_source=SitePoint&amp;utm_medium=article66&amp;utm_campaign=SitePoint/?filter=f3f0000bf&amp;search=web%20audio\">widely supported now</a> (Microsoft Edge, Chrome, Opera, Firefox, Safari, iOS, Android, FirefoxOS and Windows Mobile 10). In Edge (but I’m guessing in other browsers too), it’s been <strong>rendered in a separate thread</strong> than the main JS thread. This means that almost all the time, it will have few if <strong>no performance impact</strong> on your app or game. The <strong>codecs supported are at least WAV and MP3</strong> by all browsers and some of them also support OGG. Edge even <a href=\"http://blogs.windows.com/msedgedev/2015/05/26/announcing-dolby-audio-for-high-performance-audio-in-microsoft-edge/?WT.mc_id=16530-DEV-sitepoint-article66\">supports the multi-channel Dolby Digital Plus™ audio format!</a>! You then need to pay attention to that to build a web app that will run everywhere and provides potentially multiple sources for all browsers.</p>\n<h3>Audio routing graph explained</h3>\n<p><img class=\"aligncenter size-full wp-image-119123\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591186web-audio-api-immersive-audio03-audio-routing-graph.png\" alt=\"Audio routing graph\" width=\"663\" height=\"397\" /></p>\n<p><strong>Note:</strong> <em>this picture has been built using the graph displayed into the awesome Web Audio tab of the Firefox DevTools. <a href=\"https://twitter.com/davrous/status/660130281752522752\">I love this tool.</a> :) So much that I’ve planned to mimic it via a <a href=\"http://www.vorlonjs.io/?WT.mc_id=16530-DEV-sitepoint-article66\">Vorlon.js</a> plug-in. I’ve started working on it but it’s still very early draft.</em></p>\n<p>Let’s have a look to this diagram. Every node can have something as an input and be connected to the input of another node. In this case, we can see that MP3 files act as the source of the <strong>AudioBufferSource</strong> node, connected to a <strong>Panner</strong> node (which provides spatialization effects), connected to <strong>Gain</strong> nodes (volume), connected to an <strong>Analyser</strong> node (to have access to frequencies of the sounds in real-time) finally connected to the <strong>AudioDestination</strong> node (your speakers). You see also you can control the volume (gain) of a specific sound or several of them at the same time. For instance, in this case, I’ve got a “global volume” being handled via the final gain node just before the destination and some kind of tracks’ volume with some gains node placed just before the analyser node.</p>\n<p>Finally, Web Audio provides 2 <a href=\"https://en.wikipedia.org/wiki/Psychoacoustics\">psychoacoustics</a> models to simulate spatialization:</p>\n<ul><li><strong>equalpower</strong> (set by default) to support classic speakers for your laptop or floorstanding speakers.</li>\n<li><strong>HRTF</strong> which provides the best results with an headphone as it simulates <a href=\"https://en.wikipedia.org/wiki/Binaural_recording\">binaural recording</a>.</li>\n</ul><p><strong>Note:</strong> <em>MS Edge currently only supports equalpower.</em></p>\n<p>And you’re set for the basics. To start playing with some code, I would suggest you reading those great resources:</p>\n<p>For instance, let’s imaging we’d like to create such an audio graph:</p>\n<p><img class=\"aligncenter size-full wp-image-119124\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591192web-audio-api-immersive-audio04-audio-graph.png\" alt=\"Audio graph\" width=\"640\" height=\"141\" /></p>\n<p>I’d like to play 2 synchronized music that will each have its own gain connected to their own analyser. This means that we’ll be able to display the frequencies of each music on separate canvas and play with the volume of each one separately also. Finally, we will have a global volume that will act on both music at the same time and a third analyser that will display the frequencies on both music cumulated on a third canvas.</p>\n<p>You’ll find the demo here: <a href=\"http://david.blob.core.windows.net/webaudio/demos/articlesample1/analysersSample.html\">analysersSample.html</a></p>\n<p><img class=\"aligncenter size-full wp-image-119125\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591198web-audio-api-immersive-audio05-analysers-sample-demo.png\" alt=\"Analyser sample demo\" width=\"640\" height=\"191\" /></p>\n<p>Simply have a look to the source code using your favorite browser and it’s F12 tool.</p>\n<p><img class=\"aligncenter size-full wp-image-119126\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591203web-audio-api-immersive-audio06-analyser-sample-debug-js.png\" alt=\"Analyser sample debug js\" width=\"900\" height=\"435\" /></p>\n<p><strong>sound.js</strong> is abstracting the logic to load a sound, decode it and play it. <strong>analyser.js</strong> is abstracting the job to do to use the Web Audio analyser and display frequencies on a 2D canvas. Finally, <strong>analysersSample.js</strong> is using both files to create the above result.</p>\n<p>Play with the sliders to act on the volume on each track or on the global volume to review what’s going on. For instance, try to understand if you’re putting the global volume to 0, why can you still see the 2 analysers showing data on the right?</p>\n<p>To be able to play the 2 tracks synchronized, you just need to load them via a XHR2 request, decode the sound and as soon as those 2 asynchronous operations are done, simply call the Web Audio play function on each of them.</p>\n<h2>Web Audio in Babylon.js</h2>\n<h3>Basics</h3>\n<p>I wanted to keep our “<em>simple &amp; powerful</em>” philosophy while working on the audio stack. Even if Web Audio is not that complicated, it’s still very verbose to me and you’re quickly doing boring and repetitive tasks to build your audio graph. My objective was then to encapsulate that to provide a very simple abstraction layer and to let people <strong>create 2D or 3D sounds without being a sound engineer</strong>.</p>\n<p>Here is the signature we’ve chosen to create a sound:</p>\n<pre><code>varnewSound = new BABYLON.Sound(\"nameofyoursound\", \"URLToTheFile\",\r\nyourBabylonScene,\r\ncallbackFunctionWhenSoundReadyToBePlayed,\r\noptionsViaJSONObject);</code></pre>\n<p>For instance, here is how to create new sounds in Babylon.js:</p>\n<pre><code>\r\nvarsound1 = new BABYLON.Sound(\"sound1\", \"./sound1.mp3\", scene,\r\n  null, { loop: true, autoplay: true }\r\n);\r\n\r\nvarsound2 = new BABYLON.Sound(\"sound2\", \"./sound2.wav\", scene,\r\n  function() { sound2.play(); },\r\n  { playbackRate: 2.0 }\r\n);\r\n\r\nvarstreamingSound = new BABYLON.Sound(\"streamingSound\", \"./sound3.mp3\", scene,\r\n  null, { autoplay: true, streaming: true }\r\n);\r\n</code></pre>\n<p>First sound will be played automatically in loop as soon as it will be loaded from the web server and decoded by Web Audio.</p>\n<p>Second sound will be played once thanks to the callback function that will trigger the <code>play()</code> function on it once decoded and ready to be played. It will be played also at a 2x playback rate.</p>\n<p>The last sound is using the “<code>streaming: true</code>” option. It means we’ll use the <strong>HTML5 Audio element</strong> instead of doing a XHR2 request and using a Web Audio <code>AudioBufferSource</code> object. It could be useful if you’d like to stream a music rather than waiting to download it completely. Still, you can apply all the magic of Web Audio on top of this HTML5 Audio element: analyser, 3D spatialization and so on.</p>\n<p>You can play with this logic into our playground such as with this very simple sample: <a href=\"http://www.babylonjs-playground.com/index.html?22/?WT.mc_id=16530-DEV-sitepoint-article66\">http://www.babylonjs-playground.com/index.html?22</a></p>\n<h3>Engine, Tracks and memory foot print</h3>\n<p>The Web Audio audio context is only created at the very last moment. When the Babylon.js audio engine is created in the Babylon.js main engine constructor, it only checks for Web Audio support and set a flag. Also, every sound is living inside a sound track. By default, the sound will be added into the main sound track attached to the scene.</p>\n<p>The Web Audio context and the main track (containing its own gain node attached to the global volume) are really created only after the very first call to <em>new BABYLON.Sound()</em>.</p>\n<p>We’ve done that to avoid creating some audio resources for scenes that won’t use audio, which is today the case of most of our scenes hosted on <a href=\"http://www.babylonjs.com/?WT.mc_id=16530-DEV-sitepoint-article66\">http://www.babylonjs.com/</a>. Still, the audio engine is ready to be called at any time. This helps us also to detach the audio engine from the core game engine if we’d like to build a core version of Babylon.js without any audio code inside it to make it more lightweight. At last, we’re currently working with big studios that pay of lot of attention to resources being used.</p>\n<p>To better understand that, we’re going to use Firefox and its Web Audio tab.</p>\n<p>– Navigate to: <a href=\"http://www.babylonjs-playground.com/?WT.mc_id=16530-DEV-sitepoint-article66\">http://www.babylonjs-playground.com/</a> and open the Web Audio tab via F12. You should see that:</p>\n<p><img class=\"aligncenter size-full wp-image-119127\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591208web-audio-api-immersive-audio07-babylonjs-playground-demo.png\" alt=\"Babylon.js playground demo\" width=\"640\" height=\"183\" /></p>\n<p>No audio context has been created yet.</p>\n<p>– Into the playground editor on the left, add this line of code just before “<em>return scene</em>” for instance:</p>\n<pre><code>varmusic = new BABYLON.Sound(\"Violons\", \"sounds/violons11.wav\",\r\n  scene, null, { loop: true, autoplay: true }\r\n);</code></pre>\n<p>– You should now see this audio graph in F12:</p>\n<p><img class=\"aligncenter size-full wp-image-119128\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591213web-audio-api-immersive-audio08-babylonjs-playground-demo.png\" alt=\"Babylon.js playground demo\" width=\"640\" height=\"183\" /></p>\n<p>The audio context has been dynamically created after the first call to <code>new BABYLON.Sound()</code> as well as the main volume, the main track volume and the volume associated to this sound.</p>\n<h3>3D Sounds</h3>\n<h4>Basics</h4>\n<p>Web Audio is highly inspired by models used in libraries such as <a href=\"https://www.openal.org/\">OpenAL</a> (Open Audio Library) for 3D. <strong>Most of the 3D complexity will then be handled for you by Web Audio.</strong> It will handle the 3D position of the sounds, their direction and their velocity (to apply a <a href=\"https://en.wikipedia.org/wiki/Doppler_effect\">Doppler effect</a>).</p>\n<p>As a developer, you then need to ask to Web Audio to position your sound in the 3D space and to set and/or update the position and orientation of the <a href=\"http://webaudio.github.io/web-audio-api/#AudioListener\">Web Audio listener</a> (your virtual ears) using the <code>setPosition()</code> and <code>setOrientation()</code> function. But if you’re not a 3D guru, it could be a bit complex. That’s why, we’re doing that for you in Babylon.js. We’re updating the Web Audio listener with the position of our camera in the 3D world. It’s <strong>like some virtual ears</strong> (the listener) <strong>were stick onto some virtual eyes</strong> (the camera).</p>\n<p>Up to now, we’ve been using 2D sound. To transform a sound into a spatial sound, you need to specify that via the options:</p>\n<pre><code>varmusic = new BABYLON.Sound(\"music\", \"music.wav\",\r\n  scene, null, { loop: true, autoplay: true, spatialSound: true }\r\n);</code></pre>\n<p>Default properties of a spatial sound are:</p>\n<ul><li>distanceModel (the attenuation) is using a “<strong>linear</strong>” equation by default. Other options are “<em>inverse</em>” or “<em>exponential</em>”.</li>\n<li>maxDistance is set to <strong>100</strong>. This means that once the listener is farther than 100 units from the sound, the volume will be 0. You can’t hear the sound anymore.</li>\n<li>panningModel is set to “<strong>equalpower</strong>” following the specifications. The other available option is “<em>HRTF</em>”. The specification says it’s: “<em>a higher quality spatialization algorithm using a convolution with measured impulse responses from human subjects. This panning method renders stereo output</em>”. This is the best algorithm when using a headphone.</li>\n</ul><p><strong>maxDistance</strong> is only used when using the “<em>linear</em>” attenuation. Otherwise, you can tune the attenuation of the other models using the <strong>rolloffFactor</strong> and <strong>refDistance</strong> options. Both are set to 1 by default but you can change it of course.</p>\n<p>For instance:</p>\n<pre><code>varmusic = new BABYLON.Sound(\"music\", \"music.wav\", scene, null, {\r\n  loop: true, autoplay: true, spatialSound: true,\r\n  distanceModel: \"exponential\", rolloffFactor: 2\r\n});</code></pre>\n<p>Default position of sound in the 3D world is <em>(0,0,0)</em>. To change that, use the <code>setPosition()</code> function:</p>\n<pre><code>music.setPosition(new BABYLON.Vector3(100, 0, 0));</code></pre>\n<p>To have a better understanding, please <a href=\"http://www.babylonjs-playground.com/#2AH4YH/?WT.mc_id=16530-DEV-sitepoint-article66\">have a look to this sample</a> into our playground:</p>\n<p><img class=\"aligncenter size-full wp-image-119129\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591218web-audio-api-immersive-audio09-babylonjs-playground-demo.png\" alt=\"Babylon.js playground demo\" width=\"640\" height=\"344\" /></p>\n<p>Move into the scene using keyboard &amp; mouse. Each sound is represented by a purple sphere. When you’re entering a sphere, you’ll start hearing one the music. The sound is louder at the center of the sphere and fall down to 0 when leaving the sphere. You’ll also notice that the sound is being balanced between the right &amp; left speakers as well as front / rear (which is harder to notice using only classic stereo speakers).</p>\n<h4>Attaching a sound to a mesh</h4>\n<p>The previous demo is cool but didn’t reach my “<strong>simple &amp; powerful</strong>” bar. I wanted something even more simple to use. I finally ended up with the following approach.</p>\n<p>Simply create a <em>BABYLON.Sound</em>, attach it to an existing mesh and you’re done! Only 2 lines of code! If the mesh is moving, the sound will move with it. You have nothing to do, everything else is being handled by Babylon.js.</p>\n<p>Here’s the code to use:</p>\n<pre><code>\r\nvarmusic = new BABYLON.Sound(\"Violons\", \"sounds/violons11.wav\",\r\n  scene, null, { loop: true, autoplay: true }\r\n);\r\n\r\n// Sound will now follow the box mesh position\r\nmusic.attachToMesh(box);\r\n</code></pre>\n<p>Calling the <code>attachToMesh()</code> function on a sound will transform it automatically into a spatial 3D sound. Using the above code, you’ll fall into default Babylon.js values: a <em>linear</em> attenuation with a <em>maxDistance</em> of 100 and a panning model of type “<em>equalpower</em>”.</p>\n<p>Put your headphone and <a href=\"http://www.babylonjs-playground.com/index.html?23/?WT.mc_id=16530-DEV-sitepoint-article66\">launch this sample into our playground</a>:</p>\n<p><img class=\"aligncenter size-full wp-image-119130\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591224web-audio-api-immersive-audio10-babylonjs-playground-attachtomesh.png\" alt=\"Babylon.js playground - attachToMesh()\" width=\"640\" height=\"344\" /></p>\n<p>Don’t move the camera. You should hear my music rotating around your head as the cube is moving. Want to have an <strong>even better experience with your headphone?</strong></p>\n<p>Launch the same demo into a browser supporting HRTF (like Chrome or Firefox), click on the “<strong>Debug layer</strong>” button to display it and scroll down to the audio section. <strong>Switch</strong> the current panning model <strong>from “Normal speakers”</strong> (equalpower) <strong>to “Headphone”</strong> (HRTF). You should enjoy a slightly better experience. If not, change your headphone… or your ears. ;-)</p>\n<p><img class=\"aligncenter size-full wp-image-119131\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591229web-audio-api-immersive-audio11-babylonjs-playground-debug-layer.png\" alt=\"Babylon.js playground debug layer\" width=\"640\" height=\"344\" /></p>\n<p><strong>Note:</strong> you can also move into the 3D scene using arrow keys &amp; mouse (like in a FPS game) to check the impact of the 3D sound positioning.</p>\n<h4>Creating a spatial directional 3D sound</h4>\n<p>By default, spatial sounds are omnidirectional. But you can have directional sounds if you’d like to.</p>\n<p><strong>Note:</strong> directional sounds only work for spatial sounds attached to a mesh.</p>\n<p>Here is the code to use:</p>\n<pre><code>\r\nvarmusic = new BABYLON.Sound(\"Violons\", \"violons11.wav\", \r\n  scene, null, { loop: true, autoplay: true }\r\n);\r\nmusic.setDirectionalCone(90, 180, 0);\r\nmusic.setLocalDirectionToMesh(new BABYLON.Vector3(1, 0, 0));\r\nmusic.attachToMesh(box);\r\n</code></pre>\n<p><code>setDirectionalCone</code> takes 3 parameters:</p>\n<ul><li><strong>coneInnerAngle</strong>: size of the inner cone in degree</li>\n<li><strong>coneOuterAngle</strong>: size of the outer cone in degree</li>\n<li><strong>coneOuterGain</strong>: volume of the sound when you’re outside the outer cone (between 0.0 and 1.0)</li>\n</ul><p>Outer angle of the cone must be superior or equal to the inner angle, otherwise an error will be logged and the directional sound won’t work.</p>\n<p><code>setLocalDirectionToMesh()</code> is simply the orientation of the cone related to the mesh you’re attached to. By default, it’s <em>(1,0,0)</em>. On the right of the object if you want to.</p>\n<p>You can play with <a href=\"http://www.babylonjs-playground.com/#1BO0YS/?WT.mc_id=16530-DEV-sitepoint-article66\">this sample from our playground</a> to better understand the output:</p>\n<p><img class=\"aligncenter size-full wp-image-119132\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591235web-audio-api-immersive-audio12-babylonjs-playground-setlocaldirectiontomesh.png\" alt=\"Babylon.js playground - setlocaldirectionToMesh()\" width=\"640\" height=\"344\" /></p>\n<p>Move into the 3D scene. If you’re inside the <strong>space defined by the grey cone</strong>, you should hear the music, if not you’ll not hear it as the <strong>coneOuterGain</strong> is set to 0.</p>\n<h3>Going further</h3>\n<p>Play with our famous <strong>Mansion Web Audio</strong> <a href=\"http://www.babylonjs.com/index.html?MANSION/?WT.mc_id=16530-DEV-sitepoint-article66\">demo</a>:</p>\n<p><img class=\"aligncenter size-full wp-image-119133\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591239web-audio-api-immersive-audio13-mansion-web-audio.jpg\" alt=\"Mansion Web Audio\" width=\"280\" height=\"175\" /></p>\n<p><img class=\"aligncenter size-full wp-image-119134\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591244web-audio-api-immersive-audio14-mansion-web-audio.png\" alt=\"Mansion Web Audio\" width=\"311\" height=\"175\" /></p>\n<p><img class=\"aligncenter size-full wp-image-119135\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591250web-audio-api-immersive-audio15-mansion-web-audio.png\" alt=\"Mansion Web Audio\" width=\"311\" height=\"175\" /></p>\n<p>Try to find the interactive objects in the Mansion scene, they’re almost all associated to a sound. To build this scene, our 3D artist, <strong>Michel Rousseau, hasn’t use a single line of code!</strong> He made it entirely using our new Actions Builder tool and 3DS Max. The Actions Builder is indeed currently only available in our 3DS Max exporter. We will soon expose it into our <a href=\"http://www.babylonjs.com/sandbox/?WT.mc_id=16530-DEV-sitepoint-article66\">sandbox tool</a>. If you’re interested in building a similar experience, please read those articles:</p>\n<p>But, the best thing to definitely understand and learn how we’ve been using Web Audio in our gaming engine is <strong>by reading our source code</strong>:</p>\n<ul><li><a href=\"https://github.com/BabylonJS/Babylon.js/blob/master/src/Audio/babylon.audioEngine.ts\">BABYLON.AudioEngine</a> being created by the Babylon.js core engine as static.</li>\n<li><a href=\"https://github.com/BabylonJS/Babylon.js/blob/master/src/Audio/babylon.soundtrack.ts\">BABYLON.SoundTrack</a> containing several sounds. You have at least one track being created if you’re creating a sound, this is the main track.</li>\n<li><a href=\"https://github.com/BabylonJS/Babylon.js/blob/master/src/Audio/babylon.sound.ts\">BABYLON.Sound</a> containing the main logic you’ll interact with.</li>\n<li><a href=\"https://github.com/BabylonJS/Babylon.js/blob/master/src/Audio/babylon.analyser.ts\">BABYLON.Analyser</a> that can be attached to the audio engine itself (to view the output via the global volume) or on a specific track.</li>\n</ul><p>Please also have a look into <a href=\"https://github.com/BabylonJS/Babylon.js/blob/master/src/babylon.scene.ts\">BABYLON.Scene</a> and the <code>_updateAudioParameters()</code> function to understand how we’re updating the Web Audio listener based on the current position &amp; orientation of the camera.</p>\n<p>Finally, here are some useful resources to read:</p>\n<h2>Building a demo using multitracks &amp; analysers</h2>\n<p>In order to show you what you can quickly do with our Babylon.js audio stack, I’ve built <a href=\"http://david.blob.core.windows.net/webaudio/demos/articlesample2/multitracks.html\">this fun demo</a>:</p>\n<p><img class=\"aligncenter size-full wp-image-119136\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/11/1447591256web-audio-api-immersive-audio16-multitracks-analysers.png\" alt=\"Multitracks &amp; Analysers\" width=\"900\" height=\"388\" /></p>\n<p>It uses several features from Babylon.js such as the <strong>assets loader</strong> that will automatically load the remote WAV files and display a default loading screen, <strong>multi sounds tracks</strong> and several <strong>analyser objects</strong> being connected to the sound tracks.</p>\n<p>Please have a look to the source code of <strong>multitracks.js</strong> via your F12 tool to check how it works.</p>\n<p><a href=\"http://david.blob.core.windows.net/webaudio/demos/articlesample2/multitracks.html\">This demo</a> is based on a music I’ve already composed in the past that I’ve slightly re-arranged: <a href=\"https://soundcloud.com/david-rousset/the-geek-council\">The Geek Council</a>. You can do your own mixing for the first part of the music by playing with the sliders. You can click as many time and as quickly as possible on the “<strong><em>Epic cymbals</em></strong>” button to add a dramatic effect. Finally, click on the “<strong><em>Initiate epic end sequence</em></strong>”. It will wait for the end of the current loop and will stop the 4 first tracks (drums, epic background, pads &amp; horns) to play the final epic sequence! :) Click on the “<strong><em>Reset</em>” button to restart from the beginning.</strong></p>\n<p><strong>Note:</strong> it turns out that to <strong>have great sounds loops</strong>, without any glitch, <strong>you need to avoid using MP3</strong> as explained in this <a href=\"http://www.html5gamedevs.com/topic/10976-seamless-loop/\">forum</a>: “<em>The simplest solution is to just not use .mp3. If you use .ogg or .m4a instead you should find the sound loops flawlessly, as long as you generate those files from the original uncompressed audio source, not from the mp3 file! The process of compressing to mp3 inserts a few ms of silence at the start of the audio, making mp3 unsuited to looping sounds. I read somewhere that the silence is actually supposed to be file header information but it incorrectly gets treated as sound data!</em>”. That’s why, I’m using WAV files in this demo. It’s the only clean solution working accross all browsers.</p>\n<h2>And what about the Music Lounge demo?</h2>\n<p>The <a href=\"https://dev.windows.com/en-us/microsoft-edge/testdrive/demos/musiclounge/?utm_source=SitePoint&amp;utm_medium=article66&amp;utm_campaign=SitePoint\">music lounge demo</a> is basically re-using everything being described before. But you’re missing a last piece to be able to recreate it as it’s based on a feature I haven’t explained yet: the <code>customAttenuationFunction</code>.</p>\n<p>You’ve got the option to <strong>provide your own attenuation function</strong> to Babylon.js to replace the default one provided by Web Audio (linear, exponential and inverse) as <a href=\"http://doc.babylonjs.com/tutorials/16._Playing_sounds_and_music#creating-your-own-custom-attenuation-function\">explained in our documentation</a>.</p>\n<p>For instance, if you’re trying this <a href=\"http://www.babylonjs-playground.com/#1YIXEO/?WT.mc_id=16530-DEV-sitepoint-article66\">playground demo</a>, you’ll see I’m using this stupid attenuation function:</p>\n<pre><code>music.setAttenuationFunction(function (currentVolume, currentDistance,\r\nmaxDistance, refDistance, rolloffFactor) {\r\n  returncurrentVolume * currentDistance / maxDistance;\r\n});</code></pre>\n<p>Near the object, volume is almost 0. The further, the louder. It’s completely counter intuitive but it’s a sample to give you the idea.</p>\n<p>In the case of the Music Lounge demo, it has been very useful. Indeed, the volume of each track doesn’t depend on the distance of each cube from the camera but on the distance between the cube and the center of the white circle. If you’re looking at the <a href=\"https://github.com/MicrosoftEdge/Demos/blob/master/musiclounge/src/musicLounge.soundCube.ts\">source code</a>, the magic happens here:</p>\n<pre><code>\r\nattachedSound.setAttenuationFunction((currentVolume, currentDistance,\r\n  maxDistance, refDistance, rolloffFactor) =&gt; {\r\n    vardistanceFromZero = BABYLON.Vector3.Zero()\r\n    .subtract(this._box.getBoundingInfo().boundingSphere.centerWorld)\r\n    .length();\r\n\r\n    if(distanceFromZero&lt;maxDistance) { \r\n      returncurrentVolume * (1 - distanceFromZero / maxDistance); \r\n    } \r\n    else{ \r\n      return 0; \r\n    }\r\n});\r\n</code></pre>\n<p>We’re computing the distance between the current cube <code>(this._box)</code> and the (0,0,0) coordinates which happens to be the center of the circle. Based on this distance, we’re setting a linear attenuation function for the volume of the sound associated to the cube. Rest of the demo is using sounds attached to the various meshes (the cubes) and an analyser object connected to the global volume to animate the outer circle made of particles.</p>\n<p>I hope you’ll enjoy this article as much as I had writing it. I also hope that it will bring you <strong>new ideas to create cool Web Audio / WebGL applications</strong> or demos!</p>\n<h2>More hands-on with Web Development</h2>\n<p>This article is part of the web development series from Microsoft tech evangelists on practical JavaScript learning, open source projects, and interoperability best practices including <a href=\"http://blogs.windows.com/msedgedev/2015/05/06/a-break-from-the-past-part-2-saying-goodbye-to-activex-vbscript-attachevent/?WT.mc_id=16530-DEV-sitepoint-article66\">Microsoft Edge</a> browser and the new <a href=\"http://blogs.windows.com/msedgedev/2015/02/26/a-break-from-the-past-the-birth-of-microsofts-new-web-rendering-engine/?WT.mc_id=16530-DEV-sitepoint-article66\">EdgeHTML rendering engine</a>.</p>\n<p>We encourage you to test across browsers and devices including Microsoft Edge – the default browser for Windows 10 – with free tools on <a href=\"https://dev.windows.com/en-us/microsoft-edge/?utm_source=SitePoint&amp;utm_medium=article66&amp;utm_campaign=SitePoint\">dev.modern.IE</a>:</p>\n<p>More in-depth learning from our engineers and evangelists:</p>\n<p>Our community open source projects:</p>\n<p>More free tools and back-end web dev stuff:</p>\n',1),(229,'Accessible CSS toggle switch using standard form controls','https://ghinda.net/css-toggle-switch/',0,0,'\n\n    <h2>Toggle switch</h2>\n\n    <p>Use the toggle switches, instead of radio buttons, for two or more specific options. </p>\n\n    <div class=\"example\">\n\n      View\n      \n\n<pre><code class=\"language-html\">&lt;div class=\"switch-toggle switch-candy\"&gt;\n  &lt;input id=\"week\" name=\"view\" type=\"radio\" checked&gt;\n  &lt;label for=\"week\" onclick=\"\"&gt;Week&lt;/label&gt;\n\n  &lt;input id=\"month\" name=\"view\" type=\"radio\"&gt;\n  &lt;label for=\"month\" onclick=\"\"&gt;Month&lt;/label&gt;\n\n  &lt;input id=\"day\" name=\"view\" type=\"radio\"&gt;\n  &lt;label for=\"day\" onclick=\"\"&gt;Day&lt;/label&gt;\n\n  &lt;a&gt;&lt;/a&gt;\n&lt;/div&gt;</code></pre>\n\n\n    </div>\n\n    <h3>Multiple options</h3>\n    <p>Add up to 6 options. No extra work needed. </p>\n\n    <div class=\"example\">\n\n      View\n      \n\n<pre><code class=\"language-html\">&lt;label&gt;View&lt;/label&gt;\n&lt;div class=\"switch-toggle switch-candy\"&gt;\n  &lt;input id=\"hour3\" name=\"view3\" type=\"radio\" checked&gt;\n  &lt;label for=\"hour3\" onclick=\"\"&gt;Hour&lt;/label&gt;\n\n  &lt;input id=\"day3\" name=\"view3\" type=\"radio\"&gt;\n  &lt;label for=\"day3\" onclick=\"\"&gt;Day&lt;/label&gt;\n\n  &lt;input id=\"week3\" name=\"view3\" type=\"radio\"&gt;\n  &lt;label for=\"week3\" onclick=\"\"&gt;Week&lt;/label&gt;\n\n  &lt;input id=\"month3\" name=\"view3\" type=\"radio\"&gt;\n  &lt;label for=\"month3\" onclick=\"\"&gt;Month&lt;/label&gt;\n\n  &lt;input id=\"year3\" name=\"view3\" type=\"radio\"&gt;\n  &lt;label for=\"year3\" onclick=\"\"&gt;Year&lt;/label&gt;\n\n  &lt;input id=\"decade3\" name=\"view3\" type=\"radio\"&gt;\n  &lt;label for=\"decade3\" onclick=\"\"&gt;Decade&lt;/label&gt;\n\n  &lt;a&gt;&lt;/a&gt;\n&lt;/div&gt;</code></pre>\n\n\n    </div>\n\n  ',1),(230,'Animated SVG vs GIF [CAGEMATCH]','http://sarasoueidan.com/blog/svg-vs-gif/',0,0,'<p class=\"post-meta\">\n            <span>Published November 24, 2015</span>\n            <span>by <a href=\"http://twitter.com/SaraSoueidan\">@SaraSoueidan</a></span>\n            <span class=\"estimated-reading-time\">Estimated Reading Time: <span>5813</span>\n            </span>\n        </p>\n        <p>SVG can do much more than display static images. Its animation capabilities are one of its most powerful features, giving it a distinctive advantage over all other image formats. They are one of many reasons that make SVG images better than raster images, including GIFs. But this, of course, only applies to images that are good candidates for SVG, such as:</p>\n\n<ul><li>Logos,</li>\n    <li>non-complex, vector-based illustrations,</li>\n    <li>user interface controls, </li>\n    <li>infographics,</li>\n    <li>and icons.</li>\n</ul><p>Of course, if you have an image that is better suited for the raster format—such as a photograph or a very complex vector illustration (that would normally have a very big size as an SVG), then you should use a raster image format instead. Not only should the image be a good candidate for SVG, but SVG should also be a good candidate for the image. If the image size is much less as a PNG, for example, then you should use PNG, and serve different versions/resolutions of that image using <code>srcset</code>, or <code>&lt;picture&gt;</code>, depending on what you’re working on and trying to achieve.</p>\n\n<blockquote class=\"pull-quote\">\n    Not only should the image be a good candidate for SVG, but SVG should also be a good candidate for the image.\n</blockquote>\n\n<p>Generally speaking, the images listed above are usually perfect candidates for SVG. And if you\'re going to animate any of those, creating your animations by animating the SVG code is the sensible way to go.</p>\n\n<p>However, last week, a link popped up in my Twitter timeline that linked to a set of icons that are animated as GIFs.</p>\n\n<p>The first thing that crossed my mind when I saw them was that they were perfect candidates for SVG and should be created as SVG images, not GIFs.</p>\n\n<p>SVGs can indeed replace GIFs in many places, just like they can replace other raster image formats for candidates like those mentioned above. The ability to animate SVG images is what gives it this advantage and ability. And this applies to more than just animated icons.</p>\n\n<p>So, here is why I think you should use SVG instead of GIFs whenever you can.</p>\n\n<h2>Image Quality</h2>\n\n<p>The first advantage to using SVG over GIFs—or any image format, for that matter—is, unsurprisingly, SVG’s number one feature: resolution-independence. An SVG image will look super crisp on any screen resolution, no matter how much you scale it up. Whereas GIFs—a raster image format—do not. Try zooming in a page that contains a GIF image and watch the GIF become pixelated and its contents blurred. </p>\n\n<p>For example, the following GIF recording of an SVG animation looks fine at this small size:</p>\n\n<img src=\"http://sarasoueidan.com/images/svg-vs-gif--animation-example.gif\" alt=\"\" />\n        A GIF recording of the <a href=\"http://codepen.io/chrisgannon/pen/myZzJv\">SVG Motion Trails demo</a> by Chris Gannon.\n    <p>Zooming into the page a few times will cause the image to be pixelated and the edges and curves of the elements inside to become jagged, as you can see in the image below:</p>\n\n<p><img src=\"http://sarasoueidan.com/images/svg-vs-gif--animation-example-zoomed-in.png\" alt=\"\" /></p>\n\n<p>Whereas if you <a href=\"http://codepen.io/chrisgannon/pen/myZzJv\">check the SVG demo out</a> and zoom into the page, the SVG content will remain crisp and clear no matter how much you zoom in.</p>\n\n<p>To provide crisp images for high-resolution displays when you’re using a bitmap image format like GIF, you need to use <code>&lt;picture&gt;</code> or <code>srcset</code> and switch the images up for different contexts.</p>\n\n<p>Of course, the higher the image resolution, the bigger the file size will be. With GIFs, the file size will end up ridiculously large; but we\'ll get to that in a minute. Also, using a high-resolution GIF and serving it at a smaller size for mobiles is bad for performance. <strong>Don’t do it.</strong></p>\n\n<p>When you create GIF-animated icons or images, their dimensions are fixed. Change the dimensions or zoom in and out of the page, and they’ll get pixelated. With SVG, size is free, and clarity is a constant. You can create a small SVG and have it scale up as much as needed without sacrificing image clarity.</p>\n\n<p><strong>Conclusion</strong>:</p>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"lose\">GIF, just like other image formats, are not resolution-independent, and will therefore look pixelated when scaled up or viewed on higher resolutions.</td>\n        <td class=\"win\">\n            SVG is scalable and resolution-independent, and will look crisp clear on any screen resolution.\n        </td>\n    </tr></table><h2>Colors and Transparency</h2>\n\n<p>Perhaps the number one deal-breaker with GIFs is the way transparency is handled, especially when the image is displayed on a background other than a white background. </p>\n\n<p>This is an issue that is most likely to emerge when using GIF icons (whether animated or not), since icons are usually created with transparent backgrounds.</p>\n\n<p>For example, take the following circle with a stroke, created as both an SVG image (left) and a GIF with a transparent background (right). The problem is evident as soon as you look at the two images: the GIF circle has grey fringes around its stroke.</p>\n\n<img src=\"http://sarasoueidan.com/images/svg-vs-gif--circle-on-transparent-background.svg\" alt=\"\" width=\"350\" /><img src=\"http://sarasoueidan.com/images/svg-vs-gif--circle-on-transparent-background.gif\" alt=\"\" width=\"350\" /><p>If you’re not reading this in the browser, the effect might not be visible to you because the figure styles might not be applied. Here is a screenshot showing the problem (on the right):</p>\n\n<p><img src=\"http://sarasoueidan.com/images/svg-vs-gif--artefact.png\" alt=\"\" /></p>\n\n<p>This happens because transparency in GIF images is binary. This means that each pixel is either <em>on</em> or <em>off</em>; a pixel is either transparent or fully opaque. This, in turn, means that the transition between the foreground color and the background color is not as smooth, and results in artefacts caused by inadequate sampling frequency, commonly known as <em>aliasing</em>.</p>\n\n<p>When a line is not completely straight, it causes some pixels (around the edges) to be partially transparent and partially opaque, so the software needs to figure out what color to use for those pixels. The halo effect “is caused by all the pixels which would have been &gt; 50% opaque being fully opaque and carrying the bg color against which they were rasterized” (Chris Lilley). So this effect is usually a result of pixel contamination from the color of the background against which the image was composited against upon creation/saving in a graphics editor.</p>\n\n<p>Aliasing is usually countered with <em>anti-aliasing</em>, but that is not as simple when transparency is binary:</p>\n\n<blockquote>\n    <p>There is a <strong>severe interaction between anti-aliasing and binary transparency</strong>. Because the background colour of the image is mixed in with the foreground colours, simply replacing a single background colour with another is not enough to simulate transparency. There will be a whole host of shades which are <em>mixtures</em> of background and foreground colours [...]. The effect in this case is a white halo around objects, because the original image was anti-aliased to a white background colour.</p>\n    <cite>— Chris Lilley (<a href=\"http://www.w3.org/Conferences/WWW4/Papers/53/gq-trans.html\">Source</a>)</cite>\n</blockquote>\n\n<p>The solution to this problem is variable transparency, commonly known as the alpha channel, which allows for varying degrees of transparency and hence a smoother transition between the foreground and background color, which is not what is available in GIF; thus, the halo effect problem. Images with the halo effect usually look best when used with white backgrounds; any other high-contrast background color will make the artefact visible.</p>\n\n<p>I’m not quite sure if there is a way to work around this issue, but I’ve not yet come across a GIF with a transparent background and curved edges that did not have this problem. I’ve even seen rectangular shapes suffer from it as well.</p>\n\n<p>If you want to use your image/icon on a non-white background—say, on a dark footer background, this alone could be a deal-breaker. But there are other reasons SVG is better than GIFs too, that we’ll cover in the next sections.</p>\n\n<p><strong>Note:</strong> if you\'re reading this article in a browser but still don\'t see the fringes in the first image on a smaller screen, try zooming the page in to see the effect.</p>\n\n<p>Why might you not be able to see the fringes on smaller sizes? The answer is: the browser smoothes the edges as a part of the image resize process.\nDoes this mean that you can utilize this to get rid of the fringes and still use a GIF? Yes, you can. But to do that, you have to use a GIF that is much bigger than the size you want to render it at, and then resize it. This also means that you will be serving your users images that are much bigger than they need, therefore taking up more of their bandwidth on mobile, as well as hurting the overall page size and performance. Please don\'t do that.</p>\n\n<p><strong>Conclusion</strong>:</p>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"lose\">GIF images are capable of only binary transparency. This causes artefacts, known as the <em>halo effect</em> to show up whenever the image or icon is used on a non-white background. The higher the background color contrast with the image, the more visible the halo effect, which makes the icons practically unusable.</td>\n        <td class=\"win\">\n            SVG images come with an alpha channel and do not suffer from any problems when they are used on different background colors.\n        </td>\n    </tr></table><h2>Animation Techniques &amp; Animation Performance</h2>\n\n<p><strong>You can animate SVGs using CSS, javaScript or SMIL</strong>, and each of them gives you a different level of control that you can take advantage of to create all kinds of animations on SVG elements.</p>\n\n<p>There are no \"techniques\" to animate GIF images. They are animated by showing a series of images—one for each frame—sequentially, in a fixed manner, at a fixed pace. You know, the way GIFs just work. Granted, you can get creative with your icons before you turn them into GIFs and then “record” the animation and convert it into a GIF, but how good will it look? And how much control over the animation timing will you get afterwards? None.</p>\n\n<p>Unless you make sure you have at least 60 frames—that is, 60 images—<em><strong>per second</strong></em> to create your GIF, the animation will not look smooth. Whereas with SVG, achieving smooth animations is much easier and simpler by taking advantage of browser optimizations.</p>\n\n<p>A GIF has a bigger file size than PNG or JPEGs, and the longer the animation duration, the bigger the size will be. Now, what if your animation plays for at least 5 ot 6 seconds? What if it plays for much longer? </p>\n\n<p>You get the picture.</p>\n\n<p>Let\'s look at a more specific yet minimal example. Below are two images: an animated SVG on the left, and an animated GIF on the right. The rectangle in both images changes color over the course of six seconds.</p>\n\n<img src=\"http://sarasoueidan.com/images/svg-vs-gif--rectangle-animation.gif\" alt=\"\" width=\"300\" height=\"150\" />The SVG image on the left and the GIF on the right.\n    <p>There are a couple of things to note here:</p>\n\n<ul><li>The GIF animation looks smooth but if you look closely you will notice that the SVG rectangle is going through a wider range of colors as it transitions from the initial to the final color. <strong>The number of colors the GIF goes through is limited by its number of frames.</strong> In the above image, the GIF goes through 60 frames, i.e. 60 colors, whereas the SVG goes through the entire spectrum between the shade of pink used and the final green color.</li>\n    <li>For looping animations like this one, it is generally best to avoid the color jump shown in the above animation, and create the animation so that it reverses once it reaches the green color; that way, it will transition smoothly back to pink and then start the second round of animation from there too, avoiding that unsightly color jump. \n    <p> With CSS, you can reverse the animation using the <code>alternate</code> animation direction value. But with GIF, you will need to work on your number of frames and probably end up doubling it to make this happen; this will, of course, also increase the size of the image as well.\n    </p></li>\n</ul><p>The sizes of the two images shown above are:</p>\n\n<ul><li>GIF image size: <strong>21.23KB</strong> </li>\n    <li>SVG image size: <strong>0.355KB</strong> </li>\n</ul><p>This is no trivial difference. But we all know we can optimize our images. So let’s do that.</p>\n\n<p>Optimizing the SVG using the SVGO Drag-and-Drop GUI brings the SVG’s file size down to <strong>0.249KB</strong>.</p>\n\n<p>To optimize the GIF, you can use one of the several GIF optimization tools online. I used <a href=\"http://ezgif.com/\">ezgif.com</a> to optimize the above image. (Other tools also exist; <a href=\"http://www.lcdf.org/gifsicle/\">gifsicle</a> is one of them.) The file size dropped down to <strong>19.91KB</strong>.</p>\n\n<p>There are many options you can choose from when optimizing GIF images. I optimized the above image so that the number of frames remains intact, using Lossy GIF compression, which <q>can reduce animated GIF file size by 30%—50% at a cost of some dithering/noise.</q></p>\n\n<p>You can also optimize it by removing every nth frame; that can reduce the file size even further, but at the cost of the animation not being smooth anymore. And in the case of an animation like the case at hand, removing frames will make the change in color be \"jumpy\" and noticeable. </p>\n\n<p>Other optimization options are also available such as color reduction (which wouldn\'t be suitable for our color-dependent animation here) and transparency reduction. You can learn more about these options on the <a href=\"http://ezgif.com/\">ezgif.com</a> optimization page.</p>\n\n<p>To recap: If you want your GIF animation to be smooth, you’re going to need more frames per second, and that will consequently increase the file size by a lot. Whereas with SVG, you’re likely to maintain a much smaller file size. The above example is minimal, and I’m sure there are better ones out there, but I wanted the most minimal example to show the difference between the two formats.</p>\n\n<p>Even if you were animating the above rectangle using JavaScript or even a JavaScript framework—since animations on SVG don’t work in IE, for example, the file size of that framework combined with that of the SVG is still likely to be smaller or at least equal to the size of the GIF image size. For example, using <a href=\"http://greensock.com\">GreenSock</a>’s TweenLite, the size of the SVG with the library combined would be less than 13KB (which is still less than the size of the GIF), since TweenLite is 12KB minified. If you do end up with a size equal to that of the GIF, the other benefits of SVG will tip the scale and you will be getting more out of it.</p>\n\n<p>Some other JavaScript libraries exist that focus on certain animation tasks at a time, and come in impressivly small file sizes (&lt;5KB), such as <a href=\"https://github.com/lmgonzalves/segment/blob/gh-pages/dist/segment.min.js\">Segment</a> which is used to animate SVG paths to create line drawing effects. Segment is 2.72KB minified. That’s not too shabby, is it?</p>\n\n<p>There can be exceptions, so you should always test. But given the nature of GIFs and how they work, you will likely find that SVG is a better option in most cases.</p>\n\n<p class=\"note\">Note: SVG Performance is not at its absolute best today, but this will hopefully change in the future. IE/MS Edge offer the best SVG rendering performance among all browsers today. Despite that, SVG animations will still look better than GIF animations, especially when you\'re tackling long animations, because the file size of the GIF—assuming it’s recorded at 60fps—will have a negative impact on the overall page performance. Libraries like GreenSock also offer impressive performance as well. </p>\n\n<p><strong>Conclusion</strong>:</p>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"lose\">\n            <ol><li>GIF images are generally larger than SVG images. The more complex and longer the animation, the more frames are required to create it and therefore the bigger the file size and the more the negative impact on performance.</li>\n                <li>Unless GIF animation plays at 60fps, the animation is going to be jagged and not smooth. Also, the more the number of frames per second, the bigger the file size, especially for longer animations.</li>\n            </ol><p><strong>Result:</strong> There will be a compromise that needs to be made. Either the GIF animation is smooth and the overall file and page size and performance is negatively affected, or the GIF animation will suffer with less frames. One form of performance is risked in both scenarios.</p>\n        </td>\n        <td class=\"average\">\n            <p>SVG images take advantage of the browser optimizations when animating elements. Even though browser performance on SVG elements is still not at its best, animation will still perform better without having to make page performance compromises.</p>\n            <p>\n                SVG file size is still very reasonable, if not very small, compared to GIFs, even when certain animation libraries might be required to create cross-browser animations.\n            </p>\n        </td>\n    </tr></table><h3>Maintaining &amp; Modifying Animations</h3>\n\n<p>..is a pain if you are using GIFs. You will need to use a graphics editor such as Photoshop or Illustrator or After Effects, to name a few. And if you\'re like me, then graphics editors are not where your skills shine, and you feel more at home when you make modifications in code, not in graphics editors.</p>\n\n<img src=\"http://sarasoueidan.com/images/svg-vs-gif--photoshop-frames.png\" alt=\"\" />Screenshot of the animation timeline as created in Photoshop. The lower part shows a fraction of the frames created for the animation. Fore more complex animations, more frames are required. Also notice the layers panel. \n        <p><small>Thanks to my designer friend <a href=\"http://twitter.com/WalterStephanie\">Stephanie Walter</a> for the PS animation tips.</small></p><p>What happens if you want to change your animation timing? or if you want to change the timing functions for one or multiple elements inside your image? or if you want to change the direction in which an element moves? What if you want to change the entire effect and have the elements in your image do something completely different?</p>\n\n<p>You will need to recreate the image or icon all over again. Any change requires you to jump into the graphics editor and work with frames and a frame-based UI. That would be like torture to developers, and a Mission Impossible for those of us who don’t know our way around those editors enough to make these changes.</p>\n\n<p>With SVG, making any kind of change to the animation(s) is only a few lines of code away. </p>\n\n<p><strong>Conclusion (developer’s perspective)</strong>:</p>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"lose\">Maintaining and modifying GIF animations requires re-creating the image or resorting to a frame-based graphics editor’s UI to do so, which is a problem for design-challenged developers.</td>\n        <td class=\"win\">\n            SVG animations can be changed and controlled right inside the SVG code—or anywhere the animations are defined, usually using a few lines of code.\n        </td>\n    </tr></table><h2>File Size, Page Load Time &amp; Performance</h2>\n\n<p>In the previous section, we focused on the performance of the animation itself. In this one, I want to shed some light on the page performance as a whole and how it is affected by the image format choice you make.</p>\n\n<p>Fact: The bigger the file size, the more the negative impact on page load time and performance. With that in mind, let\'s see how using SVG instead of GIFs can help improve the overall page load time by looking at a more practical, real-world example. </p>\n\n<p>At my first SVG talk, 18 months ago, I mentioned how SVG can be used to replace animated GIFs and result in overall better page performance. In that talk, I provided a real-world example of a real-world web page that took advantage of what SVG has to offer and reaped the benefits: the <a href=\"http://sprout.is/\">Sprout</a> homepage.</p>\n\n<p>The Sprout homepage has two animated images that were initially created and displayed as GIFs. Two years ago, <a href=\"https://twitter.com/mfortress\">Mike Fortress</a> wrote <a href=\"http://oak.is/thinking/animated-svgs/\">an article on the Oak blog</a>, in which he explains how they recreated the animated GIFs, particularly the chart GIF (see image below) as an animated SVG image.</p>\n\n<img src=\"http://sarasoueidan.com/images/svg-vs-gif--sprout-chart.svg\" alt=\"\" />\n        The SVG version of the chart used on the Sprout homepage and written about on the Oak article. <small>(All rights reserved by their owners.)</small>\n        <p>Note that the animation is created using SMIL so it will not be animating if you’re viewing it in Internet Explorer.</p>\n    <p>In his article, Mike shares some interesting insights on their new page performance as a result of making the switch to SVG:</p>\n\n<blockquote>\n    <p>This chart, and one other animation on Sprout, were initially GIFs. By using animated SVGs instead of GIFs we were able to reduce our page size <strong>from 1.6 mb to 389 kb</strong>, and reduce our page load time <strong>from 8.75 s to 412 ms</strong>. That’s a huge difference.</p>\n    <cite>—Mike Fortress, <a href=\"http://oak.is/thinking/animated-svgs/\">“Animated SVGs: Custom Easing and Timing”</a></cite>\n</blockquote>\n\n<p>A huge difference indeed.</p>\n\n<p>The Sprout chart is a perfect candidate for SVG. There is no reason to animate it by converting the animation into a GIF recording, when SVG can bring so much more benefits.</p>\n\n<p><a href=\"https://jakearchibald.com/\">Jake Archibald</a> realizes the power of SVG animations too, and uses them to create and animate interactive illustrations to complement his articles. His <a href=\"https://jakearchibald.com/2014/offline-cookbook/\">Offline Cookbook</a> article is an excellent example (and an excellent article, by the way). Could he have used GIFs to do that? Of course. But given the number of images he used, the GIFs could have easily increased the overall page size to a couple or few megabytes, with each GIF being at least hundreds of kilobytes in size; whereas <strong>the entire web page currently weighs at 128KB only with <em>all</em> the SVG images embedded inline</strong>, because <a href=\"http://sarasoueidan.com/blog/structuring-grouping=referencing-in-svg\">you can reuse elements in SVG</a>, so any repetitive elements will not only cause the entire page to <a href=\"http://sarasoueidan.com/blog/svg-optimization/\">gzip much, much better</a>, but for each page, the overall size of the SVGs becomes smaller. </p>\n\n<p>Now <em>that</em> is impressive.</p>\n\n<p>I will rest my case about page load and performance here. But it is still important to note that there <em>can</em> be exceptions. Again, in most cases, you’re likely going to find that SVG is better than a GIF, but you’ll always need to test anyway.</p>\n\n<p><strong>Conclusion</strong>:</p>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"lose\">GIF images are generally bigger in size than SVG images are with animations added to them. This negatively affects the overall page size, load times and performance.</td>\n        <td class=\"win\">\n            SVG images can be used and reused, as well as gzipped better, making their file sizes generally smaller than those of GIFs, thus improving page load times and performance.\n        </td>\n    </tr></table><h2>Browser Support</h2>\n\n<p>Probably the only absolute advantage to GIFs over SVGs is browser support. GIFs work pretty much everywhere, while SVG support is less global. Even though we have many <a href=\"https://css-tricks.com/a-complete-guide-to-svg-fallbacks/\">ways to provide fallback for non-supporting browsers</a>—and current browser support should not be hindering anyone from using SVG, the fallback images, if provided as PNG or JPG, are going to be static, animation-less.</p>\n\n<p>Of course, you can always provide a GIF as a fallback to SVG, but the previously-mentioned considerations and disadvantages should be kept in mind.</p>\n\n<p><strong>Conclusion</strong>:</p>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"win\">GIF images work pretty much everywhere.</td>\n        <td class=\"average\">\n            SVG images have less global browser support, but they come with a lot of ways to provide fallback for non-supporting browsers.\n        </td>\n    </tr></table><h2>Accessibility Concerns (#a11y)</h2>\n\n<p>Move something on a page, or anywhere, for that matter, and you\'ve instantly added a distraction—something that is sure to grab a user’s attention as soon as it starts moving. This is simply how the human brain works. This is also one of the reasons ad banners are so focused on—and built with—a strong focus on animation. This is also why animated ad banners are <strong>extremely annoying</strong>. They are distracting, especially when you\'re trying to perform a task on a page that requires your entire attention, such as reading an article.</p>\n\n<p>Now imagine a page with a set of animated icons (or images) that just won\'t stop animating no matter what you do. We’re no longer talking about one or two images on a homepage or within an article here; we’re talking about UI elements and controls, and smaller icons that are likely to be present in multiple places on a page, and on multiple pages. Unless your icon is <em>supposed</em> to be inifnitely animation—for example, if it is a spinner animating during a user-inactive waiting phase, then it is likely to introduce a problem, and become more of an annoyance, than a “nice thing”.</p>\n\n<p>As a matter of fact, for some people it can become more of an annoyance, as continuous motion can literally make some people feel ill.</p>\n\n<p>In her article <a href=\"http://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity\">“Designing Safer Web Animation For Motion Sensitivity”</a>, designer and web animation consultant Val Head discusses the effects of overused animation on the web on people with visually-triggered vestibular disorders (emphasis mine):</p>\n\n<blockquote>\n    <p>It’s no secret that a lot of people consider scrolljacking and parallax effects annoying and overused. But what if motion does more than just annoy you? What if it also makes you ill?</p>\n    <p>That’s a reality that people with visually-triggered vestibular disorders have to deal with. As animated interfaces increasingly become the norm, more people have begun to notice that <strong>large-scale motion on screen can cause them dizziness, nausea, headaches, or worse. For some, the symptoms can last long after the animation is over.</strong> Yikes.</p>\n</blockquote>\n\n<p>Now imagine if the animation does <em>not</em> end... Double Yikes.</p>\n\n<p>Val’s article explains the problem in more detail, as she gathers feedback from two people who actually have these problems and share their experience with animation in different examples.</p>\n\n<p>One of the solutions that can help avoid these problems is to <a href=\"http://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity#section10\">provide the user with the ability to control the animation</a> so that they can stop it when it gets disturbing.</p>\n\n<p>With SVG, you can do that. You can fully control the animation and play it once or twice on page load—if you really need to have it play as soon as the user “enters” your page, and then fire it on hover for subsequent tweens, using nothing but a few lines of CSS or JavaScript. <strong>You do not need hundreds or thousands of lines of CSS or JavaScript to create an icon animation</strong>, unless your icon is a really complex scene with a lot of components that are animated inside of it. But I think that in that case, it does not count as an “icon” anymore, but more of a regular image.</p>\n\n<p>You can go even as far as control playback, speed for each consequent tween, and much more, assuming, of course, you are using JavaScript to gain this level of control. </p>\n\n<p>Or you can add a toggle to give the user the ability to stop an infinitely playing animation. You can’t do that with GIFs... unless you opt for replacing the GIF with a static image upon a certain toggle action.</p>\n\n<p>Some might even argue that you could display a static version of the image—as a PNG for example, and then provide the GIF version on hover. But this comes with a few problems of its own:</p>\n\n<ul><li>If the images are inline, you’ll need to replace these images using JavaScript. That action does not require any JavaScript if you are using SVG.</li>\n    <li>If the images are foreground images (embedded in the HTML using <code>&lt;img&gt;</code>), and you need to replace these images, you will end up with double the amount of HTTP requests for every image. And if they are background images inlined in the style sheet (which is not recommended), the images (especially the GIFs) will add to the size of the style sheet and therefore to the overall render-blocking time of the page.</li>\n    <li>If/when you switch image sources on hover, there is a noticable flash between the first and the second image on slower connections. My connection is slow; sometimes 3G-slow, and I have yet to remember a time when an image was replaced with another one on hover, viewport resize, or whatever, and not have seen that flash. This situation gets even worse when the second image (GIF loaded on hover) is fairly big in size—there will be a flash, followed by a slow, janky animation of the GIF while it loads completely. That’s never attractive.</li>\n</ul><p>So, yes, you can switch image sources to control if or when the GIF animation plays, but you’re losing the finer control over the GIF and affecting the user’s experience with the UI.</p>\n\n<p>You are also able to control how many times the animation plays in the GIF—which is pretty cool, but that means that the animation will play only <strong><em>n</em></strong> number of times. And then to re-fire the animation upon a user interaction, you will need to resort to the above technique with multiple images.</p>\n\n<p>Multiple images to maintain, multiple HTTP requests, and an overall hacky, non-optimal solution to what could have been easily achieved with one SVG image.</p>\n\n<ul><li>Embed the <strong>one</strong> SVG image on the page.</li>\n    <li>Create the animation any way you want/need. (Or create the animation before you embed the image.)</li>\n    <li>Play, pause, control the animation; and give the user the ability to control it as well.</li>\n</ul><p>No extra HTTP requests for every image, no complicated animation timeline maintenance in graphics editors, and no accessibility concerns or woes that cannot be avoided with a few lines of code.</p>\n\n<p><strong>Conclusion</strong>:</p>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"average\">GIF images cannot be stopped by the user without requiring extra images and extra HTTP requests. Even then, the control is not full.</td>\n        <td class=\"win\">\n            SVG animations can be fully customized so that they are enabled, disabled and controlled by the user without requiring any hacky approaches.\n        </td>\n    </tr></table><h3>Content Accessibility</h3>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"average\">GIF images are only as accessible as PNG and JPEG images are—using an appropriate <code>alt</code> attribue value to describe them.\n            <p>The content inside the image cannot be discerned or made directly accessible to screen readers beyond what the overall image description does.</p></td>\n        <td class=\"win\">\n            SVG images are accessible as well as semantic. The content inside the image that is being animated can also be described and made accessible to screen readers using SVG’s built-in accessibility elements, and enhanced using ARIA roles and attributes as well. (You can read all about making SVGs accessible <a href=\"http://www.sitepoint.com/tips-accessible-svg/\">here</a>.)\n        </td>\n    </tr></table><h2>Interactivity</h2>\n\n<p>There’s not much to add here but the fact that you can interact with individual elements inside an SVG, during, before or after an animation, but that is not possible with a GIF. So, if you use a GIF, you will lose the ability to do anything beyond triggering or stopping the animation, and even those are not really done inside the SVG, as we’ve seen, but are achieved by swapping the GIF out with a static replacement. Even changing the colors of elements inside the GIF would require additional images to do so. That is yet another advantage to using SVG over GIFs.</p>\n\n<p><strong>Conclusion</strong>:</p>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"lose\">Animations defined in GIF images cannot be interactive. You cannot interact with individual elements inside a GIF element, nor create links out of individual elements either.</td>\n        <td class=\"win\">\n            SVG content is fully interactive. You can create hover and click interactions (and more) to which individual elements inside the SVG image can respond.\n        </td>\n    </tr></table><h2>Responsive &amp; Adaptive Animations</h2>\n\n<p>The ability to animate SVG directly from the code, as well as manipulate its many, many attributes, results in and adds yet another advantage over GIF-based animations: the ability to create responsive, adaptive and performant animations, without adding any extra HTTP requests, using a few lines of code, and with quite smaller file sizes.</p>\n\n<p>Sarah Drasner wrote <a href=\"http://www.smashingmagazine.com/2015/03/different-ways-to-use-svg-sprites-in-animation/\">an article on Smashing Magazine</a> showing different ways to animate SVG sprites. One of these ways is having multiple \"scenes\" inside an SVG, animating them with CSS, and then changing the SVG \"view\"—by changing the value of <a href=\"http://sarasoueidan.com/blog/svg-coordinate-systems\">the <code>viewBox</code> attribute</a>—to show one scene at a time, depending on the current viewport size and available screen estate. </p>\n\n<p>If you wanted to create the same animation using GIF images, you would lose the animation control capabilities as well as require multiple images which are probably going to be bigger (in file size) than the one SVG image.</p>\n\n<p>But if you don\'t want to go with animating SVG code, you could always create an SVG sprite and animate it the way you would animate any other image format—using <code>steps()</code> and a few lines of CSS. Sarah also talks about this technique in her article. Animating SVG images does not need to be complicated, and is generally performant.</p>\n\n<p><strong>Conclusion</strong>:</p>\n\n<table class=\"cagematch\"><tr class=\"th\"><td>GIF</td> <td>Animated SVG</td>\n    </tr><tr><td class=\"average\">Given that content inside a GIF cannot be controlled with code, it is not possible to make the animations adapt or respond to viewport or context changes without resorting to seperate images.</td>\n        <td class=\"win\">\n            Given that SVG content is directly animatable using code, the content as well as its animations can be modified so that they respond and/or adapt to different viewport sizes and contexts, without having to resort to any additional assets.\n        </td>\n    </tr></table><h2>Final Words</h2>\n\n<p>GIFs have pretty good browser support, yes, but the advantages of SVGs outweigh theirs in almost every aspect. There might be exceptions, and in those cases do, by all means, use GIFs or any other image format that does a better job than SVG would. You might even use Video or HTML5 Canvas or whatever.</p>\n\n<p>SVG can bring a lot of performance benefits to the table when compared to other image formats, especially GIFs.</p>\n\n<p>Thus, given all of the above, I recommend that anywhere SVG could be used for animation, GIFs should be avoided. You’re free to ignore my recommendation, of course, but you’d be giving up on the many benefits that SVG animations offer.</p>\n\n<p>Unless GIFs show a lot of advantages over SVGs that go beyond browser support for IE8 and below, then I believe SVGs should be the way to go.</p>\n\n<p>A few resources to help you get started with SVG animations:</p>\n\n<hr class=\"line\" />\nI hope you found this article useful.\n\n<p>Thank you for reading.</p>\n\n<p class=\"note\">Many thanks to Jake Archibald for reviewing and giving feedback to the article, and to Chris Lilley for his feedback re transparency in GIF images. It wouldn’t have been so comprehensive (read: ridiculously long) without their feedback. ^^</p>\n\n\n         \n\n\n        \n\n        <div class=\"clearfix post-nav\">\n            \n            <p class=\"previous-post\">\n                <strong>Previous Post:</strong> <a class=\"prev\" href=\"http://sarasoueidan.com/blog/svg-tips-for-designers/\">« Tips for Creating and Exporting Better SVGs for the Web</a>\n            </p>\n             \n        </div>\n        ',1),(231,'Popcorn.js | The HTML5 Media Framework','http://popcornjs.org/',0,0,'\n	    <div class=\"sidepanel\">\n              <div class=\"butter-plugin\">\n                <div>\n                  \n                  Watch a demo of Popcorn.js, our HTML5 javascript library for integrating the web into video production.\n                  <p>   Start the video to watch popcorn.js change your webpage!</p>\n                </div>\n              </div>\n            </div>\n          ',1),(232,'jQuery webcam plugin â€¢ Code is poetry','http://www.xarg.org/project/jquery-webcam-plugin/',0,0,'<div><p>The jQuery webcam plugin is a transparent layer to communicate with a camera directly in JavaScript.</p><h2>Overview</h2><p>This plugin provides three different modes to access a webcam through a small <abbr title=\"Application Programming Interface\">API</abbr> directly with JavaScript - or more precisely jQuery. Thus, it is possible to bring the image on a Canvas (callback mode), to store the image on the server (save mode) and to stream the live image of the Flash element on a Canvas (stream mode). If you just want to download the plugin, click here:</p><h2>jQuery webcam example</h2><div><img src=\"http://www.xarg.org/image/antenna.png\" alt=\"\" /><span>jQuery</span><div><a><img src=\"http://www.xarg.org/image/icon_filter.png\" alt=\"\" /></a></div></div><p><a>Take a picture after 3 seconds</a> | <a>Take a picture instantly</a></p><h3>Available Cameras</h3></div>\");\n\n var canvas = document.getElementById(\"canvas\");\n\n if (canvas.getContext) {\n ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n ctx.clearRect(0, 0, 320, 240);\n\n var img = new Image();\n img.src = \"/image/logo.gif\";\n img.onload = function() {\n ctx.drawImage(img, 129, 89);\n }\n image = ctx.getImageData(0, 0, 320, 240);\n }\n \n var pageSize = getPageSize();\n jQuery(\"#flash\").css({ height: pageSize[1] + \"px\" });\n\n}, false);\n\nwindow.addEventListener(\"resize\", function() {\n\n var pageSize = getPageSize();\n jQuery(\"#flash\").css({ height: pageSize[1] + \"px\" });\n\n}, false);\n\n<p>If you activate the filter with the button on the right side of the picture, methods of my already published <a href=\"http://www.xarg.org/project/jquery-color-plugin-xcolor/\">jQuery plugin xcolor</a> will be used to distort the colors of the Canvas.</p><h2>General information about the interface</h2><p>The following snippet describes the interface of the webcam API:</p><pre class=\"prettyprint\">$(\"#camera\").webcam({\n	width: 320,\n	height: 240,\n	mode: \"callback\",\n	swffile: \"/download/jscam_canvas_only.swf\",\n	onTick: function() {},\n	onSave: function() {},\n	onCapture: function() {},\n	debug: function() {},\n	onLoad: function() {}\n});</pre><h3>Config Parameter</h3><p><strong>width</strong><br />The width of the flash movie.</p><p><strong>height</strong><br />The height of the flash movie. Both parameters have to be changed in the Flash file as well. Follow the instructions below to recompile the swf after the size change.</p><p><strong>mode</strong><br />The storage mode can be one of the following: <em>callback</em>, <em>save</em>, <em>stream</em>. Details about the usage of each parameter can be found under the according heading below.</p><p><strong>swffile</strong><br />Points to the swf file of the Flash movie, which provides the webcam API. There are two swf files provided via the download archive: <strong>jscam.swf</strong>, which provides the full API and <strong>jscam_canvas_only.swf</strong> which have no embedded JPEG library (I embedded an adjusted JPGEncoder of the <a href=\"http://code.google.com/p/as3corelib/\">AS 3 corelib</a>). Thereby, the file is only one third as large as the original.</p><p><strong>onTick</strong>, <strong>onSave</strong>, <strong>onCapture</strong><br />These callbacks are described in detail below, since they change with each mode.</p><p><strong>onLoad</strong><br />The <em>onLoad</em> callback is called as soon as the registration of the interface is done. In the example above, I use the callback to get a list of all cameras available:</p><pre class=\"prettyprint\">onLoad: function() {\n\n    var cams = webcam.getCameraList();\n    for(var i in cams) {\n        jQuery(\"#cams\").append(\"&lt;li&gt;\" + cams[i] + \"&lt;/li&gt;\");\n    }\n}</pre><p>Once the <em>onLoad</em> callback is called, a global object <strong>window.webcam</strong> is available, which provides the following methods:</p><ul><li><strong>capture(<em>[delay]</em>)</strong><br />Captures an image internally.</li><li><strong>save(<em>[file]</em>)</strong><br />Saves the captured image accordingly to the storage mode.</li><li><strong>getCameraList()</strong><br />Get\'s an array of available cameras. If no camera is installed, an error is thrown and an empty array is returned.</li><li><strong>setCamera(<em>[index]</em>)</strong><br />Switches to a different camera. The parameter is the index of the element in the resulting array of <em>getCameraList()</em></li></ul><p><strong>debug</strong><br />The <em>debug</em> callback is called whenever there is a note or an error you should be notified. In the example above, I just replace the html content of the output container:</p><pre class=\"prettyprint\">debug: function (type, string) {\n	$(\"#status\").html(type + \": \" + string);\n}</pre><h2>Callback Interface</h2><p>The callback mode is used to get the raw data via a callback method to write it on a canvas element for example. The example above uses the callback mode.</p><p>As for the processing, one can imagine how it works as follows: Once the user has completely loaded the entire page and has accepted the security setting of Flash, she should be able to see herself. Then, the user triggers the method <em>window.capture()</em>. This may optionally receive a parameter that specifies the time to wait until the image is shot. To view the passage of time, the method <em>onTick()</em> is called after every second. The received parameter of this method is the amount of seconds remaining. In the example above, I simply change the status message like this:</p><pre class=\"prettyprint\">onTick: function(remain) {\n\n    if (0 == remain) {\n        jQuery(\"#status\").text(\"Cheese!\");\n    } else {\n        jQuery(\"#status\").text(remain + \" seconds remaining...\");\n    }\n}</pre><p>Is copying finished, the <em>onCapture</em> callback is called, which in the example of above immediately calls the method <em>webcam.save()</em> to ultimately write the image to the canvas. The sample code also contains a small gimmick to <strong>simulate a flash</strong> using a lightbox and jQuery\'s <em>fadeOut()</em> fx method.</p><pre class=\"prettyprint\">onCapture: function () {\n\n	jQuery(\"#flash\").css(\"display\", \"block\");\n	jQuery(\"#flash\").fadeOut(\"fast\", function () {\n		jQuery(\"#flash\").css(\"opacity\", 1);\n	});\n\n	webcam.save();\n}</pre><p>In callback mode, for every line the callback <em>onSave()</em> is invoked, which gets an integer CSV of color values (separator is the semicolon). To write the data on the canvas, I use the following method in the example above:</p><pre class=\"prettyprint\">onSave: function(data) {\n\n    var col = data.split(\";\");\n    var img = image;\n\n    for(var i = 0; i </pre><h2>Save Interface</h2><p>From the view of processing, the save mode is almost identical to the callback mode. The only difference is that the <em>webcam.save()</em> method get\'s the file name passed as parameter. Then the shot photo is sent via <strong>HTTP_RAW_POST_DATA</strong> to the server and can be read for example with the following snippet to store or further process it in any way (Warning, input validation is not considered here!).</p><pre class=\"prettyprint\">webcam.save(\'/upload.php\');</pre><p>And on the server side, you get the image like this:</p><pre class=\"prettyprint\">&lt;?php\n\n$str = file_get_contents(\"php://input\");\nfile_put_contents(\"/tmp/upload.jpg\", pack(\"H*\", $str));\n\n?&gt;</pre><h3>Alternative method to the upload via Flash</h3><p>The Flash method has several problems. The implementation can lock the entire Flash movie and in the worst case the whole browser until the picture was uploaded sucessfully. A better approach is Ajax to upload the image asynchronously. Take a look at this example. It uploads a simple picture CSV if canvas elements are not implemented in the browser and sends a data url formatted string otherwise:</p><pre class=\"prettyprint\">\n$(function() {\n\n	var pos = 0, ctx = null, saveCB, image = [];\n\n	var canvas = document.createElement(\"canvas\");\n	canvas.setAttribute(\'width\', 320);\n	canvas.setAttribute(\'height\', 240);\n	\n	if (canvas.toDataURL) {\n\n		ctx = canvas.getContext(\"2d\");\n		\n		image = ctx.getImageData(0, 0, 320, 240);\n	\n		saveCB = function(data) {\n			\n			var col = data.split(\";\");\n			var img = image;\n\n			for(var i = 0; i &lt; 320; i++) {\n				var tmp = parseInt(col[i]);\n				img.data[pos + 0] = (tmp &gt;&gt; 16) &amp; 0xff;\n				img.data[pos + 1] = (tmp &gt;&gt; 8) &amp; 0xff;\n				img.data[pos + 2] = tmp &amp; 0xff;\n				img.data[pos + 3] = 0xff;\n				pos+= 4;\n			}\n\n			if (pos &gt;= 4 * 320 * 240) {\n				ctx.putImageData(img, 0, 0);\n				$.post(\"/upload.php\", {type: \"data\", image: canvas.toDataURL(\"image/png\")});\n				pos = 0;\n			}\n		};\n\n	} else {\n\n		saveCB = function(data) {\n			image.push(data);\n			\n			pos+= 4 * 320;\n			\n			if (pos &gt;= 4 * 320 * 240) {\n				$.post(\"/upload.php\", {type: \"pixel\", image: image.join(\'|\')});\n				pos = 0;\n			}\n		};\n	}\n\n	$(\"#webcam\").webcam({\n\n		width: 320,\n		height: 240,\n		mode: \"callback\",\n		swffile: \"/download/jscam_canvas_only.swf\",\n\n		onSave: saveCB,\n\n		onCapture: function () {\n			webcam.save();\n		},\n\n		debug: function (type, string) {\n			console.log(type + \": \" + string);\n		}\n	});\n\n});\n</pre><p>The server could then do something like this:</p><pre class=\"prettyprint\">&lt;?php\n\nif ($_POST[\'type\'] == \"pixel\") {\n	// input is in format 1,2,3...|1,2,3...|...\n	$im = imagecreatetruecolor(320, 240);\n\n	foreach (explode(\"|\", $_POST[\'image\']) as $y =&gt; $csv) {\n		foreach (explode(\";\", $csv) as $x =&gt; $color) {\n			imagesetpixel($im, $x, $y, $color);\n		}\n	}\n} else {\n	// input is in format: data:image/png;base64,...\n	$im = imagecreatefrompng($_POST[\'image\']);\n}\n\n// do something with $im\n\n?&gt;</pre><h2>Stream interface</h2><p>The stream mode is also quite the same procedure as the callback mode, with the difference that the <em>onSave</em> callback is called non-stop. The streaming starts with the method <em>webcam.capture()</em>. The <em>webcam.save()</em> method has no further effect.</p><h2>Recompile the Flash binary</h2><p>If you\'ve made changes to the code or did just adjust the size of the video in the XML specification file, you can easily recompile the swf file from Linux console with the provided Makefile. You are required to install the two open source projects <strong>swfmill</strong> and <strong>mtasc</strong> that can be easily installed using apt-get under Debian/Ubuntu:</p><pre>apt-get install swfmill mtasc\nvim src/jscam.xml\nmake</pre><h3>Hint about empty screens after recompilation</h3><p>There is a bug in the current version of swfmill. Please try to downgrade swfmill to <strong>2.0.12</strong>, which fixes the issue!</p>',1),(233,'Does Not Support Your Browser - Modus Create','http://moduscreate.com/automated-ip-configuration-for-react-native-development/',0,0,'\n            \n            <p>A global product development studio that helps companies bring their visions to life.</p>\n            <p>We are a global team of creative technologists and product thinkers that build world-class user experiences for mobile, cloud and connected devices.</p>\n            <div><p>To view our full site, please upgrade your browser to <a href=\"https://www.google.com/chrome/browser/\">Google Chrome</a></p></div>\n          ',1),(234,'Just a Flexbox Grid System','http://gridlex.devlint.fr/',0,0,'\n    <div class=\"grid-2_xs-1\">\n            <div class=\"col\">\n                <h2>Simple. Robust. Responsive. Flexible.</h2>\n                <h3>How it works?</h3>\n                <p>The concept is simple: <br />you need to wrap your <code>.col</code> in a <code>.grid</code>. </p>\n                <p>That\'s all.</p>\n                <p><a href=\"http://gridlex.devlint.fr/cards.html\">You prefer a visual demo?</a></p>\n            </div>\n            \n            <div class=\"col-12\">\n                <h3>What can we expect?</h3>\n                <ul class=\"grid-3_sm-2_xs-1\"><li class=\"col\">Basically each column is the same width as every other cell in the grid.</li>\n                    <li class=\"col\">But you can add sizing classes to individual columns.</li>\n                    <li class=\"col\">For responsive designs, you can add classes based on media-queries.</li>\n                    <li class=\"col\">Top, bottom, or middle. For the grid. And for the columns.</li>\n                    <li class=\"col\">Grids can be nested. Always. Directly in a column.</li>\n                </ul></div>\n        </div>\n    <h2>1. The basic. Just add a class <code>.grid-*</code> (from -1 to -12)</h2>\n        <p><strong>This feature is so simple, but we find it very very rarely in a robust and flexible grid!</strong> <br />Why should we be required to put sizing classes on every single cell when they all have the same width? </p>\n            <p>In this ways, you will always have the specified number of columns in a row:</p>\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        <p><em>But what happens if we have more than 3 columns in a <code>.grid-3</code> ?</em><br />This:</p>\n\n        \n<pre><code>&lt;div class=\"grid-3_xs-1\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h2>2. The precise. Compose cell by cell (with class like <code>.col-*</code>)</h2>\n        <h3>See <a href=\"http://gridlex.devlint.fr/#documentation\">documentation</a> to have the list of availlable classes</h3>\n\n        \n<pre><code>&lt;div class=\"grid\"&gt;\n    &lt;div class=\"col-12\"&gt;...&lt;/div&gt; &lt;!-- first row: one column --&gt;\n    &lt;div class=\"col-6\"&gt;...&lt;/div&gt; &lt;!-- second row: three columns (6+3+3) --&gt;\n    &lt;div class=\"col-3\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-3\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h2>3. The automatic. Just add number of cells you want in the grid (<code>.grid &gt; .col</code>):</h2>\n        <p>Auto width columns, no size on cells ! <br />That\'s a pretty cool feature of flex: the number determines the width (size = grid/cells children).</p>\n        <p><em>Tip: Keep in mind that in this way, your grid will only be a row!</em></p>\n\n        <p>So here we have a grid with one column...</p>\n        \n        <p>... another one with four columns...</p>\n        \n        <p>... and last a grid with ... nine columns?</p>\n        \n\n<pre><code>&lt;div class=\"grid\"&gt; &lt;!-- Four &lt;div class=\"col\"&gt; for 4 columns in the grid --&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h2>Did I mention that you can mix the 3 ways?</h2>\n        \n<pre><code>&lt;div class=\"grid-6_sm-2\"&gt;\n    &lt;!-- first row --&gt;\n    &lt;div class=\"col-8_sm-12\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;!-- second row --&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-5_sm-6\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-1_sm-4\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;!-- third row --&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        \n<pre><code>&lt;div class=\"grid\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-2_sm-12\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-6_sm-12\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n        <h2>We can have a grid without gutter too:</h2>\n        \n<pre><code>&lt;div class=\"grid-noGutter\"&gt;\n    &lt;div class=\"col-12\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-6\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-6\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-4\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-8\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-3\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-9\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-1\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-11\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h2>... and nesting in the grid:</h2>\n        <div class=\"grid\">\n            <div class=\"col-6_sm-12\"><p class=\"demo-explain\">Just an \"empty\" col-6:</p></div>\n            <div class=\"col-6_sm-12\"><p class=\"demo-explain\">Each column can become a grid too (<code>.col-6.grid</code>)</p></div>\n            \n            \n        </div>\n<pre><code>&lt;div class=\"grid\"&gt;\n    &lt;div class=\"col-6\"&gt;\n        col-6\n    &lt;/div&gt;\n    &lt;div class=\"col-6 grid\"&gt;\n        &lt;div class=\"col-4\"&gt;\n            col-4\n        &lt;/div&gt;\n        &lt;div class=\"col-8 grid\"&gt;\n            &lt;div class=\"col-6\"&gt;\n                col-6\n            &lt;/div&gt;\n            &lt;div class=\"col-6\"&gt;\n                col-6\n            &lt;/div&gt;\n            &lt;div class=\"col-4\n                col-4\n            &lt;/div&gt;\n            &lt;div class=\"col-4\"&gt;\n                col-4\n            &lt;/div&gt;\n            &lt;div class=\"col-4\"&gt;\n                col-4\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n    <h2>Horizontal alignment</h2>\n        \n        <div class=\"grid-3-center\">\n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>.grid-center</p>\n                </div>\n            </div>\n        </div>\n        <div class=\"grid-3-right\">\n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>.grid-right</p>\n                </div>\n            </div>\n        </div>\n<pre><code>&lt;div class=\"grid-3\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"grid-3-center\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"grid-3-right\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h2>Vertical alignment on the grid: top</h2>\n        <div class=\"grid\">\n            \n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dicta, dolorum eius esse id labore odit placeat tempora! Alias aliquam aut eaque nulla repudiandae, temporibus voluptatum.</p>\n                </div>\n            </div>\n            \n        </div>\n<pre><code>&lt;div class=\"grid\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h2>Vertical alignment on the grid: middle</h2>\n        <div class=\"grid-middle\">\n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>.grid-middle</p>\n                </div>\n            </div>\n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dicta, dolorum eius esse id labore odit placeat tempora! Alias aliquam aut eaque nulla repudiandae, temporibus voluptatum.</p>\n                </div>\n            </div>\n            \n        </div>\n<pre><code>&lt;div class=\"grid-middle\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h2>Vertical alignment on the grid: bottom</h2>\n        <div class=\"grid-bottom\">\n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>.grid-bottom</p>\n                </div>\n            </div>\n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dicta, dolorum eius esse id labore odit placeat tempora! Alias aliquam aut eaque nulla repudiandae, temporibus voluptatum.</p>\n                </div>\n            </div>\n            \n        </div>\n<pre><code>&lt;div class=\"grid-bottom\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h2>Vertical alignment on the column: grid-middle &amp; mixed columns</h2>\n        <div class=\"grid-4-middle\">\n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>default (middle)</p>\n                </div>\n            </div>\n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquam aperiam architecto aut, commodi deserunt dicta eligendi error incidunt inventore maiores mollitia officiis placeat quibusdam tempora unde veritatis vero voluptas. Ab consectetur delectus nam. Ab animi aspernatur, deserunt eos et, inventore iure laboriosam laborum minus nam nihil quae tempore tenetur ullam.</p>\n                </div>\n            </div>\n            <div class=\"col-bottom\">\n                <div class=\"demo\">\n                    <p>col-bottom</p>\n                </div>\n            </div>\n            \n        </div>\n<pre><code>&lt;div class=\"grid-4-middle\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-bottom\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-top\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n    <h2>Reverse, order and other things</h2>\n\n        <h3>Normal flow</h3>\n        \n<pre><code>&lt;div class=\"grid\"&gt;\n    &lt;div class=\"col\"&gt;A&lt;/div&gt;\n    &lt;div class=\"col\"&gt;B&lt;/div&gt;\n    &lt;div class=\"col\"&gt;C&lt;/div&gt;\n    &lt;div class=\"col\"&gt;D&lt;/div&gt;\n    &lt;div class=\"col\"&gt;E&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h3>Reverse flow</h3>\n        \n<pre><code>&lt;div class=\"grid-reverse\"&gt;\n    &lt;div class=\"col\"&gt;A&lt;/div&gt;\n    &lt;div class=\"col\"&gt;B&lt;/div&gt;\n    &lt;div class=\"col\"&gt;C&lt;/div&gt;\n    &lt;div class=\"col\"&gt;D&lt;/div&gt;\n    &lt;div class=\"col\"&gt;E&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h3>Normal flow with ordering (first / last)</h3>\n        \n<pre><code>&lt;div class=\"grid\"&gt;\n    &lt;div class=\"col-last\"&gt;A&lt;/div&gt;\n    &lt;div class=\"col\"&gt;B&lt;/div&gt;\n    &lt;div class=\"col\"&gt;C&lt;/div&gt;\n    &lt;div class=\"col\"&gt;D&lt;/div&gt;\n    &lt;div class=\"col-first\"&gt;E&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h3>No gutter? Equal-height?</h3>\n        <div class=\"grid-noGutter-equalHeight withBorder\">\n            \n            <div class=\"col\">\n                <div class=\"demo\">\n                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quas laboriosam inventore minima facere possimus quisquam.</p>\n                </div>\n            </div>\n            \n            \n        </div>\n<pre><code>&lt;div class=\"grid-noGutter-equalHeight\"&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n    <h2>Distribution</h2>\n        <h3>Horizontal distribution (grid-spaceBetween)</h3>\n        <p>If you add <code>spaceBetween</code> class, the distribution will have no margin around first and last elements :</p>\n        \n<pre><code>&lt;div class=\"grid-spaceBetween\"&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h3>Horizontal distribution (spaceAround)</h3>\n        <p>If you add <code>grid-spaceAround</code> class, the distribution will have margins around first and last elements :</p>\n        \n<pre><code>&lt;div class=\"grid-spaceAround\"&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n        <h3>Horizontal distribution (width grid-center)</h3>\n        \n<pre><code>&lt;div class=\"grid-center\"&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n    &lt;div class=\"col-2\"&gt;...&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n\n        <div class=\"grid-2_md-1\">\n            <div class=\"col\">\n                <h3>Columns</h3>\n                \n<pre><code>&lt;div class=\"grid-column\"&gt;\n    &lt;div class=\"col-4\"&gt;A&lt;/div&gt;\n    &lt;div class=\"col-2\"&gt;B&lt;/div&gt;\n    &lt;div class=\"col-6\"&gt;C&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n            </div>\n            <div class=\"col\">\n                <h3>Columns-reverse</h3>\n                \n<pre><code>&lt;div class=\"grid-column-reverse\"&gt;\n    &lt;div class=\"col-4\"&gt;A&lt;/div&gt;\n    &lt;div class=\"col-2\"&gt;B&lt;/div&gt;\n    &lt;div class=\"col-6\"&gt;C&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n            </div>\n        </div>\n    <h2>Offset: push a col from left or from right</h2>\n        <div class=\"grid\">\n            <div class=\"col-6\">\n                <div class=\"demo\">\n                    <p>col-6 push-left=\"off-6\"</p>\n                </div>\n            </div>\n        </div>\n<pre><code>&lt;div class=\"grid\"&gt;\n    &lt;div class=\"col-6\" push-left=\"off-6\"&gt;col-6 push-left=\"off-6\"&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n        <div class=\"grid\">\n            \n            <div class=\"col-4\">\n                <div class=\"demo\">\n                    <p>col-4 push-left=\"off-4\"</p>\n                </div>\n            </div>\n        </div>\n<pre><code>&lt;div class=\"grid\"&gt;\n    &lt;div class=\"col-4\"&gt;col-4&lt;/div&gt;\n    &lt;div class=\"col-4\" push-left=\"off-4&gt;col-4 push-left=\"off-4\"&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n        <div class=\"grid\">\n            <div class=\"col-2_xs-6\">\n                <div class=\"demo\">\n                    <p>col-2 push-left-2</p>\n                </div>\n            </div>\n            <div class=\"col-2_xs-6\">\n                <div class=\"demo\">\n                    <p>col-2 push-left=\"off-2\"</p>\n                </div>\n            </div>\n            <div class=\"col-2_xs-6\">\n                <div class=\"demo\">\n                    <p>col-2 push-left=\"off-2\"</p>\n                </div>\n            </div>\n            <div class=\"col-2\">\n                <div class=\"demo\">\n                    <p>col-2 push-right=\"off-2\"</p>\n                </div>\n            </div>\n            <div class=\"col-2\">\n                <div class=\"demo\">\n                    <p>col-2 push-right=\"off-2\"</p>\n                </div>\n            </div>\n            <div class=\"col-2\">\n                <div class=\"demo\">\n                    <p>col-2 push-right=\"off-2\"</p>\n                </div>\n            </div>\n            \n            <div class=\"col-6\">\n                <div class=\"demo\">\n                    <p>col-6 push-left=\"off-1\" push-right=\"off-1\"</p>\n                </div>\n            </div>\n            \n        </div>\n<pre><code>&lt;div class=\"grid\"&gt;\n    &lt;div class=\"col-2\" push-left=\"off-2\"&gt;col-2 push-left=\"off-2\"&lt;/div&gt;\n    &lt;div class=\"col-2\" push-left=\"off-2\"&gt;col-2 push-left=\"off-2\"&lt;/div&gt;\n    &lt;div class=\"col-2\" push-left=\"off-2\"&gt;col-2 push-left=\"off-2\"&lt;/div&gt;\n\n    &lt;div class=\"col-2\" push-right=\"off-2\"&gt;col-2 push-right=\"off-2\"&lt;/div&gt;\n    &lt;div class=\"col-2\" push-right=\"off-2\"&gt;col-2 push-right=\"off-2\"&lt;/div&gt;\n    &lt;div class=\"col-2\" push-right=\"off-2\"&gt;col-2 push-right=\"off-2\"&lt;/div&gt;\n\n    &lt;div class=\"col-2\"&lt;/div&gt;\n    &lt;div class=\"col-6\" push-left=\"off-1\" push-right=\"off-1\"&gt;col-6 push-left=\"1\" push-right=\"1\"&lt;/div&gt;\n    &lt;div class=\"col-2\"&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n    <h2>Grid &amp; associated classes</h2>\n        <pre class=\"doc\"><code>.grid\n  -* (1 to 12)\n    _xs-* (1 to 12)\n    _sm-* (1 to 12)\n    _md-* (1 to 12)\n    _lg-* (1 to 12)\n\n  -center\n  -right\n  -middle\n  -bottom\n  -spaceBetween\n  -spaceAround\n\n  -reverse\n  -column\n  -column-reverse\n\n  -noGutter\n  -equalHeight</code></pre>\n\n        <h2>Columns &amp; associated classes: </h2>\n        <pre class=\"doc\"><code>.col\n  -* (1 to 12)\n  _xs-* (1 to 12)\n  _sm-* (1 to 12)\n  _md-* (1 to 12)\n  _lg-* (1 to 12)\n    i.e. &lt;div class=\"col-12_lg-8_md-6_sm-3_xs-1\"&gt;...&lt;/div&gt;\n\n  .col-first\n  .col-last</code></pre>\n\n        <h2>Offsets: with left=\"\" and right=\"\" attribute</h2>\n<pre class=\"doc\"><code>  .off-* (0 to 11)\n  _xs-* (0 to 11)\n  _sm-* (0 to 11)\n  _md-* (0 to 11)\n  _lg-* (0 to 11)\n\n  -0: reboot the offset (can be usefull in responsive mode with key-suffixes)</code></pre>\n\n        <h2>Gridlex and media-queries</h2>\n        <h3>Because of responsive, you need sometimes to change the size of columns: with this keys as classes you can control your layout by media-queries.</h3>\n        <div class=\"bs-callout\">\n            <table><thead><tr><th>CSS Media Query</th>\n                    <th>Applies</th>\n                    <th>Usage</th>\n                </tr></thead><tbody><tr><td><code>@media screen and (max-width: 35.5em)</code></td>\n                    <td>Max 568px</td>\n                    <td><code><b>_xs</b>-*</code></td>\n                </tr><tr><td><code>@media screen and (max-width: 48em)</code></td>\n                    <td>Max 768px</td>\n                    <td><code><b>_sm</b>-*</code></td>\n                </tr><tr><td><code>@media screen and (max-width: 64em)</code></td>\n                    <td>Max 1024px</td>\n                    <td><code><b>_md</b>-*</code></td>\n                </tr><tr><td><code>@media screen and (max-width: 80em)</code></td>\n                    <td>Max 1280px</td>\n                    <td><code><b>_lg</b>-*</code></td>\n                </tr></tbody></table></div>\n    <h2>When \"Can I use\" Gridlex?</h2>\n    \n',1),(235,'Booking.js embeddable calendar widget for appointments','http://booking.timekit.io/',0,0,'<div class=\"w-col w-col-4 w-col-stack column column-faq\"><h3 class=\"faq_heading\">What can i use it for?</h3><p class=\"faq_paragraph\">Sky\'s the limit! Here\'s a few ideas:<br />- Meeting rooms<br />- Support calls<br />- Sales meetings<br />- Dentist appointments<br />- Car rentals<br />- Yoga sessions<br />- Team workshops</p><h3 class=\"faq_heading\">Can i use it In web apps?</h3><p class=\"faq_paragraph\">Sure thing. There are two ways to use the library: with autoloading (default) or by manual initialization. With the latter, you can setup the widget asynchronously from the page load and you can even create multiple widget instances/accounts on the same page. Read the docs on <a class=\"faq_link\" href=\"http://github.com/timekit-io/booking.js\">Github</a></p></div><div class=\"w-col w-col-4 w-col-stack column column-faq\"><h3 class=\"faq_heading\">does it handle localization?</h3><p class=\"faq_paragraph\">Timezones are fully supported and a timezone difference helper can be enabled/disabled. With regard to time/date formatting, there\'s two modes: 12-hour clock with M/D/Y and Sunday as first weekday vs. 24-hour clock with D/M/Y and Monday as first weekday. If you like more control, you can pass settings directly to <a href=\"http://fullcalendar.io/docs/\" class=\"faq_link\">FullCalendar</a>.</p><h3 class=\"faq_heading\">more availability options?</h3><p class=\"faq_paragraph\">The widget supports all of the Timekit API\'s <a href=\"http://developers.timekit.io/docs/find-time-filters\" class=\"faq_link\">FindTime filters</a>, so you can mix &amp; match it however you like it. You can even enforce mutual availability check across multiple users/calendars.</p></div><div class=\"w-col w-col-4 w-col-stack column column-faq\"><h3 class=\"faq_heading\">Do i need a google account?</h3><p class=\"faq_paragraph\">Nope. Although the wizard on this page is made for Google usage, you can use Timekit.io as a standalone calendar provider. Create a user account <a class=\"faq_link\" href=\"http://timekit.io/get-started\">here</a>, generate a client-token and just provide the e-mail and API token to Booking.js in the configuration.</p><h3 class=\"faq_heading\">Is it Free &amp; open source?</h3><p class=\"faq_paragraph\">Yes &amp; <a class=\"faq_link\" href=\"https://github.com/timekit-io/booking-js\">yes</a>! Booking.js actually consists of two components: FullCalendar and the Timekit API. The actual implementation is open source on <a class=\"faq_link\" href=\"https://github.com/timekit-io/booking.js\">Github</a> and we\'d love PRs. It\'s worth noting that the actual use of the widget is meant to be included with JS served from our CDN so we can push out updates and track usage.</p></div>',1),(236,'IBM100 - Icons of Progress','http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/',0,0,'\n\n<div>\n<h2>IBM’s 100 Icons of Progress</h2> \n	<p>\n	In the span of a century, IBM has evolved from a small business that made scales, time clocks and tabulating machines to a globally integrated enterprise with more than 400,000 employees and a strong vision for the future. The stories that have emerged throughout our history are complex tales of big risks, lessons learned and discoveries that have transformed the way we work and live. These 100 iconic moments—these Icons of Progress—demonstrate our faith in science, our pursuit of knowledge and our belief that together we can make the world work better.\n	</p>\n</div><ul class=\"clearfix\"><li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: September 20, 2011</span>\n<img alt=\"IBM100 A Business and Its Beliefs  iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/B078884Y24478I78/us__en_us__ibm100__business_and_beliefs__icon__80x48.png\" /></div>\n<p>\n</p><h3>A Business and Its Beliefs</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 A Business and Its Beliefs  iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/F904887Q33643Z80/us__en_us__ibm100__business_and_beliefs__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>A Business and Its Beliefs</h3>\n<p>Corporate cultures usually flow from the CEO downward, but from the start C-T-R, and later IBM, took a different path. It intentionally built a culture that flows up from its people, centered on a set of shared beliefs about the company’s place in the world and how to act in achieving that. This has been the key to IBM’s vitality for over a century. In 2003, IBM CEO Sam Palmisano again turned to IBMers to help form the company’s values via a  “ValuesJam,” an online, three-day event. The results were strikingly familiar—in keeping with those set by Thomas Watson Sr. in 1914.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/bizbeliefs/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: September 16, 2011</span>\n<img alt=\"IBM100 Sustainable Cocoa iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/W817846Y53292E11/us__en_us__ibm100__sustainable_cocoa__icon__80x48.png\" /></div>\n<p>\n</p><h3>Sustainable Cocoa</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Sustainable Cocoa iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/U912332D55748I27/us__en_us__ibm100__sustainable_cocoa__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Sustainable Cocoa</h3>\n<p>Recently, IBM completed the initial genomic sequence of cocoa—in conjunction with chocolate maker Mars, Incorporated, and the United States Department of Agriculture-Agricultural Research Service (USDA-ARS)—in hopes of developing new strains of heartier, higher-yielding and blight-resistant cocoa, not to mention better-tasting chocolate. The project marks a significant scientific milestone that is already starting to benefit farmers, particularly in West Africa where about 70 percent of the world’s cocoa crop is produced. It’s one example of how IBM is leveraging emerging technologies to allow more directed breeding of sustainable food resources.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/cocoagene/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: September 14, 2011</span>\n<img alt=\"IBM100 Preserving the Legacy of Film iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/X962638Y14245V07/us__en_us__ibm100__preserving_legacy_film__icon__80x48.png\" /></div>\n<p>\n</p><h3>Preserving the Legacy of Film</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Preserving the Legacy of Film iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/E072452M61685R65/us__en_us__ibm100__preserving_legacy_film__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Preserving the Legacy of Film</h3>\n<p>Due to disintegrating film stock, the world’s film history is evaporating. IBM is working to save cinematic history through a collaboration with University of California Los Angeles and The Film Foundation, digitizing historical film content and building an electronic archive. IBM is also partly responsible for the digital video in use on the Internet today, having worked in the early 1990s to develop encoding and decoding standards that made digital video possible.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/digitizingfilm/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: September 13, 2011</span>\n<img alt=\"IBM100 Deep Blue iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/V279397B15264U75/us__en_us__ibm100__deep_blue__icon__80x48.png\" /></div>\n<p>\n</p><h3>Deep Blue</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Deep Blue iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/R186510G31925Z11/us__en_us__ibm100__deep_blue__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Deep Blue</h3>\n<p>In the mid 1980s, two PhD students at Carnegie Mellon University, Murray Campbell and Feng-hsiung Hsu, set out to build a chess machine that could beat the best human player. IBM Research hired the two scientists and gave them the resources to build Deep Blue, a dedicated chess-playing supercomputer. In 1997, in a historic match, Deep Blue became the first computer to defeat a reigning world chess champion. “In brisk and brutal fashion,” The New York Times reported, “the I.B.M. computer Deep Blue unseated humanity, at least temporarily, as the finest chess playing entity on the planet.” After a noted absence, Deep Blue led the way for IBM’s return to the supercomputing business.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/deepblue/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: September 09, 2011</span>\n<img alt=\"IBM100 The Cell Broadband Engine iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/C837403P94030S92/us__en_us__ibm100__cell_broadband__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Cell Broadband Engine</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Cell Broadband Engine iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/E777263W64911G84/us__en_us__ibm100__cell_broadband__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Cell Broadband Engine</h3>\n<p>Gaming is serious business. In 2000, Sony Group and Toshiba Corporation issued a challenge to provide power-efficient and cost-effective high-performance processing for a wide range of applications, including the most demanding consumer appliance: game systems. The result came five years later with the release of the Cell Broadband Engine multi-core technology, developed jointly by IBM, Sony Group and Toshiba Corporation. Today, besides the Sony PlayStation 3 computer entertainment system, the Cell Broadband Engine can be found in several Toshiba REGZA televisions, video production equipment from Sony, the IBM BladeCenter QS20, QS21 and QS22 servers, as well as IBM Roadrunner, one of the world’s most power-efficient supercomputers.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/cellengine/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: September 08, 2011</span>\n<img alt=\"IBM100 Exploring Undersea Frontiers iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/A783590C44064V51/us__en_us__ibm100__exploring_undersea_frontiers__icon__80x48.png\" /></div>\n<p>\n</p><h3>Exploring Undersea Frontiers</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Exploring Undersea Frontiers iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/D473853K02134X12/us__en_us__ibm100__exploring_undersea_frontiers__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Exploring Undersea Frontiers</h3>\n<p>In 1965, an IBM communications system was one of the only links connecting oceanauts in the world’s first ocean floor colony to a support team on the surface. The project, led by famous French sea explorer Jacques Cousteau, was a highlight of IBM’s involvement in undersea research, which included projects in underwater crime scene investigation and the microscopic analysis of compounds from 35,000 feet under the ocean surface.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/underseafrontiers/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: September 07, 2011</span>\n<img alt=\"IBM100 The Preservation of Culture Through Technology iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/D825838U74581A10/us__en_us__ibm100__pres_of_culture__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Preservation of Culture Through Technology</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Preservation of Culture Through Technology iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/U403950M05829V61/us__en_us__ibm100__pres_of_culture__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Preservation of Culture Through Technology</h3>\n<p>Through its computer technologies—starting with punched card data processing in the late 1940s through the creation of virtual worlds of today—IBM has helped bridge time and distance by preserving, recording and even re-creating ancient languages and cultures. IBM has undertaken cultural preservation projects with institutions in Russia, Spain, Indonesia, the United States, Italy, China and Egypt.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/preservation/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: September 02, 2011</span>\n<img alt=\"IBM100 Racetrack Memory: The Future of Data Storage iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/J350713J35085V24/us__en_us__ibm100__racetrack_memory__icon__80x48.png\" /></div>\n<p>\n</p><h3>Racetrack Memory</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Racetrack Memory: The Future of Data Storage iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/C148105Q14091Z22/us__en_us__ibm100__racetrack_memory__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Racetrack Memory</h3>\n<h4>The Future of Data Storage</h4>\n<p>IBM researcher Stuart Parkin pioneered the development of racetrack memory, starting in about 2004. Parkin conceived of a device consisting of a city of skyscrapers—each one only hundreds of atoms wide—of magnetic material, with each floor of each skyscraper containing a single bit of data. The technique utilizes the spin of electrons to manipulate these bits, in effect shooting them around a racetrack, up and down the column. Though it may take a few years before it can be commercialized, once completed, it could allow for the kind of mass storage that now requires a disk drive to fit on a thumbnail-size chip that barely uses any energy. A handheld device could hold a few thousand movies, run for weeks at a time on a single battery and be practically unbreakable.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/racetrack/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: August 30, 2011</span>\n<img alt=\"IBM100 Popularizing Math and Science iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/W369403M95964U87/us__en_us__ibm100__PopularMathAndSci__icon__80x48.png\" /></div>\n<p>\n</p><h3>Popularizing Math and Science</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Popularizing Math and Science iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/I499453P87139M42/us__en_us__ibm100__PopularMathAndSci__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Popularizing Math and Science</h3>\n<p>In the mid-twentieth century, IBM worked with Charles and Ray Eames to make films and design exhibitions that brought widespread popular appeal to math and science concepts. These included Mathematica, the interactive museum exhibit, and the film “Powers of Ten”, both of which remain culturally and historically significant today. IBM continues to promote math and science through programs such as TryScience, a website offering fun-oriented science content, and Transition to Teaching, which supports employees in encore careers as math and science teachers.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/mathandscience/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: August 26, 2011</span>\n<img alt=\"IBM100 Pioneering Speech Recognition iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/X928775X98973Z55/us__en_us__ibm100__pioneering_speech__icon__80x48.png\" /></div>\n<p>\n</p><h3>Pioneering Speech Recognition</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Pioneering Speech Recognition iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Z401941R24400H48/us__en_us__ibm100__pioneering_speech__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Pioneering Speech Recognition</h3>\n<p>At the Seattle World’s Fair in 1962, IBM showcased the world’s most advanced speech recognition system, the “Shoebox.” It could understand 16 words, including the numbers zero through nine as well as minus, plus, subtotal, total, false and off. Visitors to the IBM pavilion could speak to the Shoebox via microphone, often looking on in amazement as it printed answers to simple arithmetic. After the Shoebox breakthrough, the development of speech recognition accelerated, aided by the exponential growth in computing power. The technology significantly increased computing access for people with vision, mobility and other impairments. Today, speech recognition is pervasive, and features a broad vocabulary and astonishing accuracy.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/speechreco/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: August 23, 2011</span>\n<img alt=\"IBM100 The Application of Spintronics iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Q529953W70477R91/us__en_us__ibm100__spintronics__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Application of Spintronics</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Application of Spintronics iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/T948748F02394U87/us__en_us__ibm100__spintronics__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Application of Spintronics</h3>\n<p>IBM has been leading the research and application into an emerging technology called spintronics—short for “spin electronics”—which was coined in 1996 to describe devices that take advantage of “spin,” a quantum-mechanical property of an electron. The physics of spintronics allow for significantly increased data capacity and may enable the leap to quantum computing.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/spintronics/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: August 19, 2011</span>\n<img alt=\"IBM100 Nanotechnology iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/R181193I37157D91/us__en_us__ibm100__nanotechnology__icon__80x48.png\" /></div>\n<p>\n</p><h3>Nanotechnology</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Nanotechnology iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/P350399T59982C07/us__en_us__ibm100__nanotechnology__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Nanotechnology</h3>\n<p>Our everyday computing devices depend on breakthroughs in chip technology. As chips get smaller, they must also get smarter. IBM’s research in nanotechnology has led to innovations in not only chip technology, but healthcare as well, including sequencing the DNA strand at the nano level and developing a nanostructure that can fight the Methicillin-resistant Staphylococcus aureus (MRSA) infection.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/nanotechnology/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: August 16, 2011</span>\n<img alt=\"IBM100 The Professional Sales Force iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/L642651P69729N87/us__en_us__ibm100__pro_sales_force__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Professional Sales Force</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Professional Sales Force iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/M726383N12707U52/us__en_us__ibm100__pro_sales_force__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Professional Sales Force</h3>\n<p>Thomas Watson Sr. believed a sales force could be a competitive advantage. Soon after taking charge of C-T-R in 1914, he established a dress code, no-drinking policy and the Hundred Percent Club to encourage employees to achieve 100 percent of their sales target. By the 1920s, he’d established a unique sales school in Endicott. Hiring only the best college graduates, IBM would put them through six weeks of intensive training. The IBM sales force became known worldwide for a new standard of professional service, and for cultivating client relationships founded on trust.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/ibmsales/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: August 12, 2011</span>\n<img alt=\"IBM100 The Invention of Stream Computing iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/V323796X18125K72/us__en_us__ibm100__stream_computing__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Invention of Stream Computing</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Invention of Stream Computing iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Z746616R91226F76/us__en_us__ibm100__stream_computing__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Invention of Stream Computing</h3>\n<p>In 2009, IBM announced the availability of its stream computing software, a breakthrough in real-time data analytics. Stream computing gathers multiple streams of data “on the fly,” using advanced algorithms to deliver nearly instantaneous analysis to decision makers. Flipping the traditional data analytics strategy in which data is collected in a database to be searched or queried for answers, stream computing can be used for complex, dynamic situations that require immediate decisions, such as predicting the spread of an epidemic or monitoring changes in the condition of premature babies.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/streamcomputing/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: August 09, 2011</span>\n<img alt=\"IBM100 Pioneering Genetic Privacy iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/G907628G06253E13/us__en_us__ibm100__genetic_privacy__icon__80x48.png\" /></div>\n<p>\n</p><h3>Pioneering Genetic Privacy</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Pioneering Genetic Privacy iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/C255432F40226B52/us__en_us__ibm100__genetic_privacy__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Pioneering Genetic Privacy</h3>\n<p>In October 2005, IBM became the first major corporation in the world to establish a genetics privacy policy that prohibits current or future employees’ genetic information from being used in employment decisions. “What I.B.M. is doing is significant because you have a big, leadership company that is saying to its workers, ‘We aren’t going to use genetic testing against you,’” said Arthur Caplan, director of the Center for Bioethics at the University of Pennsylvania medical school in an interview with The New York Times.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/geneticprivacy/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: August 05, 2011</span>\n<img alt=\"IBM100  Power4: The First Multi-Core 1GHz Processor  iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/X577640A32065Y25/us__en_us__ibm100__power4__icon__80x48.png\" /></div>\n<p>\n</p><h3>Power 4</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100  Power4: The First Multi-Core 1GHz Processor  iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/X821634M08399W30/us__en_us__ibm100__power4__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Power 4</h3>\n<h4>The First Multi-Core, 1GHz Processor</h4>\n<p>In 2001, IBM retooled the IBM RS/6000 and IBM AS/400 (IBM eServer pSeries and iSeries) systems by updating their core processors. The new processor was called POWER4, and it was the first multi-core, 1GHz processor in history. The high-performance, very-large-scale integration (VLSI) chip included two 64-bit PowerPC microprocessors, connected at high bandwidth to an on-chip memory subsystem with a shared L2-cache memory, and with high-speed busses and I/O to enable efficient 8-way systems. The result: POWER4 was able to operate at a clock frequency greater than 1GHz. IBM research and engineering teams in Yorktown, Poughkeepsie and Austin all contributed to the groundbreaking innovation.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/power4/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: August 02, 2011</span>\n<img alt=\"IBM100 The Mobilization of Relief Efforts iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/C822630V40087C07/us__en_us__ibm100__relief_efforts__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Mobilization of Relief Efforts</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Mobilization of Relief Efforts iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/M959149B19697R57/us__en_us__ibm100__relief_efforts__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Mobilization of Relief Efforts</h3>\n<p>The tragic series of devastating tsunamis in December of 2004 killed more than 230,000 people and left 1.5 million people homeless. Within hours, country by country, IBM was assembling resources for relief, including a customized database to help track victims and goods; a wireless system running a disaster management network—in addition to material goods, counseling and training. It is just one example of how IBM assists in crisis management, reconstruction and aid distribution, applying its expertise and resources to ease suffering and rebuild lives.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/relief/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 29, 2011</span>\n<img alt=\"IBM100 Relational Database iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/L149377G59494E82/us__en_us__ibm100__relational_database__icon__80x48.png\" /></div>\n<p>\n</p><h3>Relational Database</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Relational Database iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/I217927F12489D66/us__en_us__ibm100__relational_database__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Relational Database</h3>\n<p>Until the mid-1970s, computers sorted information using rigid, one-off database programs. IBM researcher E. F. “Ted” Codd wanted to improve the way data was sorted and handled. He sought to create a generalized description of how to store, update and extract data with accuracy, and query responses so any changes to data produced consistent results. In 1970, Codd completed his definition of the relational database which became the foundation for IBM DB2 products.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/reldb/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 26, 2011</span>\n<img alt=\"IBM100 Information Management System iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Q866572D87859O77/us__en_us__ibm100__info_mgmt__icon__80x48.png\" /></div>\n<p>\n</p><h3>Information Management System</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Information Management System iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/F868320F30503V38/us__en_us__ibm100__info_mgmt__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Information Management System</h3>\n<p>In the 1960s, US President John F. Kennedy challenged America’s technical industries to send an American man to the moon, launching the Mercury missions, which led to the Gemini and ultimately the Apollo program that landed a man on the moon. IBM designed an automated system to manage large bills of material for the project. That system, called Information Control System and Data Language/Interface (ICS/DL/I), was installed in April 1968. A few short months later, its first “READY” message was displayed on an IBM 2740 typewriter terminal at NASA. In 1969, the newly renamed IBM Information Management System/360 became available to the IT world. In the more than 40 years since, IBM IMS has been critical to the database management system revolution, continually evolving to meet the data processing requirements demanded by businesses and governments.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/ibmims/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 22, 2011</span>\n<img alt=\"IBM100 Copper Interconnects: The Evolution of Microprocessors iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/L403000X07492N01/us__en_us__ibm100__copper_interconnects__icon__80x48.png\" /></div>\n<p>\n</p><h3>Copper Interconnects</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Copper Interconnects: The Evolution of Microprocessors iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/E443595M13777Y04/us__en_us__ibm100__copper_interconnects__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Copper Interconnects</h3>\n<h4>The Evolution of Microprocessors</h4>\n<p>In 1997, IBM researchers surged ahead of a crowded field when they announced that manufacturing chips with copper interconnects would make microprocessors faster, smaller and less expensive than using aluminum. Copper wires conducted electricity with about 40 percent less resistance than aluminum, which resulted in an additional 15 percent burst in microprocessor speed. It was another breakthrough that created a new inflection point in the industry and positioned IBM as the global leader.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/copperchip/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 20, 2011</span>\n<img alt=\"IBM100 RISC Architecture iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/A546588D78103O12/us__en_us__ibm100__risc_architecture__icon__80x48.png\" /></div>\n<p>\n</p><h3>RISC Architecture</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 RISC Architecture iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/U506277T26571L33/us__en_us__ibm100__risc_architecture__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>RISC Architecture</h3>\n<p>The first prototype computer employing RISC (reduced instruction set computer) architecture was developed at IBM in 1980. By allowing commands to access previously unused memory space, RISC enabled computers to work approximately twice as fast as other machines on the same number of circuits. RISC was an important innovation in system design because it eliminated wasted space in the information pipeline, and was widely viewed as the dominant computing architecture of the future. Its creator, John Cocke, received for his efforts the US National Medal of Science (1994) and the US National Medal of Technology (1991).</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/risc/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 19, 2011</span>\n<img alt=\"IBM100 Innovating the Self-Service Kiosk iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Y686481L49656Y51/us__en_us__ibm100__innovate_kiosk__icon__80x48.png\" /></div>\n<p>\n</p><h3>Innovating the Self-Service Kiosk</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Innovating the Self-Service Kiosk iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/S004707G41748J97/us__en_us__ibm100__innovate_kiosk__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Innovating the Self-Service Kiosk</h3>\n<p>IBM built upon magnetic stripe technology to continually expand its applications for self-service transactions, reaching a breakthrough in the IBM 2984, one of the earliest automated teller machines (ATMs). The self-service kiosk was activated by a magnetic-strip credit card and could be installed in the wall of a bank to dispense money day or night. Today, IBM is an industry leader in self-service kiosk innovation, enabling transactions in postal-service kiosks, airport check-in terminals, hotels, fitness centers, stores and other locations, as well as in banks.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/selfservicekiosk/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 15, 2011</span>\n<img alt=\"IBM100 The Invention of the Rewritable Magneto-Optical Disk iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/O250727U54606L61/us__en_us__ibm100__invent_rewritable_cd__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Invention of the Rewritable Magneto-Optical Disk</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Invention of the Rewritable Magneto-Optical Disk iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/L396210A28575J19/us__en_us__ibm100__invent_rewritable_cd__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Invention of the Rewritable Magneto-Optical Disk</h3>\n<p>In the early 1970s, IBM scientists were investigating metallic films that displayed unique magnetic characteristics. Watson Research Center scientists Praveen Chaudhari, Jerome J. Cuomo and Richard J. Gambino were examining the magnetic structure and electronic properties of these films when they discovered the special magnetic materials that made rewritable-optical-disk data storage possible. For their work, they received the 1995 US National Medal of Technology—the nation’s highest award for technical innovation.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/rewritablecd/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 13, 2011</span>\n<img alt=\"IBM100 Information-Based Medicine iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Y083430S62087U38/us__en_us__ibm100__info_based_medicine__icon__80x48.png\" /></div>\n<p>\n</p><h3>Information-Based Medicine</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Information-Based Medicine iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/X736984W28282G96/us__en_us__ibm100__info_based_medicine__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Information-Based Medicine</h3>\n<p>In 2006, IBM helped create EuResist, a project that would help doctors prescribe more effective, tailored drug “cocktails” to HIV patients, using a database of more than 33,000 previous treatment cases. Through healthcare innovations such as EuResist, the World Community Grid and the Watson computer, IBM is leading the world in using data analysis and information technology to build smarter systems to more effectively fight illnesses such as AIDS, HIV and cancer.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/medicaloutcome/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 12, 2011</span>\n<img alt=\"IBM100 The Punched Card Tabulator iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/K309272H84569H22/us__en_us__ibm100__tabulator__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Punched Card Tabulator</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Punched Card Tabulator iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/D201133P39891P23/us__en_us__ibm100__tabulator__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Punched Card Tabulator</h3>\n<p>In the late 1880s, Herman Hollerith, a young technical whiz at the US Census Bureau, had an idea for a machine that could count and sort census results far faster than human clerks. The bureau funded Hollerith’s work, and the first tabulating machines helped count the 1890 census, saving the bureau several years’ work and more than US$5 million. Hollerith left the bureau to form the Tabulating Machine Company, selling his system to other countries’ census offices and then to businesses such as railroads and retailers. Hollerith had little competition, and his machines and punched cards became the standard for the industry. In 1911, financier Charles Flint bought the Tabulating Machine Company and merged it with the International Time Recording Company and the Computing Scale Company of America to form the Computing-Tabulating-Recording Company, or C-T-R, later renamed IBM.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/tabulator/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 08, 2011</span>\n<img alt=\"IBM100 Medicine On-Demand iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/A777873H80160E75/us__en_us__ibm100__med_on_demand__icon__80x48.png\" /></div>\n<p>\n</p><h3>Medicine On Demand</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Medicine On-Demand iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/H555273Y24608D71/us__en_us__ibm100__med_on_demand__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Medicine On Demand</h3>\n<p>Malaria kills about 800,000 people each year, the vast majority of whom live in Sub-Saharan Africa. But stock-outs of malaria treatments in many Sub-Saharan African countries continue to be a problem. Launched in 2009, “SMS for Life” aims to reduce out-of-stock incidents for five key malaria medicines in the region. As Tanzanian health workers send weekly stock count text messages to a centralized database, district managers and the National Malaria Control Programme can use any Internet browser to access supply levels and provide regions with adequate medicine. Inexpensive IBM solutions like this increase inventory visibility throughout the supply chain and help detect signs of an epidemic—increasing public safety and reducing needless deaths.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/medicineon-demand/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 07, 2011</span>\n<img alt=\"IBM100 Radiotype Wireless Data Transmission iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/A575422A27480M32/us__en_us__ibm100__radiotype__icon__80x48.png\" /></div>\n<p>\n</p><h3>Radiotype Wireless Data Transmission</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Radiotype Wireless Data Transmission iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/D963905Y85293S74/us__en_us__ibm100__radiotype__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Radiotype Wireless Data Transmission</h3>\n<p>In 1935, Antarctic explorer Admiral Richard Byrd used an IBM Radiotype machine to transmit, by microwaves, the word “WATSON” from the South Pole to a lab in New Jersey—approximately 11,000 miles—signaling a new method in text transmission. When the US entered World War II, IBM lent Radiotype machinery to the Signal Corps, which sent a wartime peak of 50 million words each day among six stations at 100 words per minute. Though IBM did not pursue a market for Radiotype after the war, it showed a new generation what was possible in data communications, and helped drive the adoption of more advanced networking technologies.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/radiotype/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 06, 2011</span>\n<img alt=\"IBM100 TAKMI iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/A827242L05829E45/us__en_us__ibm100__TAKMI__icon__80x48.png\" /></div>\n<p>\n</p><h3>TAKMI</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 TAKMI iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/O202304T93738V30/us__en_us__ibm100__TAKMI__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>TAKMI</h3>\n<h4>Bringing Order to Unstructured Data</h4>\n<p>Before 1997, the process of analytics dealt only with structured information. Most of the world’s information, however, is chaotic, unstructured data and text. In response, IBM developed TAKMI, which provides businesses with detailed information, trend identification and otherwise-undetectable insights—helping inform problem-solving and context-based decision-making. Although TAKMI was created to analyze call center logs, IBM quickly realized its potential for broader applications. A medical version of the TAKMI system is analyzing medical publications, taking inventory, and mapping unstructured medical data to identify patterns and enable intelligent clinical decisions.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/takmi/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: July 01, 2011</span>\n<img alt=\"IBM100 A Commitment to Employee Education iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/U013504F88099E94/us__en_us__ibm100__employee_education__icon__80x48.png\" /></div>\n<p>\n</p><h3>A Commitment to Employee Education</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 A Commitment to Employee Education iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/X556061L57489Y87/us__en_us__ibm100__employee_education__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>A Commitment to Employee Education</h3>\n<p>Thomas Watson Sr. said “there is no saturation point in education” and in 1916, he created the IBM Education Program. Over the next two decades, the program expanded to include management education, study clubs and the construction of a schoolhouse and laboratory. Between 1938 and 1952, 40 percent of Endicott employees were enrolled in classes, covering 33 subjects. In 1961 alone, 17,000 employees participated in courses. Today, IBM continues to evolve its commitment to education by offering thousands of learning experiences across roles and geographies in a multitude of in-person and virtual formats.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/employeeedu/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 29, 2011</span>\n<img alt=\"IBM100 The First Nationwide Smart Energy and Water Grid iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/A903994O60421J78/us__en_us__ibm100__smart_energy_water_grid__icon__80x48.png\" /></div>\n<p>\n</p><h3>The First Nationwide Smart Energy and Water Grid</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The First Nationwide Smart Energy and Water Grid iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Z390954E71516C38/us__en_us__ibm100__smart_energy_water_grid__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The First Nationwide Smart Energy and Water Grid</h3>\n<p>The island nation of Malta turned to IBM to help mitigate its two most pressing issues—water shortage and skyrocketing energy costs. The result is a combination smart water/grid system launched in 2009 that uses instrumented digital meters to monitor waste, incentivize efficient resource use, deter theft and reduce dependence on oil and processed seawater. Together, Malta and IBM are building the world’s first national smart utility system.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/gridnation/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 28, 2011</span>\n<img alt=\"IBM100 New Business Models for Telecom iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/X065997C52610P01/us__en_us__ibm100__new_bus_models_telecom__icon__80x48.png\" /></div>\n<p>\n</p><h3>New Business Models for Telecom</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 New Business Models for Telecom iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/K146013S76998K63/us__en_us__ibm100__new_bus_models_telecom__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>New Business Models for Telecom</h3>\n<p>To capture the breakneck growth in India’s telecommunications market, Bharti Airtel needed a new business model. The communications service provider (CSP) worked with IBM business consultants to outsource and integrate functions such as network management, help-desk support and IT. This freed the company to focus on high-value objectives such as new services and customer loyalty. Since 2004, Bharti Airtel has grown from six million subscribers to more than 150 million. This year, Bharti expands its model to Africa, where IBM will manage the computing technology and services for a mobile network spanning 16 countries.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/smartertelco/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 24, 2011</span>\n<img alt=\"IBM100 The Automation of Personal Banking iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/U336208Y76044Y22/us__en_us__ibm100__CICS__icon__80x48.png\" /></div>\n<p>\n</p><h3>CICS</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 CICS: Securing Online Transactions iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/N093774P28942A85/us__en_us__ibm100__CICS__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>CICS</h3>\n<h4>Securing Online Transactions</h4>\n<p>In the late 1960s, IBM engineer Ben Riggins was working on implementing IBM computers for the Virginia Electric Power Company. VEPCO was interested in setting up customer service centers that were tied in electronically to the company’s mainframe—except no software existed to execute transactions from the field. Riggins developed a piece of software called IBM CICS (Customer Information Control System). CICS blossomed into standard IT middleware, and now processes millions of transactions each day. It is considered one of the most important software products of all time, and one of the most profitable products in the history of IBM.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/cics/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 23, 2011</span>\n<img alt=\"IBM100 Cryptography for a Connected World iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/H986462F58994S16/us__en_us__ibm100__cryptography__icon__80x48.png\" /></div>\n<p>\n</p><h3>Cryptography for a Connected World</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Cryptography for a Connected World iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/G501028N17693Z64/us__en_us__ibm100__cryptography__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Cryptography for a Connected World</h3>\n<p>In a world increasingly dependent on electronic data, protected data storage emerged as a critical security concern across all industries and in government. Preparing for this challenge, IBM developed its Data Encryption Standard (DES), a cryptographic algorithm to secure data. In 1977, the US National Bureau of Standards, working with the National Security Agency, adopted DES as the official Federal Information Processing Standard. It quickly became the international standard of protecting sensitive information, keeping the world’s data secure for more than two decades. The wide acceptance of DES solidified IBM’s thought leadership position and holistic approach to data management.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/cryptography/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 21, 2011</span>\n<img alt=\"IBM100 Innovating the Fan Experience iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/P488922W55864F03/us__en_us__ibm100__fan_experience__icon__80x48.png\" /></div>\n<p>\n</p><h3>Innovating the Fan Experience</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Innovating the Fan Experience iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/E599490J42873W50/us__en_us__ibm100__fan_experience__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Innovating the Fan Experience</h3>\n<p>Since 1990, IBM has worked with the All England Tennis Club to make the Wimbledon Championships the smartest professional tennis tournament, delivering a front-row experience to millions of fans around the world. Wimbledon is one of the IBM Media and Entertainment division’s efforts to help its clients, from professional sports leagues to music and movie production companies, develop new business models that embrace innovative ways of delivering content to customers.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/ibmfan/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 16, 2011</span>\n<img alt=\"IBM100 IBM is Founded iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/O429831W62747E30/us__en_us__ibm100__ibm_founded__icon__80x48.png\" /></div>\n<p>\n</p><h3>IBM Is Founded</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 IBM is Founded iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/S797511P03658G31/us__en_us__ibm100__ibm_founded__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>IBM Is Founded</h3>\n<p>In 1911, international businessman Charles Flint engineered the merger of Hollerith’s Tabulating Machine Company with two other firms—the Computing Scale Company of America, an Ohio manufacturer of meat slicers and scales, and the International Time Recording Company, a maker of industrial clocks. This new conglomerate was named Computing-Tabulating-Recording Company, and it bore the seeds of what would become IBM. Recognizing the need for strong leadership to integrate such disparate organizations, Flint hired Thomas Watson Sr. as a general manager in 1914. Ten years later, with revenues of $11 million or roughly 13 times its original annual sales, 3384 employees and a strong vision for the future, C-T-R changed its name to International Business Machines.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/founded/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 15, 2011</span>\n<img alt=\"IBM100 A Global Volunteer Network iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Z699553I31700G99/us__en_us__ibm100__global_volunteer_network__icon__80x48.png\" /></div>\n<p>\n</p><h3>A Global Volunteer Network</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 A Global Volunteer Network iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/N182160W44418D91/us__en_us__ibm100__global_volunteer_network__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>A Global Volunteer Network</h3>\n<p>The IBM On Demand Community was established in 2003 as an online system for IBM employees and retirees to formalize their participation in volunteerism. It takes a uniquely IBM approach with a systems-management foundation, the capability of scaling on a global level and a focus on expertise-based service. The global system connects the strengths and skills of each employee and retiree with programs, resources, software and tracking solutions for a host of volunteer opportunities in education and with not-for-profit organizations. In the past five years, IBM surpassed 10 million hours of volunteer work tracked through the On Demand Community system.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/volunteerism/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 14, 2011</span>\n<img alt=\"IBM100 Smarter Planet iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/F084540P78557U91/us__en_us__ibm100__smarter_planet__icon__80x48.png\" /></div>\n<p>\n</p><h3>Smarter Planet</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Smarter Planet iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/W487958F61513N21/us__en_us__ibm100__smarter_planet__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Smarter Planet</h3>\n<p>In 2008, IBM launched the Smarter Planet agenda as a way to help forward-thinking leaders in business, government and civil society around the world capture the potential of smarter systems to achieve economic growth, near-term efficiency, sustainable development and societal progress. Predicated on the world becoming more instrumented, interconnected and intelligent, Smarter Planet is IBM’s latest “big bet” on the future, with wide-ranging possibilities for improving the transportation, education, energy, food and water systems that run our everyday work and personal lives.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/smarterplanet/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 09, 2011</span>\n<img alt=\"IBM100 Globally Integrated Enterprise iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/E133966E27933B58/us__en_us__ibm100__gie__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Globally Integrated Enterprise</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Globally Integrated Enterprise iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/G129277T86897A00/us__en_us__ibm100__gie__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Globally Integrated Enterprise</h3>\n<p>In an essay featured in the May/June 2006 edition of Foreign Affairs magazine, and in a speech given in Bangalore, India, the same year, Samuel Palmisano, chairman and CEO of IBM, outlined his vision of the new globally integrated enterprise. It is the successor to the multinational corporation, which featured smaller versions of the parent company in multiple countries. A globally integrated enterprise is truly global—locating operations and functions anywhere in the world, based on the right cost, availability of skills and supportive business environment. This model is more nimble and less duplicative, and operates well across the flatter world.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/globalbiz/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 08, 2011</span>\n<img alt=\"IBM100 The Networked Business Place iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/S326915V55280F37/us__en_us__ibm100__network_bus_place__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Networked Business Place</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Networked Business Place iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/I712938W11610Y84/us__en_us__ibm100__network_bus_place__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Networked Business Place</h3>\n<p>IBM PROFS (Professional Office System) was an electronic communication system for the automated office environment. Released in 1981, it supported emails, document creation and management, scheduling functions and spreadsheets, and could be linked to other applications, such as databases. Operated by menu-driven user interfaces, built on the mainframe and properties of virtualization, PROFS was the antecedent to office-wide intranets, providing a platform for early virtual collaboration. IBM’s belief in the power of collaboration continued well beyond PROFS and eventually led to the development of w3—the largest intranet in the world.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/networkbus/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 07, 2011</span>\n<img alt=\"IBM100 The Automation of Personal Banking iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/L997894Z76327J32/us__en_us__ibm100__Automated_Banking__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Automation of Personal Banking</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Automation of Personal Banking iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/D028619Z11496W71/us__en_us__ibm100__Automated_Banking__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Automation of Personal Banking</h3>\n<p>The check-clearing process in banking was dramatically enhanced with the introduction of the IBM 801 Bank Proof machine, unveiled in 1934. As a new type of proof machine, the 801 listed, separated and endorsed checks, in addition to recording totals. Since this innovation, IBM has helped reinvent banking around the world, tailoring automated solutions to local business needs and behaviors and bringing greater convenience and efficiency to everyday financial transactions.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/bankauto/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 03, 2011</span>\n<img alt=\"IBM100 The Social Security System iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/M230631Q09757Q35/us__en_us__ibm100__social_security__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Social Security System</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Social Security System iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/A702723A45759D50/us__en_us__ibm100__social_security__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The Social Security System</h3>\n<p>In the midst of the Great Depression, Franklin D. Roosevelt signed the Social Security Act—creating a gigantic, nationwide information problem with the stroke of a pen. Suddenly, the federal government needed acres of accounting machines to track the paychecks of every working American. There was really only one company that could provide that data processing backbone: IBM. The company provided more than 400 punch card tabulating machines to establish records for 26 million workers.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/socialsecurity/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: June 01, 2011</span>\n<img alt=\"IBM100 The DNA Transistor iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/M432819T21008N90/us__en_us__ibm100__dna_transistor__icon__80x48.png\" /></div>\n<p>\n</p><h3>The DNA Transistor</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The DNA Transistor iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/D565275H48359C68/us__en_us__ibm100__dna_transistor__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>The DNA Transistor</h3>\n<p>IBM’s DNA Transistor offers a high-tech, low-cost method for reading the human genome sequence. This 2009 breakthrough technology may soon be used to create better patient profiles, tailor-made diagnoses and treatments informed by genetics—driving down the cost of healthcare, while drastically improving quality of care and quality of life.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/dnatransistor/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: May 26, 2011</span>\n<img alt=\"IBM100 Corporate Leadership in Environmental Responsibility iconic mark\" height=\"48\" width=\"80\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Q201755B33828I12/us__en_us__ibm100__environmental_leadership__icon__80x48.png\" /></div>\n<p>\n</p><h3>Corporate Leadership in Environmental Responsibility</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 Corporate Leadership in Environmental Responsibility iconic mark\" height=\"180\" width=\"300\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/U312560B24953T61/us__en_us__ibm100__environmental_leadership__icon__300x180.png\" /></div>\n<div class=\"col-copy\">\n<h3>Corporate Leadership in Environmental Responsibility</h3>\n<p>IBM’s environmental programs date back to 1971 when Thomas Watson Jr., formalized the company’s global commitment to environmental protection in a pioneering Corporate Policy on IBM’s Environmental Responsibilities. It called for IBM to address not only the waste that results from manufacturing its products but also to consider the consequences of processes that are established during product development—what became, decades later, a regulatory focus known as “pollution prevention.” Today, thousands of IBMers in diverse roles are actively engaged in driving and implementing the company’s environmental programs and requirements. By the late 1990s, IBM became the first enterprise to achieve a single global registration covering IBM’s global operations to the ISO 14001 Environmental Management System Standard.</p>\n<a class=\"internal_link_icon\" href=\"http://www-03.ibm.com/ibm/history/ibm100/us/en/icons/environment/\">Explore this Icon of Progress</a>\n</div>\n</div>\n</li>\n<li class=\"live clearfix\">\n<div class=\"icon-sm clearfix\">\n<div class=\"col-imge\">\n<span>Featured: May 25, 2011</span>\n<img alt=\"IBM100 The Origins of Computer Science  iconic mark\" height=\"48\" width=\"81\" src=\"http://www-03.ibm.com/ibm/history/ibm100/images/icp/Q767424L01260C43/us__en_us__ibm100__computer_science__icon__80x48.png\" /></div>\n<p>\n</p><h3>The Origins of Computer Science</h3>\n\n</div>\n<div class=\"icon-lg clearfix\">\n<div class=\"col-imge\">\n<img alt=\"IBM100 The Origins of Computer Science  iconic mark\" height=\"180\"',1),(237,'4.0.0 released: The new render loop explained | Popmotion','http://popmotion.io/blog/4.0.0-released-explaining-the-new-render-loop',0,0,'<h2>4.0.0 released: The new render loop explained</h2>\n            <p>Posted one day ago</p>\n            <div class=\"summary\"><p>The new Popmotion render loop is flexible and powerful - here’s what’s changed.</p>\n</div>\n            <p>At the heart of Popmotion lies a single thread; the render loop. Its purpose is simply to run through all active <a href=\"http://popmotion.io/api/process\">Process</a> instances, and fire their associated callbacks - once per frame, 60 frames per second.</p>\n\n<p>Every Actor has its own Process instance, so when you run your own Process, you’re running a method in tandem with all your other animations and simulations without having to manage your own render loop.</p>\n\n<p>Popmotion is already unique in exposing access to this loop, and with the release of <code>4.0.0</code>, it now provides two new methods of control and scheduling.</p>\n\n<p>The first, four new processing steps that allow more control over <strong>where</strong> in the render loop a Process will fire. The second, background processes that run <strong>only when</strong> other processes are active.</p>\n\n<h4>Discrete processing steps</h4>\n\n<p>In previous versions, a Process would represent a single callback, and every Process callback would be fired sequentially. So, Actors would update their values, render, and check if they’re still active, all at once, one Actor after the other. This made it impossible to work with <strong>all</strong> the updated <code>Actor</code>s <strong>before</strong> they were all rendered.</p>\n\n<p>From today, there are four steps to the render loop:</p>\n\n<ul><li><code>update</code></li>\n<li><code>preRender</code></li>\n<li><code>render</code></li>\n<li><code>postRender</code></li>\n</ul><p>Now, all active <code>Process.update</code> methods will fire first, then all active <code>Process.preRender</code> methods, and so on.</p>\n\n<p>Assigning a method to run at any of these four steps is easy. Here’s a crude framerate counter to demonstrate:</p>\n\n<pre><code>import { Process } from \'popmotion\';\n\nlet framerateDisplay = document.getElementById(\'framerate\');\nlet framerate = 0;\n\nlet updateFramerate = new Process({\n    update: function (process, framestamp, frameDuration) {\n        framerate = 1000 / frameDuration;\n    },\n    render: function () {\n        framerateDisplay.innerHTML = framerate;\n    }\n});\n\nupdateFramerate.start();\n</code></pre>\n\n<p>Soon, we’ll be releasing a collision detection plugin that will make use of the <code>preRender</code> method to recalculate <code>Actor</code> positions before render. Canvas and WebGL applications could harness <code>postRender</code> to implement post-processing effects.</p>\n\n<h4>Background processes</h4>\n\n<p>By default, our render loop stops running if it detects no active processes, and starts again when the next process starts, which helps save battery life on mobile devices.</p>\n\n<p>Flagging a Process as a <code>background</code> process will ensure that it only runs when <strong>other, non-background</strong> processes are active.</p>\n\n<p>Our previous example of a framerate counter shows how this could be helpful. It’d be a waste to update the framerate counter when we’re not running any Processes. By passing <code>true</code> as the last argument to our <code>Process</code> constructor, we can flag it as a background process.</p>\n\n<pre><code>let updateFramerate = new Process(yourCallbacks, true);\n\nupdateFramerate.start();</code></pre>\n\n<p>The <code>updateFramerate</code> callbacks won’t start until another, non-background Process begins to run, or an Actor begins to animate.</p>\n\n<h4>Upgrade to 4.0.0</h4>\n\n<p>If you’ve never used <code>Process</code> before, and as a low-level class you probably haven’t, then you can simply upgrade.</p>\n\n<p>For those of you that have ventured this far down, as part of reevalutating the Process class we decided to add <code>once()</code> and remove <code>start(duration)</code> and <code>every()</code> to reduce our API footprint and overall internal complexity. So:</p>\n\n<pre><code>process.start(500);</code></pre>\n\n<p>becomes</p>\n\n<pre><code>process.start();\n\nsetTimeout(() =&gt; process.stop(), 500);</code></pre>\n\n<p>and</p>\n\n<pre><code>process.every(200);</code></pre>\n\n<p>becomes</p>\n\n<pre><code>setInterval(() =&gt; process.once(), 200);</code></pre>\n\n<p>We’re committed to keeping Popmotion lightweight and at 12.6kb it is easily one of the smallest motion engines for the web, while still providing an unprecedented level of functionality and compatibility. Small changes like this allow us to keep delivering big changes like the new render loop and background processes.</p>\n\n<p>As always, keep in touch with questions, suggestions or cool stuff you’ve made via our <a href=\"https://twitter.com/popmotionjs\">Twitter</a>.</p>\n\n        \n    ',1),(238,'Directed graph traversal, orderings and applications to data-flow analysis','http://eli.thegreenplace.net/2015/directed-graph-traversal-orderings-and-applications-to-data-flow-analysis/',0,0,'\n                \n                <p>When traversing trees with DFS, orderings are easy to define: we have pre-order,\nwhich visits a node before recursing into its children; in-order, which visits a\nnode in-between recursing into its children; post-order, which visits a node\nafter recursing into its children.</p>\n<p>However, for directed graphs, these orderings are not as natural and slightly\ndifferent definitions are used. In this article I want to discuss the various\ndirected graph orderings and their implementations. I also want to mention some\napplications of directed graph traversals to data-flow analysis.</p>\n<p>Directed graphs are my focus here, since these are most useful in the\napplications I\'m interested in. When a directed graph is known to have no\ncycles, I may refer to it as a DAG (directed acyclic graph). When cycles are\nallowed, undirected graphs can be simply modeled as directed graphs where each\nundirected edge turns into a pair of directed edges.</p>\n<div class=\"section\">\n<h2>Depth-first search and pre-order</h2>\n<p>Let\'s start with the basis algorithm for everything discussed in this article -\ndepth-first search (DFS). Here is a simple implementation of DFS in Python (the\nfull code is <a class=\"reference external\" href=\"https://github.com/eliben/code-for-blog/blob/master/2015/traversals.py\">available here</a>):</p>\n<div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">visitor</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"DFS over a graph.</span>\n\n<span class=\"sd\">    Start with node \'root\', calling \'visitor\' for every visited node.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"n\">visited</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"n\">visitor</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">succ</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">successors</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">succ</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span><span class=\"p\">:</span>\n                <span class=\"n\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">succ</span><span class=\"p\">)</span>\n    <span class=\"n\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</pre></div>\n<p>This is the baseline implementation, and we\'ll see a few variations on it to\nimplement different orderings and algorithms. You may think that, due to the way\nthe algorithm is structured, it implements pre-order traversal. It certainly\nlooks like it. In fact, <em>pre-preder traversal on graphs is defined as the order\nin which the aforementioned DFS algorithm visited the nodes</em>. However, there\'s a\nsubtle but important difference from tree pre-order. Whereas in trees, we may\nassume that in pre-order traversal we always see a node before all its\nsuccessors, this isn\'t true for graph pre-order. Consider this graph:</p>\n<img alt=\"Directed Graph\" class=\"align-center\" src=\"http://eli.thegreenplace.net/images/2015/dgraph1.png\" /><p>If we print the nodes in the order visited by DFS, we may get something like: A,\nC, B, D, E, T. So B comes before T, even though B is T\'s successor .</p>\n<p>We\'ll soon see that other orderings <em>do</em> provide some useful guarantees.</p>\n</div>\n<div class=\"section\">\n<h2>Post-order and reverse post-order</h2>\n<p>To present other orderings and algorithms, we\'ll take the <tt class=\"docutils literal\">dfs</tt> function above\nand tweak it slightly. Here\'s a post-order walk. It has the same general\nstructure as <tt class=\"docutils literal\">dfs</tt>, but it manages additional information (<tt class=\"docutils literal\">order</tt> list) and\ndoesn\'t call a visitor function:</p>\n<div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">postorder</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Return a post-order ordering of nodes in the graph.\"\"\"</span>\n    <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"n\">visited</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">succ</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">successors</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">succ</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span><span class=\"p\">:</span>\n                <span class=\"n\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">succ</span><span class=\"p\">)</span>\n        <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n    <span class=\"n\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">order</span>\n</pre></div>\n<p>This algorithm adds a node to the <tt class=\"docutils literal\">order</tt> list when its traversal is fully\nfinished; that is, when all its outgoing edges have been visited. Unlike\npre-order, here it\'s actually ensured - in the absence of cycles - that for two\nnodes V and W, if there is a path from W to V in the graph, then V comes before\nW in the list .</p>\n<p>Reverse post-order (RPO) is exactly what its name implies. It\'s the reverse of\nthe list created by post-order traversal. In reverse post-order, if there is a\npath from V to W in the graph, V appears before W in the list. Note that this is\nactually a useful guarantee - we see a node before we see any other nodes\nreachable from it; for this reason, RPO is useful in many algorithms.</p>\n<p>Let\'s see the orderings produced by pre-order, post-order and RPO for our sample\nDAG:</p>\n<ul class=\"simple\"><li>Pre-order: A, C, B, D, E, T</li>\n<li>Post-order: D, B, E, C, T, A</li>\n<li>RPO: A, T, C, E, B, D</li>\n</ul><p>This example should help dispel a common confusion about these traversals - <em>RPO\nis not the same as pre-order</em>. While pre-order is simply the order in which DFS\nvisits a graph, RPO actually guarantees that we see a node before all of its\nsuccessors (again, this is in the absence of cycles, which we\'ll deal with\nlater). So if you have an algorithm that needs this guarantee and you could\nsimply use pre-order on trees, when you\'re dealing with DAGs it\'s RPO, not\npre-order, that you\'re looking for.</p>\n</div>\n<div class=\"section\">\n<h2>Topological sort</h2>\n<p>In fact, the RPO of a DAG has another name - <em>topological sort</em>. Indeed, listing\na DAG\'s nodes such that a node comes before all its successors is precisely what\nsorting it topologically means. If nodes in the graph represent operations and\nedges represent dependencies between them (an edge from V to W meaning that V\nmust happen before W) then topological sort gives us an order in which we can\nrun the operations such that all the dependencies are satisfied (no operation\nruns before its dependencies).</p>\n</div>\n<div class=\"section\">\n<h2>DAGs with multiple roots</h2>\n<p>So far the examples and algorithms demonstrated here show graphs that have a\nsingle, identifiable root node. This is not always the case for realistic\ngraphs, though it <em>is</em> most likely the case for graphs used in compilation\nbecause a program has a single entry function (for call graphs) and a function\nhas a single entry instruction or basic block (for control-flow and data-flow\nanalyses of functions).</p>\n<p>Once we leave the concept of \"one root to rule them all\" behind, it\'s\nnot even clear how to traverse a graph like the example used in the article\nso far. Why start from node A? Why not B? And how would the traversal look if we\ndid start from B? We\'d then only be able to discover B itself and D, and would\nhave to restart to discover other nodes.</p>\n<p>Here\'s another graph, where not all nodes are connected with each other. This\ngraph has no pre-defined root . How do we still traverse all of it in a\nmeaningful way?</p>\n<img alt=\"Directed Multigraph\" class=\"align-center\" src=\"http://eli.thegreenplace.net/images/2015/multidgraph1.png\" /><p>The idea is a fairly simple modification of the DFS traversal shown earlier. We\npick an arbitrary unvisited node in the graph, treat it as a root and start\ndutifully traversing. When we\'re done, we check if there are any unvisited nodes\nremaining in the graph. If there are, we pick another one and restart. So on and\nso forth until all the nodes are visited:</p>\n<div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">postorder_unrooted</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Unrooted post-order traversal of a graph.</span>\n\n<span class=\"sd\">    Restarts traversal as long as there are undiscovered nodes. Returns a list</span>\n<span class=\"sd\">    of lists, each of which is a post-order ordering of nodes discovered while</span>\n<span class=\"sd\">    restarting the traversal.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">allnodes</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">())</span>\n    <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    <span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"n\">visited</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">succ</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">successors</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">succ</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span><span class=\"p\">:</span>\n                <span class=\"n\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">succ</span><span class=\"p\">)</span>\n        <span class=\"n\">orders</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">allnodes</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">):</span>\n        <span class=\"c\"># While there are still unvisited nodes in the graph, pick one at random</span>\n        <span class=\"c\"># and restart the traversal from it.</span>\n        <span class=\"n\">remaining</span> <span class=\"o\">=</span> <span class=\"n\">allnodes</span> <span class=\"o\">-</span> <span class=\"n\">visited</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">remaining</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"n\">orders</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([])</span>\n        <span class=\"n\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">orders</span>\n</pre></div>\n<p>To demonstrate this approach, <tt class=\"docutils literal\">postorder_unrooted</tt> returns not just a single\nlist of nodes ordered in post-order, but a list of lists. Each list is a\npost-order ordering of a set of nodes that were visited together in one\niteration of the <tt class=\"docutils literal\">while</tt> loop. Running on the new sample graph, I get this:</p>\n<div class=\"highlight\"><pre>[\n [\'d\', \'b\', \'e\', \'c\'],\n [\'j\', \'f\'],\n [\'r\', \'k\'],\n [\'p\', \'q\'],\n [\'t\', \'x\']\n]\n</pre></div>\n<p>There\'s a slight problem with this approach. While relative ordering between\nentirely unconnected pieces of the graph (like K and and X) is undefined, the\nordering within each connected piece <em>may</em> be defined. For example, even though\nwe discovered T and X separately from D, B, E, C, there <em>is</em> a natural ordering\nbetween them. So a more sophisticated algorithm would attempt to amend this by\nmerging the orders when that makes sense. Alternatively, we can look at all the\nnodes in the graph, find the ones without incoming edges and use these as roots\nto start from.</p>\n</div>\n<div class=\"section\">\n<h2>Directed graphs with cycles</h2>\n<p>Cycles in directed graphs present a problem for many algorithms, but there are\nimportant applications where avoiding cycles is unfeasible, so we have to deal\nwith them. Here\'s a sample graph with a couple of cycles:</p>\n<img alt=\"Directed Graph with cycles\" class=\"align-center\" src=\"http://eli.thegreenplace.net/images/2015/cycles.png\" /><p>Cycles break almost all of the nice-and-formal definitions of traversals stated\nso far in the article. In a graph with cycles, there is - by definition - no\norder of nodes where we can say that one comes before the other. Nodes can be\nvisited before all their outgoing edges have been visited in post-order.\nTopological sort is simply undefined on graphs with cycles.</p>\n<p>Out post-order search will still <em>run</em> and terminate, visiting the whole graph,\nbut the order it will visit the nodes is just not as clearly defined. Here\'s\nwhat we get from <tt class=\"docutils literal\">postorder</tt>, starting with X as root:</p>\n<div class=\"highlight\"><pre>[\'m\', \'g\', \'d\', \'e\', \'c\', \'b\', \'t\', \'x\']\n</pre></div>\n<p>This is a perfectly valid post-order visit on a graph with cycles, but something\nabout it bothers me. Note that M is returned before G and D. True, this is just\nhow it is with cycles , but can we do better? After all, there\'s no actual\npath from G and D to M, while a path in the other direction exists. So could\nwe somehow \"approximate\" a post-order traversal of a graph with cycles, such\nthat at least some high-level notion of order stays consistent (outside actual\ncycles)?</p>\n</div>\n<div class=\"section\">\n<h2>Strongly Connected Components</h2>\n<p>The answer to the last question is yes, and the concept that helps us here is\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Strongly_connected_component\">Strongly Connected Components</a> (SCCs,\nhereafter). A graph with cycles is partitioned into SCCs, such that every\ncomponent is strongly connected - every node within it is reachable from every\nother node. In other words, every component is a loop in the graph; we can then\ncreate a DAG of components . Here\'s our loopy graph again, with the SCCs\nidentified. All the nodes that don\'t participate in loops can be considered as\nsingle-node components of themselves:</p>\n<img alt=\"Directed Graph with cycles and SCCs\" class=\"align-center\" src=\"http://eli.thegreenplace.net/images/2015/cycles-scc.png\" /><p>Having this decomposition of the graph availabe, we can now once again run\nmeaningful post-order visits on the SCCs and even sort them topologically.</p>\n<p>There are a number of efficient algorithms available for decomposing a graph\ninto SCCs; I will leave this topic to some other time.</p>\n</div>\n<div class=\"section\">\n<h2>3-color DFS and edge classification</h2>\n<p>As we\'ve seen above, while our <tt class=\"docutils literal\">postorder</tt> function manages to visit all nodes\nin a graph with cycles, it doesn\'t do it in a sensical order and doesn\'t even\ndetect cycles. We\'ll now examine a variation of the DFS algorithm that keeps\ntrack of more information during traversal, which helps it analyze cyclic graphs\nwith more insight.</p>\n<p>This version of graph DFS is actually something you will often find in books and\nother references; it colors every node white, grey or black, depending on how\nmuch traversal was done from it at any given time. This is why I call it the\n\"3-color\" algorithm, as opposed to the basic \"binary\" or \"2-color\" algorithm\npresented here earlier (any node is either in the \"visited\" set or not).</p>\n<p>The following function implements this. The <tt class=\"docutils literal\">color</tt> dict replaces the\n<tt class=\"docutils literal\">visited</tt> set and tracks three different states for each node:</p>\n<ol class=\"arabic simple\"><li>Node not in the dict: not discovered yet (\"white\").</li>\n<li>Node discovered but not finished yet (\"grey\")</li>\n<li>Node is finished - all its outgoing edges were finished (\"black\")</li>\n</ol><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">postorder_3color</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Return a post-order ordering of nodes in the graph.</span>\n\n<span class=\"sd\">    Prints CYCLE notifications when graph cycles (\"back edges\") are discovered.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">\'grey\'</span>\n        <span class=\"k\">for</span> <span class=\"n\">succ</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">successors</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">succ</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">\'grey\'</span><span class=\"p\">:</span>\n                <span class=\"k\">print</span> <span class=\"s\">\'CYCLE: {0}--&gt;{1}\'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">succ</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">succ</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">color</span><span class=\"p\">:</span>\n                <span class=\"n\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">succ</span><span class=\"p\">)</span>\n        <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"n\">color</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">\'black\'</span>\n    <span class=\"n\">dfs_walk</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">order</span>\n</pre></div>\n<p>If we run it on the loopy graph, we get the same order as the one returned by\n<tt class=\"docutils literal\">postorder</tt>, with the addition of:</p>\n<div class=\"highlight\"><pre>CYCLE: m--&gt;c\nCYCLE: g--&gt;d\n</pre></div>\n<p>The edges between M and C and between G and D are called <em>back edges</em>. This\nfalls under the realm of <em>edge classification</em>. In addition to back edges,\ngraphs can have tree edges, cross edges and forward edges. All of these can be\ndiscovered during a DFS visit. Back edges are the most important for our current\ndiscussion since they help us identify cycles in the graph.</p>\n</div>\n<div class=\"section\">\n<h2>Data-flow analysis</h2>\n<p><em>This section is optional if you only wanted to learn about graph graversals. It\nassumes non-trivial background on compilation</em>.</p>\n<p>In compilation, data-flow analysis is an important technique used for many\noptimizations. The compiler analyzes the control-flow graph (CFG) of a program,\nreasoning about how values can potentially change  through its basic blocks.</p>\n<p>Without getting into the specifics of data-flow analysis problems and\nalgorithms, I want to mention a few relevant observations that bear strong\nrelation to the earlier topics of this post. Broadly speaking, there are two\nkinds of data-flow problems: <em>forward</em> and <em>backward</em> problems. In <em>forward</em>\nproblems, we use information learned about basic blocks to analyze their\nsuccessors. In <em>backward</em> problems, it\'s the other way around - information\nlearned about basic blocks is used to analyze their predecessors.</p>\n<p>Therefore, it shouldn\'t come as a surprise that the most efficient way to run\nforward data-flow analyses is in RPO. In the absence of cycles, RPO (topological\norder) makes sure we\'ve seen all of a node\'s predecessors before we get\nto it. This means we can perform the analysis in a single pass over the graph.</p>\n<p>With cycles in the graph, this is no longer true, but RPO still guarantees the\nfastest convergence - in graphs with cycles data-flow analysis is iterative\nuntil a fixed point is reached .</p>\n<p>For a similar reason, the most efficient way to run backward data-flow analysis\nis post-order. In the absence of cycles, postorder makes sure that we\'ve seen\nall of a node\'s successors before we get to it.</p>\n<p>One final note: some resources recommend to use RPO on a reverse CFG (CFG with\nall its edges inverted) instead of post-order on the original graph for backward\ndata-flow. If your initial reaction is to question whether the two are\nequivalent - that\'s not a bad guess, though it\'s wrong. With cycles, the two\norders can be subtly different. Consider this graph, for example:</p>\n<img alt=\"ABCD graph\" class=\"align-center\" src=\"http://eli.thegreenplace.net/images/2015/abcd_graph.png\" /><p>Assuming A is the entry node, post-order would return: D, C, B, A. Now let\'s\ninvert all the edges:</p>\n<img alt=\"ABCD graph with inverted nodes\" class=\"align-center\" src=\"http://eli.thegreenplace.net/images/2015/abcd_graph_rev.png\" /><p>Here D would be the entry node. RPO on this graph is: D, B, C, A. This is\nnot the same as post-order on the original graph - the order of the nodes in\nthe cycle is different.</p>\n<p>So here\'s a puzzle: why is RPO on the reverse graph recommended by some\nresources over post-order?</p>\n<p>If I had to guess, I\'d say that looking at the sample graph in this section,\nit makes some sense to examine B before C, because more of its successors were\nalready visited. If we visit C before B, we don\'t know much about successors yet\nbecause B wasn\'t visited - and B is the only successor of C. But if we visit B\nbefore C, at least D (a successor of B in the original graph) was already\nvisited. This may help faster convergence. If you have additional ideas, please\nlet me know.</p>\n<hr class=\"docutils\" /></div>\n\n            ',1),(239,'\nMacbook charger teardown: The surprising complexity inside Apple\'s power adapter\n','http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html',0,0,'\n\n\nHave you ever wondered what\'s inside your Macbook\'s charger?\nThere\'s a lot more \ncircuitry crammed into the compact power adapter than you\'d expect, including a microprocessor.\nThis charger teardown looks at the numerous components in the charger and explains how they work together to power your laptop.\n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/IYdxwMrtOgwiCAcqtnDYINMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-ywUu7DDENug/Vk7CMGBWneI/AAAAAAAAxco/UUIdJ2DS2rs/w600/inside.jpg\" width=\"600\" height=\"477\" alt=\"Inside the Macbook charger, after removing the heat sinks and insulating tape.\" title=\"Inside the Macbook charger, after removing the heat sinks and insulating tape.\" /></a>\n</p><div class=\"cite\">\nInside the Macbook charger. Many electronic components work together to provide smooth power to your laptop.\n</div>\nMost consumer electronics, from your cell phone to your television, use a <i>switching power supply</i> to convert AC power from the wall to the low-voltage DC used by electronic circuits.\nThe switching power supply gets its name because it switches power on and off thousands of times a second, which turns out to be a very efficient way to do this conversion.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref1\">[1]</a>\n<p>\nSwitching power supplies are now very cheap, but this wasn\'t always the case.\nIn the 1950s, switching power supplies were complex and expensive, used in aerospace and satellite applications that needed small, lightweight power supplies.\nBy the early 1970s, new high-voltage transistors and other technology improvements made switching power supplies much cheaper and they became widely\nused in computers.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref2\">[2]</a>\nThe introduction of a single-chip power supply controller in 1976 made switching power supplies simpler, smaller, and cheaper.\n\n</p><p>\nApple\'s involvement with switching power supplies goes back to 1977 when Apple\'s chief engineer Rod Holt designed a switching power supply for the Apple II.\nAccording to Steve Jobs:<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref3\">[3]</a>\n</p><blockquote>\n\"That switching power supply was as revolutionary as the Apple II logic board was. Rod doesn\'t get a lot of credit for this in the history books but he should. Every computer now uses switching power supplies, and they all rip off Rod Holt\'s design.\"\n</blockquote>\n<p>\nThis is a fantastic quote, but unfortunately it is entirely false.\nThe switching power supply revolution happened before Apple came along, Apple\'s design was similar to earlier power supplies<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref4\">[4]</a>\nand other computers don\'t use Rod Holt\'s design.\nNevertheless, Apple has extensively used switching power supplies and pushes the limits of charger design with their compact, stylish and advanced chargers.\n</p><h2>Inside the charger</h2>\n<p>\nFor the teardown I started with a Macbook 85W power supply, model A1172, which is small enough to hold in your palm.  The picture below shows several features that can help distinguish the charger from counterfeits: the Apple logo in the case, the metal (not plastic) ground pin on the right, and the serial number next to the ground pin.\n</p><p>\n<a href=\"https://picasaweb.google.com/lh/photo/ztTCG2i0ss2q6VRjmctlddMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-mwYrpR8U4uI/VkaSQC2olaI/AAAAAAAAxXE/5-QCRLCr6rY/w600/magsafe85.jpg\" width=\"600\" height=\"470\" alt=\"Apple 85W Macbook charger\" title=\"Apple 85W Macbook charger\" /></a>\n</p><div class=\"cite\">\nApple 85W Macbook charger\n</div>\nStrange as it seems, the best technique I\'ve found for opening a charger is to pound on a wood chisel all around the seam to crack it open. With the case opened, the metal heat sinks of the charger are visible. The heat sinks help cool the high-power semiconductors inside the charger. \n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/zo-XapNKTU14NM082g9ZHtMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-66oDux4704M/VkaSSgAeGjI/AAAAAAAAxXM/ehoXjnzlE7Q/w600/magsafe85-opened.jpg\" width=\"600\" height=\"402\" alt=\"Inside the Apple 85W Macbook charger\" title=\"Inside the Apple 85W Macbook charger\" /></a>\n</p><div class=\"cite\">\nInside the Apple 85W Macbook charger\n</div>\nThe other side of the charger shows the circuit board, with the power output at the bottom. Some of the tiny components are visible, but most of the circuitry is covered by the metal heat sink, held in place by yellow insulating tape.\n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/gvSRyX5QOD9063OZFOpBr9MTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-Bvox2RV3BdA/VkaSVFRvh5I/AAAAAAAAxXU/Ob2cUek8IZk/w600/magsafe85-bottom.jpg\" width=\"600\" height=\"432\" alt=\"The circuit board inside the Apple 85W Macbook charger.\" title=\"The circuit board inside the Apple 85W Macbook charger.\" /></a>\n</p><div class=\"cite\">\nThe circuit board inside the Apple 85W Macbook charger. At the right, screws firmly attach components to the heat sinks.\n</div>\nAfter removing the metal heat sinks, the components of the charger are visible. These metal pieces give the charger a substantial heft, more than you\'d expect from a small unit.\n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/KiKnoyjB8zOPggfl5dzvHtMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-d_PaReTP_-g/VkaSZ4qdOOI/AAAAAAAAxXc/Uwyhb7-M-2I/w600/exploded.jpg\" width=\"600\" height=\"360\" alt=\"Exploded view of the Apple 85W charger\" title=\"Exploded view of the Apple 85W charger\" /></a>\n</p><div class=\"cite\">\nExploded view of the Apple 85W charger, showing the extensive metal heat sinks.\n</div>\nThe diagram below labels the main components of the charger.\nAC power enters the charger and is converted to DC.\nThe PFC circuit (Power Factor Correction) improves efficiency by ensuring the load on the AC line is steady. The primary chops up the high-voltage DC from the PFC circuit and feeds it into the transformer. Finally, the secondary receives low-voltage power from the transformer and outputs smooth DC to the laptop.\nThe next few sections discuss these circuits in more detail, so follow along with the diagram below.\n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/xRw6ONmp4RHKryKeX5o24tMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-1TwKQzQDSQk/Vk60bH7ESBI/AAAAAAAAxbo/qpTO8bUuTUI/w750/components1.png\" width=\"750\" height=\"618\" alt=\"The components inside an Apple Macbook 85W power supply.\" title=\"The components inside an Apple Macbook 85W power supply.\" /></a>\n</p><div class=\"cite\">\nThe components inside an Apple Macbook 85W power supply.\n</div>\n<h3>AC enters the charger</h3>\nAC power enters the charger through a removable AC plug.\nA big advantage of switching power supplies is they can be designed to run on a wide range of input voltages.\nBy simply <a href=\"http://www.apple.com/shop/product/MD837AM/A/apple-world-travel-adapter-kit\">swapping the plug</a>, the charger can be used in any region of the world,\n from European 240 volts at 50 Hertz to North American 120 volts at 60 Hz.\nThe filter capacitors and inductors in the input stage prevent interference from exiting the charger through the power lines. The bridge rectifier contains four diodes, which convert the AC power into DC.\n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/XGkzyqFevib7Dj2BrydSQtMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-s-lYfQg-wik/Vk60gmUTPBI/AAAAAAAAxbw/zjhEVVUD_BE/w600/IMG_2591.JPG\" width=\"600\" height=\"400\" alt=\"The input filtering in a Macbook charger. The diode bridge is attached to the metal heat sink with a clip.\" title=\"The input filtering in a Macbook charger. The diode bridge is attached to the metal heat sink with a clip.\" /></a>\n</p><div class=\"cite\">\nThe input components in a Macbook charger. The diode bridge rectifier is attached to the metal heat sink with a clip.\n</div>\n<h3>PFC: smoothing the power usage\n</h3>\n<p>\nThe next step in the charger\'s operation is the Power Factor Correction circuit (PFC), labeled in purple.\nOne problem with simple chargers is they only draw power during a small part of the AC cycle.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref5\">[5]</a>\nIf too many devices do this, it causes problems for the power company.\n<a href=\"http://www.edn.com/electronics-news/4363595/New-power--regulations-bring-power-factor--correction-to--lower-power-supplies\">Regulations</a> require larger chargers to use a technique called power factor correction so they use power more evenly.\n</p><p>\nThe PFC circuit uses a power transistor to precisely chop up the input AC tens of thousands of times a second; contrary to what you might expect, this makes the load on the AC line smoother. Two of the largest components in the charger are the inductor and PFC capacitor that help boost the voltage to about 380 volts DC.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref6\">[6]</a>\n</p><h3>The primary: chopping up the power</h3>\n<p>\nThe primary circuit is the heart of the charger.\nIt takes the high voltage DC from the PFC circuit, chops it up and feeds it into the transformer to generate the charger\'s low-voltage output (16.5-18.5 volts). \nThe charger uses an advanced design called a resonant controller, which lets the system operate at a very high frequency, up to 500 kilohertz. \nThe higher frequency permits smaller components to be used for a more compact charger. The chip below controls the switching power supply.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref7\">[7]</a>\n</p><p>\n<a href=\"https://picasaweb.google.com/lh/photo/82TO_kBGjFrKbJYOB3SNLNMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-MHaM6dHsfcg/Vk7ENxadgWI/AAAAAAAAxc8/UeodqyzA6y8/w600/pfc-chip.jpg\" width=\"600\" height=\"503\" alt=\"The circuit board inside the Macbook charger. The chip in the middle controls the switching power supply circuit.\" title=\"The circuit board inside the Macbook charger. The chip in the middle controls the switching power supply circuit.\" /></a>\n</p><div class=\"cite\">\nThe circuit board inside the Macbook charger. The chip in the middle controls the switching power supply circuit.\n</div>\n<p>\nThe two drive transistors (in the overview diagram) alternately switch on and off to chop up the input voltage. The transformer and capacitor resonate at this frequency, smoothing the chopped-up input into a sine wave.\n</p><h3>The secondary: smooth, clean power output</h3>\n<p>\nThe secondary side of the circuit generates the output of the charger.\nThe secondary receives power from the transformer and converts it DC with diodes. The filter capacitors smooth out the power, which leaves the charger through the output cable.\n</p><p>\nThe most important role of the secondary is to keep the dangerous high voltages in the rest of the charger away from the output, to avoid potentially fatal shocks.\nThe isolation boundary marked in red on the earlier diagram indicates the separation between the high-voltage primary and the low-voltage secondary. The two sides are separated by a distance of about 6 mm, and only special components can cross this boundary.\n</p><p>\nThe transformer safely transmits power between the primary and the secondary by using magnetic fields instead of a direct electrical connection.\nThe coils of wire inside the transformer are triple-insulated for safety.\nCheap counterfeit chargers usually skimp on the insulation, posing a safety hazard.\nThe optoisolator uses an internal beam of light to transmit a feedback signal between the secondary and primary. The control chip on the primary side uses this feedback signal to adjust the switching frequency to keep the output voltage stable.\n</p><p>\n<a href=\"https://picasaweb.google.com/lh/photo/CuHsFnr4U5vuXfGX03UTBtMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-hJIDW3Rg9x0/Vk61J0vyIBI/AAAAAAAAxcA/t9LunlBcWBc/w600/IMG_2634.JPG\" width=\"600\" height=\"400\" alt=\"The output components in an Apple Macbook charger. The microcontroller board is visible behind the capacitors.\" title=\"The output components in an Apple Macbook charger. The microcontroller board is visible behind the capacitors.\" /></a>\n</p><div class=\"cite\">\nThe output components in an Apple Macbook charger.The two power diodes are in front on the left. Behind them are three cylindrical filter capacitors.The microcontroller board is visible behind the capacitors.\n</div>\n<h3>A powerful microprocessor in your charger?</h3>\n<p>\nOne unexpected component is a tiny circuit board with a microcontroller, which can be seen above.\nThis 16-bit processor constantly monitors the charger\'s voltage and current.\nIt enables the output when the charger is connected to a Macbook, disables the output when the charger is disconnected, and shuts the charger off if there is a problem.\nThis processor is a Texas Instruments MSP430\nmicrocontroller,\nroughly as powerful as the processor inside the original Macintosh.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref8\">[8]</a>\n</p><p>\n<a href=\"https://picasaweb.google.com/lh/photo/L-T4CB9UoS2rj1YjSPet-NMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-KXK_U3OJf7E/Vk1OujUAP7I/AAAAAAAAxaQ/MivND-MfIIE/w550/mps430.jpg\" width=\"550\" height=\"551\" alt=\"The microcontroller circuit board from an 85W Macbook power supply, on top of a quarter. The MPS430 processor monitors the charger\'s voltage and current.\" title=\"The microcontroller circuit board from an 85W Macbook power supply, on top of a quarter. The MPS430 processor monitors the charger\'s voltage and current.\" /></a>\n</p><div class=\"cite\">\nThe microcontroller circuit board from an 85W Macbook power supply, on top of a quarter. The MPS430 processor monitors the charger\'s voltage and current.\n</div>\n<p>\nThe square orange pads on the right are used to program software into the chip\'s flash memory during manufacturing.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref9\">[9]</a>\nThe three-pin chip on the left (IC202) reduces the charger\'s 16.5 volts to the 3.3 volts required by the processor.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref10\">[10]</a>\n</p><h3>The charger\'s underside: many tiny components</h3>\n<p>\nTurning the charger over reveals dozens of tiny components on the circuit board. The PFC controller chip and the power supply (SMPS) controller chip are the main integrated circuits controlling the charger.\nThe voltage reference chip is responsible for keeping the voltage stable even as the temperature changes.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref11\">[11]</a>\nThese chips are surrounded by tiny resistors, capacitors, diodes and other components.\nThe output MOSFET transistor switches the power to the output on and off, as directed by the microcontroller. To the left of it, the current sense resistors measure the current flowing to the laptop.\n</p><p>\n<a href=\"https://picasaweb.google.com/lh/photo/v25Ff3h6CzWc5EZo5lVT-9MTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-EqgQClQo4VU/Vk1QKw8M42I/AAAAAAAAxas/mnYw7wd7IkM/w800/pcb.png\" width=\"800\" height=\"683\" alt=\"The printed circuit board from an Apple 85W Macbook power supply, showing the tiny components inside the charger.\" title=\"The printed circuit board from an Apple 85W Macbook power supply, showing the tiny components inside the charger.\" /></a>\n</p><div class=\"cite\">\nThe printed circuit board from an Apple 85W Macbook power supply, showing the tiny components inside the charger.\n</div>\nThe isolation boundary (marked in red) separates the high voltage circuitry from the low voltage output components for safety.\nThe dashed red line shows the isolation boundary that separates the low-voltage side (bottom right) from the high-voltage side.\nThe optoisolators send control signals from the secondary side to the primary, shutting down the charger if there is a malfunction.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref12\">[12]</a>\n<p>\nOne reason the charger has more control components than a typical charger is its variable output voltage.\nTo produce 60 watts, the charger provides 16.5 volts at 3.6 amps. For 85 watts, the voltage increases to 18.5 volts at 4.6 amps. This allows the charger to be compatible with lower-voltage 60 watt chargers, while still providing 85 watts for laptops that can use it.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref13\">[13]</a>\nAs the current increases above 3.6 amps, the circuit gradually increases the output voltage. If the current increases too much, the charger abruptly shuts down around 90 watts.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref14\">[14]</a>\n</p><h3>Inside the Magsafe connector</h3>\nThe magnetic Magsafe connector that plugs into the Macbook is more complex than you would expect. It has five spring-loaded pins (known as <a href=\"https://en.wikipedia.org/wiki/Pogo_pin\">Pogo pins</a>) to connect to the laptop. Two pins are power, two pins are ground, and the middle pin is a data connection to the laptop.\n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/g-n-Ra_XrWCrpSPGBm-A39MTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-HsTmaWTQtbY/UaYYKaYAuxI/AAAAAAAAaW8/T_KBs8ySi8o/w400/magsafe-connector-labels.png\" width=\"400\" height=\"400\" alt=\"The pins of a Magsafe 2 connector. The pins are arranged symmetrically, so the connector can be plugged in either way.\" title=\"The pins of a Magsafe 2 connector. The pins are arranged symmetrically, so the connector can be plugged in either way.\" /></a>\n</p><div class=\"cite\">\nThe pins of a Magsafe 2 connector. The pins are arranged symmetrically, so the connector can be plugged in either way.\n</div>\nInside the Magsafe connector is a tiny chip that\ninforms the laptop of the charger\'s serial number, type, and power.\nThe laptop uses this data to determine if the charger is valid.\nThis chip also controls the status LEDs.\nThere is no data connection to the charger block itself; the data connection is only with the chip inside the connector.\nFor more details, see my article on the\n<a href=\"http://www.righto.com/2013/06/teardown-and-exploration-of-magsafe.html\">Magsafe connector</a>.\n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/04d78zRXe6jOQFyaZYCWONMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-0vBYxRK9f1M/UaYYLe35AhI/AAAAAAAAaBg/IB8zGMhU39Q/w600/magsafe-on-penny.png\" width=\"600\" height=\"600\" alt=\"The circuit board inside a Magsafe connector is very small. There are two LEDs on each side. The chip is a DS2413 1-Wire switch.\" title=\"The circuit board inside a Magsafe connector is very small. There are two LEDs on each side. The chip is a DS2413 1-Wire switch.\" /></a>\n</p><div class=\"cite\">\nThe circuit board inside a Magsafe connector is very small. There are two LEDs on each side. The chip is a DS2413 1-Wire switch.\n</div>\n<h3>Operation of the charger</h3>\nYou may have noticed that when you plug the connector into a Macbook, it takes a second or two for the LED to light up. During this time, there are complex interactions between the Macbook, the charger, and the Magsafe connector.\n<p>\nWhen the charger is disconnected from the laptop, the output transistor discussed earlier blocks the output power.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref15\">[15]</a>\nWhen the Magsafe connector is plugged into a Macbook, the laptop\npulls the power line low.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref16\">[16]</a>\nThe microcontroller in the charger detects this and after exactly one second enables the power output.\nThe laptop then loads the charger information from the Magsafe connector chip.\nIf all is well, the laptop\nstarts pulling power from the charger and sends a command through the data pin to light the appropriate connector LED.\nWhen the Magsafe connector is unplugged from the laptop, the microcontroller detects the loss of current flow and shuts off the power, which also extinguishes the LEDs.\n</p><p>\nYou might wonder why the Apple charger has all this complexity. Other laptop chargers simply provide 16 volts and when you plug it in, the computer uses the power. The main reason is for safety, to ensure that power isn\'t flowing until the connector is firmly attached to the laptop. \nThis minimizes the risk of sparks or arcing while the Magsafe connector is being put into position.\n</p><h2>Why you shouldn\'t get a cheap charger</h2>\nThe Macbook 85W charger costs $79 from Apple, but for $14 you can get a charger on eBay that looks identical. Do you get anything for the extra $65?\nI opened up an imitation Macbook charger to see how it compares with the genuine charger. From the outside, the charger looks just like an 85W Apple charger except it lacks the Apple name and logo.\nBut looking inside reveals big differences.\nThe photos below show the genuine Apple charger on the left and the imitation on the right. \n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/2qBifmgyJTvRLtp5wc1SftMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-RXb6yTnZauw/VkaSj7wVSVI/AAAAAAAAxX0/nql5QPa58F8/w850/top-comparison.jpg\" width=\"850\" height=\"339\" alt=\"Inside the Apple 85W Macbook charger (left) vs an imitation charger (right). The genuine charger is crammed full of components, while the imitation has fewer parts.\" title=\"Inside the Apple 85W Macbook charger (left) vs an imitation charger (right). The genuine charger is crammed full of components, while the imitation has fewer parts.\" /></a>\n</p><div class=\"cite\">\nInside the Apple 85W Macbook charger (left) vs an imitation charger (right). The genuine charger is crammed full of components, while the imitation has fewer parts.\n</div>\n<p>\nThe imitation charger has about half the components of the genuine charger and a lot of blank space on the circuit board.\nWhile the genuine Apple charger is crammed full of components, the imitation leaves out a lot of filtering and regulation as well as the entire PFC circuit. The transformer in the imitation charger (big yellow rectangle) is much bulkier than in Apple\'s charger; the higher frequency of Apple\'s more advanced resonant converter allows a smaller transformer to be used.\n</p><p>\n<a href=\"https://picasaweb.google.com/lh/photo/7W3dES7C2FV-XB5QHKJNW9MTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-eNLODWg7Ctk/VkaSjR-cLGI/AAAAAAAAxXw/14j0h9RMnZ0/w850/compare-back.jpg\" width=\"850\" height=\"317\" alt=\"The circuit board of the Apple 85W Macbook charger (left) compared with an imitation charger (right). The genuine charger has many more components.\" title=\"The circuit board of the Apple 85W Macbook charger (left) compared with an imitation charger (right). The genuine charger has many more components.\" /></a>\n</p><div class=\"cite\">\nThe circuit board of the Apple 85W Macbook charger (left) compared with an imitation charger (right). The genuine charger has many more components.\n</div>\n<p>\nFlipping the chargers over and looking at the circuit boards shows the much more complex circuitry of the Apple charger.\nThe imitation charger has just one control IC (in the upper left).<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref17\">[17]</a>\nsince the PFC circuit is omitted entirely. In addition, the control circuits are much less complex and the imitation leaves out the ground connection.\n</p><p>\nThe imitation charger is actually better quality than I expected, compared to the awful\n<a href=\"http://www.righto.com/2014/05/a-look-inside-ipad-chargers-pricey.html\">counterfeit iPad charger</a> and <a href=\"http://www.righto.com/2012/03/inside-cheap-phone-charger-and-why-you.html\">iPhone charger</a> that I examined.\nThe imitation Macbook charger didn\'t cut every corner possible and uses a moderately complex circuit.\nThe imitation charger pays attention to safety, using insulating tape and keeping low and high voltages widely separated, except for one dangerous assembly error that can be seen below.\nThe Y capacitor (blue) was installed crooked, so its connection lead from the low-voltage side ended up dangerously close to a pin on the high-voltage side of the optoisolator (black), creating a risk of shock.\n</p><p>\n<a href=\"https://picasaweb.google.com/lh/photo/HOD4uSIjip-6Se3-ptsemtMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-qoKo3dW7cd4/VkaScxza1cI/AAAAAAAAxXk/SIRAV9ue7JE/w400/tooclose.jpg\" width=\"400\" height=\"311\" alt=\"Safety hazard inside an imitation Macbook charger. The lead of the Y capacitor is too close to the pin of the optoisolator, causing a risk of shock.\" title=\"Safety hazard inside an imitation Macbook charger. The lead of the Y capacitor is too close to the pin of the optoisolator, causing a risk of shock.\" /></a>\n</p><div class=\"cite\">\nSafety hazard inside an imitation Macbook charger. The lead of the Y capacitor is too close to the pin of the optoisolator, causing a risk of shock.\n</div>\n<h3>Problems with Apple\'s chargers</h3>\nThe <a href=\"https://en.wikipedia.org/wiki/Irony#Situational_irony\">ironic</a> thing about the Apple Macbook charger is that despite its complexity and attention to detail, it\'s not a reliable charger.\nWhen I told people I was doing a charger teardown, I rapidly collected a pile of broken chargers from people who had failed chargers.\nThe charger cable is rather flimsy, leading to a <a href=\"http://www.macworld.com/article/1163480/apple_settles_magsafe_lawsuit_offers_replacements.html\">class action lawsuit</a> stating that the power adapter <a href=\"https://www.adaptersettlement.com/faq.aspx#q2\">dangerously frays, sparks and prematurely fails to work</a>.\nApple provides <a href=\"https://support.apple.com/en-us/HT201600\">detailed instructions</a> on how to avoid damaging the wire, but a stronger cable would be a better solution.\nThe result is <a href=\"http://www.apple.com/shop/product/MC556LL/B/apple-85w-magsafe-power-adapter-for-15-and-17-inch-macbook-pro\">reviews on the Apple website</a> give the charger a dismal 1.5 out of 5 stars.\n<p>\n<a href=\"https://picasaweb.google.com/lh/photo/_Tv0bSrE9xvaq5JOoJlZpNMTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-T7-KTqpN-TY/Vk1Oy0L69ZI/AAAAAAAAxaY/v3LJtJ55M-c/w500/charred.jpg\" width=\"500\" height=\"304\" alt=\"Burn mark inside an 85W Apple Macbook power supply that failed.\" title=\"Burn mark inside an 85W Apple Macbook power supply that failed.\" /></a>\n</p><div class=\"cite\">\nBurn mark inside an 85W Apple Macbook power supply that failed.\n</div>\n<p>\nMacbook chargers also fail due to internal problems.\nThe photos above and below show burn marks inside a failed Apple charger from my collection.<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref18\">[18]</a>\nI can\'t tell exactly what went wrong, but something caused a short circuit that burnt up a few components. (The white gunk in the photo is insulating silicone used to mount the board.)\n</p><p>\n<a href=\"https://picasaweb.google.com/lh/photo/8NtIhBso-BwAZtW5ZgnjL9MTjNZETYmyPJy0liipFm0\"><img class=\"hilite\" src=\"https://lh3.googleusercontent.com/-mZgB6d_NjOA/Vk7BNtotTxI/AAAAAAAAxcY/Jqca3S0rVxY/w500/burn.jpg\" width=\"500\" height=\"322\" alt=\"Burn marks inside an Apple Macbook charger that malfunctioned.\" title=\"Burn marks inside an Apple Macbook charger that malfunctioned.\" /></a>\n</p><div class=\"cite\">\nBurn marks inside an Apple Macbook charger that malfunctioned.\n</div>\n<h3>Why Apple\'s chargers are so expensive</h3>\nAs you can see, the genuine Apple charger has a much more advanced design than the imitation charger and includes more safety features. However, the genuine charger costs $65 more and I doubt the additional components cost more than $10 to $15<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref19\">[19]</a>. Most of the cost of the charger goes into the healthy profit margin that Apple has on their products. Apple has an estimated 45% profit margin on iPhones<a class=\"ref\" href=\"http://www.righto.com/2015/11/macbook-charger-teardown-surprising.html#ref20\">[20]</a>\nand chargers are probably even more profitable.\nDespite this, I don\'t recommend saving money with a cheap eBay charger due to the safety risk.\n<h2>Conclusion</h2>\nPeople don\'t give much thought to what\'s inside a charger,\nbut a lot of interesting circuitry is crammed inside.\nThe charger uses advanced techniques such as power factor correction and a resonant switching power supply to produce 85 watts of power in a compact, efficient unit.\nThe Macbook charger is an impressive piece of engineering, even if it\'s not as reliable as you\'d hope.\nOn the other hand, cheap no-name chargers cut corners and often have safety issues, making them risky, both to you and your computer.\n\n<h2>Notes and references</h2>\n<a></a>[1]\n\nThe main alternative to a switching power supply is a linear power supply, which is much simpler and converts excess voltage to heat.\nBecause of this wasted energy, linear power supplies are only about 60% efficient, compared to about 85% for a switching power supply.\nLinear power supplies also use a bulky transformer that may weigh multiple pounds, while switching power supplies can use a tiny high-frequency transformer.\n\n<p>\n<a></a>[2]\n\nSwitching power supplies were taking over the computer industry as early as 1971. <i>Electronics World</i> said that\ncompanies using switching regulators \"read like a \'Who\'s Who\' of the computer industry: IBM, Honeywell, Univac, DEC, Burroughs, and RCA, to name a few\". See\n \"The Switching Regulator Power Supply\", Electronics World v86 October 1971, p43-47.\n In 1976, Silicon General introduced <a href=\"http://powerelectronics.com/power-management/pwm-single-chip-giant-industry\">SG1524 PWM integrated circuit</a>, which put the control circuitry for a switching power supply on a single chip.\n \n</p><p>\n<a></a>[3]\n\nThe quote about the Apple II power supply is from page 74 of the 2011 book\n<a href=\"http://www.amazon.com/gp/product/1451648537/ref=as_li_ss_tl?ie=UTF8&amp;tag=rightocom&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1451648537\">Steve Jobs</a> by Walter Isaacson.\nIt inspired me to write a detailed history of switching power supplies: <a href=\"http://www.righto.com/2012/02/apple-didnt-revolutionize-power.html\">Apple didn\'t revolutionize power supplies; new transistors did</a>.\nSteve Job\'s quote sounds convincing, but I consider it the <a href=\"http://www.folklore.org/StoryView.py?story=Reality_Distortion_Field.txt\">reality distortion field</a> in effect.\n\n</p><p>\n<a></a>[4]\n\nIf anyone can take the credit for making switching power supplies an inexpensive everyday product, it is Robert Boschert.\nHe started selling switching power supplies in 1974\nfor everything from printers and computers to the F-14 fighter plane.\nSee <a href=\"http://electronicdesign.com/boards/robert-boschert-man-many-hats-changes-world-power-supplies\">Robert Boschert: A Man Of Many Hats Changes The World Of Power Supplies</a> in <i>Electronic Design</i>.\nThe Apple II\'s power supply is very similar to the\n<a href=\"http://www.epanorama.net/sff/Power%20Electronics/Power_Supplies-Switching/Flyback%20Converter%20Power%20Supply%20Theory.pdf\">Boschert OL25 flyback power supply</a> but with a <a href=\"https://www.google.com/patents/US4130862#v=onepage&amp;q&amp;f=false\">patented</a> variation.\n\n</p><p>\n<a></a>[5]\n\nYou might expect the bad power factor is because switching power supplies rapidly turn on and off, but that\'s not the problem. The difficulty comes from the nonlinear diode bridge, which charges the input capacitor only at peaks of the AC signal.\n(If you\'re familiar with power factors due to phase shift, this is totally different. The problem is the non-sinusoidal current, not a phase shift.)\n</p><p>\nThe <a href=\"http://www.vicorpower.com/documents/application_notes/an1_active-pfc.pdf\">idea behind PFC</a> is to use a DC-DC boost converter before the switching power supply itself. The boost converter is carefully controlled so its input current is a sinusoid proportional to the AC waveform. The result is the boost converter looks like a nice resistive load to the power line, and the boost converter supplies steady voltage to the switching power supply components.\n\n</p><p>\n<a></a>[6]\n\nThe charger uses a <a href=\"http://www.mouser.com/ds/2/308/mc33368-d-302405.pdf\">MC33368</a> \"High Voltage GreenLine Power Factor Controller\" chip\nto run the PFC. The chip is designed for low power, high-density applications so it\'s a good match for the charger.\n\n</p><p>\n<a></a>[7]\n\nThe SMPS controller chip is a <a href=\"http://www.st.com/web/catalog/sense_power/FM142/CL1454/SC354/PF129679\">L6599</a> high-voltage resonant controller; for some reason it is labeled DAP015D.\nIt uses a resonant half-bridge topology; in a half-bridge circuit, two transistors control power through the transformer first one direction and then the other.\nCommon switching power supplies use a PWM (pulse width modulation) controller, which adjusts the time the input is on. \nThe L6599, on the other hand, adjusts the frequency instead of the pulse width. The two transistors alternate switching on for 50% of the time. As the frequency increases above the resonant frequency, the power drops, so controlling the frequency regulates the output voltage.\n\n</p><p>\n<a></a>[8]\n\nThe processor in the charger is a MSP430F2003 ultra low power microcontroller with 1kB of flash and just 128 bytes of RAM. It includes a high-precision 16-bit analog to digital converter. More information is <a href=\"http://www.ti.com/product/msp430f2003\">here</a>.\n</p><p>\nThe 68000 microprocessor from the original Apple Macintosh and the 430 microcontroller in the charger aren\'t directly comparable as they have very different designs and instruction sets.\nBut for a rough comparison, the <a href=\"https://en.wikipedia.org/wiki/Motorola_68000\">68000</a> is a 16/32 bit processor running at <a href=\"https://en.wikipedia.org/wiki/Macintosh_128K\">7.8MHz</a>, while the MSP430 is a 16 bit processor running at 16MHz. \nThe Dhrystone benchmark measures\n<a href=\"https://en.wikipedia.org/wiki/Instructions_per_second#Timeline_of_instructions_per_second\">1.4 MIPS</a> (million instructions per second) for the 68000 and much higher performance of\n<a href=\"http://www.ecrostech.com/Other/Resources/Dhrystone.htm\">4.6 MIPS</a> for the MSP430. The MSP430 is designed for low power consumption, using about 1% of the power of the 68000.\n\n</p><p>\n<a></a>[9]\n\nThe 60W Macbook charger uses a custom MSP430 processor, but the 85W charger uses a general-purpose processor that needs to <a href=\"http://www.ti.com/lit/ug/slau320v/slau320v.pdf\">loaded with firmware</a>.\nThe chip is programmed with the <a href=\"https://en.wikipedia.org/wiki/Spy-Bi-Wire\">Spy-Bi-Wire</a> interface, which is TI\'s two-wire variant of the standard JTAG interface.\nAfter programming, a security fuse inside the chip is blown to prevent anyone from reading or modifying the firmware.\n\n</p><p>\n<a></a>[10]\n\nThe voltage to the processor is provided by not by a standard voltage regulator, but a <a href=\"https://cds.linear.com/docs/en/datasheet/1460fc.pdf\">LT1460</a> precision reference, which outputs 3.3 volts with the exceptionally high accuracy of 0.075%. This seems like overkill to me;\nthis chip is the second-most expensive chip in the charger after the SMPS controller, based on Octopart\'s prices.\n\n</p><p>\n<a></a>[11]\n\nThe voltage reference chip is unusual, it is a <a href=\"http://www.st.com/web/en/resource/technical/document/datasheet/CD00001691.pdf\">TSM103/A</a> that combines two op amps and a 2.5V reference in a single chip.\nSemiconductor properties vary widely with temperature, so keeping the voltage stable isn\'t straightforward. \nA clever circuit called a <i>bandgap reference</i> cancels out temperature variations; I explain it in detail <a href=\"http://www.righto.com/2014/09/reverse-engineering-counterfeit-7805.html\">here</a>. \n\n</p><p>\n<a></a>[12]\n\nSince some readers are very interested in grounding, I\'ll give more details.\nA 1K&amp;ohm; ground resistor connects the AC ground pin to the charger\'s output ground. (With the 2-pin plug, the AC ground pin is not connected.)\nFour 9.1M&amp;ohm; resistors connect the internal DC ground to the output ground. Since they cross the isolation boundary, safety is an issue. Their high resistance avoids a shock hazard. In addition, since there are four resistors in series for redundancy, the charger remains safe even if a resistor shorts out somehow. There is also a Y capacitor (680pF, 250V) between the internal ground and output ground; this blue capacitor is on the upper side of the board. A T5A fuse (5 amps) protects the output ground.\n\n</p><p>\n<a></a>[13]\n\nThe power in watts is simply the volts multiplied by the amps. Increasing the voltage is beneficial because it allows higher wattage; the maximum current is limited by the wire size.\n\n</p><p>\n<a></a>[14]\n\nThe control circuitry is fairly complex.\nThe output voltage is monitored by an op amp in the TSM103/A chip which compares it with a reference voltage generated by the same chip. This amplifier sends a feedback signal via an optoisolator to the SMPS control chip on the primary side. If the voltage is too high, the feedback signal lowers the voltage and vice versa. That part is normal for a power supply, but ramping the voltage from 16.5 volts to 18.5 volts is where things get complicated.\n</p><p>\nThe output current creates a voltage across the current sense resistors, which have a tiny resistance of 0.005&amp;ohm; each - they are more like wires than resistors. An op amp in the TSM103/A chip amplifies this voltage. This signal goes to tiny <a href=\"http://www.ti.com/lit/ds/symlink/ts321.pdf\">TS321</a> op amp which starts ramping up when the signal corresponds to 4.1A. This signal goes into the previously-described monitoring circuit, increasing the output voltage.\n</p><p>\nThe current signal also goes into a tiny <a href=\"http://www.st.com/web/en/resource/technical/document/datasheet/CD00001660.pdf\">TS391</a> comparator, which sends a signal to the primary through another optoisolator to cut the output voltage. This appears to be a protection circuit if the current gets too high.\nThe circuit board has a few spots where zero-ohm resistors (i.e. jumpers) can be installed to change the op amp\'s amplification. This allows the amplification to be adjusted for accuracy during manufacture.\n\n</p><p>\n<a></a>[15]\n\nIf you measure the voltage from a Macbook charger, you\'ll find about six volts instead of the 16.5 volts you\'d expect. The reason is the output is deactivated and you\'re only measuring the voltage through the bypass resistor just below the output transistor.\n</p><p>\n<a></a>[16]\n\nThe laptop pulls the charger output low with a 39.41K&amp;ohm; resistor to indicate that it is ready for power. An interesting thing is it won\'t work to pull the output too low - shorting the output to ground doesn\'t work. This provides a safety feature. Accidental contact with the pins is unlikely to pull the output to the right level, so the charger is unlikely to energize except when properly connected.\n\n</p><p>\n<a></a>[17]\n\nThe imitation charger uses the Fairchild <a href=\"https://www.fairchildsemi.com/datasheets/FA/FAN7602.pdf\">FAN7602</a> Green PWM Controller chip, which is more advanced than I expected in a knock-off; \nI wouldn\'t have been surprised if it just used a simple transistor oscillator.\nAnother thing to note is the imitation charger uses a single-sided circuit board, while the genuine uses a double-sided circuit board, due to the much more complex circuit.\n\n</p><p>\n<a></a>[18]\n\nThe burnt charger is an Apple A1222 85W Macbook charger, which is a different model from the A1172 charger in the rest of the teardown.\nThe A1222 is in a slightly smaller, square case and has a totally different design based on the\n<a href=\"http://monitor.espec.ws/files/ncp1203_105.pdf\">NCP 1203</a> PWM controller chip.\nComponents in the A1222 charger are packed even more tightly than in the A1172 charger. Based on the burnt-up charger, I think they pushed the density a bit too far.\n\n</p><p>\n<a></a>[19]\nI looked up many of the charger components on <a href=\"http://octopart.com\">Octopart</a> to see their prices. Apple\'s prices should be considerably lower. The charger has many tiny resistors, capacitors and transistors; they cost less than a cent each. The larger power semiconductors, capacitors and inductors cost considerably more. I was surprised that the 16-bit MSP430 processor costs only about $0.45. I estimated the price of the custom transformers. The list below shows the main components.\n</p><table><tr><th>Component</th><th>Cost</th></tr><tr><td>MSP430F2003 processor</td><td>$0.45</td></tr><tr><td>MC33368D PFC chip</td><td>$0.50</td></tr><tr><td>L6599 controller chip</td><td>$1.62</td></tr><tr><td>LT1460 3.3V reference</td><td>$1.46</td></tr><tr><td>TSM103/A reference</td><td>$0.16</td></tr><tr><td>2x P11NM60AFP 11A 60V MOSFET</td><td>$2.00</td></tr><tr><td>3x Vishay optocoupler</td><td>$0.48</td></tr><tr><td>2x 630V 0.47uF film capacitor</td><td>$0.88</td></tr><tr><td>4x 25V 680uF electrolytic capacitor</td><td>$0.12</td></tr><tr><td>420V 82uF electrolytic capacitor</td><td>$0.93</td></tr><tr><td>polypropylene X2 capacitor</td><td>$0.17</td></tr><tr><td>3x toroidal inductor</td><td>$0.75</td></tr><tr><td>4A 600V diode bridge</td><td>$0.40</td></tr><tr><td>2x dual common-cathode schottky rectifier 60V, 15A</td><td>$0.80</td><td></td></tr><tr><td>20NC603 power MOSFET</td><td>$1.57</td></tr><tr><td>transformer</td><td>$1.50?</td></tr><tr><td>PFC inductor</td><td>$1.50?</td></tr></table><p>\n<a></a>[20]\n\nThe article <a href=\"http://www.digitaltrends.com/mobile/iphone-cost-what-apple-is-paying/\">Breaking down the full $650 cost of the iPhone 5</a> describes Apple\'s profit margins in detail, estimating 45% profit margin on the iPhone.\nSome people have suggested that Apple\'s research and development expenses explain the high cost of their chargers, but the math shows R&amp;D costs must be negligible. \nThe book\n<a href=\"http://www.amazon.com/gp/product/0121370305/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0121370305&amp;linkCode=as2&amp;tag=rightocom&amp;linkId=BVOTBHVW2MMRFIQ5\">Practical Switching Power Supply Design</a>\nestimates 9 worker-months to design and perfect a switching power supply, so perhaps $200,000 of engineering cost.  More than 20 million Macbooks are sold per year, so the R&amp;D cost per charger would be one cent. Even assuming the Macbook charger requires ten times the development of a standard power supply only increases the cost to 10 cents.\n\n</p>\n',1),(240,'elasticio/haproxy-srv','https://github.com/elasticio/haproxy-srv',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>HAProxy-SRV is a templating solution that can flexibly reconfigure HAProxy based on the regular polling of the\nservice data from DNS (e.g. SkyDNS or Mesos-DNS) using SRV records.</p>\n\n<p>It has a very simple logic - HA Proxy is configured based on the Handlebars template that is re-evaluated every time changes in DNS are detecting. Script is polling DNS and trigger a HA Proxy configuration refresh after changes.</p>\n\n<p>Made by <a href=\"http://www.elastic.io\">elastic.io</a> in Germany.</p>\n\n\n\n<p>Script works very simple - after docker container started script parse and validates template, create a HAProxy configuration file in <code>/src/haproxy.cfg</code> and start HAProxy as a daemon. Every second (by default, can be configured via <code>REFRESH_TIMEOUT</code> env variable, default 1000) scirpt will execute a DNS lookup and re-evaluate the template, if result of evaluation is different from original configuration, original config will be overwritten and HAProxy reload will be triggered. HAProxy reload will not affect existing connections.</p>\n\n\n\n<p>Recommended way to deploy is is to use <a href=\"https://hub.docker.com/r/elasticio/haproxy-srv/\">a Docker image</a>. You would need to place your configuration file template, the simples way to do it is to build an image based on <code>haproxy-srv</code> image. </p>\n\n<p>Create a new <code>Dockerfile</code> content like this:</p>\n\n<pre><code>FROM elasticio/haproxy-srv:latest\n\nCOPY haproxy.cfg.template /src/\n\nEXPOSE 80 8880\n</code></pre>\n\n<p>Note the <code>EXPOSE</code> part here, don\'t forget to specify exposed ports if your HAProxy configuration listens on any port different from <code>80</code>.</p>\n\n<p>As a next step create a template file, it should be placed under <code>/src/haproxy.cfg.template</code> in resulting Docker container and should have a <a href=\"http://handlebarsjs.com/\">Handlebars</a> syntax with one little extension (see below). Here is the sample:</p>\n\n<div class=\"highlight highlight-text-html-handlebars\"><pre>global\n    user root\n    group root\n\n    # Stats required for this module to work\n    # https://github.com/observing/haproxy#haproxycfg\n    stats socket /tmp/haproxy.sock level admin\n\ndefaults\n    mode    http\n    timeout connect 5000\n    timeout client  50000\n    timeout server  50000\n\n<span class=\"pl-c1\">{{#dns-srv</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_frontend._tcp.marathon.mesos<span class=\"pl-pds\">\"</span></span><span class=\"pl-c1\">}}</span>\n    frontend sample\n        bind 0.0.0.0:80\n        balance roundrobin\n        option http-server-close\n        option forwardfor\n        <span class=\"pl-c1\">{{#each</span> <span class=\"pl-v\">this</span><span class=\"pl-c1\">}}</span>\n            server frontend-<span class=\"pl-c1\">{{</span><span class=\"pl-v\">@index</span><span class=\"pl-c1\">}}</span> <span class=\"pl-c1\">{{</span><span class=\"pl-v\">ip</span><span class=\"pl-c1\">}}</span>:<span class=\"pl-c1\">{{</span><span class=\"pl-v\">port</span><span class=\"pl-c1\">}}</span> check weight <span class=\"pl-c1\">{{</span><span class=\"pl-v\">weight</span><span class=\"pl-c1\">}}</span>\n        <span class=\"pl-c1\">{{/each}}</span>\n<span class=\"pl-c1\">{{/dns-srv}}</span></pre></div>\n\n<p>It could be any valid HAProxy configuration with one mandatory addition:</p>\n\n<pre><code>stats socket /tmp/haproxy.sock level admin\n</code></pre>\n\n<p>to trigger HAProxy restart the script inside the file will communicate with HAProxy daemon via socket <code>/tmp/haproxy.sock</code>.</p>\n\n\n\n<p>Configuration template is a normal <a href=\"http://handlebarsjs.com/\">Handlebars</a> so that you could use any of the feature of this template language. There is however one additional helper <code>dns-srv</code> implemented. This helper takes one string parameter and will execute a <a href=\"https://nodejs.org/api/dns.html#dns_dns_resolvesrv_hostname_callback\">DNS SRV lookup</a> to fetch an SRV record(s). After SRV Record lookup, for each SRV record a <a href=\"https://nodejs.org/api/dns.html#dns_dns_resolve_hostname_rrtype_callback\">DNS resolution</a> to find the IP will be made.</p>\n\n<p>This template will give you an idea how to use it:</p>\n\n<div class=\"highlight highlight-text-html-handlebars\"><pre># Your usual configuration is here\n<span class=\"pl-c1\">{{#dns-srv</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_frontend._tcp.marathon.mesos<span class=\"pl-pds\">\"</span></span><span class=\"pl-c1\">}}</span>\n    # This block will only be rendered when _frontend._tcp.marathon.mesos was found in DNS\n    <span class=\"pl-c1\">{{#each</span> <span class=\"pl-v\">this</span><span class=\"pl-c1\">}}</span>\n        # This piece will be rendered for each SRV entry from DNS\n        SRV Name is <span class=\"pl-c1\">{{</span><span class=\"pl-v\">name</span><span class=\"pl-c1\">}}</span>\n        SRV Weight is <span class=\"pl-c1\">{{</span><span class=\"pl-v\">weight</span><span class=\"pl-c1\">}}</span>\n        SRV Port is <span class=\"pl-c1\">{{</span><span class=\"pl-v\">port</span><span class=\"pl-c1\">}}</span>\n        IP for SRV Name is <span class=\"pl-c1\">{{</span><span class=\"pl-v\">ip</span><span class=\"pl-c1\">}}</span>\n    <span class=\"pl-c1\">{{/each}}</span>\n<span class=\"pl-c1\">{{/dns-srv}}</span>\n# rest of your configuration</pre></div>\n\n<p>Typical use-case for Msos-DNS you can see above.</p>\n\n\n\n<p>Just set the <code>DEBUG</code> environment variable into <code>*</code> to see detailed logging.</p>\n\n\n\n<p>PRs are welcome for</p>\n\n<ul><li>Bug fixes</li>\n<li>Unit tests</li>\n<li>Gulp or Grunt-based builds</li>\n<li>CircleCI config for continous integration</li>\n</ul>',1),(241,'Git Source Code Review','http://fabiensanglard.net/git_code_review/diff.php',0,0,'<p>April 1st, 2014</p>\n\n			\n<p>\n<a href=\"http://fabiensanglard.net/git_code_review/index.php\">\n<img class=\"shadowed\" src=\"http://fabiensanglard.net/git_code_review/git_blue_print.png\" alt=\"git_blue_print.png\" /></a> \n        \n  \nTo find the differences between two \"things\" is a difficult task that Git has to perform very often:\n</p><ul><li>Find the differences between two binaries files in order to generate a delta.</li>\n   <li>Find the differences between two text files in order to merge properly.</li>\n   <li>Find the differences between two text files in order to display it.</li>\n   <li>Find the differences between two commands in order to find typos.</li>\n</ul><p>\nHere is a summary of all the algorithms used with an associated genesis.</p><p><a href=\"http://fabiensanglard.net/git_code_review/index.php\">Part 1: Overview</a><br /><a href=\"http://fabiensanglard.net/git_code_review/history.php\">Part 2: Genesis</a>\n<a href=\"http://fabiensanglard.net/git_code_review/architecture.php\">Part 3: Architecture</a>\n<a href=\"http://fabiensanglard.net/git_code_review/diff.php\">Part 4: Algorithms for DIFF</a>\n</p>\n\n\n\n\n\n<h2>Diff on text</h2>\n<p>\n Find the difference between text files is something Git has to do the most commonly :\n  </p><ul><li>Look at the difference between index and working directory: <code class=\"git\">git diff file.txt</code>.</li>\n    <li>Compare the change between two commits: <code class=\"git\">git diff commitBefore commitAfter</code></li>\n    <li>Generate a patch : <code class=\"git\">git format-patch master --stdout &gt; mypatch.patch</code>.</li>\n  </ul><p>\n   The <a href=\"https://github.com/git/git/blob/e83c5163316f89bfbde7d9ab23ca2e25604af290/show-diff.c#L39\">first implementation</a> simply leveraged the system <code>diff</code> executable via a call to <code>popen</code> in <code>show-diff.c</code>.\n    <code>diff</code> is a very\n  famous and ubiquitous tool in the Linux world originally developed in the early 1970 for Unix. Its first version used <a href=\"http://en.wikipedia.org/wiki/Hunt%E2%80%93McIlroy_algorithm\">Hunt–McIlroy algorithm</a>. The core algorithm was later notoriously improved thanks to the work of <a href=\"http://en.wikipedia.org/wiki/Eugene_Myers\">Eugene W. Myers</a> and <a href=\"http://en.wikipedia.org/wiki/Webb_Miller\">Webb Miller</a>, work extensively document in the papers:\n   <a href=\"http://www.xmailserver.org/diff2.pdf\">An O(ND) Difference Algorithm and its Variations</a> by Eugene W. Myers and  \n   <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.189.70&amp;rep=rep1&amp;type=pdf\">A File Comparison Program</a> by Webb Miller and Myers.</p><p>The two most important metrics for diff operations are:\n   </p><ol><li>Speed</li>\n     <li>Quality</li>\n   </ol><p>\n     <u>Effort on Speed :</u><br /></p><p>\n    System diff not only consumed a <code>fork</code>/<code>exec</code>, it \n    also required a lot of useless access disks because of temporary data. A builtin diff module was needed and implemented in <a href=\"https://github.com/git/git/commit/3443546f6ef57fe28ea5cca232df8e400bfc3883\">March 2006 patch</a> which introduced the <code>xdiff</code> folder containing a simplified version of <a href=\"http://www.xmailserver.org/xdiff-lib.html\">libxdiff</a>:\n</p>\n\n\n<p>\n  Since libxdiff used Eugene W. Myers\'s algorithm, the diff strategy was called <code>myers</code>. To this day it is still the \ndefault way git perform all diffs on text. </p><p><u>Effort on Quality :</u><br /></p><p>\n    If speed is an easy metric to understand and benchmark, quality is subjective and not intuitive. Take for example two versions of a file where a developer simply added a method <code>functhreehalves</code> in the middle. There are two way to reconstruct the change but one is of much higher quality because it clearly shows what was added where the other seems to indicate something was modified.</p><table border=\"0\"><tr><td>\n   <pre> \n\n   \n   $diff -y file2 file1\n   void func1() {            void func1() {\n     x += 1                     x += 1\n   }                         }\n<span>\n                           &gt; void functhreehalves() {\n                           &gt;   x += 1.5\n                           &gt; }\n                           &gt; </span>\n   void func2() {            void func2() {\n     x += 2                    x += 2\n   }                         }\n\n\n   </pre>\n </td>\n <td>\n\n\n   <pre> \n\n   \n   $diff -y file2 file1\n   void func1() {            void func1() {\n     x += 1                     x += 1\n   }<span>                       &gt; }\n                           &gt;\n                           &gt; void functhreehalves() {\n                           &gt;   x += 1.5\n                            </span> }\n                           \n   void func2() {            void func2() {\n     x += 2                    x += 2\n   }                         }\n\n\n   </pre>\n </td>\n</tr></table><p>\n    The discussion started in <a href=\"http://marc.info/?l=git&amp;m=123082787502576&amp;w=2\">[PATCH 0/3] Teach Git about\n     the patience diff algorithm</a> where quality between git\'s myers and bazar\'s patience were compared. \n     Since patience algorithm seemed to provide a better quality on specific input it was shortly added in a \n     <a href=\"https://github.com/git/git/commit/92b7de93fb7801570ddc3195f03f30b9c201a3bd\">patch</a> \n      that modified further <code>xdiff</code> :\n    </p>\n    <p>\n    You can find more documentation on patience algorithm from the author himself Bram Cohen (yes, the guy who also invented Bittorrent):\n    <a href=\"http://bramcohen.livejournal.com/73318.html\">Patience Diff Advantages</a> and <a href=\"http://alfedenzo.livejournal.com/170301.html\">Patience Diff, a brief summary</a>.</p><p>Further work was done by people from <a href=\"http://www.eclipse.org/jgit/\">jgit project</a> (which is a Java/Eclipse based). Their histogram based technique was supposed to be faster than <code>myers</code> while still based on based on Cohen\'s four rules found in <code>patience</code> (best of both world). A <a href=\"https://github.com/git/git/commit/8c912eea94a2138e8bc608f7c390eb0b313effb0\">patch</a> was eventually submitted: \n\n</p>\n    <br /><u>Note :</u> So which diff strategy should be used? I personally have always used the default \n(<code>myers</code>). <code>histogram</code> and <code>patience</code> seem to provide better \noutput on specific case but they are so marginal and poorly documented that it is impossible to \nknow when they will be good withiout trial/errors. If non-obsolete test cases could be provided \nusers could probably make educated decisions.\n    <p><u>Note :</u> There is a fourth diff strategy called <code>minimal</code> which is actually an extended version of myers: \nIf no minimal diff is requested the myers algo <a href=\"https://github.com/git/git/blob/master/xdiff/xdiffi.c#L153\">simply returns</a>. \nBut if minimal is requested, the algorithm will iterate until a certain amount of CPU time has been consumed and keep \nthe \"best\" diff. Best being the smallest diff. <code>Minimal</code>was always part of xlibdiff and came with the first \"speed\" patch mentioned earlier.</p><p><u>Trivia :</u> This need for speed also triggered the creation of a <a href=\"http://marc.info/?l=git&amp;m=133103975225142\">performance testing framework</a> for diff strategies.</p><p><u>Trivia :</u> diff is such an important feature that git developer even allow user to use their own external custom engine via the \n<code>GIT_EXTERNAL_DIFF</code> variable (<a href=\"http://stackoverflow.com/questions/12590947/using-git-diff-to-detect-code-movement-how-to-use-diff-options\">Using Git diff to detect code movement</a>).\n   </p><p>To finish on text diff, and example of trace trace execution that I found useful:</p><pre>\n\n   main                  (git.c)\n   cmd_diff              (builtin/diff.c)\n   builtin_diff_files    (builtin/pack-objects.c)   \n   run_diff_files        (diff-lib.c)\n   xdi_diff_outf         (xdiff-interface.c)\n   xdi_diff              (xdiff-interface.c)\n   xdl_diff              (xdiff/xdiffi.c)\n   xdl_do_diff           (xdiff/xdiffi.c)\n        xdl_do_patience_diff\n        xdl_do_histogram_diff\n        meyes\n        meyes mininmal\n  </pre>\n\n\n\n<h2>Diff on binaries (deltas)</h2>\n<p>\n  The initial architecture of Git was: one text file =&gt; one sha1 =&gt; one deflated blob. \n  The only drawback was HD storage consumption but \"disk is cheap\" was a fair approach \n  and things worked well this way for a while. But big repositories suffered when being \n  cloned across a network and all those blobs required a lot of disk access.</p><p>The topic <a href=\"http://www.gelato.unsw.edu.au/archives/git/0505/2821.html\">\n  RFC: adding xdelta compression to git</a> raised those issues and in the end it was decided\n   that storage was cheap but bandwidth and I/O were not. The <a href=\"http://xdelta.org/\">xdelta lib</a> was briefly\n   considered but a customized version of xlibdiff was favored and \n   <a href=\"https://github.com/git/git/commit/a310d4349467d78266f38d29e500c77b96ee5bef\">added to xdiff</a>.\n\n</p>\n\n<p>\n  Since binary files miss the CR character used to build atomic units in text algorithm (lines), different heuristic can be used in\n  order to cut the stream. Set length of 48 bytes is an approach but git used <a href=\"http://en.wikipedia.org/wiki/Adler-32\">adler32</a> \n  before being replaced later with Rabin\'s <a href=\"http://www.xmailserver.org/rabin.pdf\">Fingerprinting by random polynomials</a>\n  in an other <a href=\"https://github.com/git/git/commit/3dc5a9e4cdcc7124c665a050547d1285d86a421f\">patch</a>:<br /></p>\n  \n  <p>\n    Rabin\'s finger print technique was a big improvement since the sliding window allowed to detect short addition at the beginning of a zip\n    and keep deltas tiny.</p><p>To finish with binary diff, here is the execution path of pack creation :\n  </p><pre>\n\n   main                  (git.c)\n   cmd_pack_objects      (builtin/pack-objects.c)\n   prepare_pack          (builtin/pack-objects.c)\n   ll_find_deltas        (builtin/pack-objects.c)\n   threaded_find_deltas  (builtin/pack-objects.c)\n   find_deltas           (builtin/pack-objects.c)\n   try_delta             (builtin/pack-objects.c)\n   create_delta          (diff-delta.c) \n  </pre>\n  \n\n\n\n<h2>Diff on command-line</h2>\n<p>\n  git sometimes is not interested by the exact difference but rather by the distance between two strings. \n  In 2008 was <a href=\"https://github.com/git/git/commit/8af84dadb142f7321ff0ce8690385e99da8ede2f\">introduced</a> a \"suggestion\" feature : \n\n</p>\n<p>\n  That is how the dispatcher seen in the <a href=\"http://fabiensanglard.net/git_code_review/architecture.php\">architecture</a> part is able to provide suggestions when a typo is suspected :\n    </p><pre>\n\n\n    $git adt test.txt\n    git: \'adt\' is not a git command. See \'git --help\'.\n\n    Did you mean this?\n      add\n\n    </pre>  \n    <p>\n      Word suggestion are generated by calculating an edit distance for each \n      <a href=\"https://github.com/git/git/blob/afc711b8e1ee89626f0dddf0ef01fb73168d47ca/git.c#L335\">known builtin \n        command</a> using <a href=\"https://github.com/fabiensanglard/git/blob/master/levenshtein.c\">levenshtein distance</a>\n        . Found in <a href=\"https://github.com/git/git/blob/afc711b8e1ee89626f0dddf0ef01fb73168d47ca/levenshtein.c\">levenshtein.c</a> \n      , it is a nice example of dynamic programming.\n</p>\n\n\n\n\n<h2>diffcore, xdiff, xdelta ... what ?</h2>\n<p>\n    Just to summarize (because I was confused when I started) :\n    </p><h2>Next</h2>\n<p>\n    To be published: Git internal algorithms for graphs and  merge operation.\n  </p>\n\n\n  <h2>Comments</h2>\n\n    Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a>\n    \n    \n\n\n\n\n\n\n <h2> </h2>\n<p>Fabien Sanglard @2014</p>\n\n		',1),(242,'Introducing Tamper Â· Tamper','http://nytimes.github.io/tamper/',0,0,'\n  \n  <h3>What is Tamper?</h3>\n\n<p>Tamper is a serialization protocol for categorical data.  It achieves high compression ratios by finding the smallest possible binary representation for each category.</p>\n\n<h3>How does it work?</h3>\n\n<p>Take, for example, a boolean attribute.  In naïve JSON we would represent this as a string, “true” or “false”:</p>\n\n<p><code>\n[{\n  \"guid\" : 1,\n  \"edpick\" : true\n},\n{\n  \"guid\" : 1,\n  \"edpick\" : false\n}]\n</code></p>\n\n<p>Each value is 4-5 bytes; including punctuation <strong>27 bytes are required per item</strong>.</p>\n\n<p>Tamper evaluates the data to find the most efficent encoding—in this case, a <a href=\"https://github.com/NYTimes/tamper/wiki/Packs/#bitmap-pack\">BitmapPack</a>.</p>\n\n<p>The data is serialized as <code>10</code>, <strong>just 0.25 bytes!</strong></p>\n\n<p>Full details of Tamper’s encoding scheme are in the <a href=\"https://github.com/NYTimes/tamper/wiki/Packs\">protocol docs</a>.</p>\n\n<h3>How can it help me?</h3>\n\n<p>If you have a large set of objects that:</p>\n\n<ul><li>you want to transfer from server to browser</li>\n  <li>have categorical attributes (i.e. with a distinct set of possibilities)</li>\n  <li>have numeric ids (Tamper cannot pack string ids)</li>\n</ul><p>Pourover can dramatically reduce the size of your data file, as well as time and memory required to serialize/deserialize.</p>\n\n<hr /><h3>How do I get started?</h3>\n\n<p>Tamper is intended as a companion to <a href=\"http://nytimes.github.io/pourover/\">pourover.js</a>, but can be used independently.</p>\n\n<p>You’ll need:</p>\n\n<ol><li>an encoder to write the TamperPack (available for <a href=\"https://github.com/NYTimes/tamper/wiki/RubyEncoder\">Ruby</a>, <a href=\"https://github.com/oztu/tamp\">JavaScript</a>, and soon Go)</li>\n  <li>the <a href=\"https://github.com/NYTimes/tamper/wiki/JavascriptClient\">javascript client</a>.</li>\n</ol><hr /><h3>How does Tamper compare to other serialization approaches?</h3>\n\n<h5>gzipped JSON</h5>\n\n<p>Gzip works by <a href=\"http://en.wikipedia.org/wiki/DEFLATE\">writing backreferences to previous symbols</a>.  Each time a symbol is repeated, gzip encodes the location and length of the backreference.  These references are in turn compressed — but in most real-world applications are larger than a direct binary encoding.</p>\n\n<p>Additionally, conventional array-of-object JSON layouts sometimes generate backreferences at each attribute boundary.  Because Tamper packs all values for an attribute in a fixed-width format, there is no attribute boundary overhead.</p>\n\n<h5>Google Protocol Buffers</h5>\n\n<p>Integer packs are similar in concept to Protocol Buffer  <tt><a href=\"https://developers.google.com/protocol-buffers/docs/encoding#varints\">varints</a></tt>: integer size is dynamically scaled to fit the value rather than fixed at 32 bits.  However, the minimum size of a varint is one byte; for many applications Tamper requires only 2-5 bits for each item.</p>\n\n<p><a href=\"https://developers.google.com/protocol-buffers/\">Protocol Buffers</a> are optimized for messaging details about a particular item; Tamper packs optimize for bulk categorical loads across many items.</p>\n\n<hr /><p>Tamper is distributed under the <a href=\"https://github.com/NYTimes/tamper/blob/master/LICENSE.txt\">Apache 2.0 License</a>.</p>\n\n<p><img src=\"http://nytimes.github.io/tamper/public/opennews-logo.png\" alt=\"OpenNews logo\" width=\"120\" /><a href=\"http://opennews.org/code.html\">Released for OpenNews Code Convening, April 2014</a></p>\n\n',1),(243,'Immutable Delivery','http://theagileadmin.com/tag/dockercmroundup/',0,0,'\n		<p><span>This article proposes a design pattern modeled after “Immutable Infrastructure”, something I call “Immutable Delivery”.  There has been a lot of debate and discussion about the usage of the term “Immutable” lately. Let me clearly say that there is no such thing as an immutable server or immutable infrastructure. I know of no example in my 35 years of working with IT infrastructure of a system or infrastructure that is  completely immutable. A system changes and continues to change the minute it is powered on. Things like logs, dynamic tables  and memory are constantly changing during a system’s lifecycle.</span></p>\n<p><span>However, I think it’s okay to use the phrases “Immutable Infrastructure” or “Immutable Delivery” in the context of an system or infrastructure delivery pattern. In fact, I propose we think of it as a metaphor for a kind of full stack stateless application delivery pattern.  I’ve had mathematicians actually yell at me after a presentation on Infrastructure as Code and my use of the term idempotency.  When confronted in this sort of battle, I would always retreat with saying “It’s a term used to describe a certain type of operation we do in configuration management”. Henceforth; I suggest the same idea for the use of the phrases “Immutable Infrastructure” and “Immutable Delivery”.</span></p>\n<p><b>First Things First</b></p>\n<p><span>Let’s describe what an “Immutable Infrastructure” model might look like. Basically, it is a model where the complete infrastructure is delivered intact, for example as a  set of immutable virtual machines or as a set of immutable Linux containers. The idea is, by design, to never touch or change the running system. In most cases, the running system is the production system; but in some recent examples with containers, this model is also used in integration and testing structures. I like to say no CRUD for applications, middleware configuration files and operating systems. The model is that when something needs to be changed in the infrastructure,  it is done as a new deploy from the most recent versioned artifact (i.e., the complete system). If there needs to be a rollback, the same process is still a redeploy, except when in this case, the artifact is the older version. One caveat in this model is relational databases. It is very difficult, maybe impossible, to have immutable relational databases. However, some companies I have talked to sort of do what I call an “No RUD” for databases. In that, they create new records but do not replace, update or delete existing ones. Mileage always varies for all of this.</span></p>\n<p><b>Order Matters</b></p>\n<p><span>Back in 2010, I was given an interesting paper written by Steve Traugott called “Order Matters:  Turing Equivalence in Automated Systems Administration” (2002).  Taugott’s article described systems that were either divergent, convergent or congruent.  At the time, I was working at Chef and desired state configuration and building systems through convergent models was what I was currently evangelizing. At that time, I felt that, the “Order Matters” paper described the differentiation between how Chef and Puppet worked.  The short version here is that Chef used a prescriptive Ruby-based DSL that was executed on the local host in an order specific manner based on how you wrote the DSL code.  Whereas Puppet used a clever dependency graph on the Puppet server to determine some of the ordering at deployment time. In some cases, this made a difference for certain types of organizations (Note 1).  Traugott’s paper does an excellent job describing a thesis on why this “could” be so. What fascinated me was Traugott’s explanation of congruent systems.  At that time, there didn’t seem to be a commodified way to deliver this form of infrastructure, at least from my perspective.  </span></p>\n<p><b>Building With Legos</b></p>\n<p><span>A year later Netflix wrote an interesting blog post  called “Building With Legos”.  At the time, there was a lot of outrage (myself included) regarding this post. At first glance, it looked like Netflix was suggesting that they were advocating a model of “Golden Image” delivery infrastructure. Part of my initial reservation was that I had seen this pattern twice in my career with dire consequences. The first time was back in the late 90’s where companies would use a product called “Ghost” to build Windows servers. This was another one of those ideas where it sounded like a good idea at the time until you had, in some cases, thousands of poorly cataloged images and wrong image deploys caused major outages. Fast forward to around 2008 and here again, organizations were starting to make the same mistakes all over again with “cloud” images,  specifically in the form of Amazon AMI’s. I believe that sometime around 2009 the phrase “Image Sprawl” became a popular phrase for doing “cloud” wrong.  In fact, I remember a horrifying story in the early days of cloud, where the Public Broadcast Service (PBS)  accidentally made a proprietary AMI image public and it took them a couple of days to clean up all the viral versions of their private keys.  So at first glance of the Netflix blog post,  you could see how many were thinking they were suggesting a mode of bad configuration management.  However, on a closer read they were much smarter than this.  What they were indeed saying in the blog post was that they were treating the AMI’s like JAR or WAR files in that the AMI images were holistic artifacts built through a continuous integration/continuous delivery (CI/CD) process.  The AMI’s would be pulled at deploy time to be launched into production similar to the way a JAR or WAR would be pulled from an artifact repository.  Only in this example, it  included all the infrastructure (OS, Middleware, application and most of the application configuration files).  I like to use the phrase “Java Lied’ in many of my presentations.  They told us “Write once, run anywhere”.  What they forgot to say is this is true unless you have an incompatible runtime environment.  Netflix at the time of the blog post didn’t refer to that process as “Immutable Infrastructure” and of course it was not completely immutable.  They had to use a set of open source tools to discover the services and converge the deployed services, so hence, their systems were not immutable.  However, their service delivery pattern was indeed a model of an immutable delivery pattern. Some time later, Netflix did start to refer to their architecture as “Immutable Infrastructure”.   </span></p>\n<p><b>Trash Your Servers and Burn Your Code: Immutable Infrastructure</b></p>\n<p><span>June 2013 was the first time I had heard the phrase “Immutable Infrastructure”.  Chad Fowler wrote a blog post “Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components”. In the blog, Fowler proposes his idea born from functional programming techniques that offer immutable data structures. The belief was that if somehow we could deliver the complete infrastructure, for example a server, with all the infrastructure needed  for the application, then in his words, “ it would be easier to reason about and harder to screw up”.  Imagine delivering a server the same way we deliver an application, for example, like a WAR file. Fowler’s main point was that systems grow warts, especially when you are fire fighting.  For example, a system might be well defined through an configuration management  tool, but during an outage, changes may be made on the system directly and then never put back into the configuration management recipe or manifest later.  The list of possible human or system entropy examples goes on.  Fowler also points out that sometimes application code is deployed outside of “normal straight-from-source-control process.” Operating system patching or source repositories sometimes change in flight between testing and production. There are many other examples of possible mismatches in the flow you can find in the wild. All of this could be put in a bucket called “bad configuration management hygiene”; however, just like I have never seen a perfect immutable system, I have also never seen in my 35 years a “perfect system”.  I mean ”system” the way Dr. Deming would describe it, in that, all systems include humans.  </span></p>\n<p><b>Docker and the Three Ways of Devops</b></p>\n<p><span>When I first arrived at Docker back in February 2015,  I reviewed a Gartner paper called “Become More Agile and Get Ready for DevOps by Using Docker in Your Continuous Integration Environments” and it set me down a course of thinking. The author, Sean Kenefick, had a strong background in release engineering and wrote an excellent paper of how Gartner would suggest using Docker.  As I read the paper,  the first thing it reminded me of was Steve Traugott’s paper about order and why it mattered and the value of congruent systems.  I decided to write a blog post called “Docker and the Three Ways of Devops”.  During my research, I talked to a number of Docker users that were doing what Fowler described as Immutable Deployments, using Docker images as the immutable artifacts. This process was similar to what Netflix was doing with two major differences. One, the services were container images not virtual machines, and two, they were being delivered immutably from the developer’s perspective. After the container images were compiled and tested the “service” would be pushed to the CI process for service level integration testing. Most of the organizations using this model had already crossed over to a microservices architecture. The flow would go something like this:</span></p>\n<ul><li><span>The developer would test their service as a container, typically on a virtual machine running on their laptop.    </span></li>\n<li><span>They would also load the other primary services in their service-oriented architecture, possibly owned by other teams, into their same virtual machine on their laptop.  </span></li>\n<li><span>They would continue to compile, load and test their service sometimes on their laptop and other times through a sort of first-pass CI server.  </span></li>\n<li><span>When testing was complete, they would typically check in their service as a container (binary) image with a meta file to describe the rest of the pipeline flow (CI/CD).  </span></li>\n</ul><p><span>All of the people I talked to agreed that the benefit of this process was that the developer was in control not only of the application code they wrote but also of any middleware and basic operating systems behavior (note 2 &amp; 3). The benefits of an immutable delivery process, like the ones described by Netflix with their AMI flow, are that you can increase speed and decrease resources and possible variation with containers. Containers instantiate in around 500 milliseconds whereas virtual machines instantiate well over a minute. In a microservices architecture, many of the containers are around 100 megabytes whereas virtual machines could still be as large as 2 gigabytes. I like to say that containers are the killer app for microservices. With this mode the developer can test all of the other dependent services from their laptop.  Werner Vogels the CTO of Amazon is often quoted as saying, “You build it, you run it”. In Devops we like to say, “developers should wear pagers”. There is a reason why developers like Docker so much. When they build it, own it and get paged in the middle of the night, they know that for the most part the bits that they tested are the same (i.e., congruent ) bits that are running in production.  </span></p>\n<p><span>In 2014 at Dockercon US, Michael Bryzek, of Gilt, gave a fantastic presentation “Immutable Infrastructure with Docker and EC2”.  In this presentation, he describes a process where the developers check in a set of binary container images with one single meta file.  I have personally transcribed what he says starting at 28:03 in his presentation:</span></p>\n<blockquote><p><i><span>“This is how we run our infrastructure. One of the things that developers have to do is provide the commands to start the Docker container, and that’s it. This is kind of amazing right?  Any EC2 instance that we spin up now, we don’t care if you’re running Node, Ruby, Scala, Java or if you made up your own programming language. It’s absolutely amazing how nice this is.  When we compare this to the way we did this in the past, we had one repository that had all of the different scripts to know how to build all of the different applications at Gilt. We have 1000 Git repos and over 300 different applications. We are 7 years old which means we have like 7 different ways of producing applications. There’s 25 different ways that we build software at Gilt and it’s all captured in a central repo.  That was at conflict with where we are going in terms of teams really owning their software and being able to deploy their own services.”</span></i></p></blockquote>\n<p><span>I have talked to a number of companies over the past year and many of them are moving to an “Immutable Delivery” process driven by microservices implemented by containers. Capital One at the Devops Enterprise Summit in October 2015 (DOES15)  gave a presentation called “Banking on Innovation &amp; DevOps”. They said in that presentation that they are using Docker in production. They have also said that they are delivering software in an immutable delivery pattern. This model is not just for web scale anymore.  </span></p>\n<p><span>In the end, “Immutable Infrastructure” or what I have coined as “Immutable Delivery”  is just a model with many variants. No large organization uses a single model to manage their infrastructure. Over the next few years, I look forward to working with all sorts of products, old and new, to find the correct balance of service delivery. My only goal is to be an evangelist of a model that Josh Corman, CTO at Sonatype, and I describe as “Immutable Awesomeness”.  This is  a presentation we did at DOES15.  We borrowed many of our ideas from the book “Toyota Supply Chain Management: A Strategic Approach to Toyota’s Renowned System”.  In this book, they describe the 4 V’s.  Increase Variety, Velocity, and Visibility and decrease Variability.  In short whatever works, works…</span></p>\n<p>John Willis<br />Director of Ecosystem Development, Docker Inc.<br /><a href=\"https://twitter.com/botchagalupe\">@botchagalupe</a></p>\n<p><em>This article is part of our <a href=\"http://theagileadmin.com/tag/dockercmroundup/\">Docker and the Future of Configuration Management</a> blog roundup running this November.  If you have an opinion or experience on the topic <a href=\"http://theagileadmin.com/2015/10/13/docker-and-the-future-of-configuration-management-call-for-posts/\">you can contribute as well</a>! </em></p>\n<p><b>Notes:</b></p>\n<ol><li><span>To be clear, Puppet today allows for both models and this particular differentiation, in my opinion, no longer exists. In fact, both products today have relative parity with regards to ordering.</span></li>\n<li><span>For the nit-pickers, mileage varies on operating system immutability. Containers run on a host operating system and share the kernel.  Bad hygiene on the host will definitely cause “immutable” woes.  </span></li>\n<li><span>This is, by the way, a great area for co-existence between Infrastructure as Code products like Chef and Puppet and containerization products like Docker</span></li>\n</ol><p><strong>References:</strong></p>\n<p><span>Why Order Matters: Turing Equivalence in Automated Systems Administration</span></p>\n<p><a href=\"http://www.infrastructures.org/papers/turing/turing.html\"><span>http://www.infrastructures.org/papers/turing/turing.html</span></a></p>\n<p><span>Building with Legos</span></p>\n<p><a href=\"http://techblog.netflix.com/2011/08/building-with-legos.html\"><span>http://techblog.netflix.com/2011/08/building-with-legos.html</span></a></p>\n<p><span>VM Image Sprawl in Real Life</span></p>\n<p><a href=\"http://www.cloudscaling.com/blog/cloud-computing/vm-image-sprawl-in-real-life/\"><span>http://www.cloudscaling.com/blog/cloud-computing/vm-image-sprawl-in-real-life/</span></a></p>\n<p><span>Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components</span></p>\n<p><a href=\"http://chadfowler.com/blog/2013/06/23/immutable-deployments/\"><span>http://chadfowler.com/blog/2013/06/23/immutable-deployments/</span></a></p>\n<p><span>Become More Agile and Get Ready for DevOps by Using Docker in Your Continuous Integration Environments</span></p>\n<p><a href=\"https://www.gartner.com/doc/3016317/agile-ready-devops-using-docker\"><span>https://www.gartner.com/doc/3016317/agile-ready-devops-using-docker</span></a></p>\n<p><span>Docker and the Three Ways of Devops</span></p>\n<p><a href=\"https://blog.docker.com/2015/05/docker-three-ways-devops/\"><span>https://blog.docker.com/2015/05/docker-three-ways-devops/</span></a></p>\n<p><span>A conversation with Werner Vogels</span></p>\n<p><a href=\"http://queue.acm.org/detail.cfm?id=1142065\"><span>http://queue.acm.org/detail.cfm?id=1142065</span></a></p>\n<p><span>Immutable Infrastructure with Docker and EC2”</span></p>\n<p><a href=\"http://tech.gilt.com/2014/07/02/immutable-infrastructure-with-docker-and-ec2/\"><span>http://tech.gilt.com/2014/07/02/immutable-infrastructure-with-docker-and-ec2/</span></a></p>\n<p><span>Banking on Innovation &amp; DevOps</span></p>\n<p><a href=\"http://devopsenterprise.io/sessions/shortening-the-feedback-loop-devops-dashboard/\"><span>http://devopsenterprise.io/sessions/shortening-the-feedback-loop-devops-dashboard/</span></a></p>\n<p><span>Toyota Supply Chain Management: A Strategic Approach to Toyota’s Renowned System</span></p>\n<p><a href=\"http://www.amazon.com/Toyota-Supply-Chain-Management-Strategic/dp/0071615490\"><span>http://www.amazon.com/Toyota-Supply-Chain-Management-Strategic/dp/0071615490</span></a></p>\n<p><span>Immutable Awesomeness</span></p>\n<p><a href=\"https://www.youtube.com/watch?v=-S8-lrm3iV4\"><span>https://www.youtube.com/watch?v=-S8-lrm3iV4</span></a></p>\n\n			',1),(244,'Docker Orchestration - The Full Story','https://railsadventures.wordpress.com/2015/11/15/docker-orchestration-the-full-story/',0,0,'<div>\n					<p>Two months ago we, at <a href=\"http://nanit.com\">nanit.com</a>, had to make a difficult choice. We already knew our infrastructure is going to heavily rely on Docker, but we still had to figure out what tool we would use to orchestrate our containers.<br />Orchestrating is a big word and might sound vague to someone which has not dealt with Docker containers before, so let’s clarify what it exactly means in the Docker world.</p>\n<h3>The Evolution of Operations</h3>\n<p>So why do we need orchestration? What does an orchestrator even do? Is it a new concept that rose with the evolution Docker has brought into our lives or was it always there and just became a necessity now days?<br />The answer to all of those questions hides in the inherent and deep difference Docker introduced to the way our infrastructure looks and behaves.<br />On the days before Docker, we had either physical or virtual machines. Each machine (physical or virtual) was usually responsible for a single function. For example, let’s look at a typical infrastructure of a web site:</p>\n<div class=\"wp-caption aligncenter\"><a href=\"https://railsadventures.files.wordpress.com/2015/11/infra-before-docker.png\"><img class=\"size-full wp-image-724\" src=\"https://railsadventures.files.wordpress.com/2015/11/infra-before-docker.png?w=620\" alt=\"Website Architecture\" /></a><p class=\"wp-caption-text\">Diagram I – Classic Website Architecture</p></div>\n<p>What we see here is a frontend load balancer with 3 web servers behind it. The servers communicate with a persistent DB (mySQL, Postgres etc…) and a KV storage. Each of the machines here is responsible for a single, well defined function. Each of them has an IP address and a port which allow us to communicate with the service running on them. Another important thing to notice is the size of each machine: A KV DB might need a lot of memory and small amount of CPU, while our web server might be more CPU intensive. We set the resources on each machine to allow it to serve its function in a fast and consistent manner.<br />The same website in the Docker era might look like this:</p>\n<div class=\"wp-caption aligncenter\"><a href=\"https://railsadventures.files.wordpress.com/2015/11/infra-after-docker.png\"><img class=\"size-full wp-image-726\" src=\"https://railsadventures.files.wordpress.com/2015/11/infra-after-docker.png?w=620\" alt=\"Docker website infrastructure\" /></a><p class=\"wp-caption-text\">Diagram II – Docker Website Architecture</p></div>\n<p>We still have the same components but now they are arranged differently. Two or even more, totally different containers, may live together on the same machine. A container might live in Machine1 and be moved to Machine2 later on.  The concept of a machine or a host does not exist anymore. We don’t have a machine for a Database and a machine for a Load Balancer. We have a pool of resources (memory/cpu/network) which is the sum of all the resources of the machines on our cluster. This introduces a few interesting changes to the way we manage our infrastructure:</p>\n<ol><li>\n<p><strong>Service Discovery</strong>: If we don’t have machines anymore, how can we identify services? How can we tell our Web container to connect to the DB container which may live on the same machine, on another machine and move between machines all the time? How can we point our DNS record of <a href=\"http://www.nanit.com\">www.nanit.com</a> to the Load Balancer if we don’t know on which machine it currently lives in?</p>\n</li>\n<li>\n<p><strong>High Availability</strong>: How can we make sure our services are always up and retain a certain capacity, for example: we want at least 3 web servers running within our cluster.</p>\n</li>\n<li>\n<p><strong>Resources Management</strong>: How can we make sure our cluster’s pool of resources is being used in an optimized manner? How can we make sure that the machine a container is going to be spawned in, has enough resources to run the service effectively? We have to make sure we don’t over-load a single machine and that we don’t neglect another machine.</p>\n</li>\n<li>\n<p><strong>Ports Management</strong>: What happens if two containers require the same port to be opened on the host? For example: The Web Server and the Load Balancer both need port 80. We need to make sure we don’t run them both on the same machine. Or, maybe, we can find another solution, that will allow them to co-exist on the same machine, even though they need the same port?</p>\n</li>\n</ol><p>I want to briefly go over each of these topics and figure out what are the Docker influences and available solutions.</p>\n<h3>Service Discovery</h3>\n<p>Service discovery is a problem which had solutions long before Docker. It was mainly based around the machine/host paradigm. If we wanted a service (Redis for example) to have a constant endpoint we could:</p>\n<ol><li>\n<p>Set a constant IP address to that instance. If that instance fails we just launch another instance with the same IP address. Almost all cloud providers have such solutions today (Elastic IPs on AWS for example). This solution is not relevant in Docker days since a single IP or machine can serve a lot of different components.</p>\n</li>\n<li>\n<p>Use en external Service Discovery solution like <a href=\"https://www.consul.io/\">Consul</a>. Each machine runs an agent and there’s a Consul server which holds the state of each service and its endpoints. Service discovery is done via DNS resolve for each service. There are adaptations of this method to work with Docker but it requires a significant amount of setup to work flawlessly.</p>\n</li>\n<li>\n<p>Use a Load Balancer with a constant hostname or IP for each service and put all relevant machines which run the service behind it. Each machine which is started registers itself to the appropriate Load Balancer. An example for this is AWS’s Auto Scaling Groups which work exactly this way.</p>\n</li>\n</ol><p>As we see the old problem of Service Discovery already has some well known solution but none of them work out of the box with Docker. AWS Auto Scaling Groups deals with VMs and not Docker containers while Consul can work with Docker but it really feels like it was not designed this way in the first place.</p>\n<p>Today’s Docker orchestration tools are usually bundled with some abilities of Service Discovery.</p>\n<h3>High Availability</h3>\n<p>HA and redundancy, like Service Discovery, is also a problem which existed before the Docker era. For example, AWS Auto Scaling Groups make sure you have at least X machines up and running with a certain service. It can even adjust the number of running machines dynamically via API or pre-defined rules.</p>\n<p>While this problem was solved for the machine-based paradigm, Docker make keeping HA and redundancy a little bit more interesting: We scale by running more Docker containers, not by starting more machines. We can scale a certain service up using the same pool of resources we already have.  It means that our service scaling is detached from our cluster resources scaling and scaling up or down does not necessarily imply adjusting the amount of resources we require. We have to scale services and resources separately.</p>\n<p>Some of today’s Docker orchestration tools have some basic features of container horizontal scaling. Scaling the cluster – adjusting the amount of resources available to the orchestrator – is done separate of container management.</p>\n<h3>Resource Management</h3>\n<p>In the days before Docker we were launching new service instances by launching new machines. We had some kind of mapping from each service to its CPU/memory requirements so we knew exactly what type of machine we need to launch.</p>\n<p>With Docker this is not the case: We have to schedule our containers into an existing set of machines. Our resource pool is more or less static and the orchestration tool needs to fit the set of containers into the set of machines in an optmizied manner. It sounds like a simple optimization problem but it really isn’t because the set of containers changes dynamically at any given time. We need to balance between spreading our containers equally and leaving enough resources in case we want to start a container which requires a large mount of resources.</p>\n<p>Let’s take the infra from Diagram II as an example. Assuming this is the table of resources required by each service:<br />Web – 3<br />Load Balancer – 1<br />Persistent DB – 2<br />KV DB – 1</p>\n<p>Each of the 3 machines has exactly the same resource capacity of 6. We have at least two obvious ways to layout these containers:</p>\n<ul><li>\n<p>Sparse Layout – This is the exact same layout as Diagram II shows:</p>\n<div class=\"wp-caption aligncenter\"><a href=\"https://railsadventures.files.wordpress.com/2015/11/sparse-docker-layout2.png\"><img class=\"size-full wp-image-735\" src=\"https://railsadventures.files.wordpress.com/2015/11/sparse-docker-layout2.png?w=620\" alt=\"Sparse Layout\" /></a><p class=\"wp-caption-text\">Diagram III  – Sparse Layout</p></div>\n<p><a href=\"https://railsadventures.files.wordpress.com/2015/11/sparse-docker-layout-1.png\"></a>In parenthesis we see each machine resources usage.<br />This layout looks pretty good – all of the containers are spread between our instances and we do not “choke” a single instance – each of them has spare resources. But this setup also bears a problem with it: what if we want to scale our web service up to 4 instances? We don’t have a single instance with at least 3 resources free. So maybe this isn’t the best layout for our containers?</p>\n</li>\n<li>\n<p>This would be another way to arrange our containers:</p>\n<div class=\"wp-caption aligncenter\"><a href=\"https://railsadventures.files.wordpress.com/2015/11/dense-docker-layout.png\"><img class=\"size-full wp-image-736\" src=\"https://railsadventures.files.wordpress.com/2015/11/dense-docker-layout.png?w=620\" alt=\"Dense Layout\" /></a><p class=\"wp-caption-text\">Diagram IV – Dense Layout</p></div>\n<p>Now machine 1 and 2 are full – they have no spare resources at all. That leaves machine 3 pretty free to run each of our services when needed. But is it even possible to layout our containers this way? Can you spot the problem here?<br />Ports of course. On machine 2 we have two web instances which require the same port. Does that mean we can’t schedule two web containers into the same machine? This problem takes us directly to our next section, port management.</p>\n</li>\n</ul><h3>Ports Management</h3>\n<p>No matter how you twist it, the same port cannot be occupied by two different processes on a given machine. When you know which services are going to run on a machine before-hand, you just have to make sure not to create port collisions. With Docker infrastructure you don’t have this luxury of course – services replace machines and get re-scheduled all the time.</p>\n<p>Docker orchestration frameworks usually take one of the two standpoints: The first one is to avoid cases in which containers that require the same port on the host machine will be scheduled to the same machine. This is an easy solution to the problem but as we saw it may imply really tight constraints on the way we can layout our containers. It can get to a really nasty situation in which the orchestrator cannot schedule a container only because ports constraints.<br />The other way orchestration frameworks deal with port collisions is by assigning a designated random port for each of the containers in a machine and route traffic inside by themselves. If we take machine 2 in Diagram IV as an example, it means that each of the web services has a port opened on the machine itself which routes directly to the web service instance. Port 3000 on the host machine will lead to the first web service and port 3001 will lead to the second.</p>\n<h3>Summary</h3>\n<p>As we saw, we already did orchestration before Docker, but instead of orchestrating containers we were orchestrating virtual machines. Some of the problems in the orchestration world, live Service Discovery and High Availability, already had solutions which were just needed to be adjusted to work with containers. Some of the problems, like Resource Management and Port Management, were completely new when Docker arrived and required some creative solutions.</p>\n<p>So what does an orchestrator do? It schedules our containers into a cluster of machines in an optimized manner while keeping high availability and has a basic support for service discovery. The orchestration framework we choose will set the way we manage our cluster and the way we do operations. Is is essentially the core operations tool we build everything around.</p>\n<p>There are various orchestration frameworks around: AWS ECS, Kubernetes, some native Docker solutions and more.</p>\n<p>In the next post we’re going to have a deeper look at ECS and Kubernetes and try to understand why we at <a href=\"http://nanit.com\">nanit.com</a> went with the latter.</p>\n		<div class=\"sharedaddy sd-like-enabled sd-sharing-enabled\"><div class=\"sharedaddy sd-sharing-enabled\"><div class=\"robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing\"><h3 class=\"sd-title\">Share this:</h3></div></div><div class=\"sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded\"><h3 class=\"sd-title\">Like this:</h3><p><span class=\"button\"><span>Like</span></span> <span class=\"loading\">Loading...</span></p><span class=\"sd-text-color\"></span><a class=\"sd-link-color\"></a></div>\n<p>\n	</p><h3 class=\"jp-relatedposts-headline\"><em>Related</em></h3>\n</div>				</div><p>\n\n					<small>\n					This entry was posted on November 15, 2015, 10:13 am and is filed under <a href=\"https://railsadventures.wordpress.com/category/devops/\">DevOps</a>, <a href=\"https://railsadventures.wordpress.com/category/docker/\">Docker</a>. You can follow any responses to this entry through <a href=\"https://railsadventures.wordpress.com/2015/11/15/docker-orchestration-the-full-story/feed/\" title=\"RSS 2.0\">RSS 2.0</a>.\n					\n					You can <a href=\"https://railsadventures.wordpress.com/2015/11/15/docker-orchestration-the-full-story/#respond\">leave a response</a>, or <a href=\"https://railsadventures.wordpress.com/2015/11/15/docker-orchestration-the-full-story/trackback/\">trackback</a> from your own site.\n					\n										</small>\n\n				</p>',1),(245,'What is a \'unikernel\'?','https://ma.ttias.be/what-is-a-unikernel/',0,0,'\n															\n									<p>If you\'ve been following the <a href=\"http://www.devopsweekly.com/\">Devops Weekly</a> newsletter, DevOps-like conferences or if you\'re just really interested in technology, you\'ve probably heard of <em>unikernels</em> being mentioned a few times. In the last few months, its popularity has greatly increased.<span></span></p>\n<p>But, <strong>what are these \'unikernels\' really? And, is it something for me?</strong></p>\n<p>I struggled with that question. Both defining a unikernel and answering the question \'who are they for\'?</p>\n<h2>What are unikernels</h2>\n<p>The single source of truth is <a href=\"https://en.wikipedia.org/wiki/Unikernel\">Wikipedia</a> with a cryptic explanation, but let\'s start there.</p>\n<blockquote><p>Unikernels are specialised, single address space machine images constructed by using library operating systems. A developer selects, from a modular stack, the minimal set of libraries which correspond to the OS constructs required for their application to run.</p>\n<p>These libraries are then compiled with the application and configuration code to build sealed, fixed-purpose images (unikernels) which run directly on a hypervisor or hardware without an intervening OS such as Linux or Windows.</p>\n<p><cite><a href=\"https://en.wikipedia.org/wiki/Unikernel\">Wikipedia: Unikernel</a></cite>\n</p></blockquote>\n<p>All clear, right?</p>\n<p>Well, if you\'re like me, that may not tell you much. So here\'s my explanation of <strong>unikernels</strong>.</p>\n<p>Let\'s step back a little first and follow this example. Let\'s say you\'re a developer writing a PHP application. When you run your PHP (or Ruby, or Node, or Perl, or ...) application, you\'re essentially running:</p>\n<ul><li>Your language interpreter: PHP, Perl, Ruby, ...</li>\n<li>Which calls system level APIs of your operating system</li>\n<li>Some of these API calls require other level privileges, forcing context switches for your application ... (user space vs. kernel space)</li>\n<li>Which is all running on an operating system like CentOS, Debian, Ubuntu, ...</li>\n<li>Which is probably a Virtual Machine on VMware, Xen, KVM, ...</li>\n<li>Which is run by its own virtualisation operating system (ESXi, Xen Hypervisor) ...</li>\n<li>Which in turn is running on hardware</li>\n<li>Which is bootstrapped by a BIOS or UEFI</li>\n</ul><p>Honestly, if you\'re thinking about all the levels an application is built upon, it\'s a miracle things even work.</p>\n<p>But they do. And they work pretty well and with reasonable performance. But you have to admit, there are a lot of layers between the hardware that\'s supposed to be powering your application and the application itself. </p>\n<p><strong>That\'s what unikernels as a concept try to solve: remove the bloat that separates hardware from application. Have \"just enough\" of the Operating System to run your code, nothing more.</strong></p>\n<p>There\'s a <a href=\"http://www.fixup.fi/misc/usenix-login-2015/login_oct15_02_kantee.pdf\">great paper</a> that sums it up nicely:</p>\n<blockquote><p>The idea [of a unikernel] is that you look at cloud guests just like you would look at single-application hardware.<br /><cite><a href=\"http://www.fixup.fi/misc/usenix-login-2015/login_oct15_02_kantee.pdf\">The Rise and Fall of the Operating System</a></cite>\n</p></blockquote>\n<p>A unikernel tries to remove some of complexities that modern operating systems bring. Because they are \"general purpose\" operating systems (like just about any Linux or Windows distribution), they also come with drivers, packages, services, ... that may not apply to your application, but are <em>generally considered</em> OK to have on every OS install.</p>\n<p>Even core modules in the Linux kernel don\'t apply to every installation. Things like USB drivers are useless in a virtualised \"cloud\" environment, but are still included in the kernel.</p>\n<p>Compared to containers and virtualisation, the excellent <a href=\"http://roadtounikernels.myriabit.com/\">road to unikernels presentation</a> pictures it like this:</p>\n<p><img src=\"https://ma.ttias.be/wp-content/uploads/2015/11/road_to_unikernels.png\" alt=\"road_to_unikernels\" width=\"800\" height=\"450\" class=\"alignnone size-full wp-image-7209\" /></p>\n<p><em>(Source: <a href=\"http://roadtounikernels.myriabit.com/\">road to unikernels</a>)</em></p>\n<p>Unikernels have a couple of advantages over general purpose operating systems like Linux;</p>\n<ul><li>Improved security: only the core of the OS is implemented, no video or USB drivers that aren\'t needed and could be a source of intrusion.</li>\n<li>Very small footprint: imagine being able to remove 95% of the kernel size, simply because your application doesn\'t need it.</li>\n<li>Specialised implementations: you know your application and you can tweak and run your kernel exactly the way you want it.</li>\n<li>Quick enough to be \"<a href=\"http://www.skjegstad.com/blog/2015/08/17/jitsu-v02/\">Just in time</a>\" to summon a unikernel live (similar to live spawning Docker instances), with boot times less than 1 second.</li>\n</ul><p>This very nature makes unikernels an excellent candidate for microservices.</p>\n<h2>Removing layers of complexity with unikernels</h2>\n<p>If what you\'re after is an application that runs with as little overhead as possible, you may want to consider writing it as a unikernel.</p>\n<p>To do so, you use a <strong>library operating system</strong>. A library OS gives you the tools to create your own unikernel. The most noticeable ones are <a href=\"https://mirage.io/\">MirageOS</a> (<em>which actually coined the term \"unikernel\"</em>) and <a href=\"http://rumpkernel.org/\">Rump Kernels</a>. They are both essentially a set of standardised drivers and libraries so you don\'t have to reinvent things like a TCP stack, a persistent storage layer, ...</p>\n<blockquote><p>Unikernels are specialized OS kernels that are written in a high-level language and act as individual software components. A full application (or appliance) consists of a set of running unikernels working together as a distributed system.</p>\n<p>MirageOS is based on the <a href=\"http://ocaml.org\">OCaml</a> language and emits unikernels that run on the Xen hypervisor.</p>\n<p><cite>queue.acm.org: <a href=\"http://queue.acm.org/detail.cfm?id=2566628\">Unikernels: Rise of the Virtual Library Operating System</a></cite>\n</p></blockquote>\n<p>The most popular languages nowadays to write a unikernel seem to be:</p>\n<p>These aren\'t new programming languages. With the exception of Go and Rust, they\'ve been around for more than 15 years.</p>\n<p>In order to make the OS and the application run as smoothly as possible, these unikernel libraries need a kernel footprint that is as small as possible.</p>\n<p>Today, that\'s possible <em>because of</em> virtualisation. Because an Operating System like Xen or VMware can do the work of translating the different hardware models into a defined set of <em>virtualised hardware</em>, a unikernel can be optimised for <em>just that specific set of virtual hardware</em>.</p>\n<p><strong>Unikernels leverage the advantages of virtualisation to create an operating system that\'s as specialised and optimised as possible.</strong></p>\n<p>The result of an application written in OCaml with the MirageOS set of libraries to form a \"unikernel\" can be summarised like this:</p>\n<blockquote><p>The compiler can then output a full stand-alone kernel instead of just a Unix executable. These unikernels are single-purpose libOS VMs that perform only the task defined in their application source and configuration files, and they depend on the hypervisor to provide resource multiplexing and isolation.<br /><cite>queue.acm.org: <a href=\"http://queue.acm.org/detail.cfm?id=2566628\">Unikernels: Rise of the Virtual Library Operating System</a></cite>\n</p></blockquote>\n<p>The result is that you run a unikernel, a small but dedicated operating system, to run (parts of) your application. If an update to your application or configuration is needed, you compile a new version of your source code to a new unikernel and you deploy that new version. A new security release? Re-compile and deploy. </p>\n<p>This makes coordination and orchestration of deploys harder at the benefit of running a more efficient application.</p>\n<p>This essential creates the concept of <strong>immutable servers</strong>: an application server no longer stores state and can be thrown away and rebuilt at your convenience.</p>\n<p>One approach may be to start running <a href=\"http://unikernel.org/blog/2015/unikernels-meet-docker/\">unikernels in docker containers</a>, but aren\'t we adding another layer of complexity that we should try to avoid? On the other hand, Docker adds ease of use and deployments to the mix that may make the trade-off worthwhile.</p>\n<h2>Who should run unikernels?</h2>\n<p>To be perfectly honest, the answer to me isn\'t exactly clear yet. I think it\'s fair to say that if you\'re currently deploying web applications built on WordPress, unikernels may be a bridge too far.</p>\n<p>On the other hand, the benefits of unikernels are evident but require a completely different mindset to managing your infrastructure, a different skillset in creating these kind of applications and kernels and require a very deep understanding of concepts that are mostly foreign to us now: immutable infrastructure.</p>\n<p>Maybe in 2, 5 or 10 years we\'ll deploy unikernels like they\'re the new normal. Right now, I think it\'s for a very select niche set of users that are looking for highly specialised and secure applications. For the most common use cases, either a Virtual Machine (or, if you\'re already on the bandwagon: docker containers) are probably what you\'ll be focussing on.</p>\n<h2>More reading material on Unikernels</h2>\n<p>If you\'re interested in the subject, here are some other links I can recommend you spend your time on:</p>\n<div class=\"mashsb_above_buttons\"><hr /><p>If you like this content, you can help me spread awareness by sharing it on your social network of choice. Thanks!</p></div>\n                    ',1),(246,'Build, run, and manage applications at any scale','https://convox.com/',0,0,'\n    <div class=\"cli-example col--8\">\n      <pre class=\"stdin\">$ convox start</pre>\n      <pre class=\"stdout\">\nRUNNING: docker build -t zfrsyhlvdi ~/src/myapp\nSending build context to Docker daemon 2.29 MB\nStep 0 : FROM rails:latest\n ---&gt; 5063434fffa1\nStep 1 : COPY Gemfile /app/Gemfile\n ---&gt; Using cache\n ---&gt; 54933d99be26\nStep 2 : COPY Gemfile.lock /app/Gemfile.lock\n ---&gt; Using cache\n ---&gt; 3969abcce8da\nStep 3 : RUN bundle install</pre>\n    </div>\n\n    <dl class=\"col--4\"><dt>Works out of the box</dt>\n      <dd>\n        Convox will introspect your application to automatically create an\n        appropriate runtime environment.\n      </dd>\n\n      <dt>Identical to production</dt>\n      <dd>\n        Runs exactly as it will in production so you can be certain\n        your changes work as expected.\n      </dd>\n\n      <dt>Built on Docker</dt>\n      <dd>\n        Start with a huge library of pre-built images and customize\n        to your individual needs.\n      </dd>\n    </dl><div class=\"content\">\n    <dl class=\"col--4\"><dt>Runs in your own AWS account</dt>\n        <dd>\n          Use industry best practices without the work. Easily scale up\n          without breaking the bank.\n        </dd>\n\n        <dt>Instant deploys</dt>\n        <dd>\n          Confidently deploy new code in seconds.\n        </dd>\n\n        <dt>Graceful rollouts</dt>\n        <dd>\n          Easily deploy changes without dropping a single request.\n        </dd>\n\n        <dt>Flexible runtime</dt>\n        <dd>\n          Run any language or framework. Open TCP listeners on arbitrary ports.\n        </dd>\n\n        <dt>Powerful introspection</dt>\n        <dd>\n          Centralized access to your metrics and logs.\n        </dd>\n\n        <dt>Secure by default</dt>\n        <dd>\n          Run applications in a private network with secrets encrypted at rest.\n        </dd>\n      </dl><div class=\"cli-example col--8\">\n        <pre class=\"stdin\">$ convox apps</pre>\n        <pre class=\"stdout\">\nAPP    STATUS\nmyapp  running</pre>\n        <pre class=\"stdin\">$ convox apps info</pre>\n        <pre class=\"stdout\">\nName       myapp\nStatus     running\nRelease    REXIQURVKXE\nProcesses  admin web\nHostname   myapp-1749418666.us-east-1.elb.amazonaws.com\nPorts      web:80 web:443 admin:9322</pre>\n        <pre class=\"stdin\">$ convox ps</pre>\n        <pre class=\"stdout\">\nID           NAME   RELEASE      CPU    MEM     STARTED       COMMAND\n13254981d20  admin  REXIQURVKXE  0.47%  2.21%   17 hours ago  bin/admin\n92d4a822c13  web    REXIQURVKXE  3.29%  20.68%  17 hours ago  bin/web</pre>\n        <pre class=\"stdin\">$ convox env</pre>\n        <pre class=\"stdout\">PASSWORD=xyzzy</pre>\n        <pre class=\"stdin\">$ convox logs</pre>\n        <pre class=\"stdout\">\nweb: [01/Jan/2015:00:00:00] \"GET / HTTP/1.1\" 200 554 0.0027\nweb: [01/Jan/2015:00:00:00] \"POST /users HTTP/1.1\" 303 - 0.0049</pre>\n      </div>\n    </div>\n<div class=\"content\">\n    <div class=\"col--8\">\n        <img src=\"https://convox.com/assets/images/static/slack.png\" class=\"screenshot\" alt=\"slack.png\" /></div>\n      <dl class=\"col--4\"><dt>Continuous delivery</dt>\n        <dd>Trigger automated builds and deployments when you push your code.\n        </dd><dt>Real-time notifications</dt>\n        <dd>Get notified of system and app events in your team\'s chat room.\n      </dd></dl></div>\n<div>\n    <div class=\"cli-example col--6\">\n        <pre class=\"stdin\">$ convox api get /apps</pre>\n        <pre class=\"stdout\">\n[\n  {\n    \"balancer\": \"myapp-1749418666.us-east-1.elb.amazonaws.com\",\n    \"name\": \"myapp\",\n    \"release\": \"REXIQURVKXE\",\n    \"status\": \"running\"\n  },\n  {\n    \"balancer\": \"myapp2-689551992.us-east-1.elb.amazonaws.com\",\n    \"name\": \"myapp2\",\n    \"release\": \"RNEFHNIUSKF\",\n    \"status\": \"running\"\n  },\n  {\n    \"balancer\": \"myapp3-435098803.us-east-1.elb.amazonaws.com\",\n    \"name\": \"myapp3\",\n    \"release\": \"RORJKBNVKDD\",\n    \"status\": \"running\"\n  }\n]</pre>\n      </div>\n\n      <div class=\"cli-example col--6\">\n        <pre class=\"stdin\">$ convox api get /apps/myapp/processes</pre>\n        <pre class=\"stdout\">\n[\n  {\n    \"app\": \"myapp\",\n    \"command\": \"bin/web\",\n    \"cpu\": 0.0329,\n    \"host\": \"10.0.3.135\",\n    \"id\": \"13254981d20\",\n    \"image\": \"registry.internal:5000/myapp-web:BHLRYHSMXNM\",\n    \"memory\": 0.2068,\n    \"name\": \"web\",\n    \"ports\": [\n      \"80:3000\",\n      \"443:3001\"\n    ],\n    \"release\": \"REXIQURVKXE\",\n    \"started\": \"2015-01-01T00:00:00Z\"\n  }\n]</pre>\n      </div>\n    </div>\n',1),(247,'iondbproject/iondb','https://github.com/iondbproject/iondb',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <h2><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#what-is-this\"><span class=\"octicon octicon-link\"></span></a>\"What is this?\"</h2>\n\n<p>Currently in the Arduino world, there doesn\'t exist an associative array or map implementation that is both easy to use <em>and</em> performance competitive. There also is little support for disk based storage options that don\'t involve writing it yourself. IonDB is fast, functional, and offers disk based storage out of the box.</p>\n\n<p>In general, IonDB supports:</p>\n\n<ul><li>Storing arbitrary values associated to a key</li>\n<li>Duplicate key support</li>\n<li>Range and Equality queries</li>\n<li>Disk based persistent data storage</li>\n</ul><p>IonDB has a paper that was published at IEEE (CCECE) 2015, which can be found <a href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?reload=true&amp;tp=&amp;arnumber=7129178\">here.</a></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#preamble\"><span class=\"octicon octicon-link\"></span></a>Preamble</h2>\n\n<p>These inclusions are necessary for any IonDB usage:</p>\n\n<div class=\"highlight highlight-source-c\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>SD.h<span class=\"pl-pds\">&gt;</span></span> <span class=\"pl-c\">//If using file based implementations</span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dictionary.h<span class=\"pl-pds\">\"</span></span></pre></div>\n\n<p>Then include some (or all) necessary implementation handlers:</p>\n\n<div class=\"highlight highlight-source-c\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>slhandler.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>oadictionaryhandler.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>oafdictionaryhandler.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ffdictionaryhandler.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bpptreehandler.h<span class=\"pl-pds\">\"</span></span></pre></div>\n\n<p>In the setup() function, initialize a dictionary (Shown here, a skiplist):</p>\n\n<div class=\"highlight highlight-source-c\"><pre><span class=\"pl-k\">void</span> <span class=\"pl-en\">setup</span>() {\n    <span class=\"pl-c\">//Declare the dictionary and handler structs</span>\n    <span class=\"pl-c1\">dictionary_handler_t</span>    handler;\n    <span class=\"pl-c1\">dictionary_t</span>            dictionary;\n\n    <span class=\"pl-c\">//Initialize handler</span>\n    <span class=\"pl-c1\">sldict_init</span>(&amp;handler);\n\n    <span class=\"pl-c\">//Create dictionary: Given handler, dictionary, key type, key size, value size, dict size</span>\n    <span class=\"pl-c1\">dictionary_create</span>(&amp;handler, &amp;dictionary, key_type_numeric_signed, <span class=\"pl-k\">sizeof</span>(<span class=\"pl-k\">int</span>), <span class=\"pl-c1\">60</span>, <span class=\"pl-c1\">10</span>);\n}</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#implementation-handler-methods\"><span class=\"octicon octicon-link\"></span></a>Implementation handler methods:</h4>\n\n<table><thead><tr><th>Implementation</th>\n<th>Handler Method</th>\n</tr></thead><tbody><tr><td>Skiplist</td>\n<td>sldict_init</td>\n</tr><tr><td>Open Address Hash</td>\n<td>oadict_init</td>\n</tr><tr><td>Open Address File Hash</td>\n<td>oafdict_init</td>\n</tr><tr><td>Flat File</td>\n<td>ffdict_init</td>\n</tr><tr><td>B+ Tree</td>\n<td>bpptree_init</td>\n</tr></tbody></table><h4><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#dictionary-size-meanings\"><span class=\"octicon octicon-link\"></span></a>Dictionary size meanings:</h4>\n\n<table><thead><tr><th>Implementation</th>\n<th>Dictionary Size</th>\n</tr></thead><tbody><tr><td>Skiplist</td>\n<td>Skiplist maximum height</td>\n</tr><tr><td>Open Address Hash</td>\n<td>Number of records</td>\n</tr><tr><td>Open Address File Hash</td>\n<td>Number of records</td>\n</tr><tr><td>Flat File</td>\n<td>Not used</td>\n</tr><tr><td>B+ Tree</td>\n<td>Not used</td>\n</tr></tbody></table><h3><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#keys-and-values\"><span class=\"octicon octicon-link\"></span></a>Keys and values</h3>\n\n<p>Keys and values are <strong>specific type agnostic</strong>, there are only three categories of keys. Two macros are provided to bridge the gap between IonDB keys and concrete keys.</p>\n\n<div class=\"highlight highlight-source-c\"><pre><span class=\"pl-c\">/* Key creation */</span>\n\n<span class=\"pl-c\">//Suppose the key is an int</span>\n<span class=\"pl-k\">int</span> my_key = <span class=\"pl-c1\">64</span>;\n<span class=\"pl-c1\">ion_key_t</span> key = IONIZE(my_key); <span class=\"pl-c\">//A prepared key</span>\n\n<span class=\"pl-c\">//Inline is fine too:</span>\n<span class=\"pl-c1\">ion_key_t</span> key = IONIZE(<span class=\"pl-c1\">64</span>);\n\n<span class=\"pl-c\">//Any type is supported</span>\n<span class=\"pl-k\">unsigned</span> <span class=\"pl-k\">long</span> <span class=\"pl-k\">long</span> my_key = <span class=\"pl-c1\">2147483648ull</span>;\n<span class=\"pl-c1\">ion_key_t</span> key = IONIZE(my_key);\n\n<span class=\"pl-c\">/* Key retrieval */</span>\n\n<span class=\"pl-c\">//Retrieve an int from a key</span>\n<span class=\"pl-k\">int</span> my_key = NEUTRALIZE(<span class=\"pl-k\">int</span>, key);\n\n<span class=\"pl-c\">//Retrieve unsigned long long from a key</span>\n<span class=\"pl-k\">unsigned</span> <span class=\"pl-k\">long</span> <span class=\"pl-k\">long</span> my_key = NEUTRALIZE(<span class=\"pl-k\">unsigned</span> <span class=\"pl-k\">long</span> <span class=\"pl-k\">long</span>, key);</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#ionization-functions\"><span class=\"octicon octicon-link\"></span></a>Ionization functions</h4>\n\n<table><thead><tr><th>Function</th>\n<th>Type</th>\n</tr></thead><tbody><tr><td>IONIZE(any)</td>\n<td>IONIZE :: any -&gt; ion_key_t</td>\n</tr><tr><td>NEUTRALIZE(atype, key)</td>\n<td>NEUTRALIZE :: ion_key_t -&gt; atype</td>\n</tr></tbody></table><h4><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#key-categories\"><span class=\"octicon octicon-link\"></span></a>Key categories:</h4>\n\n<ul><li>key_type_numeric_signed</li>\n<li>key_type_numeric_unsigned</li>\n<li>key_type_char_array (String)</li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#file-based-implementations\"><span class=\"octicon octicon-link\"></span></a>File based implementations</h2>\n\n<p>An SD shield, and a FAT formatted SD card is required to work with IonDB. The Arduino ethernet shield is recommended. The following initialization is required when working with file bsaed implementations:</p>\n\n<div class=\"highlight highlight-source-c\"><pre><span class=\"pl-c\">//Use pin 10 if using an Uno, pin 53 if Mega</span>\n<span class=\"pl-en\">pinMode</span>(<span class=\"pl-c1\">10</span>, OUTPUT);\n<span class=\"pl-c\">//Change depending on what SD shield is used</span>\nSD.begin(<span class=\"pl-c1\">4</span>);</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<h3><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#insert\"><span class=\"octicon octicon-link\"></span></a>Insert</h3>\n\n<div class=\"highlight highlight-source-c\"><pre><span class=\"pl-c1\">ion_key_t</span> key = IONIZE(some_key);\n<span class=\"pl-c1\">ion_value_t</span> value = some_value;\n<span class=\"pl-en\">dictionary_insert</span>(&amp;dictionary, key, value);</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#delete\"><span class=\"octicon octicon-link\"></span></a>Delete</h3>\n\n<div class=\"highlight highlight-source-c\"><pre><span class=\"pl-c1\">ion_key_t</span> key = IONIZE(some_key);\n<span class=\"pl-en\">dictionary_delete</span>(&amp;dictionary, key);</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#query\"><span class=\"octicon octicon-link\"></span></a>Query</h3>\n\n<div class=\"highlight highlight-source-c\"><pre><span class=\"pl-c1\">ion_key_t</span> key = IONIZE(some_key);\n<span class=\"pl-c1\">ion_value_t</span> my_value = malloc(value_size); <span class=\"pl-c\">// Create buffer to hold returned value</span>\n<span class=\"pl-en\">dictionary_get</span>(&amp;dictionary, key, my_value);\n<span class=\"pl-c\">// Process data</span>\n<span class=\"pl-c\">//...</span>\n<span class=\"pl-en\">free</span>(my_value);</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#cursors\"><span class=\"octicon octicon-link\"></span></a>Cursors</h3>\n\n<p>A functional implementation exists for equality cursors (Multiple value query on same key) and range cursors (Query key-value pairs across a bound of keys), however a dictionary level interface for cursor access has yet to be finalized. Implementation level access is demonstrated in the Benchmark source.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/iondbproject/iondb#full-example\"><span class=\"octicon octicon-link\"></span></a>Full Example</h2>\n\n<p>Written in Arduino compliant wiring.</p>\n\n<div class=\"highlight highlight-source-c\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>SD.h<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dictionary.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>slhandler.h<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">void</span> <span class=\"pl-en\">setup</span>() {\n    <span class=\"pl-c\">//Declare the dictionary and handler structs</span>\n    <span class=\"pl-c1\">dictionary_handler_t</span>    handler;\n    <span class=\"pl-c1\">dictionary_t</span>            dictionary;\n\n    <span class=\"pl-c\">//Initialize handler</span>\n    <span class=\"pl-c1\">sldict_init</span>(&amp;handler);\n\n    <span class=\"pl-c\">//Create dictionary: Given handler, dictionary, key type, key size, value size, dict size</span>\n    <span class=\"pl-c1\">dictionary_create</span>(&amp;handler, &amp;dictionary, key_type_numeric_signed, <span class=\"pl-k\">sizeof</span>(<span class=\"pl-k\">int</span>), <span class=\"pl-c1\">60</span>, <span class=\"pl-c1\">10</span>);\n\n    <span class=\"pl-c1\">ion_key_t</span>   key = <span class=\"pl-c1\">IONIZE</span>(<span class=\"pl-c1\">42</span>);\n    <span class=\"pl-c1\">ion_value_t</span> value = (<span class=\"pl-c1\">ion_value_t</span>) <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello IonDB<span class=\"pl-pds\">\"</span></span>;\n\n    <span class=\"pl-c1\">dictionary_insert</span>(&amp;dictionary, key, value);\n\n    <span class=\"pl-c1\">ion_value_t</span> returned_value = (<span class=\"pl-c1\">ion_value_t</span>) <span class=\"pl-c1\">malloc</span>(<span class=\"pl-c1\">60</span>); <span class=\"pl-c\">//from value_size</span>\n    <span class=\"pl-c1\">dictionary_get</span>(&amp;dictionary, key, returned_value);\n    <span class=\"pl-c1\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Returned <span class=\"pl-c1\">%s</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, returned_value);\n    <span class=\"pl-c1\">free</span>(returned_value);\n}\n\n<span class=\"pl-k\">void</span> <span class=\"pl-en\">loop</span>() {}</pre></div>\n',1),(248,'Managing massive amounts of tick data with Python, simply and efficiently','http://gregharris.info/managing-massive-amounts-of-tick-data-with-python-simply-and-efficiently/',0,0,'\n			<p>Tick data is hard to come by and hard to manage. This is my experience with it over the last month. I’m interested in how stocks react to certain events, and tick data will let me study the intra-day reaction.</p>\n<h2>Getting Tick Data</h2>\n<ul><li>The <a href=\"http://www.nyxdata.com/Data-Products/Daily-TAQ\">NYSE Trade and Quote (TAQ)</a> product seems to be the source of data for many tick data providers. Unfortunately, it is very expensive.</li>\n<li><a href=\"https://www.tickdata.com/historical-market-data-products/historical-equities-data/\">TickData.com</a> is a source I’ve used before for futures data.  The pricing for the full history for all stocks is no longer listed on the website, but it also used to be very high.</li>\n<li><a href=\"https://quantquote.com/products_tick-data.php\">QuantQuote.com</a> seems to be favored by the <a href=\"http://quant.caltech.edu/historical-stock-data.html\">Quantitative Finance Group at Caltech</a>. Their historical tick data costs $20,000.</li>\n<li><a href=\"https://quantgo.com/data_services/us/\">QuantGo.com</a> appears to rent the data for $275/month, as long as you use it in their cloud.</li>\n<li><a href=\"https://wrds-web.wharton.upenn.edu/wrds/\">Wharton Research Data Services (WRDS)</a> is available for academic researchers at many institutions. I discovered my school (USC) has purchased access, and I was able to create an account. WRDS has TAQ data in addition to CRSP, Computstat, and many other great datasets. At first, I thought I could only get small, specific queries executed through their web interface. Later, I found the bulk data stored as SAS files on their secure FTP server. Unfortunately, the SAS files are not compressed, so it took me several weeks to download all trades since 1998 (about 3TB). The data is arranged in daily files, with the records sorted first by ticker, then by timestamp (truncated to the second). I have no hope of downloading the quote files, because they are about 40x as large. I did get the master files describing each ticker, as well as the files with dividends and splits going back to 1993. The WRDS dataset is updated annually.</li>\n</ul><h2>Timeseries Databases</h2>\n<p>Several commercial databases exist for storing tick data. The most notable is <a href=\"http://kx.com/\">Kdb+</a>. I couldn’t find any benchmarks, but people seem to rave about it. <a href=\"http://quant.stackexchange.com/questions/3156/is-there-any-thing-out-there-as-a-substitute-for-kdb\">Stack Exchange</a> has a good discussion about it. It seems to be wildly expensive, although the 32-bit version is now free for non-commercial use. It requires the use of the <em>q</em> language, and people generally say it has a steep learning curve. Much of the benefit seems to be from storing data in memory for faster query response. I’m not building a live trading system or collecting streaming ticks myself, so this is of little value to me.</p>\n<p>Stack Overflow has a <a href=\"http://stackoverflow.com/questions/1623399/storing-massive-ordered-time-series-data-in-bigtable-derivatives\">discussion</a> on the use of <a href=\"http://cassandra.apache.org/\">Cassandra</a> for storing tick data. Cassandra looks interesting, but I think including every tick as a key in the index will be slow and take too much space. I could aggregate the ticks together, compress them, and use Cassandra as a key-value store for blobs. But, then the database doesn’t seem to be adding any value, except for replicating itself across a cluster. I don’t need the kind of scalability that would require a cluster.</p>\n<p>In fact, I don’t really need a database at all. My data store will be updated only once a year, and will otherwise be read-only. I don’t need atomic transactions, multi-threaded socket connections, or security handling. I want something fast, simple, robust, and accessible from any programming language. <a href=\"http://discretelogics.com/teafiles/\">TeaFiles</a> come close to what I want, but they don’t appear to support compression. In the end, I decided to just make my own data store on the file system.</p>\n<h2>Key System Points</h2>\n<ol><li>Data should be stored in binary form, not text files. Text files require parsing and data conversion, which slows everything down.</li>\n<li>Data should be <a href=\"https://en.wikipedia.org/wiki/Column-oriented_DBMS\">column-oriented</a>. That means all the timestamps are stored consecutively, and all the prices are stored consecutively, etc. Typical relational databases are row-oriented, keeping the full record together. So, the timestamp for a record is followed by the price for the record, and then the volume. It means all the fields must be scanned in order to get the desired field for a record. Otherwise, you’d need a seek operation for each record, which would be prohibitively slow.</li>\n<li>Data should be compressed. Reading from a hard disk takes time, and compressed tick data takes only about 10% of the space. Decompression is pretty fast on a good computer. <a href=\"http://skipperkongen.dk/2012/02/28/uncompressed-versus-compressed-read/\">One person’s tests</a> indicate that reading and decompressing compressed files is about 4x as fast as reading uncompressed files from disk.</li>\n<li>Data should be stored on a solid state drive, which is much easier to do if it is compressed. SSDs are <a href=\"http://www.thessdreview.com/featured/ssd-throughput-latency-iopsexplained/\">many times faster</a> than spinning disks. Also, typical desktop hard drives have an <a href=\"https://en.wikipedia.org/wiki/Hard_disk_drive_performance_characteristics#Seek_time\">average seek latency of 9 ms</a>, while typical SSDs have latencies around 0.10 ms. This is important for randomly accessing the data.</li>\n</ol><h2>Random-Access vs. Compression</h2>\n<p>Random access doesn’t work with compressed files. Well, there seem to be <a href=\"http://lh3.github.io/2014/07/05/random-access-to-zlib-compressed-files/\">people working on that</a>, but the solutions all require trade-offs. One method stores 32 kB uncompressed before each access point. Another method stores an index table at the end of the file and resets the stream before each access point. Other methods involve binary search and multiple seeks to peek into the compressed file and find the right location.</p>\n<p>I chose to implement the method of resetting the stream at certain points, which are recorded in an index table. This involves a trade-off, where fine-grained access increases the size of the index table and reduces the size of the data chunk visible to the compression algorithm. I decided that the finest granularity I need is the ability to query the trades for a given ticker on a given day.</p>\n<p>I first tried simply storing separate gzip files for each ticker-day. That took as much space as having no compression. The reason is that there are many files (about 10,000 tickers each day), and a large fraction of them contain very few ticks. Storing tiny amounts of data in individual files came with overhead in the form of a gzip headers and filesystem headers, and also each file <a href=\"http://www.fixedbyvonnie.com/2014/08/whats-difference-file-size-size-disk\">takes more space</a> when written to disk. Anyway, I’ve had filesystems bog down before with less than the 33 million files this solution would create.</p>\n<p>My current solution is to combine all the values for each field for one day into its own file, like this:</p>\n<p><a href=\"http://gregharris.info/wp-content/uploads/2015/11/filesystem.png\"><img class=\"alignnone wp-image-23 size-full\" src=\"http://gregharris.info/wp-content/uploads/2015/11/filesystem.png\" alt=\"File organization\" width=\"411\" height=\"387\" /></a></p>\n<p>Here, we see one folder per day, each folder with three files: price, size, and time. Each file is a concatenation of compressed data chunks, with one chunk per ticker:</p>\n<p><a href=\"http://gregharris.info/wp-content/uploads/2015/11/filecontents.png\"><img class=\"alignnone size-full wp-image-24\" src=\"http://gregharris.info/wp-content/uploads/2015/11/filecontents.png\" alt=\"filecontents\" width=\"592\" height=\"45\" /></a></p>\n<p>For convenience, I chose to simply store the index table in MySQL:</p>\n<p><a href=\"http://gregharris.info/wp-content/uploads/2015/11/indextable.png\"><img class=\"alignnone size-full wp-image-25\" src=\"http://gregharris.info/wp-content/uploads/2015/11/indextable.png\" alt=\"indextable\" width=\"566\" height=\"246\" /></a></p>\n<p>Each field has an offset, which tells where the compressed chunk for that ticker begins. Each field also has the number of bytes in the compressed chunk. Notice how some fields compress better than others, which is why I can’t store just one offset and bytes pair for each ticker.</p>\n<p>It might be possible to structure the data as one file per ticker, with each file holding the entire history. That has some disadvantages, though. First, tickers get reused over time by different companies. Second, it is less robust. I mean, if something gets messed up, I would need to reprocess all SAS files to rebuild one ticker. With my system, I would only need to rebuild a single day. Third, it would make it harder to parallelize. With my system, I can process multiple SAS files (days) at the same time.</p>\n<h2>Tick Filtering</h2>\n<p>TAQ records contain ancillary fields that I chose not to store. <a href=\"http://www.nyxdata.com/doc/2659\">This document</a> and <a href=\"http://www.nyxdata.com/doc/224904\">this document</a> explain what each field means. I didn’t keep all trades, but rather implemented <a href=\"http://wrds-web.wharton.upenn.edu/wrds/support/Additional%20Support/WRDS%20Presentations/_000user2007/taq_data.pdf\">this filter recommended by WRDS</a>:</p>\n<p><a href=\"http://gregharris.info/wp-content/uploads/2015/11/filter.png\"><img class=\"alignnone wp-image-26 size-medium\" src=\"http://gregharris.info/wp-content/uploads/2015/11/filter-300x202.png\" alt=\"filter\" width=\"300\" height=\"202\" /></a></p>\n<h2>Python Code</h2>\n<p>First, I use the <a href=\"https://pypi.python.org/pypi/sas7bdat\">sas7bdat</a> package to extract the records from the SAS file:</p>\n<pre class=\"brush: python; collapse: false; light: true; title: ; wrap-lines: notranslate\" title=\"\">\r\nfrom sas7bdat import SAS7BDAT\r\nf = SAS7BDAT(filename)\r\nf.skip_header = True\r\nfor row in f:\r\n    if the record passes the filter, append the values to each list\r\nf.close()\r\n</pre>\n<p>I use lists to store the prices, sizes, and timestamps for each ticker.  <a href=\"http://stackoverflow.com/questions/176011/python-list-vs-array-when-to-use\">Lists grow better than arrays</a>. Once I detect that the ticker has changed, I compress and append the data from the previous ticker:</p>\n<pre class=\"brush: python; collapse: false; light: true; title: ; wrap-lines: notranslate\" title=\"\">\r\nimport zlib\r\nfrom array import array\r\n...\r\n# initialize the compressed dataset before processing each date\r\ncompressedTimes = \'\'\r\ncompressedPrices = \'\'\r\ncompressedSizes = \'\'\r\n...\r\n# after collecting all data for a ticker, compress and append it \r\n# append compressed time\r\nbinaryData = array(\'i\', times).tostring()\r\ncompressedData = zlib.compress(binaryData, zlib.Z_BEST_COMPRESSION)\r\ntimeBytes = len(compressedData) # store in MySQL with ticker and date\r\ntimeOffset = len(compressedTimes) # store in MySQL with ticker and date\r\ncompressedTimes += compressedData\r\n# append compressed price\r\nbinaryData = array(\'f\', prices).tostring()\r\ncompressedData = zlib.compress(binaryData, zlib.Z_BEST_COMPRESSION)\r\npriceBytes = len(compressedData)\r\npriceOffset = len(compressedPrices)\r\ncompressedPrices += compressedData\r\n# append compressed size\r\nbinaryData = array(\'f\', sizes).tostring()\r\ncompressedData = zlib.compress(binaryData, zlib.Z_BEST_COMPRESSION)\r\nsizeBytes = len(compressedData)\r\nsizeOffset = len(compressedSizes)\r\ncompressedSizes += compressedData\r\n</pre>\n<p>Finally, after reading in all records from the SAS file, I write out the compressed data:</p>\n<pre class=\"brush: python; collapse: false; light: true; title: ; wrap-lines: notranslate\" title=\"\">\r\n# time\r\nfid = open(dateFolder + os.sep + \'time\', \'wb\')\r\nfid.write(compressedTimes)\r\nfid.close()\r\n# price\r\nfid = open(dateFolder + os.sep + \'price\', \'wb\')\r\nfid.write(compressedPrices)\r\nfid.close()\r\n# size\r\nfid = open(dateFolder + os.sep + \'size\', \'wb\')\r\nfid.write(compressedSizes)\r\nfid.close()\r\n</pre>\n<p>Note that I store the price and size as 4-bytes floats, and I store the timestamp as seconds in a 4-byte integer. I don’t store the date, since it is found in the folder name. The ticker is stored only in MySQL.</p>\n<h2>Reading the Data</h2>\n<p>First use MySQL to get the offsets and byte counts for the target ticker and date. Then run code like this:</p>\n<pre class=\"brush: python; collapse: false; light: true; title: ; wrap-lines: notranslate\" title=\"\">\r\n# time\r\nfid = open(dateFolder + os.sep + \'time\', \'rb\')\r\nfid.seek(time_offset)\r\ncompressedData = fid.read(time_bytes)\r\nbinaryData = zlib.decompress(compressedData)\r\ntimeArray = array(\'i\')\r\ntimeArray.fromstring(binaryData)\r\nfid.close()\r\n# price\r\nfid = open(dateFolder + os.sep + \'price\', \'rb\')\r\nfid.seek(price_offset)\r\ncompressedData = fid.read(price_bytes)\r\nbinaryData = zlib.decompress(compressedData)\r\npriceArray = array(\'f\')\r\npriceArray.fromstring(binaryData)\r\nfid.close()\r\n# size\r\nfid = open(dateFolder + os.sep + \'size\', \'rb\')\r\nfid.seek(size_offset)\r\ncompressedData = fid.read(size_bytes)\r\nbinaryData = zlib.decompress(compressedData)\r\nsizeArray = array(\'f\')\r\nsizeArray.fromstring(binaryData)\r\nfid.close()\r\n</pre>\n<p>Note: opening the files using ‘rb’ instead of just ‘r’ is only necessary on Windows.</p>\n<h2>Conclusion</h2>\n<p>Once the compressed files are prepared, it is incredibly fast to read the data. I suspect it is as fast as possible without maintaining a partial in-memory cache like Kdb+. Please let me know if you have a suggestion that can make the system faster. Some commercial systems use memory mapping to reduce the cost of system calls for seeking. This could be done on my compressed files, as well. It would only involve a modification of the reading code. Python Central ran a test where <a href=\"http://pythoncentral.io/memory-mapped-mmap-file-support-in-python/\">memory mapping was 17% faster</a>. Anyway, the file format is simple enough to easily write data readers in any language. I believe zlib is available on all the major languages. Even Matlab seems to have access to it (<a href=\"http://www.mathworks.com/matlabcentral/fileexchange/8899-rapid-lossless-data-compression-of-numerical-or-string-variables/content/dunzip.m\">through the included JRE</a>).</p>\n					',1),(249,'tornqvist/jazzon','https://github.com/tornqvist/jazzon',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Working with static JSON files for mocking data or whatever other purposes can be a real bore. Jazzon is a convenience utility for generating, concatenating and streamlining the handling of static JSON files.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tornqvist/jazzon#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h2>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install --save jazzon</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tornqvist/jazzon#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>In and of it self jazzon does nothing, <em>really</em>. It\'s sole purpose is to call registered plugins with the current state and identified helpers. Helpers can be chained passing the current state from one to the next.</p>\n\n<p>To illustrate a most basic scenario, this is how one might use jazzon together with <a href=\"https://github.com/tornqvist/jazzon-uuid\">jazzon-uuid</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">jazzon</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>jazzon<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">uuid</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>jazzon-uuid<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">let</span> data <span class=\"pl-k\">=</span> { id<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@{ uuid }<span class=\"pl-pds\">\"</span></span> };\n\n<span class=\"pl-smi\">jazzon</span>.<span class=\"pl-en\">use</span>(<span class=\"pl-en\">uuid</span>());\n\njazzon\n  .<span class=\"pl-c1\">compile</span>(data)\n  .<span class=\"pl-en\">then</span>(result <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(result)); <span class=\"pl-c\">// =&gt; {id: \"6c84fb90-12c4-11e1-840d-7b25c5ee775a\"}</span></pre></div>\n\n<p>In this scenario, jazzon encounters the helper <code>uuid</code> and calls each registered plugin (in this case <code>jazzon-uuid</code>) on it.</p>\n\n<p>Helpers can also be chained using the pipe (<code>|</code>) symbol. Each chained helper gets the output (state) of the previous helper to operate on. To illustrate a more complex scenario, take these two models:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// user.json</span>\n\n{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@{ uuid }<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@{ name.findName }<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>email<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@{ internet.email }<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>username<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@{ internet.userName }<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// users.json</span>\n\n{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>total<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">3</span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@{ import(user.json) | pick(id, username) | repeat(3) }<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n\n<p>Running <code>users.json</code> through jazzon would produce something like this:</p>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>total<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">3</span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> [{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a76f535f-cbc6-4c09-8151-573e200c1dbf<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>username<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Doug.Simonis28<span class=\"pl-pds\">\"</span></span>\n  }, {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0a512648-c418-40a6-90ac-1bb5ef1e7fab<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>username<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Virgil_Kunze<span class=\"pl-pds\">\"</span></span>\n  }, {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>88d6903f-d13b-4d16-877e-f906461c69aa<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>username<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Grady.Koelpin<span class=\"pl-pds\">\"</span></span>\n  }]\n}</pre></div>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tornqvist/jazzon#syntax\"><span class=\"octicon octicon-link\"></span></a>Syntax</h2>\n\n<p>The syntax of helpers are very similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\">JavaScript template strings</a> to clearly illustrate their purpose. But do not confuse them as the pipe separator is not a valid JavaScript operator.</p>\n\n<p>The string must start with <code>@{</code> and end with <code>}</code>. Each helper is separated with a <code>|</code> symbol. Encountering an invalid template-ish string will throw an error.</p>\n\n<p>Use <a href=\"http://regexr.com/3bsnl\">this regexr</a> to experiment with the template strings.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tornqvist/jazzon#plugins\"><span class=\"octicon octicon-link\"></span></a>Plugins</h2>\n\n<p>Plugins should export a function that get\'s called once for every helper encountered by jazzon. The convention is to export a factory function that returns the plugin.</p>\n\n<p>A plugin really is just a reducer that jazzon uses to process all the helpers. Therefore a plugin should <em>always</em> return a state, even if it does not manipulate the state. A switch statement does the job as so:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// myplugin.js</span>\n\n<span class=\"pl-c1\">module</span>.<span class=\"pl-en\">exports</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">otions</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">state</span>, <span class=\"pl-smi\">helper</span>, <span class=\"pl-smi\">args</span>) {\n    <span class=\"pl-k\">switch</span> (helper) {\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>name<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span>\n      <span class=\"pl-k\">return</span> args[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">||</span> <span class=\"pl-smi\">options</span>.<span class=\"pl-smi\">default</span>;\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>wrap<span class=\"pl-pds\">\'</span></span><span class=\"pl-k\">:</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>Hello <span class=\"pl-s1\"><span class=\"pl-pse\">${</span> state <span class=\"pl-pse\">}</span></span>!<span class=\"pl-pds\">`</span></span>;\n    <span class=\"pl-k\">default</span><span class=\"pl-k\">:</span>\n      <span class=\"pl-k\">return</span> state;\n    }\n  }\n};</pre></div>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// myprogram.js</span>\n\njazzon\n  .<span class=\"pl-en\">use</span>(<span class=\"pl-en\">myplugin</span>({\n    <span class=\"pl-k\">default</span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>world<span class=\"pl-pds\">\'</span></span>\n  }))\n  .<span class=\"pl-c1\">compile</span>({\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>first<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@{ name | wrap }<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>second<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@{ name(Joe) | wrap }<span class=\"pl-pds\">\"</span></span>\n  })\n  .<span class=\"pl-en\">then</span>(result <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(result)); <span class=\"pl-c\">// =&gt; {\"first\": \"Hello world!\", \"second\": \"Hello Joe!\"}</span></pre></div>\n\n<p>Jazzon also supports async plugins. Under the hood, jazzon is using <a href=\"https://github.com/tj/co\">co</a> so anything that co can handle, jazzon can handle. As so, other than just plain strings, a plugin may return a Promise, generator, generator function, function, object or array. Due to the awesome nature of co, objects and arrays may contain nestled objects/arrays containing Promises or any of the other supported types. See some of the plugins for examples of how this is achieved.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/tornqvist/jazzon#availible-plugins\"><span class=\"octicon octicon-link\"></span></a>Availible plugins</h3>\n\n<p>To add your own plugin, add it to the list and make a pull request.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/tornqvist/jazzon#api\"><span class=\"octicon octicon-link\"></span></a>API</h2>\n\n<ul><li><code>jazon.create(/*plugins*/)</code> Creates a new instance of jazzon with optional list of plugins.\n\n<ul><li><em>Returns jazzon</em></li>\n</ul></li>\n<li><code>jazzon.use(plugin)</code> Adds a plugin to be used when transforming template strings.\n\n<ul><li><em>Returns jazzon</em></li>\n</ul></li>\n<li><code>jazzon.compile(object)</code> Iterates over the object looking for template strings to transform.\n\n<ul><li><em>Returns a Promise</em></li>\n</ul></li>\n<li><code>jazzon.plugins</code> An list of registered helpers on this instance.\n\n<ul><li><em>Returns an Array</em></li>\n<li><em>Is immutable</em></li>\n</ul></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/tornqvist/jazzon#todo\"><span class=\"octicon octicon-link\"></span></a>TODO</h2>\n\n',1),(250,'Featurebaby','http://www.featurebaby.com/',0,0,'\n      <div class=\"marketing\">\n    <h2 class=\"text-center\">Improve the products you love</h2>\n    <p class=\"text-center\">Featurebaby is a community to make products <span class=\"amp\">&amp;</span> people work better together</p>\n</div>\n\n<div>\n    <div class=\"slot\">\n    <h4><a href=\"http://www.featurebaby.com/p/featurebaby\">Featurebaby</a></h4>\n    <p>Featurebaby is a community to make products &amp; people work better together</p>\n  </div>\n  <div class=\"slot\">\n    <h4><a href=\"http://www.featurebaby.com/p/hacker-news\">Hacker News</a></h4>\n    <p>Hacker News is a social news website focusing on computer science and entrepreneurship.</p>\n  </div>\n  <div class=\"slot\">\n    <h4><a href=\"http://www.featurebaby.com/p/dribbble\">Dribbble</a></h4>\n    <p>Dribbble is show and tell for designers.</p>\n  </div>\n  <div class=\"slot\">\n    <h4><a href=\"http://www.featurebaby.com/p/product-hunt\">Product Hunt</a></h4>\n    <p>Product Hunt is a curation of the best new products, every day.</p>\n  </div>\n  <div class=\"slot\">\n    <h4><a href=\"http://www.featurebaby.com/p/heroku\">Heroku</a></h4>\n    <p>Heroku is a cloud platform as a service supporting several programming languages.</p>\n  </div>\n  <div class=\"slot\">\n    <h4><a href=\"http://www.featurebaby.com/p/wordpress\">Wordpress</a></h4>\n    <p>WordPress is web software you can use to create a beautiful website, blog, or app.</p>\n  </div>\n  <div class=\"slot\">\n    <h4><a href=\"http://www.featurebaby.com/p/google-drive\">Google Drive</a></h4>\n    <p>Get access to files anywhere through secure cloud storage and file backup for your photos, videos, files and more with Google Drive</p>\n  </div>\n  <div class=\"slot\">\n    <h4><a href=\"http://www.featurebaby.com/p/google-news\">Google News</a></h4>\n    <p>Comprehensive up-to-date news coverage, aggregated from sources all over the world by Google News</p>\n  </div>\n  \n  <div class=\"slot\">\n    <h4><a href=\"http://www.featurebaby.com/p/wordpress-com\">Wordpress.com</a></h4>\n    <p>WordPress.com is the best place for your personal blog or business site.</p>\n  </div>\n\n\n  \n</div>\n    ',1),(251,'README.md at b1af2ab4761618930f6f7e44eb775e08fac3f38e - sourcegraph','https://src.sourcegraph.com/sourcegraph@b1af2ab4761618930f6f7e44eb775e08fac3f38e/.tree/README.md',0,0,'\n		\n\n<p>Sourcegraph is a <strong>self-hosted Git repository service</strong> with Code\nIntelligence. It <strong>runs on your own server</strong> or cloud and installs in\n5 minutes.</p>\n\n<p>Sourcegraph gives your team the power to build better software by\noffering:</p>\n\n<ul><li><strong>Code Intelligence (<a href=\"https://src.sourcegraph.com/sourcegraph@0788772f7fec57c62bbd1eba83839d5d0de97b23/.GoPackage/src.sourcegraph.com/sourcegraph/util/mdutil/.def/Mentions\">example</a>):</strong> Understand code more quickly with jump-to-definition and tooltips. (Go and Java only, more languages coming soon.)</li>\n<li><strong>Live usage examples (<a href=\"https://src.sourcegraph.com/sourcegraph@master/.GoPackage/src.sourcegraph.com/sourcegraph/app/router/.def/Router/URLToRepo/.examples\">example</a>):</strong> See how code is currently being used across your codebases. As a wise developer once said, “The right example is worth a thousand words of documentation.”</li>\n<li><strong>Better code reviews (<a href=\"https://src.sourcegraph.com/sourcegraph/.changes/302\">example</a>):</strong> Review changesets more effectively with drafts and Code Intelligence context in diffs—and an easy branch-based pull request model.</li>\n<li><strong>Code-linked issue tracking (<a href=\"https://src.sourcegraph.com/sourcegraph/.tracker/27\">example</a>):</strong> Ask questions, suggest improvements, and explain design decisions inline in your code.</li>\n<li><strong>Smart search (<a href=\"https://src.sourcegraph.com/sourcegraph/.search?q=NewClient\">example</a>):</strong> Find code quickly by function name, full text, etc.</li>\n<li><strong>Hackable source code:</strong> <a href=\"https://src.sourcegraph.com/sourcegraph\">Sourcegraph’s source code</a> is publicly available under the <a href=\"https://fair.io\">Fair Source License</a>.</li>\n</ul><p><a href=\"https://src.sourcegraph.com/sourcegraph/.docs/getting-started/\"><strong>Get started with your own Sourcegraph server</strong></a> in 5 minutes! Want to try it out first? You’re on a Sourcegraph server (<a href=\"https://src.sourcegraph.com\">src.sourcegraph.com</a>) now, so just browse around this server.</p>\n\n<p><em>More info? Watch the <a href=\"https://www.youtube.com/watch?v=XOdh3-QJSzs\">demo video</a>,\nsee the\n<a href=\"https://sourcegraph.com/blog/133554180524/announcing-the-sourcegraph-developer-release-an\">announcement blog post</a>,\nand <a href=\"https://sourcegraph.com\">view enterprise capabilities</a>.</em></p>\n\n<h2>Installation</h2>\n\n<p>Follow the 5-minute\n<a href=\"https://src.sourcegraph.com/sourcegraph/.docs/getting-started/\">Sourcegraph installation instructions</a>. For\nmore installation methods, check out the\n<a href=\"https://src.sourcegraph.com/sourcegraph/.docs\">docs</a>.</p>\n\n<h2>Under the hood</h2>\n\n<p>Sourcegraph is built on several components:</p>\n\n<ul><li><a href=\"https://srclib.org\">srclib</a>, a multi-language, hackable source code\nanalysis toolchain</li>\n<li>The <a href=\"http://golang.org\">Go</a> programming language</li>\n<li><a href=\"http://grpc.io\">gRPC</a>, an HTTP2-based RPC protocol that uses\nProtocol Buffer service definitions</li>\n<li><a href=\"https://facebook.github.io/react/\">React</a>, a JavaScript library for\nbuilding UIs.</li>\n<li><a href=\"https://sourcegraph.com\">Sourcegraph.com</a>, a public instance of\nSourcegraph that provides information about open-source projects to\nyour local Sourcegraph.</li>\n</ul><h2>Contributing to Sourcegraph</h2>\n\n<p>Want to make Sourcegraph better? Great! Check out\n<a href=\"https://src.sourcegraph.com/sourcegraph@master/.tree/CONTRIBUTING.md\">CONTRIBUTING.md</a>. We\nwelcome all types of contributions–code, documentation, assets,\ncommunity support, and user feedback.</p>\n\n<p>Our\n<a href=\"https://src.sourcegraph.com/sourcegraph@master/.tree/README.dev.md\">README.dev.md</a>\nis a good place to start.</p>\n\n<h2>Security</h2>\n\n<p>Security is very important to us. If you discover a security-related\nissue, please responsibly disclose it by emailing\n<a href=\"mailto:security@sourcegaph.com\">security@sourcegraph.com</a> and not by\ncreating an issue.</p>\n\n<p><a href=\"https://sourcegraph.com/security\">Read our complete security policy.</a></p>\n\n<h2>License</h2>\n\n<p><a href=\"https://fair.io\">Fair Source License</a></p>\n\n	',1),(252,'graemedouglas/LittleD','https://github.com/graemedouglas/LittleD',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>A relational database for embedded devices and sensors nodes.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/graemedouglas/LittleD#introduction\"><span class=\"octicon octicon-link\"></span></a>Introduction</h2>\n\n<p>LittleD provides a SQL frontend to manage data under the relational model.\nThis project targets devices of about the same capabilities as the Arduino\nMega2560. In a nutshell, the system supports the creation of tables,\ndata insertion, and SELECT-FROM-WHERE syntax. Error messages are\nsupported but not mandatory. A simple configuration header file dictates\nwhich features are compiled in so the database\'s codespace footprint\ncan be controlled according to application needs. All code except\nthat needed to interface with Arduinos is written in C.</p>\n\n<p>This project is part of ongoing research being conducted at the\nUniversity of British Columbia\'s Okanagan Campus under the direction\nof Dr. Ramon Lawrence. The work has been supported by Dr. Lawrence\'s\nDistributed Data Lab, the Irving K. Barber School of Arts and Sciences,\nthe Natural Sciences and Engineering Research Council of Canada,\nalong with a list of people too numerous to name.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/graemedouglas/LittleD#building-instructions\"><span class=\"octicon octicon-link\"></span></a>Building Instructions</h2>\n\n<p>To simply build the database locally, in your shell of choice navigate\nto the repository root and execute the command</p>\n\n<pre><code>make\n</code></pre>\n\n<p>To build the unit tests, issue the command</p>\n\n<pre><code>make tests\n</code></pre>\n\n<p>and navigate to the <em>bin/tests</em> directory within the repository\'s root\ndirectory. You may run all tests by</p>\n\n<pre><code>./runalltests\n</code></pre>\n\n<p>Single tests are included in the same directory. The documentation\ncan be generated using</p>\n\n<pre><code>make docs\n</code></pre>\n\n<p>and reside in the <em>doc/doxygen</em> directory. Note that doxygen must be installed\nfor the documentation to be generated. Finally,</p>\n\n<pre><code>make clean\n</code></pre>\n\n<p>deletes all files created at compile time.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/graemedouglas/LittleD#eclipse-setup\"><span class=\"octicon octicon-link\"></span></a>Eclipse Setup</h2>\n\n<p>LittleD can be managed using an Eclipse Makefile project.\nEither the packaged C/C++ Eclipse IDE or the installable CDT package\nmust be used.</p>\n\n<p>First make sure that the repository is cloned.\nIn Eclipse click <strong>File</strong> -&gt; <strong>Import...</strong>. Within the <strong>Select</strong> window, choose\nunder <strong>C/C++</strong> the <strong>Existing Code as Makefile Project</strong> option and click\n<strong>Next</strong>. Give your Eclipse Project a name and browse to the root of the\nproject repository to use the code. Choose the correct compiler for your\nsystem and then click <strong>Finish</strong>.</p>\n\n<p>As noted above, there are a small number of make targets that can be used\nwith the project\'s Makefile. By right clicking the project in the\n<strong>Package Explorer</strong> and selecting <strong>Make Targets</strong> -&gt; <strong>Create...</strong>. Leaving\nall options at the their default, enter the name of the target to add\n(for instance, <em>tests</em>) and then click <strong>OK</strong>. You can then run the Make target\nby right clicking on the project in the <strong>Project Explorer</strong> and choosing\n<strong>Make Targets</strong> -&gt; <strong>Build...</strong>. Select the target from the list that appears\nand click <strong>Build</strong>. Finally, you can run individual files with main methods\nby opening them and click the green <strong>Run</strong> button at the top.</p>\n',1);
INSERT INTO `entries` VALUES (253,'alfateam/rdb','https://github.com/alfateam/rdb/blob/master/docs/docs.md',0,0,'\n    <p>All examples below are found at <a href=\"https://npmjs.org/package/rdb-demo\">npmjs.org/package/rdb-demo</a>.  </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#documentation-and-examples\"><span class=\"octicon octicon-link\"></span></a><em>Documentation and examples</em></h2>\n\n<p><strong>Connecting</strong><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_connecttopostgres\">connect to postgres</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_connecttomysql\">connect to mySql</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_poolsize\">pool size</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_endpool\">end pool</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_endallpools\">end all pools</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_logging\">logging</a><br /><strong>Basic querying</strong><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_getbyid\">getById</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_trygetbyid\">tryGetById</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_trygetfirst\">tryGetFirst</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_join\">join</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_hasmany\">hasMany</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_hasone\">hasOne</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_compositekeys\">composite keys</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_getbyideager\">getById eagerly</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_trygetfirsteager\">tryGetFirst eagerly</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_todto\">toDto</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_todtowithstrategy\">toDto with strategy</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_todtowithorderby\">toDto with orderBy</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_todtowithorderbydesc\">toDto with orderBy descending</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_serializable\">toDto ignoring columns</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_tojson\">toJSON</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_tojsonwithstrategy\">toJSON with strategy</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_getmany\">getMany</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_getmanylazy\">getMany lazily</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_getmanyeager\">getMany eagerly</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_manytodto\">(many)ToDto</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_manytodtowithstrategy\">(many)ToDto with strategy</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_manytojson\">(many)ToJSON</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_manytojsonwithstrategy\">(many)ToJSON with strategy</a><br /><strong>Streaming</strong><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_streameager\">streaming rows</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_streamjsoneager\">streaming json</a><br /><strong>Persistence</strong><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_update\">update</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_insert\">insert</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_delete\">delete</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_cascadedelete\">cascade delete</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_bulkdelete\">bulk delete</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_bulkcascadedelete\">bulk cascade delete</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_defaultvalues\">default values</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_conventions\">conventions</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_updatejoin\">update a join-relation</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_updatehasone\">update a hasOne-relation</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_updatehasmany\">update a hasMany-relation</a>  </p>\n\n<p><strong>Filters</strong><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_equal\">equal</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_notequal\">notEqual</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_not\">not</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_lessthan\">lessThan</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_lessthanorequal\">lessThanOrEqual</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_greaterthan\">greaterThan</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_greaterthanorequal\">greaterThanOrEqual</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_between\">between</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_in\">in</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_startswith\">startsWith</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_endswith\">endsWith</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_contains\">contains</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_iequal\">iEqual</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_istartswith\">iStartsWith</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_iendswith\">iEndsWith</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_icontains\">iContains</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_exists\">exists</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_or\">or</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_and\">and</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_oralternative\">or alternative syntax</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_andalternative\">and alternative syntax</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_subfilter\">sub filter</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_compositefilter\">composite filter</a><br /><a href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#_rawsqlfilter\">raw sql filter</a>  </p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/alfateam/rdb/blob/master/docs/docs.md#contents\"><span class=\"octicon octicon-link\"></span></a><em>Contents</em></h2>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/connect.js\">connect to postgres</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-c\">//will use pool with 10 connections by default</span>\n<span class=\"pl-c\">//alternatively: var db = rdb.pg(\'postgres://postgres:postgres@localhost/test\');</span>\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/mySql/connect.js\">connect to mySql</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">mySql</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>mysql://root@localhost/rdbDemo?multipleStatements=true<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-c\">//will use pool with 10 connections by default</span>\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/poolOptions.js\">pool size</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> poolOptions <span class=\"pl-k\">=</span> {size<span class=\"pl-k\">:</span> <span class=\"pl-c1\">20</span>};\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>, poolOptions);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success. Created pool with max 20 connections.<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/endPool.js\">end pool</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">db</span>.<span class=\"pl-smi\">end</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Pool ended.<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/endAllPools.js\">end all pools</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> dbPg <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> dbMySql <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">mySql</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>mysql://root@localhost/rdbDemo?multipleStatements=true<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-en\">connectPg</span>()\n    .<span class=\"pl-en\">then</span>(connectMySql)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">end</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">connectPg</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">dbPg</span>.<span class=\"pl-en\">transaction</span>()\n        .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n        .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">connectMySql</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">dbMySql</span>.<span class=\"pl-en\">transaction</span>()\n        .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n        .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Pools ended.<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">err</span>.<span class=\"pl-smi\">stack</span>);\n}\n</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/logging.js\">logging</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">rdb</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>); <span class=\"pl-c\">//will log sql and parameters</span>\n\n<span class=\"pl-k\">var</span> Customer <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_customer<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cName<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>name<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(getById)\n    .<span class=\"pl-en\">then</span>(update)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getById</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">getById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>a0000000-0000-0000-0000-000000000000<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">update</span>(<span class=\"pl-smi\">customer</span>) {\n    <span class=\"pl-smi\">customer</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Ringo<span class=\"pl-pds\">\'</span></span>; \n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/getById.js\">getById</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> Customer <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_customer<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cName<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>name<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cBalance<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">numeric</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>balance<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cRegdate<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">date</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>registeredDate<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cIsActive<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">boolean</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>isActive<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cPicture<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">binary</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>picture<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(getById)\n    .<span class=\"pl-en\">then</span>(printCustomer)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getById</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">getById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>a0000000-0000-0000-0000-000000000000<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printCustomer</span>(<span class=\"pl-smi\">customer</span>) {\n    <span class=\"pl-k\">var</span> format <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Customer Id: %s, name: %s, Balance: %s, Registered Date: %s, Is Active: %s, Picture: %s<span class=\"pl-pds\">\'</span></span>; \n    <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [format, <span class=\"pl-smi\">customer</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-c1\">name</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-smi\">balance</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-smi\">registeredDate</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-smi\">isActive</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-smi\">picture</span>];\n    <span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>,args);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/tryGetById.js\">tryGetById</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> Customer <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_customer<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cName<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>name<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cBalance<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">numeric</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>balance<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cRegdate<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">date</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>registeredDate<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cIsActive<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">boolean</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>isActive<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cPicture<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">binary</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>picture<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(tryGetById)\n    .<span class=\"pl-en\">then</span>(printCustomer)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">tryGetById</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">tryGetById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>a0000000-0000-0000-0000-000000000000<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printCustomer</span>(<span class=\"pl-smi\">customer</span>) {\n    <span class=\"pl-k\">if</span> (customer) {\n        <span class=\"pl-k\">var</span> format <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Customer Id: %s, name: %s, Balance: %s, Registered Date: %s, Is Active: %s, Picture: %s<span class=\"pl-pds\">\'</span></span>; \n        <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [format, <span class=\"pl-smi\">customer</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-c1\">name</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-smi\">balance</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-smi\">registeredDate</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-smi\">isActive</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-smi\">picture</span>];\n        <span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>,args);\n    }\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/tryGetFirst.js\">tryGetFirst</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> Customer <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_customer<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cName<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>name<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(tryGetFirst)\n    .<span class=\"pl-en\">then</span>(printCustomer)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">tryGetFirst</span>() {\n    <span class=\"pl-k\">var</span> filter <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Customer</span>.<span class=\"pl-c1\">name</span>.<span class=\"pl-en\">equal</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>John<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">tryGetFirst</span>(filter);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printCustomer</span>(<span class=\"pl-smi\">customer</span>) {\n    <span class=\"pl-k\">if</span> (customer) {\n        <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Customer Id: %s, name: %s<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-c1\">name</span>);;\n    }\n    <span class=\"pl-k\">else</span>\n        <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>customer not found<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/join.js\">join</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> Customer <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_customer<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> Order <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_order<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cName<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>name<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oOrderNo<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>orderNo<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oCustomerId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>customerId<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-c1\">join</span>(Customer).<span class=\"pl-en\">by</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oCustomerId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>customer<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(getOrder)\n    .<span class=\"pl-en\">then</span>(printOrder)\n    .<span class=\"pl-en\">then</span>(printCustomer)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getOrder</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">getById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>a0000000-a000-0000-0000-000000000000<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printOrder</span>(<span class=\"pl-smi\">order</span>) {\n    <span class=\"pl-k\">var</span> format <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Order Id: %s, Order No: %s, Customer Id: %s<span class=\"pl-pds\">\'</span></span>; \n    <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [format, <span class=\"pl-smi\">order</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">orderNo</span>, <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">customerId</span>];\n    <span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>,args);\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">customer</span>; <span class=\"pl-c\">//this is a promise</span>\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printCustomer</span>(<span class=\"pl-smi\">customer</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>customer)\n        <span class=\"pl-k\">return</span>;\n    <span class=\"pl-k\">var</span> format <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Customer Id: %s, name: %s<span class=\"pl-pds\">\'</span></span>; \n    <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [format, <span class=\"pl-smi\">customer</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">customer</span>.<span class=\"pl-c1\">name</span>];\n    <span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>,args);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/hasMany.js\">hasMany</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> Order <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_order<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> OrderLine <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_orderLine<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oOrderNo<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>orderNo<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">OrderLine</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">OrderLine</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lOrderId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>orderId<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">OrderLine</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lProduct<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>product<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> line_order_relation <span class=\"pl-k\">=</span> <span class=\"pl-smi\">OrderLine</span>.<span class=\"pl-c1\">join</span>(Order).<span class=\"pl-en\">by</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lOrderId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>order<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">hasMany</span>(line_order_relation).<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lines<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(getOrder)\n    .<span class=\"pl-en\">then</span>(printOrder)\n    .<span class=\"pl-en\">then</span>(printLines)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getOrder</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">getById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>b0000000-b000-0000-0000-000000000000<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printOrder</span>(<span class=\"pl-smi\">order</span>) {\n    <span class=\"pl-k\">var</span> format <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Order Id: %s, Order No: %s<span class=\"pl-pds\">\'</span></span>; \n    <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [format, <span class=\"pl-smi\">order</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">orderNo</span>];\n    <span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>,args);\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">lines</span>; <span class=\"pl-c\">//this is a promise</span>\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printLines</span>(<span class=\"pl-smi\">lines</span>) {\n    <span class=\"pl-smi\">lines</span>.<span class=\"pl-en\">forEach</span>(printLine);\n\n    <span class=\"pl-k\">function</span> <span class=\"pl-en\">printLine</span>(<span class=\"pl-smi\">line</span>) {\n        <span class=\"pl-k\">var</span> format <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Line Id: %s, Order Id: %s, Product: %s<span class=\"pl-pds\">\'</span></span>; \n        <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [format, <span class=\"pl-smi\">line</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">line</span>.<span class=\"pl-smi\">orderId</span>, <span class=\"pl-smi\">line</span>.<span class=\"pl-c1\">product</span>];\n        <span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>,args);\n    }    \n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/hasOne.js\">hasOne</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> Order <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_order<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> DeliveryAddress <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_deliveryAddress<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oOrderNo<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>orderNo<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">DeliveryAddress</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">DeliveryAddress</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dOrderId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>orderId<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">DeliveryAddress</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dName<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>name<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">DeliveryAddress</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dStreet<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>street<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> deliveryAddress_order_relation <span class=\"pl-k\">=</span> <span class=\"pl-smi\">DeliveryAddress</span>.<span class=\"pl-c1\">join</span>(Order).<span class=\"pl-en\">by</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>dOrderId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>order<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">hasOne</span>(deliveryAddress_order_relation).<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>deliveryAddress<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(getOrder)\n    .<span class=\"pl-en\">then</span>(printOrder)\n    .<span class=\"pl-en\">then</span>(printDeliveryAddress)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getOrder</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">getById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>b0000000-b000-0000-0000-000000000000<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printOrder</span>(<span class=\"pl-smi\">order</span>) {\n    <span class=\"pl-k\">var</span> format <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Order Id: %s, Order No: %s<span class=\"pl-pds\">\'</span></span>; \n    <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [format, <span class=\"pl-smi\">order</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">orderNo</span>];\n    <span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>,args);\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">deliveryAddress</span>; <span class=\"pl-c\">//this is a promise</span>\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printDeliveryAddress</span>(<span class=\"pl-smi\">address</span>) {\n    <span class=\"pl-k\">var</span> format <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>DeliveryAddress Id: %s, Order Id: %s, %s<span class=\"pl-pds\">\'</span></span>; \n    <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [format, <span class=\"pl-smi\">address</span>.<span class=\"pl-c1\">id</span>, <span class=\"pl-smi\">address</span>.<span class=\"pl-smi\">orderId</span>, <span class=\"pl-smi\">address</span>.<span class=\"pl-c1\">name</span>, <span class=\"pl-smi\">address</span>.<span class=\"pl-smi\">street</span>];\n    <span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>,args);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/compositeKeys.js\">composite keys</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> Order <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_compositeOrder<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> OrderLine <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_compositeOrderLine<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oCompanyId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">numeric</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>companyId<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oOrderNo<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">numeric</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>orderNo<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">OrderLine</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lCompanyId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">numeric</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>companyId<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">OrderLine</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lOrderNo<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">numeric</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>orderNo<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">OrderLine</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lLineNo<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">numeric</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lineNo<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">OrderLine</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lProduct<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>product<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> line_order_relation <span class=\"pl-k\">=</span> <span class=\"pl-smi\">OrderLine</span>.<span class=\"pl-c1\">join</span>(Order).<span class=\"pl-en\">by</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lCompanyId<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lOrderNo<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>order<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">hasMany</span>(line_order_relation).<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>lines<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(getOrder)\n    .<span class=\"pl-en\">then</span>(printOrder)\n    .<span class=\"pl-en\">then</span>(printLines)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">rollback</span>)\n    .<span class=\"pl-en\">then</span>(onOk, onFailed);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getOrder</span>() {\n    <span class=\"pl-k\">var</span> companyId <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>,\n        orderId <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1001</span>;\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">getById</span>(companyId, orderId);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printOrder</span>(<span class=\"pl-smi\">order</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Company Id: %s, Order No: %s<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">companyId</span>, <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">orderNo</span>)\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">order</span>.<span class=\"pl-smi\">lines</span>; <span class=\"pl-c\">//this is a promise</span>\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">printLines</span>(<span class=\"pl-smi\">lines</span>) {\n    <span class=\"pl-smi\">lines</span>.<span class=\"pl-en\">forEach</span>(printLine);\n\n    <span class=\"pl-k\">function</span> <span class=\"pl-en\">printLine</span>(<span class=\"pl-smi\">line</span>) {\n        <span class=\"pl-k\">var</span> format <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Company Id: %s, Order No: %s, Line No: %s, Product: %s<span class=\"pl-pds\">\'</span></span>; \n        <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [format, <span class=\"pl-smi\">line</span>.<span class=\"pl-smi\">companyId</span>, <span class=\"pl-smi\">line</span>.<span class=\"pl-smi\">orderNo</span>, <span class=\"pl-smi\">line</span>.<span class=\"pl-smi\">lineNo</span>, <span class=\"pl-smi\">line</span>.<span class=\"pl-c1\">product</span>];\n        <span class=\"pl-en\">console</span>.<span class=\"pl-smi\">log</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>,args);\n    }    \n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onOk</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Success<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Waiting for connection pool to teardown....<span class=\"pl-pds\">\'</span></span>);\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">onFailed</span>(<span class=\"pl-smi\">err</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Rollback<span class=\"pl-pds\">\'</span></span>);\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(err);\n}</pre></div>\n\n<p><a></a>\n<a href=\"https://github.com/alfateam/rdb-demo/blob/master/getByIdEager.js\">getById eagerly</a></p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> rdb <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>rdb<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> Customer <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_customer<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-k\">var</span> Order <span class=\"pl-k\">=</span> <span class=\"pl-smi\">rdb</span>.<span class=\"pl-en\">table</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>_order<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Customer</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>cName<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>name<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">primaryColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>id<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oOrderNo<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">string</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>orderNo<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-en\">column</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oCustomerId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">guid</span>().<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>customerId<span class=\"pl-pds\">\'</span></span>);\n<span class=\"pl-smi\">Order</span>.<span class=\"pl-c1\">join</span>(Customer).<span class=\"pl-en\">by</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>oCustomerId<span class=\"pl-pds\">\'</span></span>).<span class=\"pl-en\">as</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>customer<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> db <span class=\"pl-k\">=</span> <span class=\"pl-en\">rdb</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>postgres://postgres:postgres@localhost/test<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-smi\">db</span>.<span class=\"pl-en\">transaction</span>()\n    .<span class=\"pl-en\">then</span>(getOrderWithCustomer)\n    .<span class=\"pl-en\">then</span>(printOrder)\n    .<span class=\"pl-en\">then</span>(printCustomer)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-smi\">rdb</span>.<span class=\"pl-smi\">commit</span>)\n    .<span class=\"pl-en\">then</span>(<span class=\"pl-c1\">null</span>, <span class=\"p',1),(254,'Hackers do the Haka - Part 1','http://thisissecurity.net/2015/11/23/hackers-do-the-haka-part-1/',0,0,'\n					<p><span class=\"st\">Haka is an open source network security oriented language that allows writing security rules and protocol dissectors. In this first part of a two-part series, we will focus on writing security rules.</span></p>\n<h2>What is Haka</h2>\n<p>Haka is an open source security oriented language that allows specifying and applying security policies on live captured traffic. Haka is based on Lua. It is a simple, lightweight (~200 kB) and fast (a JiT compiler is available) scripting language.</p>\n<p>The scope of Haka is twofold. First of all, it enables the specification of security rules to filter unwanted streams and report malicious activities. Haka provides a simple API for advanced packet and stream manipulation. One can drop packets or create new ones and inject them. Haka also supports on-the-fly packet modification. This is one of the main features of Haka since all complex tasks such as resizing packets, setting correctly sequence numbers are done transparently to the user. This is done live without the need of a proxy.</p>\n<p>Secondly, Haka is endowed with a grammar allowing the specification of protocols and their underlying state machine. Haka supports both type of protocols : binary-based protocols (e.g. dns) and text-based protocols (e.g. http). The specification covers packet-based protocols such as ip as well as stream-based protocols like http.</p>\n<p>Haka is embedded into a modular framework. It includes several packet capture modules (pcap, nfqueue) that enable end users to apply their security policy on live captured traffic or to replay it on a packet trace file. The framework provides also logging (syslog) and alerting modules (syslog, elasticsearch). Alerts follow an IDMEF-like format. Finally, the framework has auxiliary modules such as a pattern matching engine and an instruction disassembler module. These modules allow writing fine-grained security rules to detect obfuscated malware for instance. Haka was designed in a modular fashion enabling users to extend it with additional modules.</p>\n<p><a href=\"https://thisiscybersec.files.wordpress.com/2015/10/arch.png\"><img class=\"aligncenter wp-image-248\" src=\"https://thisiscybersec.files.wordpress.com/2015/10/arch.png?w=450&amp;h=585\" alt=\"arch\" width=\"450\" height=\"585\" /></a></p>\n<h2>Haka Tool Suite</h2>\n<p>Haka provides a collection of four tools:</p>\n<ul><li><ul><li><strong>haka.</strong> It is the main program of the collection. It is intended to be used as a daemon to monitor packets in the background. Packets are dissected and filtered according to the specified security policy file. Haka takes as input a configuration file. For example, the following configuration sample file instructs Haka to capture packets from the interface eth0 using nfqueue module and to filter them using the policy file myrules.lua. This script file loads typically user-defined or built-in protocol dissectors and defines a set of security rules. Additionally, users can select the alerting and reporting module to be used and set some specific module options:\n<pre class=\"brush: xml; title: ; notranslate\" title=\"\">\r\n[general]\r\n# Select the haka configuration file to use\r\nconfiguration = \"myrules.lua\"\r\n\r\n# Optionally select the number of thread to use\r\n# By default, all system thread will be used\r\n#thread = 4\r\n\r\n[packet]\r\n# Select the capture model, nfqueue or pcap\r\nmodule = \"packet/nfqueue\"\r\n\r\n# Select the interfaces to listen to\r\n#interfaces = \"any\"\r\ninterfaces = \"eth0\"\r\n\r\n# Select packet dumping for nfqueue\r\n#dump = yes\r\n#dump_input = \"/tmp/input.pcap\"\r\n#dump_output = \"/tmp/output.pcap\"\r\n\r\n[log]\r\n# Select the log module\r\nmodule = \"log/syslog\"\r\n\r\n# Set the default logging level\r\n#level = \"info,packet=debug\"\r\n\r\n[alert]\r\n# Select the alert module\r\nmodule = \"alert/syslog\"\r\n#module = \"alert/file\"\r\n#module = \"alert/elasticsearch\"\r\n\r\n# Disable alert on standard output\r\n#alert_on_stdout = no\r\n</pre>\n</li>\n<li><strong>hakactl.</strong> This tool allows controling a running Haka daemon. One can get live statistics on captured packets, inspect logs or simply shutdown/restart the daemon.</li>\n<li><strong>hakapcap.</strong> This tool allows replaying a policy file offline on a packet capture trace using the pcap module. For instance, this is useful to perform network forensics.</li>\n<li><strong>hakabana. </strong>This tool allows visualizing and monitoring network traffic in real time using Kibana and Elasticsearch. Hakabana consists in a set of custom security rules that pushes information about the traffic that passes though Haka on an elastisserach server and made them available through a Kibana dashboard. An additional dashboard is also available to visualize Haka alerts.</li>\n</ul></li></ul><p><a href=\"https://thisiscybersec.files.wordpress.com/2015/10/kibana_ips.png\"><img class=\"wp-image-255 size-medium alignleft\" src=\"https://thisiscybersec.files.wordpress.com/2015/10/kibana_ips.png?w=300&amp;h=145\" alt=\"Kibana dashboard to visualize alerts\" width=\"300\" height=\"145\" /></a><a href=\"https://thisiscybersec.files.wordpress.com/2015/10/hakabana_dashboard.png\"><img class=\"wp-image-256 size-medium alignnone\" src=\"https://thisiscybersec.files.wordpress.com/2015/10/hakabana_dashboard.png?w=300&amp;h=147\" alt=\"Kibana dashboard to monitor network trafic\" width=\"300\" height=\"147\" /></a></p>\n<h2>Writing security rules</h2>\n<p>Haka provides a simple way to write security rules in order to filter, modify, create and inject packets and streams. When a flow is detected as malicious, users can report an alert or drop the flow. Users can define even more complex scenarios to mitigate the impact of an attack. For instance, one can alter http requests to force obsolete browsers to update or forge specific packets to fool scanning port tools.</p>\n<h4>Packet Filtering</h4>\n<p>The following rule is a basic packet filtering rule that blocks all connections from a given network address.</p>\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\r\nlocal ipv4 = require(\"protocol/ipv4\")\r\nlocal tcp = require(\"protocol/tcp_connection\")\r\n\r\nlocal net = ipv4.network(\"192.168.101.0/24\")\r\n\r\nhaka.rule{\r\n    hook = tcp.events.new_connection,\r\n    eval = function (flow, pkt)\r\n        haka.log(\"tcp connection %s:%i -&gt; %s:%i\",\r\n            flow.srcip, flow.srcport,\r\n            flow.dstip, flow.dstport)\r\n\r\n        if net:contains(flow.dstip) then\r\n            haka.alert{\r\n                severity = \"low\",\r\n                description = \"connection refused\",\r\n                start_time = pkt.ip.raw.timestamp\r\n            }\r\n            flow:drop()\r\n        end\r\n    end\r\n}\r\n</pre>\n<p>The first lines load the required protocol dissectors, namely, ipv4 and tcp connection dissectors. The first one handles ipv4 packets. The latter is a stateful tcp dissector that maintains a connection table and manages tcp streams. The next line, defines the network address that must be blocked.</p>\n<p>The security rule is defined through <em>haka.rule</em> keyword. A security rule is made of a <em>hook</em> and a evaluation function <em>eval.</em> The <em>hook</em> is an event that will trigger the evaluation of the security rule. In this example, the security rule will be evaluated at each tcp connection establishment attempt. The parameters passed to the evaluation function depend on the event. In the case of <em>new_connection</em> event, <em>eval</em> takes two parameters: <em>flow</em> and <em>pkt.</em> The first one holds details about the connection and the latter is a table containing all tcp (and lower layer) packet fields.</p>\n<p>In the core of the security rule, we log <em>(haka.log)</em> first some information about the current connection. Then, we check if the source address  belongs to the range of non-authorized IP addresses defined previously. If this test succeeds, we raise an alert <em>(haka.alert)</em> and drop the connection.  Note that we reported only few details in the alert. One can add more information such as the source and the targeted service.</p>\n<p>We use <em>hakapcap</em> tool to test our <a href=\"https://thisiscybersec.files.wordpress.com/2015/11/filter.zip\">rule filter.lua on a pcap trace file filter.pcap</a>:</p>\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\r\n$ hakapcap filter.lua filter.pcap\r\n</pre>\n<p>Hereafter, is the output of Haka which dumps some info about loaded dissectors and registered rules. The output shows that Haka succeeded to block connections targeting 192.168.101.62 address:</p>\n<p><a href=\"https://thisiscybersec.files.wordpress.com/2015/11/filter.png\"><img class=\"aligncenter wp-image-362\" src=\"https://thisiscybersec.files.wordpress.com/2015/11/filter.png?w=600&amp;h=306\" alt=\"filter\" width=\"600\" height=\"306\" /></a></p>\n<p>In the above example, we have defined a single rule to block connections. One can write a complete firewall-like rule set using the <em>haka.group </em>keyword. In this configuration case, one can choose a default behavior (e.g. block all connections) if none of the security rule belonging to the group explicitly authorizes the traffic.</p>\n<h4>Packet Injection</h4>\n<p>In Haka, one can create new packets and inject them. The following rule crafts an RST packet in order to fool a Xmas nmap scan. As as result, nmap will conclude that all ports are closed on target side.</p>\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\r\nraw = require(\"protocol/raw\")\r\nipv4 = require(\"protocol/ipv4\")\r\ntcp = require(\"protocol/tcp\")\r\n\r\nhaka.rule {\r\n    hook = tcp.events.receive_packet,\r\n    eval = function(pkt)\r\n        local flags = pkt.flags\r\n        -- test for xmas nmap scans\r\n        if flags.fin and flags.psh and flags.urg then\r\n            -- raw packet\r\n            local rstpkt = raw.create()\r\n\r\n            -- ip packet\r\n            rstpkt = ipv4.create(rstpkt)\r\n            rstpkt.ttl = pkt.ip.ttl\r\n            rstpkt.dst = pkt.ip.src\r\n            rstpkt.src = pkt.ip.dst\r\n\r\n            -- tcp packet\r\n            rstpkt = tcp.create(rstpkt)\r\n            rstpkt.srcport = pkt.dstport\r\n            rstpkt.dstport = pkt.srcport\r\n            rstpkt.flags.rst = true\r\n            rstpkt.flags.ack = true\r\n            rstpkt.ack_seq = pkt.seq + 1\r\n\r\n            -- inject forged packet and\r\n            -- drop malicious scanning packet\r\n            rstpkt:send()\r\n            pkt:drop()\r\n        end\r\n    end\r\n}\r\n</pre>\n<h4>Packet Altering</h4>\n<p>Packet modification is one of the most advanced feature of Haka. Haka handles automatically all internal modifications at stream and packet level: resizing and fragmenting packets, resetting sequence numbers, etc. The following example shows how easy it is to access and modify protocol fields. This rule alters some headers of http protocol. More precisely, the <em>user-agent</em> header will be modified (or added to the list of headers if not set), and the <em>accept-encoding</em> header will be removed.</p>\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\r\nlocal http = require(\"protocol/http\")\r\n\r\nhttp.install_tcp_rule(80)\r\n\r\nhaka.rule{\r\n    hook = http.events.request,\r\n    eval = function (flow, request)\r\n        request.headers[\"User-Agent\"] = \"HAKA User Agent\"\r\n        request.headers[\"Accept-Encoding\"] = nil\r\n    end\r\n}\r\n</pre>\n<p><a href=\"https://www.paulfariello.fr/assets/blurring-the-web.lua\">blurring-the-web</a> and <a href=\"https://thisiscybersec.files.wordpress.com/2015/11/inject-ponies.zip\">inject_ponies</a> are funny scripts that alter http response traffic in order to blur and pollute (inject garbage) requested web pages, respectively:</p>\n<p><a href=\"https://thisiscybersec.files.wordpress.com/2015/11/blur.png\"><img class=\"size-medium wp-image-348 alignleft\" src=\"https://thisiscybersec.files.wordpress.com/2015/11/blur.png?w=300&amp;h=160\" alt=\"blur\" width=\"300\" height=\"160\" /></a><a href=\"https://thisiscybersec.files.wordpress.com/2015/11/ponies.png\"><img class=\"alignnone size-medium wp-image-347\" src=\"https://thisiscybersec.files.wordpress.com/2015/11/ponies.png?w=300&amp;h=160\" alt=\"ponies\" width=\"300\" height=\"160\" /></a></p>\n<h4>Stream Filtering</h4>\n<p>Before presenting stream filtering, we will present first how Haka manages packets and streams internally. In Haka, all packets and streams are represented by virtual buffers (see figure below). Virtual buffers are a unified view of non-adjacent blocks of memory. They allow an easy and efficient modification of memory data. Virtual buffers use scattered lists to represent non-contiguous chunks which avoids allocating and copying superfluous block of memory. Haka provides iterators to navigate through these blocks of memory. These iterators could be blocking which would enable some functions to suspend and then resume transparently their execution when more data is available on the stream for instance.</p>\n<p><a href=\"https://thisiscybersec.files.wordpress.com/2015/11/vbuffer.png\"><img class=\"aligncenter wp-image-323 size-full\" src=\"https://thisiscybersec.files.wordpress.com/2015/11/vbuffer.png?w=700\" alt=\"vbuffer\" /></a>The following rule collects http streams and dumps them on stdout. This rule is equivalent to the “follow tcp stream” feature of Wireshark.</p>\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\r\nlocal ipv4 = require(\'protocol/ipv4\')\r\nlocal tcp_connection = require(\'protocol/tcp_connection\')\r\n\r\nhaka.rule{\r\n    hook = tcp_connection.events.receive_data,\r\n        options = {\r\n            streamed = true\r\n        },\r\n    eval = function (flow, iter, dir)\r\n        local data = flow.ccdata or {}\r\n        flow.ccdata = data\r\n\r\n        while iter:wait() do\r\n            data[#data+1] = iter:sub(\'available\'):asstring()\r\n        end\r\n        haka.log(\"%s -&gt; %s:\\n\", flow.srcip, flow.dstip)\r\n        io.write(table.concat(data))\r\n     end\r\n}\r\n</pre>\n<h4>Interactive Packet Filtering</h4>\n<blockquote><p>Wait, it’s like gdb but for packets !! – Anonymous Haka user</p></blockquote>\n<p>This is my favorite feature of Haka. It allows inspecting the traffic packet per packet. All the magic starts with the following rule which will prompt a shell for each http POST request.</p>\n<pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\r\nlocal http = require(\"protocol/http\")\r\n\r\nhttp.install_tcp_rule(80)\r\n\r\nhaka.rule {\r\n    hook = http.events.request_data,\r\n    eval = function (http, data)\r\n        haka.interactive_rule(\"interactive mode\")(http, data)\r\n    end\r\n}\r\n\r\nhaka.rule {\r\n    hook = http.events.request,\r\n    eval = function (http, request)\r\n        http:enable_data_modification()\r\n    end\r\n}\r\n</pre>\n<p>The shell gives access to the full Haka API to play with packet content: accessing and modifying packet fields, dropping packets, logging suspicious events, alerting, etc. The Lua console supports auto-completion and therefore is a good starting point to dive into the Haka API.</p>\n<p>As shown by the following output, Haka breaks on the first POST request. Http data are available through the <em>inputs</em> variable. In this example, we alter the user credentials on the fly.</p>\n<p><a href=\"https://thisiscybersec.files.wordpress.com/2015/11/interactive.png\"><img class=\"aligncenter wp-image-361\" src=\"https://thisiscybersec.files.wordpress.com/2015/11/interactive.png?w=650&amp;h=537\" alt=\"interactive\" width=\"650\" height=\"537\" /></a></p>\n<p>Note that it is best to use the interactive rule on pcap files as the edition will add a substantial delay.</p>\n<h4>Advanced Stream Filtering</h4>\n<p>Haka features a pattern matching engine and disassembler modules. These two modules are stream-based which enables us to detect a malicious payload scattered over multiple packets for instance. The following rule, uses a regular expression to detect a nop sled. We enable the streamed option which means that the matching function will block and wait for data to be available to proceed with matching. If a nop sled is detected, we raise an alert and dump the shellcode instruction. Note that the pattern matching function updates the iterator position which points afterwards to the shellcode.</p>\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\r\nlocal tcp = require(\"protocol/tcp_connection\")\r\n\r\nlocal rem = require(\"regexp/pcre\")\r\nlocal re = rem.re:compile(\"%x90{100,}\")\r\n\r\nlocal asm = require(\"misc/asm\")\r\nlocal dasm = asm.new_disassembler(\"x86\", \"32\")\r\n\r\nhaka.rule{\r\n    hook = tcp.events.receive_data,\r\n        options = {\r\n            streamed = true,\r\n    },\r\n    eval = function (flow, iter, direction)\r\n        if re:match(iter, false) then\r\n            -- raise an alert\r\n            haka.alert{\r\n                description = \"nop sled detected\",\r\n            }\r\n            -- dump instructions following nop sled\r\n            dasm:dump_instructions(iter)\r\n        end\r\n    end\r\n}\r\n</pre>\n<p>Replaying this rule on the well-known <a href=\"https://www.honeynet.org/node/504\">network forensic challenge</a> results on the following output. More details about disassembling network traffic into instruction are available <a href=\"http://www.haka-security.org/blog/2015/06/23/instruction-disassembly.html\">here</a>.</p>\n<p><a href=\"https://thisiscybersec.files.wordpress.com/2015/11/asm.png\"><img class=\"aligncenter wp-image-358\" src=\"https://thisiscybersec.files.wordpress.com/2015/11/asm.png?w=600&amp;h=410\" alt=\"asm\" width=\"600\" height=\"410\" /></a></p>\n<h4>To be continued …</h4>\n<h4>Links</h4>\n<div class=\"sharedaddy sd-like-enabled sd-sharing-enabled\"><div class=\"sharedaddy sd-sharing-enabled\"><div class=\"robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing\"><h3 class=\"sd-title\">Share this:</h3></div></div><div class=\"sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded\"><h3 class=\"sd-title\">Like this:</h3><p><span class=\"button\"><span>Like</span></span> <span class=\"loading\">Loading...</span></p><span class=\"sd-text-color\"></span><a class=\"sd-link-color\"></a></div>\n<p>\n	</p><h3 class=\"jp-relatedposts-headline\"><em>Related</em></h3>\n</div>									',1),(255,'with â€” Organize Complex Queries','https://modern-sql.com/feature/with',0,0,'\n<p>In imperative programming it is common practice to group instructions in small and easily comprehensible units—namely functions or methods. Often to enable code reuse but also to improve readability.</p>\n<p>Even though SQL has functions and procedures too, they are not the primary tool to make complex SQL queries comprehensible or to enable code reuse. In SQL neither functions nor procedures are <a href=\"https://en.wikipedia.org/wiki/First-class_citizen\">first-class citizens</a> they way sub-queries are.</p>\n<p>In SQL the building block of programs are queries—not instructions. Consequently, SQL has views to store queries natively so they can be reused.</p>\n<p>In addition, SQL:1999 introduced the <code class=\"command\">with</code> clause to define “views” within queries. These <code class=\"command\">with</code>-queries are only visible in a single statement and can thus be used to improve the structure of this statement without polluting the global namespace.</p>\n<p>The <code class=\"command\">with</code> feature is also known as <em>common table expression (CTE)</em> and <em>sub-query factoring</em>. Note that the <code class=\"command\">recursive</code> from of the <code class=\"command\">with</code> clause is covered in <a href=\"https://modern-sql.com/coming-up#feature-with-recursive\">another article</a>.</p>\n<h2>Syntax</h2>\n<p><code class=\"command\">with</code> is a prefix to the <code class=\"command\">select</code> keyword:</p>\n<pre><code>WITH query_name (column_name1, ...) AS\n     (SELECT ...)\n     \nSELECT ...</code></pre>\n<p>The syntax following <code class=\"command\">with</code> is the same as for <code class=\"command\">create view</code>: it starts with the <em>query name</em> and optionally in parenthesis the name of the columns it returns. The <code class=\"command\">as</code> keyword finally introduces the definition itself (the query)—again in parentheses.</p>\n<p><code class=\"command\">With</code> is not a stand alone command like <code class=\"command\">create view</code> is: it must be followed by <code class=\"command\">select</code>. This query (and sub-queries it contains) can refer to the just defined query name in their <code class=\"command\">from</code> clause.</p>\n<p>A single <code class=\"command\">with</code> clause can introduce multiple query names by separating them with a comma (the <code class=\"command\">with</code> keyword itself is not repeated). Each of these queries can refer to the query names previously defined within the same <code class=\"command\">with</code> clause (but see <a href=\"https://modern-sql.com/feature/with#compatibility\">Compatibility</a>):</p>\n<pre><code>WITH query_name1 AS (\n     SELECT ...\n     )\n<em>   , query_name2 AS (\n     SELECT ...\n       FROM query_name1\n        ...\n     )</em>\nSELECT ...</code></pre>\n<p>Query names defined using <code class=\"command\">with</code> mask existing tables or views with the same name.</p>\n<h2>Performance Considerations</h2>\n<p>Normally, databases handle <code class=\"command\">with</code>-queries like they handle views: they substitute the reference to the query by its definition and then optimize and execute the overall query.</p>\n<p>The PostgreSQL database is different in this regard (as of 9.5): it treads the <code class=\"command\">with</code> clause as <a href=\"http://blog.2ndquadrant.com/postgresql-ctes-are-optimization-fences/\">optimization fence</a>. The queries inside the <code class=\"command\">with</code> clause are optimized (planned) in isolation. This can have a significant performance impact as compared to sub-queries directly written into the <code class=\"command\">from</code> clause.</p>\n<p>The SQL standard does not define how to optimize querys—both approaches are conforming.</p>\n<h2>Use Cases</h2>\n<h2>Compatibility</h2>\n<p>The <code class=\"command\">with</code> clause was introduced with <a href=\"https://modern-sql.com/standard\">SQL:1999</a> as a set of <a href=\"https://modern-sql.com/standard/levels\">optional features</a>. Leaving the <code class=\"command\"><a href=\"https://modern-sql.com/coming-up#feature-with-recursive\">recursive</a></code> variant aside, the features are T121 for top-level <code class=\"command\">with</code> clauses and T122 for <code class=\"command\">with</code> clauses in sub-queries.</p>\n<p>The basic functionality of <code class=\"command\">with</code> is well-supported. The single area where products behave differently is name resolution. It is especially notable that <code class=\"command\">with</code> is often treated like <a href=\"https://modern-sql.com/coming-up#feature-with-recursive\"><code class=\"command\">with recursive</code></a>. The more subtle incompatibilities are related to qualified table names (<code>schema.table</code> cannot refer to a <code class=\"command\">with</code> query) and views used in the scope of <code class=\"command\">with</code>-queries (the query inside the view does not “see” the outer <code class=\"command\">with</code> clause).</p>\n\n<h2>Conforming Alternatives</h2>\n<p>Some use cases can be implemented using views. However, this can quickly lead to an unreasonable number of views (“namespace pollution”). In those cases sub-queries are often the better option.</p>\n<h2>Proprietary Extensions</h2>\n<h3>PostgreSQL: Writeable CTEs</h3>\n<p>Starting with 9.1 the PostgreSQL database supports DML statements (<code class=\"command\">insert</code>, <code class=\"command\">update</code>, <code class=\"command\">delete</code>) within the body of <code class=\"command\">with</code>-queries (<a href=\"http://www.postgresql.org/docs/9.5/static/queries-with.html#QUERIES-WITH-MODIFYING\">docs</a>). When using the (also proprietary) <code class=\"command\">returning</code> clause of the DML statement, the <code class=\"command\">with</code>-query actually returns data (e.g, the just inserted rows).</p>\n<h3>Oracle: Functions in <code class=\"command\">with</code></h3>\n<p>The Oracle Database support function and procedure declarations within the <code class=\"command\">with</code> clause since version 12cR1 (<a href=\"http://docs.oracle.com/database/121/SQLRF/statements_10002.htm#i2066378\">docs</a>).</p>\n',1),(256,'High Paying, Low-Stress Jobs','http://www.osoti.net/uncategorized/high-paying-low-stress-jobs/',0,0,'\n\n        <div class=\"td-post-featured-image\"><a href=\"http://www.osoti.net/wp-content/uploads/2015/11/gjghjgjh.jpg\"><img width=\"624\" height=\"350\" class=\"entry-thumb td-modal-image\" src=\"http://www.osoti.net/wp-content/uploads/2015/11/gjghjgjh.jpg\" alt=\"\" title=\"gjghjgjh\" /></a></div>\n        \n  \n\n\n\n  \n\n<p>We’ve all had days where we though, “I need a new job” well, with the right education and perseverance, you too could get a career in one of these ranked “High Paying, Low Stress” jobs. The List below is in order based on the Stress rate percentage. This number has been determined by averaging the stress level of people employed in these fields. The pays all range in the high $90,000 to a little above $200,000, which is nice and this includes the national median of these jobs (including bonuses, profit sharing, commissions, and other added income). Of course, the more you make can definitely influence your stress, at a certain point; but, the jobs listed below are careers and do not include entrepreneurs or self-employed individuals.</p>\n\n<p><strong>Senior Product Marketing Manager  –  47%, $116,000</strong><br />Essentially, this job requires you to sell products or run a team that sells products. To sell the products you must use multiple forms of marketing and advertising, both traditional or through new technology. Also, this job requires some brand recognition and trend following to know exactly how to get the products off the shelves.</p>\n<p><strong>Principal Scientist  –  48%, $117,000</strong><br />Unlike most science careers, this one requires only a bachelors degree in a scientific field. This job requires you, or a team you are in, to focus on methods of improving whatever organization you are working for or under. This improvement is achieved through: planning, research, tests and discussion.</p>\n<p><strong>Principal Software Engineer  –  48%, $115,000</strong><br />This job generally is done by independent freelancers. Their principle purpose is to oversee research into new technologies and component design. They design, develop and test new software and oversee system integration at organizations.</p>\n<p><strong>Materials Scientists  –  53%, $94,350</strong><br />Everything around is made up of atoms. A material scientist’s job is to study different products at a molecular and atomic level and test reactions between different products; and with this knowledge, they can develop safer and cheaper products.</p>\n<p><strong>Patent Attorney  –  54%, $146,000</strong><br />This career does require a lot of education – generally a law degree and a technical degree. The purpose behind this career is to protect intellectual property and the owners of these concepts.</p>\n<p><strong>Geophysicist  –  56%, $105,000</strong><br />Geophysicist job is to study the Earth around us, including: Tectonic plates, Gravity, magnetism, and any geological activity. One perk of this job is a lot of major areas of study are tropical regions, such as Hawaii.</p>\n<p><strong>Food Scientist  –  55.8%, $66,870</strong><br />This job is extremely important to ensure that our food production is continuing in the right direction.</p>\n<p><strong>Mathematician  –  57.3%, $104,350</strong><br />Despite how many feel, Math is an important subject in our busy world. A mathematicians job is to apply complicated math techniques for many different fields, to ensure proper methods.</p>\n<p><strong>Petroleum Engineer  –  59%, $130,000</strong><br />This career is extremely important, especially in the United States with over 250 millions cars on the road. This job designs and develops new methods of extracting the maximum amount of fossil fuels possible.</p>\n<p><strong>Data Scientist, IT  –  59%, $105,000</strong><br />With an ever-expanding world online, this career is important because they find ways to analyze and manage large amounts of data.</p>\n<p><strong>Political Scientist  –  60.8%, $104,000</strong><br />Political Science is a study that is constantly changing; this field studies the origin, operations and developments of political systems throughout history and currently.</p>\n<p><strong>Physicist  –  61.3%, $117,300</strong><br />This career does require a Ph.D., which may seem like a lot of work, but, the career itself has one main goal – to conduct research and develop theories to explain phenomena around us.</p>\n<p><strong>User Experience Researcher  –  62%, $99,300</strong><br />This career is important because it allows websites, stores, products and ideas to be presented in a understandable way, to allow customers to experience and enjoy the product.</p>\n<p><strong>Astronomer  –  62%, $107,140</strong><br />This job requires a Ph.D. in the field, however, it is extremely important for our not-so-distant-future. This career observes and researches what we already know about space around us to provide humanity with the knowledge of what is going on around us, even if we are just barely physically exploring outside of Earth’s boundaries.</p>\n<p><strong>Law Teacher  –  62.8%, $126,270</strong><br />This job requires a bachelors degree and law degrees; but, this job is relatively simple. This job has you teach courses in Law, generally focusing on the extremely important and unchanging court cases/laws.</p>\n<p><strong>Actuary  –  63%, $97,700</strong><br />This job requires a bachelor’s degree and a few exams to become certified. The purpose of this job is to analyze financial risks and make guesses of spending.</p>\n<p><strong>Economist  –  63.3%, $105,290</strong><br />This job requires a bachelors in Economics, generally. This job studies the production and distribution of resources and goods.</p>\n<p><strong>Statistician  –  64%, $84,010</strong><br />This Career requires a lot of math and, generally, a graduate degree. The principle concept of this career is to use statistical methods to collect and analyze data and help solve real-world problems in business, engineering, the sciences, or other fields.</p>\n<p><strong>Computer and Information Systems Manager  –  64.3%, $136,280</strong><br />This job is important in modern changing world, and only requires a bachelors degree. This job requires one to determine what technological needs are implemented for specific businesses.</p>\n<p><strong>Applications Software Developer  –  65%, $99,530</strong><br />This career choice requires a lot of computer knowledge, however, if you get good enough at it, you can set your own rate and hours. This job requires you to develop and modify computer applications with knowledge of computer programming skills.</p>\n<p><strong>Reservoir Engineer  –  66%, $136,000</strong><br />This job requires someone to determine the yield, production and value of oil fields to determine value and longevity of extraction.</p>\n<p><strong>Computer Hardware Engineer  –  67%, $110,650</strong><br />This job requires a bachelors degree and computer knowledge. This job requires one to research, design, develop, or test computer or computer-related equipment for commercial, industrial, military, or scientific use.</p>\n<p><strong>Marine Engineer and Naval Architect  –  67%, $99,160</strong><br />This job requires some to work on all aspects of ships and naval equipment, This includes: designing, stability, maintenance, propulsion and steering.</p>\n<p><strong>Orthodontist  –  67%, $201,030</strong><br />This career requires a bachelors degree, four years of dental school and residency training. This job helps fix misaligned teeth and dental abnormalities.</p>\n<p><strong>Art Director  –  69%, $97, 850</strong><br />This career handles the visual section on magazines, newspapers, product packaging, advertisement and any other source of media.</p>\n<p><strong>Optometrist  –  70.3%, $113,010</strong><br />This career requires a bachelors degree, a four year optometry program and a license. This job examines, diagnosis and corrects any visual problems.</p>\n<p>Source: <a href=\"http://jobs.aol.com/articles/2015/03/27/high-paying-low-stress-jobs/\">http://jobs.aol.com/articles/2015/03/27/high-paying-low-stress-jobs/</a>, <a href=\"http://career-advice.monster.com/salary-benefits/salary-information/low-stress-100k-jobs/article.aspx\">http://career-advice.monster.com/salary-benefits/salary-information/low-stress-100k-jobs/article.aspx</a></p>\n<h3>Comments</h3><p> comments</p>        ',1),(257,'kasketis/netfox','https://github.com/kasketis/netfox',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://raw.githubusercontent.com/kasketis/netfox/master/assets/netfox_logo.png\"><img src=\"https://raw.githubusercontent.com/kasketis/netfox/master/assets/netfox_logo.png\" alt=\"\" /></a></p>\n\n<p>A lightweight, one line setup, network debugging library that provides a quick look on all executed network requests performed by your app.\nIt grabs all requests - of course yours, requests from 3rd party libraries (such as AFNetworking or else), UIWebViews, and more</p>\n\n<p>Very useful and handy for network related issues and bugs</p>\n\n<p>Implemented in Swift 2.1 - bridged also for Objective-C</p>\n\n<p>Feel free to contribute :)</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kasketis/netfox#overview\"><span class=\"octicon octicon-link\"></span></a>Overview</h4>\n\n<p><a href=\"https://raw.githubusercontent.com/kasketis/netfox/master/assets/overview.gif\"><img src=\"https://raw.githubusercontent.com/kasketis/netfox/master/assets/overview.gif\" alt=\"\" /></a></p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kasketis/netfox#installation\"><span class=\"octicon octicon-link\"></span></a>Installation</h4>\n\n<p>Insert this line in your Podfile</p>\n\n<pre>pod \'netfox\'\n</pre>\n\n<p>or if you want to do it manually just copy the \"netfox\" folder in your project (make sure that \"Create groups\" option is selected)</p>\n\n<p>Then add the following line in didFinishLaunchingWithOptions: method of your AppDelegate</p>\n\n<p>Swift</p>\n\n<pre>NFX.sharedInstance().start()\n</pre>\n\n<p>Objective-C</p>\n\n<pre>[[NFX sharedInstance] start];\n</pre>\n\n<p>Just simple as that!</p>\n\n<p>Note: Please wrap the above line with</p>\n\n<pre>#if DEBUG\n. . .\n#endif\n</pre>\n\n<p>to prevent library’s execution on your production app.</p>\n\n<p>You can add the DEBUG symbol with the -DDEBUG entry. Set it in the \"Swift Compiler - Custom Flags\" section -&gt; \"Other Swift Flags\" line in project’s \"Build Settings\"</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kasketis/netfox#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h4>\n\n<p>Just shake your device and check what\'s going right or wrong! \nShake again and go back to your app! fact\n<a href=\"https://raw.githubusercontent.com/kasketis/netfox/master/assets/shake.png\"><img src=\"https://raw.githubusercontent.com/kasketis/netfox/master/assets/shake.png\" alt=\"\" /></a></p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kasketis/netfox#custom-gestures\"><span class=\"octicon octicon-link\"></span></a>Custom gestures</h4>\n\n<p>By default the library registers for shake motion. If you want to open the logs with a different gesture, add the following line after the installation one</p>\n\n<pre>NFX.sharedInstance().setGesture(.custom)\n</pre>\n\n<p>Then you can use</p>\n\n<pre>NFX.sharedInstance().show()\n</pre>\n\n<p>when you want to show the logs and</p>\n\n<pre>NFX.sharedInstance().hide()\n</pre>\n\n<p>when you want to hide them.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kasketis/netfox#prevent-logging-for-specific-urls\"><span class=\"octicon octicon-link\"></span></a>Prevent logging for specific URLs</h4>\n\n<p>Use the following method to prevent requests for specified URL from being logged. You can ignore as many URLs as you want</p>\n\n<pre>NFX.sharedInstance().ignoreURL(\"the_url\")\n</pre>\n\n<p>Tip: You can use the url of the host (for example \"<a href=\"https://www.github.com\">https://www.github.com</a>\") to ignore all paths of it </p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/kasketis/netfox#features\"><span class=\"octicon octicon-link\"></span></a>Features</h4>\n\n<ul><li>Search: You can easily search among requests via\n\n<ul><li>Request url: github.com, .gr, or whatever you want</li>\n<li>Request method: GET, POST, etc</li>\n<li>Response type: Like json, xml, html, image and more </li>\n</ul></li>\n<li>Sharing: You can share your log via email with backend devs or someone who can help.\n\n<ul><li>Simple log option includes only request/response headers and small request/response bodies (when applicable)</li>\n<li>Full log option includes request/response headers and request/response bodies (as attachments)</li>\n</ul></li>\n<li>More to come.. ;)</li>\n</ul><h4><a class=\"anchor\" href=\"https://github.com/kasketis/netfox#other\"><span class=\"octicon octicon-link\"></span></a>Other</h4>\n\n<ul><li>Alamofire users check <a href=\"https://github.com/kasketis/netfox/blob/master/Workarounds.md#alamofire-workaround\">this</a></li>\n<li>If you can\'t log request body check <a href=\"https://github.com/kasketis/netfox/blob/master/Workarounds.md#no-http-body-for-requests\">this</a></li>\n<li>Due to the large size of request/response bodies, the library provides disk storage for low memory overhead</li>\n</ul><h4><a class=\"anchor\" href=\"https://github.com/kasketis/netfox#licence\"><span class=\"octicon octicon-link\"></span></a>Licence</h4>\n\n<p>All source code is licensed under <a href=\"https://github.com/kasketis/netfox/blob/master/LICENSE\">MIT License</a>. Which means you could do virtually anything with the code. I will appreciate it very much if you keep an attribution where appropriate.</p>\n',1),(258,'Core Technology: Signals | Linux Voice','http://www.linuxvoice.com/core-technology-signals/',0,0,'\n<p class=\"Body-Intro\"><span class=\"_idGenDropcap-1\">I</span>n the world of Linux system programming, a signal is an event that’s delivered to a process by the kernel. A signal says to the process “something has happened that you might want to respond to”. A few signals are generated as a result of something that the program itself is doing (usually something bad), but most of them originate from sources external to the program itself.</p>\n<p class=\"Body-Indent\">Why do you need to know about signals? Well, they’re important to a system administrator because they provide a way to interact with running processes (in particular, to kill them). And the most important single reason that a developer needs to be aware of signals is so that he knows how to write programs that ignore them. But there are more useful things you can do with signals, as we’ll see.</p>\n<p class=\"Body-Indent\">There are several different types of signal. If you’re running a <span class=\"CharOverride-1\">Bash </span>shell, the built-in command <span class=\"CharOverride-2\">kill -l</span> will show you a list of them. It’s a slightly scary list but you don’t need to know about most of them, and here we’re going to focus on the 10 or so you’re most likely to use. </p>\n<div class=\"box-side\">\n\n<p><a href=\"http://www.linuxvoice.com/wp-content/uploads/2015/10/ct1-large1.png\"><img alt=\"Image\" src=\"http://www.linuxvoice.com/wp-content/uploads/2015/10/ct1-small1.png\" /></a>\n</p></div>\n<p class=\"Crosshead\"><span class=\"CharOverride-3\">SIGHUP</span></p>\n<p class=\"Body-No-Indent\">This signal has an interesting history. The “HUP” stands for “hang up” and it harks back to the days when telephones hung on a hook on the wall and you would terminate a call by hanging up the phone. The scenario went like this: Dennis was logged into his PDP11 computer via a dial-up line and a modem. Without logging off, he simply “hung up” the connection. Later, Ken dialled in to the same modem, thus finding himself connected to Dennis’s abandoned shell. To prevent this undesirable state of affairs, the device driver for the modem would detect the loss of carrier when Dennis hung up and deliver a SIGHUP signal to terminate the shell session.</p>\n<p class=\"Body-Indent\">Well, dial-up logins are history now, and SIGHUP was looking forward to a peaceful retirement when it was offered a new job. Nowadays, SIGHUP is interpreted by some daemons to mean “your configuration file has been changed, please go and re-read it”. One example is the system logging daemon (<span class=\"CharOverride-2\">syslog </span>or <span class=\"CharOverride-2\">rsyslog</span>) which re-reads the config file <span class=\"CharOverride-2\">/etc/syslog.conf </span>(or <span class=\"CharOverride-2\">/etc/rsyslog.conf</span>) on startup and on receipt of a SIGHUP. In some cases the daemon simply stops and restarts when it receives this signal.</p>\n<p class=\"Crosshead\">SIGINT</p>\n<p class=\"Body-No-Indent\">This is the signal that is sent to a foreground process by the terminal driver when you enter ^C on the terminal. By default, programs will terminate when they receive this signal. Some programs, especially ones that operate interactively, choose to ignore this signal.</p>\n<div class=\"box-side\">\n\n<p class=\"Boxout-Copy-No-Indent\">Some languages support exception handling, typically with keywords like “try”, “catch” and “throw”. For example, if you try to open a file for writing and don’t have write permission, in some environments the runtime will throw an exception that you can choose to catch in order to handle the error. We mention this because this is NOT what signals do. You can (to a very limited extent) install exception handling of a sort by catching signals like SIGFPE, but failed system calls and library routine calls do not throw exceptions; they return -1 (or sometimes a null pointer) to indicate failure and you need to explicitly test the return value to detect this.</p>\n</div>\n<p class=\"Crosshead\"><span class=\"CharOverride-3\">SIGTERM</span></p>\n<p class=\"Body-No-Indent\">This is conventionally used as a polite “please tidy up and terminate” request. For example, when you shut down a Linux system with the <span class=\"CharOverride-2\">shutdown</span> command, it begins by sending SIGTERM to all the running processes in the hope that they will do the decent thing and go away. If this doesn’t work, <span class=\"CharOverride-2\">shutdown</span> waits for a few seconds then sends a SIGKILL. SIGTERM is the default signal type sent when you use programs like <span class=\"CharOverride-2\">kill </span>and <span class=\"CharOverride-2\">pkill</span>.</p>\n<p class=\"Crosshead\"><span class=\"CharOverride-3\">SIGKILL</span></p>\n<p class=\"Body-No-Indent\">This is the most brutal signal because a process cannot choose to catch or ignore it. A process receiving SIGKILL is instantly terminated. Best practice suggests that as a way of killing a process it should be a last resort, when more polite requests such as SIGTERM have failed. This is particularly true for services that maintain lock files or other temporary data files, because they won’t have opportunity to clean them up and you may end up having to manually remove them before the service will restart.</p>\n<div class=\"box-side\">\n\n<p class=\"Boxout-Copy-No-Indent\">The terminal driver (the code inside the kernel that’s reading characters from your keyboard) recognises a number of characters that are handled specially. Well-known examples include the “interrupt” character (usually ^C) which sends a SIGINT to any foreground processes running on that terminal, and the “end-of-file” character (usually ^D) which tells a program that’s reading its standard input from the keyboard that there is no more data. You can see all of these settings with:</p>\n<p><code class=\"Code\">$ stty -a</code></p>\n<p class=\"Boxout-Copy-Indent ParaOverride-4\">Although most of what you’ll see here harks back to the days of terminals that plugged into serial ports and is not relevant now, you can also change them. For example, to set your interrupt character to ^X:</p>\n<p><code class=\"Code\">$ stty intr ‘^X’</code></p>\n<p class=\"Boxout-Copy-Indent\">The control character is entered here as two characters, a caret (^) then the X.</p>\n</div>\n<p class=\"Crosshead\"><span class=\"CharOverride-3\">SIGALRM</span></p>\n<p class=\"Body-No-Indent\">This signal is “self-inflicted” – it’s generated as a result of an alarm clock timing out. Typically a C program might request an alarm call 10 seconds from now with:</p>\n<p><code class=\"Code\">alarm(10);</code></p>\n<p class=\"Body-No-Indent\">and use it to implement a timeout on a potentially blocking operation.</p>\n<p class=\"Crosshead\"><span class=\"CharOverride-3\">SIGSEGV</span></p>\n<p class=\"Body-No-Indent\">This signal is generated by the kernel when a process tries to access a memory address that’s outside its address space. Of course this should never happen in a correctly written program; typically it occurs in C code that makes a reference through a pointer that hasn’t been initialised, as this two-liner demonstrates:</p>\n<p><code class=\"Code\">void main()</code><br /><code class=\"Code\">{</code><br /><code class=\"Code\"> int *p;</code><br /><code class=\"Code\"> *p = 0;</code><br /><code class=\"Code\">}</code></p>\n<p class=\"Body-Indent\">Assuming the code’s in the file <span class=\"CharOverride-2\">segvdemo.c</span>, compile and run it like this:</p>\n<p><code class=\"Code\">$ gcc -o segvdemo segvdemo.c</code><br /><code class=\"Code\">$ ./segvdemo </code><br /><code class=\"Code\">Segmentation fault (core dumped)</code><br /><code class=\"Code\">$ echo $?</code><br /><code class=\"Code\">139</code></p>\n<p class=\"Crosshead\"><span class=\"CharOverride-3\">SIGILL</span></p>\n<p class=\"Body-No-Indent\">Another signal that arises directly from the execution of the process. It indicates an illegal instruction, and should never occur unless your compiler is buggy or the executable has become corrupt, or maybe because it calls a function through an unitialised pointer.</p>\n<p class=\"Crosshead\">SIGBUS and SIGFPE</p>\n<p class=\"Body-No-Indent\">These indicate an incorrectly aligned memory access, and a floating point exception (or other arithmetic error) respectively. It’s easy to deliberately generate a SIGFPE – just divide by zero:</p>\n<p><code class=\"Code\">void main()</code><br /><code class=\"Code\">{</code><br /><code class=\"Code\"> int a, b, c;</code><br /><code class=\"Code\"> a = 1; b = 0;</code><br /><code class=\"Code\"> c = a / b;</code><br /><code class=\"Code\">}</code></p>\n<p class=\"Body-Indent\">If you compile and run this program, you’ll see something like this:</p>\n<p><code class=\"Code\">$ ./fpedemo</code><br /><code class=\"Code\">Floating point exception (core dumped)</code><br /><code class=\"Code\">$ echo $?</code><br /><code class=\"Code\">136</code></p>\n<p class=\"Body-Indent\">Again, notice the exit status (136). Subtracting 128 gives 8, the signal number of SIGFPE.</p>\n<p class=\"Crosshead\">SIGABRT</p>\n<p class=\"Body-No-Indent\">A self-generated signal raised when a program calls the <span class=\"CharOverride-2\">abort()</span> library function. By default it will cause immediate termination of the program.</p>\n<p class=\"Crosshead\">Sending signals </p>\n<p class=\"Body-No-Indent\">OK, we’ve discussed some of the signal types. We’ve seen that some, such as SIGSEGV and SIGFPE, are raised automatically by the kernel as the result of some misdemeanour committed by the program. These are sometimes referred to as “synchronous” signals. But others need to be explicitly generated from outside the program (sometimes called “asynchronous” signals). How do we do that?</p>\n<p class=\"Body-Indent\">One way is to use the command <span class=\"CharOverride-2\">kill</span>. It’s not a good name really; <span class=\"CharOverride-2\">raise</span> or <span class=\"CharOverride-2\">sendsignal</span> might be better. For example, we can send a SIGHUP signal to process 12345 like this:</p>\n<p><code class=\"Code\">$ kill -SIGHUP 12345</code></p>\n<p class=\"Body-Indent\">Or you can use the short signal name, or the signal number, like this:</p>\n<p><code class=\"Code\">$ kill -HUP 12345</code><br /><code class=\"Code\">$ kill -1 12345</code></p>\n<p class=\"Body-Indent\">This is a good time to point out that you can only send signals to processes that you own, unless you’re running as root in which case you can deliver signals to any process.</p>\n<p class=\"Body-Indent\">Sending SIGHUP manually like this is commonly used to signal a service after changing its config file. Manually generated signals are also often used to terminate a “hung” process (or just one that seems to have been running for far too long), typically like this:</p>\n<p><code class=\"Code\">$ kill -TERM 12345</code><br /><code class=\"Code\">or more brutally:</code><br /><code class=\"Code\">$ kill -KILL 12345</code></p>\n<p class=\"Body-No-Indent\">If you don’t specify a signal type, the default is SIGTERM.</p>\n<p class=\"Body-Indent\">As you’ll see from these example you need to know the process ID to send a signal. If you’re trying to kill a program called <span class=\"CharOverride-2\">foobar</span> you might get this by running:</p>\n<p><code class=\"Code\">$ ps -ef | grep foobar</code><br /><code class=\"Code\">chris 4923 2586 0 18:07 pts/0 00:00:00 ./foobar</code><br /><code class=\"Code\">chris 4968 4924 0 18:07 pts/6 00:00:00 grep foobar</code></p>\n<p class=\"Body-No-Indent\">from which we see that the PID is 4923. (Ignore the “false positive” generated from the <span class=\"CharOverride-2\">grep</span> command.) </p>\n<p class=\"Crosshead\">Sending signals from a program</p>\n<p class=\"Body-No-Indent\">So much for sending signals from the command line. You can also send signals from within a program. Here’s a little C program I wrote called “terminate”; the idea is that you give it a PID as an argument and it begins by sending a polite SIGTERM signal to ask the process to terminate. If this doesn’t work it just pulls out a gun and shoots the process in the head with SIGKILL. Note that the line numbers are for reference, they are not part of the file:</p>\n<p><code class=\"Code\"> 1. #include &lt;stdio.h&gt;</code><br /><code class=\"Code\"> 2. #include &lt;stdlib.h&gt;</code><br /><code class=\"Code\"> 3. #include &lt;signal.h&gt;</code><br /><code class=\"Code\"> 4. #include &lt;errno.h&gt;</code><br /><code class=\"Code\"> 6. int main(int argc, char* argv[])</code><br /><code class=\"Code\"> 7. {</code><br /><code class=\"Code\"> 8. int targetpid, i;</code><br /><code class=\"Code\"> 9.</code><br /><code class=\"Code\">10. /* Get target process ID from command line */</code><br /><code class=\"Code\">11. targetpid = atoi(argv[1]);</code><br /><code class=\"Code\">12.</code><br /><code class=\"Code\">13. /* Check that the process exists */</code><br /><code class=\"Code\">14. if (kill(targetpid, 0) &lt; 0)</code><br /><code class=\"Code\">15. {</code><br /><code class=\"Code\">16. switch (errno)</code><br /><code class=\"Code\">17. {</code><br /><code class=\"Code\">18. case ESRCH:</code><br /><code class=\"Code\">19. printf(“Process %d does not existn”, targetpid);</code><br /><code class=\"Code\">20. exit(1);</code><br /><code class=\"Code\">21. case EPERM:</code><br /><code class=\"Code\">22. printf(“Do not have permission to terminate that processn”);</code><br /><code class=\"Code\">23. exit(2);</code><br /><code class=\"Code\">24. }</code><br /><code class=\"Code\">25. }</code><br /><code class=\"Code\">26.</code><br /><code class=\"Code\">27. /* Ask the process to terminate (politely) */</code><br /><code class=\"Code\">28. kill(targetpid, SIGTERM);</code><br /><code class=\"Code\">29.</code><br /><code class=\"Code\">30. /* Wait for up to 5 seconds for the process to die */</code><br /><code class=\"Code\">31. for (i = 0; i &lt; 5; i++)</code><br /><code class=\"Code\">32. {</code><br /><code class=\"Code\">33. if (kill(targetpid, 0) &lt; 0)</code><br /><code class=\"Code\">34. exit(0);</code><br /><code class=\"Code\">35. sleep(1);</code><br /><code class=\"Code\">36. }</code><br /><code class=\"Code\">37.</code><br /><code class=\"Code\">38. /* Asking nicely didn’t work, bring out the big guns */</code><br /><code class=\"Code\">39. printf(“SIGTERM ineffective, sending SIGKILLn”);</code><br /><code class=\"Code\">40. kill(targetpid, SIGKILL);</code><br /><code class=\"Code\">41. exit(3);</code><br /><code class=\"Code\">42. }</code></p>\n<p class=\"Body-Indent\">If you don’t read “C”, here’s a guided tour:</p>\n<p class=\"Body-Indent\">At line 11 we grab the process ID from the command line. There should really be some error checking here to verify that the user did actually supply a PID as argument. At line 14 we try to send signal number 0 to the process. The <span class=\"CharOverride-2\">kill()</span> system call is analogous to the <span class=\"CharOverride-2\">kill </span>command, though notice that the arguments are in the opposite order. (Hey, this is Linux! You want consistency?) Now there is no signal number 0, so the call will not actually deliver a signal to the process, but it will fail (returning -1) if either the process doesn’t exist, or we don’t have permission to signal it (ie we don’t own it and we’re not root). These two conditions are trapped at lines 18 and 21, where we print an appropriate error message and exit.</p>\n<p class=\"Body-Indent\">If we make it as far as line 28, we know that the process exists and we have permission to signal it, so we send a polite SIGTERM to the process, hoping it will oblige and go away. Then the loop starting at line 31 repeatedly probes (sending the dummy signal 0 again) to see if the process has terminated. If it has, then fine, our job is done, and we exit at line 34. We continue for five seconds, probing at one-second intervals. Finally, if we reach line 39, we forcefully terminate the process with SIGKILL. This approach (SIGTERM followed if necessary by SIGKILL) is essentially what happens to all running processes during a system shutdown.</p>\n<p><a href=\"http://www.linuxvoice.com/wp-content/uploads/2015/10/ct2-large.png\"><img alt=\"Image\" src=\"http://www.linuxvoice.com/wp-content/uploads/2015/10/ct2-small.png\" /></a></p>\n<div class=\"box-side\">\n\n<p class=\"Boxout-Copy-No-Indent\">When a process terminates “normally” (by executing an <span class=\"CharOverride-2\">exit()</span>), it chooses an exit code to pass back to the parent – 0 to indicate success and a small integer to indicate some sort of failure. But if the process is terminated by a signal it doesn’t get a choice. In this case, the exit status will be 128 plus the number of the signal that killed it. So for example a process killed by a SIGKILL (signal 9) will have exit status 137 (128+9).</p>\n</div>\n<p class=\"Crosshead\">Catching signals</p>\n<p class=\"Body-No-Indent\">So now we know how to send signals. Let’s look at the other side of the story – how does a process respond when it receives a signal? Well, each signal has a default disposition (“disposition” is just a posh word meaning “what will happen when a signal arrives”). The three dispositions shown in the table are:</p>\n<ul><li><span class=\"CharOverride-2\">Term </span>The process is terminated (this is the most common behaviour).</li>\n<li><span class=\"CharOverride-2\">Core </span>The process is terminated, a memory image (core file) may be written.</li>\n<li><span class=\"CharOverride-2\">Ignore </span>The signal is ignored.</li>\n</ul><p class=\"Body-Indent\">However – and here it gets interesting – a program can install handlers for the various signal types – pieces of code that will run if the signal arrives.</p>\n<p class=\"Body-Indent\">Rather than do this in C again, we’ll do it in a shell script. The purpose of this script is to count the number of prime numbers less than one million. </p>\n<p class=\"Body-Indent\">Now of course, doing a computation-rich thing like this in a shell script is pretty stupid, and I’m not using the most efficient algorithm either, which doesn’t help. But that’s not the point. The point of this example is that it represents a long-running program that gradually works its way through a data set. Here’s the script:</p>\n<p><code class=\"Code\"> 1. #!/bin/bash</code><br /><code class=\"Code\"> 2. </code><br /><code class=\"Code\"> 3. function isprime()</code><br /><code class=\"Code\"> 4. {</code><br /><code class=\"Code\"> 5. n=$1</code><br /><code class=\"Code\"> 6. factor=2</code><br /><code class=\"Code\"> 7. while (( factor * factor &lt;= n ))</code><br /><code class=\"Code\"> 8. do</code><br /><code class=\"Code\"> 9. if (( n % factor == 0 ))</code><br /><code class=\"Code\">10. then</code><br /><code class=\"Code\">11. return 1 # number is not prime</code><br /><code class=\"Code\">12. fi</code><br /><code class=\"Code\">13. (( factor++ ))</code><br /><code class=\"Code\">14. done</code><br /><code class=\"Code\">15. return 0 # no factors, number is prime</code><br /><code class=\"Code\">16. }</code><br /><code class=\"Code\">17.</code><br /><code class=\"Code\">18. trap ‘echo Testing value $val, found $count primes so far’ HUP</code><br /><code class=\"Code\">19. trap ‘echo Buzz off I am busy counting primes!’ TERM</code><br /><code class=\"Code\">20. trap ‘’ INT</code><br /><code class=\"Code\">21.</code><br /><code class=\"Code\">22. count=2</code><br /><code class=\"Code\">23. val=5</code><br /><code class=\"Code\">24. while (( val &lt; 1000000 ))</code><br /><code class=\"Code\">25. do</code><br /><code class=\"Code\">26. if isprime $val</code><br /><code class=\"Code\">27. then</code><br /><code class=\"Code\">28. (( count++ ))</code><br /><code class=\"Code\">29. fi</code><br /><code class=\"Code\">30. (( val += 2 ))</code><br /><code class=\"Code\">31. done</code><br /><code class=\"Code\">32. echo count is $count</code></p>\n<p class=\"Body-Indent\">Let’s walk you through this. Lines 3 to 16 define a function called <span class=\"CharOverride-2\">isprime</span>. It takes the number we want to test as an argument, and returns 0 (success) if the number is prime and 1 (failure) if it isn’t. The code is not difficult, but its details do not concern us here. The script really starts at line 22. We enter a loop (lines 24 to 31), testing all odd numbers between 5 and 1,000,000 for prime-ness and counting them. (I do at least have the sense not to test even numbers.) </p>\n<p class=\"Body-Indent\">On exiting the loop we print out the answer (line 32).</p>\n<p class=\"Body-Indent\">If you want to try this out (and we hope you will) put the code into a file called <span class=\"CharOverride-2\">countprimes </span>and make it executable:</p>\n<p><code class=\"Code\">$ chmod u+x countprimes</code></p>\n<p class=\"Body-Indent\">Now run the script:</p>\n<p><code class=\"Code\">$ ./countprimes</code></p>\n<p class=\"Body-Indent\">It will take quite a while to run (17 minutes on my laptop). Meanwhile, go back and look at lines 18–20. These are the lines that install signal handlers for SIGHUP, SIGTERM, and SIGINT signals respectively. In these example we have written the signal-handling actions “in line”, though we could also have written them as functions, which would be easier to deal with if we wanted the handler to do several things. The SIGHUP handler prints a progress report. The SIGTERM handler prints a rude message, but the program continues executing. The empty SIGINT handler at line 20 simply makes the script ignore SIGINT signals. Since ignoring signals is a common requirement, we’ll allow ourselves one more line of C:</p>\n<p><code class=\"Code\">signal(SIGINT, SIG_IGN);</code></p>\n<p class=\"Body-No-Indent\">which says to ignore SIGINT signals and is equivalent to the <span class=\"CharOverride-2\">trap</span> statement at line 20 in the script.</p>\n<p class=\"Body-Indent\">So go back to the terminal where <span class=\"CharOverride-2\">countprimes </span>is running and enter ‘^C’. As we’ve seen, this will send a SIGINT signal to the process. If we didn’t have line 20 in the script this would terminate the program, but now it is simply ignored and the program continues.</p>\n<p class=\"Body-Indent\">Now open a second terminal window. Enter the command:</p>\n<p><code class=\"Code\">$ pkill -HUP countprimes</code><br /><code class=\"Code\">Testing value 861877, found 68481 primes so far</code></p>\n<p class=\"Body-Indent\">As you’ll see, the SIGHUP handler tells us how far we’ve got in our prime-counting task. Now try:</p>\n<p><code class=\"Code\">$ pkill countprimes</code></p>\n<p class=\"Body-No-Indent\">which sends the default SIGTERM signal and will elicit the response:</p>\n<p><code class=\"Code\">Buzz off I am busy counting primes!</code></p>\n<p class=\"Body-No-Indent\">but again, the program will continue. Finally (unless you are actually interested in knowing how many primes under 1,000,000 there really are and would like to allow the program to run to completion) we can forcefully terminate the program with:</p>\n<p><code class=\"Code\">$ pkill -KILL countprimes</code></p>\n<p class=\"Body-Indent\">We haven’t installed a handler for SIGKILL, and we couldn’t if we wanted to because you can’t catch or ignore SIGKILL, so in the first terminal window you’ll see the message</p>\n<p><code class=\"Code\">Killed</code></p>\n<p class=\"Body-Indent\">If you then examine the exit status in that terminal:</p>\n<p><code class=\"Code\">$ echo $?</code><br /><code class=\"Code\">137</code></p>\n<p class=\"Body-No-Indent\">you see that it’s 137. Subtracting 128 as before gives 9, the signal number of SIGKILL.</p>\n<p class=\"Body-Indent\">That’s all for this month. If you’d like to learn more, the man page for <span class=\"CharOverride-2\">signal </span>(<span class=\"CharOverride-2\">man 7 signal</span>) has a great deal more detail, but rapidly gets rather techie. There’s also a good discussion in the GNU C Library manual at<span class=\"CharOverride-6\"> <a href=\"http://www.gnu.org/software/libc/manual/html_node/Signal-Handling.html\">www.gnu.org/software/libc/manual/html_node/Signal-Handling.html</a></span>. Happy signalling! </p>\n<p class=\"Mini-Bio\"><span class=\"CharOverride-9\">A veteran Unix and Linux enthusiast, Chris Brown has written and delivered open source training from New Delhi to San Francisco, though not on the same day.</span></p>\n\n<div class=\"box-side\">\n\n<table><tr><th>Signal name</th>\n<th>\nNumber</th>\n<th>\nDefault action</th>\n<th> Description</th>\n</tr><tr><td><b>SIGHUP</b></td>\n<td>1</td>\n<td>Term</td>\n<td>Some daemons interpret this to mean “re-read<br />your configuration”</td>\n</tr><tr><td><b>SIGINT</b></td>\n<td>2</td>\n<td>Term</td>\n<td>This signal is sent by C on the terminal</td>\n</tr><tr><td><b>SIGTRAP</b></td>\n<td>5</td>\n<td>Core</td>\n<td>Trace/breakpoint trap</td>\n</tr><tr><td><b>SIGBUS</b></td>\n<td>7</td>\n<td>Core</td>\n<td>Invalid memory access (bad alignment)</td>\n</tr><tr><td><b>SIGFPE</b></td>\n<td>8 </td>\n<td>Core</td>\n<td>Arithmetic error such as divide by zero</td>\n</tr><tr><td><b>SIGKILL</b></td>\n<td>9</td>\n<td>Term</td>\n<td>Lethal signal, cannot be caught or ignored</td>\n</tr><tr><td><b>SIGSEGV</b></td>\n<td>11</td>\n<td>Core</td>\n<td>Invalid memory access (bad address)</td>\n</tr><tr><td><b>SIGPIPE</b></td>\n<td>13</td>\n<td>Term</td>\n<td>Write on a pipe with no one to read it</td>\n</tr><tr><td><b>SIGALRM</b></td>\n<td>14</td>\n<td>Term</td>\n<td>Expiry of alarm clock timer</td>\n</tr><tr><td><b>SIGTERM</b></td>\n<td>15</td>\n<td>Term</td>\n<td> Polite “please terminate” signal</td>\n</tr><tr><td><b>SIGCHLD</b></td>\n<td>17</td>\n<td>Ignore</td>\n<td> Child process has terminated</td>\n</tr></table></div>\n\n\n\n\n															 \n													',1),(259,'WarmPlace.Ru. SunVox Modular Music Studio','http://www.warmplace.ru/soft/sunvox/',0,0,'\n\n\n<center>\n\n<span>SunVox<br />Latest release - v1.9b (26 jul 2015)<br /></span>\n<a href=\"http://www.warmplace.ru/soft/sunvox/index_ru.php\">Русская версия здесь</a><br /><a href=\"http://www.palmsounds.net/2009/01/innovative-app-2008-poll-results.html\"><img alt=\"Most Innovative Application 2008 : PalmSounds\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/innovation2008.png\" /></a> <a href=\"http://www.palmsounds.net/2009/12/and-winner-is-sunvox.html\"><img alt=\"Most Innovative Application 2009 : PalmSounds\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/innovation2009.png\" /></a><br /></center><br /><b>\n<a href=\"http://www.warmplace.ru/soft/sunvox/#about\">Overview</a><br /><a href=\"http://www.warmplace.ru/soft/sunvox/#features\">Key features</a><br /><a href=\"http://www.warmplace.ru/soft/sunvox/#scr\">Screenshots</a> | <a href=\"http://www.warmplace.ru/soft/sunvox/#vid\">Video</a> | <a href=\"http://www.warmplace.ru/soft/sunvox/#art\">Artwork</a><br /><a href=\"http://www.warmplace.ru/soft/sunvox/#music\">Music</a> | <a href=\"http://www.warmplace.ru/forum/viewtopic.php?f=16&amp;t=1445\">Samples</a> | <a href=\"http://www.warmplace.ru/forum/viewforum.php?f=11\">Modules</a><br /><a href=\"http://www.warmplace.ru/forum/viewtopic.php?f=3&amp;t=1223\">Video tutorials</a><br /><a href=\"http://www.warmplace.ru/forum/viewforum.php?f=16\">Forum</a><br /><a href=\"http://www.warmplace.ru/wiki/sunvox:manual_en\">User manual and FAQ</a><br /></b>\n\n<br /><a></a>\n<br />SunVox is a small, fast and powerful <a href=\"http://en.wikipedia.org/wiki/Modular_synthesizer\">modular synthesizer</a> with pattern-based sequencer (<a href=\"http://en.wikipedia.org/wiki/Tracker_(music_software)\">tracker</a>). \nIt is a tool for those people who like to compose music wherever they are, whenever they wish. On any device. \nSunVox is available for Windows, OS X, Linux, Maemo, Meego, Raspberry Pi, Windows Mobile (WindowsCE), PalmOS, iOS and Android.<br /><center><img alt=\"SunVox - Modular Music Studio in Your Pocket\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/devices.png\" /></center>\n\n<a></a>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"background-image:url(&quot;/images/bg_title.png&quot;);\"><tr><td width=\"4\"></td><td><b>\nKey features<br /></b></td></tr></table><ul><li>Modular interface.</li>\n<li>Highly optimized synth algorithms.</li>\n<li>Flexible architecture: SunVox can working on variuos devices. For example: \n  pocket computer with slow CPU - 13bit sound (fixed point arithmetic); or big PC with \n  powerfull CPU: 32bit sound (floating point arithmetic).</li>\n<li>Built-in synthesizers &amp; effects: \n<ul><li>Analog Generator;\n</li><li>DrumSynth with 120 unique synthetic drum sounds;\n</li><li>FM synthesizer;\n</li><li>MetaModule (use it to build your own synths/effects);\n</li><li>Sampler (supported formats: WAV, XI, AIFF);\n</li><li>SpectraVoice (FFT-based synthesizer for warm atmospheric sounds);\n</li><li>Side Chain Compressor;\n</li><li>Distortion;\n</li><li>Echo;\n</li><li>3Band equalizer;\n</li><li>Filter (Low-pass, High-pass, Band-pass, Notch);\n</li><li>Flanger;\n</li><li>Loop (for glitch effects);\n</li><li>Reverb;\n</li><li>Vocal Filter (for human voice simulation);\n</li><li>Vorbis Player;\n</li><li>WaveShaper;\n</li><li>and more ...\n</li></ul></li><li>Multitrack WAV export.</li>\n<li>MIDI import/export.</li>\n<li>MIDI IN/OUT (except PalmOS and Windows Mobile).</li>\n<li>Real-time sample recording.</li>\n<li>Real-time recording of any types of sound events (notes, Touch Theremin, controllers).</li>\n<li>XM (FastTracker) and MOD (ProTracker, OctaMED) import.</li>\n<li>Supported sound systems: ASIO, DirectSound, MME, ALSA, OSS, JACK, Audiobus, IAA;\n</li><li>iOS version is compatible with <a href=\"http://www.ikmultimedia.com/irigmic\">iRig Mic</a>.</li>\n</ul><a></a>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"background-image:url(&quot;/images/bg_title.png&quot;);\"><tr><td width=\"4\"></td><td><b>\nScreenshots<br /></b></td></tr></table><br /><center>\n<a href=\"http://www.warmplace.ru/soft/sunvox/sunvox28.png\"><img alt=\"SunVox screenshot 1\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/screens_small/01.png\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/sunvox29.png\"><img alt=\"SunVox screenshot 2\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/screens_small/02.png\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/sunvox30.png\"><img alt=\"SunVox screenshot 3\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/screens_small/03.png\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/sunvox31.png\"><img alt=\"SunVox screenshot 4\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/screens_small/04.png\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/sunvox32.png\"><img alt=\"SunVox screenshot 5\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/screens_small/05.png\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/sunvox33.png\"><img alt=\"SunVox screenshot 6\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/screens_small/06.png\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/sunvox34.png\"><img alt=\"SunVox screenshot 7\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/screens_small/07.png\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/sunvox35.png\"><img alt=\"SunVox screenshot 8\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/screens_small/08.png\" /></a><p><a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/Compaq%20iPAQ%203850%20(WinMobile).jpg\"><img alt=\"Compaq iPAQ 3850\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20Compaq%20iPAQ%203850%20(WinMobile).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/Dell%20Axim%20(WinMobile).jpg\"><img alt=\"Dell Axim\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20Dell%20Axim%20(WinMobile).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/Jornada%20720%20(WinMobile)%20(2).jpg\"><img alt=\"Jornada 720\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20Jornada%20720%20(WinMobile)%20(2).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/Jornada%20720%20(WinMobile).jpg\"><img alt=\"Jornada 720\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20Jornada%20720%20(WinMobile).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/Nec%20MobilePro%20900%20(WinMobile).jpg\"><img alt=\"Nec MobilePro 900\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20Nec%20MobilePro%20900%20(WinMobile).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/Nokia%20N900%20(Maemo).jpg\"><img alt=\"Nokia N900\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20Nokia%20N900%20(Maemo).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/TungstenT%20(PalmOS).jpg\"><img alt=\"Tungsten|T\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20TungstenT%20(PalmOS).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/iPad,%20Alesis%20IO%20Dock,%20Monotron.jpg\"><img alt=\"iPad, Alesis IO Dock, Monotron\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPad,%20Alesis%20IO%20Dock,%20Monotron.jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/iPad2,%20MIDI.jpg\"><img alt=\"iPad2\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPad2,%20MIDI.jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/iPhone%20plus%20Monotron.jpg\"><img alt=\"iPhone and Monotron\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPhone%20plus%20Monotron.jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/Samsung%20Galaxy%20Note%20(Android).jpg\"><img alt=\"Galaxy Note (Android)\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20Samsung%20Galaxy%20Note%20(Android).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/OpenPandora%20(Linux).jpg\"><img alt=\"Galaxy Note (Android)\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20OpenPandora%20(Linux).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/Sony%20CLIE%20PEG-UX50%20(PalmOS).jpg\"><img alt=\"Sony CLIE PEG-UX50 (PalmOS)\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20Sony%20CLIE%20PEG-UX50%20(PalmOS).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/various.jpg\"><img alt=\"Samsung galaxy Fit (Android); Dell Axim X30 (Windows Mobile); Prestigio multyPAD pmp5080b (Android)\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20various.jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/LG%20Optimus%20Hub%20(Android).jpg\"><img alt=\"Monotron Duo, LG Optimus Hub (Android), Zoom H4n\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20LG%20Optimus%20Hub%20(Android).jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/device_screens/Palm%20TX.jpg\"><img alt=\"Palm TX\" border=\"0\" src=\"http://www.warmplace.ru/soft/sunvox/device_screens/P.%20Palm%20TX.jpg\" /></a></p></center>\n\n<a></a>\n<br /><center>\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/AHFSrxlouh8\" frameborder=\"0\">[embedded content]</iframe><p><iframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/-dRTLqabGmo\" frameborder=\"0\">[embedded content]</iframe></p><p><iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/E54uAhMBA1A\" frameborder=\"0\">[embedded content]</iframe></p><p><iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/4dHGYhcjyYM\" frameborder=\"0\">[embedded content]</iframe></p><p><iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/OVoNwJ2swKU\" frameborder=\"0\">[embedded content]</iframe></p><p><iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/mEdXXKk1hRI\" frameborder=\"0\">[embedded content]</iframe></p></center>\n\n<a></a>\n<br />Logo design by <a href=\"http://goglus.com/\">Goglus</a><br />3D post-processing by <a href=\"http://warmplace.ru/about.php\">NightRadio</a><center>\n<a href=\"http://www.warmplace.ru/soft/sunvox/logo1.jpg\"><img src=\"http://www.warmplace.ru/soft/sunvox/logo1_small.jpg\" border=\"0\" alt=\"logo1_small.jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/logo2.jpg\"><img src=\"http://www.warmplace.ru/soft/sunvox/logo2_small.jpg\" border=\"0\" alt=\"logo2_small.jpg\" /></a> \n<a href=\"http://www.warmplace.ru/soft/sunvox/logo3.jpg\"><img src=\"http://www.warmplace.ru/soft/sunvox/logo3_small.jpg\" border=\"0\" alt=\"logo3_small.jpg\" /></a><br /><img src=\"http://www.warmplace.ru/soft/sunvox/sunvox_banner.png\" alt=\"sunvox_banner.png\" /></center>\n\n<a></a>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"background-image:url(&quot;/images/bg_title.png&quot;);\"><tr><td width=\"4\"></td><td><b>\nMusic created in SunVox<br /></b></td></tr></table><br /><a href=\"http://soundcloud.com/groups/sunvox\">Dedicated group on SoundCloud</a><br /><a href=\"http://www.warmplace.ru/music/btts/index.php\">NightRadio - Back to the sources (album)</a><br /><a href=\"http://www.warmplace.ru/music/soul_resonance/\">NightRadio - Soul Resonance (album)</a><br /><br />Сompetitions:<br />',1),(260,'[1511.05552v1] Recurrent Neural Networks Hardware Implementation on FPGA','http://arxiv.org/abs/1511.05552v1',0,0,'\n<div>\n<div>\n<a href=\"http://www.cornell.edu/\"><img src=\"http://arxiv.org/icons/cu/cul_signature_unstyled.gif\" alt=\"Cornell University\" width=\"283\" height=\"76\" border=\"0\" /></a>\n\n</div>\n\n</div>\n\n<div>\n\n\n\n<div>\n\n\n<div class=\"leftcolumn\">\n\n\n\n<p>(Submitted on 17 Nov 2015)</p>\n<blockquote class=\"abstract mathjax\">\n<span class=\"descriptor\">Abstract:</span> Recurrent Neural Networks (RNNs) have the ability to retain memory and learn\ndata sequences, and are a recent breakthrough of machine learning. Due to the\nrecurrent nature of RNNs, it is sometimes hard to parallelize all its\ncomputations on conventional hardware. CPUs do not currently offer large\nparallelism, while GPUs offer limited parallelism due to branching in RNN\nmodels. In this paper we present a hardware implementation of Long-Short Term\nMemory (LSTM) recurrent network on the programmable logic Zynq 7020 FPGA from\nXilinx. We implemented a RNN with 2 layers and 128 hidden units in hardware and\nit has been tested using a character level language model. The implementation\nis more than $21\\times$ faster than the ARM CPU embedded on the Zynq 7020 FPGA.\nThis work can potentially evolve to a RNN co-processor for future mobile\ndevices.\n</blockquote>\n\n\n\n</div>\n</div>\n</div>\n\n',1),(261,'Fun C Micro-optimizations - restrict Â· Jackson Davis','http://jcdav.is/2015/11/23/Fun-C-Micro-optimizations-restrict/',0,0,'\n  \n  <span class=\"post-date\">23 Nov 2015</span>\n  <p>Lets say we wanted to add a value to an every element of an array. Here’s a slightly contrived example:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">void</span> <span class=\"nf\">add_to_array</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">};</span>\n  <span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"n\">add_to_array</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div>\n\n<p>If we look at the assembly for <code>add_to_array</code> (using <code>gcc -O1 -S &lt;file&gt;</code>), there is an interesting peculiarity:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-asm\"><span class=\"nl\">_add_to_array:</span>                <span class=\"c\">## @add_to_array</span>\n        <span class=\"nf\">pushq</span>   <span class=\"nv\">%rbp</span>\n        <span class=\"nf\">movq</span>    <span class=\"nv\">%rsp</span><span class=\"p\">,</span> <span class=\"nv\">%rbp</span>\n        <span class=\"nf\">testl</span>   <span class=\"nv\">%edx</span><span class=\"p\">,</span> <span class=\"nv\">%edx</span>\n        <span class=\"nf\">jle</span>     <span class=\"no\">LBB0_2</span>\n<span class=\"nl\">LBB0_1:</span>                       <span class=\"c\">## =&gt;This Inner Loop Header: Depth=1</span>\n        <span class=\"nf\">movl</span>    <span class=\"p\">(</span><span class=\"nv\">%rsi</span><span class=\"p\">),</span> <span class=\"nv\">%eax</span>\n        <span class=\"nf\">addl</span>    <span class=\"nv\">%eax</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">)</span>\n        <span class=\"nf\">addq</span>    <span class=\"no\">$4</span><span class=\"p\">,</span> <span class=\"nv\">%rdi</span>\n        <span class=\"nf\">decl</span>    <span class=\"nv\">%edx</span>\n        <span class=\"nf\">jne</span>     <span class=\"no\">LBB0_1</span>\n<span class=\"nl\">LBB0_2:</span>                       <span class=\"c\">## %._crit_edge</span>\n        <span class=\"nf\">popq</span>    <span class=\"nv\">%rbp</span>\n        <span class=\"nf\">retq</span></code></pre></div>\n\n<p>We are rereading the value of <code>v</code> every iteration, instead of just once. Why is that? Well, gcc has to assume that its possible that <code>arr</code> and <code>v</code> overlap, making a write to <code>arr</code> change the value of <code>v</code>. We could, for instance, call <code>add_to_array(arr, arr, 3)</code> and it must produce <code>{10, 14, 13}</code>.</p>\n\n<p>In reality of course, this behavior is rarely intended. Thats where <a href=\"https://en.wikipedia.org/wiki/Restrict\">restrict</a> comes into play. Adding <code>restrict</code> to our parameters lets us signal to gcc that the regions don’t overlap. We can change our function to reflect this:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">void</span> <span class=\"nf\">add_to_array</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"kr\">restrict</span> <span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"kr\">restrict</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div>\n\n<p>And now gcc will lift reading of <code>v</code> out of the loop:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-asm\"><span class=\"nl\">_add_to_array:</span>                <span class=\"c\">## @add_to_array</span>\n        <span class=\"nf\">pushq</span>   <span class=\"nv\">%rbp</span>\n        <span class=\"nf\">movq</span>    <span class=\"nv\">%rsp</span><span class=\"p\">,</span> <span class=\"nv\">%rbp</span>\n        <span class=\"nf\">testl</span>   <span class=\"nv\">%edx</span><span class=\"p\">,</span> <span class=\"nv\">%edx</span>\n        <span class=\"nf\">jle</span>     <span class=\"no\">LBB0_3</span>\n        <span class=\"nf\">movl</span>    <span class=\"p\">(</span><span class=\"nv\">%rsi</span><span class=\"p\">),</span> <span class=\"nv\">%eax</span>\n<span class=\"nl\">LBB0_2:</span>                       <span class=\"c\">## =&gt;This Inner Loop Header: Depth=1</span>\n        <span class=\"nf\">addl</span>    <span class=\"nv\">%eax</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">)</span>\n        <span class=\"nf\">addq</span>    <span class=\"no\">$4</span><span class=\"p\">,</span> <span class=\"nv\">%rdi</span>\n        <span class=\"nf\">decl</span>    <span class=\"nv\">%edx</span>\n        <span class=\"nf\">jne</span>     <span class=\"no\">LBB0_2</span>\n<span class=\"nl\">LBB0_3:</span>                       <span class=\"c\">## %._crit_edge</span>\n        <span class=\"nf\">popq</span>    <span class=\"nv\">%rbp</span>\n        <span class=\"nf\">retq</span></code></pre></div>\n\n<p>This example, of course, seems pretty silly. After all, you would certainly just pass the integer rather than a pointer, and this wouldn’t happen right? That certainly would make a lot more sense.</p>\n\n<p>Where it gets a lot less obvious, however, is in more complicated situations. Let’s say we have a simple struct:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n  <span class=\"kt\">float</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">st</span><span class=\"p\">;</span></code></pre></div>\n\n<p>And now <code>add_to_array</code> takes an <code>st*</code> and adds <code>i</code>:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">void</span> <span class=\"nf\">add_to_array</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">st</span><span class=\"o\">*</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">i</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div>\n\n<p>Pass this through <code>gcc -O1 -S</code> again and you’ll find it looks pretty much identical to our first sitaution, just reading <code>movl 4(%rsi), %eax</code> instead. Even though it seems fairly obvious to us that the array and struct will refer to seperate memory regions, C’s Wild West approach to memory means that <code>add_to_array(arr, (st*)arr, 3)</code> is possible, and gcc must generate assembly that produces the correct output <code>{9,8,11}</code>. Again here, we must specify <code>restrict</code> to lift the read of <code>s-&gt;i</code> out of the loop.</p>\n\n<p>Are these details worth overly worrying about? In most cases, probably not. But its a fun trick to have in your pocket and another reminder of the value of looking over assembly in performance-critical areas.</p>\n\n<h3>Update:</h3>\n<p>Several folks have kindly informed me that the second example, while compilable and functional, is actually invalid in C99, which bans these sorts of hacks for this exact reason. Sorry about that :)</p>\n\n',1),(262,'CS 2043 - Unix Tools &amp; Scripting','http://www.cs.cornell.edu/courses/CS2043/2014sp/',0,0,'\n\n      \n      <h3>Spring 2014</h3>\n\n    \n            <strong>Time &amp; Place</strong>: MWF 11:15am - 12:00pm (Holister B14)\n         \n    \n\n    <p>\n    <b>Announcements</b>: \n    </p><ul><li><b>1/29/2014</b>: Hussam Abu-Libdeh, Atheendra PT, Sangha Im, and Harsh Shah joined the course staff. See their \n        hours and contact info below.</li>\n        <li><b>1/24/2014</b>: Couldn\'t register for the course? <strike>  Enter your info here: Waiting List</strike>. <b> Update 1/29:</b> Sorry, registration is now closed.</li>\n      \n    </ul><h3>Overview</h3>\n      <p>\n\n      UNIX-like systems are increasingly being used on personal computers,\n      mobile phones, web servers, and many other systems. They represent a\n      wonderful family of programming environments useful both to computer\n      scientists and to people in many other fields, such as computational\n      biology and computational linguistics, in which data is naturally\n      represented by strings. This course provides an intensive training to\n      develop skills in Unix command line tools and scripting that enable the\n      accomplishment and automation of large and challenging computing tasks.\n      The syllabus takes students from shell basics and piping, to\n      regular-expression processing tools, to shell scripting and Python.\n\n      </p>\n\n      <p>CS2043 is a six week, two credit, S/U only course. It runs from\n      <b>January 22</b> through <b>March 5, 2014</b>. The drop deadline is <b>February 5, 2014</b>, two weeks\n      into the course. </p>\n\n      <h3>Course Staff</h3>\n        \n\n       <table><tr><td><strong>Instructor</strong>:</td>\n               <td><b><a href=\"http://www.cs.cornell.edu/~abrahao\">Bruno Abrahao</a></b></td>\n               <td>[last_name@cs.cornell.edu]</td>\n               <td><strong>Office hours</strong>:</td>\n               <td>Wednesday 3-4pm, Gates Hall, room G21</td>\n            </tr><tr><td><strong>TAs</strong>:</td>\n               <td><b><a href=\"http://0xff.co/\"> Hussam Abu-Libdeh</a></b></td>\n               <td>[first_name@cs.cornell.edu]</td>\n               <td><strong>Office hours</strong>:</td>\n               <td>Tuesday 2-3pm, Gates Hall, room 440</td>\n            </tr><tr><td></td>\n               <td>Atheendra PT</td>\n               <td>[ap778@cornell.edu]</td>\n               <td><strong>Office hours</strong>:</td>\n               <td>Monday 1:30-2:30pm, Upson Hall, room 360</td>\n            </tr><tr><td></td>\n               <td>Sangha Im</td>\n               <td>[si237@cornell.edu]</td>\n               <td><strong>Office hours</strong>:</td>\n               <td>Thursday 2-3pm, Gates Hall, room G17</td>\n            </tr><tr><td></td>\n               <td>Harsh Shah</td>\n               <td>[hs634@cornell.edu]</td>\n               <td><strong>Office hours</strong>:</td>\n               <td>Friday 2-3pm, Gates Hall, room G11</td>\n            </tr></table>\n\n\n      Join the discussion on <b><a href=\"http://www.piazza.com/cornell/spring2014/cs2043\">Piazza</a></b>\n      <b> <span> \n      <br />Note:</span> </b> Please don\'t disclose parts of\n      your solution on piazza. You can ask for clarifications without revealing\n      your attempts to solve the problem.\n    \n      <h3>Organization</h3>\n      <p>\n      There is no official textbook for this course; we will post pointers\n      to some books and websites that might be helpful.       \n      </p>\n\n      <p>\n      The course prerequisites include elementary-level background in computer\n      programming without assuming mastery in any particular language.\n      </p>\n      \n      <p>\n      The work for the course will consist primarily of 5 or 6 homework assignments. You must successfully complete all these\n      assignments to pass this class. Coursework should be handed in through <a href=\"https://cms.csuglab.cornell.edu/web/auth/?action=loginview\">CMS</a>.\n      </p> \n\n\n      <h3>Lectures</h3>\n      <ul><li><b>1/22/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture01.pdf\">Lecture 1</a></i>: A brief intro to Unix.</li>\n         <li><b>1/24/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture02.pdf\">Lecture 2</a></i>: The Unix file system.</li>\n         <li><b>1/27/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture03.pdf\">Lecture 3</a></i>: More on the Unix file system, text editing: nano and vim (basics).</li>\n         <li><b>1/29/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture04.pdf\">Lecture 4</a></i>: Shortcuts keys, history, aliasing, character expansion, and file compression.</li>\n         <li><b>1/31/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture05.pdf\">Lecture 5</a></i>: wc, sort, uniq, tr, pipes and redirection, tee, backticks</li>\n         <li><b>2/03/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture06.pdf\">Lecture 6</a></i>: cut, paste, split, join, bc, find, grep</li>\n         <li><b>2/05/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture07.pdf\">Lecture 7</a></i>: ssh, scp, processes: nice, kill, top; jobs.</li>\n         <li><b>2/07/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture08.pdf\">Lecture 8</a></i>: Regular Expressions</li>\n         <li><b>2/10/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture09.pdf\">Lecture 9</a></i>: sed, cron</li>\n         <li><b>2/12/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture10.pdf\">Lecture 10</a></i>: diff, awk (1/3)</li>\n         <li><b>2/14/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture11.pdf\">Lecture 11</a></i>: awk (2/3)</li>\n         <li><b>2/19/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture12.pdf\">Lecture 12</a></i>: screen, gnuplot</li>\n         <li><b>2/21/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture13.pdf\">Lecture 13</a></i>: awk (3/3), scripting preliminaries</li>\n         <li><b>2/24/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture14.pdf\">Lecture 14</a></i>: conditionals</li>\n         <li><b>2/26/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture15.pdf\">Lecture 15</a></i>: loops</li>\n         <li><b>2/28/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture16.pdf\">Lecture 16</a></i>: Bash tips, arrays, and functions</li>\n         <li><b>3/03/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture17.pdf\">Lecture 17</a></i>: Python 1/2</li>\n         <li><b>3/05/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/lectures/lecture18.pdf\">Lecture 18</a></i>: Python 2/2</li>\n      </ul><h3>Homeworks</h3>\n      <ul><li><b>1/24/2014</b><i> <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/assignments/hw1.pdf\">Homework 1</a></i>. Due Wednesday, January 29, 2014.</li>\n         <li><b>2/03/2014</b><i> <a href=\"https://cms.csuglab.cornell.edu/web/auth/?action=download&amp;downloadtype=1&amp;id=39\">Homework 2</a></i>. Due Sunday, February 9, 2014, 11:59pm EST. <a href=\"https://cms.csuglab.cornell.edu/web/auth/?action=download&amp;downloadtype=0&amp;id=11\"><b>Solutions</b></a> </li> \n         <li><b>2/10/2014</b><i> <a href=\"https://cms.csuglab.cornell.edu/web/auth/?action=download&amp;downloadtype=1&amp;id=64\">Homework 3</a></i>. Due Sunday, February 16, 2014, 11:59pm EST. <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/assignments/hw3_solution.pdf\"><b>Solutions</b></a>\n         </li><li><b>2/21/2014</b><i> <a href=\"https://cms.csuglab.cornell.edu/web/auth/?action=download&amp;downloadtype=1&amp;id=89\">Homework 4</a></i>. Due Friday, February 28, 2014, 11:59pm EST. <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/hw4-solutions.html\"><b>Solutions</b></a>\n\n         </li><li><b>3/02/2014</b><i> <a href=\"https://cms.csuglab.cornell.edu/web/auth/?action=download&amp;downloadtype=1&amp;id=115\">Final Project</a></i>. Due Sunday, March 9, 2014, 11:59pm EST. <a href=\"http://www.cs.cornell.edu/courses/CS2043/2014sp/final_project_solutions.html\"><b>Solutions</b></a> \n         </li> \n         </ul><p>\n         <a href=\"https://confluence.cornell.edu/display/coecis/CSUG+Lab+VM+Information\">Instructions</a> for installing a clone of a CSUG Lab machine on your computer.<br /><a href=\"http://www.csuglab.cornell.edu/\">Information</a> on the CSUG Lab.<br /></p>\n      <b> <span> \n      <br />New:</span> Updated Late Homework Policy</b> (comes into effect\n      starting with Homework 2): Each student will be granted a total of two\n      late days that can be spent towards submitting homeworks late. We will\n      deduct a late day from your account whenever you submit an assignment\n      after the deadline, and we will grade assignments only if you have enough\n      credit to account for the late days. If you are unable to submit your\n      homework because of extenuating circumstances (medical or family\n      emergency), contact an instructor beforehand.\n      <b>Important</b>: You will need to notify the course staff whenever you make a late\n      submission, otherwise we won\'t notice your assignment in the system.\n\n      <h3>Useful references (not required)</h3>\n      <ul><li><ul><li><i>The Linux Command Line book <a href=\"http://linuxcommand.org/tlcl.php\">(Free)</a></i></li>\n            <li><i>Learning Python (5th Edition)</i>, Mark Lutz, O\'Reilly, 2013</li>\n            <li><i>Python Pocket Reference</i>, Mark Lutz, O\'Reilly, 2014</li>\n            <li><i>Python in a Nutshell (2nd Edition)</i>, Alex Martelli, O\'Reilly, 2006</li>\n            <li><i>Mastering Regular Expressions</i>, Jeffrey Friedl, O\'Reilly, 2006</li>\n         </ul></li></ul>',1),(263,'The Architecture of Open Source Applications (Volume 2): nginx','http://www.aosabook.org/en/nginx.html',0,0,'<p>nginx (pronounced \"engine x\") is a free open source web server\nwritten by Igor Sysoev, a Russian software engineer. Since its public\nlaunch in 2004, nginx has focused on high performance, high\nconcurrency and low memory usage. Additional features on top of the\nweb server functionality, like load balancing, caching, access and\nbandwidth control, and the ability to integrate efficiently with a\nvariety of applications, have helped to make nginx a good choice for\nmodern website architectures. Currently nginx is the second most\npopular open source web server on the Internet.</p><div><h2>14.1. Why Is High Concurrency Important?</h2>\n\n<p>These days the Internet is so widespread and ubiquitous it\'s hard to\nimagine it wasn\'t exactly there, as we know it, a decade ago. It has greatly evolved,\nfrom simple HTML producing clickable text, based on NCSA and then on\nApache web servers, to an always-on communication medium used by more\nthan 2 billion users worldwide. With the proliferation of permanently\nconnected PCs, mobile devices and recently tablets, the Internet\nlandscape is rapidly changing and entire economies have become\ndigitally wired. Online services have become much more elaborate with\na clear bias towards instantly available live information and\nentertainment. Security aspects of running online business have also\nsignificantly changed. Accordingly, websites are now much more complex\nthan before, and generally require a lot more engineering efforts to\nbe robust and scalable.</p>\n\n<p>One of the biggest challenges for a website architect has always been\nconcurrency. Since the beginning of web services, the level of\nconcurrency has been continuously growing. It\'s not uncommon for a\npopular website to serve hundreds of thousands and even millions of\nsimultaneous users. A decade ago, the major cause of concurrency was\nslow clients—users with ADSL or dial-up connections. Nowadays,\nconcurrency is caused by a combination of mobile clients and newer\napplication architectures which are typically based on maintaining a\npersistent connection that allows the client to be updated with news,\ntweets, friend feeds, and so on. Another important factor contributing\nto increased concurrency is the changed behavior of modern browsers,\nwhich open four to six simultaneous connections to a website to\nimprove page load speed.</p>\n\n<p>To illustrate the problem with slow clients, imagine a simple\nApache-based web server which produces a relatively short 100 KB\nresponse—a web page with text or an image. It can be merely a\nfraction of a second to generate or retrieve this page, but it takes\n10 seconds to transmit it to a client with a bandwidth of 80 kbps (10\nKB/s). Essentially, the web server would relatively quickly pull 100\nKB of content, and then it would be busy for 10 seconds slowly sending\nthis content to the client before freeing its connection. Now imagine\nthat you have 1,000 simultaneously connected clients who have\nrequested similar content. If only 1 MB of additional memory is\nallocated per client, it would result in 1000 MB (about 1 GB) of\nextra memory devoted to serving just 1000 clients 100 KB of\ncontent. In reality, a typical web server based on Apache commonly\nallocates more than 1 MB of additional memory per connection, and\nregrettably tens of kbps is still often the effective speed of mobile\ncommunications. Although the situation with sending content to a slow\nclient might be, to some extent, improved by increasing the size of\noperating system kernel socket buffers, it\'s not a general solution to\nthe problem and can have undesirable side effects.</p>\n\n<p>With persistent connections the problem of handling concurrency is\neven more pronounced, because to avoid latency associated with\nestablishing new HTTP connections, clients would stay connected, and\nfor each connected client there\'s a certain amount of memory allocated\nby the web server.</p>\n\n<p>Consequently, to handle the increased workloads associated with\ngrowing audiences and hence higher levels of concurrency—and to be\nable to continuously do so—a website should be based on a number of\nvery efficient building blocks. While the other parts of the equation\nsuch as hardware (CPU, memory, disks), network capacity, application\nand data storage architectures are obviously important, it is in the\nweb server software that client connections are accepted and\nprocessed. Thus, the web server should be able to scale nonlinearly\nwith the growing number of simultaneous connections and requests per\nsecond.</p>\n\n<h3>Isn\'t Apache Suitable?</h3>\n\n<p>Apache, the web server software that still largely dominates the\nInternet today, has its roots in the beginning of the\n1990s. Originally, its architecture matched the then-existing\noperating systems and hardware, but also the state of the \nInternet, where a website was typically a standalone physical server\nrunning a single instance of Apache. By the beginning of the 2000s it\nwas obvious that the standalone web server model could not be easily\nreplicated to satisfy the needs of growing web services. Although\nApache provided a solid foundation for future development, it was\narchitected to spawn a copy of itself for each new connection, which\nwas not suitable for nonlinear scalability of a website. Eventually\nApache became a general purpose web server focusing on having many\ndifferent features, a variety of third-party extensions, and universal\napplicability to practically any kind of web application\ndevelopment. However, nothing comes without a price and the downside\nto having such a rich and universal combination of tools in a single\npiece of software is less scalability because of increased CPU and\nmemory usage per connection.</p>\n\n<p>Thus, when server hardware, operating systems and network resources\nceased to be major constraints for website growth, web developers\nworldwide started to look around for a more efficient means of running\nweb servers. Around ten years ago, Daniel Kegel, a prominent software\nengineer, <a href=\"http://www.kegel.com/c10k.html\">proclaimed</a> that \"it\'s time for web servers to handle ten\nthousand clients simultaneously\" and predicted what we\nnow call Internet cloud services. Kegel\'s C10K manifest spurred a\nnumber of attempts to solve the problem of web server optimization to\nhandle a large number of clients at the same time, and nginx turned\nout to be one of the most successful ones.</p>\n\n<p>Aimed at solving the C10K problem of 10,000 simultaneous connections,\nnginx was written with a different architecture in mind—one which is\nmuch more suitable for nonlinear scalability in both the number of\nsimultaneous connections and requests per second. nginx is\nevent-based, so it does not follow Apache\'s style of spawning new\nprocesses or threads for each web page request. The end result is that\neven as load increases, memory and CPU usage remain manageable. nginx\ncan now deliver tens of thousands of concurrent connections on a\nserver with typical hardware.</p>\n\n<p>When the first version of nginx was released, it was meant to be\ndeployed alongside Apache such that static content like HTML, CSS,\nJavaScript and images were handled by nginx to offload concurrency and\nlatency processing from Apache-based application servers. Over the\ncourse of its development, nginx has added integration with\napplications through the use of FastCGI, uswgi or SCGI protocols, and\nwith distributed memory object caching systems like\n<em>memcached</em>. Other useful functionality like reverse proxy with\nload balancing and caching was added as well. These additional\nfeatures have shaped nginx into an efficient combination of tools\nto build a scalable web infrastructure upon.</p>\n\n<p>In February 2012, the Apache 2.4.x branch was released to the public. Although\nthis latest release of Apache has added new multi-processing core modules and\nnew proxy modules aimed at enhancing scalability and performance, it\'s too soon\nto tell if its performance, concurrency and resource utilization are now on par\nwith, or better than, pure event-driven web servers. It would be very nice to\nsee Apache application servers scale better with the new version, though, as it\ncould potentially alleviate bottlenecks on the backend side which still often\nremain unsolved in typical nginx-plus-Apache web configurations.</p>\n\n<h3>Are There More Advantages to Using nginx?</h3>\n\n<p>Handling high concurrency with high performance and efficiency has\nalways been the key benefit of deploying nginx. However, there\nare now even more interesting benefits.</p>\n\n<p>In the last few years, web architects have embraced the idea of\ndecoupling and separating their application infrastructure from the\nweb server. However, what would previously exist in the form of a LAMP\n(Linux, Apache, MySQL, PHP, Python or Perl)-based website, might now\nbecome not merely a LEMP-based one (`E\' standing for `Engine\nx\'), but more and more often an exercise in pushing the web server to\nthe edge of the infrastructure and integrating the same or a revamped\nset of applications and database tools around it in a different way.</p>\n\n<p>nginx is very well suited for this, as it provides the key features\nnecessary to conveniently offload concurrency, latency processing, SSL\n(secure sockets layer), static content, compression and caching,\nconnections and requests throttling, and even HTTP media streaming\nfrom the application layer to a much more efficient edge web server\nlayer. It also allows integrating directly with memcached/Redis or\nother \"NoSQL\" solutions, to boost performance when serving a large\nnumber of concurrent users.</p>\n\n<p>With recent flavors of development kits and programming languages\ngaining wide use, more and more companies are changing their\napplication development and deployment habits. nginx has become one of\nthe most important components of these changing paradigms, and it\nhas already helped many companies start and develop their web services\nquickly and within their budgets.</p>\n\n<p>The first lines of nginx were written in 2002. In 2004 it was released\nto the public under the two-clause BSD license. The number of nginx\nusers has been growing ever since, contributing ideas, and submitting\nbug reports, suggestions and observations that have been immensely\nhelpful and beneficial for the entire community.</p>\n\n<p>The nginx codebase is original and was written entirely from scratch\nin the C programming language. nginx has been ported to many\narchitectures and operating systems, including Linux, FreeBSD,\nSolaris, Mac OS X, AIX and Microsoft Windows. nginx has its own\nlibraries and with its standard modules does not use much beyond the\nsystem\'s C library, except for zlib, PCRE and OpenSSL which can be\noptionally excluded from a build if not needed or because of potential\nlicense conflicts.</p>\n\n<p>A few words about the Windows version of nginx. While nginx works in a\nWindows environment, the Windows version of nginx is more like a\nproof-of-concept rather than a fully functional port. There are\ncertain limitations of the nginx and Windows kernel architectures that\ndo not interact well at this time. The known issues of the nginx\nversion for Windows include a much lower number of concurrent\nconnections, decreased performance, no caching and no bandwidth\npolicing. Future versions of nginx for Windows will match the\nmainstream functionality more closely.</p>\n\n</div><div><h2>14.2. Overview of nginx Architecture</h2>\n\n<p>Traditional process- or thread-based models of handling concurrent\nconnections involve handling each connection with a separate process\nor thread, and blocking on network or input/output\noperations. Depending on the application, it can be very inefficient\nin terms of memory and CPU consumption. Spawning a separate process or\nthread requires preparation of a new runtime environment, including\nallocation of heap and stack memory, and the creation of a new\nexecution context. Additional CPU time is also spent creating these\nitems, which can eventually lead to poor performance due to thread\nthrashing on excessive context switching. All of these complications\nmanifest themselves in older web server architectures like\nApache\'s. This is a tradeoff between offering a rich set of generally\napplicable features and optimized usage of server resources.</p>\n\n<p>From the very beginning, nginx was meant to be a specialized tool to\nachieve more performance, density and economical use of server\nresources while enabling dynamic growth of a website, so it has\nfollowed a different model. It was actually inspired by the ongoing\ndevelopment of advanced event-based mechanisms in a variety of\noperating systems. What resulted is a modular, event-driven,\nasynchronous, single-threaded, non-blocking architecture which became\nthe foundation of nginx code.</p>\n\n<p>nginx uses multiplexing and event notifications heavily, and dedicates\nspecific tasks to separate processes. Connections are processed in a\nhighly efficient run-loop in a limited number of single-threaded\nprocesses called <code>worker</code>s. Within each <code>worker</code> nginx can\nhandle many thousands of concurrent connections and requests per\nsecond.</p>\n\n<h3>Code Structure</h3>\n\n<p>The nginx <code>worker</code> code includes the core and the functional\nmodules. The core of nginx is responsible for maintaining a tight\nrun-loop and executing appropriate sections of modules\' code on each\nstage of request processing. Modules constitute most of the\npresentation and application layer functionality. Modules read from\nand write to the network and storage, transform content, do outbound\nfiltering, apply server-side include actions and pass the requests to\nthe upstream servers when proxying is activated.</p>\n\n<p>nginx\'s modular architecture generally allows developers to extend the\nset of web server features without modifying the nginx core. nginx\nmodules come in slightly different incarnations, namely core modules,\nevent modules, phase handlers, protocols, variable handlers, filters,\nupstreams and load balancers. At this time, nginx doesn\'t support\ndynamically loaded modules; i.e., modules are compiled along with the\ncore at build stage. However, support for loadable modules and ABI is\nplanned for the future major releases. More detailed information about\nthe roles of different modules can be found in \n<a href=\"http://www.aosabook.org/en/nginx.html#sec.nginx.internals\">Section 14.4</a>.</p>\n\n<p>While handling a variety of actions associated with accepting,\nprocessing and managing network connections and content retrieval,\nnginx uses event notification mechanisms and a number of disk I/O\nperformance enhancements in Linux, Solaris and BSD-based operating\nsystems, like <code>kqueue</code>, <code>epoll</code>, and <code>event ports</code>. The\ngoal is to provide as many hints to the operating system as possible,\nin regards to obtaining timely asynchronous feedback for inbound and\noutbound traffic, disk operations, reading from or writing to sockets,\ntimeouts and so on. The usage of different methods for multiplexing\nand advanced I/O operations is heavily optimized for every Unix-based\noperating system nginx runs on.</p>\n\n<p>A high-level overview of nginx architecture is presented in\n<a href=\"http://www.aosabook.org/en/nginx.html#fig.nginx.arch\">Figure 14.1</a>.</p>\n\n<img src=\"http://www.aosabook.org/images/nginx/architecture.png\" alt=\"architecture.png\" />Figure 14.1: Diagram of nginx\'s architecture<h3>Workers Model</h3>\n\n<p>As previously mentioned, nginx doesn\'t spawn a process or thread for\nevery connection. Instead, <code>worker</code> processes accept new requests\nfrom a shared \"listen\" socket and execute a highly efficient\nrun-loop inside each <code>worker</code> to process thousands of connections\nper <code>worker</code>. There\'s no specialized arbitration or distribution of\nconnections to the <code>worker</code>s in nginx; this work is done by the OS \nkernel mechanisms. Upon startup, an initial set of\nlistening sockets is created. <code>worker</code>s then continuously accept,\nread from and write to the sockets while processing HTTP requests and\nresponses.</p>\n\n<p>The run-loop is the most complicated part of the nginx <code>worker</code>\ncode. It includes comprehensive inner calls and relies heavily on the\nidea of asynchronous task handling. Asynchronous operations are\nimplemented through modularity, event notifications, extensive use of\ncallback functions and fine-tuned timers. Overall, the key principle\nis to be as non-blocking as possible. The only situation where nginx\ncan still block is when there\'s not enough disk storage performance\nfor a <code>worker</code> process.</p>\n\n<p>Because nginx does not fork a process or thread per connection, memory\nusage is very conservative and extremely efficient in the vast\nmajority of cases. nginx conserves CPU cycles as well because there\'s\nno ongoing create-destroy pattern for processes or threads. What nginx\ndoes is check the state of the network and storage, initialize new\nconnections, add them to the run-loop, and process asynchronously\nuntil completion, at which point the connection is deallocated and\nremoved from the run-loop. Combined with the careful use of\n<code>syscall</code>s and an accurate implementation of supporting\ninterfaces like pool and slab memory allocators, nginx typically\nachieves moderate-to-low CPU usage even under extreme workloads.</p>\n\n<p>Because nginx spawns several <code>worker</code>s to handle connections, it\nscales well across multiple cores. Generally, a separate <code>worker</code>\nper core allows full utilization of multicore architectures, and\nprevents thread thrashing and lock-ups. There\'s no resource starvation\nand the resource controlling mechanisms are isolated within\nsingle-threaded <code>worker</code> processes. This model also allows more\nscalability across physical storage devices, facilitates more disk\nutilization and avoids blocking on disk I/O. As a result, server\nresources are utilized more efficiently with the workload shared\nacross several workers.</p>\n\n<p>With some disk use and CPU load patterns, the number of nginx\n<code>worker</code>s should be adjusted. The rules are somewhat basic here,\nand system administrators should try a couple of configurations for\ntheir workloads. General recommendations might be the following: if\nthe load pattern is CPU intensive—for instance, handling a lot of\nTCP/IP, doing SSL, or compression—the number of nginx <code>worker</code>s\nshould match the number of CPU cores; if the load is mostly disk I/O\nbound—for instance, serving different sets of content from storage,\nor heavy proxying—the number of <code>worker</code>s might be one and a half\nto two times the number of cores. Some engineers choose the number of\n<code>worker</code>s based on the number of individual storage units\ninstead, though efficiency of this approach depends on the type and\nconfiguration of disk storage.</p>\n\n<p>One major problem that the developers of nginx will be solving in upcoming\nversions is how to avoid most of the blocking on disk I/O. At the moment, if\nthere\'s not enough storage performance to serve disk operations generated by a\nparticular <code>worker</code>, that <code>worker</code> may still block on reading/writing\nfrom disk. A number of mechanisms and configuration file directives exist to\nmitigate such disk I/O blocking scenarios. Most notably, combinations of\noptions like sendfile and AIO typically produce a lot of headroom for disk\nperformance. An nginx installation should be planned based on the data set,\nthe amount of memory available for nginx, and the underlying storage architecture.</p>\n\n<p>Another problem with the existing <code>worker</code> model is related to\nlimited support for embedded scripting. For one, with the standard\nnginx distribution, only embedding Perl scripts is supported. There is\na simple explanation for that: the key problem is the\npossibility of an embedded script to block on any\noperation or exit unexpectedly. Both types of behavior would\nimmediately lead to a situation where the worker is hung, affecting\nmany thousands of connections at once. More work is planned to make\nembedded scripting with nginx simpler, more reliable and suitable for\na broader range of applications.</p>\n\n<h3>nginx Process Roles</h3>\n\n<p>nginx runs several processes in memory; there is a single master\nprocess and several <code>worker</code> processes. There are also a couple\nof special purpose processes, specifically a cache loader and cache\nmanager. All processes are single-threaded in version 1.x of\nnginx. All processes primarily use shared-memory mechanisms for\ninter-process communication. The master process is run as the\n<code>root</code> user. The cache loader, cache manager and <code>worker</code>s\nrun as an unprivileged user.</p>\n\n<p>The master process is responsible for the following tasks:</p>\n\n<ul><li>\n reading and validating configuration\n</li>\n\n<li>\n creating, binding and closing sockets\n</li>\n\n<li>\n starting, terminating and maintaining the configured number of\n  <code>worker</code> processes\n</li>\n\n<li>\n reconfiguring without service interruption\n</li>\n\n<li>\n controlling non-stop binary upgrades (starting new binary and\nrolling back if necessary)\n</li>\n\n<li>\n re-opening log files\n</li>\n\n<li>\n compiling embedded Perl scripts\n</li>\n\n</ul><p>The <code>worker</code> processes accept, handle and process connections\nfrom clients, provide reverse proxying and filtering functionality and\ndo almost everything else that nginx is capable of. In regards to\nmonitoring the behavior of an nginx instance, a system administrator\nshould keep an eye on <code>worker</code>s as they are the processes\nreflecting the actual day-to-day operations of a web server.</p>\n\n<p>The cache loader process is responsible for checking the on-disk cache\nitems and populating nginx\'s in-memory database with cache\nmetadata. Essentially, the cache loader prepares nginx instances to\nwork with files already stored on disk in a specially allocated\ndirectory structure. It traverses the directories, checks cache\ncontent metadata, updates the relevant entries in shared memory and\nthen exits when everything is clean and ready for use.</p>\n\n<p>The cache manager is mostly responsible for cache expiration and\ninvalidation. It stays in memory during normal nginx operation and it\nis restarted by the master process in the case of failure.</p>\n\n<h3>Brief Overview of nginx Caching</h3>\n\n<p>Caching in nginx is implemented in the form of hierarchical data\nstorage on a filesystem. Cache keys are configurable, and different\nrequest-specific parameters can be used to control what gets into the\ncache. Cache keys and cache metadata are stored in the shared memory\nsegments, which the cache loader, cache manager and <code>worker</code>s\ncan access. Currently there is not any in-memory caching of files,\nother than optimizations implied by the operating system\'s virtual\nfilesystem mechanisms. Each cached response is placed in a different\nfile on the filesystem. The hierarchy (levels and naming details) are\ncontrolled through nginx configuration directives. When a response is\nwritten to the cache directory structure, the path and the name of the\nfile are derived from an MD5 hash of the proxy URL.</p>\n\n<p>The process for placing content in the cache is as follows:\nWhen nginx reads the response from an upstream server, the\ncontent is first written to a temporary file outside of the cache\ndirectory structure. When nginx finishes processing the request it\nrenames the temporary file and moves it to the cache directory. If the\ntemporary files directory for proxying is on another file system, the\nfile will be copied, thus it\'s recommended to keep both temporary and\ncache directories on the same file system. It is also quite safe to\ndelete files from the cache directory structure when they need to be\nexplicitly purged. There are third-party extensions for nginx\nwhich make it possible to control cached content remotely,\nand more work is planned to integrate this functionality in the main\ndistribution.</p>\n\n</div><div><h2>14.3. nginx Configuration</h2>\n\n<p>nginx\'s configuration system was inspired by Igor Sysoev\'s experiences with\nApache. His main insight was \nthat a scalable configuration system\nis essential for a web server. The main scaling problem was\nencountered when maintaining large complicated configurations with\nlots of virtual servers, directories, locations and datasets. In a\nrelatively big web setup it can be a nightmare if not done properly\nboth at the application level and by the system engineer himself.</p>\n\n<p>As a result, nginx configuration was designed to simplify day-to-day\noperations and to provide an easy means for further expansion of web\nserver configuration.</p>\n\n<p>nginx configuration is kept in a number of plain text files which\ntypically reside in <code>/usr/local/etc/nginx</code> or\n<code>/etc/nginx</code>. The main configuration file is usually called\n<code>nginx.conf</code>. To keep it uncluttered, parts of the configuration\ncan be put in separate files which can be automatically included in\nthe main one. However, it should be noted here that nginx does not\ncurrently support Apache-style distributed configurations (i.e.,\n<code>.htaccess</code> files). All of the configuration relevant to nginx\nweb server behavior should reside in a centralized set of\nconfiguration files.</p>\n\n<p>The configuration files are initially read and verified by the master\nprocess. A compiled read-only form of the nginx configuration is\navailable to the <code>worker</code> processes as they are forked from the\nmaster process. Configuration structures are automatically shared by\nthe usual virtual memory management mechanisms.</p>\n\n<p>nginx configuration has several different contexts for <code>main</code>,\n<code>http</code>, <code>server</code>, <code>upstream</code>, <code>location</code> (and also\n<code>mail</code> for mail proxy) blocks of directives. Contexts never\noverlap. For instance, there is no such thing as putting a\n<code>location</code> block in the <code>main</code> block of directives. Also, to\navoid unnecessary ambiguity there isn\'t anything like a \"global web\nserver\" configuration. nginx configuration is meant to be clean and\nlogical, allowing users to maintain complicated configuration files\nthat comprise thousands of directives. In a private conversation, \nSysoev said, \n\"Locations, directories, and other blocks in the global server\nconfiguration are the features I never liked in Apache, so this is the\nreason why they were never implemented in nginx.\"</p>\n\n<p>Configuration syntax, formatting and definitions follow a so-called\nC-style convention. This particular approach to making configuration\nfiles is already being used by a variety of open source and\ncommercial software applications. By design, C-style configuration is well-suited \nfor nested descriptions, being logical and easy to create, read\nand maintain, and liked by many engineers. C-style configuration of\nnginx can also be easily automated.</p>\n\n<p>While some of the nginx directives resemble certain parts of Apache\nconfiguration, setting up an nginx instance is quite a different\nexperience. For instance, rewrite rules are supported by nginx, though\nit would require an administrator to manually adapt a legacy Apache\nrewrite configuration to match nginx style. The implementation of the\nrewrite engine differs too.</p>\n\n<p>In general, nginx settings also provide support for several original\nmechanisms that can be very useful as part of a lean web server\nconfiguration. It makes sense to briefly mention variables and the\n<code>try_files</code> directive, which are somewhat unique to\nnginx. Variables in nginx were developed to provide an additional \neven-more-powerful mechanism to control run-time configuration of a web\nserver. Variables are optimized for quick evaluation and are\ninternally pre-compiled to indices. Evaluation is done on demand;\ni.e., the value of a variable is typically calculated only once and\ncached for the lifetime of a particular request. Variables can be used\nwith different configuration directives, providing additional\nflexibility for describing conditional request processing\nbehavior. </p>\n\n<p>The <code>try_files</code> directive was initially meant to\ngradually replace conditional <code>if</code> configuration statements in a\nmore proper way, and it was designed to quickly and efficiently\ntry/match against different URI-to-content mappings. Overall, the\n<code>try_files</code> directive works well and can be extremely efficient\nand useful. It is recommended that the reader thoroughly check the\n<a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files\"><code>try_files</code> directive</a> and adopt its use whenever applicable.</p>\n\n</div><div><h2>14.4. nginx Internals</h2>\n\n<p>As was mentioned before, the nginx codebase consists of a core and a\nnumber of modules. The core of nginx is responsible for providing the\nfoundation of the web server, web and mail reverse proxy\nfunctionalities; it enables the use of underlying network protocols,\nbuilds the necessary run-time environment, and ensures seamless\ninteraction between different modules. However, most of the protocol-\nand application-specific features are done by nginx modules, not the\ncore.</p>\n\n<p>Internally, nginx processes connections through a pipeline, or chain,\nof modules. In other words, for every operation there\'s a module which\nis doing the relevant work; e.g., compression, modifying content,\nexecuting server-side includes, communicating to the upstream\napplication servers through FastCGI or uwsgi protocols, or talking to\nmemcached.</p>\n\n<p>There are a couple of nginx modules that sit somewhere between the\ncore and the real \"functional\" modules. These modules are\n<code>http</code> and <code>mail</code>. These two modules provide an\nadditional level of abstraction between the core and lower-level\ncomponents. In these modules, the handling of the sequence of events\nassociated with a respective application layer protocol like HTTP,\nSMTP or IMAP is implemented. In combination with the nginx core, these\nupper-level modules are responsible for maintaining the right order of\ncalls to the respective functional modules. While the HTTP protocol is\ncurrently implemented as part of the <code>http</code> module, there\nare plans to separate it into a functional module in the future, due\nto the need to support other protocols like SPDY (see \"<a href=\"http://www.chromium.org/spdy/spdy-whitepaper\">SPDY: An\nexperimental protocol for a faster web</a>\").</p>\n\n<p>The functional modules can be divided into event modules, phase\nhandlers, output filters, variable handlers, protocols, upstreams and\nload balancers. Most of these modules complement the HTTP\nfunctionality of nginx, though event modules and protocols are also\nused for <code>mail</code>. Event modules provide a particular OS-dependent\nevent notification mechanism like <code>kqueue</code> or <code>epoll</code>.  The\nevent module that nginx uses depends on the operating system\ncapabilities and build configuration. Protocol modules allow nginx to\ncommunicate through HTTPS, TLS/SSL, SMTP, POP3 and IMAP.</p>\n\n<p>A typical HTTP request processing cycle looks like the following.</p>\n\n<ol><li>\n Client sends HTTP request.\n</li>\n\n<li>\n nginx core chooses the appropriate phase handler based on the\n  configured location matching the request.\n</li>\n\n<li>\n If configured to do so, a load balancer picks an upstream server\n  for proxying.\n</li>\n\n<li>\n Phase handler does its job and passes each output buffer to the first\n  filter.\n</li>\n\n<li>\n First filter passes the output to the second filter.\n</li>\n\n<li>\n Second filter passes the output to third (and so on).\n</li>\n\n<li>\n Final response is sent to the client.\n</li>\n\n</ol><p>nginx module invocation is extremely customizable. It is performed\nthrough a series of callbacks using pointers to the executable\nfunctions. However, the downside of this is that it may place a big\nburden on programmers who would like to write their own modules,\nbecause they must define exactly how and when the module should\nrun. Both the nginx API and developers\' documentation are being\nimproved and made more available to alleviate this.</p>\n\n<p>Some examples of where a module can attach are:</p>\n\n<ul><li>\n Before the configuration file is read and processed\n</li>\n\n<li>\n For each configuration directive for the location and the server\n  where it appears\n</li>\n\n<li>\n When the main configuration is initialized\n</li>\n\n<li>\n When the server (i.e., host/port) is initialized\n</li>\n\n<li>\n When the server configuration is merged with the main\n  configuration\n</li>\n\n<li>\n When the location configuration is initialized or merged with\n  its parent server configuration\n</li>\n\n<li>\n When the master process starts or exits\n</li>\n\n<li>\n When a new worker process starts or exits\n</li>\n\n<li>\n When handling a request\n</li>\n\n<li>\n When filtering the response header and the body\n</li>\n\n<li>\n When picking, initiating and re-initiating a request to an\n  upstream server\n</li>\n\n<li>\n When processing the response from an upstream server\n</li>\n\n<li>\n When finishing an interaction with an upstream server\n</li>\n\n</ul><p>Inside a <code>worker</code>, the sequence of actions leading to the\nrun-loop where the response is generated looks like the following:</p>\n\n<ol><li>\n Begin <code>ngx_worker_process_cycle()</code>.\n</li>\n\n<li>\n Process events with OS specific mechanisms (such as <code>epoll</code>\n  or <code>kqueue</code>).\n</li>\n\n<li>\n Accept events and dispatch the relevant actions.\n</li>\n\n<li>\n Process/proxy request header and body.\n</li>\n\n<li>\n Generate response content (header, body) and stream it to the\n  client.\n</li>\n\n<li>\n Finalize request.\n</li>\n\n<li>\n Re-initialize timers and events.\n</li>\n\n</ol><p>The run-loop itself (steps 5 and 6) ensures incremental generation of\na response and streaming it to the client.</p>\n\n<p>A more detailed view of processing an HTTP request might look like\nthis:</p>\n\n<ol><li>\n Initialize request processing.\n</li>\n\n<li>\n Process header.\n</li>\n\n<li>\n Process body.\n</li>\n\n<li>\n Call the associated handler.\n</li>\n\n<li>\n Run through the processing phases.\n</li>\n\n</ol><p>Which brings us to the phases. When nginx handles an HTTP request, it\npasses it through a number of processing phases. At each phase there\nare handlers to call. In general, phase handlers process a request and\nproduce the relevant output. Phase handlers are attached to the\nlocations defined in the configuration file.</p>\n\n<p>Phase handlers typically do four things: get the location\nconfiguration, generate an appropriate response, send the header, and\nsend the body. A handler has one argument: a specific structure\ndescribing the request. A request structure has a lot of useful\ninformation about the client request, such as the request method, URI,\nand header.</p>\n\n<p>When the HTTP request header is read, nginx does a lookup of the\nassociated virtual server configuration. If the virtual server is\nfound, the request goes through six phases:</p>\n\n<ol><li>\n server rewrite phase\n</li>\n\n<li>\n location phase\n</li>\n\n<li>\n location rewrite phase (which can bring the request back to the\nprevious phase)\n</li>\n\n<li>\n access control phase\n</li>\n\n<li>\n try_files phase\n</li>\n\n<li>\n log phase\n</li>\n\n</ol><p>In an attempt to generate the necessary content in response to the\nrequest, nginx passes the request to a suitable content\nhandler. Depending on the exact location configuration, nginx may try\nso-called unconditional handlers first, like <code>perl</code>,\n<code>proxy_pass</code>, <code>flv</code>, <code>mp4</code>, etc. If the request does\nnot match any of the above content handlers, it is picked by one of\nthe following handlers, in this exact order: <code>random index</code>,\n<code>index</code>, <code>autoindex</code>, <code>gzip_static</code>, <code>static</code>.</p>\n\n<p>Indexing module details can be found in the nginx documentation, but\nthese are the modules which handle requests with a trailing slash. If\na specialized module like <code>mp4</code> or <code>autoindex</code> isn\'t\nappropriate, the content is considered to be just a file or directory\non disk (that is, static) and is served by the <code>static</code> content\nhandler. For a directory it would automatically rewrite the URI so\nthat the trailing slash is always there (and then issue an HTTP\nredirect).</p>\n\n<p>The content handlers\' content is then passed to the filters. Filters\nare also attached to locations, and there can be several filters\nconfigured for a location. Filters do the task of manipulating the\noutput produced by a handler. The order of filter execution is\ndetermined at compile time. For the out-of-the-box filters it\'s\npredefined, and for a third-party filter it can be configured at the\nbuild stage. In the existing nginx implementation, filters can only do\noutbound changes and there is currently no mechanism to write and\nattach filters to do input content transformation. Input filtering\nwill appear in future versions of nginx.</p>\n\n<p>Filters follow a particular design pattern. A filter gets called,\nstarts working, and calls the next filter until the final filter in\nthe chain is called. After that, nginx finalizes the response. Filters\ndon\'t have to wait for the previous filter to finish. The next filter\nin a chain can start its own work as soon as the input from the\nprevious one is available (functionally much like the Unix\npipeline). In turn, the output response being generated can be passed\nto the client before the entire response from the upstream server is\nreceived.</p>\n\n<p>There are header filters and body filters; nginx feeds the header and\nthe body of the response to the associated filters separately.</p>\n\n<p>A header filter consists of three basic steps:</p>\n\n<ol><li>\n Decide whether to operate on this response.\n</li>\n\n<li>\n Operate on the response.\n</li>\n\n<li>\n Call the next filter.\n</li>\n\n</ol><p>Body filters transform the generated content. Examples of body filters\ninclude:</p>\n\n<ul><li>\n server-side includes\n</li>\n\n<li>\n XSLT filtering\n</li>\n\n<li>\n image filtering (for instance, resizing images on the fly)\n</li>\n\n<li>\n charset modification\n</li>\n\n<li>\n <code>gzip</code> compression\n</li>\n\n<li>\n chunked encoding\n</li>\n\n</ul><p>After the filter chain, the response is passed to the writer. Along\nwith the writer there are a couple of additional special purpose\nfilters, namely the <code>copy</code> filter, and the <code>postpone</code>\nfilter. The <code>copy</code> filter is responsible for filling memory\nbuffers with the relevant response content which might be stored in a\nproxy temporary directory. The <code>postpone</code> filter is used for\nsubrequests.</p>\n\n<p>Subrequests are a very important mechanism for request/response\nprocessing. Subrequests are also one of the most powerful aspects of\nnginx. With subrequests nginx can return the results from a different\nURL than the one the client originally requested. Some web frameworks\ncall this an internal redirect. However, nginx goes further—not only\ncan filters perform multiple subrequests and combine the outputs into\na single response, but subrequests can also be nested and\nhierarchical. A subrequest can perform its own sub-subrequest, and a\nsub-subrequest can initiate sub-sub-subrequests. Subrequests can map\nto files on the hard disk, other handlers, or upstream\nservers. Subrequests are most useful for inserting additional content\nbased on data from the original response. For example, the SSI\n(server-side include) module uses a filter to parse the contents of\nthe returned document, and then replaces <code>include</code> directives\nwith the contents of specified URLs. Or, it can be an example of making\na filter that treats the entire contents of a document as a URL to be\nretrieved, and then appends the new document to the URL itself.</p>\n\n<p>Upstream and load balancers are also worth describing\nbriefly. Upstreams are used to implement what can be identified as a\ncontent handler which is a reverse proxy (<code>proxy_pass</code>\nhandler).\nUpstream modules mostly prepare the request to be sent to an upstream\nserver (or \"backend\") and receive the response from the upstream\nserver. There are no calls to output filters here. What an upstream\nmodule does exactly is set callbacks to be invoked when the upstream\nserver is ready to be written to and read from. Callbacks implementing\nthe following functionality exist:</p>\n\n<ul><li>\n Crafting a request buffer (or a chain of them) to be sent to the\n  upstream server\n</li>\n\n<li>\n Re-initializing/resetting the connection to the upstream server\n  (which happens right before creating the request again)\n</li>\n\n<li>\n Processing the first bits of an upstream response and saving\n  pointers to the payload received from the upstream server\n</li>\n\n<li>\n Aborting requests (which happens when the client terminates\n  prematurely)\n</li>\n\n<li>\n Finalizing the request when nginx finishes reading from the\n  upstream server\n</li>\n\n<li>\n Trimming the response body (e.g. removing a trailer)\n</li>\n\n</ul><p>Load balancer modules attach to the <code>proxy_pass</code> handler to\nprovide the ability to choose an upstream server when more than one\nupstream server is eligible. A load balancer registers an enabling\nconfiguration file directive, provides additional upstream\ninitialization functions (to resolve upstream names in DNS, etc.),\ninitializes the connection structures, decides where to route the\nrequests, and updates stats\ninformation. Currently nginx supports two standard disciplines for\nload balancing to upstream servers: round-robin and ip-hash.</p>\n\n<p>Upstream and load balancing handling mechanisms include algorithms to\ndetect failed upstream servers and to re-route new requests to the\nremaining ones—though a lot of additional work is planned to enhance\nthis functionality. In general, more work on load balancers is\nplanned, and in the next versions of nginx the mechanisms for\ndistributing the load across different upstream servers as well as\nhealth checks will be greatly improved.</p>\n\n<p>There are also a couple of other interesting modules which provide an\nadditional set of variables for use in the configuration file. While\nthe variables in nginx are created and updated across different\nmodules, there are two modules that are entirely dedicated to\nvariables: <code>geo</code> and <code>map</code>. The <code>geo</code> module is used to\nfacilitate tracking of clients based on their IP addresses. This\nmodule can create arbitrary variables that depend on the client\'s IP\naddress. The other module, <code>map</code>, allows for the creation of\nvariables from other variables, essentially providing the ability to\ndo flexible mappings of hostnames and other run-time variables. This\nkind of module may be called the variable handler.</p>\n\n<p>Memory allocation mechanisms implemented inside a single nginx\n<code>worker</code> were, to some extent, inspired by Apache. A high-level\ndescription of nginx memory management would be the following: For\neach connection, the necessary memory buffers are dynamically\nallocated, linked, used for storing and manipulating the header and\nbody of the request and the response, and then freed upon connection\nrelease. It is very important to note that nginx tries to avoid\ncopying data in memory as much as possible and most of the data is\npassed along by pointer values, not by calling <code>memcpy</code>.</p>\n\n<p>Going a bit deeper, when the response is generated by a module, the\nretrieved content is put in a memory buffer which is then added to a\nbuffer chain link. Subsequent processing works with this buffer chain\nlink as well. Buffer chains are quite complicated in nginx because\nthere are several processing scenarios which differ depending on the module\ntype. For instance, it can be quite tricky to manage the buffers\nprecisely while implementing a body filter module. Such a module can\nonly operate on one buffer (chain link) at a time and it must decide\nwhether to overwrite the input buffer, replace the buffer with a newly\nallocated buffer, or insert a new buffer before or after the buffer in\nquestion. To complicate things, sometimes a module will receive\nseveral buffers so that it has an incomplete buffer chain that it must\noperate on. However, at this time nginx provides only a low-level API\nfor manipulating buffer chains, so before doing any actual\nimplementation a third-party module developer should become really\nfluent with this arcane part of nginx.</p>\n\n<p>A note on the above approach is that there are memory buffers allocated for the\nentire life of a connection, thus for long-lived connections some extra memory\nis kept. At the same time, on an idle keepalive connection, nginx spends\njust 550 bytes of memory. A possible optimization for future releases of nginx\nwould be to reuse and share memory buffers for long-lived connections.</p>\n\n<p>The task of managing memory allocation is done by the nginx pool\nallocator. Shared memory areas are used to accept mutex, cache\nmetadata, the SSL session cache and the information associated with\nbandwidth policing and management (limits). There is a slab allocator\nimplemented in nginx to manage shared memory allocation. To allow\nsimultaneous safe use of shared memory, a number of locking mechanisms\nare available (mutexes and semaphores). In order to organize complex\ndata structures, nginx also provides a red-black tree\nimplementation. Red-black trees are used to keep cache metadata in\nshared memory, track non-regex location definitions and for a couple of\nother tasks.</p>\n\n<p>Unfortunately, all of the above was never described in a consistent and\nsimple manner, making the job of developing third-party extensions for\nnginx quite complicated. Although some good documents on nginx\ninternals exist—for instance, those produced by Evan Miller—such\ndocuments required a huge reverse engineering effort, and the\nimplementation of nginx modules is still a black art for many.</p>\n\n<p>Despite certain difficulties associated with third-party module\ndevelopment, the nginx user community recently saw a lot of useful\nthird-party modules. There is, for instance, an embedded Lua\ninterpreter module for nginx, additional modules for load balancing,\nfull WebDAV support, advanced cache control and other interesting\nthird-party work that the authors of this chapter encourage and will\nsupport in the future.</p>\n\n</div>',1),(264,'Concurrently JavaScript (1) | getiblog','http://blog.getify.com/concurrently-javascript-1/',0,0,'\n						\n						<p>What is concurrency? How is it different from parallelism? JavaScript is single-threaded on the event loop, so how does its asynchrony fit into the mix?</p>\n<p>These are great questions, but sadly, I think most JS developers are not really asking them enough. The concepts behind writing concurrent code are incredibly important, but we tend to only focus on the API provided to us by some library or framework. These APIs have a tremendous capability to shape our thoughts about the underlying functionalities, and often not in accurate or productive ways.</p>\n<p>I want us to talk first about the concepts around concurrency before we focus on what we can do with some API or pattern. <strong>Don’t worry:</strong> following parts of this blog post series will talk more about APIs, if that’s what really gets you excited. But don’t skip over these concepts.</p>\n<h3>Parallelism</h3>\n<p>Parallelism in computing is when two or more <em>things</em> are happening at exactly the same instant. Practically speaking, this happens only when there’s two separate cores in the system’s CPU, so at any given moment, different electrical impulses are firing.</p>\n<p>BTW, the <em>things</em> we’re talking about happening in parallel are not <em>big</em> tasks like network requests and responses. Instead, we’re talking about very low-level actions, like adding two numbers together or performing a bitwise operation on a single number. Let’s call these <strong>operations</strong> rather than <strong>tasks</strong>.</p>\n<p>It may be hard to picture it, but the high-level things we do in programming like sorting numbers, making database queries, or styling the text with a custom font – they really do break down to (lots of) these very low-level operations.</p>\n<h4>Concurrency</h4>\n<p>Concurrency means two or more <em>things</em> are happening in the same time period. But here, the <em>things</em> are tasks, not operations. So, compare concurrency to parallelism.</p>\n<p>See how they’re similar but also distinct?</p>\n<p>Concurrency speaks to the idea of having two high-level tasks – like an Ajax request/response cycle and a repainting of the page after a scroll event – happening “at the same time”.</p>\n<p>Each task’s low-level operations might or might not be happening in parallel. Concurrency doesn’t necessarily imply parallelism, but includes parallelism conceptually.</p>\n<h4>Threads</h4>\n<p>Parallelism is usually modeled in programming through a construct called <strong>threads</strong>.</p>\n<p>In a really rough sense, we can think of a thread as an ordered list of operations to be performed by the system. A system level thread would be the set of tasks that a CPU core is going to perform. So if a computer has 4 cores, there would be at most 4 system threads that could be processing 4 separate lists of operations.</p>\n<p>That entire set of operations could be conceptually composed together to look like one or more high level tasks we might be working with in our programs.</p>\n<p>Of course, if your computer only has 4 cores, and thus only 4 possible system level threads at any given moment, that’s going to be rather limiting and difficult for the dozen or more programs you have open right now to trade off on what they need to get done.</p>\n<p>So your operating system will provide OS level (virtual) threads on demand to programs that ask for them. At any given moment, there could be dozens, hundreds, even thousands of these spinning. It’s up to the OS to <em>schedule</em> these virtual threads across the actual system threads (CPU cores).</p>\n<p>The OS is pretty good at this scheduling, so even if there are many more virtual threads than system threads, the processing of all those operations will still procede as if they’re all happening truly in parallel.</p>\n<h3>Async</h3>\n<p>Now, what about asynchrony? JavaScript programmers will likely be familiar with the notion that JS is asynchronous, and some will have even heard that JavaScript is “single threaded”.</p>\n<p>That’s true. From the language perspective, the JS code makes the assumption that no two lines in the same program instance will ever be executing at exactly the same time.</p>\n<p>In fact, normal JS functions have “run to completion” semantics, meaning that in fact no function that’s currently running can be preemtively interrupted by another function. Of course, function <strong>A</strong> can <em>call</em> function <strong>B</strong>. But <strong>B</strong> can never be scheduled to start running in parallel with <strong>A</strong>.</p>\n<p>That means <strong>A</strong> never needs to worry about any side effects that <strong>B</strong> may have on the program state, except from the moment <strong>A</strong> invokes <strong>B</strong> to when <strong>B</strong> fully completes.</p>\n<p>This semantic is significantly simplifying in terms of ease of writing correct, bug-free code.</p>\n<p>JavaScript trades out the power of multi-threading parallelism for much simpler language mechanics. Because the event-loop is so efficient, JS programs can achieve impressive amounts of performance even though they’re only running on a single thread.</p>\n<p>Of course, JS programmers have some role to play there. The better we are at breaking up tasks into operations, the more effective the JS engine can be at scheduling these operations on the single thread event loop.</p>\n<h3>Coordination</h3>\n<p>When you have two separate lists of operations to perform that are entirely <em>independent</em> – they don’t depend on each other in ordering, and they don’t use any <em>shared resources</em> – modern parallel threaded programming is mostly a no brainer.</p>\n<p>But much more commonly, you need to coordinate some <em>dependency</em> between the threads. Coordination is the hard part.</p>\n<h4>Parallel</h4>\n<p>Imagine you have two different tasks to perform with several operations in each task. Let’s visualize that situation with two lists:</p>\n<p>Task A:</p>\n<ul><li>operation 1a</li>\n<li>operation 2a</li>\n<li>operation 3a</li>\n</ul><p>Task B:</p>\n<ul><li>operation 1b</li>\n<li>operation 2b</li>\n<li>operation 3b</li>\n</ul><p>If <strong>Task A</strong> is a file reading operation and <strong>Task B</strong> is a file writing operation, and they happen to be against the same file, you can probably imagine how the order of these operations is pretty important. If you can’t know, and indeed control predictably, the order of operations, your program will have a different outcome each time it runs.</p>\n<p>That sort of situation is not <em>always</em> an error, but it’s often seen as one, and given the label: “race condition”.</p>\n<p>To avoid race conditions, your program needs to decide what type of coordination needs to occur. For example, you may say <strong>A</strong> needs to wait for all of <strong>B</strong> to finish before it starts. That’s the easiest of the coordinations. But it’s also the least interesting to explore conceptually.</p>\n<p>What if <strong>1a</strong> is “open a file handle” and <strong>1b</strong> is “open a file handle”? It would seem like those two things could happen at the same time, right? But if <strong>2a</strong> is “read the contents of the file” and <strong>2b</strong> is “write some more text to the file”, the order of those two really matters. Finally, <strong>3a</strong> and <strong>3b</strong> are both “close the file handle”, and again, these operations are OK to happen in parallel.</p>\n<p>Our desired result may be that we want the new contents being written to the file to also be read back out. Or, we may want the opposite: reading before writing.</p>\n<p>The desired coordination could be visualized as such (the two columns are two separate threads where the operations happen in parallel):</p>\n<ul><li>1a     1b</li>\n<li>2b</li>\n<li>2a</li>\n<li>3a     3b</li>\n</ul><p>There’s several components of coordination to consider here. First, <strong>1a</strong> and <strong>1b</strong> need to be instructed to occur in parallel.</p>\n<p>Next, <strong>2b</strong> needs to be instructed to wait for both <strong>1a</strong> and <strong>1b</strong> to finish, regardless of which order that might occur in. Consequently, <strong>2a</strong> needs to wait for <strong>2b</strong> to finish before it runs. Finally, <strong>3a</strong> and <strong>3b</strong> need to wait for <strong>2a</strong> to finish, and then need to fire in parallel.</p>\n<h4>Async / Parallel</h4>\n<p>Whether we’re talking about truly parallel programming, or async (single-threaded) programming like in JS, coordination of concurrency is absolutely foundational for effective programming.</p>\n<p>The coordination we’re talking about here should be fairly straightforward to conceptualize. But modern concurrency is fantastically more complicated. We need to figure out how to build up higher patterns from lower level ideas.</p>\n<p>The coordination steps we just talked about can be thought of in two categories:</p>\n<ul><li>things happening in parallel</li>\n<li>things happening in series</li>\n</ul><p>For “things happening in parallel”, our only concern is that we be able to wait for all the <em>things</em> in a set to complete before moving on. For “things happening in series”, we need to be able to wait for a <em>thing</em> to complete before moving on to the next <em>thing</em>.</p>\n<p>Hopefully you can see how we can build all other higher order notions of concurrent programming by mixing and building on top of these two building blocks.</p>\n<h3>JavaScript Concurrency</h3>\n<p>The coordination concepts we’ve layed out in this post are expressable in some form or another in JS. But why would we choose one form over another? Because the understandability of our code is at least as important as the functionality of our code.</p>\n<p>Starting with the humble <strong>callback</strong>: to express a series, you call one callback at the end of the previous one. to express a parallel group, you call multiple callbacks in a row, and you use some shared (global or closured) varaiable(s) to maintain and coordinate the state.</p>\n<p><strong>Thunks</strong> are a pattern for organizing closure in callbacks to eliminate ordering (time) complexity. So it’s much easier to express both series and parallel with them. IOW, we have the same capability – concurrent coordination – but our chosen pattern improves the code readability.</p>\n<p><strong>Promises</strong> are like thunks but with more trustability and a nicer API. So, concurrency is even better with promises than with thunks. A series is a promise chain, and a parallel group is achieved with <code>Promise.all(..)</code>.</p>\n<p><strong>Generators</strong> (+ Promises) achieve almost perfect sync-looking async code, which makes expressing our coordinated concurrency look even closer to how our brains work.</p>\n<p>But there’s more higher order patterns for even more sophisticated concurrency. In subsequent parts of this blog post series, we’re going to look at <strong>reactive programming</strong> (event-concurrency) and <strong>CSP</strong> (channel-concurrency).</p>\n<p>Our goal is to get better about using the conceptuals we’ve covered here to express concurrency in our programs in more <em>reason</em>able ways.</p>\n						\n												<p>\r\n						<a href=\"http://twitter.com/share?_=1345615978&amp;original_referer=http%3A%2F%2Fblog.getify.com%2Fconcurrently-javascript-1%2F&amp;related=AustinJS%3AAustin.JavaScript%20monthly%20meetup%20group&amp;text=Concurrently+JavaScript+%28part+1%29&amp;url=http%3A%2F%2Fblog.getify.com%2Fconcurrently-javascript-1%2F\" class=\"twitter-share-button ignore-external-link\">Tweet</a>\r\n						</p>\n						\n						\n						\n						\n						\n						\n\n\n\n	\n	\n\n\n	\n						\n						\n					',1),(265,'PerfectlySoft/Perfect','https://github.com/PerfectlySoft/Perfect',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://perfect.org/get-involved.html\"><img src=\"https://camo.githubusercontent.com/c649d4c7875aa2071c273e726dd51f33320ccb99/68747470733a2f2f7777772e706572666563742e6f72672f696d616765732f6769746875622d62616e6e65722e6a7067\" alt=\"Get Involved\" /></a></p>\n\n\n\n<p><a href=\"https://camo.githubusercontent.com/2de532f84bb14fed9949eda6211747493d624664/68747470733a2f2f7777772e706572666563742e6f72672f696d616765732f69636f6e5f313238783132382e706e67\"><img src=\"https://camo.githubusercontent.com/2de532f84bb14fed9949eda6211747493d624664/68747470733a2f2f7777772e706572666563742e6f72672f696d616765732f69636f6e5f313238783132382e706e67\" alt=\"Perfect logo\" /></a>\n<a href=\"https://gitter.im/PerfectlySoft/Perfect?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Join the chat at https://gitter.im/PerfectlySoft/Perfect\" /></a></p>\n\n<p>Perfect is an application server which provides a framework for developing web and other REST services in the Swift programming language. Its primary focus is on facilitating mobile apps which require backend server software. It enables you to use one language for both front and back ends.</p>\n\n<p>Perfect operates using either its own stand-alone HTTP server or through FastCGI with Apache 2.4. It provides a system for loading your own Swift based modules at startup and for interfacing those modules with its built-in mustache template processing system.</p>\n\n<p>Perfect consists of the following components:</p>\n\n<ul><li><a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/PerfectLib/#perfectlib\">PerfectLib</a> - Framework components and utilities for client and server.\n\n</li>\n<li><a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/PerfectServer/#perfectserver\">Perfect Server</a> - Backend server supporting FastCGI or stand-alone HTTP.\n\n<ul><li>Perfect Server FastCGI - Server process which accepts connections over FastCGI.</li>\n<li>Perfect Server HTTP - Stand-alone HTTP server.</li>\n<li>Perfect Server HTTP App - Development focused stand-alone HTTP server OS X app.</li>\n</ul></li>\n<li>Connectors - Server-side connectivity.\n\n<ul><li><a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/Connectors/mod_perfect/#mod_perfect\">mod_perfect</a> - FastCGI connectivity for Apache 2.4.</li>\n<li><a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/Connectors/MySQL/#mysql\">MySQL</a> - Provides connectivity for MySQL databases.</li>\n<li><a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/Connectors/PostgreSQL/#postgresql\">PostgreSQL</a> - Provides connectivity for PostgreSQL databases.</li>\n<li><a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/Connectors/MongoDB/#mongodb\">MongoDB</a> - Provides connectivity for MongoDB databases (<em>in progress</em>).</li>\n</ul></li>\n<li><a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/Examples/#examples\">Examples</a> - A set of examples which show how to utilize Perfect.\n\n<ul><li>Mobile iOS Examples</li>\n<li>Web Site Examples</li>\n<li>Game Examples (coming soon!)</li>\n</ul></li>\n</ul><h2><a class=\"anchor\" href=\"https://github.com/PerfectlySoft/Perfect#getting-started\"><span class=\"octicon octicon-link\"></span></a>Getting Started</h2>\n\n<p>Check the <a href=\"https://github.com/PerfectlySoft/Perfect/blob/master/Examples/#examples\">README</a> in the Examples directory for further instructions.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/PerfectlySoft/Perfect#more-information\"><span class=\"octicon octicon-link\"></span></a>More Information</h2>\n\n<p>For more information on the Perfect project, please visit <a href=\"http://perfect.org\">perfect.org</a>.</p>\n',1),(266,'Totally Isolated TLS Unwrapping Server','https://www.opsmate.com/titus/',0,0,'\n				<div class=\"hero\">\n					<div class=\"topinner\">\n						\n						<p>\n							</p><h2>Totally Isolated TLS Unwrapping Server</h2>\n						\n						<div class=\"text\"><p><strong>titus</strong> is a TLS/SSL proxy server (like stunnel or stud) that protects you from vulnerabilities in the TLS implementation such as Heartbleed (or worse).</p></div>\n					</div>\n				</div>\n				<div class=\"subhero1 topinner\">\n					<div class=\"col coll\">\n						<div class=\"colinner\">\n							<ul><li>Runs in a separate process from your application, protecting your application\'s state from compromise.</li>\n\n								<li>Uses a separate process for every TLS connection, protecting the state of TLS connections from each other.</li>\n								<li>Uses privilege separation and chrooting to protect your server as a whole.</li>\n							</ul></div>\n					</div>\n					<div class=\"col colr\">\n						<div class=\"colinner\">\n							<ul><li>Isolates the private key in a dedicated process that doesn\'t talk to the network, protecting your private key from compromise.</li>\n\n\n								<li>Can run in transparent proxy mode, preserving the client\'s IP address, so your backend doesn\'t even know it\'s there.</li>\n							</ul></div>\n					</div>\n					<div class=\"subhero2\">\n						<p>If there\'s a vulnerability in the TLS implementation, titus makes it very unlikely that an attacker could steal your private key, access the memory of your application, sniff data from other TLS connections, or otherwise attack your system.</p>\n					</div>\n					\n				</div> \n				\n\n				<div class=\"section\">\n					<h3>Current status</h3>\n					<p>\n					The current version of titus is <strong>0.2</strong>, released on 2014-08-17.  titus aims\n					to be bug-free and secure, though it has not yet undergone serious\n					testing or performance optimization.  Additionally, we may make\n					backwards-incompatible changes to the behavior before titus reaches\n					version 1.0\n					</p>\n				</div>\n\n				<div class=\"section\">\n					<h3>Getting titus</h3>\n\n					<div class=\"installguide\">\n						\n							<p class=\"distro\">\n								Choose your distro:\n								</p>\n\n							<div class=\"installguide_distro installguide_distro_wheezy installguide_distro_selected\">\n								<h4>Wheezy</h4>\n								<div class=\"terminal\">\n									<p class=\"root\"><span>wget -P /etc/apt/sources.list.d https://www.opsmate.com/titus/apt/wheezy/titus.list</span></p>\n									<p class=\"root\"><span>wget -P /etc/apt/trusted.gpg.d https://www.opsmate.com/titus/apt/wheezy/titus.gpg</span></p>\n									<p class=\"root\"><span>apt-get update</span></p>\n									<p class=\"root\"><span>apt-get install titus</span></p>\n								</div>\n							</div>\n							<div class=\"installguide_distro installguide_distro_ubuntu1410\">\n								<h4>Ubuntu 14.10</h4>\n								<div class=\"terminal\">\n									<p class=\"root\"><span>wget -P /etc/apt/sources.list.d https://www.opsmate.com/titus/apt/ubuntu1410/titus.list</span></p>\n									<p class=\"root\"><span>wget -P /etc/apt/trusted.gpg.d https://www.opsmate.com/titus/apt/ubuntu1410/titus.gpg</span></p>\n									<p class=\"root\"><span>apt-get update</span></p>\n									<p class=\"root\"><span>apt-get install titus</span></p>\n								</div>\n							</div>\n							<div class=\"installguide_distro installguide_distro_ubuntu1404\">\n								<h4>Ubuntu 14.04</h4>\n								<div class=\"terminal\">\n									<p class=\"root\"><span>wget -P /etc/apt/sources.list.d https://www.opsmate.com/titus/apt/ubuntu1404/titus.list</span></p>\n									<p class=\"root\"><span>wget -P /etc/apt/trusted.gpg.d https://www.opsmate.com/titus/apt/ubuntu1404/titus.gpg</span></p>\n									<p class=\"root\"><span>apt-get update</span></p>\n									<p class=\"root\"><span>apt-get install titus</span></p>\n								</div>\n							</div>\n							<div class=\"installguide_distro installguide_distro_ubuntu1310\">\n								<h4>Ubuntu 13.10</h4>\n								<div class=\"terminal\">\n									<p class=\"root\"><span>wget -P /etc/apt/sources.list.d https://www.opsmate.com/titus/apt/ubuntu1310/titus.list</span></p>\n									<p class=\"root\"><span>wget -P /etc/apt/trusted.gpg.d https://www.opsmate.com/titus/apt/ubuntu1310/titus.gpg</span></p>\n									<p class=\"root\"><span>apt-get update</span></p>\n									<p class=\"root\"><span>apt-get install titus</span></p>\n								</div>\n							</div>\n							<div class=\"installguide_distro installguide_distro_ubuntu1304\">\n								<h4>Ubuntu 13.04</h4>\n								<div class=\"terminal\">\n									<p class=\"root\"><span>wget -P /etc/apt/sources.list.d https://www.opsmate.com/titus/apt/ubuntu1304/titus.list</span></p>\n									<p class=\"root\"><span>wget -P /etc/apt/trusted.gpg.d https://www.opsmate.com/titus/apt/ubuntu1304/titus.gpg</span></p>\n									<p class=\"root\"><span>apt-get update</span></p>\n									<p class=\"root\"><span>apt-get install titus</span></p>\n								</div>\n							</div>\n							<div class=\"installguide_distro installguide_distro_ubuntu1210\">\n								<h4>Ubuntu 12.10</h4>\n								<div class=\"terminal\">\n									<p class=\"root\"><span>wget -P /etc/apt/sources.list.d https://www.opsmate.com/titus/apt/ubuntu1210/titus.list</span></p>\n									<p class=\"root\"><span>wget -P /etc/apt/trusted.gpg.d https://www.opsmate.com/titus/apt/ubuntu1210/titus.gpg</span></p>\n									<p class=\"root\"><span>apt-get update</span></p>\n									<p class=\"root\"><span>apt-get install titus</span></p>\n								</div>\n							</div>\n							<div class=\"installguide_distro installguide_distro_ubuntu1204\">\n								<h4>Ubuntu 12.04</h4>\n								<div class=\"terminal\">\n									<p class=\"root\"><span>wget -P /etc/apt/sources.list.d https://www.opsmate.com/titus/apt/ubuntu1204/titus.list</span></p>\n									<p class=\"root\"><span>wget -P /etc/apt/trusted.gpg.d https://www.opsmate.com/titus/apt/ubuntu1204/titus.gpg</span></p>\n									<p class=\"root\"><span>apt-get update</span></p>\n									<p class=\"root\"><span>apt-get install titus</span></p>\n								</div>\n							</div>\n						\n					</div>\n				</div>\n\n				<div class=\"section\">\n					<h3>Building from Source</h3>\n\n					<div class=\"cols\">\n						\n						<div class=\"col colright\">\n							<div class=\"colinner\">\n								<h4>Compiling from Git</h4>\n\n								<div class=\"terminal\">\n									\n									<p><span>git clone https://www.agwa.name/git/titus.git</span></p>\n									<p><span>cd titus</span></p>\n									<p><span>make</span></p>\n									<p class=\"root\"><span>make install</span></p>\n								</div>\n							</div>\n						</div>\n					</div>\n					\n\n					<h4>Dependencies</h4>\n					<ul><li>OpenSSL 1.0.1 or higher, with development headers (libssl-dev)</li>\n						<li>A C++11 compiler (such as GCC 4.7, Clang 3.0, or newer)</li>\n						<li>Make</li>\n					</ul><h4>Verifying the Source</h4>\n\n					<p>\n						Since version 0.2, all tarballs and Git tags are signed\n						by Andrew Ayer\'s PGP key,\n						<a href=\"https://www.agwa.name/about/0x2080080C.pub.asc\">EF5D 84C1 838F 2EB6 D896 8C04 1037 8EFC 2080 080C</a>.\n					</p>\n				</div>\n\n				<div class=\"section\">\n					<h3>Using titus</h3>\n\n					<h4>If you\'re using the Debian/Ubuntu package:</h4>\n\n					<ol><li>Copy the example config from <code>/usr/share/doc/titus/examples</code> to <code>/etc/titus/titus.conf</code>.  Modify to fit your needs.</li>\n						<li>Start titus with: <code>service titus start</code></li>\n					</ol><p>Consult the <code>titus(8)</code> man page and <a href=\"https://www.opsmate.com/titus/files/README.Debian\"><code>/usr/share/doc/titus/README.Debian</code></a> for documentation.</p>\n\n					<h4>If you\'ve compiled from source:</h4>\n\n					<ol><li>Start with <a href=\"https://www.opsmate.com/titus/files/titus.conf.example\">titus.conf.example</a> and modify to fit your needs.</li>\n						<li>Run your configuration with: <code>titus --config /path/to/titus.conf</code></li>\n					</ol><p>Consult the <code>titus(8)</code> man page for documentation.</p>\n				</div>\n\n				\n\n				\n\n				<div class=\"section\">\n					<h3>Project Resources</h3>\n\n					<p>\n					For help or questions, send mail to the discussion list, <a href=\"mailto:titus-discuss@lists.cloudmutt.com\">titus-discuss@lists.cloudmutt.com</a>. To report a bug or make a feature request, please open an issue at GitHub or send mail to the discussion list. To contribute code, please send a properly-formatted patch to the discussion list, or open a pull request at GitHub. \n					</p>\n\n					<p>\n					\n					To report a confidential security matter, please <a href=\"https://www.agwa.name/about#contact\">contact the author directly</a>.\n					</p>\n				</div>\n				\n				<div class=\"opsmate_ad\">\n					<p><strong>Want SSL certs without the hassle?</strong></p>\n					<p>Check out <a href=\"https://www.sslmate.com/?r=titus\">SSLMate</a>, which lets you buy certificates from the command line.</p>\n				</div>\n			',1),(267,'Creator Ci40 dev kit puts the IoT in a box for Â£80 - Imagination Blog','http://blog.imgtec.com/mips-processors/creator-ci40-dev-kit-puts-the-iot-in-a-box',0,0,'<div><p>Recent research from Gartner suggests that by 2020 the Internet of Things market <a href=\"http://www.gartner.com/newsroom/id/3165317\">will grow to include billions of connected devices</a> from smart sensors and gateways to data centers and other computing platforms.</p>\n<p>To accelerate IoT development, Imagination is today introducing <em><strong>Creator Ci40</strong></em>, the most complete development kit for the Internet of Things.</p>\n<p>The package includes three sensors, two battery-powered wireless boards, and a powerful IoT hub, providing the hardware components required to quickly prototype IoT wireless devices. In addition, every kit includes a free subscription to FlowCloud, a robust cloud platform for connecting embedded devices to the Internet.</p>\n<p><a href=\"http://www.imgtec.com/creator/kickstarter\"><img class=\"aligncenter wp-image-9114\" src=\"http://blog.imgtec.com/wp-content/uploads/2015/11/Creator-Ci40-Kickstarter-banner.png\" alt=\"Creator Ci40 - Kickstarter banner\" width=\"602\" height=\"282\" /></a>The Creator Ci40 IoT dev kit is available exclusively from Kickstarter</p>\n<p>Watch the video and read the description below for a quick summary of how Creator Ci40 works – and don’t forget to check out <a href=\"http://www.imgtec.com/creator/kickstarter\">our Kickstarter page</a> for more information on how to preorder your kit today.</p>\n<center><iframe src=\"https://www.youtube.com/embed/8DpZlxtOIJQ\" width=\"480\" height=\"360\" frameborder=\"0\">[embedded content]</iframe></center>\n<p>Design an IoT project in five easy steps</p>\n<p>The Creator Ci40 IoT hub is a powerful development board powered by a snappy cXT200 chip. The SoC includes a dual-core, dual-threaded <a href=\"http://www.imgtec.com/mips/aptiv/interaptiv.asp\">MIPS interAptiv CPU</a>, backed up by 256 MB of RAM. Hardware multithreading is an advanced technology used in desktop PCs and embedded devices to boost performance and increase system utilization and efficiency in real-world applications.</p>\n<p>Apart from the innovative multi-threaded CPU and RAM memory, the Ci40 dev board packs an impressive connectivity package, including 6LoWPAN, 802.11 ac 2×2 Wi-Fi and Bluetooth 4.1. Having the wireless baseband integrated on chip reduces overall power consumption and boosts performance for IoT applications.</p>\n<p><a href=\"http://blog.imgtec.com/wp-content/uploads/2015/11/03-Creator-Ci40-dev-board-full-specs.png\"><img class=\"aligncenter wp-image-9112\" src=\"http://blog.imgtec.com/wp-content/uploads/2015/11/03-Creator-Ci40-dev-board-full-specs.png\" alt=\"03 - Creator Ci40 dev board - full specs\" width=\"601\" height=\"451\" /></a>The powerful microcomputer acts as an IoT hub</p>\n<p>On the peripherals side, you get <a href=\"http://www.mikroe.com/mikrobus/\">mikroBUS</a> and Raspberry Pi B+ compatible interfaces, a micro USB power source, Ethernet, microSD, plus a number of other I/O pins for connecting accessories or extra hardware, including an EJTAG connector that can be used for live debugging.</p>\n<p>The Creator Ci40 IoT kit also integrates two 6LoWPAN <a href=\"http://www.mikroe.com/clicker/\">Clicker boards</a> and three companion <a href=\"http://www.mikroe.com/click/\">Click boards</a>. The Clicker boards are compact, standalone wireless devices powered by two AAA batteries. When used together with the companion Click boards, they provide a quick way to prototype smart sensors or actuators that communicate with the Creator Ci40 IoT hub over the 6LoWPAN network.</p>\n<p><a href=\"http://blog.imgtec.com/wp-content/uploads/2015/11/05-Creator-Ci40-IoT-kit-6LoWPAN-Clicker_02.png\"><img class=\"aligncenter wp-image-9113\" src=\"http://blog.imgtec.com/wp-content/uploads/2015/11/05-Creator-Ci40-IoT-kit-6LoWPAN-Clicker_02.png\" alt=\"05 - Creator Ci40 IoT kit - 6LoWPAN Clicker_02\" width=\"602\" height=\"401\" /></a>The Clicker and Click combination acts as a standalone wireless device</p>\n<p>The dev kit is the ideal solution for IoT developers, makers, Linux hackers or small to medium companies looking to build a revolutionary project from scratch.</p>\n<p>You can back the Creator Ci40 IoT dev kit on Kickstarter starting today.</p>\n<h4><strong>FAQs</strong></h4>\n<p>We’ll keep updating this list on Kickstarter, but here are a few answers to your questions.</p>\n<p><strong>Are you discontinuing the Creator Ci20?</strong><br />No, we are not. We’ve always stated that Creator Ci20 was the first member in a family of boards that will scale from tiny modules to high-performance computing platforms. We have built a dedicated community around our the Ci20 dev board and continue to provide regular software updates for Debian and Android for as long as there is demand for it. Creator Ci20 will continue to sell for £50/$65 from <a href=\"http://store.imgtec.com/\">our store</a>.</p>\n<p><strong>Will you support Thread or other 6LoWPAN-based standards?</strong><br />Imagination is an active member of several cross-industry organizations dedicated to promoting open and secure standards for IoT, including <a href=\"http://threadgroup.org/\">the Thread Group</a>, <a href=\"https://allseenalliance.org/\">the AllSeen Alliance</a> and <a href=\"http://prplfoundation.org/\">the prpl Foundation</a>. We are currently working with our partners to assess the resources needed to support other 802.15.4-based stacks, including the Thread protocol.</p>\n<p><strong>What MIPS-based hardware does the IoT kit contain?</strong><br />The Creator Ci40 development board is powered by cXT200, an application processor based on a reference IP subsystem designed by Imagination for IoT applications. Manufactured by GLOBALFOUNDRIES using a 40nm process node, the cXT200 SoC includes a dual-core, dual-threaded <a href=\"http://imgtec.com/mips/aptiv/interaptiv/\">MIPS interAptiv CPU</a> and an Ensigma C4500 RPU. You can read more about our licensable IP subsystems <a href=\"http://blog.imgtec.com/powervr/imagination-tsmc-collaborate-on-iot-subsystems\">here</a>.</p>\n<p>The Clicker board uses <a href=\"http://www.microchip.com/pagehandler/en-us/family/32bit/architecture-pic32mxfamily.html\">a Microchip PIC32MX microcontroller</a> that integrates <a href=\"http://imgtec.com/mips/classic/\">a MIPS M4K CPU</a>.</p>\n<p><strong>How can I request a Brillo invite?</strong><br />Please refer to <a href=\"https://developers.google.com/brillo/?hl=en\">the official Brillo page</a> from Google.</p>\n<p><strong>Why are you using Kickstarter as a launch platform?</strong><br />We are using Kickstarter because it’s a great platform for putting innovative products directly into the hands of consumers. The Creator family is a new venture for Imagination and therefore we want to use Kickstarter to hear what makers, developers and entrepreneurs have to say about our IoT kit directly. The Creator Ci40 dev kit is representative of our vision for next-generation, MIPS-based IoT architectures. A successful outcome of our crowdfunded campaign means we will deliver the IoT kit and associated software much faster compared to a traditional sales channel route.</p>\n<h5><strong>Acknowledgments </strong></h5>\n<p>The Creator program has required a huge engineering effort from Imagination and our partners. I’d like to personally thank everyone who contributed to this project, including the various hardware and software teams at MIPS, Ensigma, IMGworks and IMGsystems. A big thank you as well to our alpha testers who provided useful feedback that helped us improve the dev kit and built some really cool applications in the process. Finally, many thanks to our partners MikroElektronika who have worked hard to get the expansion boards done in time and helped us with manufacturing and packaging.</p>\n	</div><div><div class=\"profile-image\"><img alt=\"\" src=\"http://1.gravatar.com/avatar/1ec3c2632591a8434a8bc14e62d49cb7?s=80&amp;d=mm&amp;r=g\" class=\"avatar avatar-80 photo\" height=\"80\" width=\"80\" /></div>\r\n	<div class=\"profile-content\">\n		<h4>About Alexandru Voica</h4>\n		After having experienced the fast-paced world of the IP business as a junior engineer at various companies around Europe, Alexandru Voica has decided to pursue his dream of working in technology marketing and PR for Imagination Technologies. His background includes research in computer graphics at the School of Advanced Studies Sant\'Anna in Pisa and a brief stint as a CPU engineer. When not planted firmly in front of his laptop, Alexandru can be found hitting the basketball court, singing along at a rock n\' roll concert, enjoying art cinema or reading his favorite American authors. You can follow him on Twitter @alexvoica.				\n			</div>\r\n	\r\n</div>',1),(268,'Strus','http://www.project-strus.net/',0,0,'\n		<h2>About</h2>\n		<p class=\"description\">The open source project <i>strus</i> provides a collection of C++ (C++98) \r\n		libraries and command line tools for building a competitive full-text search engine.\r\n		The <i>strus</i> search engine can be build using any key value store database that provides an\r\n		<a href=\"http://en.wikipedia.org/wiki/Upper_and_lower_bounds\">upper bound</a> seek function\r\n		for the stored key/value pairs.\r\n		Currently there exists an implementation based on the \r\n		<a href=\"http://leveldb.org\">LevelDB</a> library.<br /></p>\n		<h2>Demo system</h2>\n		<p class=\"description\">There is one running demo system online to show the properties of \r\n		<i>strus</i> under conditions of limited resources: <br /><a href=\"http://demo.project-strus.net/strus.html\">Search on complete wikipedia collection (English)</a>\r\n		</p>\n\n		<h2>Tutorial</h2>\n		<p class=\"description\">There is a <a href=\"http://www.codeproject.com/Articles/1009582/Building-a-search-engine-with-Strus-tutorial\">tutorial</a> available based on a docker image.</p>\n\n		<h2>Installation</h2>\n		<p class=\"description\">\r\n		There is a <a href=\"http://www.project-strus.net/installation.htm\">short installation guide</a> on how to fetch the strus \r\n		sources from github and build them or alternatively to run strus from docker images.\r\n		</p>\n\n		<h2>Documentation</h2>\n		<p class=\"description\">The documentation is work in progress.\r\n		What is available can be found <a href=\"http://www.project-strus.net/documentation.htm\">here</a>.\r\n		</p>\n\n		<h2>Background</h2>\n		<p class=\"description\">Why to build yet another search engine ? <a href=\"http://www.project-strus.net/story.htm\">Here</a> I tell about my motivation and the story of <i>strus</i>.\r\n		I also try to explain, what distinguishes <i>strus</i> from other open source fulltext \r\n		search engines.\r\n		</p>\n\n		<h3>News</h3>\n		<table><tr><td><p class=\"timestamp\">Nov 16th, 2015</p></td>\r\n		<td><p class=\"newstext\">The NBLNK weighting scheme for the Wikipedia demo is now online.\r\n		This weighting scheme does not match documents against the query, but ranks the links\r\n		in documents by weighting the sentences the links appear in against the query. It is\r\n		a good example for the information extraction capabilities of strus.</p></td>\r\n		</tr><tr><td><p class=\"timestamp\">Oct 29th, 2015</p></td>\r\n		<td><p class=\"newstext\">Packages of the latest build are available now. You can fetch\r\n		them from the openSUSE Build Service.</p></td>\r\n		</tr><tr><td><p class=\"timestamp\">Oct 21th, 2015</p></td>\r\n		<td><p class=\"newstext\">Python bindings are available now.</p></td>\r\n		</tr><tr><td><p class=\"timestamp\">Oct 12th, 2015</p></td>\r\n		<td><p class=\"newstext\">C++ Interfaces of strus are now exception free. This means that \r\n		libraries and modules can be linked with a defined set of symbols exported (visibility hidden)\r\n		and you can use different compilers to build the objects if some STL types (vector,string)\r\n		and the calling conventions are compatible.</p></td>\r\n		</tr><tr><td><p class=\"timestamp\">Aug 17th, 2015</p></td>\r\n		<td><p class=\"newstext\">Language bindings for Java are now available. Python bindings are\r\n			following soon. </p></td>\r\n		</tr><tr><td><p class=\"timestamp\">Jul 1st, 2015</p></td>\r\n		<td><p class=\"newstext\">A docker image and a tutorial is available for strus.</p></td>\r\n		</tr><tr><td><p class=\"timestamp\">June 15th, 2015</p></td>\r\n		<td><p class=\"newstext\">Started advertising <i>strus</i> to get some feedback and maybe even some support.</p></td>\r\n		</tr><tr><td><p class=\"timestamp\">Mai 27th, 2015</p></td>\r\n		<td><p class=\"newstext\">The demo project of a search engine for the wikipedia collection (english) is online.</p></td>\r\n		</tr><tr><td><p class=\"timestamp\">April 2nd, 2015</p></td>\r\n		<td><p class=\"newstext\">The demo project of a search engine for the wikipedia collection (english) is close to be finished.</p></td>\r\n		</tr></table><p class=\"credits\">© 2015 Patrick Frey<br />\r\n		Original template design by <a href=\"http://andreasviklund.com/\">Andreas Viklund</a> / Best hosted at <a href=\"https://www.svenskadomaner.se/?ref=mall&amp;ling=en\" title=\"Svenska Domäner AB\">www.svenskadomaner.se</a>\r\n		</p>\n	',1),(269,'How to Earn Bitcoin Through Arbitrage Software (AKA a bot) ','http://www.bitcoinbulls.net/how-to-earn-bitcoins-through-arbitrage-software-aka-bot/',0,0,'<p><img src=\"http://www.bitcoinbulls.net/images/how-to-earn-bitcoin-through-arbitrage.jpg\" alt=\"How To Earn Bitcoin Through Arbitrage\" title=\"How To Earn Bitcoin Through Arbitrage\" />\nI’ve never been in to day trading or forex trading. It’s actually surprising I’ve done option trading (selling) and that I’m investing in bitcoin. I used to invest exclusively in index funds and mutual funds. For those who don’t know index and mutual funds are some of the safest way to invest in stocks and they provide correspondingly low rates of return.</p>\n<p>However in 2013 I was a bitcoin day trader. I used a strategy called arbitrage and wrote a bot to do it. </p>\n<p>It was a relatively low risk way to earn a relatively high return.</p>\n<p><strong>Arbitrage is my favorite way to earn bitcoins.</strong> Unfortunately I am not currently involved in arbitrage. </p>\n\n<p><a href=\"http://www.investopedia.com/terms/a/arbitrage.asp\">Investopedia’s Definition:</a></p>\n<blockquote>\n<p>DEFINITION OF ‘ARBITRAGE’</p>\n<p>The simultaneous purchase and sale of an asset in order to profit from a difference in the price. It is a trade that profits by exploiting price differences of identical or similar financial instruments, on different markets or in different forms. Arbitrage exists as a result of market inefficiencies; it provides a mechanism to ensure prices do not deviate substantially from fair value for long periods of time.</p>\n</blockquote>\n<p>Khan Academy has a nice explanation and also covers why <strong>performing arbitrage reduces the opportunity.</strong></p>\n<iframe width=\"854\" height=\"510\" src=\"//www.youtube.com/embed/AuCH7fHZsZ4\" frameborder=\"0\">[embedded content]</iframe>\n<p>With that in mind lets look at some bitcoin markets:</p>\n<p><img src=\"http://www.bitcoinbulls.net/images/bitcoin-exchange-price-differences-create-arbitrage-opportunity.jpg\" alt=\"Bitcoin Exchange Price Differences Create Arbitrage Opportunity\" title=\"Bitcoin Exchange Price Differences Create Arbitrage Opportunity\" /></p>\n<p>Notice there are different prices for bitcoin. Based on our understanding above that means there is opportunity for bitcoin arbitrage right?</p>\n<p>Yes, Bitcoin Exchange Price Differences Create Arbitrage Opportunity.</p>\n\n<h2>Why doesn’t everyone do it?</h2>\n<p>Bitcoin Arbitrage sounds easy and if it were then the price differences would vanish because everyone would do it.</p>\n<p>Key components for successful arbitrage:</p>\n<ol><li>\n<p><strong>Understanding total cost of entering and exiting a position.</strong> When buying bitcoin there are typically exchange fees (variable) and bank fees (fixed) or wire transfer fees.</p>\n</li>\n<li>\n<p><strong>Being able to correctly evaluate an opportunity.</strong> - If bitcoin is selling for $1K on Coinbase and $990 on Circle it looks like there is an arbitrage opportunity. Let’s look deeper. Coinbase has a 1% with a 15-cent bank fee. Circle has no fees. This means the price difference will need to be greater than $10.15 for the arbitrage to be profitable.</p>\n<p>To make things more complicated most exchanges have an order book. This means the actual price we pay or sell (fill price) is affected by how many bitcoin we are buying. The price for 1 bitcoin on Coinbase might be $1k, but for 25 bitcoins the price might be $1.1K.</p>\n</li>\n<li>\n<p><strong>Speed</strong> After determining if our opportunity is profitable, and as you can see from taking into account the order book, we need to execute the trade. Both the determination of profitability and the execution need to happen quickly. Otherwise the market prices can change, losing us money.</p>\n</li>\n<li>\n<p><strong>Capital</strong> It is important to have both bitcoins and cash in place at both exchange points in roughly equal amounts, or up to the daily limits at each exchange. For example if the Coinbase sell limit is $15K / day ideally one would like to arbitrage the max $15K amount. To do that one would need to have $15K worth of bitcoin sitting at Coinbase. On the other side of the trade $15K will need to be sitting at an exchange. It is also important to understand that dollars move slower than bitcoins and don’t move on weekends or bank holidays.</p>\n</li>\n<li>\n<p><strong>Access</strong> to perform arbitrage one needs access to multiple markets trading equivalent securities. For example Bitstamp and Coinbase both buy and sell bitcoin. Being in different countries generally increases fees and transfer times of moving cash.</p>\n</li>\n<li>\n<p><strong>Turnover</strong> If one doesn’t have enough capital to max out the daily exchange limits it is important to increase the speed dollars can be sold from one exchange and moved to the other exchange. If it takes 3 days to move money from the exchange where the bitcoins are sold for cash to the exchange where cash is used to buy bitcoins then one will need 3x the daily limit to try and max the exchange limit each of the three days the cash is en route.</p>\n</li>\n</ol><p>I had some advantages:</p>\n<ol><li>\n<p><strong>I automated the process.</strong> I’m a software developer. I realized the bitcoin markets moved too fast for me to compare two order books and execute a trade. Even with a spreadsheet doing most of the work it took about a minute or two to evaluate arbitrage profitability.</p>\n<p>Most (all?) bitcoin exchanges have APIs (a way for computers to talk to each other) and I was able to write a piece of software (arbitrage bot) that could analyze and execute arbitrage in less than ten seconds between two markets.</p>\n</li>\n<li>\n<p><strong>I moved cash fast.</strong> I realized with a 2-3 day ACH transfer time my working capital wasn’t going to be enough to max out my limits everyday. I found an out-of-state bank that was able to move cash same day into one of the exchanges I was using due to a special relationship. This meant I could cycle my cash every 24 hours instead of 48-72 hours except for weekends and holidays.</p>\n</li>\n<li>\n<p><strong>One market had a pricing bug.</strong> I soon realized one of the markets I was using had a pricing bug. Typically the net (after expenses) price differences were a fraction of a percent. In the buggy market, about twice a day the net price difference would be 7%. I instructed my software to wait for those big opportunities and ignore the small opportunities.</p>\n</li>\n<li>\n<p><strong>Access to different markets in the same country.</strong> I was fortunate that I was able to access two different markets here in the U.S. with different prices. This meant I saved a lot of time and money by not needing to move money overseas or convert it to a different currency.</p>\n</li>\n</ol><p>With my software doing all the work arbitrage was a dream come true. I could (and did) spend some days at the beach and earn a nice 7% return for the day.</p>\n<p>Unfortunately my opportunity quickly dried up. One exchange stopped taking deposits and the other fixed their pricing bug. I began focusing on other ways to earn bitcoin. I haven’t looked into arbitrage since 2013.</p>\n<p>Also there is no such thing as risk-free. I was aware either of the markets could go bust or getting hacked. Additionally my software could have had bugs in it. Fortunately I’m a decent coder and the software processed over 500 profitable transactions worth around $150,000 over a six-week time period.</p>\n\n<p>Do you see opportunities for arbitrage? Or do you think there are better ways to <a href=\"http://www.bitcoinbulls.net/portfolio/\">earn bitcoins?</a> </p>\n<p>Let me know in the comments!</p>\n',1),(270,'Good Leaders are game changers: Raft &amp; Paxos','http://mysqlhighavailability.com/good-leaders-are-game-changers-raft-paxos/',0,0,'\n		<p><strong>Introduction</strong></p>\n<hr /><p>Consensus is a key component to providing fault-tolerant services such as synchronously replicated data stores, non-blocking atomic commitment and Paxos and Raft are among the most popular consensus algorithms. Paxos has been widely studied by researchers while Raft has become very popular among engineers.</p>\n<p>The Raft’s popularity comes from the fact that despite all the interest around Paxos among researchers, engineers still have to read several papers to be able to understand and create a solution that solves a practical problem and provides good performance in terms of communication steps, number of messages and resource utilization. Besides, they still have to fill in some gaps with home-made implementations that sometimes turn out to be really fragile.</p>\n<p>In order to overcome this hurdle, Diego Ongaro and John Ousterhout created a new consensus algorithm called Raft which was designed to be more understandable and provide a better foundation for building practical systems than Paxos [2]. Although Raft brings some novelty to the complex world of Distributed Systems, it still shares a lot of things in common with Paxos. For example, both elect a single leader which is responsible for deciding whether the participants in the consensus have reached an agreement or not.</p>\n<p>In this blog post, we will briefly show the similarities and differences between Paxos and Raft. Firstly, we will describe what a consensus algorithm is. Secondly, we will describe how to build a replication solution using instances of a consensus algorithm. Then we will describe how leaders are elected in both algorithms and some safety and liveness properties.</p>\n<p>Note that this blog is not a deep dive into Paxos nor Raft but an overview on both algorithms. Users willing to understand their subtle details should read the following papers: [1, 2, 3, 4].</p>\n<p><strong>Consensus</strong></p>\n<hr /><p>Distributed systems can be characterized by a set of safety and liveness properties or the mix of the two. Informally, safety is a property that stipulates that nothing bad happens during execution of a program. On the other hand, liveness stipulates that something good eventually happens.</p>\n<p>In consensus, whose goal is to make a set of servers agree on a value, the liveness is characterized by the fact that eventually every server should decide on a value. Safety states that no two servers decide differently.</p>\n<p>Unfortunately, a server may take longer to execute an algorithm step than others and may crash and stop processing the consensus algorithm. Messages might get delayed, delivered out of order or dropped. These aspects make the implementation of a consensus algorithm really hard and oblige them to be indulgent and preserve safety during ‘instability’ periods [5]. Exactly when the system will become ‘stable’ though is unknown but eventually it will remain ‘stable’ long enough so that the consensus algorithm can achieve a decision.</p>\n<p>In a stable run, the system requires two communication steps: leader –(1)–&gt; servers –(2)–&gt; leader:</p>\n<p><a href=\"http://mysqlhighavailability.com/wp-content/uploads/2015/11/consensus-image1.png\"><img class=\"wp-image-4834 aligncenter\" src=\"http://mysqlhighavailability.com/wp-content/uploads/2015/11/consensus-image1-300x134.png\" alt=\"consensus-image\" width=\"316\" height=\"141\" /></a></p>\n<p>The leader sends the value it wants to achieve an agreement on to all servers and each server replies back to the leader notifying that it has accepted the request. So when the leader gets accept messages from a quorum of servers, agreement is reached.</p>\n<p>Note that we have omitted two messages from this analysis: the message that forwards a value which a server wants to reach an agreement on to the leader and the message that informs servers that an agreement on the value was reached. The latter message may not be necessary if servers send the accept message to all servers or the information is piggybacked in the next message the leader sends to the servers.</p>\n<p><strong>Replication</strong></p>\n<hr /><p>In order to implement replication, several instances of a consensus algorithm are run and each instance is bounded to a slot entry in the replicated log which might be persisted on disk or not [6]. The leader may run several instances in parallel to fill in different slots and thus increase performance. However, the degree of parallelism is highly dependent on the hardware, network in use and the application [7].</p>\n<p>Each leader is uniquely responsible for a round or term which is monotonically increased when a new leader is elected:</p>\n<p><a href=\"http://mysqlhighavailability.com/wp-content/uploads/2015/11/slots-image.png\"><img class=\"alignnone size-full wp-image-4831\" src=\"http://mysqlhighavailability.com/wp-content/uploads/2015/11/slots-image.png\" alt=\"slots-image\" width=\"251\" height=\"46\" /></a></p>\n<p><strong>Leader Election</strong></p>\n<hr /><p>Both Paxos and Raft assume that eventually there will be a leader that all stable servers trust and a single leader is responsible for a term. A new leader will propose a new term, which must be greater than the previous one, if the current leader is suspected to have failed.</p>\n<p>In Raft, a server sends a “leader request” to other servers and expects a reply from a majority of them before considering itself a leader. If it does not get a reply from a majority of servers or a message saying that another server has become the leader, it will timeout and start over a new election process. Servers can only vote for one leader request per term.</p>\n<p>Paxos, though, does not really define how a server becomes a leader. For simplicity, researchers exploit the a-priori rank among processes such as the server’s id (e.g. an integer). So the server with the highest or the lowest rank that has not been suspected becomes the new leader [8]. Although, this is a simple and intuitive solution, it requires to divide the terms’ space among servers: new term = old term + N, where N is the maximum number of servers.</p>\n<p>Raft imposes a restriction to the leader election process: only the most up-to-date server can become a leader. Basically, it guarantees that a leader has all committed entries from previous terms and does not need to learn about old entries in the replicated log that it is not aware of. So after becoming a leader, a server can simply start “imposing” its “wishes” on other servers.</p>\n<p>Paxos, however, allows any server to become a leader. So a server has to learn about the past before starting “imposing” its “wishes” on other servers and as usual, flexibility comes along with additional complexity.</p>\n<p><a href=\"http://mysqlhighavailability.com/wp-content/uploads/2015/11/leader-image.png\"><img class=\"alignnone size-full wp-image-4832\" src=\"http://mysqlhighavailability.com/wp-content/uploads/2015/11/leader-image.png\" alt=\"leader-image\" width=\"152\" height=\"163\" /></a></p>\n<p>In Raft, either Server 1 or 2 could become a leader. In Paxos, any of them.</p>\n<p><strong>Safety</strong></p>\n<hr /><p>Due to the asynchronous nature of the system, servers may perceive failures and elections at different times. This means that servers may temporarily operate in different terms but eventually all servers will converge to a single term.</p>\n<p>In any case, if a server gets a message from a term older than its current one, this means that the sender either was the leader or is trying to become one for an old term and the receiver must reject the message and inform the sender.</p>\n<p>If a server gets a message from a term greater than its current one, this means that there is a new term and a new leader and the receiver must start accepting the leader’s “wishes”.</p>\n<p>However, both algorithms must carefully avoid overwriting a decision made by an old leader and thus violating safety. This is where Raft and Paxos diverge and where we can see the simple and elegant approach used by Raft.</p>\n<p>Raft imposes restrictions on the leader election algorithm as aforementioned and only the most up-to-date server can become a leader:</p>\n<blockquote><p>Raft determines which of two logs is more up-to-date by comparing the index and term of the last entries in the logs. If the logs have last entries with different terms, then the log with the later term is more up-to-date. If the logs end with the same term, then whichever log is longer is more up-to-date.</p></blockquote>\n<p>Then the leader only needs to ensure that the replicated log in the servers eventually converge, which is done by imposing the following restriction: A server cannot accept a value for slot <code>\"n\"</code> if it has not previously accepted a value for slot <code>\"n - 1\"</code>. The leader includes the term of the previous log entry in the current request and the server only accepts the request if the term of its previous request matches the one sent by the leader. Otherwise, it asks the leader to send the previous missing request first, and so forth for <code>\"n - 2\"</code> and <code>\"n - 3\"</code>, etc.</p>\n<p>In Paxos, any server can become a leader so that the task of avoiding that a decision is not overwritten becomes a little bit more complex as the new leader leader has to find out what other servers have processed so far before starting “imposing” its “wishes” on others. This is the prepare phase in the Paxos algorithm and has to be run once after the new leader is elected. The prepare message contains the new term and the slot number <code>\"n\"</code> through which agreement has been reached for all previous entries. Servers reply with information on slots greater than <code>\"n\"</code> and this information is used to restrict the values that the new leader will propose for these slots.</p>\n<p><strong>Liveness</strong></p>\n<hr /><p>Progress is guaranteed as long as the majority of servers are alive [9].</p>\n<p><strong>Conclusions</strong></p>\n<hr /><p>We have shown the similarities between Raft and Paxos and that the key difference relies on how a leader is elected and preserves safety. In Raft, only the most up-to-date server can become a leader while Paxos allows any server to become a leader. This flexibility, however, comes along with additional complexity.</p>\n<p>Note that the leader in both Raft and Paxos might become a bottleneck as all the traffic goes through it. The leader handles <code>O(N)</code> message while a non-leader handles <code>O(1)</code>.</p>\n<p>There are other Paxos-based protocols that support multiple leaders such as Mencius [10] or order non-conflicting requests in parallel such as Egalitarian Paxos or Generalized Paxos [11, 12]. It would be great to see Raft-based protocols with similar optimizations.</p>\n<p><strong>References</strong></p>\n<hr /><p>1 – <a title=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf\" href=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf\">Paxos made simple</a><br />2 – <a title=\"https://ramcloud.stanford.edu/raft.pdf\" href=\"https://ramcloud.stanford.edu/raft.pdf\">In Search of an Understandable Consensus Algorithm</a><br />3 – <a title=\"http://www.cs.utexas.edu/~lorenzo/corsi/cs380d/papers/deconstr_paxos.pdf\" href=\"http://www.cs.utexas.edu/~lorenzo/corsi/cs380d/papers/deconstr_paxos.pdf\">Desconstructing Paxos</a><br />4 – <a title=\"http://www.zurich.ibm.com/~cca/papers/pax.pdf\" href=\"http://www.zurich.ibm.com/~cca/papers/pax.pdf\">Yet Another Visit to Paxos</a><br />5 – <a title=\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\" href=\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\">Consensus in the presence of partial synchrony</a><br />6 – <a title=\"http://research.microsoft.com/en-us/people/weic/disc98_recovery.pdf\" href=\"http://research.microsoft.com/en-us/people/weic/disc98_recovery.pdf\">Failure Detection and Consensus in the Crash-Recovery Model</a><br />7 – <a title=\"http://dl.acm.org/citation.cfm?id=2183688\" href=\"http://dl.acm.org/citation.cfm?id=2183688\">Tuning paxos for high-throughput with batching and pipelining</a><br />8 – <a title=\"http://www.distributedprogramming.net/\" href=\"http://www.distributedprogramming.net/\">Introduction to Reliable and Secure Distributed Programming</a><br />9 – <a title=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/lower-bound.pdf\" href=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/lower-bound.pdf\">Lower Bounds for Asynchronous Consensus</a><br />10 – <a title=\"http://sysnet.ucsd.edu/~yamao/pub/mencius-osdi.pdf\" href=\"http://sysnet.ucsd.edu/~yamao/pub/mencius-osdi.pdf\">Mencius: Building Efficient Replicated State Machines for WANs</a><br />11 – <a title=\"https://www.cs.cmu.edu/~dga/papers/epaxos-sosp2013.pdf\" href=\"http://www.cs.cmu.edu/~dga/papers/epaxos-sosp2013.pdf\">There Is More Consensus in Egalitarian Parliaments</a><br />12 – <a title=\"http://research.microsoft.com/pubs/64631/tr-2005-33.pdf\" href=\"http://research.microsoft.com/pubs/64631/tr-2005-33.pdf\">Generalized Consensus and Paxos</a></p>\n\n	',1),(271,'NARKOZ/hacker-scripts','https://github.com/NARKOZ/hacker-scripts',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Based on a <em><a href=\"https://www.jitbit.com/alexblog/249-now-thats-what-i-call-a-hacker/\">true\nstory</a></em>:</p>\n\n<blockquote>\n<p>xxx: OK, so, our build engineer has left for another company. The dude was literally living inside the terminal. You know, that type of a guy who loves Vim, creates diagrams in Dot and writes wiki-posts in Markdown... If something - anything - requires more than 90 seconds of his time, he writes a script to automate that.</p>\n\n<p>xxx: So we\'re sitting here, looking through his, uhm, \"legacy\"</p>\n\n<p>xxx: You\'re gonna love this</p>\n\n<p>xxx: <a href=\"https://github.com/NARKOZ/hacker-scripts/blob/master/smack-my-bitch-up.sh\"><code>smack-my-bitch-up.sh</code></a> - sends a text message \"late at work\" to his wife (apparently). Automatically picks reasons from an array of strings, randomly. Runs inside a cron-job. The job fires if there are active SSH-sessions on the server after 9pm with his login.</p>\n\n<p>xxx: <a href=\"https://github.com/NARKOZ/hacker-scripts/blob/master/kumar-asshole.sh\"><code>kumar-asshole.sh</code></a> - scans the inbox for emails from \"Kumar\" (a DBA at our clients). Looks for keywords like \"help\", \"trouble\", \"sorry\" etc. If keywords are found - the script SSHes into the clients server and rolls back the staging database to the latest backup. Then sends a reply \"no worries mate, be careful next time\".</p>\n\n<p>xxx: <a href=\"https://github.com/NARKOZ/hacker-scripts/blob/master/hangover.sh\"><code>hangover.sh</code></a> - another cron-job that is set to specific dates. Sends automated emails like \"not feeling well/gonna work from home\" etc. Adds a random \"reason\" from another predefined array of strings. Fires if there are no interactive sessions on the server at 8:45am.</p>\n\n<p>xxx: (and the oscar goes to) <a href=\"https://github.com/NARKOZ/hacker-scripts/blob/master/fucking-coffee.sh\"><code>fucking-coffee.sh</code></a> - this one waits exactly 17 seconds (!), then opens an SSH session to our coffee-machine (we had no frikin idea the coffee machine is on the network, runs linux and has SSHD up and running) and sends some weird gibberish to it. Looks binary. Turns out this thing starts brewing a mid-sized half-caf latte and waits another 24 (!) seconds before pouring it into a cup. The timing is exactly how long it takes to walk to the machine from the dudes desk.</p>\n\n<p>xxx: holy sh*t I\'m keeping those</p>\n</blockquote>\n\n<p>Original: <a href=\"http://bash.im/quote/436725\">http://bash.im/quote/436725</a> (in Russian)<br />Pull requests with other implementations (Python, Perl, Shell, etc) are welcome.</p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/NARKOZ/hacker-scripts#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h2>\n\n<p>You need these environment variables:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># used in `smack-my-bitch-up` and `hangover` scripts</span>\nTWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nTWILIO_AUTH_TOKEN=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n\n<span class=\"pl-c\"># used in `kumar_asshole` script</span>\nGMAIL_USERNAME=admin@example.org\nGMAIL_PASSWORD=password</pre></div>\n\n<p>For Ruby scripts you need to install gems:\n<code>gem install dotenv twilio gmail</code></p>\n\n<h2><a class=\"anchor\" href=\"https://github.com/NARKOZ/hacker-scripts#cron-jobs\"><span class=\"octicon octicon-link\"></span></a>Cron jobs</h2>\n\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"># Runs `smack-my-bitch-up.sh` daily at 9:20 pm.</span>\n20 21 <span class=\"pl-k\">*</span> <span class=\"pl-k\">*</span> <span class=\"pl-k\">*</span> /path/to/scripts/smack-my-bitch-up.sh <span class=\"pl-k\">&gt;&gt;</span> /path/to/smack-my-bitch-up.log <span class=\"pl-k\">2&gt;&amp;1</span>\n\n<span class=\"pl-c\"># Runs `hangover.sh` daily at 8:45 am.</span>\n45 8 <span class=\"pl-k\">*</span> <span class=\"pl-k\">*</span> <span class=\"pl-k\">*</span> /path/to/scripts/hangover.sh <span class=\"pl-k\">&gt;&gt;</span> /path/to/hangover.log <span class=\"pl-k\">2&gt;&amp;1</span>\n\n<span class=\"pl-c\"># Runs `kumar-asshole.sh` every 10 minutes.</span>\n<span class=\"pl-k\">*</span>/10 <span class=\"pl-k\">*</span> <span class=\"pl-k\">*</span> <span class=\"pl-k\">*</span> <span class=\"pl-k\">*</span> /path/to/scripts/kumar-asshole.sh\n\n<span class=\"pl-c\"># Runs `fucking-coffee.sh` hourly from 9am to 6pm.</span>\n0 9-18 <span class=\"pl-k\">*</span> <span class=\"pl-k\">*</span> <span class=\"pl-k\">*</span> /path/to/scripts/fucking-coffee.sh</pre></div>\n\n<hr /><p>Code is released under WTFPL.</p>\n',1),(272,'karpathy/neuraltalk2','https://github.com/karpathy/neuraltalk2',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>Recurrent Neural Network captions your images. Now much faster and better than the original <a href=\"https://github.com/karpathy/neuraltalk\">NeuralTalk</a>. Compared to the original NeuralTalk this implementation is <strong>batched, uses Torch, runs on a GPU, and supports CNN finetuning</strong>. All of these together result in quite a large increase in training speed for the Language Model (~100x), but overall not as much because we also have to forward a VGGNet. However, overall very good models can be trained in 2-3 days, and they show a much better performance.</p>\n\n<p>This is an early code release that works great but is slightly hastily released and probably requires some code reading of inline comments (which I tried to be quite good with in general). I will be improving it over time but wanted to push the code out there because I promised it to too many people.</p>\n\n<p>This current code (and the pretrained model) gets ~0.9 CIDEr, which would place it around spot #8 on the <a href=\"https://competitions.codalab.org/competitions/3221#results\">codalab leaderboard</a>. I will submit the actual result soon.</p>\n\n<p><a href=\"https://camo.githubusercontent.com/684a313b08ebab8d1d0aec023e84ba59d57e8cdc/68747470733a2f2f7261772e6769746875622e636f6d2f6b617270617468792f6e657572616c74616c6b322f6d61737465722f7669732f7465617365722e6a706567\"><img src=\"https://camo.githubusercontent.com/684a313b08ebab8d1d0aec023e84ba59d57e8cdc/68747470733a2f2f7261772e6769746875622e636f6d2f6b617270617468792f6e657572616c74616c6b322f6d61737465722f7669732f7465617365722e6a706567\" alt=\"teaser results\" /></a></p>\n\n<p>You can find a few more example results on the <a href=\"http://cs.stanford.edu/people/karpathy/neuraltalk2/demo.html\">demo page</a>. These results will improve a bit more once the last few bells and whistles are in place (e.g. beam search, ensembling, reranking).</p>\n\n<p>There\'s also a <a href=\"https://vimeo.com/146492001\">fun video</a> by <a href=\"https://twitter.com/kcimc\">@kcimc</a>, where he runs a neuraltalk2 pretrained model in real time on his laptop during a walk in Amsterdam.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/karpathy/neuraltalk2#requirements\"><span class=\"octicon octicon-link\"></span></a>Requirements</h3>\n\n<h4><a class=\"anchor\" href=\"https://github.com/karpathy/neuraltalk2#for-evaluation-only\"><span class=\"octicon octicon-link\"></span></a>For evaluation only</h4>\n\n<p>This code is written in Lua and requires <a href=\"http://torch.ch/\">Torch</a>. If you\'re on Ubuntu, installing Torch in your home directory may look something like: </p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ curl -s https://raw.githubusercontent.com/torch/ezinstall/master/install-deps <span class=\"pl-k\">|</span> bash\n$ git clone https://github.com/torch/distro.git <span class=\"pl-k\">~</span>/torch --recursive\n$ <span class=\"pl-c1\">cd</span> <span class=\"pl-k\">~</span>/torch<span class=\"pl-k\">;</span> \n$ ./install.sh      <span class=\"pl-c\"># and enter \"yes\" at the end to modify your bashrc</span>\n$ <span class=\"pl-c1\">source</span> <span class=\"pl-k\">~</span>/.bashrc</pre></div>\n\n<p>See the Torch installation documentation for more details. After Torch is installed we need to get a few more packages using <a href=\"https://luarocks.org/\">LuaRocks</a> (which already came with the Torch install). In particular:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ luarocks install nn\n$ luarocks install nngraph \n$ luarocks install image </pre></div>\n\n<p>We\'re also going to need the <a href=\"http://www.kyne.com.au/~mark/software/lua-cjson-manual.html\">cjson</a> library so that we can load/save json files. Look under their section 2.4 for easy luarocks install.</p>\n\n<p>If you\'d like to run on an NVIDIA GPU using CUDA (which you really, really want to if you\'re training a model, since we\'re using a VGGNet), you\'ll of course need a GPU, and you will have to install the <a href=\"https://developer.nvidia.com/cuda-toolkit\">CUDA Toolkit</a>. Then get the <code>cutorch</code> and <code>cunn</code> packages:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ luarocks install cutorch\n$ luarocks install cunn</pre></div>\n\n<p>If you\'d like to use the cudnn backend (the pretrained checkpoint does), you also have to install <a href=\"https://github.com/soumith/cudnn.torch\">cudnn</a> and its Torch bindings.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/karpathy/neuraltalk2#for-training\"><span class=\"octicon octicon-link\"></span></a>For training</h4>\n\n<p>If you\'d like to train your models you will need <a href=\"https://github.com/szagoruyko/loadcaffe\">loadcaffe</a>, since we are using the VGGNet.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>luarocks install loadcaffe</pre></div>\n\n<p>You will also need to install <a href=\"https://github.com/deepmind/torch-hdf5\">torch-hdf5</a>, and <a href=\"http://www.h5py.org/\">h5py</a>, since we will be using hdf5 files to store the preprocessed data.</p>\n\n<p>Phew! Quite a few dependencies, sorry no easy way around it :\\</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/karpathy/neuraltalk2#i-just-want-to-caption-images\"><span class=\"octicon octicon-link\"></span></a>I just want to caption images</h3>\n\n<p>In this case you want to run the evaluation script on a pretrained model checkpoint. \nI trained a decent one on the <a href=\"http://mscoco.org/\">MS COCO dataset</a> that you can run on your images.\nThe pretrained checkpoint can be downloaded here: <a href=\"http://cs.stanford.edu/people/karpathy/neuraltalk2/checkpoint_v1.zip\">pretrained checkpoint link</a> (600MB). It\'s large because it contains the weights of a finetuned VGGNet. Now place all your images of interest into a folder, e.g. <code>blah</code>, and run\nthe eval script:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ th <span class=\"pl-c1\">eval</span>.lua -model /path/to/model -image_folder /path/to/image/directory -num_images 10 </pre></div>\n\n<p>This tells the <code>eval</code> script to run up to 10 images from the given folder. If you have a big GPU you can speed up the evaluation by increasing <code>batch_size</code> (default = 1). Use <code>-num_images -1</code> to process all images. The eval script will create an <code>vis.json</code> file inside the <code>vis</code> folder, which can then be visualized with the provided HTML interface:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ <span class=\"pl-c1\">cd</span> vis\n$ python -m SimpleHTTPServer</pre></div>\n\n<p>Now visit <code>localhost:4000</code> in your browser and you should see your predicted captions.</p>\n\n<p>You can see an <a href=\"http://cs.stanford.edu/people/karpathy/neuraltalk2/demo.html\">example visualization demo page here</a>.</p>\n\n<p><strong>\"I only have CPU\"</strong>. Okay, in that case download the <a href=\"http://cs.stanford.edu/people/karpathy/neuraltalk2/checkpoint_v1_cpu.zip\">cpu model checkpoint</a>. Make sure you run the eval script with <code>-gpuid -1</code> to tell the script to run on CPU. On my machine it takes a bit less than 1 second per image to caption in CPU mode.</p>\n\n<p><strong>Beam Search</strong>. Beam search is enabled by default because it increases the performance of the search for argmax decoding sequence. However, this is a little more expensive, so if you\'d like to evaluate images faster, but at a cost of performance, use <code>-beam_size 1</code>. For example, in one of my experiments beam size 2 gives CIDEr 0.922, and beam size 1 gives CIDEr 0.886.</p>\n\n<p><strong>Running on MSCOCO images</strong>. If you train on MSCOCO (see how below), you will have generated preprocessed MSCOCO images, which you can use directly in the eval script. In this case simply leave out the <code>image_folder</code> option and the eval script and instead pass in the <code>input_h5</code>, <code>input_json</code> to your preprocessed files. This will make more sense once you read the section below :)</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/karpathy/neuraltalk2#id-like-to-train-my-own-network-on-ms-coco\"><span class=\"octicon octicon-link\"></span></a>I\'d like to train my own network on MS COCO</h3>\n\n<p>Great, first we need to some preprocessing. Head over to the <code>coco/</code> folder and run the IPython notebook to download the dataset and do some very simple preprocessing. The notebook will combine the train/val data together and create a very simple and small json file that contains a large list of image paths, and raw captions for each image, of the form:</p>\n\n<pre><code>[{ file_path: \'path/img.jpg\', captions: [\'a caption\', ...] }, ...]\n</code></pre>\n\n<p>Once we have this, we\'re ready to invoke the <code>prepro.py</code> script, which will read all of this in and create a dataset (an hdf5 file and a json file) ready for consumption in the Lua code. For example, for MS COCO we can run the prepro file as follows:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ python prepro.py --input_json coco/coco_raw.json --num_val 5000 --num_test 5000 --images_root coco/images --word_count_threshold 5 --output_json coco/cocotalk.json --output_h5 coco/cocotalk.h5</pre></div>\n\n<p>This is telling the script to read in all the data (the images and the captions), allocate 5000 images for val/test splits respectively, and map all words that occur &lt;= 5 times to a special <code>UNK</code> token. The resulting <code>json</code> and <code>h5</code> files are about 30GB and contain everything we want to know about the dataset.</p>\n\n<p><strong>Warning</strong>: the prepro script will fail with the default MSCOCO data because one of their images is corrupted. See <a href=\"https://github.com/karpathy/neuraltalk2/issues/4\">this issue</a> for the fix, it involves manually replacing one image in the dataset.</p>\n\n<p>The last thing we need is the <a href=\"http://www.robots.ox.ac.uk/~vgg/research/very_deep/\">VGG-16 Caffe checkpoint</a>, (under Models section, \"16-layer model\" bullet point). Put the two files (the prototxt configuration file and the proto binary of weights) somewhere (e.g. a <code>model</code> directory), and we\'re ready to train!</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ th train.lua -input_h5 coco/cocotalk.h5 -input_json coco/cocotalk.json</pre></div>\n\n<p>The train script will take over, and start dumping checkpoints into the folder specified by <code>checkpoint_path</code> (default = current folder). You also have to point the train script to the VGGNet protos (see the options inside <code>train.lua</code>).</p>\n\n<p>If you\'d like to evaluate BLEU/METEOR/CIDEr scores during training in addition to validation cross entropy loss, use <code>-language_eval 1</code> option, but don\'t forget to download the <a href=\"https://github.com/tylin/coco-caption\">coco-caption code</a> into <code>coco-caption</code> directory.</p>\n\n<p><strong>A few notes on training.</strong> To give you an idea, with the default settings one epoch of MS COCO images is about 7500 iterations. 1 epoch of training (with no finetuning - notice this is the default) takes about 1 hour and results in validation loss ~2.7 and CIDEr score of ~0.4. By iteration 70,000 CIDEr climbs up to about 0.6 (validation loss at about 2.5) and then will top out at a bit below 0.7 CIDEr. After that additional improvements are only possible by turning on CNN finetuning. I like to do the training in stages, where I first train with no finetuning, and then restart the train script with <code>-finetune_cnn_after 0</code> to start finetuning right away, and using <code>-start_from</code> flag to continue from the previous model checkpoint. You\'ll see your score rise up to about 0.9 CIDEr over ~2 days or so (on MS COCO).</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/karpathy/neuraltalk2#id-like-to-train-on-my-own-data\"><span class=\"octicon octicon-link\"></span></a>I\'d like to train on my own data</h3>\n\n<p>No problem, create a json file in the exact same form as before:</p>\n\n<pre><code>[{ file_path: \'path/img.jpg\', captions: [\'a caption\', ...] }, ...]\n</code></pre>\n\n<p>and invoke the <code>prepro.py</code> script to preprocess all the images and data into and hdf5 file and json file. Then invoke <code>train.lua</code> (see detailed options inside code).</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/karpathy/neuraltalk2#id-like-to-distribute-my-gpu-trained-checkpoints-for-cpu\"><span class=\"octicon octicon-link\"></span></a>I\'d like to distribute my GPU trained checkpoints for CPU</h3>\n\n<p>Use the script <code>convert_checkpoint_gpu_to_cpu.lua</code> to convert your GPU checkpoints to be usable on CPU. See inline documentation for why this separate script is needed. For example:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>th convert_checkpoint_gpu_to_cpu.lua gpu_checkpoint.t7</pre></div>\n\n<p>write the file <code>gpu_checkpoint.t7_cpu.t7</code>, which you can now run with <code>-gpuid -1</code> in the eval script.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/karpathy/neuraltalk2#license\"><span class=\"octicon octicon-link\"></span></a>License</h3>\n\n<p>BSD License.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/karpathy/neuraltalk2#acknowledgements\"><span class=\"octicon octicon-link\"></span></a>Acknowledgements</h3>\n\n<p>Parts of this code were written in collaboration with my labmate <a href=\"http://cs.stanford.edu/people/jcjohns/\">Justin Johnson</a>. </p>\n\n<p>I\'m very grateful for <a href=\"https://developer.nvidia.com/deep-learning\">NVIDIA</a>\'s support in providing GPUs that made this work possible.</p>\n\n<p>I\'m also very grateful to the maintainers of Torch for maintaining a wonderful deep learning library.</p>\n',1),(273,'mateogianolio/nblas','https://github.com/mateogianolio/nblas',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p>C++ bindings for CBLAS (Basic Linear Algebra Subprograms).</p>\n\n<p>Developed in parallel with <a href=\"https://github.com/mateogianolio/vectorious\">vectorious</a>, where it will eventually be included.</p>\n\n<p>Works out of the box with OSX since CBLAS is included in the standard Accelerate framework. You might have to download and build <a href=\"http://www.netlib.org/lapack/#_lapack_version_3_6_0\">LAPACK</a> from source on other operating systems (<strong>LINUX:</strong> <code>sudo apt-get libblas-dev</code>). Prebuilt copies of lblas will probably be included with this library in the future.</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install mateogianolio/nblas\n$ npm <span class=\"pl-c1\">test</span>\n$ npm run benchmark</pre></div>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> nblas <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>nblas<span class=\"pl-pds\">\'</span></span>);\n\n<span class=\"pl-k\">var</span> f64a <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Float64Array</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]),\n    f64b <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Float64Array</span>([<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>]);\n\n<span class=\"pl-smi\">nblas</span>.<span class=\"pl-en\">ddot</span>(<span class=\"pl-c1\">3</span>, f64a, <span class=\"pl-c1\">1</span>, f64b, <span class=\"pl-c1\">1</span>); <span class=\"pl-c\">// 32</span>\n\n<span class=\"pl-k\">var</span> f32a <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Float32Array</span>([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]),\n    f32b <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Float32Array</span>([<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>]);\n\n<span class=\"pl-smi\">nblas</span>.<span class=\"pl-en\">sdot</span>(<span class=\"pl-c1\">3</span>, f32a, <span class=\"pl-c1\">1</span>, f32b, <span class=\"pl-c1\">1</span>); <span class=\"pl-c\">// 32</span></pre></div>\n\n<p>Double precision functions expect <code>Float64Array</code> vectors, single precision functions expect <code>Float32Array</code> vectors.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/nblas#dot\"><span class=\"octicon octicon-link\"></span></a><code>dot</code></h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/nblas#axpy\"><span class=\"octicon octicon-link\"></span></a><code>axpy</code></h3>\n\n<ul class=\"task-list\"><li class=\"task-list-item\"><p> Adds a double precision vector <code>x</code> scaled with a double precision scalar <code>alpha</code> to another double precision vector <code>y</code>.</p>\n\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">void</span> <span class=\"pl-en\">daxpy</span> (\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">int</span> n,\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">double</span> alpha,\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">double</span> *x, <span class=\"pl-k\">const</span> <span class=\"pl-k\">int</span> inc_x,\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">double</span> *y, <span class=\"pl-k\">const</span> <span class=\"pl-k\">int</span> inc_y\n);</pre></div></li>\n<li class=\"task-list-item\"><p> Adds a single precision vector <code>x</code> scaled with a single precision scalar <code>alpha</code> to another single precision vector <code>y</code>.</p>\n\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">void</span> <span class=\"pl-en\">saxpy</span> (\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">int</span> n,\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">float</span> alpha,\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">float</span> *x, <span class=\"pl-k\">const</span> <span class=\"pl-k\">int</span> inc_x,\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">float</span> *y, <span class=\"pl-k\">const</span> <span class=\"pl-k\">int</span> inc_y\n);</pre></div></li>\n</ul><h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/nblas#scal\"><span class=\"octicon octicon-link\"></span></a><code>scal</code></h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/nblas#copy\"><span class=\"octicon octicon-link\"></span></a><code>copy</code></h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/nblas#swap\"><span class=\"octicon octicon-link\"></span></a><code>swap</code></h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/nblas#iamax\"><span class=\"octicon octicon-link\"></span></a><code>iamax</code></h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/mateogianolio/nblas#asum\"><span class=\"octicon octicon-link\"></span></a><code>asum</code></h3>\n\n',1),(274,'spectroâ€¦ adventures in Go (lang)â€”Mark Crossfield','http://markcrossfield.co.uk/2015-08-22-spectro-adventures-in-go.html',0,0,'\n      \n\n<p><strong>Update:</strong> this post got featured on <a href=\"https://news.ycombinator.com/item?id=10603203#up_10609119\">Hacker News on 21st November</a>, which is awesome! 😀  </p>\n\n<p>My latest spare time project has been writing a general purpose command line heat map tool designed to visualise the distribution of streams of decimal numbers (not necessarily integers) representing something like latency, duration or size. I’ve called it <a href=\"https://github.com/mrmanc/spectro\">spectro</a> as its output resembles a <a href=\"https://en.wikipedia.org/wiki/Spectrogram\">spectrogram</a>.</p>\n\n<p>It was inspired by <a href=\"https://twitter.com/sysdig/status/618826906310324224\">this Sysdig tweet</a> for a monitoring tool with built in command line visualisation, and follows on from my <a href=\"https://github.com/mrmanc/log-ninja#distribution\">distribution Awk script</a> which displays an actual histogram (although it also has some real-time functionality).</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\" xml:lang=\"en\"><p lang=\"en\" dir=\"ltr\" xml:lang=\"en\">You\'ve never seen a command line tool do this. Visualizing real-time latency spectrograms: <a href=\"https://t.co/KiLRNxMnmW\">https://t.co/KiLRNxMnmW</a> <a href=\"http://t.co/TSMrLAGWmM\">pic.twitter.com/TSMrLAGWmM</a></p>— Sysdig (@sysdig) <a href=\"https://twitter.com/sysdig/status/618826906310324224\">July 8, 2015</a></blockquote>\n\n<p>I decided to use this as an excuse to experiment with Go/golang for the following reasons:</p>\n\n<ul><li>built in simple dependency management (just import and you are good to go)</li>\n<li>easy distribution system (<code>go get github.com/mrmanc/spectro/spectro</code>)</li>\n<li>builds monolithic binaries containing required dependencies</li>\n<li>good set of libraries available</li>\n</ul><p>These things combined make it an interesting choice for writing command line tools. You can be sure the tools will work on your system, as they are compiled by <code>go get</code> for your environment. You can be sure that the programs will not be affected by changes in your system packages, as the dependencies are contained in the executable it bakes.</p>\n\n<p>The end result was successful, although I did later find an <a href=\"https://github.com/jclulow/terminal-heatmap\">existing alternative</a> (although this does not do everything I wanted, namely replaying existing log files).</p>\n\n<h2>Working with Go</h2>\n\n<p>Thankfully there is an Alpha release <a href=\"https://plugins.jetbrains.com/plugin/5047\">IntelliJ Idea Go plugin</a>. It provides some assistance with built in types, very basic refactors and syntax checking.</p>\n\n<p>Go has an interesting syntax, and a few quirky features (some good, some hmmm). While I may not agree with all the decisions, it is clear that the language features have been given a lot of thought and display a lot of wisdom. For example, I particularly liked that since map iteration order is not guaranteed, it is <a href=\"https://blog.golang.org/go-maps-in-action#TOC_7.\">actively randomised</a> at runtime to make that clear.</p>\n\n<p>I think the most frustrating part of the language was the constant conversion between various ints, floats etc. The <a href=\"http://golang.org/doc/faq#conversions\">faq</a> elaborates:</p>\n\n<p>“For reasons of portability, we decided to make things clear and straightforward at the cost of some explicit conversions in the code. The definition of constants in Go—arbitrary precision values free of signedness and size annotations—ameliorates matters considerably, though.” — <a href=\"http://golang.org/doc/faq#conversions\">http://golang.org/doc/faq#conversions</a></p>\n\n<p>So a trade off has been made against clean code to simplify the compiler, ensure portability and mitigate overflows. Okay, <a href=\"https://en.wikipedia.org/wiki/Cluster_(spacecraft)\">overflows</a> are a bad thing, and something that most developers don’t consider so that seems like a good idea. But I would have loved not to have to cast an int returned by an external function to a 64 bit int (where there is no risk of overflow), simply so my code could be less cluttered like the snippet below.</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">    fmt.Fprintf(os.Stderr, \"%\"+strconv.FormatInt(int64(paddingWidth), 10)+\"s %s\\r\", \"\", legend)\n</code></pre></div>\n<h2>What does it do?</h2>\n\n<p>You can use the provided normal command to generate some test data based on a normal distribution:</p>\n\n<p><img alt=\"normal distribution spectrograph\" src=\"http://markcrossfield.co.uk/images/spectro/normal.gif\" /></p>\n\n<p>Using <code>dtrace</code> to simulate some real time data for spectro to plot like this: (dtrace example borrowed from <a href=\"https://github.com/brendangregg/HeatMap\">this HeatMap tool</a>)</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">$ sudo dtrace -qn \'syscall::read:entry { self-&gt;ts = timestamp; }\n    syscall::read:return /self-&gt;ts/ {\n    printf(\"%d\\n\", (timestamp - self-&gt;ts) / 1000); self-&gt;ts = 0; }\' | spectro -scale exponential\n</code></pre></div>\n<p>will display something a bit like this in your terminal :</p>\n\n<p><img src=\"http://markcrossfield.co.uk/images/spectro/dtrace.gif\" alt=\"dtrace spectrograph\" /></p>\n\n<p>But it really comes into its own if you have historic logs with a formatted time in the line. Here you can use the pacemaker command to indicate to spectro how to sample the data. The pacemaker command will add extra lines to the streamed output as a signal to the spectro command. Pacemaker will look for a time matching something like this: <code>10:14:52</code>. It’s tolerant of times out of order, but this will result in repeated periods. You can leave the time text in the output, so long as the number you wish to visualise is the last thing in the line.</p>\n\n<p>You can run something like <code>cat sample.log | pacemaker | spectro</code> on the provided <code>sample.log</code> which looks like this:</p>\n<div class=\"highlight\"><pre><code class=\"language-text\">Tue Nov 11 15:56:20.945 65\nTue Nov 11 15:56:20.989 39\nTue Nov 11 15:56:21.066 41\nTue Nov 11 15:56:21.197 42\nTue Nov 11 15:56:21.245 154\n</code></pre></div>\n<p>Resulting in output like this:</p>\n\n<p><img alt=\"normal distribution spectrograph\" src=\"http://markcrossfield.co.uk/images/spectro/sample.gif\" /></p>\n\n<p>You can use <code>pacemaker -nowait</code> to analyse the file as quickly as possible (otherwise it sleeps between times), and if the log file is still being written to you could just use <code>tail -f sample.log | spectro</code>.</p>\n\n<h2>Design</h2>\n\n<p>I appreciated the line by line output of <a href=\"https://sysdig.com/aws-storage-latency-sysdig-spectrogram/\">sysdig</a>, especially as it allows the user to scroll back as far as their screen history allows. It also means you only have to modify one line of text at once, rather than re-plotting the whole screen.</p>\n\n<p>I decided early on I wanted to find a decent gradient of ANSI colours which covered the visible spectrum. That took a fair time to work out, since there is a lot of bad information out there about ANSI colours, and no list of ‘rainbow’ colours came forward in any search I did. And the rainbow scheme is very attractive when testing with a normal distribution. Frustratingly though, it turned out that lots of colours is actually very difficult to read with a less organised distribution, so I limited it to blue through red.</p>\n\n<p>I was keen to allow data to be streamed in real time, or replayed via an existing log file. While I’m not proud of the hacky time code (which just watches for times like <code>15:30:05</code> in the output) it is quite effective at processing an existing log, which can be done ASAP or with simulated pauses.</p>\n\n<p>I was also keen that the charts would adapt to changes in input, so that it is not necessary for the user to provide configuration flags. If the range of inputs changes, the scale will be replotted (an a message printed). Similarly, if the number of points in each bucket changes the magnitude scale will adapt. It is however possible for the user to start these two values at appropriate levels to prevent constant changes.</p>\n\n<p>I pulled the log replay functionality out into a separate command named <code>pacemaker</code> as I can see myself using it again in the future, and also to follow the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">Single Responsibility Principle</a> and the second of the <a href=\"http://www.ru.j-npcs.org/usoft/WWW/LJ/Articles/unixtenets.html\">Tenets of the UNIX Philosophy</a>: ‘Make each program do one thing well’. Communication between pacemaker and spectro is via extra plain text lines to keep things readable, and both are designed to work as filters in a pipeline (tenet nine).</p>\n\n<h2>Summary</h2>\n\n<p>I think I would recommend using Go for a similar task in the future, simply for the cross platform distribution mechanism, lack of dependency issues and freedom from packaging pain.</p>\n\n<p>I wouldn’t recommend it without further experimenting for large scale projects, or where another language had some distinct advantage in the libraries available.</p>\n\n<h2>Go get it</h2>\n\n<p>You can find out more, including install instructions at <a href=\"https://github.com/mrmanc/spectro\">https://github.com/mrmanc/spectro</a>.</p>\n\n\n\n<h2>Future improvements</h2>\n\n<ul><li>Potentially split the summarisation (histogram) functionality from the rendering, since it is useful on its own and can allow you to use much less space to store a replay of a period in plain text</li>\n<li>Normalise the amplitude using the time since last sample to smooth out results when processing is slow</li>\n<li>Try using a static logarithmic scale for the amplitude scaling to provide consistency and better resolution on small amplitudes</li>\n<li>Allow the user to switch scales dynamically when the command is running</li>\n<li>Use rank based rendering as suggested by this <a href=\"http://dtrace.org/blogs/dap/2011/06/20/heatmap-coloring/\">blog post by Dave Pacheco</a>.</li>\n</ul>',1),(275,'Multimedia on Linux Command Line: wget, PdfTK, ffmpeg, flac, SoX','https://sandilands.info/sgordon/multimedia-on-linux-command-line',0,0,'<p>\nSome examples of using the command line in Linux to:\n</p>\n<ul><li>Modify PDF files, e.g. combine two files into one, re-order pages. Software: <a href=\"http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/\">PdfTk</a></li>\n<li>Convert video and audio files into different formats. Software: <a href=\"https://www.ffmpeg.org/\">FFmpeg</a></li>\n<li>Modify audio and video files, e.g. split files, extra an audio stream from a movie. Software: FFmpeg, <a href=\"https://xiph.org/flac/\">flac</a></li>\n<li>Record a screencast, i.e. audio from microphone and video of screen. Software: <a href=\"http://sox.sourceforge.net/\">SoX</a>, FFmpeg</li>\n</ul><p>\nAssumes basic command line knowledge, and some <a href=\"https://sandilands.info/sgordon/aliases-prompts-and-scripting-in-linux\">Bash scripting</a>.\n</p>\n<h2>PDF</h2>\n<p>\nDownload some example PDF files:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>wget http://ict.siit.tu.ac.th/~sgordon/slides/bitcoin.pdf</kbd>\n--2014-07-23 13:46:22--  http://ict.siit.tu.ac.th/~sgordon/slides/bitcoin.pdf\nResolving ict.siit.tu.ac.th (ict.siit.tu.ac.th)... 203.131.209.82\nConnecting to ict.siit.tu.ac.th (ict.siit.tu.ac.th)|203.131.209.82|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 340296 (332K) [application/pdf]\nSaving to: `bitcoin.pdf\'\n\n100%[============================================================&gt;] 340,296     1.80M/s   in 0.2s    \n\n2014-07-23 13:46:22 (1.80 MB/s) - `bitcoin.pdf\' saved [340296/340296]\n\n<em>student@netlab01:~$</em> <kbd>wget http://ict.siit.tu.ac.th/~sgordon/slides/internet-privacy-options.pdf</kbd>\n[...]\n2014-07-23 13:47:09 (1.52 MB/s) - `internet-privacy-options.pdf\' saved [706109/706109]\n\n<em>student@netlab01:~$</em> <kbd>ls -l *.pdf</kbd>\n-rw-rw-r-- 1 student student 340296 Jul  2 16:09 bitcoin.pdf\n-rw-rw-r-- 1 student student 706109 Jun 19 08:21 internet-privacy-options.pdf\n</code></pre><p>\nConcatenate two PDF files (with <var class=\"cmd\">pdftk</var>) and view in PDF viewer (with <var class=\"cmd\">evince</var>):\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>pdftk internet-privacy-options.pdf bitcoin.pdf cat output privacy-and-bitcoin.pdf</kbd>\n<em>student@netlab01:~$</em> <kbd>ls -l *.pdf</kbd>\n-rw-rw-r-- 1 student student  340296 Jul  2 16:09 bitcoin.pdf\n-rw-rw-r-- 1 student student  706109 Jun 19 08:21 internet-privacy-options.pdf\n-rw-rw-r-- 1 student student 1452995 Jul 23 13:49 privacy-and-bitcoin.pdf\n<em>student@netlab01:~$</em> <kbd>evince privacy-and-bitcoin.pdf</kbd>\n[view on GUI]\n</code></pre><p>\nSelect specific pages of PDF for rotation and joining. The command uses pages 1-2 of file A, rotated 90 degress to the West and pages 1-2 of file B, rotated 90 degress to the East. More recent versions of <var class=\"cmd\">pdftk</var> may use \'east\' instead of \'E\' etc. See the man page for syntax on your computer.\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>pdftk A=internet-privacy-options.pdf B=bitcoin.pdf cat A1-2W B1-2E output titles.pdf</kbd>\n</code></pre><p>\nShuffle pages, i.e. 1 page from file A, then 1 page from file B, then next page from file A and so on:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>pdftk A=internet-privacy-options.pdf B=bitcoin.pdf shuffle A B output shuffled.pdf</kbd>\n</code></pre><p>\nBurst a single PDF file into multiple files, 1 per page:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>pdftk bitcoin.pdf burst output bitcoin-single_%02d.pdf</kbd>\n<em>student@netlab01:~$</em> <kbd>ls -l bitcoin*.pdf</kbd>\n-rw-rw-r-- 1 student student 340296 Jul  2 16:09 bitcoin.pdf\n-rw-rw-r-- 1 student student  51609 Jul 23 14:05 bitcoin-single_01.pdf\n-rw-rw-r-- 1 student student  52358 Jul 23 14:05 bitcoin-single_02.pdf\n-rw-rw-r-- 1 student student  86916 Jul 23 14:05 bitcoin-single_03.pdf\n[...]\n-rw-rw-r-- 1 student student  59713 Jul 23 14:05 bitcoin-single_41.pdf\n-rw-rw-r-- 1 student student  51691 Jul 23 14:05 bitcoin-single_42.pdf\n\n</code></pre><p>\nDump data about the PDF file:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>pdftk bitcoin.pdf dump_data output bitcoin.txt</kbd>\n<em>student@netlab01:~$</em> <kbd>cat bitcoin.txt</kbd>\nInfoKey: Author\nInfoValue: Networking\nInfoKey: Producer\nInfoValue: pdfTeX-1.40.14\nInfoKey: Creator\nInfoValue: LaTeX with Beamer class version 3.24\nInfoKey: ModDate\nInfoValue: D:20140702160659+07\'00\'\nInfoKey: PTEX.Fullbanner\nInfoValue: This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1\nInfoKey: Title\nInfoValue: Bitcoin\nInfoKey: CreationDate\nInfoValue: D:20140702160659+07\'00\'\nPdfID0: b773e8cb2645c51857f27f8d646a1997\nPdfID1: b773e8cb2645c51857f27f8d646a1997\nNumberOfPages: 42\nBookmarkTitle: Cryptography Principles\n[...]\nPageLabelPrefix: 42\nPageLabelNumStyle: NoNumber\n</code></pre><p>\nAdd a watermark to a PDF. First create a PDF that contains the watermark by using <var class=\"cmd\">groff</var> to produce a PostScript file, and <var class=\"cmd\">ps2pdf</var> to convert that PostScript file to PDF. Then use <var class=\"cmd\">pdftk</var> to stamp that background PDF to the original. A better way would be to create the background PDF using other tools (e.g. OpenOffice and then export to PDF) so it would match the size of the original PDF.\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>echo \"Steven Gordon created this\" | groff -Tps | ps2pdf - bg.pdf</kbd>\n<em>student@netlab01:~$</em> <kbd>pdftk bitcoin.pdf stamp bg.pdf output bitcoin-bg.pdf</kbd>\n</code></pre><h2>Video and Audio Conversions</h2>\n<p>\nDefault Ubuntu installs use <a href=\"https://libav.org/\">avconv</a>, which was a fork of the popular <a href=\"https://www.ffmpeg.org/\">ffmpeg</a>. Some other Linux systems use ffmpeg instead. Personally I use ffmpeg (as that is what I have experience with). Therefore I have installed ffmpeg on the lab computers by compiling from source. If you want ffmpeg on your computer then the <a href=\"https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu\">instructions for compiling</a> are very good. Give it a try.\n</p>\n<p>\nOn the lab computers you will find a <var class=\"file\">ffmpeg_build</var> and <var class=\"file\">ffmpeg_sources</var> directory which were used for compilation, and the executable files are in the <var class=\"file\">bin</var> directory. If you haven\'t already done so from a previous task, tour PATH needs to be set to include the <var class=\"file\">bin</var> directory, e.g.:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>PATH=/home/student/bin:$PATH</kbd>\n</code></pre><p>\nIf you have avconv, then most of the corresponding commands can be substitute as below, although sometimes there are different syntax for options between avconv and ffmpeg.\n</p>\n<ul><li>ffmpeg -- avconv</li>\n<li>ffprobe -- avprobe</li>\n<li>ffplay -- avplay</li>\n</ul><h3>View Media Information</h3>\n<p>\nDownload the <a href=\"http://tearsofsteel.org/\">Tears of Steel</a>, an open movie using open source software, especially <a href=\"http://www.blender.org/\">Blender</a> for animations. Either download from the <a href=\"http://tearsofsteel.org/\">Tears of Steel website</a> or if in the lab, from the local server as below:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>wget http://10.10.6.210/tears_of_steel_720p.mkv</kbd>\n</code></pre><p>\nView details of a media file:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffprobe tears_of_steel_720p.mkv</kbd>\nffprobe version 2.2.git Copyright (c) 2007-2014 the FFmpeg developers\n  built on Jul 23 2014 19:00:41 with gcc 4.6 (Ubuntu/Linaro 4.6.3-1ubuntu5)\n  configuration: --prefix=/home/student/ffmpeg_build --extra-cflags=-I/home/student/ffmpeg_build/include --extra-ldflags=-L/home/student/ffmpeg_build/lib --bindir=/home/student/bin --extra-libs=-ldl --enable-gpl --enable-libass --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-nonfree --enable-x11grab\n  libavutil      52. 92.101 / 52. 92.101\n  libavcodec     55. 69.100 / 55. 69.100\n  libavformat    55. 48.101 / 55. 48.101\n  libavdevice    55. 13.102 / 55. 13.102\n  libavfilter     4. 11.102 /  4. 11.102\n  libswscale      2.  6.100 /  2.  6.100\n  libswresample   0. 19.100 /  0. 19.100\n  libpostproc    52.  3.100 / 52.  3.100\nInput #0, matroska,webm, from \'tears_of_steel_720p.mkv\':\n  Metadata:\n    encoder         : libmkv 0.6.5\n    TITLE           : \n    ARTIST          : \n    COMPOSER        : \n    SYNOPSIS        : \n    DATE_RELEASED   : \n    GENRE           : \n  Duration: 00:12:14.17, start: 0.000000, bitrate: 4167 kb/s\n    Stream #0:0(eng): Video: h264 (Main), yuv420p(tv, bt709), 1280x534 [SAR 1:1 DAR 640:267], 24 fps, 24 tbr, 1k tbn, 180k tbc (default)\n    Stream #0:1(eng): Audio: aac, 44100 Hz, stereo, fltp (default)\n\n</code></pre><p>\nThe first lines are just the banner from ffmpeg (you can hide this using the <var class=\"cmd\">-hide_banner</var> option; I will not show it in subsequent output).<br />The last two lines show the media streams: video using H.264 codec and audio using AAC codec.\n</p>\n<h3>Split/Cut Videos</h3>\n<p>\nA quick way to extract a portion of video from a file (e.g. the first 5 minutes). Here we will select just 20 seconds of video, starting from 50 seconds into it, i.e. from 0m50s to 1m10s.\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffmpeg -ss 00:00:50 -i tears_of_steel_720p.mkv -t 00:00:20 -vcodec copy -acodec copy tos.mkv</kbd>\nInput #0, matroska,webm, from \'tears_of_steel_720p.mkv\':\n  Metadata:\n    encoder         : libmkv 0.6.5\n    TITLE           : \n    ARTIST          : \n    COMPOSER        : \n    SYNOPSIS        : \n    DATE_RELEASED   : \n    GENRE           : \n  Duration: 00:12:14.17, start: 0.000000, bitrate: 4167 kb/s\n    Stream #0:0(eng): Video: h264 (Main), yuv420p(tv, bt709), 1280x534 [SAR 1:1 DAR 640:267], 24 fps, 24 tbr, 1k tbn, 180k tbc (default)\n    Stream #0:1(eng): Audio: aac, 44100 Hz, stereo, fltp (default)\nOutput #0, matroska, to \'tos.mkv\':\n  Metadata:\n    GENRE           : \n    TITLE           : \n    ARTIST          : \n    COMPOSER        : \n    SYNOPSIS        : \n    DATE_RELEASED   : \n    encoder         : Lavf55.43.100\n    Stream #0:0(eng): Video: h264 (H264 / 0x34363248), yuv420p, 1280x534 [SAR 1:1 DAR 640:267], q=2-31, 24 fps, 1k tbn, 1k tbc (default)\n    Stream #0:1(eng): Audio: aac ([255][0][0][0] / 0x00FF), 44100 Hz, stereo (default)\nStream mapping:\n  Stream #0:0 -&gt; #0:0 (copy)\n  Stream #0:1 -&gt; #0:1 (copy)\nPress [q] to stop, [?] for help\nframe=  487 fps=0.0 q=-1.0 Lsize=    6750kB time=00:00:20.00 bitrate=2763.9kbits/s    \nvideo:6347kB audio:392kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.154705%\n</code></pre><p>\nThe options are as follows (the ordering for some is important):\n</p>\n<ul><li><var class=\"cmd\">-ss 00:00:50</var> start time at 50 seconds</li>\n<li><var class=\"cmd\">-i tears_of_steel_720p.mkv</var> is the input file</li>\n<li><var class=\"cmd\">-t 00:00:20</var> is duration to copy</li>\n<li><var class=\"cmd\">-vcodec copy</var> copies the video codec from input to output (i.e. does not re-code)</li>\n<li><var class=\"cmd\">-acodec copy</var> copies the audio codec from input to output (i.e. does not re-code)</li>\n<li><var class=\"cmd\">tos.mkv</var> is the output filename</li>\n</ul><h3>Convert Videos</h3>\n<p>\nConverting videos (and audio files) can be quite complex as you need to consider the container format (e.g. MKV), video codec (H.264) and audio codec (AAC) and may convert one or all of these to another format/codec. Some formats/codecs require specific parameters (e.g. bit rates, channels, resolutions). First lets see what formats (containers) and codecs are supported. avconv supports reading of some formats/codecs (demux, decode) and writing to others (mux, encode).\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffmpeg -formats</kbd>\nFile formats:\n D. = Demuxing supported\n .E = Muxing supported\n --\n  E 3g2             3GP2 (3GPP2 file format)\n  E 3gp             3GP (3GPP file format)\n D  4xm             4X Technologies\n  E a64             a64 - video for Commodore 64\n D  aac             raw ADTS AAC (Advanced Audio Coding)\n DE ac3             raw AC-3\n[...]\n D  xmv             Microsoft XMV\n D  xwma            Microsoft xWMA\n D  yop             Psygnosis YOP\n DE yuv4mpegpipe    YUV4MPEG pipe\n<em>student@netlab01:~$</em> <kbd>./ffmpeg -codecs</kbd>\nCodecs:\n D..... = Decoding supported\n .E.... = Encoding supported\n ..V... = Video codec\n ..A... = Audio codec\n ..S... = Subtitle codec\n ...I.. = Intra frame-only codec\n ....L. = Lossy compression\n .....S = Lossless compression\n -------\n D.VI.. 012v                 Uncompressed 4:2:2 10-bit\n D.V.L. 4xm                  4X Movie\n D.VI.S 8bps                 QuickTime 8BPS video\n[...]\n D.S... text                 raw UTF-8 text\n D.S... vplayer              VPlayer subtitle\n DES... webvtt               WebVTT subtitle\n DES... xsub                 XSUB\n</code></pre><p>\nNow lets try some conversions on the 20 second clip.\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffmpeg -i tos.mkv tos.mp4</kbd>\n<em>student@netlab01:~$</em> <kbd>ffmpeg -i tos.mkv tos.webm</kbd>\n<em>student@netlab01:~$</em> <kbd>ffmpeg -i tos.mkv tos.avi</kbd>\n<em>student@netlab01:~$</em> <kbd>ls -lh tos.*</kbd>\n-rw-rw-r-- 1 student student 1.9M Jul 23 16:13 tos.avi\n-rw-rw-r-- 1 student student 6.6M Jul 23 16:01 tos.mkv\n-rw-rw-r-- 1 student student 3.0M Jul 23 16:09 tos.mp4\n-rw-rw-r-- 1 student student 732K Jul 23 16:10 tos.webm\n</code></pre><table><tr><th>Extension</th>\n<th>Container</th>\n<th>Video</th>\n<th>Audio</th>\n</tr><tr><td>mp4</td>\n<td>MP4</td>\n<td>H.264</td>\n<td>AAC</td>\n</tr><tr><td>mkv</td>\n<td>Matroska</td>\n<td>H.264</td>\n<td>AAC</td>\n</tr><tr><td>webm</td>\n<td>WebM</td>\n<td>VP8</td>\n<td>Ogg Vorbis</td>\n</tr><tr><td>avi</td>\n<td>AVI</td>\n<td>MPEG-4</td>\n<td>MP3</td>\n</tr><tr><td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr><tr><td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr><tr><td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr></table><p>\nThe difficult part of video conversions is selecting the correct parameters. Not just codecs, but also bit rates, resolution, channels, sampling rates and codec specific parameters. ffmpeg will choose reasonable default parameters some times, but other times you will need to specify them yourself. Here are some examples that convert again to WebM. The first creates a low quality output, reducing the resolution to 640x267 (compared to the original 1280x534). The second creates a high quality output, setting the quality factor to 20 (which results in an average bitrate of 578kb/s, compared to the original 294kb/s). Is there any visual difference in the output of the videos?\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffmpeg -i tos.mkv -vcodec libvpx -s 640x267 -acodec libvorbis -ab 64k -f webm tos-low.webm</kbd>\n<em>student@netlab01:~$</em> <kbd>ffmpeg -i tos.mkv -vcodec libvpx -q 20 -acodec libvorbis -f webm tos-hi.webm</kbd>\n<em>student@netlab01:~$</em> <kbd>ffprobe -hide_banner tos.webm</kbd>\nInput #0, matroska,webm, from \'tos.webm\':\n  Metadata:\n    title           : \n    encoder         : Lavf55.43.100\n  Duration: 00:00:20.33, start: 0.000000, bitrate: 294 kb/s\n    Stream #0:0(eng): Video: vp8, yuv420p, 1280x534, SAR 1:1 DAR 640:267, 24 fps, 24 tbr, 1k tbn, 1k tbc (default)\n    Stream #0:1(eng): Audio: vorbis, 44100 Hz, stereo, fltp (default)\n<em>student@netlab01:~$</em> <kbd>ffprobe -hide_banner tos-low.webm</kbd>\nInput #0, matroska,webm, from \'tos-low.webm\':\n  Metadata:\n    title           : \n    encoder         : Lavf55.43.100\n  Duration: 00:00:20.33, start: 0.000000, bitrate: 200 kb/s\n    Stream #0:0(eng): Video: vp8, yuv420p, 640x267, SAR 1:1 DAR 640:267, 24 fps, 24 tbr, 1k tbn, 1k tbc (default)\n    Stream #0:1(eng): Audio: vorbis, 44100 Hz, stereo, fltp (default)\n<em>student@netlab01:~$</em> <kbd>ffprobe -hide_banner tos-hi.webm</kbd>\nInput #0, matroska,webm, from \'tos-hi.webm\':\n  Metadata:\n    title           : \n    encoder         : Lavf55.43.100\n  Duration: 00:00:20.33, start: 0.000000, bitrate: 578 kb/s\n    Stream #0:0(eng): Video: vp8, yuv420p, 1280x534, SAR 1:1 DAR 640:267, 24 fps, 24 tbr, 1k tbn, 1k tbc (default)\n    Stream #0:1(eng): Audio: vorbis, 44100 Hz, stereo, fltp (default)\n</code></pre><p>\nTo select the correct parameters you often need to know about the specific codecs. Read the ffmpeg man page for the many options available.\n</p>\n<h3>Extract Audio Stream from a Video</h3>\n<p>\nMovies usually have at least two stream: video and audio (some may have multiple audio streams, e.g. in different languages or codecs). You can separate them, for example saving just the audio from a movie to a file. The first command below copies the audio stream, while the second also converts it to 64kb/s/s MP3.\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffmpeg -i tos.mkv -vn -acodec copy tos-audio.aac</kbd>\n<em>student@netlab01:~$</em> <kbd>ffmpeg -i tos.mkv -vn -acodec mp3 -ab 64k tos-audio-lo.mp3</kbd>\n</code></pre><h3>Convert Audio Files</h3>\n<p>\nWe can convert audio in the same manner as video. It is usually a bit easier to understand as there is only a single codec to be concerned with.\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffmpeg -i tos-audio.aac tos-audio.mp3</kbd>\n<em>student@netlab01:~$</em> <kbd>ffmpeg -i tos-audio.aac tos-audio.wma</kbd>\n<em>student@netlab01:~$</em> <kbd>ffmpeg -i tos-audio.aac tos-audio.flac</kbd>\n</code></pre><h3>FLAC Audio</h3>\n<p>\nThe Free Audio Lossless Codec (FLAC) is a good choice for encoding audio if you want to maintain the quality from the original source. You can process FLAC in ffmpeg in the same way as other audio codecs. However there are also other tools, one called simply <var class=\"cmd\">flac</var>. Lets try some operations on the soundtrack of Tears of Steel (the stereo version in FLAC format is available via <a href=\"http://media.xiph.org/tearsofsteel/\">Xiph.org</a>).\n</p>\n<p>\nThe file info:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffprobe -hide_banner tearsofsteel-stereo.flac</kbd>\nInput #0, flac, from \'tearsofsteel-stereo.flac\':\n  Metadata:\n    TITLE           : Tears of Steel\n    ARTIST          : Blender Foundation\n    DATE            : 2012\n    COPYRIGHT       : (CC) Blender Foundation | mango.blender.org\n    LICENSE         : http://creativecommons.org/licenses/by/3.0/\n    comment         : DVD stereo mix\n  Duration: 00:12:14.00, start: 0.000000, bitrate: 913 kb/s\n    Stream #0:0: Audio: flac, 48000 Hz, stereo, s32\n<em>student@netlab01:~$</em> <kbd></kbd>\n<em>student@netlab01:~$</em> <kbd></kbd>\n</code></pre><p>\nNow use <var class=\"cmd\">flac</var> to decode to obtain a PCM WAVE output. At the same time we will cut, only getting from time 50s to 1m10s.\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>flac -d tearsofsteel-stereo.flac --skip=00:50.00 --until=01:10.00</kbd>\nflac 1.2.1, Copyright (C) 2000,2001,2002,2003,2004,2005,2006,2007  Josh Coalson\nflac comes with ABSOLUTELY NO WARRANTY.  This is free software, and you are\nwelcome to redistribute it under certain conditions.  Type `flac\' for details.\n\ntearsofsteel-stereo.flac: done  \n<em>student@netlab01:~$</em> <kbd>ls -l tearsofsteel-stereo.*</kbd>\n-rw-rw-r-- 1 student student 83769154 Sep 29  2012 tearsofsteel-stereo.flac\n-rw-rw-r-- 1 student student  5760044 Sep 29  2012 tearsofsteel-stereo.wav\n</code></pre><h2><a></a>Sreencasts</h2>\n<p>\nDuring my lectures I record my screen as well as audio from microphone, and then post the resulting video screencast on Youtube. Lets see how.\n</p>\n<h3>Recording Audio from Microphone</h3>\n<p>\nMany applications, including ffmpeg, can be used to record audio. I use <a href=\"http://sox.sourceforge.net/\">SoX</a>, specifically the <var class=\"cmd\">rec</var> command (which is just a shortcut to <var class=\"cmd\">sox</var> but by default selects the default input device, typically the microphone). Here is an example that records single channel 16-bit audio at 44.1kHz, saving in FLAC format.\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>rec -r 44100 -b 16 -c 1 audio.flac\n</kbd>\n</code></pre><h3>Recording the Screen</h3>\n<p>\nI use ffmpeg to capture the screen as follows, with the options explained below:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffmpeg -f x11grab -r 10 -s 1600x900 -i :0.0+0,0 -vcodec libx264 -preset ultrafast -crf 0 screen.mp4</kbd>\n</code></pre><ul><li><var class=\"cmd\">-f x11grab</var> indicates to take the input from the X11 display (i.e. the screen on Linux)</li>\n<li><var class=\"cmd\">-r 10</var> is the frame rate (generally in my lectures there is little motion, so a low frame rate is ok)</li>\n<li><var class=\"cmd\">-s 1600x900</var> is the resolution of the screen</li>\n<li><var class=\"cmd\">-i :0.0</var> indicates the display number (should not need to change this)</li>\n<li><var class=\"cmd\">+0,0</var> is the offset from the top-left of the screen to record (this will be used later)</li>\n<li><var class=\"cmd\">-vcodec libx264</var> specifics to use x264 to encode to H.264 codec</li>\n<li><var class=\"cmd\">-preset ultrafast -crf 0</var> are options for the x264 codec</li>\n<li><var class=\"cmd\">screen.mp4</var> is the output file</li>\n</ul><h3>Recording the Projector (when Multiple Monitors)</h3>\n<p>\nIn lectures I have multiple monitors. My normal configuration is the laptop screen (resolution 1366x768) is the first display and the projector (resolution 1024x768) extends that display to the right. That is, from the point of view of applications (including ffmpeg), I have a single display is 2390x768.\n</p>\n<pre>\n+====================+================+\n|                    |                |\n|                    |                |\n|      laptop        |   projector    |\n|     1366x768       |   1024x768     | \n|                    |                |\n|                    |                |\n+====================+================+\n\n &lt;----- 1366 -------&gt; &lt;---- 1024 ----&gt;\n &lt;-------------- 2390 ---------------&gt;\n</pre><p>\nWhen recording the lecture I want to just recorder the projector portion of the display, not that on my laptop. With ffmpeg you can specify an offset from the top-left coordinates which are (0,0) to which you record. In the above example command the size of the display to record was set (using the <var class=\"cmd\">-s</var> option) to 1600x900. This needs to be changed to the size of the projector, 1024x768. And in the above example we use a 0 offset, i.e. <var class=\"cmd\">+0,0</var>. Here we need to shift to the right by the size of the laptop screen, i.e. <var class=\"cmd\">+1366,0</var>. Then only the projector portion of the display will be recorded. The resulting command is:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffmpeg -f x11grab -r 10 -s 1024x768 -i :0.0+1366,0 -vcodec libx264 -preset ultrafast -crf 0 screen.mp4</kbd>\n</code></pre><p>\nYou can see the size and offset to record just a portion of the display.\n</p>\n<h3>Starting Audio and Screen Record</h3>\n<p>\nI use a script to start the audio and screen recording at the same time. A cut down version is shown below. The full script I use, which includes some other features, can be <a href=\"https://sandilands.info/sgordon/doc/code/screencast\">downloaded</a>. Put it into your <var class=\"file\">bin</var> directory (which should be in the PATH).</p>\n<pre><code>#!/bin/bash\nrec -q -r 44100 -b 16 -c 2 audio.flac &amp;\naudioPID=$!\nffmpeg -f x11grab -r 10 -s 1024x768 -i :0.0+1366,0 -vcodec libx264 -preset ultrafast -crf 0 screen.mp4 &amp;\nscreenPID=$!\nop=\"s\"\nwhile [ ${op} != \"z\" ]\ndo\n        read -n1 op\ndone\nkill ${audioPID} ${screenPID}\nexit\n</code></pre><p>\nThe full <a href=\"https://sandilands.info/sgordon/doc/code/screencast\">screencast</a> script be be run as:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>screencast netlab test</kbd>\n</code></pre><h3>Combining Audio and Screen Files</h3>\n<p>\nAfter using <var class=\"cmd\">screencast</var> to record the audio and screen into separate files, we need to combine (multiplex) them into a single file. I will do it in three steps.\n</p>\n<p>\nFirst convert the FLAC audio to WAV:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>flac -d test-audio.flac</kbd>\n</code></pre><p>\nSecond convert the WAV audio to AAC:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>faac -b 64 test-audio.wav</kbd>\n</code></pre><p>\nFinally combine the audio (AAC) and screen (MP4) to produce an MP4 video:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>ffmpeg -i test-screen.mp4 -i test-audio.aac -absf aac_adtstoasc -vcodec copy -acodec copy test-video.mp4</kbd>\n</code></pre><p>\nFor my lectures I have a script called <a href=\"https://sandilands.info/sgordon/doc/code/audioscreen2video\">audioscreen2video</a> that combines the above commands as well as a few others to create the video. Run it as:\n</p>\n<pre><code><em>student@netlab01:~$</em> <kbd>audioscreen2video test 2014-07-25</kbd>\n</code></pre><p class=\"pdflink\"><a href=\"https://sandilands.info/sgordon/doc/multimedia-on-linux-command-line\">PDF version of this page</a>, 23 Jul 2014</p>\n',1),(276,'htmlPy','http://amol-mandhane.github.io/htmlPy/',0,0,'\r\n    <div class=\"container\">\n        \n        <h4>HTML5-CSS3-Javascript based GUI library in Python</h4>\n        <a href=\"https://travis-ci.org/amol-mandhane/htmlPy\" class=\"badges\">\r\n            <img src=\"https://img.shields.io/travis/amol-mandhane/htmlPy/master.svg\" alt=\"master.svg\" /></a>\n        <a href=\"https://pypi.python.org/pypi/htmlPy/\" class=\"badges\">\r\n            <img src=\"https://img.shields.io/pypi/v/htmlPy.svg\" alt=\"htmlPy.svg\" /></a>\n        <a href=\"https://pypi.python.org/pypi/htmlPy/\" class=\"badges\">\r\n            <img src=\"https://img.shields.io/pypi/dm/htmlPy.svg\" alt=\"htmlPy.svg\" /></a>\n        <p>htmlPy is a wrapper around <a href=\"https://pyside.org/\">PySide</a>\'s QtWebKit library. It helps with creating beautiful GUIs using <b>HTML5, CSS3 and Javascript</b> for standalone Python applications. It is built on <a href=\"http://qt.io/\">Qt</a> which makes it highly <b>customizable and cross-platform</b>. htmlPy is compatible with both <b>Python2 and Python3</b>. It can be used with any python library or environment like <a href=\"https://www.djangoproject.com/\">django</a>, <a href=\"http://flask.pocoo.org/\">flask</a>, <a href=\"http://www.scipy.org/\">scipy</a>, <a href=\"http://virtualenv.readthedocs.org/\">virtualenv</a> etc. You can use front-end libraries and frameworks like <a href=\"http://getbootstrap.com/\">bootstrap</a>, <a href=\"http://jquery.com/\">jQuery</a>, <a href=\"http://jqueryui.com/\">jQuery UI</a> etc. and create GUIs for your applications in no time.</p>\n\n        <h2>Documentation</h2>\n        <p>The documentation is hosted at <a href=\"http://htmlpy.readthedocs.org/\">http://htmlpy.readthedocs.org/</a>. It contains <b>installation instructions, tutorials, reference guide</b>, compatibility details, and more.</p>\n\n        <h2>Example</h2>\n        <table><tr><td>\r\n                <h3>Back-end <br /><small class=\"typewriter\">back_end.py</small></h3>\r\n                <pre>\r\n                    <code class=\"language-python\">\r\nimport htmlPy\r\nfrom main import app\r\n\r\n\r\nclass BackEnd(htmlPy.Object):\r\n\r\n    @htmlPy.Slot()\r\n    def say_hello_world():\r\n        app.html = u\"Hello, world\"\r\n                    </code>\r\n                </pre></td>\r\n                <td>\r\n                <h3>GUI <br /><small class=\"typewriter\">main.py</small></h3>\r\n                <pre>\r\n                    <code class=\"language-python\">\r\nimport htmlPy\r\nfrom back_end import BackEnd\r\n\r\napp = htmlPy.AppGUI(\r\n    title=u\"Sample application\")\r\napp.maximized = True\r\napp.bind(BackEnd())\r\n\r\napp.template = (\"index.html\", {})\r\n\r\nif __name__ == \"__main__\":\r\n    app.start()\r\n                    </code>\r\n                </pre></td>\r\n                <td>\r\n                <h3>Front-end <br /><small class=\"typewriter\">index.html</small></h3>\r\n                <pre>\r\n                    <code class=\"language-markup highlight\">\r\n&lt;html&gt;\r\n  &lt;body&gt;\r\n    &lt;a\r\n    href=\"BackEnd.say_hello_world\"\r\n    data-bind=\"true\"&gt;\r\n      Click to say \"Hello, world\"\r\n    &lt;/a&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;\r\n                    </code>\r\n                </pre></td>\r\n            </tr></table><h2>Code</h2>\n        <p>htmlPy source code is hosted on <a href=\"https://github.com/amol-mandhane/htmlPy\">GitHub</a>, tested on <a href=\"https://travis-ci.org/amol-mandhane/htmlPy\">Travis CI</a> and released on <a href=\"https://pypi.python.org/pypi/htmlPy/\">PyPI</a>.</p>\n    </div>\r\n    <br />\r\n        Published with <a href=\"http://pages.github.com/\">GitHub Pages</a>\r\n    ',1),(277,'feross/webtorrent','https://github.com/feross/webtorrent',0,0,'\n    <h3>\n      <span class=\"octicon octicon-book\"></span>\n      README.md\n    </h3>\n\n    <p><a href=\"https://gitter.im/feross/webtorrent\"><img src=\"https://camo.githubusercontent.com/4d9bc77e535121d67a47f4fee18b27b9505680ee/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769747465722d6a6f696e253230636861742532302545322538362539322d627269676874677265656e2e7376673f7374796c653d666c6174\" alt=\"Gitter\" /></a>\n<a href=\"https://travis-ci.org/feross/webtorrent\"><img src=\"https://camo.githubusercontent.com/aa0f7bec0509fec384a169d4bec4aa8512fec546/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6665726f73732f776562746f7272656e742e7376673f7374796c653d666c6174\" alt=\"Build Status\" /></a>\n<a href=\"https://npmjs.org/package/webtorrent\"><img src=\"https://camo.githubusercontent.com/15a8082a6deadc41372fcac7f7dd4692607fb655/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f776562746f7272656e742e7376673f7374796c653d666c6174\" alt=\"NPM Version\" /></a>\n<a href=\"https://npmjs.org/package/webtorrent\"><img src=\"https://camo.githubusercontent.com/e6564e087c205cf8c7f6936f3d0123a1db9c61ea/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f776562746f7272656e742e7376673f7374796c653d666c6174\" alt=\"NPM Downloads\" /></a></p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#streaming-torrent-client-for-node--the-browser\"><span class=\"octicon octicon-link\"></span></a>Streaming torrent client for node &amp; the browser</h3>\n\n<p><strong>WebTorrent</strong> is a streaming torrent client for <strong>node.js</strong> and the <strong>browser</strong>. YEP,\nTHAT\'S RIGHT. THE BROWSER. It\'s written completely in JavaScript – the language of the web\n– so the same code works in both runtimes.</p>\n\n<p>In node.js, this module is a simple torrent client, using TCP and UDP to talk to\nother torrent clients.</p>\n\n<p>In the browser, WebTorrent uses <strong>WebRTC</strong> (data channels) for peer-to-peer transport.\nIt can be used <strong>without</strong> browser plugins, extensions, or installations. It\'s Just\nJavaScript™.</p>\n\n<p>Simply include the\n<a href=\"https://cdn.jsdelivr.net/webtorrent/latest/webtorrent.min.js\"><code>webtorrent.min.js</code></a> script\non your page to start fetching files over WebRTC using the BitTorrent protocol, or\n<code>require(\'webtorrent\')</code> with <a href=\"http://browserify.org/\">browserify</a>. See <a href=\"https://github.com/feross/webtorrent#webtorrent-in-production\">demo apps\n</a> and <a href=\"https://github.com/feross/webtorrent#usage\">code examples</a> below.</p>\n\n<p>To make BitTorrent work over WebRTC (which is the only p2p transport that works on the\nweb) we made some protocol changes. Therefore, a browser-based WebTorrent client or <strong>\"web\npeer\"</strong> can only connect to other clients that support WebTorrent/WebRTC.</p>\n\n<p>To seed files to web peers, use a client that supports WebTorrent, e.g.\n<a href=\"https://github.com/feross/webtorrent-hybrid\">webtorrent-hybrid</a> or\n<a href=\"https://instant.io/\">instant.io</a>. We\'re also working on\n<a href=\"https://github.com/feross/WebTorrent.app\">WebTorrent.app</a>, a desktop client with a\nfamiliar UI that can connect to web peers. We hope established torrent clients\n(Transmission, Vuze, uTorrent, etc.) will add support for WebTorrent so they too can\nconnect to both normal <em>and</em> web peers.</p>\n\n<p><a href=\"https://github.com/feross/webtorrent/blob/master/img/network.png\"><img src=\"https://github.com/feross/webtorrent/raw/master/img/network.png\" alt=\"Network\" /></a></p>\n\n<blockquote>\n<p>Warning: This is alpha software. <strong>Watch/star to follow along with progress.</strong></p>\n</blockquote>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#features\"><span class=\"octicon octicon-link\"></span></a>Features</h3>\n\n<ul><li><strong>Torrent client for node.js &amp; the browser</strong> (same npm module!)</li>\n<li><strong>Insanely fast</strong></li>\n<li>Download <strong>multiple torrents</strong> simultaneously, efficiently</li>\n<li><strong>Pure Javascript</strong> (no native dependencies)</li>\n<li>Exposes files as <strong>streams</strong>\n\n<ul><li>Fetches pieces from the network on-demand so seeking is supported (even before torrent is finished)</li>\n<li>Seamlessly switches between sequential and rarest-first piece selection strategy</li>\n</ul></li>\n<li>Supports advanced torrent client features\n\n</li>\n<li><strong>Comprehensive test suite</strong> (runs completely offline, so it\'s reliable and fast)</li>\n</ul><h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#browser-only-features\"><span class=\"octicon octicon-link\"></span></a>Browser-only features</h4>\n\n<ul><li><strong>WebRTC data channels</strong> for lightweight peer-to-peer communication with <strong>no plugins</strong></li>\n<li><strong>No silos.</strong> WebTorrent is a P2P network for the <strong>entire web.</strong> WebTorrent clients\nrunning on one domain can connect to clients on any other domain.</li>\n<li>Stream video torrents into a <code>&lt;video&gt;</code> tag (<code>webm (vp8, vp9)</code> or <code>mp4 (h.264)</code>)</li>\n<li>Supports Chrome, Firefox, and Opera.</li>\n</ul><p><a href=\"https://saucelabs.com/u/webtorrent\"><img src=\"https://camo.githubusercontent.com/6e32aef29c12890d55db32d91380a79559d8f275/68747470733a2f2f73617563656c6162732e636f6d2f62726f777365722d6d61747269782f776562746f7272656e742e737667\" alt=\"Sauce Test Status\" /></a></p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#node-only-features\"><span class=\"octicon octicon-link\"></span></a>Node-only features</h4>\n\n<ul><li>Stream to <strong>AirPlay</strong>, <strong>Chromecast</strong>, <strong>VLC player</strong>, and many other devices/players</li>\n</ul><p><strong>NOTE</strong>: To connect to \"web peers\" (browsers) in addition to normal BitTorrent peers, use\n  <a href=\"https://github.com/feross/webtorrent-hybrid\">webtorrent-hybrid</a> which includes WebRTC\n  support for node.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#install\"><span class=\"octicon octicon-link\"></span></a>Install</h3>\n\n<p>To install WebTorrent for use in node or the browser with <code>require(\'webtorrent\')</code>, run:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>npm install webtorrent</pre></div>\n\n<p>To install a <code>webtorrent</code> command line program, run:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>npm install webtorrent -g</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#ways-to-help\"><span class=\"octicon octicon-link\"></span></a>Ways to help</h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#webtorrent-in-production\"><span class=\"octicon octicon-link\"></span></a>WebTorrent in production</h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#usage\"><span class=\"octicon octicon-link\"></span></a>Usage</h3>\n\n<p>WebTorrent is the first BitTorrent client that works in the browser, using open web\nstandards (no plugins, just HTML5 and WebRTC)! It\'s easy to get started!</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#in-the-browser\"><span class=\"octicon octicon-link\"></span></a>In the browser</h4>\n\n<h5><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#downloading-a-file-is-simple\"><span class=\"octicon octicon-link\"></span></a>Downloading a file is simple:</h5>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> WebTorrent <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>webtorrent<span class=\"pl-pds\">\'</span></span>)\n\n<span class=\"pl-k\">var</span> client <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">WebTorrent</span>()\n<span class=\"pl-k\">var</span> magnetUri <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>...<span class=\"pl-pds\">\'</span></span>\n\n<span class=\"pl-smi\">client</span>.<span class=\"pl-c1\">add</span>(magnetUri, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">torrent</span>) {\n  <span class=\"pl-c\">// Got torrent metadata!</span>\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Client is downloading:<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-smi\">torrent</span>.<span class=\"pl-smi\">infoHash</span>)\n\n  <span class=\"pl-smi\">torrent</span>.<span class=\"pl-smi\">files</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">file</span>) {\n    <span class=\"pl-c\">// Display the file by appending it to the DOM. Supports video, audio, images, and</span>\n    <span class=\"pl-c\">// more. Specify a container element (CSS selector or reference to DOM node).</span>\n    <span class=\"pl-smi\">file</span>.<span class=\"pl-en\">appendTo</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>body<span class=\"pl-pds\">\'</span></span>)\n  })\n})</pre></div>\n\n<h5><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#seeding-a-file-is-simple-too\"><span class=\"octicon octicon-link\"></span></a>Seeding a file is simple, too:</h5>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> dragDrop <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>drag-drop<span class=\"pl-pds\">\'</span></span>)\n<span class=\"pl-k\">var</span> WebTorrent <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>webtorrent<span class=\"pl-pds\">\'</span></span>)\n\n<span class=\"pl-k\">var</span> client <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">WebTorrent</span>()\n\n<span class=\"pl-c\">// When user drops files on the browser, create a new torrent and start seeding it!</span>\n<span class=\"pl-en\">dragDrop</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>body<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">files</span>) {\n  <span class=\"pl-smi\">client</span>.<span class=\"pl-en\">seed</span>(files, <span class=\"pl-k\">function</span> <span class=\"pl-en\">onTorrent</span> (<span class=\"pl-smi\">torrent</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Client is seeding:<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-smi\">torrent</span>.<span class=\"pl-smi\">infoHash</span>)\n  })\n})</pre></div>\n\n<p>There are more examples in the <a href=\"https://github.com/feross/webtorrent/tree/master/examples\">examples</a> folder.</p>\n\n<h5><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#browserify\"><span class=\"octicon octicon-link\"></span></a>Browserify</h5>\n\n<p>WebTorrent works great with <a href=\"http://browserify.org/\">browserify</a>, an npm module that let\'s\nyou use <a href=\"http://nodejs.org/\">node</a>-style require() to organize your browser code and load modules installed by <a href=\"https://npmjs.org/\">npm</a> (as seen in the previous examples).</p>\n\n<p>WebTorrent is also available as a standalone script\n(<a href=\"https://github.com/feross/webtorrent/blob/master/webtorrent.min.js\"><code>webtorrent.min.js</code></a>) which exposes <code>WebTorrent</code> on the <code>window</code>\nobject, so it can be used with just a script tag:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>webtorrent.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;</pre></div>\n\n<p>The WebTorrent script is also hosted on fast, reliable CDN infrastructure (Cloudflare and\nMaxCDN) for easy inclusion on your site:</p>\n\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.jsdelivr.net/webtorrent/latest/webtorrent.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#in-nodejs\"><span class=\"octicon octicon-link\"></span></a>In node.js</h4>\n\n<p>WebTorrent also works in node.js, using the <em>same npm module!</em> It\'s mad science!</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#as-a-command-line-app\"><span class=\"octicon octicon-link\"></span></a>As a command line app</h4>\n\n<p>WebTorrent is available as a command line app. Here\'s how to use it:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install webtorrent -g\n$ webtorrent --help</pre></div>\n\n<p>To download a torrent:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ webtorrent magnet_uri</pre></div>\n\n<p>To stream a torrent to a device like <strong>AirPlay</strong> or <strong>Chromecast</strong>, just pass a flag:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ webtorrent magnet_uri --airplay</pre></div>\n\n<p>There are many supported streaming options:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>--airplay               Apple TV\n--chromecast            Chromecast\n--mplayer               MPlayer\n--mpv                   MPV\n--omx [jack]            omx [default: hdmi]\n--vlc                   VLC\n--xbmc                  XBMC\n--stdout                standard out [implies --quiet]</pre></div>\n\n<p>In addition to magnet uris, webtorrent supports <a href=\"https://github.com/feross/webtorrent#clientaddtorrentid-opts-function-ontorrent-torrent-\">many ways to specify a torrent</a>.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#api\"><span class=\"octicon octicon-link\"></span></a>API</h3>\n\n<p>This API should work exactly the same in node and the browser. Open an issue if this is\nnot the case.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#client--new-webtorrentopts\"><span class=\"octicon octicon-link\"></span></a><code>client = new WebTorrent([opts])</code></h4>\n\n<p>Create a new <code>WebTorrent</code> instance.</p>\n\n<p>If <code>opts</code> is specified, then the default options (shown below) will be overridden.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n  dht<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Boolean</span><span class=\"pl-k\">|</span><span class=\"pl-c1\">Object</span>,   <span class=\"pl-c\">// Enable DHT (default=true), or options object for DHT</span>\n  maxPeers<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>,      <span class=\"pl-c\">// Max number of peers to connect to per torrent (default=100)</span>\n  nodeId<span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span><span class=\"pl-k\">|</span>Buffer, <span class=\"pl-c\">// DHT protocol node ID (default=randomly generated)</span>\n  peerId<span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span><span class=\"pl-k\">|</span>Buffer, <span class=\"pl-c\">// Wire protocol peer ID (default=randomly generated)</span>\n  rtcConfig<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Object</span>,     <span class=\"pl-c\">// RTCPeerConnection configuration object (default=STUN only)</span>\n  tracker<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Boolean</span>,      <span class=\"pl-c\">// Whether or not to enable trackers (default=true)</span>\n  wrtc<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Object</span>           <span class=\"pl-c\">// Custom webrtc implementation (in node, specify the [wrtc](https://www.npmjs.com/package/wrtc) package)</span>\n}</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clientaddtorrentid-opts-function-ontorrent-torrent-\"><span class=\"octicon octicon-link\"></span></a><code>client.add(torrentId, [opts], [function ontorrent (torrent) {}])</code></h4>\n\n<p>Start downloading a new torrent. Aliased as <code>client.download</code>.</p>\n\n<p><code>torrentId</code> can be one of:</p>\n\n<ul><li>magnet uri (string)</li>\n<li>torrent file (buffer)</li>\n<li>info hash (hex string or buffer)</li>\n<li>parsed torrent (from <a href=\"https://github.com/feross/parse-torrent\">parse-torrent</a>)</li>\n<li>http/https url to a torrent file (string)</li>\n<li>filesystem path to a torrent file (string)</li>\n</ul><p>If <code>opts</code> is specified, then the default options (shown below) will be overridden.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n  announce<span class=\"pl-k\">:</span> [],   <span class=\"pl-c\">// Torrent trackers to use (added to list in .torrent or magnet uri)</span>\n  path<span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span>,   <span class=\"pl-c\">// Folder to download files to (default=`/tmp/webtorrent/`)</span>\n  store<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Function</span> <span class=\"pl-c\">// Custom chunk store (must follow [abstract-chunk-store](https://www.npmjs.com/package/abstract-chunk-store) API)</span>\n}</pre></div>\n\n<p>If <code>ontorrent</code> is specified, then it will be called when <strong>this</strong> torrent is ready to be\nused (i.e. metadata is available). Note: this is distinct from the \'torrent\' event which\nwill fire for <strong>all</strong> torrents.</p>\n\n<p>If you want access to the torrent object immediately in order to listen to events as the\nmetadata is fetched from the network, then use the return value of <code>client.add</code>. If you\njust want the file data, then use <code>ontorrent</code> or the \'torrent\' event.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clientseedinput-opts-function-onseed-torrent-\"><span class=\"octicon octicon-link\"></span></a><code>client.seed(input, [opts], [function onseed (torrent) {}])</code></h4>\n\n<p>Start seeding a new torrent.</p>\n\n<p><code>input</code> can be any of the following:</p>\n\n<ul><li>path to the file or folder on filesystem (string)</li>\n<li>W3C <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\">File</a> object (from an <code>&lt;input&gt;</code> or drag and drop)</li>\n<li>W3C <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileList\">FileList</a> object (basically an array of <code>File</code> objects)</li>\n<li>Node <a href=\"http://nodejs.org/api/buffer.html\">Buffer</a> object (works in <a href=\"https://www.npmjs.org/package/buffer\">the browser</a>)</li>\n</ul><p>Or, an <strong>array of <code>string</code>, <code>File</code>, or <code>Buffer</code> objects</strong>.</p>\n\n<p>If <code>opts</code> is specified, it should contain the following types of options:</p>\n\n<ul><li>options for <a href=\"https://github.com/feross/create-torrent#createtorrentinput-opts-function-callback-err-torrent-\">create-torrent</a> (to allow configuration of the .torrent file that is created)</li>\n<li>options for <code>client.add</code> (see above)</li>\n</ul><p>If <code>onseed</code> is specified, it will be called when the client has begun seeding the file.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clientontorrent-function-torrent-\"><span class=\"octicon octicon-link\"></span></a><code>client.on(\'torrent\', function (torrent) {})</code></h4>\n\n<p>Emitted when a torrent is ready to be used (i.e. metadata is available and store is\nready). See the torrent section for more info on what methods a <code>torrent</code> has.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clientremovetorrentid-function-callback-err-\"><span class=\"octicon octicon-link\"></span></a><code>client.remove(torrentId, [function callback (err) {}])</code></h4>\n\n<p>Remove a torrent from the client. Destroy all connections to peers and delete all saved\nfile data. If <code>callback</code> is specified, it will be called when file data is removed.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clientdestroyfunction-callback-err-\"><span class=\"octicon octicon-link\"></span></a><code>client.destroy([function callback (err) {}])</code></h4>\n\n<p>Destroy the client, including all torrents and connections to peers. If <code>callback</code> is specified, it will be called when the client has gracefully closed.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clienttorrents\"><span class=\"octicon octicon-link\"></span></a><code>client.torrents[...]</code></h4>\n\n<p>An array of all torrents in the client.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clientgettorrentid\"><span class=\"octicon octicon-link\"></span></a><code>client.get(torrentId)</code></h4>\n\n<p>Returns the torrent with the given <code>torrentId</code>. Convenience method. Easier than searching\nthrough the <code>client.torrents</code> array. Returns <code>null</code> if no matching torrent found.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clientratio\"><span class=\"octicon octicon-link\"></span></a><code>client.ratio</code></h4>\n\n<p>Seed ratio for all torrents in the client.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrent-api\"><span class=\"octicon octicon-link\"></span></a>torrent api</h3>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentinfohash\"><span class=\"octicon octicon-link\"></span></a><code>torrent.infoHash</code></h4>\n\n<p>Get the info hash of the torrent.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentmagneturi\"><span class=\"octicon octicon-link\"></span></a><code>torrent.magnetURI</code></h4>\n\n<p>Get the magnet URI of the torrent.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentfiles\"><span class=\"octicon octicon-link\"></span></a><code>torrent.files[...]</code></h4>\n\n<p>An array of all files in the torrent. See the file section for more info on what methods\nthe file has.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentswarm\"><span class=\"octicon octicon-link\"></span></a><code>torrent.swarm</code></h4>\n\n<p>The attached <a href=\"https://github.com/feross/bittorrent-swarm\">bittorrent-swarm</a> instance.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentreceived\"><span class=\"octicon octicon-link\"></span></a><code>torrent.received</code></h4>\n\n<p>Get total bytes received from peers (including invalid data)</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentdownloaded\"><span class=\"octicon octicon-link\"></span></a><code>torrent.downloaded</code></h4>\n\n<p>Get total bytes received from peers (excluding invalid data)</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentpath\"><span class=\"octicon octicon-link\"></span></a><code>torrent.path</code></h4>\n\n<p>Get the torrent download location</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentdestroy\"><span class=\"octicon octicon-link\"></span></a><code>torrent.destroy()</code></h4>\n\n<p>Alias for <code>client.remove(torrent)</code>.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentaddpeeraddr\"><span class=\"octicon octicon-link\"></span></a><code>torrent.addPeer(addr)</code></h4>\n\n<p>Adds a peer to the underlying <a href=\"https://github.com/feross/bittorrent-swarm\">bittorrent-swarm</a> instance.</p>\n\n<p>Returns <code>true</code> if peer was added, <code>false</code> if peer was blocked by the loaded blocklist.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentselectstart-end-priority-notify\"><span class=\"octicon octicon-link\"></span></a><code>torrent.select(start, end, [priority], [notify])</code></h4>\n\n<p>Selects a range of pieces to prioritize starting with <code>start</code> and ending with <code>end</code> (both inclusive)\nat the given <code>priority</code>. <code>notify</code> is an optional callback to be called when the selection is updated\nwith new data.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentdeselectstart-end-priority\"><span class=\"octicon octicon-link\"></span></a><code>torrent.deselect(start, end, priority)</code></h4>\n\n<p>Deprioritizes a range of previously selected pieces.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentcriticalstart-end\"><span class=\"octicon octicon-link\"></span></a><code>torrent.critical(start, end)</code></h4>\n\n<p>Marks a range of pieces as critical priority to be downloaded ASAP. From <code>start</code> to <code>end</code>\n(both inclusive).</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentcreateserveropts\"><span class=\"octicon octicon-link\"></span></a><code>torrent.createServer([opts])</code></h4>\n\n<p>Create an http server to serve the contents of this torrent, dynamically fetching the\nneeded torrent pieces to satisfy http requests. Range requests are supported.</p>\n\n<p>Returns an <code>http.Server</code> instance (got from calling <code>http.createServer</code>). If <code>opts</code> is specified, it is passed to the <code>http.createServer</code> function.</p>\n\n<p>Visiting the root of the server <code>/</code> will show a list of links to individual files. Access\nindividual files at <code>/&lt;index&gt;</code> where <code>&lt;index&gt;</code> is the index in the <code>torrent.files</code> array\n(e.g. <code>/0</code>, <code>/1</code>, etc.)</p>\n\n<p>Here is a usage example:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> client <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">WebTorrent</span>()\n<span class=\"pl-k\">var</span> magnetUri <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>...<span class=\"pl-pds\">\'</span></span>\n\n<span class=\"pl-smi\">client</span>.<span class=\"pl-c1\">add</span>(magnetUri, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">torrent</span>) {\n  <span class=\"pl-c\">// create HTTP server for this torrent</span>\n  <span class=\"pl-k\">var</span> server <span class=\"pl-k\">=</span> <span class=\"pl-smi\">torrent</span>.<span class=\"pl-en\">createServer</span>()\n  <span class=\"pl-smi\">server</span>.<span class=\"pl-en\">listen</span>(port) <span class=\"pl-c\">// start the server listening to a port</span>\n\n  <span class=\"pl-c\">// visit http://localhost:&lt;port&gt;/ to see a list of files</span>\n\n  <span class=\"pl-c\">// access individual files at http://localhost:&lt;port&gt;/&lt;index&gt; where index is the index</span>\n  <span class=\"pl-c\">// in the torrent.files array</span>\n\n  <span class=\"pl-c\">// later, cleanup...</span>\n  <span class=\"pl-smi\">server</span>.<span class=\"pl-c1\">close</span>()\n  <span class=\"pl-smi\">client</span>.<span class=\"pl-en\">destroy</span>()\n})</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentondone-function--\"><span class=\"octicon octicon-link\"></span></a><code>torrent.on(\'done\', function () {})</code></h4>\n\n<p>Emitted when all the torrent\'s files have been downloaded</p>\n\n<p>Here is a usage example:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">torrent</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>done<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span>(){\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>torrent finished downloading<span class=\"pl-pds\">\'</span></span>);\n  <span class=\"pl-smi\">torrent</span>.<span class=\"pl-smi\">files</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">file</span>){\n     <span class=\"pl-c\">// do something with file</span>\n  })\n})</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentondownload-function-chunksize-\"><span class=\"octicon octicon-link\"></span></a><code>torrent.on(\'download\', function (chunkSize) {})</code></h4>\n\n<p>Emitted every time a new chunk of data arrives, it\'s useful for reporting the current torrent status, for instance:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">torrent</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>download<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">chunkSize</span>){\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>chunk size: <span class=\"pl-pds\">\'</span></span> <span class=\"pl-k\">+</span> chunkSize);\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>total downloaded: <span class=\"pl-pds\">\'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">torrent</span>.<span class=\"pl-smi\">downloaded</span>);\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>download speed: <span class=\"pl-pds\">\'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">torrent</span>.<span class=\"pl-en\">downloadSpeed</span>());\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>progress: <span class=\"pl-pds\">\'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">torrent</span>.<span class=\"pl-smi\">progress</span>);\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>======<span class=\"pl-pds\">\'</span></span>);\n})</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#torrentonwire-function-wire-\"><span class=\"octicon octicon-link\"></span></a><code>torrent.on(\'wire\', function (wire) {})</code></h4>\n\n<p>Emitted whenever a new peer is connected for this torrent. <code>wire</code> is an instance of\n<a href=\"https://github.com/feross/bittorrent-protocol\"><code>bittorrent-protocol</code></a>, which is a\nnode.js-style duplex stream to the remote peer. This event can be used to specify\n<a href=\"https://github.com/feross/bittorrent-protocol#extension-api\">custom BitTorrent protocol extensions</a>.</p>\n\n<p>Here is a usage example:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> MyExtension <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>./my-extension<span class=\"pl-pds\">\'</span></span>)\n\n<span class=\"pl-smi\">torrent1</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>wire<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">wire</span>, <span class=\"pl-smi\">addr</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>connected to peer with address <span class=\"pl-pds\">\'</span></span> <span class=\"pl-k\">+</span> addr)\n  <span class=\"pl-smi\">wire</span>.<span class=\"pl-en\">use</span>(MyExtension)\n})</pre></div>\n\n<p>See the <code>bittorrent-protocol</code>\n<a href=\"https://github.com/feross/bittorrent-protocol#extension-api\">extension api docs</a> for more\ninformation on how to define a protocol extension.</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#file-api\"><span class=\"octicon octicon-link\"></span></a>file api</h3>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#filename\"><span class=\"octicon octicon-link\"></span></a><code>file.name</code></h4>\n\n<p>File name, as specified by the torrent. <em>Example: \'some-filename.txt\'</em></p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#filepath\"><span class=\"octicon octicon-link\"></span></a><code>file.path</code></h4>\n\n<p>File path, as specified by the torrent. <em>Example: \'some-folder/some-filename.txt\'</em></p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#filelength\"><span class=\"octicon octicon-link\"></span></a><code>file.length</code></h4>\n\n<p>File length (in bytes), as specified by the torrent. <em>Example: 12345</em></p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#fileselect\"><span class=\"octicon octicon-link\"></span></a><code>file.select()</code></h4>\n\n<p>Selects the file to be downloaded, but at a lower priority than files with streams.\nUseful if you know you need the file at a later stage.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#filedeselect\"><span class=\"octicon octicon-link\"></span></a><code>file.deselect()</code></h4>\n\n<p>Deselects the file, which means it won\'t be downloaded unless someone creates a stream\nfor it.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#stream--filecreatereadstreamopts\"><span class=\"octicon octicon-link\"></span></a><code>stream = file.createReadStream([opts])</code></h4>\n\n<p>Create a <a href=\"http://nodejs.org/api/stream.html#stream_class_stream_readable\">readable stream</a>\nto the file. Pieces needed by the stream will be prioritized highly and fetched from the\nswarm first.</p>\n\n<p>You can pass <code>opts</code> to stream only a slice of a file.</p>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n  start<span class=\"pl-k\">:</span> startByte,\n  end<span class=\"pl-k\">:</span> endByte\n}</pre></div>\n\n<p>Both <code>start</code> and <code>end</code> are inclusive.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#filegetbufferfunction-callback-err-buffer-\"><span class=\"octicon octicon-link\"></span></a><code>file.getBuffer(function callback (err, buffer) {})</code></h4>\n\n<p>Get the file contents as a <code>Buffer</code>.</p>\n\n<p>The file will be fetched from the network with highest priority, and <code>callback</code> will be\ncalled once the file is ready. <code>callback</code> must be specified, and will be called with a an\n<code>Error</code> (or <code>null</code>) and the file contents as a <code>Buffer</code>.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">file</span>.<span class=\"pl-en\">getBuffer</span>(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">buffer</span>) {\n  <span class=\"pl-k\">if</span> (err) <span class=\"pl-k\">throw</span> err\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(buffer) <span class=\"pl-c\">// &lt;Buffer 00 98 00 01 01 00 00 00 50 ae 07 04 01 00 00 00 0a 00 00 00 00 00 00 00 78 ae 07 04 01 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span>\n})</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#fileappendtorootelem-function-callback-err-elem-\"><span class=\"octicon octicon-link\"></span></a><code>file.appendTo(rootElem, function callback (err, elem) {})</code></h4>\n\n<p>Show the file in a the browser by appending it to the DOM. This is a powerful function\nthat handles many file types like video (.mp4, .webm, .m4v, etc.), audio (.m4a, .mp3,\n.wav, etc.), images (.jpg, .gif, .png, etc.), and other file formats (.pdf, .md, .txt,\netc.).</p>\n\n<p>The file will be fetched from the network with highest priority and streamed into the\npage (if it\'s video or audio). In some cases, video or audio files will not be streamable\nbecause they\'re not in a format that the browser can stream so the file will be fully downloaded before being played. For other non-streamable file types like images and PDFs,\nthe file will be downloaded then displayed.</p>\n\n<p><code>rootElem</code> is a container element (CSS selector or reference to DOM node) that the content\nwill be shown in. A new DOM node will be created for the content and appended to\n<code>rootElem</code>.</p>\n\n<p><code>callback</code> will be called once the file is visible to the user. <code>callback</code> must be\nspecified, and will be called with a an <code>Error</code> (or <code>null</code>) and the new DOM node that is\ndisplaying the content.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">file</span>.<span class=\"pl-en\">appendTo</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>#containerElement<span class=\"pl-pds\">\'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">elem</span>) {\n  <span class=\"pl-k\">if</span> (err) <span class=\"pl-k\">throw</span> err <span class=\"pl-c\">// file failed to download or display in the DOM</span>\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>New DOM node with the content<span class=\"pl-pds\">\'</span></span>, elem)\n})</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#filegetbloburlfunction-callback-err-url-\"><span class=\"octicon octicon-link\"></span></a><code>file.getBlobURL(function callback (err, url) {})</code></h4>\n\n<p>Get a url which can be used in the browser to refer to the file.</p>\n\n<p>The file will be fetched from the network with highest priority, and <code>callback</code> will be\ncalled once the file is ready. <code>callback</code> must be specified, and will be called with a an\n<code>Error</code> (or <code>null</code>) and the Blob URL (<code>String</code>).</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">file</span>.<span class=\"pl-en\">getBlobURL</span>(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">url</span>) {\n  <span class=\"pl-k\">if</span> (err) <span class=\"pl-k\">throw</span> err\n  <span class=\"pl-k\">var</span> a <span class=\"pl-k\">=</span> <span class=\"pl-smi\">document</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>a<span class=\"pl-pds\">\'</span></span>)\n  <span class=\"pl-smi\">a</span>.<span class=\"pl-smi\">download</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">file</span>.<span class=\"pl-c1\">name</span>\n  <span class=\"pl-smi\">a</span>.<span class=\"pl-c1\">href</span> <span class=\"pl-k\">=</span> url\n  <span class=\"pl-smi\">a</span>.<span class=\"pl-smi\">textContent</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>Download <span class=\"pl-pds\">\'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">file</span>.<span class=\"pl-c1\">name</span>\n  <span class=\"pl-smi\">document</span>.<span class=\"pl-c1\">body</span>.<span class=\"pl-c1\">appendChild</span>(a)\n})</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#modules\"><span class=\"octicon octicon-link\"></span></a>Modules</h3>\n\n<p>Most of the active development is happening inside of small npm modules which are used by WebTorrent.</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#the-node-way\"><span class=\"octicon octicon-link\"></span></a>The Node Way™</h4>\n\n<blockquote>\n<p>\"When applications are done well, they are just the really application-specific, brackish residue that can\'t be so easily abstracted away. All the nice, reusable components sublimate away onto github and npm where everybody can collaborate to advance the commons.\" — substack from <a href=\"http://substack.net/how_I_write_modules\">\"how I write modules\"</a></p>\n</blockquote>\n\n<p><a href=\"https://camo.githubusercontent.com/936a08778c7e4885053d148c07bbd2339dfbdd80/68747470733a2f2f6665726f73732e6e65742f782f6e6f6465322e676966\"><img src=\"https://camo.githubusercontent.com/936a08778c7e4885053d148c07bbd2339dfbdd80/68747470733a2f2f6665726f73732e6e65742f782f6e6f6465322e676966\" alt=\"node.js is shiny\" /></a></p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#modules-1\"><span class=\"octicon octicon-link\"></span></a>Modules</h4>\n\n<p>These are the main modules that make up WebTorrent:</p>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#contribute\"><span class=\"octicon octicon-link\"></span></a>Contribute</h3>\n\n<p>WebTorrent is an <strong><a href=\"https://github.com/feross/webtorrent/blob/master/CONTRIBUTING.md\">OPEN Open Source Project</a></strong>. Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit.</p>\n\n<p>WebTorrent is only possible due to the excellent work of the following contributors:</p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clone-the-code\"><span class=\"octicon octicon-link\"></span></a>Clone the code</h4>\n\n<div class=\"highlight highlight-source-shell\"><pre>git clone https://github.com/feross/webtorrent.git\n<span class=\"pl-c1\">cd</span> webtorrent\nnpm install\n./bin/cmd.js --help</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#javascript-standard-style\"><span class=\"octicon octicon-link\"></span></a>JavaScript Standard Style</h4>\n\n<p>WebTorrent uses <a href=\"https://github.com/feross/standard\">JavaScript Standard Style</a>.</p>\n\n<p><a href=\"https://github.com/feross/standard\"><img src=\"https://camo.githubusercontent.com/e06d9d72eecca61c1ba39fdf19868f70fcb3a9b3/68747470733a2f2f63646e2e7261776769742e636f6d2f6665726f73732f7374616e646172642f6d61737465722f62616467652e737667\" alt=\"js-standard-style\" /></a></p>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#enable-debug-logs\"><span class=\"octicon octicon-link\"></span></a>Enable debug logs</h4>\n\n<p>In <strong>node</strong>, enable debug logs by setting the <code>DEBUG</code> environment variable to the name of the\nmodule you want to debug (e.g. <code>bittorrent-protocol</code>, or <code>*</code> to print <strong>all logs</strong>).</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>DEBUG=<span class=\"pl-k\">*</span> webtorrent</pre></div>\n\n<p>Of course, this also works for the development version:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>DEBUG=<span class=\"pl-k\">*</span> ./bin/cmd.js</pre></div>\n\n<p>In the <strong>browser</strong>, enable debug logs by running this in the developer console:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">localStorage</span>.<span class=\"pl-smi\">debug</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>*<span class=\"pl-pds\">\'</span></span></pre></div>\n\n<p>Disable by running this:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">localStorage</span>.<span class=\"pl-en\">removeItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>debug<span class=\"pl-pds\">\'</span></span>)</pre></div>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#clone-all-dependencies\"><span class=\"octicon octicon-link\"></span></a>Clone all dependencies</h4>\n\n<p>WebTorrent is a modular BitTorrent client, so functionality is split up into many\nnpm modules. You can <code>git clone</code> all the relevant dependencies with one command. This\nmakes it easier to send PRs:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>./bin/clone.sh</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#talks-about-webtorrent\"><span class=\"octicon octicon-link\"></span></a>Talks about WebTorrent</h3>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#known-issues\"><span class=\"octicon octicon-link\"></span></a>Known issues</h3>\n\n<h4><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#downloads-dont-start-on-chromebook\"><span class=\"octicon octicon-link\"></span></a>Downloads don\'t start on Chromebook</h4>\n\n<p>Chromebooks are set to refuse all incoming connections by default. To change this, run:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>sudo iptables -P INPUT ACCEPT</pre></div>\n\n<h3><a class=\"anchor\" href=\"https://github.com/feross/webtorrent#license\"><span class=\"octicon octicon-link\"></span></a>License</h3>\n\n<p>MIT. Copyright (c) <a href=\"http://feross.org\">Feross Aboukhadijeh</a>.</p>\n\n<p><a href=\"https://github.com/feross/webtorrent/blob/master/img/logo.png\"><img src=\"https://github.com/feross/webtorrent/raw/master/img/logo.png\" alt=\"Magic\" /></a></p>\n',1),(278,'Using an SSH Bastion Host - Scott\'s Weblog - The weblog of an IT pro specializing in virtualization, networking, open source, and cloud computing','http://blog.scottlowe.org/2015/11/21/using-ssh-bastion-host/',0,0,'\n  \n  <span class=\"post-date\">21 November 2015</span>\n  <p>Secure Shell, or SSH, is something of a “Swiss Army knife” when it comes to administering and managing Linux (and other UNIX-like) workloads. In this post, I’m going to explore a very specific use of SSH: the <em>SSH bastion host</em>. In this sort of arrangement, SSH traffic to servers that are not directly accessible via SSH is instead directed through a bastion host, which proxies the connection between the SSH client and the remote servers.</p>\n\n<p>At first, it may sound like the use of an SSH bastion host is a pretty specialized use case. In reality, though, I believe this is a design pattern that can actually be useful in a variety of situations. I plan to explore the use cases for an SSH bastion host in a future blog post.</p>\n\n<p>This diagram illustrates the concept of using an SSH bastion host to provide access to Linux instances running inside some sort of cloud network (like an OpenStack Neutron tenant network or an AWS VPC):</p>\n\n<p><img src=\"http://blog.scottlowe.org/public/img/ssh-bastion-host.png\" alt=\"SSH bastion host diagram\" /></p>\n\n<p>Let’s take a closer look at the nuts and bolts of actually setting up an SSH bastion host.</p>\n\n<p>First, you’ll want to ensure you have public key authentication properly configured, both on the bastion host as well as the remote instances. This is a topic that has been discussed extensively in other locations (<a href=\"https://kb.iu.edu/d/aews\">here</a>, for example), so I won’t cover it here in any great detail. You can use the same key for both the bastion host and the remote instances, or different keys; you’ll just need to ensure that the keys are loaded by <code>ssh-agent</code> appropriately so they can be used as needed. (Note that the use of public key authentication isn’t strictly <em>required</em>, but it’s something you really should do.)</p>\n\n<p>Second, you’ll want to ensure that SSH agent forwarding is enabled when you connect from the SSH client to the SSH bastion host. This can be done a couple of different ways. You can do it via the <code>ssh</code> command line, like this:</p>\n\n<pre><code>ssh -A user@bastion\n</code></pre>\n\n<p>Or you can do it in an SSH config file, like this:</p>\n\n<pre><code>Host bastion\n  ForwardAgent yes\n</code></pre>\n\n<p>If you choose to do it via an SSH config file, be cautious not to use a wildcard host (keeping in mind that SSH config files allow you to do things like <code>Host *.cloud.domain.net</code>), thus forwarding unlocked SSH keys to more hosts than expected/anticipated/desired.</p>\n\n<p>Third, you’ll want to ensure that DNS resolution is working—both from the client to the bastion as well as from the bastion to the remote instances. The bastion host is going to use the hostname specified on the <code>ssh</code> command line, so if it can’t resolve the name the connection will fail.</p>\n\n<p>Finally, you’ll want to configure the <code>ProxyCommand</code> setting for the remote instances in your SSH configuration file. For example, let’s say that you had a remote instance named “private1” and you wanted to run SSH connections through a bastion host called “bastion”. The appropriate SSH configuration might look something like this:</p>\n\n<pre><code>Host private1\n  IdentityFile ~/.ssh/rsa_private_key\n  ProxyCommand ssh user@bastion -W %h:%p\n\nHost bastion\n  IdentityFile ~/.ssh/bastion_rsa_key\n  ForwardAgent yes\n</code></pre>\n\n<p>With this configuration in place, when you type <code>ssh user@private1</code> SSH will establish a connection to the bastion host and then <em>from the bastion host</em> connect to “private1”, using the specified keys at each step along the way. The user won’t see any of this; he or she will just see a shell for “private1” appear. If you dig a bit further, though (try running <code>who</code> on the remote node), you’ll see the connections are coming from the bastion host, not the original SSH client. Handy, eh?</p>\n\n<p>In a future blog post, look for me to explore one or more examples of where using an SSH bastion host might be very useful (or even necessary).</p>\n\n<h2>Additional Resources</h2>\n\n<p>I found <a href=\"https://10mi2.wordpress.com/2015/01/14/using-ssh-through-a-bastion-host-transparently/\">this article</a> to be extraordinarily helpful while working through the details of an SSH bastion host configuration.</p>\n\n\n  <span class=\"post-date\">Tags:\n    \n    \n\n\n  <a href=\"http://blog.scottlowe.org/tags/#CLI\">CLI</a>\n  \n    ·\n  \n\n  <a href=\"http://blog.scottlowe.org/tags/#Linux\">Linux</a>\n  \n    ·\n  \n\n  <a href=\"http://blog.scottlowe.org/tags/#Networking\">Networking</a>\n  \n    ·\n  \n\n  <a href=\"http://blog.scottlowe.org/tags/#SSH\">SSH</a>\n  \n    ·\n  \n\n  <a href=\"http://blog.scottlowe.org/tags/#Security\">Security</a>\n  \n\n\n\n  </span>\n  \n    <span class=\"post-date\">\n    <i class=\"fa fa-arrow-circle-left\"></i> Previous Post: <a href=\"http://blog.scottlowe.org/2015/11/17/technology-short-take-56/\">Technology Short Take #56</a></span>\n  \n  \n    <span class=\"post-date\">\n    Next Post: <a href=\"http://blog.scottlowe.org/2015/11/23/bootstrapping-cloud-instances-ansible/\">Bootstrapping Cloud Instances into Ansible</a> <i class=\"fa fa-arrow-circle-right\"></i></span>\n  \n\n  <span class=\"post-sharing\"></span><p>Be social and share this post!<br /><a href=\"https://www.facebook.com/sharer/sharer.php?u=http://blog.scottlowe.org/2015/11/21/using-ssh-bastion-host/\" title=\"Share on Facebook\"><i class=\"fa fa-facebook-square fa-2x\"></i></a> \n<a href=\"https://twitter.com/intent/tweet?url=http://blog.scottlowe.org/2015/11/21/using-ssh-bastion-host/&amp;text=Using%20an%20SSH%20Bastion%20Host\" title=\"Share on Twitter\"><i class=\"fa fa-twitter-square fa-2x\"></i></a> \n<a href=\"https://plus.google.com/share?url=http://blog.scottlowe.org/2015/11/21/using-ssh-bastion-host/\" title=\"Share on Google Plus\"><i class=\"fa fa-google-plus-square fa-2x\"></i></a></p>\n',1),(279,'Arduino Meets Linux: Arduino Introduces Its 3rd Generation Platform','http://electronics360.globalspec.com/article/5995/arduino-meets-linux-arduino-introduces-its-3rd-generation-platform',0,0,'\n		<p>The Arduino platform\'s simplicity, open architecture and ease of use helped make it the most popular embedded development tool within the Maker community. In this article, we will look at the new Linino framework, which makes it possible to seamlessly integrate Linux into the Arduino platform as well as some of the boards, protocols and development tools that can support advanced functionality, such as real-time control of multiple functions, IoT applications and integration of cloud-based services.</p>\n<p><b>In the Beginning</b></p>\n<p>The first Arduino boards were powered by Atmel\'s AVR family of 8-bit microcontrollers that were great for simple tasks such as controlling lights, power supplies or motors. However, as Arduino\'s popularity grew, new boards sporting more powerful 16-and 32-bit MCUs were introduced to support increasingly-demanding applications. Likewise, many new plug-in \"<a href=\"http://www.arduino.org/products/shields\">shields</a>\" added powerful wired and wireless networking capabilities, as well as I/O options ranging from motion sensing to motor control.</p>\n<p><b>Arduino + Linux = Open-Source Awesomeness</b></p>\n<p><b><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-YunPhoto.jpg\" height=\"196\" width=\"263\" alt=\"IHS-151021-Arduino-YunPhoto.jpg\" /></span><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-YuniBridgeDiag.jpg\" height=\"183\" width=\"321\" alt=\"IHS-151021-Arduino-YuniBridgeDiag.jpg\" /></span></b></p>\n<p><b>Fig.1: The Arduino Yun is a 3<sup>rd</sup>-generation dual-processor Arduino board (left) which uses the Linino Bridge Protocol to share resources and act as a command/data pipeline (right). Images credit: Arduino.org. </b></p>\n<p>Now, a third generation of Arduino boards is emerging that contains two processors. 3<sup>rd</sup>-gen boards such as the Arduino Yun. (Fig.1) have an embedded microcontroller (MCU) and a more powerful microprocessor Unit (MPU), similar to those found in PCs and mobile devices. The MCU (typically an Atmel <a href=\"http://www.atmel.com/dyn/resources/prod_documents/7766S.pdf\">ATmega32x</a> device) supports the real-world I/O functionality traditionally handled by the Arduino platform. The MPU is typically based on the MIPS architecture (such as the Atheros AR9331) and powerful enough to support application languages such as C/C++, Python and Java. The microprocessor can also support multiple communication protocols (Wi-Fi, TCP/IP, HTTP etc) and web-based services (Chat, e-mail, Twitter, AllJoyn etc).</p>\n<p>This division of labor frees the MCU to handle all the traditional close-to-hardware functions that the original Arduino was designed to, leaving the CPU free to support higher-level applications and compute-intensive communications tasks. Splitting functionality also allows the microprocessor to run LininoOS, a Linux distribution based on OpenWRT (Fig.2) while the MCU to still runs conventional Arduino code. The Arduino MCU communicates with its higher-powered companion using a protocol stack called LininoIO.</p>\n<p><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-Linino-IO-Protocol.jpg\" height=\"200\" width=\"340\" alt=\"IHS-151021-Arduino-Linino-IO-Protocol.jp\" /></span><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-LininoOS.jpg\" height=\"202\" width=\"313\" alt=\"IHS-151021-Arduino-LininoOS.jpg\" /></span></p>\n<p><b>Fig.2: Linino\'s IO/OS subsystem enables the MCU to transparently share its I/O peripherals with the platform\'s MPU. Image credit: Arduino.org.</b></p>\n<p>The MCUIO/LININOIO subsystem allows a microprocessor, connected to the Arduino\'s MCU, to see the MCU\'s peripherals as standard Linux peripherals (i.e. GPIOs, I<sup>2</sup>C adapters, PWM channels, etc). The basic communication protocol is completely generic, it just defines ways to read and write a (virtualized) memory space on the MCU. Standard vendor independent memory maps are then defined for each kind of MCU peripheral, so that hardware-specific implementation details can be ignored by the MPU. The protocol is transport independent, requiring only a wired or wireless bidirectional channel (for instance rs232 or even a network connection). Linino IO also enables a single microprocessor to communicate with up to 128 MCUs. As a result, an MPU running Linino OS can run applications written in higher-level languages (Python, Bash, Lua etc), which controls the entire board and all the devices attached to it.</p>\n<p>Communication between the MPU and MCU is normally handled by the Bridge library (Fig1b), a collection of utility classes that support different kinds of functionality. The Bridge library facilitates communication between the two processors, giving Arduino sketches the ability to run shell scripts, communicate with network interfaces and receive information from the AR9331 processor.</p>\n<p>The third pillar of the new software architecture is Arduino Ciao<i>,</i> a library of routines that enables Arduino sketches to communicate with the \"outside World\" (Fig.3). By simplifying interactions between the MCU and Linino OS, Ciao makes it easy to establish a variety of connections with most common protocols, third-party services and social networks.</p>\n<p><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-Ciao.jpg\" height=\"194\" width=\"318\" alt=\"IHS-151021-Arduino-Ciao.jpg\" /></span></p>\n<p><b>Fig.3: The Arduino Ciao library enables the MCU to access web-based services and resources. Image credit: Arduino.org.</b></p>\n<p>The Ciao library\'s modular routines support several logical connections capable of interacting with system resources (file system, console and memory). Others can be used to communicate with the most common and useful protocols (XMPP, HTTP, WebSocket, COAP, etc) and applications (Jabber, WeChat, Twitter, Facebook, etc.)</p>\n<p>Together, the Linino OS, Linino IO, Bridge and Ciao form a complete Linux system for Internet of Things (IoT) applications.</p>\n<p><b>A New Development Environment</b></p>\n<p>In order to support concurrent operation of Arduino and Linino code, the folks at Arduino had to create <a href=\"http://labs.arduino.org/Arduino+Studio\">Arduino Studio</a>, a new development environment that breaks from the monolithic architecture and a centralized development model of the original <a href=\"http://labs.arduino.org/Arduino+IDE\">Arduino IDE</a>. Arduino Studio is intended to serve as a single editor for all environments, enabling developers to use it as a stand-alone, web/cloud-based or onboard embedded editor. By leveraging the versatility of Adobe <a href=\"http://brackets.io/\">Brackets</a> Studio supports all the functionality of the original Arduino IDE, but also offers a full-featured Linux development environment. Arduino Studio\'s features include <a href=\"http://labs.arduino.org/Code+Completion+and+in-line+Quick+Language+Reference#Code_Completion\">Code Completion</a>, an in-line <a href=\"http://labs.arduino.org/Code+Completion+and+in-line+Quick+Language+Reference#In-line_Quick_Guide\">Quick Language Reference</a> and a <a href=\"http://labs.arduino.org/Arduino+Studio+M0Pro+Debugger\">Debugger</a> that currently supports the Arduino <a href=\"http://www.arduino.org/products/arduino-m0-pro\">M0 Pro</a> platform.</p>\n<p><b>Hardware Resources</b></p>\n<p>There are already several boards that support the dual-processor Linino architecture. Many of these boards contain both an MPU and an MCU device, but as we will see shortly, the Linino platform also makes it possible to create extremely low-cost systems based on a single MCU.</p>\n<p>The <a href=\"http://world.arduino.org/en/arduino-yun.html\"><b>Arduino Yún</b></a> is based on the <a href=\"http://www.atmel.com/dyn/resources/prod_documents/7766S.pdf\">ATmega32u4</a> and the Atheros AR9331 (Fig.1a). It includes built-in Ethernet, a USB-A port, micro-SD card slot, 20 digital input/output pins (of which seven can be used as PWM outputs and 12 as analog inputs), a micro USB connection, an ICSP header and three reset buttons. Yún also has a Wi-Fi module built on board, allowing it to connect to a wireless router, or act as an access point. The Yún\'s ATmega32u4 has built-in USB communication, eliminating the need for a secondary processor. This allows it to appear to a connected computer as a mouse and keyboard, in addition to a virtual (CDC) serial / COM port.</p>\n<p><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-YunMiniPhoto.jpg\" height=\"197\" width=\"262\" alt=\"IHS-151021-Arduino-YunMiniPhoto.jpg\" /></span></p>\n<p><b>Fig.4: The Arduino Yún Mini. Image credit: Arduino.org. </b></p>\n<p><a href=\"http://www.arduino.org/products/boards/4-arduino-boards/arduino-yun-mini\"><b>Arduino Yún MINI</b></a> is a compact breadboard PCB powered by an ATmega 32u4 MCU and a Qualcomm Atheros AR9331 CPU. It has built-in WiFi and nearly all of the full-size Yún\'s I/O compliment, including a USB-based COM port. This open-source board design is also available as the <a href=\"http://www.linino.org/product/linino-one/\">Linino One</a> from <a href=\"http://www.linino.org/linino-modules/\">Linino.org</a>.</p>\n<p><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-Tian.jpg\" height=\"205\" width=\"273\" alt=\"IHS-151021-Arduino-Tian.jpg\" /></span></p>\n<p><b>Fig.5: Arduino Tian, scheduled for initial release in November 2015. Image credit: Arduino.org.</b></p>\n<p><a href=\"http://www.arduino.org/products/boards/4-arduino-boards/arduino-tian\"><b>Arduino TIAN</b></a> is similar to the Yun, but designed for projects that require more processing power and I/O capability. TIAN is equipped with Atmel’s 32-bit ARM-based SAMD21 MCU and the Qualcomm Atheros AR9342 MPU. Its integrated Wi-Fi module supports IEEE802.11n 2x2 2.4/5 GHz dual-band operation. It is also equipped with 4GB of eMMC memory that can store application code or additional Linux libraries.</p>\n<p><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-ChiWaWaModule.jpg\" height=\"190\" width=\"253\" alt=\"IHS-151021-Arduino-ChiWaWaModule.jpg\" /></span><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-ChiWaWaEVB.jpg\" height=\"183\" width=\"244\" alt=\"IHS-151021-Arduino-ChiWaWaEVB.jpg\" /></span></p>\n<p><b>Fig.6: Linino Chiwawa LGA module and evaluation board (left) and its companion Evaluation Board(right). Images credits: Arduino.org and Linino.org </b></p>\n<p>The <a href=\"http://www.linino.org/portfolio/chiwawa/\"><b>Linino Chiwawa</b></a> is an LGA module based on Arduino\'s open-source <b>101 Industrial</b> design. It is intended to be a low-cost drop-in LininoOS device for commercial applications and is expected to cost $10 or less in production quantities. It contains an Atheros MIPS AR9331 MPU, but does not include an MCU. The board has built-in Ethernet and Wi-Fi support, a USB-A port, micro-SD card slot, a micro-USB connection, PoE module connection and reset button. Chiwawa can connect to one or more Arduino MCU devices via a daughter board (aka \"collar\"), such as the <b>Chiwawa EVB</b> that serves as the module\'s evaluation/development board.</p>\n<p><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-Industrial101EVBPhoto.jpg\" height=\"217\" width=\"267\" alt=\"IHS-151021-Arduino-Industrial101EVBPhoto\" /></span><span class=\"img_inline\"><img src=\"http://electronics360.globalspec.com/images/assets/995/5995/IHS-151021-Arduino-Industrial101EVB.jpg\" height=\"207\" width=\"367\" alt=\"IHS-151021-Arduino-Industrial101EVB.jpg\" /></span></p>\n<p><b>Fig.7: The Arduino Industrial 101 evaluation board, scheduled for a November 2015 release, provides an Atmel MCU, a USB-based console interface and bridging of other real-world signals for the Arduino Industrial LGA module. Images credits: Arduino.org and Linino.org </b></p>\n<p>The <a href=\"http://labs.arduino.org/Arduino+Industrial+101\"><b>Arduino Industrial 101</b></a> is another evaluation/development board for the 101 Industrial LGA module described above. The board\'s integrated ATmega 32u4 MCU supports the LininoIO and Bridge libraries exports all the signals required to support communication, reset, 1 PWM output and two analog inputs. It also brings its USB and an Ethernet signal out to pin headers for easy diagnostic and debug.</p>\n<p>To contact the author of this article, email <a href=\"mailto:engineering360editors@ihs.com\">engineering360editors@ihs.com</a></p>\n<p><b>References:</b></p>\n<p>\"<i><a href=\"http://www.linino.org/wordpress/wp-content/uploads/2015/02/Fosdem_LininoIO.pdf\">Linino Technology - Virtualizing MCU peripherals</a></i>\"</p>\n<p><a href=\"http://wiki.linino.org/doku.php\">Linino Wiki</a></p>\n<p><a href=\"http://www.doghunter.org/wp-content/uploads/2014/03/data-sheet_Chiwaw-final_A4-size.pdf\">Linino Chiwawa</a></p> \n		\n		\n\n\n		',1),(280,'DIY Linux autopilot - cool for cats... and geeks','http://diydrones.com/profiles/blogs/diy-linux-autopilot-cool-for-cats-and-geeks',0,0,'\n                    <div class=\"xg_user_generated\">\n                <p><a href=\"http://api.ning.com/files/Ls0m4bJ0x4ejKA5MkU0ZAdlYFZixz9MRwZ9rQ6Td3fScJ5C3s7VRR1zkaYfLjl957CtKGzdnky8ngHDZ0geUa5RblNYeH17p/bbbminidiylinuxautopilot.jpg\"><img class=\"align-full\" src=\"http://api.ning.com/files/Ls0m4bJ0x4ejKA5MkU0ZAdlYFZixz9MRwZ9rQ6Td3fScJ5C3s7VRR1zkaYfLjl957CtKGzdnky8ngHDZ0geUa5RblNYeH17p/bbbminidiylinuxautopilot.jpg?width=550\" width=\"550\" alt=\"bbbminidiylinuxautopilot.jpg?width=550\" /></a></p>\n\n<p>I want to share with you the tremendous fun I\'m having with the BBBmini DIY ArduPilot project, which I discovered during the summer. Hopefully, I can demonstrate what a sexy DIY Linux Autopilot for around 100 bucks looks like and convince you why Linux autopilots are cooler than a cat playing the piano. <br /> <br />For some background, <a href=\"http://diydrones.com/profile/MirkoDenecke\">Mirko Denecke</a>, who designed the BBBmini, wrote an introductory blog post on his DIY ArduPilot Cape <a href=\"http://diydrones.com/profiles/blogs/bbbmini-as-linux-autopilot-based-on-ardupilot-and-beaglebone\">here</a>, and about further enhancements <a href=\"http://diydrones.com/profiles/blogs/bbbmini-enhancement\">here</a>.<br /> <br />Since Mirko released rev1.4 into the wild as <a href=\"http://diydrones.com/profiles/blogs/bbbmini-is-now-open-hardware\">Open Hardware</a>, there\'s been a <a href=\"http://diydrones.com/group/bbbmini\">BBBmini usergroup</a> down at DIY Drones, so that\'s a good place to see what\'s happening with the technology. <br /> <br />Rekindled enthusiasm <br /> <br />Being a Linux autopilot enthusiast, I naturally had a BeagleBone Black lying around and so was immediately attracted to this project. While building and getting the BBBmini into the air, I quickly realized that it was just the right kind of project I needed to rekindle my enthusiasm. <br /> <br />DIY Linux autopilots: What\'s the attraction? <br /> <br />I really love the idea of flying Linux autopilots and must admit I\'ve been hooked since I saw the first talks Andrew Tridgell and others gave on the topic, the early rumors about PXF, and the first boards like NavIO and  Erlebrain and so forth. I can see a bright future in this field, with the kind of  collaborative community effort such as that down at DIY Drones - which drives the technology forward. <br /> <br />After finally joining the Linux autopilot club, I had a kind of epiphany about how it opens a huge door to the opportunity of getting new ideas integrated much more easily thanks to the power of open innovation. The underlying Linux offers a sense of comfort and massive gains in usability. <br /> <br />Getting more out of your Autopilot <br /> <br />For example, I recently decided to configure my quad to log into different folders each day and rsync my log files to my NAS running samba at startup. That way I can archive them for later use as well and delete old logs when the SD cards becomes full. So, I should be find logs more easily and create a permanent archive, which was the initial reason for the set-up. This was all done with a few very basic modifications and open source tools / software made available by developers for public use. <br /> <br />Build your own DIY Linux autopilot <br /> <br />So, if you too like getting hands-on and want to make your own DIY Linux autopilot, now is the time to get your feet wet. <br /> <br />We\'re all keen to see what you\'ll come up with. For example, Mirko did a <a href=\"https://www.youtube.com/watch?v=7Ow5aKap_sI\">self-balancing robot based on the BBBmini and ArduPilot</a> software, and I have something in the pipeline to fill the long winter nights. <br /> <br />We are working on improving the BBBmini experience and since Mirko recently added dual-MPU9250 support we are now flying with two MPU9250\'s. We also have a few ideas for extra add-ons. <br /> <br />I have put together a <a href=\"http://bbbmini.com/\">BBBmini DIY Kit</a> to simplify the process of getting started, and if you are interested in buying a kit or just a <a href=\"https://github.com/mirkix/BBBMINI-PCB\">PCB</a> please <a href=\"http://diydrones.com/profiles/message/newFromProfile?screenName=3s26xa3rqtqfg&amp;target=http%3A%2F%2Fdiydrones.com\">send me a PM</a> or go <a href=\"http://bbbmini.com/buy-bbbmini/\">here</a>.<br /> <br />Here is a short video of me flying the bbbmini just for fun. <br /> <br /><iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/SnPXBse6fVU?feature=player_detailpage&amp;wmode=opaque\" frameborder=\"0\">[embedded content]</iframe> \n<br /> <br />The full project is available on <a href=\"https://github.com/mirkix/BBBMINI\">GitHub</a> and we invite interested users to contribute to the further development of the project. <br /> <br />Happy flying. <br /> <br />Cheers, <br />Linus <br /> </p>            </div>\n        ',1),(282,'Apcera Documentation â€” Apcera Platform Setup','http://docs.apcera.com/quickstart/apcera-setup/',0,0,'\n          \n          <p>Apcera provides you with an easy way to quickly deploy a multi-node environment and explore the platform.</p>\n\n<h2>Get started</h2>\n\n<p>To get started with the Apcera Platform, <a href=\"http://docs.apcera.com/quickstart/setup/apcera-setup-tool-usage/#download-the-apcera-setup-tool\">download the apcera-setup tool</a> and follow the instructions for your provider:</p>\n\n<p>When your platform is deployed, or if you need additional help along the way, these topics may be of interest:</p>\n\n<h2>Setup requirements</h2>\n\n<p>To run the <a href=\"http://docs.apcera.com/quickstart/setup/apcera-setup-tool-usage/\">apcera-setup tool</a> and deploy the Apcera Platform, we require the following:</p>\n\n<ul><li>Mac OS X or Windows 64-bit</li>\n  <li>12 GB free disk space</li>\n  <li>Internet connection</li>\n</ul><h2>Local deployment requirements</h2>\n\n<p>To deploy the Apcera Platform locally using virtual machines (VMs), we require the following:</p>\n\n<ul><li>Oracle VirtualBox 5, VMware Fusion 8, or VMware Workstation 12 installed on Mac OS X or Windows 64-bit</li>\n  <li>Approximately 8 GB of RAM to deploy the minimum platform (3 VMs)</li>\n  <li>Approximately 6 GB of RAM for the minimum runtime environment (2 VMs)</li>\n  <li>Approximately 3 GB of RAM for each additional Instance Manager (1 VM per IM, up to 5)</li>\n</ul><p>See also <a href=\"http://docs.apcera.com/quickstart/setup/apcera-setup-vmb-reqs/\">Apcera Platform Deployment Requirements for VirtualBox and VMware</a>.</p>\n\n<h2>AWS deployment requirements</h2>\n\n<p>To deploy the Apcera Platform hosted on Amazon Web Services (AWS), we require the following:</p>\n\n<ul><li>An AWS account with configured VPC, Subnet, and Security Group rules for hosting the Apcera Platform</li>\n  <li>One t2.micro instance for the Orchestrator VM (not required at runtime)</li>\n  <li>One t2.small instance for all Management Plane components</li>\n  <li>One m4.large instance for each Instance Manager (1 IM per runtime host, up to 5)</li>\n</ul><p>See also <a href=\"http://docs.apcera.com/quickstart/setup/apcera-setup-aws-reqs/\">Apcera Platform Deployment Requirements for AWS</a>.</p>\n\n<h2>Data we collect</h2>\n\n<p>When you deploy the Apcera Platform using the <a href=\"http://docs.apcera.com/quickstart/setup/apcera-setup-tool-usage/\">apcera-setup tool</a>, the following non-identifying telemetry data is sent to Apcera to help us improve the user experience:</p>\n\n<ul><li>Deployment date</li>\n  <li>Provisioner type (aws, virtualbox, vmware)</li>\n  <li>Number of IMs (1 - 5)</li>\n  <li>Deployment status (success, error, other)</li>\n</ul><p>Optionally, during the setup process, you can provide us with an email address. If you do, we will only use it to notify you of important software updates. The first time you register an email address, Apcera will send an email to that address requesting that you confirm your subscription.</p>\n\n          \n\n        ',1);
/*!40000 ALTER TABLE `entries` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `value` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'opensource');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags_entries`
--

DROP TABLE IF EXISTS `tags_entries`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags_entries` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `entry_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `entry_id` (`entry_id`),
  KEY `tag_id` (`tag_id`),
  CONSTRAINT `tags_entries_ibfk_1` FOREIGN KEY (`entry_id`) REFERENCES `entries` (`id`) ON DELETE CASCADE,
  CONSTRAINT `tags_entries_ibfk_2` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags_entries`
--

LOCK TABLES `tags_entries` WRITE;
/*!40000 ALTER TABLE `tags_entries` DISABLE KEYS */;
/*!40000 ALTER TABLE `tags_entries` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'jason','1fb5fa8fb40663abf4325aa4d230a6a6c8fd4324','jason','jason@kumpf.io');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_config`
--

DROP TABLE IF EXISTS `users_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users_config` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `value` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_config`
--

LOCK TABLES `users_config` WRITE;
/*!40000 ALTER TABLE `users_config` DISABLE KEYS */;
INSERT INTO `users_config` VALUES (1,1,'pager','10'),(2,1,'language','en_EN.UTF8'),(3,1,'token','gksiTXF2CGQg5J7');
/*!40000 ALTER TABLE `users_config` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-11-26 17:19:50
